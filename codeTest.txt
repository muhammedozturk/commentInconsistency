x

private int currentDepth(){
  try {
    Integer oneBased=((Integer)DEPTH_FIELD.get(this));
    return oneBased - 1;
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
}

protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){
  print("kernel doesn't alter original datasets");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;
  boolean[] result=new boolean[2];
  Instances train=null;
  Kernel kernel=null;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0) {
      addMissing(train,missingLevel,predictorMissing,classMissing);
    }
    kernel=Kernel.makeCopies(getKernel(),1)[0];
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    Instances trainCopy=new Instances(train);
    kernel.buildKernel(trainCopy);
    compareDatasets(train,trainCopy);
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      print("Problem during building");
      println(": " + ex.getMessage() + "\n");
      println("Here is the dataset:\n");
      println("=== Train Dataset ===\n" + train.toString() + "\n");
    }
  }
  return result;
}

public static int unionSize(long[] x,long[] y){
  final int lx=x.length, ly=y.length;
  final int min=(lx < ly) ? lx : ly;
  int i=0, res=0;
  for (; i < min; i++) {
    res+=Long.bitCount(x[i] | y[i]);
  }
  for (; i < lx; i++) {
    res+=Long.bitCount(x[i]);
  }
  for (; i < ly; i++) {
    res+=Long.bitCount(y[i]);
  }
  return res;
}

public void testReverseOrder4() throws Exception {
  UUID id=UUID.randomUUID();
  GridCacheAdapter<String,String> cache=grid.internalCache();
  GridCacheContext<String,String> ctx=cache.context();
  GridCacheTestEntryEx entry1=new GridCacheTestEntryEx(ctx,"1");
  GridCacheTestEntryEx entry2=new GridCacheTestEntryEx(ctx,"2");
  GridCacheVersion ver1=version(1);
  GridCacheVersion ver2=version(2);
  GridCacheVersion ver3=version(3);
  GridCacheMvccCandidate v3k1=entry1.addLocal(3,ver3,0,true,false);
  GridCacheMvccCandidate v3k2=entry2.addLocal(3,ver3,0,true,false);
  linkCandidates(ctx,v3k1,v3k2);
  entry1.readyLocal(ver3);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  GridCacheMvccCandidate v1k1=entry1.addLocal(4,ver1,0,true,true);
  GridCacheMvccCandidate v1k2=entry2.addLocal(4,ver1,0,true,true);
  linkCandidates(ctx,v1k1,v1k2);
  entry1.readyLocal(ver1);
  entry2.readyLocal(ver1);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,false,false,false);
  checkLocal(v1k1,ver1,true,false,false);
  checkLocal(v1k2,ver1,true,false,false);
  GridCacheMvccCandidate v2k2=entry2.addRemote(id,5,ver2,0,false,false);
  checkRemote(v2k2,ver2,false,false);
  entry2.readyLocal(v3k2);
  checkLocal(v3k1,ver3,true,true,false);
  checkLocal(v3k2,ver3,true,true,false);
}

@Override public void closingOK(){
  List<AddUserFields.AttributeSpec> specs=new ArrayList<AddUserFields.AttributeSpec>();
  for (int i=0; i < m_listModel.size(); i++) {
    AddUserFields.AttributeSpec a=(AddUserFields.AttributeSpec)m_listModel.elementAt(i);
    specs.add(a);
  }
  if (m_modifyL != null) {
    m_modifyL.setModifiedStatus(AddUserFieldsCustomizer.this,true);
  }
  m_filter.setAttributeSpecs(specs);
}

public String toString(){
  StringBuffer text=new StringBuffer();
  if ((m_classAttribute == null)) {
    return "SMO: No model built yet.";
  }
  try {
    text.append("SMO\n\n");
    text.append("Kernel used:\n  " + m_kernel.toString() + "\n\n");
    for (int i=0; i < m_classAttribute.numValues(); i++) {
      for (int j=i + 1; j < m_classAttribute.numValues(); j++) {
        text.append("Classifier for classes: " + m_classAttribute.value(i) + ", "+ m_classAttribute.value(j)+ "\n\n");
        text.append(m_classifiers[i][j]);
        if (m_fitLogisticModels) {
          text.append("\n\n");
          if (m_classifiers[i][j].m_logistic == null) {
            text.append("No logistic model has been fit.\n");
          }
 else {
            text.append(m_classifiers[i][j].m_logistic);
          }
        }
        text.append("\n\n");
      }
    }
  }
 catch (  Exception e) {
    return "Can't print SMO classifier.";
  }
  return text.toString();
}

public final Sector union(Sector that){
  if (that == null)   return this;
  Angle minLat=this.minLatitude;
  Angle maxLat=this.maxLatitude;
  Angle minLon=this.minLongitude;
  Angle maxLon=this.maxLongitude;
  if (that.minLatitude.degrees < this.minLatitude.degrees)   minLat=that.minLatitude;
  if (that.maxLatitude.degrees > this.maxLatitude.degrees)   maxLat=that.maxLatitude;
  if (that.minLongitude.degrees < this.minLongitude.degrees)   minLon=that.minLongitude;
  if (that.maxLongitude.degrees > this.maxLongitude.degrees)   maxLon=that.maxLongitude;
  return new Sector(minLat,maxLat,minLon,maxLon);
}

private static boolean isDoubleEqual(double value,double valueToCompare){
  return (Math.abs(value - valueToCompare) < 0.001);
}

public void testIntValuePos(){
  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";
  BigDecimal aNumber=new BigDecimal(a);
  int result=-218520473;
  assertTrue("incorrect value",aNumber.intValue() == result);
}

private void walk(File directory,int depth,Collection<T> results) throws IOException {
  checkIfCancelled(directory,depth,results);
  if (handleDirectory(directory,depth,results)) {
    handleDirectoryStart(directory,depth,results);
    int childDepth=depth + 1;
    if (depthLimit < 0 || childDepth <= depthLimit) {
      checkIfCancelled(directory,depth,results);
      File[] childFiles=filter == null ? directory.listFiles() : directory.listFiles(filter);
      childFiles=filterDirectoryContents(directory,depth,childFiles);
      if (childFiles == null) {
        handleRestricted(directory,childDepth,results);
      }
 else {
        for (        File childFile : childFiles) {
          if (childFile.isDirectory()) {
            walk(childFile,childDepth,results);
          }
 else {
            checkIfCancelled(childFile,childDepth,results);
            handleFile(childFile,childDepth,results);
            checkIfCancelled(childFile,childDepth,results);
          }
        }
      }
    }
    handleDirectoryEnd(directory,depth,results);
  }
  checkIfCancelled(directory,depth,results);
}

public static Object[] ordinalArray(TupleSet tuples,String field){
  return ordinalArray(tuples,field,DefaultLiteralComparator.getInstance());
}

public void testDivideExceptionInvalidRM(){
  String a="1231212478987482988429808779810457634781384756794987";
  int aScale=15;
  String b="747233429293018787918347987234564568";
  int bScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  try {
    aNumber.divide(bNumber,100);
    fail("IllegalArgumentException has not been caught");
  }
 catch (  IllegalArgumentException e) {
    assertEquals("Improper exception message","Invalid rounding mode",e.getMessage());
  }
}

@Override public void datasetChanged(DatasetChangeEvent event){
  super.datasetChanged(event);
  if (this.subplots == null) {
    return;
  }
  XYDataset dataset=null;
  if (event.getDataset() instanceof XYDataset) {
    dataset=(XYDataset)event.getDataset();
  }
  for (  XYPlot subplot : this.subplots) {
    if (subplot.indexOf(dataset) >= 0) {
      subplot.configureRangeAxes();
    }
  }
}

public boolean onScheduleAsLibrary(Config config,Config runtime,IScheduler scheduler,PackingPlan packing){
  boolean ret=false;
  try {
    scheduler.initialize(config,runtime);
    ret=scheduler.onSchedule(packing);
    if (ret) {
      ret=SchedulerUtils.setLibSchedulerLocation(runtime,scheduler,false);
    }
 else {
      LOG.severe("Failed to invoke IScheduler as library");
    }
  }
  finally {
    scheduler.close();
  }
  return ret;
}

public static boolean isStringType(Type t){
  return t.equals(RefType.v("java.lang.String"));
}

public Entry updateOrCreateSource(User user,String id,String url,String title,Long modTime,Long createTime,boolean isAdmin,Errors errors){
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (url == null) {
    Errors.add(errors,errorMessages.errorUrlIsNull());
    return null;
  }
  Entry source=getEntryByUserIdAndUrl(user.getId(),url);
  if (source == null) {
    if (url.isEmpty()) {
      Errors.add(errors,errorMessages.errorUrlIsEmpty());
      return null;
    }
    if (title == null) {
      Errors.add(errors,errorMessages.errorTitleIsNull());
      return null;
    }
    if (title.isEmpty()) {
      Errors.add(errors,errorMessages.errorTitleIsEmpty());
      return null;
    }
    if (modTime == null) {
      Errors.add(errors,errorMessages.errorModTimeIsNull());
      return null;
    }
    if (createTime == null) {
      Errors.add(errors,errorMessages.errorCreateTimeIsNull());
      return null;
    }
    if (id != null && !idGenerator.isIdWellFormed(id)) {
      Errors.add(errors,errorMessages.errorIdIsInvalid());
      return null;
    }
    if (createTime.longValue() > modTime.longValue()) {
      modTime=createTime;
    }
    if (url != null) {
      url=cleanUpText(url);
    }
    if (title != null) {
      title=cleanUpText(title);
    }
    source=new Entry();
    source.setDb(db);
    if (id == null) {
      id=idGenerator.getAnotherId();
    }
    source.setId(id);
    source.setSourceUrl(url);
    source.setSourceTitle(title);
    source.setCreateTime(createTime);
    source.setType(Constants.source);
    source.setUserId(user.getId());
    db.persistEntry(source);
  }
 else   if (!canUserModifyEntry(user,source,isAdmin)) {
    Errors.add(errors,errorMessages.errorUserIsNotEntitledToModifyTheSource());
    return null;
  }
  source.setModTime(modTime);
  return source;
}

private void validateSqlStatement(String sql,int jdbcStatementIndex){
  Assert.isTrue(StringUtils.isNotBlank(sql),"JDBC statement [" + jdbcStatementIndex + "] SQL is required");
}

public static Long[] valuesOf(long[] array){
  Long[] dest=new Long[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Long.valueOf(array[i]);
  }
  return dest;
}

@Override public boolean isTraceEnabled(){
  return logger.isLoggable(Level.FINEST);
}

private static void useMissile(Player player){
  StackableItem projectilesItem=null;
  if (player.getRangeWeapon() != null) {
    projectilesItem=player.getAmmunition();
  }
  if (projectilesItem == null) {
    projectilesItem=player.getMissileIfNotHoldingOtherWeapon();
  }
  if (projectilesItem != null) {
    projectilesItem.removeOne();
  }
}

public TcpMatcher(final NetworkConfig config){
  super(config);
}

private int determineMaxLevelRec(int level,Node v){
  int newLevel=level;
  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {
    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);
  }
  return newLevel;
}

protected void requestPassCodeConfirmation(){
  clearBoxes();
  mPassCodeHdr.setText(R.string.pass_code_reenter_your_pass_code);
  mPassCodeHdrExplanation.setVisibility(View.INVISIBLE);
  mConfirmingPassCode=true;
}

private void addWorkerFailed(Worker w){
  final ReentrantLock mainLock=this.mainLock;
  mainLock.lock();
  try {
    if (w != null)     workers.remove(w);
    decrementWorkerCount();
    tryTerminate();
  }
  finally {
    mainLock.unlock();
  }
}

public void testInsert4() throws SQLException {
  DatabaseCreator.fillSimpleTable1(conn);
  statement.execute("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE2 + " SELECT id, speed*10 AS speed, size-1 AS size FROM "+ DatabaseCreator.SIMPLE_TABLE1);
  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.SIMPLE_TABLE2 + " AS a JOIN "+ DatabaseCreator.SIMPLE_TABLE1+ " AS b ON a.speed = 10*b.speed AND a.size = b.size-1");
  r.next();
  assertEquals("Should be 2 rows",2,r.getInt(1));
  r.close();
}

private synchronized void putMapEntry(String localId,MapEntry entry){
  if (!isLocalId(localId)) {
    throw new IllegalStateException("Tried to get invalid local id: \"" + localId + "\".");
  }
  JSONObject json=new JSONObject();
  try {
    json.put("retainCount",entry.retainCount);
    if (entry.objectId != null) {
      json.put("objectId",entry.objectId);
    }
  }
 catch (  JSONException je) {
    throw new IllegalStateException("Error creating local id map entry.",je);
  }
  File file=new File(diskPath,localId);
  if (!diskPath.exists()) {
    diskPath.mkdirs();
  }
  try {
    ParseFileUtils.writeJSONObjectToFile(file,json);
  }
 catch (  IOException e) {
  }
}

public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {
  if (m_inEntityRef)   return;
  m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);
  try {
    final java.io.Writer writer=m_writer;
    if (m_elemContext.m_startTagOpen) {
      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);
      int nAttrs=m_attributes.getLength();
      if (nAttrs > 0) {
        processAttributes(m_writer,nAttrs);
        m_attributes.clear();
      }
      if (m_spaceBeforeClose)       writer.write(" />");
 else       writer.write("/>");
    }
 else {
      if (m_cdataTagOpen)       closeCDATA();
      if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);
      writer.write('<');
      writer.write('/');
      writer.write(name);
      writer.write('>');
    }
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
  if (!m_elemContext.m_startTagOpen && m_doIndent) {
    m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();
  }
  m_isprevtext=false;
  if (m_tracer != null)   super.fireEndElem(name);
  m_elemContext=m_elemContext.m_prev;
}

public static void f(String msg,Object... args){
  if (!allowWtf)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}

public void deleteLeaves(String name){
  for (int i=0; i < _leaves.size(); i++) {
    CatalogTreeLeaf leaf=_leaves.get(i);
    if (name.equals(leaf.getName())) {
      _leaves.remove(i);
    }
  }
}

public String toString(){
  final StringBuffer s=new StringBuffer();
  final int size=size();
  for (int i=0; i < size; i++)   s.append(getInt(i));
  return s.toString();
}

protected boolean validate(final char[] component,final int soffset,int eoffset,final BitSet generous){
  if (eoffset == -1) {
    eoffset=component.length - 1;
  }
  for (int i=soffset; i <= eoffset; i++) {
    if (!generous.get(component[i])) {
      return false;
    }
  }
  return true;
}

private void buildPieces(){
  pieces=new Piece[pathArray.size()];
  Paint paint=new Paint();
  Matrix matrix=new Matrix();
  Canvas canvas=new Canvas();
  for (int i=0; i < pieces.length; i++) {
    int shadow=Utils.nextInt(Utils.dp2px(2),Utils.dp2px(9));
    Path path=pathArray.get(i);
    RectF r=new RectF();
    path.computeBounds(r,true);
    Bitmap pBitmap=Utils.createBitmapSafely((int)r.width() + shadow * 2,(int)r.height() + shadow * 2,Bitmap.Config.ARGB_4444,1);
    if (pBitmap == null) {
      pieces[i]=new Piece(-1,-1,null,shadow);
      continue;
    }
    pieces[i]=new Piece((int)r.left + mTouchPoint.x - shadow,(int)r.top + mTouchPoint.y - shadow,pBitmap,shadow);
    canvas.setBitmap(pieces[i].bitmap);
    BitmapShader mBitmapShader=new BitmapShader(mBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    matrix.reset();
    matrix.setTranslate(-r.left - offsetX + shadow,-r.top - offsetY + shadow);
    mBitmapShader.setLocalMatrix(matrix);
    paint.reset();
    Path offsetPath=new Path();
    offsetPath.addPath(path,-r.left + shadow,-r.top + shadow);
    paint.setStyle(Paint.Style.FILL);
    paint.setShadowLayer(shadow,0,0,0xff333333);
    canvas.drawPath(offsetPath,paint);
    paint.setShadowLayer(0,0,0,0);
    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.XOR));
    canvas.drawPath(offsetPath,paint);
    paint.setXfermode(null);
    paint.setShader(mBitmapShader);
    paint.setAlpha(0xcc);
    canvas.drawPath(offsetPath,paint);
  }
  Arrays.sort(pieces);
}

public boolean removeShutdownHook(Thread hook){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(RuntimePermissionCollection.SHUTDOWN_HOOKS_PERMISSION);
  }
  if (hook == null)   throw new NullPointerException("null is not allowed here");
  if (VMState > 0) {
    throw new IllegalStateException();
  }
synchronized (hooksList) {
    return hooksList.remove(hook);
  }
}

public void run(){
  while (m_keyboardStream != null) {
    try {
      if (m_keyboardReadRequest) {
        String s=m_keyboardStream.readLine();
        m_keyboardInput.add(s);
        m_keyboardReadRequest=false;
synchronized (this) {
          notifyAll();
        }
      }
 else       try {
        Thread.sleep(50);
      }
 catch (      InterruptedException ie) {
      }
    }
 catch (    IOException io) {
    }
  }
}

public boolean boundScroll(){
  float curScroll=getStackScroll();
  float newScroll=getBoundedStackScroll(curScroll);
  if (Float.compare(newScroll,curScroll) != 0) {
    setStackScroll(newScroll);
    return true;
  }
  return false;
}

@Override public AggregateableEvaluation aggregate(Evaluation evaluation){
  m_Incorrect+=evaluation.incorrect();
  m_Correct+=evaluation.correct();
  m_Unclassified+=evaluation.unclassified();
  m_MissingClass+=evaluation.m_MissingClass;
  m_WithClass+=evaluation.m_WithClass;
  if (evaluation.m_ConfusionMatrix != null) {
    double[][] newMatrix=evaluation.confusionMatrix();
    if (newMatrix != null) {
      for (int i=0; i < m_ConfusionMatrix.length; i++) {
        for (int j=0; j < m_ConfusionMatrix[i].length; j++) {
          m_ConfusionMatrix[i][j]+=newMatrix[i][j];
        }
      }
    }
  }
  double[] newClassPriors=evaluation.m_ClassPriors;
  if (newClassPriors != null && m_ClassPriors != null) {
    for (int i=0; i < this.m_ClassPriors.length; i++) {
      m_ClassPriors[i]=newClassPriors[i];
    }
  }
  m_ClassPriorsSum=evaluation.m_ClassPriorsSum;
  m_TotalCost+=evaluation.totalCost();
  m_SumErr+=evaluation.m_SumErr;
  m_SumAbsErr+=evaluation.m_SumAbsErr;
  m_SumSqrErr+=evaluation.m_SumSqrErr;
  m_SumClass+=evaluation.m_SumClass;
  m_SumSqrClass+=evaluation.m_SumSqrClass;
  m_SumPredicted+=evaluation.m_SumPredicted;
  m_SumSqrPredicted+=evaluation.m_SumSqrPredicted;
  m_SumClassPredicted+=evaluation.m_SumClassPredicted;
  m_SumPriorAbsErr+=evaluation.m_SumPriorAbsErr;
  m_SumPriorSqrErr+=evaluation.m_SumPriorSqrErr;
  m_SumKBInfo+=evaluation.m_SumKBInfo;
  double[] newMarginCounts=evaluation.m_MarginCounts;
  if (newMarginCounts != null) {
    for (int i=0; i < m_MarginCounts.length; i++) {
      m_MarginCounts[i]+=newMarginCounts[i];
    }
  }
  m_ComplexityStatisticsAvailable=evaluation.m_ComplexityStatisticsAvailable;
  m_CoverageStatisticsAvailable=evaluation.m_CoverageStatisticsAvailable;
  m_SumPriorEntropy+=evaluation.m_SumPriorEntropy;
  m_SumSchemeEntropy+=evaluation.m_SumSchemeEntropy;
  m_TotalSizeOfRegions+=evaluation.m_TotalSizeOfRegions;
  m_TotalCoverage+=evaluation.m_TotalCoverage;
  ArrayList<Prediction> predsToAdd=evaluation.m_Predictions;
  if (predsToAdd != null) {
    if (m_Predictions == null) {
      m_Predictions=new ArrayList<Prediction>();
    }
    for (int i=0; i < predsToAdd.size(); i++) {
      m_Predictions.add(predsToAdd.get(i));
    }
  }
  return this;
}

public void waitForVolumesToBeVisible(CGRequestParams request){
  scan(request.getCopies(),request.getRsets());
}

protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {
}

public void updateView(){
  if (fInputElement != null && fParentComposite != null) {
    IndicatorViewState oldState=fStateMap.get(fInputElement);
    boolean reload=fFilesToReoad.contains(fInputElement);
    if (reload || oldState == null) {
      JsonObject jsonObject=DroidsafePluginUtilities.parseIndicatorFile(fInputElement);
      if (jsonObject == null)       return;
      fFilesToReoad.remove(fInputElement);
      fState=new IndicatorViewState(fInputElement,jsonObject,getSecuritySpec(),oldState);
      fStateMap.put(fInputElement,fState);
    }
 else {
      fState=oldState;
    }
    setPartName(fState.indicatorType);
    showPage(PAGE_VIEWER);
    fTreeViewer.setInput(fState.jsonObject);
    if (fTreeViewer.getSorter() == null)     sortByField(getSortByField());
  }
 else {
    setPartName(DEFAULT_PART_NAME);
  }
}

@Override public void paint(Graphics g){
  g.drawImage(image,0,0,this);
  if (!paintCalled) {
    paintCalled=true;
synchronized (this) {
      notifyAll();
    }
  }
}

@Override public boolean connectionAllowed(String eventName){
  if (m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}

public boolean isPrefixed(){
  return name.indexOf(':') >= 0;
}

public void releaseAnyConnection(Connection connection) throws SQLException {
  try {
    connection.close();
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}

public QuickActionView addActions(Collection<Action> actions){
  checkShown();
  mActions.addAll(actions);
  return this;
}

public void addSeriesRenderer(int index,SimpleSeriesRenderer renderer){
  mRenderers.add(index,renderer);
}

public static boolean copyStream(InputStream is,OutputStream os,CopyListener listener,int bufferSize) throws IOException {
  int current=0;
  int total=is.available();
  if (total <= 0) {
    total=DEFAULT_IMAGE_TOTAL_SIZE;
  }
  final byte[] bytes=new byte[bufferSize];
  int count;
  if (shouldStopLoading(listener,current,total))   return false;
  while ((count=is.read(bytes,0,bufferSize)) != -1) {
    os.write(bytes,0,count);
    current+=count;
    if (shouldStopLoading(listener,current,total))     return false;
  }
  os.flush();
  return true;
}

private float calcAngle(float value){
  return value / mData.getYValueSum() * 360f;
}

public synchronized void returnBuf(byte[] buf){
  if (buf == null || buf.length > mSizeLimit) {
    return;
  }
  mBuffersByLastUse.add(buf);
  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);
  if (pos < 0) {
    pos=-pos - 1;
  }
  mBuffersBySize.add(pos,buf);
  mCurrentSize+=buf.length;
  trim();
}

protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,AbstractOptions baseOptions,Iterable<T> values){
  requireNonNull(baseOptions,"baseOptions");
  requireNonNull(valueFilter,"valueFilter");
  requireNonNull(values,"values");
  valueMap=new IdentityHashMap<>(baseOptions.valueMap);
  putAll(valueFilter,StreamSupport.stream(values.spliterator(),false));
}

public CharSeq concat(CharSeq another){
  return new CharSeq(str + another.str);
}

@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
  resp.setContentType("text/plain");
  PrintWriter sendToClient=resp.getWriter();
  for (  Video v : this.videos) {
    sendToClient.write(v.getName() + " : " + v.getUrl()+ "\n");
  }
}

protected void notifyStateChange(int oldState,int newState){
  mState=newState;
  if (oldState != newState) {
    firePropertyChange("KnownState",Integer.valueOf(oldState),Integer.valueOf(newState));
  }
}

public void test_GetOrder(){
  assertEquals("wrong order was reteurned",BigInteger.valueOf(1),ecps.getOrder());
}

private void formatAndLogThrowable(LoggingLevel level,Color color,String msg,Throwable t){
  if (!USE_COLORS) {
    formatAndLogThrowable(level,msg,t);
    return;
  }
  if (PhotonLogger.level.id < level.id) {
    return;
  }
  LocalDateTime dateTime=LocalDateTime.now();
  String formatted=formatLogLine(level,dateTime,msg);
  LoggingService.logThrowable(dateTime,t,formatted,color);
}

public static String constructQueueRedisKey(String queueName,String shardName,int priority,PinLaterJobState state){
  return String.format("%s_%s_%s.p%1d_s%1d",PINLATER_QUEUE_KEY_PREFIX,shardName,queueName,priority,state.getValue());
}

public static String decodeCharset(String s,String charset){
  if (s == null) {
    return null;
  }
  try {
    byte buf[]=s.getBytes(ASCII_CHARSET);
    return (new String(buf,0,buf.length,charset));
  }
 catch (  UnsupportedEncodingException uee) {
    return s;
  }
}

public void addRestrictedDomain(String domainName){
  if (StringUtils.isEmpty(domainName)) {
    return;
  }
  if (restrictedDomains == null) {
    restrictedDomains=new ArrayList<>();
  }
  restrictedDomains.add(domainName);
}

StoppableReadLock(ReadWriteLock lock,CancelCriterion stopper){
  this.lock=lock.readLock();
  this.stopper=stopper;
}

public void testisAutoIncrement(){
  try {
    assertFalse(rsmd.isAutoIncrement(1));
  }
 catch (  SQLException e1) {
    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());
    e1.printStackTrace();
  }
  try {
    conn.close();
    rsmd.getSchemaName(2);
    fail("Exception expected");
  }
 catch (  SQLException e) {
  }
}

private long computeInterfaceHash(){
  long hash=0;
  ByteArrayOutputStream sink=new ByteArrayOutputStream(512);
  try {
    MessageDigest md=MessageDigest.getInstance("SHA");
    DataOutputStream out=new DataOutputStream(new DigestOutputStream(sink,md));
    out.writeInt(INTERFACE_HASH_STUB_VERSION);
    for (    Method method : remoteMethods) {
      MethodDoc methodDoc=method.methodDoc();
      out.writeUTF(methodDoc.name());
      out.writeUTF(Util.methodDescriptorOf(methodDoc));
      ClassDoc exceptions[]=methodDoc.thrownExceptions();
      Arrays.sort(exceptions,new ClassDocComparator());
      for (      ClassDoc ex : exceptions) {
        out.writeUTF(Util.binaryNameOf(ex));
      }
    }
    out.flush();
    byte hashArray[]=md.digest();
    for (int i=0; i < Math.min(8,hashArray.length); i++) {
      hash+=((long)(hashArray[i] & 0xFF)) << (i * 8);
    }
  }
 catch (  IOException e) {
    throw new AssertionError(e);
  }
catch (  NoSuchAlgorithmException e) {
    throw new AssertionError(e);
  }
  return hash;
}

public static void copy(byte[] in,OutputStream out) throws IOException {
  Assert.notNull(in,"No input byte array specified");
  Assert.notNull(out,"No OutputStream specified");
  out.write(in);
}

public boolean isEmpty(){
  return items.isEmpty();
}

private static native boolean renderFrame(int[] pixels,long gifFileInPtr,int[] metaData);

private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){
  StringBuilder tmp=new StringBuilder(count);
  int submode=initialSubmode;
  int idx=0;
  while (true) {
    char ch=msg.charAt(startpos + idx);
switch (submode) {
case SUBMODE_ALPHA:
      if (isAlphaUpper(ch)) {
        if (ch == ' ') {
          tmp.append((char)26);
        }
 else {
          tmp.append((char)(ch - 65));
        }
      }
 else {
        if (isAlphaLower(ch)) {
          submode=SUBMODE_LOWER;
          tmp.append((char)27);
          continue;
        }
 else         if (isMixed(ch)) {
          submode=SUBMODE_MIXED;
          tmp.append((char)28);
          continue;
        }
 else {
          tmp.append((char)29);
          tmp.append((char)PUNCTUATION[ch]);
          break;
        }
      }
    break;
case SUBMODE_LOWER:
  if (isAlphaLower(ch)) {
    if (ch == ' ') {
      tmp.append((char)26);
    }
 else {
      tmp.append((char)(ch - 97));
    }
  }
 else {
    if (isAlphaUpper(ch)) {
      tmp.append((char)27);
      tmp.append((char)(ch - 65));
      break;
    }
 else     if (isMixed(ch)) {
      submode=SUBMODE_MIXED;
      tmp.append((char)28);
      continue;
    }
 else {
      tmp.append((char)29);
      tmp.append((char)PUNCTUATION[ch]);
      break;
    }
  }
break;
case SUBMODE_MIXED:
if (isMixed(ch)) {
tmp.append((char)MIXED[ch]);
}
 else {
if (isAlphaUpper(ch)) {
  submode=SUBMODE_ALPHA;
  tmp.append((char)28);
  continue;
}
 else if (isAlphaLower(ch)) {
  submode=SUBMODE_LOWER;
  tmp.append((char)27);
  continue;
}
 else {
  if (startpos + idx + 1 < count) {
    char next=msg.charAt(startpos + idx + 1);
    if (isPunctuation(next)) {
      submode=SUBMODE_PUNCTUATION;
      tmp.append((char)25);
      continue;
    }
  }
  tmp.append((char)29);
  tmp.append((char)PUNCTUATION[ch]);
}
}
break;
default :
if (isPunctuation(ch)) {
tmp.append((char)PUNCTUATION[ch]);
}
 else {
submode=SUBMODE_ALPHA;
tmp.append((char)29);
continue;
}
}
idx++;
if (idx >= count) {
break;
}
}
char h=0;
int len=tmp.length();
for (int i=0; i < len; i++) {
boolean odd=(i % 2) != 0;
if (odd) {
h=(char)((h * 30) + tmp.charAt(i));
sb.append(h);
}
 else {
h=tmp.charAt(i);
}
}
if ((len % 2) != 0) {
sb.append((char)((h * 30) + 29));
}
return submode;
}

public static boolean isValidNCName(String ncName){
  if (ncName.length() == 0)   return false;
  char ch=ncName.charAt(0);
  if (isNCNameStart(ch) == false)   return false;
  for (int i=1; i < ncName.length(); i++) {
    ch=ncName.charAt(i);
    if (isNCName(ch) == false) {
      return false;
    }
  }
  return true;
}

public RepeatedFieldBuilder<MType,BType,IType> addMessage(MType message){
  if (message == null) {
    throw new NullPointerException();
  }
  ensureMutableMessageList();
  messages.add(message);
  if (builders != null) {
    builders.add(null);
  }
  onChanged();
  incrementModCounts();
  return this;
}

protected void prepareDataSet(){
  dataSet1=Arrays.asList(new String[]{"a","b","c"});
  dataSet2=Arrays.asList(new String[]{"d","e","f"});
  dataSet3=Arrays.asList(new String[]{"b","c","a","d"});
}

private ServiceRegistrar[] buildServiceRegistrar(){
  int k=0;
  ServiceRegistrar[] proxys=new ServiceRegistrar[proxyRegSet.size()];
  Iterator iter=proxyRegSet.iterator();
  while (iter.hasNext()) {
    ProxyReg reg=(ProxyReg)iter.next();
    proxys[k++]=reg.proxy;
  }
  return proxys;
}

private static boolean checkValue(String val) throws MalformedObjectNameException {
  if (val == null)   throw new NullPointerException("Invalid value (null)");
  final int len=val.length();
  if (len == 0)   return false;
  final char[] s=val.toCharArray();
  final int[] result=parseValue(s,0);
  final int endValue=result[0];
  final boolean value_pattern=result[1] == 1;
  if (endValue < len)   throw new MalformedObjectNameException("Invalid character in value: `" + s[endValue] + "'");
  return value_pattern;
}

protected void recoverPrimary(Set excludedServers){
  if (pool.getPoolOrCacheCancelInProgress() != null) {
    return;
  }
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (queueConnections.getPrimary() != null) {
    if (isDebugEnabled) {
      logger.debug("Primary recovery not needed");
    }
    return;
  }
  if (isDebugEnabled) {
    logger.debug("SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover");
  }
  if (printRecoveringPrimary) {
    logger.info(LocalizedMessage.create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
    printRecoveringPrimary=false;
  }
  QueueConnectionImpl newPrimary=null;
  while (newPrimary == null && pool.getPoolOrCacheCancelInProgress() == null) {
    List backups=queueConnections.getBackups();
    newPrimary=promoteBackupToPrimary(backups);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
synchronized (lock) {
        queueConnections=queueConnections.removeConnection(newPrimary);
      }
      newPrimary=null;
    }
  }
  if (newPrimary != null) {
    if (isDebugEnabled) {
      logger.debug("SubscriptionManager redundancy satisfier - Switched backup server to primary: {}",newPrimary.getEndpoint());
    }
    if (PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    cqsConnected();
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  while (newPrimary == null) {
    newPrimary=createNewPrimary(excludedServers);
    if (newPrimary == null) {
      break;
    }
    if (!addToConnectionList(newPrimary,true)) {
      excludedServers.add(newPrimary.getServer());
      newPrimary=null;
    }
    if (newPrimary != null) {
      if (isDebugEnabled) {
        logger.debug("SubscriptionManager redundancy satisfier - Non backup server was made primary. Recovering interest {}",newPrimary.getEndpoint());
      }
      if (!recoverInterest(newPrimary,true)) {
        excludedServers.add(newPrimary.getServer());
        newPrimary=null;
      }
      cqsConnected();
    }
    if (newPrimary != null && PoolImpl.AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG) {
      ClientServerObserver bo=ClientServerObserverHolder.getInstance();
      bo.afterPrimaryRecovered(newPrimary.getServer());
    }
    printPrimaryNotFoundError=true;
    printRecoveringPrimary=true;
    return;
  }
  cqsDisconnected();
  if (isDebugEnabled) {
    logger.debug("SubscriptionManager redundancy satisfier - Could not recover a new primary");
  }
synchronized (lock) {
    queueConnections=queueConnections.setPrimaryDiscoveryFailed(null);
    lock.notifyAll();
  }
}

private synchronized void rebuildJournal() throws IOException {
  if (journalWriter != null) {
    journalWriter.close();
  }
  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);
  writer.write(MAGIC);
  writer.write("\n");
  writer.write(VERSION_1);
  writer.write("\n");
  writer.write(Integer.toString(appVersion));
  writer.write("\n");
  writer.write(Integer.toString(valueCount));
  writer.write("\n");
  writer.write("\n");
  for (  Entry entry : lruEntries.values()) {
    if (entry.currentEditor != null) {
      writer.write(DIRTY + ' ' + entry.key+ '\n');
    }
 else {
      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');
    }
  }
  writer.close();
  journalFileTmp.renameTo(journalFile);
  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);
}

public void remove() throws RecurrenceInfoException {
  List<RecurrenceRule> rulesList=new ArrayList<RecurrenceRule>();
  rulesList.addAll(rRulesList);
  rulesList.addAll(eRulesList);
  try {
    for (    RecurrenceRule rule : rulesList)     rule.remove();
    info.remove();
  }
 catch (  RecurrenceRuleException rre) {
    throw new RecurrenceInfoException(rre.getMessage(),rre);
  }
catch (  GenericEntityException gee) {
    throw new RecurrenceInfoException(gee.getMessage(),gee);
  }
}

public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){
  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));
  int node;
  while (DTM.NULL != (node=iterator.nextNode())) {
    addNodeInDocOrder(node,support);
  }
}

protected boolean needToRefetchData(){
  long now=System.currentTimeMillis();
  long last=lastDataFetchTime;
  if ((last + fetchIntervalMillis) < now) {
    lastDataFetchTime=now;
    return true;
  }
  return false;
}

@Override public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID){
  checkQName(qualifiedName);
  return new DocumentTypeImpl(null,qualifiedName,publicID,systemID);
}

public void handleRequest(RequestContext rc) throws CLIException {
  super.handleRequest(rc);
  ldapLogin();
  SSOToken adminSSOToken=getAdminSSOToken();
  IOutput outputWriter=getOutputWriter();
  String realm=getStringOptionValue(IArgument.REALM_NAME);
  String patternType=getStringOptionValue(IArgument.AGENT_TYPE);
  String filter=getStringOptionValue(IArgument.FILTER);
  if (patternType == null) {
    patternType="";
  }
  if ((filter == null) || (filter.length() == 0)) {
    filter="*";
  }
  String[] params={realm,patternType,filter};
  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AGENTS",params);
  try {
    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);
    IdSearchResults isr=amir.searchIdentities(IdType.AGENTONLY,filter,new IdSearchControl());
    Set results=isr.getSearchResults();
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        if (!matchType(amid,patternType)) {
          i.remove();
        }
      }
    }
    if ((results != null) && !results.isEmpty()) {
      for (Iterator i=results.iterator(); i.hasNext(); ) {
        AMIdentity amid=(AMIdentity)i.next();
        Object[] args={amid.getName(),amid.getUniversalId()};
        outputWriter.printlnMessage(MessageFormat.format(getResourceString("format-search-agent-results"),args));
      }
    }
 else {
      outputWriter.printlnMessage(getResourceString("search-agent-no-entries"));
    }
    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_AGENTS",params);
  }
 catch (  IdRepoException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError("ListAgents.handleRequest",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
catch (  SSOException e) {
    String[] args={realm,patternType,filter,e.getMessage()};
    debugError("ListAgents.handleRequest",e);
    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENTS",args);
    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);
  }
}

public byte[] toBytes(){
  try {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    _field.store(out,null);
    return out.toByteArray();
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}

@SuppressWarnings("unchecked") public static <E extends Enum<? extends Style.HasCssName>>E fromStyleName(final String styleName,final Class<E> enumClass,final E defaultValue){
  if (styleName == null || enumClass == null) {
    return defaultValue;
  }
  for (  final Enum<? extends Style.HasCssName> constant : enumClass.getEnumConstants()) {
    final Style.HasCssName anEnum=(Style.HasCssName)constant;
    final String cssClass=anEnum.getCssName();
    if (cssClass != null && StyleHelper.containsStyle(styleName,cssClass)) {
      return (E)anEnum;
    }
  }
  return defaultValue;
}

@HLEUnimplemented @HLEFunction(nid=0x3C37A7A6,version=150,checkInsideInterrupt=true) public int sceMpegNextAvcRpAu(@CheckArgument("checkMpegHandle") int mpeg,int streamUid){
  if (!streamMap.containsKey(streamUid)) {
    log.warn(String.format("sceMpegNextAvcRpAu bad stream 0x%X",streamUid));
    return -1;
  }
  int result=hleMpegGetAvcAu(null);
  if (result != 0) {
    if (log.isDebugEnabled()) {
      log.debug(String.format("sceMpegNextAvcRpAu returning 0x%08X",result));
    }
    return result;
  }
  videoFrameCount++;
  startedMpeg=true;
  return 0;
}

private Map<URI,ExportMask> createExportMaskMap(Set<URI> placedMasks){
  Map<URI,ExportMask> exportMaskMap=new HashMap<>();
  Iterator<ExportMask> exportMaskIterator=dbClient.queryIterativeObjects(ExportMask.class,placedMasks,true);
  while (exportMaskIterator.hasNext()) {
    ExportMask exportMask=exportMaskIterator.next();
    exportMaskMap.put(exportMask.getId(),exportMask);
  }
  return exportMaskMap;
}

public ImmutableArray2<K> insert(int index,K obj){
  int len=length + 1;
  int newLen=len;
  boolean extendable;
  if (index == len - 1) {
    AtomicBoolean x=canExtend;
    if (x != null) {
      canExtend=null;
      if (array.length > index && x.getAndSet(false)) {
        array[index]=obj;
        return new ImmutableArray2<K>(array,len,true);
      }
    }
    extendable=true;
    newLen=len + 4;
  }
 else {
    extendable=false;
  }
  @SuppressWarnings("unchecked") K[] a2=(K[])new Object[newLen];
  DataUtils.copyWithGap(array,a2,length,index);
  a2[index]=obj;
  return new ImmutableArray2<K>(a2,len,extendable);
}

public void writeNoScale(Image c,Component i){
  if (page == null) {
    newpage();
  }
  int x=x0 + width - (c.getWidth(null) + charwidth);
  int y=y0 + (linenum * lineheight) + lineascent;
  if (page != null && pagenum >= prFirst) {
    page.drawImage(c,x,y,c.getWidth(null),c.getHeight(null),null);
  }
}

public void putDocumentInCache(int n,Source source){
  int cachedNode=getNode(source);
  if (DTM.NULL != cachedNode) {
    if (!(cachedNode == n))     throw new RuntimeException("Programmer's Error!  " + "putDocumentInCache found reparse of doc: " + source.getSystemId());
    return;
  }
  if (null != source.getSystemId()) {
    m_sourceTree.addElement(new SourceTree(n,source.getSystemId()));
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public static void copy(InputStream is,Resource out,boolean closeIS) throws IOException {
  OutputStream os=null;
  try {
    os=toBufferedOutputStream(out.getOutputStream());
  }
 catch (  IOException ioe) {
    IOUtil.closeEL(os);
    throw ioe;
  }
  copy(is,os,closeIS,true);
}

public String fadeAudio(String path,String type,double fadeInLength,double stopTime,double fadeOutLength) throws IOException {
  final List<String> curves=Arrays.asList(new String[]{"q","h","t","l","p"});
  if (!curves.contains(type)) {
    throw new RuntimeException("fadeAudio: passed invalid type: " + type);
  }
  File file=new File(path);
  String outFile=file.getCanonicalPath() + "_faded.wav";
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  cmd.add(path);
  cmd.add(outFile);
  cmd.add("fade");
  cmd.add(type);
  cmd.add(fadeInLength + "");
  if (stopTime != -1)   cmd.add(stopTime + "");
  if (fadeOutLength != -1)   cmd.add(fadeOutLength + "");
  try {
    int rc=execSox(cmd,callback);
    if (rc != 0) {
      outFile=null;
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return outFile;
}

@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mEdgeGlowTop != null) {
    final int scrollX=getScrollX();
    if (!mEdgeGlowTop.isFinished()) {
      final int restoreCount=canvas.save();
      final int topPadding=mListPadding.top + mGlowPaddingTop;
      final int bottomPadding=mListPadding.bottom + mGlowPaddingBottom;
      final int height=getHeight() - topPadding - bottomPadding;
      int edgeX=Math.min(0,scrollX + mFirstPositionDistanceGuess);
      canvas.rotate(-90);
      canvas.translate(-getHeight() + topPadding,edgeX);
      mEdgeGlowTop.setSize(height,height);
      if (mEdgeGlowTop.draw(canvas)) {
        invalidate();
      }
      canvas.restoreToCount(restoreCount);
    }
    if (!mEdgeGlowBottom.isFinished()) {
      final int restoreCount=canvas.save();
      final int topPadding=mListPadding.left + mGlowPaddingTop;
      final int bottomPadding=mListPadding.right + mGlowPaddingBottom;
      final int height=getHeight() - topPadding - bottomPadding;
      final int width=getWidth();
      int edgeX=Math.max(width,scrollX + mLastPositionDistanceGuess);
      canvas.rotate(90);
      canvas.translate(-topPadding,-edgeX);
      mEdgeGlowBottom.setSize(height,height);
      if (mEdgeGlowBottom.draw(canvas)) {
        invalidate();
      }
      canvas.restoreToCount(restoreCount);
    }
  }
}

public static ClassProperties loadProperties(Class[] cls,Properties properties,boolean inherit){
  ClassProperties cp=new ClassProperties(properties);
  for (  Class c : cls) {
    cp.load(c,inherit);
  }
  return cp;
}

public void testCase20(){
  byte bBytes[]={1,2,3,4,5,6,7};
  byte rBytes[]={1,2,3,4,5,6,7};
  int bSign=1;
  BigInteger aNumber=BigInteger.ZERO;
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

private static void fixGPSTimeStamp(XMPNode exifSchema) throws XMPException {
  XMPNode gpsDateTime=XMPNodeUtils.findChildNode(exifSchema,"exif:GPSTimeStamp",false);
  if (gpsDateTime == null) {
    return;
  }
  try {
    XMPDateTime binGPSStamp;
    XMPDateTime binOtherDate;
    binGPSStamp=XMPUtils.convertToDate(gpsDateTime.getValue());
    if (binGPSStamp.getYear() != 0 || binGPSStamp.getMonth() != 0 || binGPSStamp.getDay() != 0) {
      return;
    }
    XMPNode otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeOriginal",false);
    if (otherDate == null) {
      otherDate=XMPNodeUtils.findChildNode(exifSchema,"exif:DateTimeDigitized",false);
    }
    binOtherDate=XMPUtils.convertToDate(otherDate.getValue());
    Calendar cal=binGPSStamp.getCalendar();
    cal.set(Calendar.YEAR,binOtherDate.getYear());
    cal.set(Calendar.MONTH,binOtherDate.getMonth());
    cal.set(Calendar.DAY_OF_MONTH,binOtherDate.getDay());
    binGPSStamp=new XMPDateTimeImpl(cal);
    gpsDateTime.setValue(XMPUtils.convertFromDate(binGPSStamp));
  }
 catch (  XMPException e) {
    return;
  }
}

protected boolean cellConsumesEventType(Cell<?> cell,String eventType){
  Set<String> consumedEvents=cell.getConsumedEvents();
  return consumedEvents != null && consumedEvents.contains(eventType);
}

public int read() throws IOException {
  int b0=fInputStream.read();
  if (b0 > 0x80) {
    throw new IOException(Localizer.getMessage("jsp.error.xml.invalidASCII",Integer.toString(b0)));
  }
  return b0;
}

protected void create_y_axis(int i){
  Log.e("index vlaue",i + "");
  float ver_height=((graphheight / label_size) * i) + border;
  if (i == largest_value_set.size() - 1)   canvas.drawLine(horstart,ver_height,width - (border),ver_height,paint);
 else   canvas.drawLine(horstart,ver_height,border,ver_height,paint);
  paint.setColor(Color.BLACK);
  int Y_labels=(int)size - 1 - i;
  String y_labels=String.format("%.1f",Y_labels * y_axis_ratio);
  paint.setTextAlign(Paint.Align.RIGHT);
  canvas.drawText(y_labels,horstart - 15,ver_height - 10,paint);
  paint.setTextAlign(Paint.Align.LEFT);
}

public long max(){
  return deltaMax.get();
}

public void print(File file) throws IOException {
  checkExec();
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPrintJobAccess();
  }
  checkActionSupport(Action.PRINT);
  checkFileValidation(file);
  peer.print(file);
}

public void extend(RuleGrounding other){
  if (other.isFailed()) {
    groundings.clear();
    return;
  }
  extend(other.getAlternatives());
}

@Override public String expect(Pattern pattern){
  final String token=read(pattern);
  if (token == null) {
    throw new ParserException("Expected pattern '" + pattern.pattern() + "' was not encountered in document: "+ document);
  }
  return token;
}

public void testGetTableTypesOrder() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTableTypes();
  String previousType="";
  while (rs.next()) {
    String type=rs.getString(1);
    assertTrue(type.compareTo(previousType) >= 0);
    previousType=type;
  }
  rs.close();
}

private FileChannel updateCache(String filePath){
  FileChannel fileChannel=fileNameAndStreamCache.get(filePath);
  try {
    if (null == fileChannel) {
      FileInputStream stream=new FileInputStream(filePath);
      fileChannel=stream.getChannel();
      fileNameAndStreamCache.put(filePath,fileChannel);
    }
  }
 catch (  IOException e) {
    LOGGER.error(e,e.getMessage());
  }
  return fileChannel;
}

public void removeSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    return;
  }
  mListeners.remove(listener);
}

private static String descriptorForFieldSignature(String signature){
  return signature.replace('.','/');
}

public void addParameters(final NameValuePair[] parameters){
  LOG.trace("enter PostMethod.addParameters(NameValuePair[])");
  if (parameters == null) {
    LOG.warn("Attempt to addParameters(null) ignored");
  }
 else {
    super.clearRequestBody();
    for (int i=0; i < parameters.length; i++) {
      params.add(parameters[i]);
    }
  }
}

@Pure public Atom annotationInterfaceToAnnotationClass(){
  byte[] annotationClassName_tmp=new byte[val.length + 2];
  System.arraycopy(val,0,annotationClassName_tmp,0,val.length - 1);
  annotationClassName_tmp[val.length - 1]='$';
  annotationClassName_tmp[val.length]='$';
  annotationClassName_tmp[val.length + 1]=';';
  return Atom.findOrCreateUtf8Atom(annotationClassName_tmp);
}

public boolean resourceSupportAR(Integer id){
  if (id == null) {
    return false;
  }
  return resourceSupportAR(id.intValue());
}

public static Map<String,Object> createElectronicText(DispatchContext dctx,Map<String,? extends Object> context){
  Map<String,Object> result=createElectronicTextMethod(dctx,context);
  return result;
}

public PatternGuardExpr(String namespace,String name,Expression[] parameters,PatternExpr guarded){
  this(namespace,name,Arrays.asList(parameters),guarded);
}

public static int intersectLineLine(Line2D a,Line2D b,Point2D intersect){
  double a1x=a.getX1(), a1y=a.getY1();
  double a2x=a.getX2(), a2y=a.getY2();
  double b1x=b.getX1(), b1y=b.getY1();
  double b2x=b.getX2(), b2y=b.getY2();
  return intersectLineLine(a1x,a1y,a2x,a2y,b1x,b1y,b2x,b2y,intersect);
}

public static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){
  Set returnOCs=removeOCs;
  if (removeOCs != null && !removeOCs.isEmpty()) {
    returnOCs=new HashSet();
    Iterator itr1=origSet.iterator();
    while (itr1.hasNext()) {
      String origOC=(String)itr1.next();
      Iterator itr2=removeOCs.iterator();
      while (itr2.hasNext()) {
        String removeOC=(String)itr2.next();
        if (origOC.equalsIgnoreCase(removeOC)) {
          returnOCs.add(origOC);
          break;
        }
      }
    }
    origSet.removeAll(returnOCs);
  }
  return returnOCs;
}

public static int unixTimestamp(){
  return (int)(System.currentTimeMillis() / 1000L);
}

public boolean isPDFLicense(){
  String key=getSummary();
  return key != null && key.length() > 25;
}

protected void drawGridBackground(Canvas c){
  if (mDrawGridBackground) {
    c.drawRect(mViewPortHandler.getContentRect(),mGridBackgroundPaint);
  }
  if (mDrawBorders) {
    c.drawRect(mViewPortHandler.getContentRect(),mBorderPaint);
  }
}

public ZipStreamImpl openReadImpl(PathImpl path) throws IOException {
  String pathName=path.getPath();
  return openReadImpl(pathName);
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 112) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

@Override public void onTmpFilesCopied(ResultCode result){
  dismissLoadingDialog();
  finish();
}

public synchronized OMGraphicList prepare(){
  Projection projection=getProjection();
  boolean DEBUG_FINE=logger.isLoggable(Level.FINE);
  if (projection == null) {
    if (DEBUG_FINE) {
      logger.fine(getName() + ": prepare called with null projection");
    }
    return new OMGraphicList();
  }
  if (spatialIndex == null) {
    if (DEBUG_FINE) {
      logger.fine(getName() + ": spatialIndex is null!");
    }
    OMGraphicList list=getList();
    if (list != null) {
      list.generate(projection,true);
      return list;
    }
 else {
      return new OMGraphicList();
    }
  }
  Point2D ul=projection.getUpperLeft();
  Point2D lr=projection.getLowerRight();
  double ulLat=ul.getY();
  double ulLon=ul.getX();
  double lrLat=lr.getY();
  double lrLon=lr.getX();
  OMGraphicList list=new OMGraphicList();
  if (ProjMath.isCrossingDateline(ulLon,lrLon,projection.getScale())) {
    if (DEBUG_FINE) {
      logger.fine("ShapeLayer.computeGraphics(): Dateline is on screen");
    }
    double ymin=Math.min(ulLat,lrLat);
    double ymax=Math.max(ulLat,lrLat);
    try {
      list=spatialIndex.getOMGraphics(ulLon,ymin,180.0d,ymax,list,drawingAttributes,projection,coordTransform);
      list=spatialIndex.getOMGraphics(-180.0d,ymin,lrLon,ymax,list,drawingAttributes,projection,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      list=null;
    }
catch (    IOException ex) {
      if (DEBUG_FINE) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (DEBUG_FINE) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (DEBUG_FINE) {
        npe.printStackTrace();
      }
    }
  }
 else {
    double xmin=Math.min(ulLon,lrLon);
    double xmax=Math.max(ulLon,lrLon);
    double ymin=Math.min(ulLat,lrLat);
    double ymax=Math.max(ulLat,lrLat);
    try {
      list=spatialIndex.getOMGraphics(xmin,ymin,xmax,ymax,list,drawingAttributes,projection,coordTransform);
    }
 catch (    InterruptedIOException iioe) {
      list=null;
    }
catch (    java.io.IOException ex) {
      if (DEBUG_FINE) {
        ex.printStackTrace();
      }
    }
catch (    FormatException fe) {
      if (DEBUG_FINE) {
        fe.printStackTrace();
      }
    }
catch (    NullPointerException npe) {
      if (DEBUG_FINE) {
        npe.printStackTrace();
      }
    }
  }
  return list;
}

static WorkQueue commonSubmitterQueue(){
  ForkJoinPool p;
  WorkQueue[] ws;
  int m;
  Submitter z;
  return ((z=submitters.get()) != null && (p=commonPool) != null && (ws=p.workQueues) != null && (m=ws.length - 1) >= 0) ? ws[m & z.seed & SQMASK] : null;
}

private boolean isFieldPackagePrivate(Element attribute){
  Set<Modifier> modifiers=attribute.getModifiers();
  return !modifiers.contains(PUBLIC) && !modifiers.contains(PROTECTED) && !modifiers.contains(PRIVATE);
}

public void testDivideRoundHalfUpPos(){
  String a="92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=-24;
  String b="7472334223847623782375469293018787918347987234564568";
  int bScale=13;
  String c="1.24390557635720517122423359799284E+53";
  int resScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",resScale,result.scale());
}

public boolean reallyRestoreMsWordListFormatForUser(String userId,InputStreamReader streamReader,boolean isAdmin,Errors errors){
  if (userId == null) {
    Errors.add(errors,errorMessages.errorsUserIdIsNull());
    return false;
  }
  if (streamReader == null) {
    Errors.add(errors,errorMessages.errorsTheInputStreamReaderIsNull());
    return false;
  }
  BufferedReader bf=new BufferedReader(streamReader);
  final User user=getUserById(userId);
  if (user == null) {
    return false;
  }
  boolean createdAnyChildren=false;
  try {
    final long now=System.currentTimeMillis();
    Entry notebook=createEntryNoteBook(user,"Restored Notebook",now,null,null,false,false,false,isAdmin,false,errors);
    if (notebook == null) {
      return false;
    }
    Entry root=getEntryById(notebook.getRootId());
    ArrayList<Entry> parents=new ArrayList<Entry>();
    HashMap<String,Integer> bulletToDepth=new HashMap<String,Integer>();
    String line=null;
    Integer previousDepth=0;
    parents.add(root);
    while ((line=bf.readLine()) != null) {
      line=line.trim();
      if (line.isEmpty()) {
        continue;
      }
      String note=line;
      Integer depth=1;
      if (line.length() > 1 && line.charAt(1) == '\t') {
        String bullet=line.substring(0,1);
        note=line.substring(2);
        depth=bulletToDepth.get(bullet);
        if (depth == null) {
          depth=new Integer(bulletToDepth.size() + 1);
          bulletToDepth.put(bullet,depth);
        }
        for (int i=parents.size(); i > depth.intValue(); --i) {
          parents.remove(i - 1);
        }
        depth=new Integer(parents.size() + 1);
      }
 else {
        previousDepth=0;
        while (parents.size() > 1) {
          parents.remove(parents.size() - 1);
        }
      }
      if (parents.isEmpty()) {
        return false;
      }
      Entry parent=parents.get(parents.size() - 1);
      Entry entry=createSimpleEntry(user,note,now,parent.getId(),TreeRelType.Parent,false,false,false,isAdmin,Constants.note,errors,null);
      if (entry == null) {
        return false;
      }
      if (previousDepth.intValue() != depth.intValue()) {
        parents.add(entry);
      }
 else {
        parents.set(parents.size() - 1,entry);
      }
      createdAnyChildren=true;
    }
  }
 catch (  IOException e) {
    Errors.add(errors,errorMessages.errorProblemReadingInput());
  }
  return createdAnyChildren;
}

@CallSuper protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollX=getScrollX();
    int paddingLeft=getPaddingLeft();
    int paddingRight=getPaddingRight();
    final int width=getWidth();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
      int childLeft=0;
switch (hgrav) {
default :
        childLeft=paddingLeft;
      break;
case Gravity.LEFT:
    childLeft=paddingLeft;
  paddingLeft+=child.getWidth();
break;
case Gravity.CENTER_HORIZONTAL:
childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);
break;
case Gravity.RIGHT:
childLeft=width - paddingRight - child.getMeasuredWidth();
paddingRight+=child.getMeasuredWidth();
break;
}
childLeft+=scrollX;
final int childOffset=childLeft - child.getLeft();
if (childOffset != 0) {
child.offsetLeftAndRight(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollX=getScrollX();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}

public static String convertCodes(String string){
  if (string == null)   return string;
  int current=0;
  char[] cs=string.toCharArray();
  StringBuilder sb=new StringBuilder();
  for (  char c : cs) {
    if (current <= cs.length && c == '&') {
      char tc=Character.toLowerCase(cs[current + 1]);
      if (tc == '1' || tc == '2' || tc == '3' || tc == '4' || tc == '5' || tc == '6' || tc == '7' || tc == '8' || tc == '9' || tc == '0' || tc == 'a' || tc == 'b' || tc == 'c' || tc == 'd' || tc == 'e' || tc == 'f' || tc == 'k' || tc == 'l' || tc == 'm' || tc == 'n' || tc == 'o') {
        sb.append("§");
      }
 else {
        sb.append(c);
      }
    }
 else {
      sb.append(c);
    }
    current++;
  }
  return sb.toString();
}

private void loadText(InputStream is){
  BufferedReader reader;
  String line;
  unitList=new ArrayList();
  unitTypesList=new ArrayList();
  if (is == null) {
    throw new Error("Can't load cluster db file.");
  }
  reader=new BufferedReader(new InputStreamReader(is));
  try {
    line=reader.readLine();
    lineCount++;
    while (line != null) {
      if (!line.startsWith("***")) {
        parseAndAdd(line,reader);
      }
      line=reader.readLine();
    }
    reader.close();
    units=new DatabaseClusterUnit[unitList.size()];
    units=(DatabaseClusterUnit[])unitList.toArray(units);
    unitList=null;
    unitTypes=new UnitType[unitTypesList.size()];
    unitTypes=(UnitType[])unitTypesList.toArray(unitTypes);
    unitTypesList=null;
  }
 catch (  IOException e) {
    throw new Error(e.getMessage() + " at line " + lineCount);
  }
 finally {
  }
}

private float calculateSelectorRadius(){
  if (mfSelectorRadius == 0.0f) {
    int nHeight=mSelectedView.getHeight();
    int nWidth=mSelectedView.getWidth();
    int nLargerSide=Math.max(nWidth,nHeight);
    mfSelectorRadius=((nLargerSide ^ 2) / 2);
  }
  return mfSelectorRadius;
}

private int measureWidth(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

public void test_getPutByteArray(){
  final int capacity=200;
  final ByteArrayBuffer buf=new ByteArrayBuffer(capacity);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(capacity - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(capacity - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + capacity - 2));
}

@Override public void onAdded(final RPObject object){
  if (isUser(object)) {
    if (object.has("adminlevel")) {
      adminlevel=object.getInt("adminlevel");
    }
  }
}

private String local_number() throws ParseException {
  StringBuilder s=new StringBuilder();
  if (debug)   dbg_enter("local_number");
  try {
    int lc=0;
    while (lexer.hasMoreChars()) {
      char la=lexer.lookAhead(0);
      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {
        lexer.consume(1);
        s.append(la);
        lc++;
      }
 else       if (lc > 0)       break;
 else       throw createParseException("unexepcted " + la);
    }
    return s.toString();
  }
  finally {
    if (debug)     dbg_leave("local_number");
  }
}

public void pathValuesToPixel(List<Path> paths){
  for (int i=0; i < paths.size(); i++) {
    pathValueToPixel(paths.get(i));
  }
}

public static byte[] decode(String s){
  return decode(s.toCharArray());
}

public static void checkState(boolean expression,Object errorMessage){
  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {
    throw new IllegalStateException(String.valueOf(errorMessage));
  }
}

public static void slideInFromTopAnimator(@NonNull List<Animator> animators,@NonNull View view,RecyclerView recyclerView){
  alphaAnimator(animators,view,0f);
  animators.add(ObjectAnimator.ofFloat(view,"translationY",-recyclerView.getMeasuredHeight() >> 1,0));
  if (FlexibleAdapter.DEBUG)   Log.v(TAG,"Added TOP Animator");
}

MutableBigInteger(MutableBigInteger val){
  intLen=val.intLen;
  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);
}

@RequestMapping(value="/SAML2/IDPSSO/{tenant:.*}") public void ssoBindingError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {
  logger.info("IDP SSO binding error! The client locale is " + locale.toString() + ", tenant is "+ tenant);
  ssoDefaultTenantError(locale,response);
}

public CheckpointManager(NetworkParameters params,@Nullable InputStream inputStream) throws IOException {
  this.params=checkNotNull(params);
  if (inputStream == null)   inputStream=openStream(params);
  checkNotNull(inputStream);
  inputStream=new BufferedInputStream(inputStream);
  inputStream.mark(1);
  int first=inputStream.read();
  inputStream.reset();
  if (first == BINARY_MAGIC.charAt(0))   dataHash=readBinary(inputStream);
 else   if (first == TEXTUAL_MAGIC.charAt(0))   dataHash=readTextual(inputStream);
 else   throw new IOException("Unsupported format.");
}

public IndexSegmentIndex(IRawStore store,Checkpoint checkpoint,IndexMetadata metadata,boolean readOnly){
  super(store,checkpoint,metadata,readOnly);
}

private String liveness(){
  boolean isClosed=false;
  try {
    if (isClosed()) {
      isClosed=true;
    }
  }
 catch (  SQLException s) {
    isClosed=true;
  }
  if (isClosed) {
    return "CLOSED";
  }
  return "OPEN";
}

private static void insertValue(final Map<String,List<String>> paramsMap,final String paramVal,final String parameterName){
  if (paramVal != null) {
    List<String> list=new ArrayList<>();
    list.add(paramVal);
    paramsMap.put(parameterName,list);
  }
}

public Dimension minimumLayoutSize(Container target){
  Dimension size;
synchronized (this) {
    checkContainer(target);
    checkRequests();
    size=new Dimension(xTotal.minimum,yTotal.minimum);
  }
  Insets insets=target.getInsets();
  size.width=(int)Math.min((long)size.width + (long)insets.left + (long)insets.right,Integer.MAX_VALUE);
  size.height=(int)Math.min((long)size.height + (long)insets.top + (long)insets.bottom,Integer.MAX_VALUE);
  return size;
}

private static void solve_l2r_l1l2_svr(Problem prob,double[] w,Parameter param){
  int l=prob.l;
  double C=param.C;
  double p=param.p;
  int w_size=prob.n;
  double eps=param.eps;
  int i, s, iter=0;
  int max_iter=param.getMaxIters();
  int active_size=l;
  int[] index=new int[l];
  double d, G, H;
  double Gmax_old=Double.POSITIVE_INFINITY;
  double Gmax_new, Gnorm1_new;
  double Gnorm1_init=-1.0;
  double[] beta=new double[l];
  double[] QD=new double[l];
  double[] y=prob.y;
  double[] lambda=new double[]{0.5 / C};
  double[] upper_bound=new double[]{Double.POSITIVE_INFINITY};
  if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) {
    lambda[0]=0;
    upper_bound[0]=C;
  }
  for (i=0; i < l; i++)   beta[i]=0;
  for (i=0; i < w_size; i++)   w[i]=0;
  for (i=0; i < l; i++) {
    QD[i]=0;
    for (    Feature xi : prob.x[i]) {
      double val=xi.getValue();
      QD[i]+=val * val;
      w[xi.getIndex() - 1]+=beta[i] * val;
    }
    index[i]=i;
  }
  while (iter < max_iter) {
    Gmax_new=0;
    Gnorm1_new=0;
    for (i=0; i < active_size; i++) {
      int j=i + random.nextInt(active_size - i);
      swap(index,i,j);
    }
    for (s=0; s < active_size; s++) {
      i=index[s];
      G=-y[i] + lambda[GETI_SVR(i)] * beta[i];
      H=QD[i] + lambda[GETI_SVR(i)];
      for (      Feature xi : prob.x[i]) {
        int ind=xi.getIndex() - 1;
        double val=xi.getValue();
        G+=val * w[ind];
      }
      double Gp=G + p;
      double Gn=G - p;
      double violation=0;
      if (beta[i] == 0) {
        if (Gp < 0)         violation=-Gp;
 else         if (Gn > 0)         violation=Gn;
 else         if (Gp > Gmax_old && Gn < -Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] >= upper_bound[GETI_SVR(i)]) {
        if (Gp > 0)         violation=Gp;
 else         if (Gp < -Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] <= -upper_bound[GETI_SVR(i)]) {
        if (Gn < 0)         violation=-Gn;
 else         if (Gn > Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] > 0)       violation=Math.abs(Gp);
 else       violation=Math.abs(Gn);
      Gmax_new=Math.max(Gmax_new,violation);
      Gnorm1_new+=violation;
      if (Gp < H * beta[i])       d=-Gp / H;
 else       if (Gn > H * beta[i])       d=-Gn / H;
 else       d=-beta[i];
      if (Math.abs(d) < 1.0e-12)       continue;
      double beta_old=beta[i];
      beta[i]=Math.min(Math.max(beta[i] + d,-upper_bound[GETI_SVR(i)]),upper_bound[GETI_SVR(i)]);
      d=beta[i] - beta_old;
      if (d != 0) {
        for (        Feature xi : prob.x[i]) {
          w[xi.getIndex() - 1]+=d * xi.getValue();
        }
      }
    }
    if (iter == 0)     Gnorm1_init=Gnorm1_new;
    iter++;
    if (iter % 10 == 0)     info(".");
    if (Gnorm1_new <= eps * Gnorm1_init) {
      if (active_size == l)       break;
 else {
        active_size=l;
        info("*");
        Gmax_old=Double.POSITIVE_INFINITY;
        continue;
      }
    }
    Gmax_old=Gmax_new;
  }
  info("%noptimization finished, #iter = %d%n",iter);
  if (iter >= max_iter)   info("%nWARNING: reaching max number of iterations%nUsing -s 11 may be faster%n%n");
  double v=0;
  int nSV=0;
  for (i=0; i < w_size; i++)   v+=w[i] * w[i];
  v=0.5 * v;
  for (i=0; i < l; i++) {
    v+=p * Math.abs(beta[i]) - y[i] * beta[i] + 0.5 * lambda[GETI_SVR(i)] * beta[i]* beta[i];
    if (beta[i] != 0)     nSV++;
  }
  info("Objective value = %g%n",v);
  info("nSV = %d%n",nSV);
}

public boolean select(int position){
  View v=mAllList.get(position);
  if (mMultiChoiceAdapter != null) {
    performVibrate();
    performSelect(v,position,true);
    return true;
  }
  return false;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=new Vector<Option>();
  result.addElement(new Option("\tUse double precision format.\n" + "\t(default: single precision)","double",0,"-double"));
  result.addElement(new Option("\tUse tabs as separator.\n" + "\t(default: blanks)","tabs",0,"-tabs"));
  result.addAll(Collections.list(super.listOptions()));
  return result.elements();
}

@Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {
  if (!fIncludeIgnorableWhitespace || fFilterReject) {
    return;
  }
  if (!fDeferNodeExpansion) {
    Node child=fCurrentNode.getLastChild();
    if (child != null && child.getNodeType() == Node.TEXT_NODE) {
      Text textNode=(Text)child;
      textNode.appendData(text.toString());
    }
 else {
      Text textNode=fDocument.createTextNode(text.toString());
      if (fDocumentImpl != null) {
        TextImpl textNodeImpl=(TextImpl)textNode;
        textNodeImpl.setIgnorableWhitespace(true);
      }
      fCurrentNode.appendChild(textNode);
    }
  }
 else {
    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);
    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);
  }
}

private static final void waitForEditorToBeActive(IEditorPart internalFileEditor,IWorkbenchPage page){
  long start=System.currentTimeMillis();
  long end=start;
  do {
    end=System.currentTimeMillis();
  }
 while (page.getActiveEditor() != internalFileEditor && (end - start) < 5000);
  if (page.getActiveEditor() != internalFileEditor)   logger.warn("selected editor was not activated within timout");
}

private Solution largestObjectiveValue(int objective,Population population){
  Solution largest=null;
  double value=Double.NEGATIVE_INFINITY;
  for (  Solution solution : population) {
    if (solution.getObjective(objective) > value) {
      largest=solution;
      value=solution.getObjective(objective);
    }
  }
  return largest;
}

public static int convertLatmToY(int latm){
  long v=Math.round((Mercator.MAX_Y - Mercator.lat2y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * 2));
  if (v > MAX_AP_UNITS)   return MAX_AP_UNITS;
  if (v < 0)   return -1;
  return (int)v;
}

public void registerCallbackHandler(SMSObjectListener changeListener) throws SMSException {
  objectListener=changeListener;
  if (!notificationInitialized) {
    String notificationFlag=SystemProperties.get(NOTIFICATION_PROPERTY,"true");
    if (notificationFlag.equalsIgnoreCase("true")) {
      try {
        URL url=WebtopNaming.getNotificationURL();
        PLLClient.addNotificationHandler(JAXRPCUtil.SMS_SERVICE,new SMSNotificationHandler());
        client.send("registerNotificationURL",url.toString(),null,null);
        if (debug.messageEnabled()) {
          debug.message("SMSJAXRPCObject: Using " + "notification mechanism for cache updates: " + url);
        }
      }
 catch (      Exception e) {
        if (debug.warningEnabled()) {
          debug.warning("SMSJAXRPCObject: Registering for " + "notification via URL failed: " + e.getMessage() + "\nUsing polling mechanism for updates");
        }
        startPollingThreadIfEnabled(getCachePollingInterval());
      }
    }
 else {
      startPollingThreadIfEnabled(getCachePollingInterval());
    }
    notificationInitialized=true;
  }
}

public static NSObject parse(InputStream in) throws ParseException, IOException {
  byte[] buf=PropertyListParser.readAll(in);
  in.close();
  return parse(buf);
}

protected double currentScoreFunction(){
  double score=0.;
  for (int i=0; i < this.values[this.currentVar1].length; i++) {
    for (int j=0; j < this.values[this.currentVar2].length; j++) {
      score-=this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.log(this.currentPi[i][j]);
    }
  }
  return score;
}

public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iCharWindow,int iMinWord,int iMaxWord,int iWordWindow){
  iMinCharNGram=iMinChar;
  iMaxCharNGram=iMaxChar;
  iMinWordNGram=iMinWord;
  iMaxWordNGram=iMaxWord;
  iWordDist=iWordWindow;
  iCharDist=iCharWindow;
  DistroDocs=new TreeMap<Integer,DistributionDocument>();
  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();
  StringBuffer sb=new StringBuffer();
  Iterator iTexts=FileNames.iterator();
  while (iTexts.hasNext()) {
    String sFile=(String)iTexts.next();
    try {
      BufferedReader bf=new BufferedReader(new FileReader(sFile));
      String sTmp;
      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);
      bf.close();
    }
 catch (    FileNotFoundException ex) {
      ex.printStackTrace(System.err);
    }
catch (    IOException ex) {
      ex.printStackTrace(System.err);
    }
    sb.append((char)0);
  }
  FullTextDataString=sb.toString();
  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {
    DistroDocs.put(iCnt,new DistributionDocument(iCharDist,iCnt));
  }
  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {
    DistroWordDocs.put(iCnt,new DistributionWordDocument(iWordDist,iCnt));
  }
}

private int checkZoneLink(SpannableStringBuilder out,String in,int start){
  int pos=start + 3;
  StringBuilder temp=new StringBuilder();
  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));
  boolean prevIsDash=false;
  for (int i=0; i < targetString.length(); i++) {
    char c=targetString.charAt(i);
    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {
      temp.append(c);
      prevIsDash=false;
    }
 else     if (c == '-') {
      if (i == 0) {
        return -1;
      }
      if (prevIsDash) {
        temp.deleteCharAt(temp.length() - 1);
        break;
      }
      temp.append(c);
      prevIsDash=true;
    }
 else {
      if (prevIsDash) {
        temp.deleteCharAt(temp.length() - 1);
      }
      break;
    }
  }
  String zone=temp.toString();
  if (zone.length() < 3 || zone.equalsIgnoreCase("null")) {
    return -1;
  }
  out.append(zone);
  return pos + zone.length() - 1;
}

public void checkNextPoissonConsistency(double mean){
  final int sampleSize=1000;
  final int minExpectedCount=7;
  long maxObservedValue=0;
  final double alpha=0.001;
  UnitTestUtils.Frequency<Long> frequency=new UnitTestUtils.Frequency<Long>();
  for (int i=0; i < sampleSize; i++) {
    long value=randomData.nextPoisson(mean);
    if (value > maxObservedValue) {
      maxObservedValue=value;
    }
    frequency.addValue(value);
  }
  PoissonDistribution poissonDistribution=new PoissonDistribution(mean);
  int lower=1;
  while (poissonDistribution.cumulativeProbability(lower - 1) * sampleSize < minExpectedCount) {
    lower++;
  }
  int upper=(int)(5 * mean);
  while ((1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize < minExpectedCount) {
    upper--;
  }
  int binWidth=0;
  boolean widthSufficient=false;
  double lowerBinMass=0;
  double upperBinMass=0;
  while (!widthSufficient) {
    binWidth++;
    lowerBinMass=poissonDistribution.probability(lower - 1,lower + binWidth - 1);
    upperBinMass=poissonDistribution.probability(upper - binWidth - 1,upper - 1);
    widthSufficient=FastMath.min(lowerBinMass,upperBinMass) * sampleSize >= minExpectedCount;
  }
  List<Integer> binBounds=new ArrayList<Integer>();
  binBounds.add(lower);
  int bound=lower + binWidth;
  while (bound < upper - binWidth) {
    binBounds.add(bound);
    bound+=binWidth;
  }
  binBounds.add(upper);
  final int binCount=binBounds.size() + 1;
  long[] observed=new long[binCount];
  double[] expected=new double[binCount];
  observed[0]=0;
  for (int i=0; i < lower; i++) {
    observed[0]+=frequency.getCount((long)i);
  }
  expected[0]=poissonDistribution.cumulativeProbability(lower - 1) * sampleSize;
  observed[binCount - 1]=0;
  for (int i=upper; i <= maxObservedValue; i++) {
    observed[binCount - 1]+=frequency.getCount((long)i);
  }
  expected[binCount - 1]=(1 - poissonDistribution.cumulativeProbability(upper - 1)) * sampleSize;
  for (int i=1; i < binCount - 1; i++) {
    observed[i]=0;
    for (int j=binBounds.get(i - 1); j < binBounds.get(i); j++) {
      observed[i]+=frequency.getCount((long)j);
    }
    expected[i]=(poissonDistribution.cumulativeProbability(binBounds.get(i) - 1) - poissonDistribution.cumulativeProbability(binBounds.get(i - 1) - 1)) * sampleSize;
  }
  if (UnitTestUtils.chiSquareTest(expected,observed) < alpha) {
    StringBuilder msgBuffer=new StringBuilder();
    DecimalFormat df=new DecimalFormat("#.##");
    msgBuffer.append("Chisquare test failed for mean = ");
    msgBuffer.append(mean);
    msgBuffer.append(" p-value = ");
    msgBuffer.append(UnitTestUtils.chiSquareTest(expected,observed));
    msgBuffer.append(" chisquare statistic = ");
    msgBuffer.append(UnitTestUtils.chiSquare(expected,observed));
    msgBuffer.append(". \n");
    msgBuffer.append("bin\t\texpected\tobserved\n");
    for (int i=0; i < expected.length; i++) {
      msgBuffer.append("[");
      msgBuffer.append(i == 0 ? 1 : binBounds.get(i - 1));
      msgBuffer.append(",");
      msgBuffer.append(i == binBounds.size() ? "inf" : binBounds.get(i));
      msgBuffer.append(")");
      msgBuffer.append("\t\t");
      msgBuffer.append(df.format(expected[i]));
      msgBuffer.append("\t\t");
      msgBuffer.append(observed[i]);
      msgBuffer.append("\n");
    }
    msgBuffer.append("This test can fail randomly due to sampling error with probability ");
    msgBuffer.append(alpha);
    msgBuffer.append(".");
    Assert.fail(msgBuffer.toString());
  }
}

public static void checkValid(double[] x){
  for (  double v : x) {
    if (Double.isNaN(v)) {
      throw new RuntimeException("Invalid entry " + v);
    }
  }
}

final void layoutChildren(boolean queryAdapter){
  final int paddingLeft=getPaddingLeft();
  final int paddingRight=getPaddingRight();
  final int itemMargin=mItemMargin;
  final int colWidth=(getWidth() - paddingLeft - paddingRight- itemMargin * (mColCount - 1)) / mColCount;
  mColWidth=colWidth;
  int rebuildLayoutRecordsBefore=-1;
  int rebuildLayoutRecordsAfter=-1;
  Arrays.fill(mItemBottoms,Integer.MIN_VALUE);
  final int childCount=getChildCount();
  int amountRemoved=0;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    final int col=lp.column;
    final int position=mFirstPosition + i;
    final boolean needsLayout=queryAdapter || child.isLayoutRequested();
    if (queryAdapter) {
      View newView=obtainView(position,child);
      if (newView == null) {
        removeViewAt(i);
        if (i - 1 >= 0)         invalidateLayoutRecordsAfterPosition(i - 1);
        amountRemoved++;
        continue;
      }
 else       if (newView != child) {
        removeViewAt(i);
        addView(newView,i);
        child=newView;
      }
      lp=(LayoutParams)child.getLayoutParams();
    }
    final int span=Math.min(mColCount,lp.span);
    final int widthSize=colWidth * span + itemMargin * (span - 1);
    if (needsLayout) {
      final int widthSpec=MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY);
      final int heightSpec;
      if (lp.height == LayoutParams.WRAP_CONTENT) {
        heightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
      }
 else {
        heightSpec=MeasureSpec.makeMeasureSpec(lp.height,MeasureSpec.EXACTLY);
      }
      child.measure(widthSpec,heightSpec);
    }
    int childTop=mItemBottoms[col] > Integer.MIN_VALUE ? mItemBottoms[col] + mItemMargin : child.getTop();
    if (span > 1) {
      int lowest=childTop;
      for (int j=col + 1; j < col + span; j++) {
        final int bottom=mItemBottoms[j] + mItemMargin;
        if (bottom > lowest) {
          lowest=bottom;
        }
      }
      childTop=lowest;
    }
    final int childHeight=child.getMeasuredHeight();
    final int childBottom=childTop + childHeight;
    final int childLeft=paddingLeft + col * (colWidth + itemMargin);
    final int childRight=childLeft + child.getMeasuredWidth();
    child.layout(childLeft,childTop,childRight,childBottom);
    for (int j=col; j < col + span; j++) {
      mItemBottoms[j]=childBottom;
    }
    final LayoutRecord rec=mLayoutRecords.get(position);
    if (rec != null && rec.height != childHeight) {
      rec.height=childHeight;
      rebuildLayoutRecordsBefore=position;
    }
    if (rec != null && rec.span != span) {
      rec.span=span;
      rebuildLayoutRecordsAfter=position;
    }
  }
  for (int i=0; i < mColCount; i++) {
    if (mItemBottoms[i] == Integer.MIN_VALUE) {
      mItemBottoms[i]=mItemTops[i];
    }
  }
  if (rebuildLayoutRecordsBefore >= 0 || rebuildLayoutRecordsAfter >= 0) {
    if (rebuildLayoutRecordsBefore >= 0) {
      invalidateLayoutRecordsBeforePosition(rebuildLayoutRecordsBefore);
    }
    if (rebuildLayoutRecordsAfter >= 0) {
      invalidateLayoutRecordsAfterPosition(rebuildLayoutRecordsAfter);
    }
    for (int i=0; i < (childCount - amountRemoved); i++) {
      final int position=mFirstPosition + i;
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      LayoutRecord rec=mLayoutRecords.get(position);
      if (rec == null) {
        rec=new LayoutRecord();
        mLayoutRecords.put(position,rec);
      }
      rec.column=lp.column;
      rec.height=child.getHeight();
      rec.id=lp.id;
      rec.span=Math.min(mColCount,lp.span);
    }
  }
  if (this.mSelectorPosition != INVALID_POSITION) {
    View child=getChildAt(mMotionPosition - mFirstPosition);
    if (child != null)     positionSelector(mMotionPosition,child);
  }
 else   if (mTouchMode > TOUCH_MODE_DOWN) {
    View child=getChildAt(mMotionPosition - mFirstPosition);
    if (child != null)     positionSelector(mMotionPosition,child);
  }
 else {
    mSelectorRect.setEmpty();
  }
}

protected void processConnectionEvent(ConnectionEvent event){
  for (Enumeration<ConnectionListener> e=connectionListeners.elements(); e.hasMoreElements(); ) {
    ConnectionListener l=e.nextElement();
switch (event.getType()) {
case ConnectionEvent.CONNECTED:
      l.connected((ConnectedEvent)event);
    break;
case ConnectionEvent.DISCONNECTED:
  l.disconnected((DisconnectedEvent)event);
break;
case ConnectionEvent.PACKET_RECEIVED:
l.packetReceived((PacketReceivedEvent)event);
break;
}
}
}

public double percentage(ConstantRange range){
  SortedSet<Constant> sorted=values();
  SortedSet<Constant> contained=new TreeSet<Constant>();
  Constant prev=null;
  for (  Constant pct : sorted) {
    if (range.contains(pct))     contained.add(pct);
 else     if (contained.isEmpty())     prev=pct;
  }
  if (contained.size() == 0)   return 0.0;
  double prevPercent=prev == null ? 0.0 : pcts.get(prev);
  return pcts.get(contained.last()) - prevPercent;
}

public static void closeQuiet(@Nullable Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    IOException ignored) {
    }
  }
}

@Override public void releaseLuceePageContext(PageContext pc,boolean register){
  if (pc.getId() < 0)   return;
  pc.release();
  ThreadLocalPageContext.release();
  runningPcs.remove(Integer.valueOf(pc.getId()));
  if (pcs.size() < 100 && pc.getRequestTimeoutException() == null)   pcs.push(pc);
}

public void addEventListener(SIPDialogEventListener newListener){
  eventListeners.add(newListener);
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

private static byte[] stringToByteArray(String str){
  if (str == null) {
    return null;
  }
  byte[] srcByte=str.getBytes();
  int srcLength=srcByte.length;
  byte[] result=new byte[srcLength + 1];
  System.arraycopy(srcByte,0,result,0,srcLength);
  result[srcLength]=0;
  return result;
}

public static Properties loadProperties(ClassLoader classLoader,String classpathResource){
  return loadProperties(null,classpathResource);
}

@Override public boolean equals(Object o){
  if (o instanceof Graph) {
    return string.equals(o.toString());
  }
  return false;
}

public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {
  if (value == null) {
    throw new IllegalArgumentException("Value to parse may not be null");
  }
  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;
  CharArrayBuffer buffer=new CharArrayBuffer(value.length());
  buffer.append(value);
  SaveParserCursor cursor=new SaveParserCursor(0,value.length());
  return parser.parseNameValuePair(buffer,cursor);
}

private void pullEvent(){
  final int newScrollValue;
  final int itemDimension;
  final float initialMotionValue, lastMotionValue;
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    initialMotionValue=mInitialMotionX;
  lastMotionValue=mLastMotionX;
break;
case VERTICAL:
default :
initialMotionValue=mInitialMotionY;
lastMotionValue=mLastMotionY;
break;
}
switch (mCurrentMode) {
case PULL_FROM_END:
newScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getFooterSize();
break;
case PULL_FROM_START:
default :
newScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getHeaderSize();
break;
}
setHeaderScroll(newScrollValue);
if (newScrollValue != 0 && !isRefreshing()) {
float scale=Math.abs(newScrollValue) / (float)itemDimension;
switch (mCurrentMode) {
case PULL_FROM_END:
mFooterLayout.onPull(scale);
break;
case PULL_FROM_START:
default :
mHeaderLayout.onPull(scale);
break;
}
if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {
setState(State.PULL_TO_REFRESH);
}
 else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {
setState(State.RELEASE_TO_REFRESH);
}
}
}

private static MappingObject ObjectAt(PCalLocation loc,MappingObject[][] map){
  return map[loc.getLine()][loc.getColumn()];
}

public String parse(File file,JSON m){
  try {
    Template template=getTemplate(file);
    if (template != null) {
      StringWriter w=new StringWriter();
      BufferedWriter writer=new BufferedWriter(w);
      template.merge(new VelocityContext(m),writer);
      writer.flush();
      writer.close();
      return w.toString();
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
  }
  return null;
}

private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){
  if (text1 == null || text2 == null) {
    throw new IllegalArgumentException("Null inputs. (diff_main)");
  }
  LinkedList<Diff> diffs;
  if (text1.equals(text2)) {
    diffs=new LinkedList<Diff>();
    if (text1.length() != 0) {
      diffs.add(new Diff(Operation.EQUAL,text1));
    }
    return diffs;
  }
  int commonlength=diff_commonPrefix(text1,text2);
  String commonprefix=text1.substring(0,commonlength);
  text1=text1.substring(commonlength);
  text2=text2.substring(commonlength);
  commonlength=diff_commonSuffix(text1,text2);
  String commonsuffix=text1.substring(text1.length() - commonlength);
  text1=text1.substring(0,text1.length() - commonlength);
  text2=text2.substring(0,text2.length() - commonlength);
  diffs=diff_compute(text1,text2,checklines,deadline);
  if (commonprefix.length() != 0) {
    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));
  }
  if (commonsuffix.length() != 0) {
    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));
  }
  diff_cleanupMerge(diffs);
  return diffs;
}

public Repository(String domain,boolean fairLock){
  lock=new ReentrantReadWriteLock(fairLock);
  domainTb=new HashMap<String,Map<String,NamedObject>>(5);
  if (domain != null && domain.length() != 0)   this.domain=domain.intern();
 else   this.domain=ServiceName.DOMAIN;
  domainTb.put(this.domain,new HashMap<String,NamedObject>());
}

public int countTokens(){
  int count=0;
  boolean inToken=false;
  for (int i=position, length=string.length(); i < length; i++) {
    if (delimiters.indexOf(string.charAt(i),0) >= 0) {
      if (returnDelimiters)       count++;
      if (inToken) {
        count++;
        inToken=false;
      }
    }
 else {
      inToken=true;
    }
  }
  if (inToken)   count++;
  return count;
}

public static synchronized void indexDocument(CodeIndexDocument codeIndexDocument) throws IOException {
  Queue<CodeIndexDocument> queue=new ConcurrentLinkedQueue<>();
  queue.add(codeIndexDocument);
  indexDocuments(queue);
  queue=null;
}

protected void resetCommon() throws XNIException {
  int count=fCommonComponents.size();
  for (int i=0; i < count; i++) {
    XMLComponent c=(XMLComponent)fCommonComponents.get(i);
    c.reset(this);
  }
}

private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){
  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());
  StringBuilder newLabel=new StringBuilder();
  newLabel.append(trustedSrc.getLabel());
  newLabel.append("-target-");
  newLabel.append(invalidTgtVA.getLabel());
  log.info("Revised name for target: " + newLabel.toString());
  invalidTgt.setLabel(newLabel.toString());
  NamedURI projectURI=invalidTgt.getProject();
  projectURI.setName(newLabel.toString());
  invalidTgt.setProject(projectURI);
  NamedURI tenantURI=invalidTgt.getTenant();
  tenantURI.setName(newLabel.toString());
  invalidTgt.setTenant(tenantURI);
  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);
  if (tgtVplexVolume != null) {
    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);
    if (srcVplexVolume != null) {
      newLabel.setLength(0);
      newLabel.append(srcVplexVolume.getLabel());
      newLabel.append("-target-");
      newLabel.append(invalidTgtVA.getLabel());
      log.info("Revised name for VPlex target: " + newLabel.toString());
      tgtVplexVolume.setLabel(newLabel.toString());
      projectURI=tgtVplexVolume.getProject();
      projectURI.setName(newLabel.toString());
      tgtVplexVolume.setProject(projectURI);
      tenantURI=tgtVplexVolume.getTenant();
      tenantURI.setName(newLabel.toString());
      tgtVplexVolume.setTenant(tenantURI);
      dbClient.updateAndReindexObject(tgtVplexVolume);
    }
  }
}

protected void handle(Exception exception,String title,String message){
  Utils.handleError(getShell(),exception,title,message);
}

private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  i18n=Environment.getI18n();
  beanContextChildSupport=new BeanContextChildSupport(this);
}

private void paintForegroundEnabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(enabledColor);
  g.fill(s);
}

private static void logThrow(Level level,String className,String methodName,String message,Object[] args,Throwable thrown){
  java.util.logging.LogRecord lr=new java.util.logging.LogRecord(level,message);
  lr.setLoggerName(logger.getName());
  lr.setSourceClassName(className);
  lr.setSourceMethodName(methodName);
  lr.setParameters(args);
  lr.setThrown(thrown);
  logger.log(lr);
}

public void testToBigIntegerZero(){
  String a="-123809648392384754573567356745735.63567890295784902768787678287E-500";
  BigInteger bNumber=new BigInteger("0");
  BigDecimal aNumber=new BigDecimal(a);
  BigInteger result=aNumber.toBigInteger();
  assertTrue("incorrect value",result.equals(bNumber));
}

public void onAccuracyChanged(Sensor sensor,int accuracy){
  if (sensor.getType() != Sensor.TYPE_ACCELEROMETER) {
    return;
  }
  if (this.status == AccelListener.STOPPED) {
    return;
  }
  this.accuracy=accuracy;
}

public boolean allowsTrailingArguments(){
  return allowsTrailingArguments;
}

@AndroidOnly("Uses specific class: " + "org.apache.harmony.security.asn1.ASN1OctetString.") public void testSetMaxCRLNumberLjava_math_BigInteger(){
  X509CRLSelector selector=new X509CRLSelector();
  BigInteger maxCRL=new BigInteger("10000");
  TestCRL crl=new TestCRL(maxCRL);
  selector.setMaxCRLNumber(null);
  assertTrue("Any CRL should match in the case of null minCRLNumber.",selector.match(crl));
  selector.setMaxCRLNumber(maxCRL);
  assertTrue("The CRL should match the selection criteria.",selector.match(crl));
  selector.setMaxCRLNumber(new BigInteger("9999"));
  assertFalse("The CRL should not match the selection criteria.",selector.match(crl));
}

private void evaluatePopup(MouseEvent e){
  if (e.isPopupTrigger()) {
    JPopupMenu menu=createBookmarkPopupMenu();
    if (menu != null) {
      menu.show(this,e.getX(),e.getY());
    }
  }
}

private boolean removeTask(Task t,int min){
  for (int i=tasks.size(); --i >= min; ) {
    if (tasks.get(i) == t) {
      tasks.remove(i);
      if (i < firstPending) {
        firstPending--;
        for (int j=threads.size(); --j >= 0; ) {
          TaskThread thread=threads.get(j);
          if (thread.task == t) {
            if (thread != Thread.currentThread())             thread.interrupt();
            break;
          }
        }
      }
      return true;
    }
  }
  return false;
}

public void test_DivideBigDecimalRoundingModeHALF_UP(){
  String a="3736186567876876578956958765675671119238118911893939591735";
  String b="74723342238476237823787879183470";
  RoundingMode rm=RoundingMode.HALF_UP;
  String c="50000260373164286401361913";
  BigDecimal aNumber=new BigDecimal(new BigInteger(a));
  BigDecimal bNumber=new BigDecimal(new BigInteger(b));
  BigDecimal result=aNumber.divide(bNumber,rm);
  assertEquals("incorrect value",c,result.toString());
}

protected void ensurePathExists(String path){
  String[] paths=path.split("/");
  StringBuffer spath=new StringBuffer("/");
  for (  String temp : paths) {
    if (StringUtils.isBlank(temp)) {
      continue;
    }
    spath.append(temp);
    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);
    spath.append("/");
  }
}

public Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  int i=name.lastIndexOf('.');
  if (i != -1) {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPackageAccess(name.substring(0,i));
    }
  }
  if (ucp.knownToNotExist(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    throw new ClassNotFoundException(name);
  }
  return (super.loadClass(name,resolve));
}

private int measureShort(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

private boolean isListChildUnderClipped(float x,float y){
  final View listChild=findListChildUnder(x,y);
  return listChild != null && isDescendantClipped(listChild);
}

Rules(Workspace workspace){
  this.root=workspace.getRoot();
  this.teamHook=workspace.getTeamHook();
}

public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {
  OutputStream out=null;
  try {
    out=openOutputStream(file,append);
    out.write(data);
    out.close();
  }
  finally {
    IOUtils.closeQuietly(out);
  }
}

public void add(@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(item);
  }
  if (notifyOnChange) {
    notifyItemInserted(items.size());
  }
}

private void checkPendingCustomMessages(){
  if (joiningNodes.isEmpty() && isLocalNodeCoordinator()) {
    TcpDiscoveryCustomEventMessage msg;
    while ((msg=pendingCustomMsgs.poll()) != null) {
      processCustomMessage(msg);
      if (msg.verified())       msgHist.add(msg);
    }
  }
}

private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){
  int count=0;
  int len=msg.length();
  int idx=startpos;
  if (idx < len) {
    char ch=msg.charAt(idx);
    while (isDigit(ch) && idx < len) {
      count++;
      idx++;
      if (idx < len) {
        ch=msg.charAt(idx);
      }
    }
  }
  return count;
}

protected int parseAndAddNode(XmlResourceParser parser,HashMap<String,TagParser> tagParserMap,ArrayList<Long> screenIds) throws XmlPullParserException, IOException {
  if (TAG_INCLUDE.equals(parser.getName())) {
    final int resId=getAttributeResourceValue(parser,ATTR_WORKSPACE,0);
    if (resId != 0) {
      return parseLayout(resId,screenIds);
    }
 else {
      return 0;
    }
  }
  mValues.clear();
  parseContainerAndScreen(parser,mTemp);
  final long container=mTemp[0];
  final long screenId=mTemp[1];
  mValues.put(Favorites.CONTAINER,container);
  mValues.put(Favorites.SCREEN,screenId);
  mValues.put(Favorites.CELLX,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_X),mColumnCount));
  mValues.put(Favorites.CELLY,convertToDistanceFromEnd(getAttributeValue(parser,ATTR_Y),mRowCount));
  TagParser tagParser=tagParserMap.get(parser.getName());
  if (tagParser == null) {
    if (LOGD)     Log.d(TAG,"Ignoring unknown element tag: " + parser.getName());
    return 0;
  }
  long newElementId=tagParser.parseAndAdd(parser);
  if (newElementId >= 0) {
    if (!screenIds.contains(screenId) && container == Favorites.CONTAINER_DESKTOP) {
      screenIds.add(screenId);
    }
    return 1;
  }
  return 0;
}

private float calculateScrambleImageHeightMultiplier(float multiplier){
switch (currentPuzzle) {
case PuzzleUtils.TYPE_777:
case PuzzleUtils.TYPE_666:
case PuzzleUtils.TYPE_555:
case PuzzleUtils.TYPE_222:
case PuzzleUtils.TYPE_444:
case PuzzleUtils.TYPE_333:
    return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_CLOCK:
  return multiplier / 2;
case PuzzleUtils.TYPE_MEGA:
return (multiplier / 2);
case PuzzleUtils.TYPE_PYRA:
return (float)(multiplier / Math.sqrt(1.25));
case PuzzleUtils.TYPE_SKEWB:
return (multiplier / 4) * 3;
case PuzzleUtils.TYPE_SQUARE1:
return multiplier;
}
return multiplier;
}

public void testNumericScalars() throws Exception {
  ObjectMapper m=new ObjectMapper();
  m.enableDefaultTyping();
  assertEquals("[123]",m.writeValueAsString(new Object[]{Integer.valueOf(123)}));
  assertEquals("[[\"java.lang.Long\",37]]",m.writeValueAsString(new Object[]{Long.valueOf(37)}));
  assertEquals("[0.25]",m.writeValueAsString(new Object[]{Double.valueOf(0.25)}));
  assertEquals("[[\"java.lang.Float\",0.5]]",m.writeValueAsString(new Object[]{Float.valueOf(0.5f)}));
}

protected void closeCallbacksExceptListener(){
  closeCacheCallback(getCacheLoader());
  closeCacheCallback(getCacheWriter());
  closeCacheCallback(getEvictionController());
}

private static int indexOf(Object o,Object[] elements,int index,int fence){
  if (o == null) {
    for (int i=index; i < fence; i++)     if (elements[i] == null)     return i;
  }
 else {
    for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i;
  }
  return -1;
}

private void populateProfiles(final ProfileList profiles){
  profilesComboBox.removeAllItems();
  for (  Profile p : profiles) {
    profilesComboBox.addItem(p);
  }
  final int count=profilesComboBox.getItemCount();
  if (count != 0) {
    profilesComboBox.setSelectedIndex(count - 1);
  }
}

private long checkFileHeader(BufferedFileDataInput bfdi) throws ReplicatorException, InterruptedException {
  int magic=0;
  short major=0;
  short minor=0;
  try {
    bfdi.waitAvailable(HEADER_LENGTH,HEADER_WAIT_MILLIS);
    magic=bfdi.readInt();
    major=bfdi.readShort();
    minor=bfdi.readShort();
    baseSeqno=bfdi.readLong();
  }
 catch (  IOException e) {
    throw new THLException("Failed to read file header from  " + file.getAbsolutePath(),e);
  }
  if (magic != MAGIC_NUMBER)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : invalid magic number");
  if (major != MAJOR_VERSION)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : incompatible major version");
  if (minor != MINOR_VERSION)   logger.warn("Minor version mismatch : file " + file.getAbsolutePath() + " using format "+ major+ "."+ minor+ " - Tungsten running version "+ MAJOR_VERSION+ "."+ MINOR_VERSION);
  return baseSeqno;
}

public float realAbsolute(){
  return Math.abs(mLeft);
}

private ExtremumType extremumType(int n,double[] alpha_extreme,HyperBoundingBox interval){
  if (n == alpha_extreme.length - 1) {
    return extremumType;
  }
  double[] alpha_extreme_l=new double[alpha_extreme.length];
  double[] alpha_extreme_r=new double[alpha_extreme.length];
  double[] alpha_extreme_c=new double[alpha_extreme.length];
  System.arraycopy(alpha_extreme,0,alpha_extreme_l,0,alpha_extreme.length);
  System.arraycopy(alpha_extreme,0,alpha_extreme_r,0,alpha_extreme.length);
  System.arraycopy(alpha_extreme,0,alpha_extreme_c,0,alpha_extreme.length);
  double[] centroid=SpatialUtil.centroid(interval);
  for (int i=0; i < n; i++) {
    alpha_extreme_l[i]=centroid[i];
    alpha_extreme_r[i]=centroid[i];
    alpha_extreme_c[i]=centroid[i];
  }
  double intervalLength=interval.getMax(n) - interval.getMin(n);
  alpha_extreme_l[n]=Math.random() * intervalLength + interval.getMin(n);
  alpha_extreme_r[n]=Math.random() * intervalLength + interval.getMin(n);
  double f_c=function(alpha_extreme_c);
  double f_l=function(alpha_extreme_l);
  double f_r=function(alpha_extreme_r);
  if (f_l < f_c) {
    if (f_r < f_c || Math.abs(f_r - f_c) < DELTA) {
      return ExtremumType.MAXIMUM;
    }
  }
  if (f_r < f_c) {
    if (f_l < f_c || Math.abs(f_l - f_c) < DELTA) {
      return ExtremumType.MAXIMUM;
    }
  }
  if (f_l > f_c) {
    if (f_r > f_c || Math.abs(f_r - f_c) < DELTA) {
      return ExtremumType.MINIMUM;
    }
  }
  if (f_r > f_c) {
    if (f_l > f_c || Math.abs(f_l - f_c) < DELTA) {
      return ExtremumType.MINIMUM;
    }
  }
  if (Math.abs(f_l - f_c) < DELTA && Math.abs(f_r - f_c) < DELTA) {
    return ExtremumType.CONSTANT;
  }
  throw new IllegalArgumentException("Houston, we have a problem!\n" + this + "\n"+ "f_l "+ f_l+ "\n"+ "f_c "+ f_c+ "\n"+ "f_r "+ f_r+ "\n"+ "p "+ vec.toArray()+ "\n"+ "alpha   "+ FormatUtil.format(alpha_extreme_c)+ "\n"+ "alpha_l "+ FormatUtil.format(alpha_extreme_l)+ "\n"+ "alpha_r "+ FormatUtil.format(alpha_extreme_r)+ "\n"+ "n "+ n);
}

public static String map2OID(String algName){
  return alg2OidMap.get(algName.toUpperCase(Locale.US));
}

@Override public Generator<ICircle> construct(String[] args){
  return new UniformGenerator(Double.valueOf(args[0]));
}

private boolean yy_refill() throws java.io.IOException {
  if (yy_startRead > 0) {
    System.arraycopy(yy_buffer,yy_startRead,yy_buffer,0,yy_endRead - yy_startRead);
    yy_endRead-=yy_startRead;
    yy_currentPos-=yy_startRead;
    yy_markedPos-=yy_startRead;
    yy_pushbackPos-=yy_startRead;
    yy_startRead=0;
  }
  if (yy_currentPos >= yy_buffer.length) {
    char newBuffer[]=new char[yy_currentPos * 2];
    System.arraycopy(yy_buffer,0,newBuffer,0,yy_buffer.length);
    yy_buffer=newBuffer;
  }
  int numRead=yy_reader.read(yy_buffer,yy_endRead,yy_buffer.length - yy_endRead);
  if (numRead < 0) {
    return true;
  }
 else {
    yy_endRead+=numRead;
    return false;
  }
}

protected void processMouseEvent(MouseEvent e){
  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {
    finishEditing(true);
  }
  super.processMouseEvent(e);
}

protected void addModule(Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap,Collection<IFloodlightModule> moduleList,IFloodlightModule module){
  Collection<Class<? extends IFloodlightService>> servs=moduleServiceMap.get(module);
  if (servs != null) {
    for (    Class<? extends IFloodlightService> c : servs)     moduleMap.put(c,module);
  }
  moduleList.add(module);
}

protected boolean hasAllTables() throws CouldntLoadDataException, InvalidDatabaseException {
  NaviLogger.info("Checking the existence of the BinNavi database tables");
  final int counter=PostgreSQLHelpers.getTableCount(getConnection(),Lists.newArrayList(TABLES));
  if (counter == 0) {
    return false;
  }
 else   if (counter == TABLES.length) {
    return true;
  }
 else {
    throw new InvalidDatabaseException(String.format("Invalid database state (%d of %d tables found)",counter,TABLES.length));
  }
}

public List<String> classify(List<List<Feature>> features) throws CleartkProcessingException {
  String[][] featureStringArray=toStrings(features);
  Pipe pipe=transducer.getInputPipe();
  Instance instance=new Instance(featureStringArray,null,null,null);
  instance=pipe.instanceFrom(instance);
  Sequence<?> data=(Sequence<?>)instance.getData();
  Sequence<?> untypedSequence=transducer.transduce(data);
  Sequence<String> sequence=ReflectionUtil.uncheckedCast(untypedSequence);
  List<String> returnValues=new ArrayList<String>();
  for (int i=0; i < sequence.size(); i++) {
    String encodedOutcome=sequence.get(i);
    returnValues.add(outcomeEncoder.decode(encodedOutcome));
  }
  return returnValues;
}

public void onBindHeaderViewHolder(RecyclerView.ViewHolder holder,int position){
  onBindHeaderViewHolder(holder,position,Collections.emptyList());
}

private void updateLineList(){
  if (horizontalLineRadiobutton.isSelected()) {
    setHorizontalLineSelected();
  }
 else {
    setVerticalLineSelected();
  }
  updateButtonStates();
}

public void rectangle(double x,double y,double halfWidth,double halfHeight){
  if (halfWidth < 0)   throw new IllegalArgumentException("half width can't be negative");
  if (halfHeight < 0)   throw new IllegalArgumentException("half height can't be negative");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * halfWidth);
  double hs=factorY(2 * halfHeight);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

public void replaceSplitElement(int aIndex,Fragment aSplitElement){
  splits.set(aIndex,aSplitElement);
}

private void startItemList(StringBuilder result,String rootId){
  result.append("<div class=\"container\"" + "><div class=\"alone fakealone\" id=\"alone_ef_" + rootId + "\"></div><div class=\"justchildren fakejustchildren\">");
}

private static int numInitialSplits(long numRecords){
  final int maxSplits=100;
  final long recordsPerSplit=10000;
  return (int)Math.min(maxSplits,numRecords / recordsPerSplit + 1);
}

public void mouseClicked(MouseEvent e){
  if (e.getClickCount() > 1) {
    System.gc();
  }
}

private static String[] scanForSources(final File sourceDir,final Set<String> sourceIncludes,final Set<String> sourceExcludes){
  final DirectoryScanner ds=new DirectoryScanner();
  ds.setFollowSymlinks(true);
  ds.setBasedir(sourceDir);
  ds.setIncludes(sourceIncludes.toArray(new String[sourceIncludes.size()]));
  ds.setExcludes(sourceExcludes.toArray(new String[sourceExcludes.size()]));
  ds.addDefaultExcludes();
  try {
    ds.scan();
  }
 catch (  IllegalStateException e) {
    return new String[0];
  }
  return ds.getIncludedFiles();
}

private boolean hasNextPostponed(){
  return !postponedRoutes.isEmpty();
}

public boolean hasSingleElement(){
  return mSelectedWidgets.size() == 1;
}

public IgfsPath(URI uri){
  A.notNull(uri,"uri");
  path=normalizePath(uri.getPath());
}

public int toInt(Element el,String attributeName){
  return Caster.toIntValue(el.getAttribute(attributeName),Integer.MIN_VALUE);
}

public static String readFully(Reader reader) throws IOException {
  try {
    StringWriter writer=new StringWriter();
    char[] buffer=new char[1024];
    int count;
    while ((count=reader.read(buffer)) != -1) {
      writer.write(buffer,0,count);
    }
    return writer.toString();
  }
  finally {
    reader.close();
  }
}

public void addGetters(int assignedPropertyNumber,String propertyName){
  for (  EventType type : knownTypes) {
    EventPropertyGetter getter=type.getGetter(propertyName);
    VariantPropertyGetterRow row=allGetters.get(type);
    if (row == null) {
synchronized (this) {
        row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]);
        allGetters.put(type,row);
      }
    }
    row.addGetter(assignedPropertyNumber,getter);
  }
  properties.add(propertyName);
}

protected void markUsed(Entry entry){
  entry.lastUsed=System.nanoTime();
}

@Override public String execute(){
  return SUCCESS;
}

private void handleStateLeft(InetAddress endpoint,String[] pieces){
  assert pieces.length >= 2;
  Collection<Token> tokens=getTokensFor(endpoint);
  if (logger.isDebugEnabled())   logger.debug("Node {} state left, tokens {}",endpoint,tokens);
  excise(tokens,endpoint,extractExpireTime(pieces));
}

public static void register(String algorithmURI,Class<? extends SignatureAlgorithmSpi> implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, XMLSignatureException {
  JavaUtils.checkRegisterPermission();
  if (log.isLoggable(java.util.logging.Level.FINE)) {
    log.log(java.util.logging.Level.FINE,"Try to register " + algorithmURI + " "+ implementingClass);
  }
  Class<? extends SignatureAlgorithmSpi> registeredClass=algorithmHash.get(algorithmURI);
  if (registeredClass != null) {
    Object exArgs[]={algorithmURI,registeredClass};
    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);
  }
  algorithmHash.put(algorithmURI,implementingClass);
}

@SuppressWarnings("UnusedDeclaration") public KeyValuePersistenceSettings(File settingsFile){
  InputStream in;
  try {
    in=new FileInputStream(settingsFile);
  }
 catch (  IOException e) {
    throw new IgniteException("Failed to get input stream for Cassandra persistence settings file: " + settingsFile.getAbsolutePath(),e);
  }
  init(loadSettings(in));
}

public boolean containsWordBreakingChar(final @NonNull CharSequence input){
  if (!TextUtils.isEmpty(input)) {
    for (int i=0; i < input.length(); i++) {
      char c=input.charAt(i);
      if (isWordBreakingChar(c)) {
        return true;
      }
    }
  }
  return false;
}

private void checkInteriorIntersections(){
  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {
    SegmentString ss0=(SegmentString)i.next();
    for (Iterator j=segStrings.iterator(); j.hasNext(); ) {
      SegmentString ss1=(SegmentString)j.next();
      checkInteriorIntersections(ss0,ss1);
    }
  }
}

public synchronized boolean removeElement(Object object){
  int index;
  if ((index=indexOf(object,0)) == -1) {
    return false;
  }
  removeElementAt(index);
  return true;
}

private <T>UnaryOperator<T> compose(UnaryOperator<T> before,UnaryOperator<T> after){
  return null;
}

private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){
  int cdcPos=cdcSpecs.size();
  if (cdcColumnsAtFront)   cdcPos=0;
  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1);
  spec.setName("CDC_OP_TYPE");
  spec.setType(java.sql.Types.VARCHAR);
  spec.setLength(1);
  cdcSpecs.add(cdcPos,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 1);
  spec.setName("CDC_TIMESTAMP");
  spec.setType(java.sql.Types.TIMESTAMP);
  cdcSpecs.add(cdcPos + 1,spec);
  spec=cdcRowChangeData.new ColumnSpec();
  spec.setIndex(cdcPos + 1 + 2);
  spec.setName("CDC_SEQUENCE_NUMBER");
  spec.setType(java.sql.Types.BIGINT);
  cdcSpecs.add(cdcPos + 2,spec);
}

public static String convertToJavaFieldName(String name){
  int dotIndex=name.indexOf('.');
  if (dotIndex >= 0) {
    name=name.substring(0,dotIndex);
  }
  String[] split=name.split("[_-]");
  StringBuilder out=new StringBuilder();
  boolean first=true;
  for (  String section : split) {
    if (first) {
      first=false;
      out.append(section);
    }
 else {
      out.append(StringUtil.capitalize(section));
    }
  }
  return out.toString();
}

public static SecretKeys generateKey() throws GeneralSecurityException {
  fixPrng();
  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);
  keyGen.init(AES_KEY_LENGTH_BITS);
  SecretKey confidentialityKey=keyGen.generateKey();
  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);
  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);
  return new SecretKeys(confidentialityKey,integrityKey);
}

public static void checkArgument(boolean expression,@Nullable Object errorMessage){
  if (!expression) {
    throw new IllegalArgumentException(String.valueOf(errorMessage));
  }
}

protected void execute(String[] sqls,SQLiteDatabase db){
  String throwSQL="";
  try {
    if (sqls != null) {
      for (      String sql : sqls) {
        throwSQL=sql;
        db.execSQL(BaseUtility.changeCase(sql));
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL);
  }
}

private synchronized void rebuildJournal() throws IOException {
  if (journalWriter != null) {
    journalWriter.close();
  }
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));
  try {
    writer.write(MAGIC);
    writer.write("\n");
    writer.write(VERSION_1);
    writer.write("\n");
    writer.write(Integer.toString(appVersion));
    writer.write("\n");
    writer.write(Integer.toString(valueCount));
    writer.write("\n");
    writer.write("\n");
    for (    Entry entry : lruEntries.values()) {
      if (entry.currentEditor != null) {
        writer.write(DIRTY + ' ' + entry.key+ '\n');
      }
 else {
        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');
      }
    }
  }
  finally {
    writer.close();
  }
  if (journalFile.exists()) {
    renameTo(journalFile,journalFileBackup,true);
  }
  renameTo(journalFileTmp,journalFile,false);
  journalFileBackup.delete();
  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));
}

private void refreshDoneButton(boolean done){
  butDone.setText(done ? Messages.getString("ChatLounge.notDone") : Messages.getString("ChatLounge.imDone"));
}

private void createMigrationTaskPage(){
  MigrationTaskEditor migrationTaskEditor=new MigrationTaskEditor(migrationTask,getContainer());
  int index=addPage(migrationTaskEditor.getControl());
  setPageText(index,"Task");
  taskListeners.add(migrationTaskEditor);
}

protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollX=getScrollX();
    int paddingLeft=getPaddingLeft();
    int paddingRight=getPaddingRight();
    final int width=getWidth();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
      int childLeft=0;
switch (hgrav) {
default :
        childLeft=paddingLeft;
      break;
case Gravity.LEFT:
    childLeft=paddingLeft;
  paddingLeft+=child.getWidth();
break;
case Gravity.CENTER_HORIZONTAL:
childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);
break;
case Gravity.RIGHT:
childLeft=width - paddingRight - child.getMeasuredWidth();
paddingRight+=child.getMeasuredWidth();
break;
}
childLeft+=scrollX;
final int childOffset=childLeft - child.getLeft();
if (childOffset != 0) {
child.offsetLeftAndRight(childOffset);
}
}
}
if (mOnPageChangeListener != null) {
mOnPageChangeListener.onPageScrolled(position,offset,offsetPixels);
}
if (mInternalPageChangeListener != null) {
mInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels);
}
if (mPageTransformer != null) {
final int scrollX=getScrollX();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

private void expand(int i){
  if (count + i <= buf.length) {
    return;
  }
  byte[] newbuf=mPool.getBuf((count + i) * 2);
  System.arraycopy(buf,0,newbuf,0,count);
  mPool.returnBuf(buf);
  buf=newbuf;
}

public static int toIPv4Address(String ipAddress){
  if (ipAddress == null)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");
  String[] octets=ipAddress.split("\\.");
  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");
  int result=0;
  for (int i=0; i < 4; ++i) {
    int oct=Integer.valueOf(octets[i]);
    if (oct > 255 || oct < 0)     throw new IllegalArgumentException("Octet values in specified" + " IPv4 address must be 0 <= value <= 255");
    result|=oct << ((3 - i) * 8);
  }
  return result;
}

public void closeCursor(Cursor cursor){
  cursor.close();
  cursorMap.remove(Integer.valueOf(cursor.getCursorId()));
}

private boolean hasNext(Pattern pattern){
  if (!hasNext()) {
    return false;
  }
  Matcher matcher=pattern.matcher(gserValue.substring(pos,length));
  return matcher.find();
}

void pushInt(int i){
switch (i) {
case -1:
    mv.visitInsn(ICONST_M1);
  return;
case 0:
mv.visitInsn(ICONST_0);
return;
case 1:
mv.visitInsn(ICONST_1);
return;
case 2:
mv.visitInsn(ICONST_2);
return;
case 3:
mv.visitInsn(ICONST_3);
return;
case 4:
mv.visitInsn(ICONST_4);
return;
case 5:
mv.visitInsn(ICONST_5);
return;
}
if (i >= Byte.MIN_VALUE && i <= Byte.MAX_VALUE) {
mv.visitIntInsn(BIPUSH,i);
return;
}
if (i >= Short.MIN_VALUE && i <= Short.MAX_VALUE) {
mv.visitIntInsn(SIPUSH,i);
return;
}
mv.visitLdcInsn(Integer.valueOf(i));
}

public static String xmlNode(String name,String attributes,String content,boolean indent){
  String start=attributes == null ? name : name + attributes;
  if (content == null) {
    return "<" + start + "/>\n";
  }
  if (indent && content.indexOf('\n') >= 0) {
    content="\n" + indent(content);
  }
  return "<" + start + ">"+ content+ "</"+ name+ ">\n";
}

public void add(int position,@NonNull T item){
synchronized (lock) {
    if (items == null) {
      items=new ArrayList<>();
    }
    items.add(position,item);
  }
  if (notifyOnChange) {
    notifyItemInserted(position);
  }
}

void notifyFailure(Throwable exception){
synchronized (waitObject) {
    isComplete=true;
    if (exception instanceof MqttException) {
      pendingException=(MqttException)exception;
    }
 else {
      pendingException=new MqttException(exception);
    }
    waitObject.notifyAll();
    if (exception instanceof MqttException) {
      lastException=(MqttException)exception;
    }
    if (listener != null) {
      listener.onFailure(this,exception);
    }
  }
}

public static void transform(StreamSource src,StreamSource stylesheet,Fop fop) throws FOPException {
  Result res=new SAXResult(fop.getDefaultHandler());
  try {
    TransformerFactory factory=TransformerFactory.newInstance();
    Transformer transformer;
    if (stylesheet == null) {
      transformer=factory.newTransformer();
    }
 else {
      transformer=factory.newTransformer(stylesheet);
    }
    transformer.setURIResolver(new LocalResolver(transformer.getURIResolver()));
    transformer.transform(src,res);
  }
 catch (  Exception e) {
    throw new FOPException(e);
  }
}

public List<String> splitStringWithDefaultDelimiterEscaped(String inputString){
  String delimiter=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER);
  String escapeChar=configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER_ESCAPE_CHAR);
  List<String> splitString=new ArrayList<>();
  if (StringUtils.isNotBlank(inputString)) {
    String regex="(?<!" + Pattern.quote(escapeChar) + ")"+ Pattern.quote(delimiter);
    for (    String s : inputString.split(regex)) {
      splitString.add(s.replace(escapeChar + delimiter,delimiter));
    }
  }
  return splitString;
}

protected final boolean readAvailableBlocking() throws IOException {
  char[] buffer=myBuffer;
  StringBuilder token=myTextBuffer;
  token.setLength(0);
  boolean read=false;
  int n;
  while ((n=myReader.read(buffer)) > 0) {
    if (myScheduledSubmitter != null)     myScheduledSubmitter.cancel(true);
    read=true;
synchronized (myTextBuffer) {
      processLine(buffer,token,n);
    }
    myScheduledSubmitter=myExecutorService.submit(myTokenSubmitter);
  }
  submitToken();
  return read;
}

public void deleteObligation(final Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {
  Map<ObligationSet,State> updatedStateMap=new HashMap<ObligationSet,State>();
  for (Iterator<State> i=stateIterator(); i.hasNext(); ) {
    State state=i.next();
    checkCircularity(state,obligation,basicBlockId);
    ObligationSet obligationSet=state.getObligationSet();
    obligationSet.remove(obligation);
    if (!obligationSet.isEmpty()) {
      updatedStateMap.put(obligationSet,state);
    }
  }
  replaceMap(updatedStateMap);
}

private void clipViewOnTheRight(Rect curViewBound,float curViewWidth,int right){
  curViewBound.right=(int)(right - mClipPadding);
  curViewBound.left=(int)(curViewBound.right - curViewWidth);
}

public ContentImpl createCompoundPackageContent(OleBlobImpl blob,String prettyName,String className,String typeName,ByteBuffer blobBb,int dataBlockLen){
  return new CompoundContentImpl(blob,prettyName,className,typeName,blobBb.position(),dataBlockLen);
}

protected boolean checkCoverage(){
  int i;
  int n;
  int[] count;
  Range r;
  String attrIndex;
  SubspaceClusterDefinition cl;
  count=new int[getNumAttributes()];
  for (i=0; i < getNumAttributes(); i++) {
    for (n=0; n < getClusters().length; n++) {
      cl=(SubspaceClusterDefinition)getClusters()[n];
      r=new Range(cl.getAttrIndexRange());
      r.setUpper(getNumAttributes());
      if (r.isInRange(i)) {
        count[i]++;
      }
    }
  }
  attrIndex="";
  for (i=0; i < count.length; i++) {
    if (count[i] == 0) {
      if (attrIndex.length() != 0) {
        attrIndex+=",";
      }
      attrIndex+=(i + 1);
    }
  }
  if (attrIndex.length() != 0) {
    throw new IllegalArgumentException("The following attributes are not covered by a cluster " + "definition: " + attrIndex + "\n");
  }
  return true;
}

private Set<Integer> findValues(String string){
  Set<Integer> results=new TreeSet<Integer>();
  for (  String str : string.split(",")) {
    if (!str.equals("")) {
      results.add(findValue(str));
    }
  }
  return results;
}

private static int indexOf(Object[] array,int len,Object elt){
  for (int i=0; i < len; i++) {
    if (elt.equals(array[i]))     return i;
  }
  return -1;
}

@Deprecated public void append(final String name,final String value){
  List<String> l=map.get(name);
  if (l != null) {
    l.add(value);
  }
 else {
    l=Lists.newArrayList(value);
    map.put(name,l);
  }
}

public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof Certificate)) {
    return false;
  }
  Certificate object=(Certificate)obj;
  try {
    return Arrays.equals(getEncoded(),object.getEncoded());
  }
 catch (  CertificateEncodingException e) {
    return false;
  }
}

public Statement between(Object former,Object later){
  statement.append(" BETWEEN ");
  append(former);
  statement.append(" AND ");
  append(later);
  return this;
}

public byte[] encode1(final String s){
  final ByteArrayBuffer tmp=new ByteArrayBuffer(s.length());
  final int nwritten=uc.encode(s,tmp);
  final int npack=LongPacker.getByteLength(nwritten);
  final byte[] a=new byte[npack + nwritten];
  final DataOutputBuffer dob=new DataOutputBuffer(0,a);
  try {
    dob.packLong(nwritten);
    dob.append(tmp.array(),0,tmp.pos());
    return a;
  }
  finally {
    try {
      dob.close();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public static Map<Object,Long> valueHistogram(GeoTimeSerie gts){
  Map<Object,Long> occurrences=new HashMap<Object,Long>();
  for (int i=0; i < gts.values; i++) {
    Object value=GTSHelper.valueAtIndex(gts,i);
    if (!occurrences.containsKey(value)) {
      occurrences.put(value,1L);
    }
 else {
      occurrences.put(value,1L + occurrences.get(value));
    }
  }
  if (GTSHelper.isBucketized(gts) && gts.bucketcount != gts.values) {
    occurrences.put(null,(long)(gts.bucketcount - gts.values));
  }
  return occurrences;
}

private void updateExistingRow(final SQLiteDatabase database,final long id,boolean bumpCount){
  String stringId=String.valueOf(id);
  database.beginTransaction();
  final Cursor cursor=database.query(SongPlayCountColumns.NAME,null,WHERE_ID_EQUALS,new String[]{stringId},null,null,null);
  if (cursor != null && cursor.moveToFirst()) {
    int lastUpdatedIndex=cursor.getColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX);
    int lastUpdatedWeek=cursor.getInt(lastUpdatedIndex);
    int weekDiff=mNumberOfWeeksSinceEpoch - lastUpdatedWeek;
    if (Math.abs(weekDiff) >= NUM_WEEKS) {
      deleteEntry(database,stringId);
      if (bumpCount) {
        createNewPlayedEntry(database,id);
      }
    }
 else     if (weekDiff != 0) {
      int[] playCounts=new int[NUM_WEEKS];
      if (weekDiff > 0) {
        for (int i=0; i < NUM_WEEKS - weekDiff; i++) {
          playCounts[i + weekDiff]=cursor.getInt(getColumnIndexForWeek(i));
        }
      }
 else       if (weekDiff < 0) {
        for (int i=0; i < NUM_WEEKS + weekDiff; i++) {
          playCounts[i]=cursor.getInt(getColumnIndexForWeek(i - weekDiff));
        }
      }
      if (bumpCount) {
        playCounts[0]++;
      }
      float score=calculateScore(playCounts);
      if (score < .01f) {
        deleteEntry(database,stringId);
      }
 else {
        ContentValues values=new ContentValues(NUM_WEEKS + 2);
        values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);
        values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);
        for (int i=0; i < NUM_WEEKS; i++) {
          values.put(getColumnNameForWeek(i),playCounts[i]);
        }
        database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});
      }
    }
 else     if (bumpCount) {
      ContentValues values=new ContentValues(2);
      int scoreIndex=cursor.getColumnIndex(SongPlayCountColumns.PLAYCOUNTSCORE);
      float score=cursor.getFloat(scoreIndex) + getScoreMultiplierForWeek(0);
      values.put(SongPlayCountColumns.PLAYCOUNTSCORE,score);
      values.put(getColumnNameForWeek(0),cursor.getInt(getColumnIndexForWeek(0)) + 1);
      database.update(SongPlayCountColumns.NAME,values,WHERE_ID_EQUALS,new String[]{stringId});
    }
    cursor.close();
  }
 else   if (bumpCount) {
    createNewPlayedEntry(database,id);
  }
  database.setTransactionSuccessful();
  database.endTransaction();
}

private void computeWeights(Node node){
  int wsum=0;
  for (  Node child : node.children) {
    computeWeights(child);
    wsum+=child.weight;
  }
  node.weight=Math.max(1,wsum);
}

public Searcher() throws IOException {
  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));
  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());
}

public QueryStringQueryBuilder field(String field){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(field);
  return this;
}

public static <R,A,B>CompletionStage<R> combine(CompletionStage<A> a,CompletionStage<B> b,BiFunction<A,B,R> function){
  return a.thenCombine(b,function);
}

protected String buildCreateSchemaStatement() throws ReplicatorException {
  return null;
}

public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={0,-128,9,56,100,0,0,1,1,90,1,-32,0,10,-126,21,82,-31,-95};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public StreamInfoManager(TwitchApi api,StreamInfoListener listener){
  this.listener=listener;
  this.api=api;
  pendingRequests=new HashMap<>();
  invalidStreamInfo=new StreamInfo("invalid",listener);
  invalidStreamInfo.setRequested();
}

public Sentence asSentence(){
  return Sentence.newConjunction(sentences);
}

public boolean isPronoun(){
  return typeString.contains(SUFFIX_PRONOUN);
}

protected void appendShortType(StringBuilder sb,FieldType fieldType,int fieldWidth){
  sb.append("SMALLINT");
}

public static Vector tokenizeString(String source,String separator){
  if (separator.length() == 1) {
    return tokenizeString(source,separator.charAt(0));
  }
  Vector tokenized=new Vector();
  int len=source.length();
  StringBuilder buf=new StringBuilder();
  for (int iter=0; iter < len; iter++) {
    char current=source.charAt(iter);
    if (separator.indexOf(current) > -1) {
      if (buf.length() > 0) {
        tokenized.addElement(buf.toString());
        buf=new StringBuilder();
      }
    }
 else {
      buf.append(current);
    }
  }
  if (buf.length() > 0) {
    tokenized.addElement(buf.toString());
  }
  return tokenized;
}

private void backupFavorites(BackupDataOutput data) throws IOException {
  ContentResolver cr=mContext.getContentResolver();
  Cursor cursor=cr.query(Favorites.CONTENT_URI,FAVORITE_PROJECTION,getUserSelectionArg(),null,null);
  try {
    cursor.moveToPosition(-1);
    while (cursor.moveToNext()) {
      final long id=cursor.getLong(ID_INDEX);
      final long updateTime=cursor.getLong(ID_MODIFIED);
      Key key=getKey(Key.FAVORITE,id);
      mKeys.add(key);
      final String backupKey=keyToBackupKey(key);
      if (!mExistingKeys.contains(backupKey) || updateTime >= mLastBackupRestoreTime) {
        writeRowToBackup(key,packFavorite(cursor),data);
      }
 else {
        if (DEBUG)         Log.d(TAG,"favorite already backup up: " + id);
      }
    }
  }
  finally {
    cursor.close();
  }
}

public void update(){
  if (lastTime != -1L) {
    long delta=System.nanoTime() - lastTime;
    rollingAverage.addValue(delta);
  }
  lastTime=System.nanoTime();
}

public List<ValidationErrorMessage> validate(){
  errorMessageIds.clear();
  if (paymentProduct == null) {
    throw new NullPointerException("Error validating PaymentRequest, please set a paymentProduct first.");
  }
  for (  PaymentProductField field : paymentProduct.getPaymentProductFields()) {
    if (!isFieldInAccountOnFileAndNotAltered(field)) {
      errorMessageIds.addAll(field.validateValue(getValue(field.getId())));
    }
  }
  return errorMessageIds;
}

KeyStoreState(){
}

CryptoResult(final T result,final List<K> masterKeys,final CiphertextHeaders headers){
  result_=result;
  masterKeys_=Collections.unmodifiableList(masterKeys);
  headers_=headers;
  encryptionContext_=headers_.getEncryptionContextMap();
}

public void stateChanged(ChangeEvent e){
  if (ignoreUpdate) {
    return;
  }
  double value=(double)(1800 - setpointSlider.getValue()) / 10;
  setSetPoint(value);
  sim.setSetPoint(value);
}

public static String[] parseDelimitedList(String list,char delimiter){
  String delim="" + delimiter;
  StringTokenizer st=new StringTokenizer(list + delim + " ",delim,true);
  ArrayList<String> v=new ArrayList<String>();
  String lastToken="";
  String word="";
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    if (lastToken != null) {
      if (tok.equals(delim)) {
        word=word + lastToken;
        if (lastToken.equals(delim))         tok=null;
      }
 else {
        if (!word.equals(""))         v.add(word);
        word="";
      }
    }
    lastToken=tok;
  }
  return v.toArray(new String[0]);
}

private void initializeLayout(){
  GridLayout gl=new GridLayout(0,2);
  gl.setVgap(5);
  setLayout(gl);
  add(new JLabel("Frozen: "));
  add(frozenDD);
  add(new JLabel("Upper Bound:"));
  add(tfUpBound);
  add(new JLabel("Lower Bound"));
  add(tfLowBound);
  add(new JLabel("Increment:"));
  add(tfIncrement);
  add(new JLabel("Delay:"));
  add(tfDelay);
  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
}

@Override public boolean isRunning(){
  return (frame != null && frame.isVisible());
}

public static MosaicDefinition createMosaicDefinition(final Account creator){
  return createMosaicDefinition(creator,Utils.createMosaicId("alice.vouchers","alice's gift vouchers"),createMosaicProperties());
}

public Result result(SqlNode node,Collection<Clause> clauses,RelNode rel){
  final String alias2=SqlValidatorUtil.getAlias(node,-1);
  final String alias3=alias2 != null ? alias2 : "t";
  final String alias4=SqlValidatorUtil.uniquify(alias3,aliasSet,SqlValidatorUtil.EXPR_SUGGESTER);
  final String alias5=alias2 == null || !alias2.equals(alias4) ? alias4 : null;
  return new Result(node,clauses,alias5,Collections.singletonList(Pair.of(alias4,rel.getRowType())));
}

private static void _trustAllHttpsCertificates(){
  SSLContext context;
  if (_trustManagers == null) {
    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};
  }
  try {
    context=SSLContext.getInstance("SSL");
    context.init(null,_trustManagers,new SecureRandom());
  }
 catch (  GeneralSecurityException gse) {
    throw new IllegalStateException(gse.getMessage());
  }
  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
}

private static boolean isInNeedOfForm(UIComponent component){
  return (component instanceof ActionSource || component instanceof ActionSource2 || component instanceof EditableValueHolder);
}

private void addInternalListeners(){
  cbDistribution.addItemListener(cbItemListener);
}

public static double safeSqrt(double x){
  return (x < 0 ? -Math.sqrt(-x) : Math.sqrt(x));
}

public static long runMultiThreaded(Iterable<Callable<?>> calls,GridTestSafeThreadFactory threadFactory) throws Exception {
  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to start new threads (test is being stopped).");
  Collection<Thread> threads=new ArrayList<>();
  long time;
  try {
    for (    Callable<?> call : calls)     threads.add(threadFactory.newThread(call));
    time=System.currentTimeMillis();
    for (    Thread t : threads)     t.start();
  }
  finally {
    busyLock.leaveBusy();
  }
  for (  Thread t : threads)   t.join();
  time=System.currentTimeMillis() - time;
  threadFactory.checkError();
  return time;
}

private void bappend(char ch){
  try {
    mBuff[++mBuffIdx]=ch;
  }
 catch (  Exception exp) {
    char buff[]=new char[mBuff.length << 1];
    System.arraycopy(mBuff,0,buff,0,mBuff.length);
    mBuff=buff;
    mBuff[mBuffIdx]=ch;
  }
}

public void initializeOwnerReferencesForField(StateManager sm,FieldMetaData fmd){
  if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {
    Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex());
    if (collection != null) {
      for (      Object item : collection) {
        if (item != null) {
          _relationsManager.setOwnerStateManagerForPersistentInstance(item,sm,fmd);
        }
      }
    }
  }
 else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fmd.isEmbeddedPC()) {
    Object value=sm.fetch(fmd.getIndex());
    if (value != null) {
      _relationsManager.setOwnerStateManagerForPersistentInstance(value,sm,fmd);
    }
  }
}

public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){
  int unionColumnsCount=unionColumns.length;
  String[] projectionIn=new String[unionColumnsCount];
  for (int i=0; i < unionColumnsCount; i++) {
    String unionColumn=unionColumns[i];
    if (unionColumn.equals(typeDiscriminatorColumn)) {
      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;
    }
 else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {
      projectionIn[i]=unionColumn;
    }
 else {
      projectionIn[i]="NULL AS " + unionColumn;
    }
  }
  return buildQuery(projectionIn,selection,groupBy,having,null,null);
}

public Node(Coordinate pt){
  this(pt,new DirectedEdgeStar());
}

public synchronized void increase(){
  if (accuracy > 0) {
    long timePassed=System.currentTimeMillis() - lastAdded;
    if (timePassed > accuracy) {
      clearUp();
      if (count > 0) {
        data.addFirst(lastAdded + accuracy);
      }
      lastAdded=System.currentTimeMillis();
      count=0;
    }
    count++;
  }
 else {
    clearUp();
    data.addFirst(System.currentTimeMillis());
  }
}

public void revert(final VirtualFile root,final List<FilePath> files) throws VcsException {
  for (  List<String> paths : VcsFileUtil.chunkPaths(root,files)) {
    GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.CHECKOUT);
    handler.addParameters("HEAD");
    handler.endOptions();
    handler.addParameters(paths);
    handler.run();
  }
}

public static float[] concatAllFloat(float[]... arrays){
  int totalLength=0;
  final int subArrayCount=arrays.length;
  for (int i=0; i < subArrayCount; ++i) {
    totalLength+=arrays[i].length;
  }
  float[] result=Arrays.copyOf(arrays[0],totalLength);
  int offset=arrays[0].length;
  for (int i=1; i < subArrayCount; ++i) {
    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);
    offset+=arrays[i].length;
  }
  return result;
}

public TaggedValueIterator(final String aLine,final boolean attemptFirstWord,final String... tags){
  this.aLine=aLine;
  this.attemptFirstWord=attemptFirstWord;
  this.tags=tags;
  tagPos=0;
  nextResult=getNextResult();
  if (attemptFirstWord) {
    int a=0;
    while (a < aLine.length()) {
      if (aLine.charAt(a) == '>' || aLine.charAt(a) == '@' || Character.isWhitespace(aLine.charAt(a)))       a++;
 else       break;
    }
    int b=a + 1;
    while (b < aLine.length()) {
      if (Character.isLetterOrDigit(aLine.charAt(b)) || aLine.charAt(b) == '_')       b++;
 else       break;
    }
    if (b - a > 4) {
      nextResult=aLine.substring(a,b);
    }
    tagPos=b;
  }
}

public void ascendTree(){
  if (null != parentPath) {
    parentPath.append(PARENT_PATH);
    return;
  }
  File parentTree=calcParentTree();
  if (null != parentTree) {
    treeFile=parentTree;
    return;
  }
  parentPath=new StringBuilder(provideLastName());
  parentPath.append(PARENT_PATH);
}

public boolean canRead(){
  return _is != null;
}

void writeTo(byte[] b,int off){
  System.arraycopy(buf,0,b,off,count);
}

void onItemDismissed(final int position){
  final T removed=mData.get(position);
  final boolean wasRemoved=remove(position);
  if (wasRemoved && mDataChangeListener != null) {
    mDataChangeListener.onItemRemoved(removed,position);
  }
}

public static double normalPDF(double x,double variance,double meanValue){
  double standardDeviation=Math.sqrt(variance);
  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));
}

public static Object[] sortCopy(Object[] objects,Comparer comparer){
  int len=objects.length;
  Object[] copy=new Object[len];
  System.arraycopy(objects,0,copy,0,len);
  sort(copy,comparer);
  return copy;
}

public synchronized void addZoomListener(ZoomListener listener){
  mZoomListeners.add(listener);
}

private void clearRegisters(Instruction start,Instruction end){
  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {
    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {
      Operand op=ops.nextElement();
      if (op instanceof RegisterOperand) {
        RegisterOperand rOp=(RegisterOperand)op;
        clearDepGraphNodeForRegister(rOp.getRegister());
      }
    }
    if (p == end)     break;
  }
  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {
    Register r=e.nextElement();
    clearDepGraphNodeForRegister(r);
  }
}

public void fireAnnotationSelected(WorkflowAnnotation anno){
  List<WorkflowAnnotation> list=new LinkedList<>();
  list.add(anno);
  fireAnnotationsChanged(AnnotationEvent.SELECTED_ANNOTATION_CHANGED,list);
}

public boolean updateStatsAndReturnIfAllowed(){
  long now=SystemClock.elapsedRealtime();
  long deltaMs=now - mLastRequestTimestamp;
  if (deltaMs < mDelayMs)   return false;
  mLastRequestTimestamp=now;
  if (deltaMs < 2 * mDelayMs) {
    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);
  }
 else {
    mDelayMs=MIN_DELAY;
  }
  return true;
}

public boolean verifyServerEvidenceMessage(BigInteger serverM2) throws CryptoException {
  if ((this.A == null) || (this.M1 == null) || (this.S == null)) {
    throw new CryptoException("Impossible to compute and verify M2: " + "some data are missing from the previous operations (A,M1,S)");
  }
  BigInteger computedM2=SRP6Util.calculateM2(digest,N,A,M1,S);
  if (computedM2.equals(serverM2)) {
    this.M2=serverM2;
    return true;
  }
  return false;
}

public void handleText(String text){
  if (skippingCharacters > 0) {
    if (skippingCharacters >= text.length()) {
      skippingCharacters-=text.length();
      return;
    }
 else {
      text=text.substring(skippingCharacters);
      skippingCharacters=0;
    }
  }
  if (rtfDestination != null) {
    rtfDestination.handleText(text);
    return;
  }
  warning("Text with no destination. oops.");
}

public final boolean remove(final URI serviceURI){
  boolean modified=false;
synchronized (this) {
    if (aliases.remove(serviceURI) != null) {
      modified=true;
    }
    final ServiceFactory factory=services.remove(serviceURI);
    if (factory != null) {
      modified=true;
      if (factory instanceof CustomServiceFactory) {
        customServices.remove(factory);
      }
    }
  }
  return modified;
}

@Nullable private static String referenceToAttribute(String attrib,boolean includeDummies){
  while (attrib.startsWith("\\\\")) {
    attrib=attrib.substring(2);
  }
  if (attrib.startsWith("\\$")) {
    if (includeDummies) {
      attrib=attrib.substring(1);
    }
 else     return null;
  }
  if (!StringUtil.startsWithChar(attrib,'$')) {
    return null;
  }
  attrib=attrib.substring(1);
  if (StringUtil.startsWithChar(attrib,'{')) {
    String cleanAttribute=null;
    for (int i=1; i < attrib.length(); i++) {
      char currChar=attrib.charAt(i);
      if (currChar == '{' || currChar == '.') {
        cleanAttribute=null;
        break;
      }
 else       if (currChar == '}') {
        cleanAttribute=attrib.substring(1,i);
        break;
      }
    }
    attrib=cleanAttribute;
  }
 else {
    for (int i=0; i < attrib.length(); i++) {
      char currChar=attrib.charAt(i);
      if (currChar == '{' || currChar == '}' || currChar == '.') {
        attrib=attrib.substring(0,i);
        break;
      }
    }
  }
  return attrib;
}

public EscapedWriter(Writer fos){
  super(fos);
}

public boolean isExpired(final Date date){
  if (date == null) {
    throw new IllegalArgumentException("Date may not be null");
  }
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= date.getTime());
}

public void record(RecordBuilderImpl recordBuilder){
  storeBitmap(recordBuilder);
  OutputStream viewHierarchyDump=null;
  try {
    viewHierarchyDump=mAlbum.openViewHierarchyFile(recordBuilder.getName());
    mViewHierarchy.deflate(recordBuilder.getView(),viewHierarchyDump);
    mAlbum.addRecord(recordBuilder);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
 finally {
    if (viewHierarchyDump != null) {
      try {
        viewHierarchyDump.close();
      }
 catch (      IOException e) {
        Log.e("ScreenshotImpl","Exception closing viewHierarchyDump",e);
      }
    }
  }
}

protected boolean isCorrectMethod(Method method,Object[] args){
  return (proxySignature.equals(method.getName()) && args.length == 1);
}

public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public Metadata.Property.Builder clear(){
  Metadata_Property_Builder _defaults=new Metadata.Property.Builder();
  type=_defaults.type;
  boxedType=_defaults.boxedType;
  name=_defaults.name;
  capitalizedName=_defaults.capitalizedName;
  allCapsName=_defaults.allCapsName;
  getterName=_defaults.getterName;
  codeGenerator=_defaults.codeGenerator;
  fullyCheckedCast=_defaults.fullyCheckedCast;
  accessorAnnotations.clear();
  _unsetProperties.clear();
  _unsetProperties.addAll(_defaults._unsetProperties);
  return (Metadata.Property.Builder)this;
}

public static float r_distance(vec3 a,vec3 b){
  float x=a.m[0] - b.m[0];
  float y=a.m[1] - b.m[1];
  float z=a.m[2] - b.m[2];
  float result=(float)Math.sqrt(x * x + y * y + z * z);
  return result;
}

public void checkBackupInfo(final File backupInfoFile,boolean backupInMultiVdc){
  try (InputStream fis=new FileInputStream(backupInfoFile)){
    Properties properties=new Properties();
    properties.load(fis);
    checkVersion(properties);
    checkHosts(properties,backupInMultiVdc);
  }
 catch (  IOException ex) {
    log.warn("Unable to check backup Info",ex);
  }
}

static String toLowerCase(String s){
  int len=s.length();
  StringBuilder sb=null;
  for (int i=0; i < len; i++) {
    char c=s.charAt(i);
    if ((c >= 'a' && c <= 'z') || (c == '.')) {
      if (sb != null)       sb.append(c);
    }
 else     if ((c >= '0' && c <= '9') || (c == '-')) {
      if (sb != null)       sb.append(c);
    }
 else     if (c >= 'A' && c <= 'Z') {
      if (sb == null) {
        sb=new StringBuilder(len);
        sb.append(s,0,i);
      }
      sb.append((char)(c - CASE_DIFF));
    }
 else {
      throw new IllegalArgumentException("Invalid characters in hostname");
    }
  }
  return sb == null ? s : sb.toString();
}

public void testConstructorSignBytesNegative3(){
  byte aBytes[]={-12,56,100};
  int aSign=-1;
  byte rBytes[]={-1,11,-57,-100};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,aNumber.signum());
}

public static byte[] buildOpusComment(String comment){
  byte[] data=new byte[28 + comment.length()];
  writeOpusComment(data,0,comment);
  return data;
}

public static void assertProps(UniformPair<EventBean> received,String[] propertyNames,Object[] expectedInsert,Object[] expectedRemoved){
  assertProps(received.getFirst(),propertyNames,expectedInsert);
  assertProps(received.getSecond(),propertyNames,expectedRemoved);
}

public int size(){
  return al.size();
}

public static String toUpperCase(String src){
  if (src == null) {
    return null;
  }
 else {
    return src.toUpperCase();
  }
}

public final Iterator<KnowledgeEdge> requiredEdgesIterator(){
  Set<KnowledgeEdge> edges=new HashSet<>();
  for (  OrderedPair<Set<MyNode>> o : requiredRulesSpecs) {
    final Set<MyNode> first=o.getFirst();
    for (    MyNode s1 : first) {
      final Set<MyNode> second=o.getSecond();
      for (      MyNode s2 : second) {
        if (!s1.equals(s2)) {
          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));
        }
      }
    }
  }
  return edges.iterator();
}

@Deprecated public void unlock(LockState<T> lockState){
  if (lockState == null) {
    throw new IllegalArgumentException("lockState is null");
  }
  if (lockState.setLock != this) {
    throw new IllegalArgumentException("The lockState passed was not from this instance");
  }
  if (lockState.thread != Thread.currentThread()) {
    throw new IllegalArgumentException("The thread that created this lockState is not the same as the one unlocking it");
  }
  threadSet.remove(Thread.currentThread());
  for (  ReentrantLock lock : lockState.locks) {
    lock.unlock();
  }
}

public static String formatJavaDocBox(String text){
  requireNonNull(text);
  return formatTextBox(text,JAVA_DOC_WIDTH,JAVADOC_WORDS,JAVA_DOC_SINGLE_LINE_WORDS);
}

private static String forceNumberStringToTwoDigits(String text){
  while (text.length() < 2) {
    text="0" + text;
  }
  if (text.length() > 2) {
    text=text.substring(text.length() - 2,text.length());
  }
  return text;
}

public void addDropItem(final String name,final double probability,final int min,final int max){
  dropsItems.add(new DropItem(name,probability,min,max));
}

public static <E extends Identifiable>List<E> findByPrimaryKeys(EntityManager em,List<BigInteger> ids,Class<E> type){
  requireArgument(em != null,"The entity manager cannot be null.");
  requireArgument(ids != null && !ids.isEmpty(),"IDs cannot be null or empty.");
  requireArgument(type != null,"The entity type cannot be null.");
  TypedQuery<E> query=em.createNamedQuery("JPAEntity.findByPrimaryKeys",type);
  query.setHint("javax.persistence.cache.storeMode","REFRESH");
  try {
    query.setParameter("ids",ids);
    query.setParameter("deleted",false);
    return query.getResultList();
  }
 catch (  NoResultException ex) {
    return new ArrayList<>(0);
  }
}

private void loadWorkflow(Properties ctx,int AD_Workflow_ID,HttpSession sess){
  MWorkflow wf=new MWorkflow(ctx,AD_Workflow_ID,null);
  MWFNode[] nodes=wf.getNodes(true,Env.getContextAsInt(ctx,"#AD_Client_ID"));
  MWFNode wfn=null;
  ArrayList nodes_ID=new ArrayList();
  for (int i=0; i < nodes.length; i++) {
    wfn=nodes[i];
    nodes_ID.add(new Integer(wfn.getAD_WF_Node_ID()));
  }
  int imageMap[][]=generateImageMap(nodes_ID);
  sess.setAttribute(WORKFLOW,wf);
  sess.setAttribute(NODES,nodes);
  sess.setAttribute(NODES_ID,nodes_ID);
  sess.setAttribute(IMAGE_MAP,imageMap);
  sess.setAttribute(ACTIVE_NODE,new Integer(-999));
}

public int hashCode(){
  int h=hash;
  if (h == -1) {
    try {
      h=Arrays.hashCode(X509CertImpl.getEncodedInternal(this));
    }
 catch (    CertificateException e) {
      h=0;
    }
    hash=h;
  }
  return h;
}

public void removeFromTags(String removeTag){
  tags.remove(removeTag);
  firePropertyChange(TAG,null,removeTag);
  firePropertyChange(TAGS_AS_STRING,null,removeTag);
}

public static boolean verify(byte[] data,byte[] signature,byte[] pub){
  Preconditions.checkArgument(data.length == 32 && signature.length <= 520 && pub.length <= 520);
  ByteBuffer byteBuff=nativeECDSABuffer.get();
  if (byteBuff == null) {
    byteBuff=ByteBuffer.allocateDirect(32 + 8 + 520+ 520);
    byteBuff.order(ByteOrder.nativeOrder());
    nativeECDSABuffer.set(byteBuff);
  }
  byteBuff.rewind();
  byteBuff.put(data);
  byteBuff.putInt(signature.length);
  byteBuff.putInt(pub.length);
  byteBuff.put(signature);
  byteBuff.put(pub);
  return secp256k1_ecdsa_verify(byteBuff) == 1;
}

protected void deleteDirectory(File webAppFile){
  if (webAppFile.isDirectory()) {
    File[] children=webAppFile.listFiles();
    for (    File element : children) {
      deleteDirectory(element);
    }
    webAppFile.delete();
  }
 else {
    webAppFile.delete();
  }
}

@SuppressWarnings("unchecked") static public void assertSameIteratorAnyOrder(final Object[] expected,final Iterator actual){
  assertSameIteratorAnyOrder("",expected,actual);
}

public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){
  float tmpFinishedPercentage=0;
switch (rolloutGroup.getStatus()) {
case READY:
case SCHEDULED:
case ERROR:
    tmpFinishedPercentage=0.0F;
  break;
case FINISHED:
tmpFinishedPercentage=100.0F;
break;
case RUNNING:
tmpFinishedPercentage=finishedPercentage;
break;
default :
break;
}
return String.format("%.1f",tmpFinishedPercentage);
}

public static String generateHostName(String vmName,String hostId){
  String hostname=vmName + '-' + hostId;
  Preconditions.checkState(hostname.equals(hostname.toLowerCase()),"hostname should not contain upper case characters");
  return hostname;
}

protected void transferFromFile(File idFile) throws IOException {
  try (BufferedReader br=new BufferedReader(new FileReader(idFile))){
    String line;
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        transfer(line);
      }
    }
  }
 }

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

private static String unwrap(String expression){
  if (expression.startsWith("((")) {
    expression=expression.substring(expression.indexOf(")") + 1,expression.length() - 1);
    if (expression.endsWith("]")) {
      expression=expression.substring(0,expression.lastIndexOf("["));
    }
 else {
      expression=expression.substring(0,expression.lastIndexOf("."));
    }
  }
  return expression;
}

public boolean areAllSegmentPresent(int datasetSize){
  return mPieSegmentList.size() == datasetSize;
}

protected int drawNextEventTimeDiff(){
  int timeDiff=msgInterval[0] == msgInterval[1] ? 0 : rng.nextInt(msgInterval[1] - msgInterval[0]);
  return msgInterval[0] + timeDiff;
}

private int createLines(String text,int insertPosition,int offset){
  int count=0;
  int start=0;
  DelimiterInfo delimiterInfo=nextDelimiterInfo(text,0);
  while (delimiterInfo != null && delimiterInfo.delimiterIndex > -1) {
    int index=delimiterInfo.delimiterIndex + (delimiterInfo.delimiterLength - 1);
    if (insertPosition + count >= fLines.size())     fLines.add(new Line(offset + start,offset + index,delimiterInfo.delimiter));
 else     fLines.add(insertPosition + count,new Line(offset + start,offset + index,delimiterInfo.delimiter));
    ++count;
    start=index + 1;
    delimiterInfo=nextDelimiterInfo(text,start);
  }
  if (start < text.length()) {
    if (insertPosition + count < fLines.size()) {
      Line l=(Line)fLines.get(insertPosition + count);
      int delta=text.length() - start;
      l.offset-=delta;
      l.length+=delta;
    }
 else {
      fLines.add(new Line(offset + start,offset + text.length() - 1,null));
      ++count;
    }
  }
  return count;
}

public static double sqrt(double x){
  return Math.sqrt(x);
}

private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){
  int fromX=(int)from.getX();
  int fromY=(int)from.getY();
  int toX=(int)to.getX();
  int toY=(int)to.getY();
  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);
  if (steep) {
    int temp=fromX;
    fromX=fromY;
    fromY=temp;
    temp=toX;
    toX=toY;
    toY=temp;
  }
  int dx=Math.abs(toX - fromX);
  int dy=Math.abs(toY - fromY);
  int error=-dx >> 1;
  int ystep=fromY < toY ? 1 : -1;
  int xstep=fromX < toX ? 1 : -1;
  int transitions=0;
  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);
  for (int x=fromX, y=fromY; x != toX; x+=xstep) {
    boolean isBlack=image.get(steep ? y : x,steep ? x : y);
    if (isBlack != inBlack) {
      transitions++;
      inBlack=isBlack;
    }
    error+=dy;
    if (error > 0) {
      if (y == toY) {
        break;
      }
      y+=ystep;
      error-=dx;
    }
  }
  return new ResultPointsAndTransitions(from,to,transitions);
}

public static String toBits(final long x){
  final StringBuilder sb=new StringBuilder();
  long t=x;
  for (int i=0; i < 64; i++) {
    if ((i & 7) == 0 && i > 0) {
      sb.append(":");
    }
    sb.append(t < 0 ? "1" : "0");
    t=t << 1;
  }
  assert t == 0;
  return sb.toString();
}

public static final byte[] encodeUrl(BitSet urlsafe,byte[] bytes){
  if (bytes == null) {
    return null;
  }
  if (urlsafe == null) {
    urlsafe=WWW_FORM_URL;
  }
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  for (int i=0; i < bytes.length; i++) {
    int b=bytes[i];
    if (b < 0) {
      b=256 + b;
    }
    if (urlsafe.get(b)) {
      if (b == ' ') {
        b='+';
      }
      buffer.write(b);
    }
 else {
      buffer.write('%');
      char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));
      char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));
      buffer.write(hex1);
      buffer.write(hex2);
    }
  }
  return buffer.toByteArray();
}

public MessageTokenizer(IDiscordClient client,String content){
  if (content == null)   throw new IllegalArgumentException("Content cannot be null!");
  if (content.length() == 0)   throw new IllegalArgumentException("Content must have length!");
  if (client == null)   throw new IllegalArgumentException("Client cannot be null!");
  this.content=content;
  this.client=client;
  stepForward(0);
}

public void await(int ID) throws InterruptedException {
  if (parties == 1)   return;
  final boolean startCondition=competitionCondition;
  int competingFor=(locks.length * 2 - 1 - ID) / 2;
  while (competingFor >= 0) {
    final Lock node=locks[competingFor];
    if (node.tryLock()) {
synchronized (node) {
        while (competitionCondition == startCondition)         node.wait();
      }
      node.unlock();
      wakeUpTarget(competingFor * 2 + 1);
      wakeUpTarget(competingFor * 2 + 2);
      return;
    }
 else {
      if (competingFor == 0)       break;
      competingFor=(competingFor - 1) / 2;
    }
  }
  competitionCondition=!competitionCondition;
  wakeUpTarget(0);
}

private void loadTranslationsCacheIfEmpty(){
  if (translationCache.isEmpty()) {
    for (    ObjectTranslation translation : translations) {
      if (translation.getLocale() != null && translation.getProperty() != null && !StringUtils.isEmpty(translation.getValue())) {
        String key=ObjectTranslation.getCacheKey(translation.getLocale(),translation.getProperty());
        translationCache.put(key,translation.getValue());
      }
    }
  }
}

public NavMouseMode(boolean shouldConsumeEvents){
  super(modeID,shouldConsumeEvents);
  setModeCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
  rectAttributes.setLinePaint(Color.GRAY);
  rectAttributes.setMattingPaint(Color.LIGHT_GRAY);
  rectAttributes.setMatted(true);
}

public void addEvent(SimEvent newEvent){
  newEvent.setSerial(serial++);
  sortedSet.add(newEvent);
}

public static void stopTimer(String name){
  long stopTime=System.nanoTime();
  Long startTime=openTimers.remove(name);
  if (startTime == null) {
    throw new IllegalArgumentException("timer does not exist");
  }
  SummaryStatistics statistics=data.get(name);
  if (statistics == null) {
    statistics=new SummaryStatistics();
    data.put(name,statistics);
  }
  statistics.addValue(stopTime - startTime);
}

public String toStringSummary(){
  int resultsetLength;
  String result;
  String titles;
  int i;
  int j;
  if (m_NonSigWins == null)   return "-summary data not set-";
  resultsetLength=1 + Math.max((int)(Math.log(getColCount()) / Math.log(10)),(int)(Math.log(getRowCount()) / Math.log(10)));
  result="";
  titles="";
  result+="{\\centering\n";
  result+="\\begin{table}[thb]\n\\caption{\\label{labelname}" + "Table Caption}\n";
  result+="\\footnotesize\n";
  result+="\\begin{tabular}{l";
  for (i=0; i < getColCount(); i++) {
    if (getColHidden(i))     continue;
    titles+=" &";
    result+="c";
    titles+=' ' + Utils.padLeft("" + getSummaryTitle(i),resultsetLength * 2 + 3);
  }
  result+="}\\\\\n\\hline\n";
  result+=titles + " \\\\\n\\hline\n";
  for (i=0; i < getColCount(); i++) {
    if (getColHidden(i))     continue;
    for (j=0; j < getColCount(); j++) {
      if (getColHidden(j))       continue;
      if (j == 0)       result+=(char)((int)'a' + i % 26);
      if (j == i)       result+=" & - ";
 else       result+="& " + m_NonSigWins[i][j] + " ("+ m_Wins[i][j]+ ") ";
    }
    result+="\\\\\n";
  }
  result+="\\hline\n\\end{tabular} \\footnotesize \\par\n\\end{table}}";
  return result;
}

public static File createTempPath(String path) throws IOException {
  String sep=File.separator;
  File tempDir=new File(System.getProperty("java.io.tmpdir") + sep + path);
  if (!tempDir.exists())   if (!tempDir.mkdirs()) {
    boolean status=tempDir.delete();
    throw new IOException("creation failed for dir " + tempDir + "status = "+ status);
  }
  tempDir.deleteOnExit();
  return tempDir;
}

public void hspan(double start,double end,Paint color,String legend){
  LegendText legendText=new LegendText(color,legend);
  comments.add(legendText);
  plotElements.add(new HSpan(start,end,color,legendText));
}

public StateInteractive extent_to_whole_connections(){
  Set<BrdItem> selected_items=new TreeSet<BrdItem>();
  for (  BrdItem curr_item : items_list) {
    if (curr_item instanceof BrdConnectable) {
      selected_items.addAll(curr_item.get_connection_items());
    }
  }
  if (selected_items.isEmpty()) {
    return return_state;
  }
  items_list=selected_items;
  actlog_start_scope(LogfileScope.EXTEND_TO_WHOLE_CONNECTIONS);
  filter();
  i_brd.repaint();
  return this;
}

public static IKeyBuilder newInstance(int capacity,CollatorEnum collatorChoice,Locale locale,Object strength,DecompositionEnum mode){
  if (collatorChoice == CollatorEnum.ASCII) {
    return new KeyBuilder(capacity);
  }
  if (locale == null) {
    locale=Locale.getDefault();
    if (log.isInfoEnabled())     log.info("Using default locale: " + locale.getDisplayName());
  }
  final boolean icu=collatorChoice == CollatorEnum.ICU;
  if (icu && !DefaultKeyBuilderFactory.isICUAvailable()) {
    throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE);
  }
  final byte[] buf=createBuffer(capacity);
  final int len=0;
switch (collatorChoice) {
case ICU:
    return new KeyBuilder(new ICUSortKeyGenerator(locale,strength,mode),len,buf);
case JDK:
  return new KeyBuilder(new JDKSortKeyGenerator(locale,strength,mode),len,buf);
default :
throw new UnsupportedOperationException("Collator not supported: " + collatorChoice);
}
}

private List<Node> possibleParents(Node x,List<Node> nodes,IKnowledge knowledge){
  List<Node> possibleParents=new LinkedList<>();
  String _x=x.getName();
  for (  Node z : nodes) {
    String _z=z.getName();
    if (possibleParentOf(_z,_x,knowledge)) {
      possibleParents.add(z);
    }
  }
  return possibleParents;
}

protected void configureFromProperties(InputStream is,String rootDirectory) throws IOException {
  Properties props=new Properties();
  props.load(is);
  props.put(ROOT_DIR_PATH_PROPERTY,rootDirectory);
  String oldPrefix=getPropertyPrefix();
  setProperties(null,props);
  setPropertyPrefix(oldPrefix);
}

Connection openNewConnection() throws SQLException {
  Connection newConn=DriverManager.getConnection(url,user,password);
  if (url.startsWith("jdbc:derby:")) {
    try (Statement s=newConn.createStatement()){
    }
   }
 else   if (url.startsWith("jdbc:hsqldb:")) {
    try (Statement s=newConn.createStatement()){
      s.execute("SET WRITE_DELAY 1");
    }
   }
  return newConn;
}

@Override public void addRelations(Task task,Iterable<ObjectId> projectIds,String fieldName){
  List<Project> newProjectList=new LinkedList<>();
  Iterable<Project> projectsToAdd=projectRepository.findAll(projectIds,null);
  for (  Project project : projectsToAdd) {
    newProjectList.add(project);
  }
  try {
    if (PropertyUtils.getProperty(task,fieldName) != null) {
      Iterable<Project> projects=(Iterable<Project>)PropertyUtils.getProperty(task,fieldName);
      for (      Project project : projects) {
        newProjectList.add(project);
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  try {
    PropertyUtils.setProperty(task,fieldName,newProjectList);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  taskRepository.save(task);
}

protected void doFloodBDDP(long pinSwitch,OFPacketIn pi,FloodlightContext cntx){
  TopologyInstance ti=getCurrentInstance(false);
  Set<Long> switches=ti.getSwitchesInOpenflowDomain(pinSwitch);
  if (switches == null) {
    switches=new HashSet<Long>();
    switches.add(pinSwitch);
  }
  for (  long sid : switches) {
    IOFSwitch sw=floodlightProvider.getSwitch(sid);
    if (sw == null)     continue;
    Collection<Short> enabledPorts=sw.getEnabledPortNumbers();
    if (enabledPorts == null)     continue;
    Set<Short> ports=new HashSet<Short>();
    ports.addAll(enabledPorts);
    Set<Short> portsKnownToTopo=ti.getPortsWithLinks(sid);
    if (portsKnownToTopo != null) {
      for (      short p : portsKnownToTopo) {
        NodePortTuple npt=new NodePortTuple(sid,p);
        if (ti.isBroadcastDomainPort(npt) == false) {
          ports.remove(p);
        }
      }
    }
    Set<Short> portsToEliminate=getPortsToEliminateForBDDP(sid);
    if (portsToEliminate != null) {
      ports.removeAll(portsToEliminate);
    }
    if (pinSwitch == sid) {
      ports.remove(pi.getInPort());
    }
    doMultiActionPacketOut(pi.getPacketData(),sw,ports,cntx);
  }
}

public void sleepMillis(final long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  final InterruptedException e) {
    logger.error(e,e);
  }
}

private static void verifyWriteSetNotFound(final BTree btree){
  log.info("");
  for (int i=0; i < 1000; i++) {
    if (btree.contains(i)) {
      throw new RuntimeException("Not expecting: key=" + i);
    }
  }
}

private double calculateEntropy(double... masses){
  double res=0;
  for (  double d : masses) {
    res-=(d == 0) ? 0 : d * Math.log(d);
  }
  return res / LOG2;
}

public static boolean isValidNmtoken(String nmtoken){
  if (nmtoken.length() == 0)   return false;
  for (int i=0; i < nmtoken.length(); i++) {
    char ch=nmtoken.charAt(i);
    if (!isName(ch)) {
      return false;
    }
  }
  return true;
}

@Override public void mousePressed(MouseEvent e){
  m_frameLimiter.setRepeats(true);
  if ((e.getModifiers() & InputEvent.BUTTON1_MASK) != 0 && !e.isAltDown() && m_mouseState == 0 && m_scaling == 0) {
    if (((e.getModifiers() & InputEvent.CTRL_MASK) != 0) && ((e.getModifiers() & InputEvent.SHIFT_MASK) == 0)) {
      m_mouseState=2;
    }
 else     if (((e.getModifiers() & InputEvent.SHIFT_MASK) != 0) && ((e.getModifiers() & InputEvent.CTRL_MASK) == 0)) {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=3;
      Graphics g=getGraphics();
      if (m_ZoomBoxColor == null) {
        g.setColor(Color.black);
      }
 else {
        g.setColor(m_ZoomBoxColor);
      }
      if (m_ZoomBoxXORColor == null) {
        g.setXORMode(Color.white);
      }
 else {
        g.setXORMode(m_ZoomBoxXORColor);
      }
      g.drawRect(m_oldMousePos.width,m_oldMousePos.height,m_newMousePos.width - m_oldMousePos.width,m_newMousePos.height - m_oldMousePos.height);
      g.dispose();
    }
 else {
      m_oldMousePos.width=e.getX();
      m_oldMousePos.height=e.getY();
      m_newMousePos.width=e.getX();
      m_newMousePos.height=e.getY();
      m_mouseState=1;
      m_frameLimiter.start();
    }
  }
 else   if ((e.getButton() == MouseEvent.BUTTON1) && e.isAltDown() && e.isShiftDown()&& !e.isControlDown()) {
    saveComponent();
  }
 else   if (m_mouseState == 0 && m_scaling == 0) {
  }
}

private static double parseDoubleValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException {
  String tagValue;
  tagValue=parseStringValue(parseString,openTag,closeTag,exception);
  double doubleValue;
  try {
    doubleValue=Double.parseDouble(tagValue);
  }
 catch (  NumberFormatException e) {
    throw e;
  }
  return doubleValue;
}

public void putString(String s) throws ArrayIndexOutOfBoundsException, UnsupportedEncodingException {
  byte[] bytes=s.getBytes("UTF-8");
  int length=bytes.length;
  int endAt=m_index + length + 1;
  if (endAt > m_content.length)   throw new ArrayIndexOutOfBoundsException(endAt + " > " + m_content.length);
  System.arraycopy(bytes,0,m_content,m_index,length);
  m_index+=length;
  m_content[m_index++]='\0';
  debugAppendString(s);
}

private void pullEvent(){
  final int newScrollValue;
  final int itemDimension;
  final float initialMotionValue, lastMotionValue;
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    initialMotionValue=mInitialMotionX;
  lastMotionValue=mLastMotionX;
break;
case VERTICAL:
default :
initialMotionValue=mInitialMotionY;
lastMotionValue=mLastMotionY;
break;
}
switch (mCurrentMode) {
case PULL_FROM_END:
newScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getFooterSize();
break;
case PULL_FROM_START:
default :
newScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getHeaderSize();
break;
}
setHeaderScroll(newScrollValue);
if (newScrollValue != 0 && !isRefreshing()) {
float scale=Math.abs(newScrollValue) / (float)itemDimension;
switch (mCurrentMode) {
case PULL_FROM_END:
mFooterLayout.onPull(scale);
break;
case PULL_FROM_START:
default :
mHeaderLayout.onPull(scale);
break;
}
if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {
setState(State.PULL_TO_REFRESH);
}
 else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {
setState(State.RELEASE_TO_REFRESH);
}
}
}

public void addRtcpListener(RtcpEventListener listener){
  listeners.addElement(listener);
}

@Override protected void ensureNumberOfColumns(int numberOfColumns){
  if (data.length >= numberOfColumns) {
    return;
  }
  double[] newData=new double[numberOfColumns];
  System.arraycopy(data,0,newData,0,data.length);
  data=newData;
}

private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {
  int[] leftTopBlack=image.getTopLeftOnBit();
  int[] rightBottomBlack=image.getBottomRightOnBit();
  if (leftTopBlack == null || rightBottomBlack == null) {
    throw NotFoundException.getNotFoundInstance();
  }
  float moduleSize=moduleSize(leftTopBlack,image);
  int top=leftTopBlack[1];
  int bottom=rightBottomBlack[1];
  int left=leftTopBlack[0];
  int right=rightBottomBlack[0];
  if (left >= right || top >= bottom) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (bottom - top != right - left) {
    right=left + (bottom - top);
  }
  int matrixWidth=Math.round((right - left + 1) / moduleSize);
  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);
  if (matrixWidth <= 0 || matrixHeight <= 0) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (matrixHeight != matrixWidth) {
    throw NotFoundException.getNotFoundInstance();
  }
  int nudge=(int)(moduleSize / 2.0f);
  top+=nudge;
  left+=nudge;
  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;
  if (nudgedTooFarRight > 0) {
    if (nudgedTooFarRight > nudge) {
      throw NotFoundException.getNotFoundInstance();
    }
    left-=nudgedTooFarRight;
  }
  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;
  if (nudgedTooFarDown > 0) {
    if (nudgedTooFarDown > nudge) {
      throw NotFoundException.getNotFoundInstance();
    }
    top-=nudgedTooFarDown;
  }
  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);
  for (int y=0; y < matrixHeight; y++) {
    int iOffset=top + (int)(y * moduleSize);
    for (int x=0; x < matrixWidth; x++) {
      if (image.get(left + (int)(x * moduleSize),iOffset)) {
        bits.set(x,y);
      }
    }
  }
  return bits;
}

@Override public void error(String domain,String key,XMLParseException exception) throws XNIException {
  if (fErrorHandler != null) {
    SAXParseException saxException=createSAXParseException(exception);
    try {
      fErrorHandler.error(saxException);
    }
 catch (    SAXParseException e) {
      throw createXMLParseException(e);
    }
catch (    SAXException e) {
      throw createXNIException(e);
    }
  }
}

public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port) throws SocketException {
  try {
    return IoBridge.connect(fd,inetAddress,port,0);
  }
 catch (  SocketTimeoutException ex) {
    throw new AssertionError(ex);
  }
}

public boolean isWhitespace(int nodeHandle){
  int type=getNodeType(nodeHandle);
  Node node=getNode(nodeHandle);
  if (TEXT_NODE == type || CDATA_SECTION_NODE == type) {
    FastStringBuffer buf=StringBufferPool.get();
    while (node != null) {
      buf.append(node.getNodeValue());
      node=logicalNextDOMTextNode(node);
    }
    boolean b=buf.isWhitespace(0,buf.length());
    StringBufferPool.free(buf);
    return b;
  }
  return false;
}

public CStatusPanel(final BackEndDebuggerProvider debuggerProvider){
  super(new BorderLayout());
  Preconditions.checkNotNull(debuggerProvider,"IE1094: Debugger provider argument can not be null");
  m_label.setForeground(Color.BLACK);
  add(m_label);
  m_synchronizer=new CStatusLabelSynchronizer(m_label,debuggerProvider);
}

@Override public boolean open(String access){
  if (access.equals("r")) {
    try {
      iStream=new FileImageInputStream(new File(filePath));
      parser=new LabelParser();
      metadata=parser.parseHeader(iStream);
      iStream.close();
      iStream=null;
    }
 catch (    IOException e) {
      try {
        iStream.close();
      }
 catch (      Exception x) {
      }
      return (false);
    }
  }
  return (super.open(access));
}

void deregisterSpring(Spring spring){
  if (spring == null) {
    throw new IllegalArgumentException("spring is required");
  }
  mActiveSprings.remove(spring);
  mSpringRegistry.remove(spring.getId());
}

@Nullable public String fileName(){
  return JavaLogger.fileName(delegate);
}

public static BNode parseBNode(String nTriplesBNode,ValueFactory valueFactory) throws IllegalArgumentException {
  if (nTriplesBNode.startsWith("_:")) {
    return valueFactory.createBNode(nTriplesBNode.substring(2));
  }
 else {
    throw new IllegalArgumentException("Not a legal N-Triples Blank Node: " + nTriplesBNode);
  }
}

public void resetPSRs(){
  pilotRolls.removeAllElements();
}

public static void sort(byte[] array){
  DualPivotQuicksort.sort(array);
}

public void closePopup(){
  if (openedSubPopup != null) {
    openedSubPopup.closePopup();
  }
  removeFromParent();
}

public void freeObject(int id){
  if (cacheId == id) {
    cacheId=-1;
    cache=null;
  }
  map.remove(id);
}

private void stretchViewVertically(View view,int crossSize){
  LayoutParams lp=(LayoutParams)view.getLayoutParams();
  int newHeight=crossSize - lp.topMargin - lp.bottomMargin;
  newHeight=Math.max(newHeight,0);
  view.measure(MeasureSpec.makeMeasureSpec(view.getMeasuredWidth(),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(newHeight,MeasureSpec.EXACTLY));
}

public static InetAddress hexToInet6Address(String addrHexString) throws IllegalArgumentException {
  try {
    return numericToInetAddress(String.format("%s:%s:%s:%s:%s:%s:%s:%s",addrHexString.substring(0,4),addrHexString.substring(4,8),addrHexString.substring(8,12),addrHexString.substring(12,16),addrHexString.substring(16,20),addrHexString.substring(20,24),addrHexString.substring(24,28),addrHexString.substring(28,32)));
  }
 catch (  Exception e) {
    Log.e("NetworkUtils","error in hexToInet6Address(" + addrHexString + "): "+ e);
    throw new IllegalArgumentException(e);
  }
}

public void trackFailure(){
  retryTime=Utils.currentTimeMillis() + (long)backoff;
  backoff=Math.min(backoff * params.multiplier,params.maximum);
}

public double readDouble() throws IOException {
  return primitiveTypes.readDouble();
}

private boolean isAtMaximum(Adjustable bar){
  return (bar.getValue() + bar.getVisibleAmount() >= bar.getMaximum());
}

public boolean matchesCS(String seq){
  return queue.startsWith(seq,pos);
}

protected void parseAndAddMapTileSet(URL tileSetProperties) throws IOException, MalformedURLException {
  Properties descProps=new Properties();
  Logger logger=getLogger();
  logger.info("going to read props");
  InputStream descURLStream=tileSetProperties.openStream();
  descProps.load(descURLStream);
  logger.info("loaded " + tileSetProperties.toString() + " "+ descProps.toString());
  MapTileSet mts=createMapTileSetFromProperties(descProps);
  if (mts != null && mts.allGood()) {
    String mtsName=mts.getName();
    mapTileSets.put(mts.getName(),mts);
    logger.info("Adding " + mtsName + " dataset");
  }
  descURLStream.close();
}

protected Date compute(double value){
  if (Double.isNaN(value)) {
    return null;
  }
  long dateLong=(long)value;
  Date date=new Date(dateLong);
  Calendar cal=Calendar.getInstance();
  cal.setTime(date);
  return cal.getTime();
}

public void enablePan(BluetoothAdapter adapter){
  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);
  assertNotNull(mPan);
  long start=System.currentTimeMillis();
  mPan.setBluetoothTethering(true);
  long stop=System.currentTimeMillis();
  assertTrue(mPan.isTetheringOn());
  writeOutput(String.format("enablePan() completed in %d ms",(stop - start)));
}

private int distBetweenPoints(int x1,int z1,int x2,int z2,boolean bAllowDiags){
  int w=Math.abs(x2 - x1);
  int h=Math.abs(z2 - z1);
  if (bAllowDiags) {
    if (w < h)     w=0;
 else     h=0;
  }
  return w + h + 1;
}

public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {
  if (port < -1) {
    throw new MalformedURLException("port < -1: " + port);
  }
  if (protocol == null) {
    throw new NullPointerException("protocol == null");
  }
  if (host != null && host.contains(":") && host.charAt(0) != '[') {
    host="[" + host + "]";
  }
  this.protocol=protocol;
  this.host=host;
  this.port=port;
  file=UrlUtils.authoritySafePath(host,file);
  int hash=file.indexOf("#");
  if (hash != -1) {
    this.file=file.substring(0,hash);
    this.ref=file.substring(hash + 1);
  }
 else {
    this.file=file;
  }
  fixURL(false);
  if (handler == null) {
    setupStreamHandler();
    if (streamHandler == null) {
      throw new MalformedURLException("Unknown protocol: " + protocol);
    }
  }
 else {
    streamHandler=handler;
  }
}

private Workflow.Method createVolumesMethod(URI systemURI,URI poolURI,List<URI> volumeURIs,VirtualPoolCapabilityValuesWrapper capabilities){
  return new Workflow.Method("createVolumes",systemURI,poolURI,volumeURIs,capabilities);
}

public FileCommandInfo(int fd,String command,int result,String parameters){
  this(true,fd,command,result,parameters);
}

public void init(GuiManualHerblore manual){
  for (  ManualWidgetBase widget : widgets)   widget.init(manual);
}

private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){
  SSLSocketFactory oldFactory=connection.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance("TLS");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=sc.getSocketFactory();
    connection.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}

public final double sampleMax(){
  return _activeCountMax.getAndSet(_activeCount.get());
}

@Get public Representation userCodeForm() throws OAuth2RestletException, InvalidGrantException, NotFoundException, ServerException {
  final OAuth2Request request=requestFactory.create(getRequest());
  if (request.getParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) {
    return verify(null);
  }
 else {
    return getTemplateRepresentation(FORM,request,null);
  }
}

public void testMissionNameConstruction(){
  String xml="";
  xml+=createStartMissionXml("","Name");
  xml+=createEndMissionXml();
  InputStream missionInputStream=new ByteArrayInputStream(xml.getBytes());
  String missionName=null;
  try {
    missionName=MissionParser.getMissionName(missionInputStream);
  }
 catch (  MissionParseException e) {
    e.printStackTrace();
  }
  Assert.assertEquals("Name",missionName);
}

@Override public boolean equals(Object other){
  if (other == this) {
    return true;
  }
  if (other instanceof ZoneOffsetTransition) {
    ZoneOffsetTransition d=(ZoneOffsetTransition)other;
    return transition.equals(d.transition) && offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);
  }
  return false;
}

public void release(){
  super.release();
  init();
}

public double unsafeSabrVolatility(final double strike,final double forward,final double expiryTime,final double alpha,final double beta,final double nu,final double rho){
  final double oneMinusBeta=1.0 - beta;
  final double A=Math.pow(forward * strike,oneMinusBeta);
  final double sqrtA=Math.sqrt(A);
  double logM;
  if (!isClose(forward,strike))   logM=Math.log(forward / strike);
 else {
    final double epsilon=(forward - strike) / strike;
    logM=epsilon - .5 * epsilon * epsilon;
  }
  final double z=(nu / alpha) * sqrtA * logM;
  final double B=1.0 - 2.0 * rho * z + z * z;
  final double C=oneMinusBeta * oneMinusBeta * logM* logM;
  final double tmp=(Math.sqrt(B) + z - rho) / (1.0 - rho);
  final double xx=Math.log(tmp);
  final double D=sqrtA * (1.0 + C / 24.0 + C * C / 1920.0);
  final double d=1.0 + expiryTime * (oneMinusBeta * oneMinusBeta * alpha* alpha / (24.0 * A) + 0.25 * rho * beta* nu* alpha / sqrtA + (2.0 - 3.0 * rho * rho) * (nu * nu / 24.0));
  double multiplier;
  final double m=10;
  if (Math.abs(z * z) > Constants.QL_EPSILON * m)   multiplier=z / xx;
 else {
    final double talpha=(0.5 - rho * rho) / (1.0 - rho);
    final double tbeta=alpha - .5;
    final double tgamma=rho / (1 - rho);
    multiplier=1.0 - beta * z + (tgamma - talpha + tbeta * tbeta * .5) * z * z;
  }
  return (alpha / D) * multiplier * d;
}

public void close(){
  while (!mReceivers.isEmpty()) {
    mContext.unregisterReceiver(mReceivers.remove(0));
  }
  if (mOutputWriter != null) {
    try {
      mOutputWriter.close();
    }
 catch (    IOException e) {
      Log.w(mTag,"Test output file could not be closed",e);
    }
  }
}

private void resolveFiles(List<String> classpaths,Map<String,String> files,String[] paths,String prefix){
  for (  String path : paths) {
    String relativePath=fileHandler.getName(path);
    if (prefix != null) {
      relativePath=fileHandler.append(prefix,relativePath);
    }
    if (classpaths != null) {
      classpaths.add(relativePath);
    }
    if (fileHandler.isDirectory(path)) {
      String[] children=fileHandler.getChildren(path);
      if (children != null && children.length != 0) {
        resolveFiles(null,files,children,relativePath);
      }
    }
 else {
      files.put(relativePath,path);
    }
  }
}

public void testGetInstance() throws Exception {
  try {
    ExemptionMechanism.getInstance((String)null,"aaa");
    fail("NoSuchProviderException must be thrown");
  }
 catch (  NoSuchProviderException pe) {
  }
  try {
    ExemptionMechanism.getInstance("AlgName",(String)null);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
}

public synchronized void reloadConfiguration(){
  properties=null;
  finalParameters.clear();
}

protected void removeMessageProcessor(MessageProcessor oldMessageProcessor){
synchronized (messageProcessors) {
    if (messageProcessors.remove(oldMessageProcessor)) {
      oldMessageProcessor.stop();
    }
  }
}

X509IssuerSerial(X509Certificate cert){
  this(cert.getIssuerX500Principal(),cert.getSerialNumber());
}

private void addToSet(ObjectXmlPersist persist,IFile file,String setName) throws IOException, CoreException {
  Collection<GraphEdgeMatcherDescriptor> updateSet=loadEdgeMatchers(persist,file);
  persistUpdatedBundle(persist,file,updateSet,setName);
}

public void putBytes(byte[] bytes){
  ensureCapacity(bytes.length);
  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);
  this.position+=bytes.length;
}

public static String arrayToDelimitedString(Object[] arr,String delim){
  if (arr == null) {
    return "";
  }
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < arr.length; i++) {
    if (i > 0) {
      sb.append(delim);
    }
    sb.append(arr[i]);
  }
  return sb.toString();
}

public void clearAll(){
  final List<EncodedImage> old;
synchronized (this) {
    old=new ArrayList<>(mMap.values());
    mMap.clear();
  }
  for (int i=0; i < old.size(); i++) {
    EncodedImage encodedImage=old.get(i);
    if (encodedImage != null) {
      encodedImage.close();
    }
  }
}

public static CompiereColor parse(String attributes){
  CompiereColor cc=new CompiereColor();
  try {
    if (attributes != null && attributes.length() > 0)     cc.parseAttributres(attributes);
  }
 catch (  Exception e) {
    log.severe("(" + attributes + ") - "+ e.toString());
  }
  return cc;
}

public synchronized static LuaState newLuaState(){
  int i=getNextStateIndex();
  LuaState L=new LuaState(i);
  states.add(i,L);
  return L;
}

static long checkPreambleSize(Memory mem){
  final long cap=mem.getCapacity();
  if (cap < 8) {
    throwNotBigEnough(cap,8);
  }
  final long pre0=mem.getLong(0);
  final int preLongs=(int)(pre0 & 0X3FL);
  final int required=Math.max(preLongs << 3,8);
  if (cap < required) {
    throwNotBigEnough(cap,required);
  }
  return pre0;
}

public int read() throws IOException {
  if (inputStream == null) {
    reopen();
  }
  count(1);
  return inputStream.read();
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

public void limit(double x1,double y1,double x2,double y2){
  clip[0]=Math.max(clip[0],x1);
  clip[1]=Math.max(clip[1],y1);
  clip[6]=Math.min(clip[6],x2);
  clip[7]=Math.min(clip[7],y2);
}

public void shutdown(){
  final long begin=System.currentTimeMillis();
  log.info("ThreadPoolManager: Shutting down.");
  log.info("\t... executing " + getTaskCount(scheduledPool) + " scheduled tasks.");
  log.info("\t... executing " + getTaskCount(instantPool) + " instant tasks.");
  log.info("\t... executing " + getTaskCount(longRunningPool) + " long running tasks.");
  log.info("\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left.");
  scheduledPool.shutdown();
  instantPool.shutdown();
  longRunningPool.shutdown();
  workStealingPool.shutdown();
  boolean success=false;
  try {
    success|=awaitTermination(5000);
    scheduledPool.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);
    scheduledPool.setContinueExistingPeriodicTasksAfterShutdownPolicy(false);
    success|=awaitTermination(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  log.info("\t... success: " + success + " in "+ (System.currentTimeMillis() - begin)+ " msec.");
  log.info("\t... " + getTaskCount(scheduledPool) + " scheduled tasks left.");
  log.info("\t... " + getTaskCount(instantPool) + " instant tasks left.");
  log.info("\t... " + getTaskCount(longRunningPool) + " long running tasks left.");
  log.info("\t... " + (workStealingPool.getQueuedTaskCount() + workStealingPool.getQueuedSubmissionCount()) + " forking tasks left.");
  workStealingPool.shutdownNow();
}

public static Collection<InetAddress> toInetAddresses(Collection<String> addrs,Collection<String> hostNames) throws IgniteCheckedException {
  Set<InetAddress> res=new HashSet<>(addrs.size());
  Iterator<String> hostNamesIt=hostNames.iterator();
  for (  String addr : addrs) {
    String hostName=hostNamesIt.hasNext() ? hostNamesIt.next() : null;
    InetAddress inetAddr=null;
    if (!F.isEmpty(hostName)) {
      try {
        inetAddr=InetAddress.getByName(hostName);
      }
 catch (      UnknownHostException ignored) {
      }
    }
    if (inetAddr == null || inetAddr.isLoopbackAddress()) {
      try {
        inetAddr=InetAddress.getByName(addr);
      }
 catch (      UnknownHostException ignored) {
      }
    }
    if (inetAddr != null)     res.add(inetAddr);
  }
  if (res.isEmpty())   throw new IgniteCheckedException("Addresses can not be resolved [addr=" + addrs + ", hostNames="+ hostNames+ ']');
  return res;
}

public static String removeNewLineChars(String s){
  String retString=null;
  if ((s != null) && (s.length() > 0) && (s.indexOf('\n') != -1)) {
    char[] chars=s.toCharArray();
    int len=chars.length;
    StringBuffer sb=new StringBuffer(len);
    for (int i=0; i < len; i++) {
      char c=chars[i];
      if (c != '\n') {
        sb.append(c);
      }
    }
    retString=sb.toString();
  }
 else {
    retString=s;
  }
  return retString;
}

void calculateCounters(){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  int total=0;
  write.lock();
  try {
    countResetFeedsAndCategories();
    total+=countFeedsWithUnread();
    countCategoriesWithUnread();
    countSpecialCategories(total);
  }
  finally {
    write.unlock();
  }
  Log.i(TAG,String.format("Recalculated counters, total unread: %s (took %sms)",total,(System.currentTimeMillis() - time)));
}

protected void appendHTML(final StringBuilder sbuf,final char ch){
switch (ch) {
case '<':
    sbuf.append("&lt;");
  break;
case '>':
sbuf.append("&gt;");
break;
case '&':
sbuf.append("&amp;");
break;
default :
sbuf.append(ch);
break;
}
}

private Collection<Var> migrateColumns(SQLTable currentTable){
  List<Var> vars=new ArrayList<>();
  String tableType=currentTable.getEntityType();
  Map<String,ResourceType.DataType> columns=currentTable.getColumns();
  Map<String,String> foreignColumns=currentTable.getForeignKeyColumns();
  for (  String column : columns.keySet()) {
    ResourceType.DataType columnType=columns.get(column);
    if (foreignColumns.containsKey(column)) {
      vars.addAll(migrateAsRelation(tableType,column,foreignColumns.get(column)));
    }
 else {
      vars.addAll(migrateAsResource(tableType,columnType,column));
    }
  }
  return vars;
}

public int retrieveRowCount(String tableName) throws SQLException {
  ResultSet rs=null;
  int rowCount=-1;
  try {
    rs=statement.executeQuery("SELECT COUNT(*) FROM " + tableName);
    rs.next();
    rowCount=rs.getInt(1);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
  }
  return rowCount;
}

public JarModifier(File jarFile) throws JarException, IOException {
  this.jarFile=jarFile;
  JarFile jar=new JarFile(jarFile);
  Enumeration<? extends JarEntry> enumerator=jar.entries();
  while (enumerator.hasMoreElements()) {
    JarEntry currentEntry=(JarEntry)enumerator.nextElement();
    JarEntry resetEntry=new JarEntry(currentEntry.getName());
    jarEntries.put(currentEntry.getName(),resetEntry);
  }
  String manifestPath=META_INF + SEPERATOR + "MANIFEST.MF";
  JarEntry jarEntry=jar.getJarEntry(manifestPath);
  if (jarEntry != null) {
    Enumeration<JarEntry> entries=jar.entries();
    while (entries.hasMoreElements()) {
      jarEntry=(JarEntry)entries.nextElement();
      if (manifestPath.equalsIgnoreCase(jarEntry.getName())) {
        break;
      }
 else {
        jarEntry=null;
      }
    }
  }
  Manifest manifest=new Manifest();
  if (jarEntry != null) {
    manifest.read(jar.getInputStream(jarEntry));
  }
  this.manifest=manifest;
  jar.close();
}

@Override public int addAttribute(Attribute a){
  if (a == null) {
    throw new IllegalArgumentException("Attribute must not be null");
  }
 else {
    int index=-1;
    Attribute original=a;
    a=(Attribute)a.clone();
    if (unusedColumnList.size() > 0) {
synchronized (unusedColumnList) {
        if (unusedColumnList.size() > 0) {
          index=unusedColumnList.remove(0);
          attributes.set(index,a);
        }
 else {
          index=attributes.size();
          attributes.add(a);
        }
      }
    }
 else {
      index=attributes.size();
      attributes.add(a);
    }
    a.setTableIndex(index);
    original.setTableIndex(index);
    return index;
  }
}

default B with(String key,int value){
  return with(key,Integer.toString(value));
}

public static <X>void sortTopN(X[] array,int offset,int limit,Comparator<? super X> comp){
  partitionTopN(array,offset,limit,comp);
  Arrays.sort(array,offset,(int)Math.min((long)offset + limit,array.length),comp);
}

protected boolean isServerTransaction(){
  return this instanceof SIPServerTransaction;
}

Object addMarkedOccurrenceHighlight(int start,int end,MarkOccurrencesHighlightPainter p) throws BadLocationException {
  Document doc=textArea.getDocument();
  TextUI mapper=textArea.getUI();
  HighlightInfo i=new LayeredHighlightInfo();
  i.painter=p;
  i.p0=doc.createPosition(start);
  i.p1=doc.createPosition(end - 1);
  markedOccurrences.add(i);
  mapper.damageRange(textArea,start,end);
  return i;
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public static void readFully(InputStream in,byte buf[],int off,int len) throws IOException {
  int toRead=len;
  while (toRead > 0) {
    int ret=in.read(buf,off,toRead);
    if (ret < 0) {
      throw new IOException("Premature EOF from inputStream");
    }
    toRead-=ret;
    off+=ret;
  }
}

public static void assumeTrue(BooleanSupplier assumptionSupplier,Supplier<String> messageSupplier) throws TestAbortedException {
  if (!assumptionSupplier.getAsBoolean()) {
    throwTestAbortedException(messageSupplier.get());
  }
}

public static String addToCartBulk(HttpServletRequest request,HttpServletResponse response){
  String categoryId=request.getParameter("category_id");
  ShoppingCart cart=getCartObject(request);
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");
  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);
  String controlDirective;
  Map<String,Object> result;
  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);
  String catalogId=CatalogWorker.getCurrentCatalogId(request);
  result=cartHelper.addToCartBulk(catalogId,categoryId,paramMap);
  controlDirective=processResult(result,request);
  if (controlDirective.equals(ERROR)) {
    return "error";
  }
 else {
    return "success";
  }
}

public void addFrequentSet(FrequentItemSet itemSet){
  frequentSets.add(itemSet);
  maximumSetSize=Math.max(itemSet.getNumberOfItems(),maximumSetSize);
}

private int skipFromPeekBuffer(int length){
  int bytesSkipped=Math.min(peekBufferLength,length);
  updatePeekBuffer(bytesSkipped);
  return bytesSkipped;
}

protected Workflow.Method createRemoveVolumesFromCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){
  return new Workflow.Method(REMOVE_VOLUMES_FROM_CG_STEP,vplexURI,cgURI,vplexVolumeURIs);
}

private static int showUrlsPrompt(Component parent,List<String> urls){
  String text="<html><body style='width: 100px;'>";
  for (  String url : urls) {
    url=splitUrl(url);
    text+=url + "<br />";
  }
  String okOption="Open URL";
  if (urls.size() > 1) {
    okOption="Open " + urls.size() + " URLs";
  }
  String[] options={okOption,"Cancel"};
  if (urls.size() == 1) {
    options=new String[]{okOption,"Copy URL","Cancel"};
  }
  int chosenOption=JOptionPane.showOptionDialog(parent,text,"Open in default browser?",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,1);
  return chosenOption;
}

int convertMouse(MouseEvent event){
  int result;
  if (panelFont == null)   return (NO_MOUSE);
  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;
  int colNum=colOff / horizStep;
  int colRem=colOff % horizStep;
  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;
  int rowNum=rowOff / vertiStep;
  int rowRem=rowOff % vertiStep;
  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {
    return (NO_MOUSE);
  }
  result=cornerIndex + (rowNum * panelColumns) + colNum;
  if (result >= cellCount)   return (NO_MOUSE);
  return (result);
}

private static String computeRegexString(String originalString,String oldName,String newName){
  StringBuilder builder=new StringBuilder(originalString.length());
  String oldNameOrNewNameRegEx=String.format("(%s)|(%s)",Pattern.quote(oldName),Pattern.quote(newName));
  int i=originalString.indexOf(oldName);
  if (i >= 0) {
    int prevI=0;
    while (i >= 0) {
      builder.append(Pattern.quote(originalString.substring(prevI,i)));
      builder.append(oldNameOrNewNameRegEx);
      prevI=i;
      i=originalString.indexOf(oldName,i + oldName.length());
    }
    builder.append(Pattern.quote(originalString.substring(prevI + oldName.length(),originalString.length())));
  }
  return builder.toString();
}

public synchronized String generateCallIdentifier(String address){
  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());
  byte cid[]=digester.digest(date.getBytes());
  String cidString=Utils.toHexString(cid);
  return cidString + "@" + address;
}

int parseHour(String source,char patternChar,int offset) throws ParseException {
  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;
  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;
  return parseNumber(source,offset,"hour",min,max) - min;
}

public void doHistory(KeyEvent e){
  if (e.getSource() == m_Input) {
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
      if (m_HistoryPos > 0) {
        m_HistoryPos--;
        String command=m_CommandHistory.elementAt(m_HistoryPos);
        m_Input.setText(command);
      }
    break;
case KeyEvent.VK_DOWN:
  if (m_HistoryPos < m_CommandHistory.size()) {
    m_HistoryPos++;
    String command="";
    if (m_HistoryPos < m_CommandHistory.size()) {
      command=m_CommandHistory.elementAt(m_HistoryPos);
    }
    m_Input.setText(command);
  }
break;
default :
break;
}
}
}

public static ReferenceBinding[] substitute(Substitution substitution,ReferenceBinding[] originalTypes){
  if (originalTypes == null)   return null;
  ReferenceBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    TypeBinding substitutedType=substitute(substitution,originalType);
    if (!(substitutedType instanceof ReferenceBinding)) {
      return null;
    }
    if (substitutedType != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new ReferenceBinding[length],0,i);
      }
      substitutedTypes[i]=(ReferenceBinding)substitutedType;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}

@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mBitmapShader == null)   return;
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverPaint);
  canvas.drawCircle(mCenterX,mCenterY,mCoverRadius,mCoverFrontPaint);
  mDurationText=secondsToTime(mDurationSecondsCurrent);
  mDurationPaint.getTextBounds(mDurationText,0,mDurationText.length(),mRectDuration);
  canvas.drawText(mDurationText,(mCenterX - (mRectDuration.width() / 2.0f)),(mCenterY + (mRectDuration.height() / 2.0f)),mDurationPaint);
  if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) {
    canvas.drawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1,(mCenterX - (5 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
    canvas.drawBitmap(isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2,mCenterX - (mCenterX / 13.0f),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  if (mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null) {
    canvas.drawBitmap(isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3,(int)(mCenterX + (3 * (mCenterX / 13.0f))),mCenterY + (mCenterY / 3.0f) - (mCenterY / 13.0f),mActionPaint);
  }
  canvas.drawArc(mProgressRectF,0,360,false,mPaintEmptyProgress);
  canvas.drawArc(mProgressRectF,270,calculatePastProgress(),false,mPaintLoadedProgress);
  canvas.drawCircle((float)(mCenterX + ((mCenterX - 20.0f) * Math.cos(Math.toRadians(calculatePastProgress() - 90)))),(float)(mCenterY + ((mCenterX - 20.0f) * Math.sin(Math.toRadians(calculatePastProgress() - 90)))),mRadiusToggle,mPaintProgressToggle);
}

private static Collection<TCPTransport> allKnownTransports(){
  Set<TCPTransport> s;
synchronized (localEndpoints) {
    s=new HashSet<TCPTransport>(localEndpoints.size());
    for (    LinkedList<TCPEndpoint> epList : localEndpoints.values()) {
      TCPEndpoint ep=epList.getFirst();
      s.add(ep.transport);
    }
  }
  return s;
}

public void requestSecondsUntilIdleLockout(){
  operations.add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT);
}

@RequestMapping(value="/hive",method={RequestMethod.GET}) @ResponseBody private static List<String> showHiveDatabases() throws IOException {
  IHiveClient hiveClient=HiveClientFactory.getHiveClient();
  List<String> results=null;
  try {
    results=hiveClient.getHiveDbNames();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new IOException(e);
  }
  return results;
}

public void testNegNegFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,73};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

private static double hackyAdjuster(double f){
  double tmp=Math.sqrt(1.0 - f);
  return (f <= 0.5) ? tmp : tmp + (0.01 * (f - 0.5));
}

private static Object fromString(String s) throws IOException, ClassNotFoundException {
  byte[] data=Base64.decode(s,Base64.DEFAULT);
  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));
  Object o=ois.readObject();
  ois.close();
  return o;
}

private boolean copyDocument(SearchDocument newDocument,SearchDocument document,Map<String,Set<String>> removedProperties){
  boolean mutated=false;
  for (  String oldFieldName : document.getPropertyNames()) {
    newDocument.addProperty(oldFieldName);
    List<String> oldValues=document.getProperty(oldFieldName);
    if (oldValues != null) {
      Set<String> objectsRemoved=(removedProperties != null) ? removedProperties.get(oldFieldName) : null;
      for (      String oldValue : oldValues) {
        if ((objectsRemoved != null) && (objectsRemoved.contains(oldValue))) {
          mutated=true;
        }
 else {
          addProperty(oldFieldName,oldValue,newDocument);
        }
      }
    }
  }
  return mutated;
}

public SVDMatrix(Matrix Arg){
  this(Arg,true,true,true);
}

public void unlockForClear(InternalDistributedMember locker){
synchronized (this.clearLockSync) {
    InternalDistributedSystem instance=InternalDistributedSystem.getAnyInstance();
    if (instance != null && logger.isDebugEnabled()) {
      logger.debug("Unlocking for clear, from member {} RVV {}",locker,System.identityHashCode(this));
    }
    if (this.lockOwner != null && !locker.equals(this.lockOwner)) {
      if (instance != null && logger.isDebugEnabled()) {
        logger.debug("current clear lock owner was {} not unlocking",lockOwner);
      }
      return;
    }
    unlockVersionGeneration(locker);
  }
}

public UnicastRef(){
}

private static int lastIndexOf(Object o,@NotNull Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--) {
      if (elements[i] == null) {
        return i;
      }
    }
  }
 else {
    for (int i=index; i >= 0; i--) {
      if (o.equals(elements[i])) {
        return i;
      }
    }
  }
  return -1;
}

public void write(ByteBuffer buffer) throws IOException {
  buffer.position(0);
  if (mFileChannel.size() + buffer.capacity() < mMaxSize) {
    while (buffer.hasRemaining()) {
      mFileChannel.write(buffer);
    }
    updateWaveFileSize();
  }
 else {
    int remaining=(int)(mMaxSize - mFileChannel.size());
    remaining-=(int)(remaining % mAudioFormat.getFrameSize());
    byte[] bytes=buffer.array();
    ByteBuffer current=ByteBuffer.wrap(Arrays.copyOf(bytes,remaining));
    ByteBuffer next=ByteBuffer.wrap(Arrays.copyOfRange(bytes,remaining,bytes.length));
    while (current.hasRemaining()) {
      mFileChannel.write(current);
    }
    updateWaveFileSize();
    rollover();
    while (next.hasRemaining()) {
      mFileChannel.write(next);
    }
    updateWaveFileSize();
  }
}

public static double dmod_d(double lhs,double rhs){
  return rhs != 0 ? lhs - rhs * Math.floor(lhs / rhs) : Double.NaN;
}

public void testMaxLess(){
  byte aBytes[]={45,91,3,-15,35,26,3,91};
  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.max(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertTrue("incorrect sign",result.signum() == 1);
}

private synchronized void block(boolean tf){
  if (tf) {
    try {
      if (m_ioThread.isAlive() && m_state != IDLE) {
        wait();
      }
    }
 catch (    InterruptedException ex) {
    }
  }
 else {
    notifyAll();
  }
}

public void move(MouseEvent e){
  Point2D pnt=getProjectionPoint(e);
  int x=(int)pnt.getX();
  int y=(int)pnt.getY();
  if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
    gpm=new OffsetGrabPoint(x,y);
    gpm.clear();
  }
 else {
    gpm=gpo;
    gpm.clear();
    gpm.set(x,y);
  }
  addPolyGrabPointsToOGP(gpm);
  movingPoint=gpm;
}

public FloatBuffer put(float[] src,int srcOffset,int floatCount){
  Arrays.checkOffsetAndCount(src.length,srcOffset,floatCount);
  if (floatCount > remaining()) {
    throw new BufferOverflowException();
  }
  for (int i=srcOffset; i < srcOffset + floatCount; ++i) {
    put(src[i]);
  }
  return this;
}

public final void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {
  int identity=makeNodeIdentity(nodeHandle);
  if (identity == DTM.NULL)   return;
  int type=_type2(identity);
  if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) {
    int startNode=identity;
    identity=_firstch2(identity);
    if (DTM.NULL != identity) {
      int offset=-1;
      int length=0;
      do {
        type=_exptype2(identity);
        if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) {
          int dataIndex=m_dataOrQName.elementAt(identity);
          if (dataIndex >= 0) {
            if (-1 == offset) {
              offset=dataIndex >>> TEXT_LENGTH_BITS;
            }
            length+=dataIndex & TEXT_LENGTH_MAX;
          }
 else {
            if (-1 == offset) {
              offset=m_data.elementAt(-dataIndex);
            }
            length+=m_data.elementAt(-dataIndex + 1);
          }
        }
        identity++;
      }
 while (_parent2(identity) >= startNode);
      if (length > 0) {
        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length);
 else         m_chars.sendSAXcharacters(ch,offset,length);
      }
    }
  }
 else   if (DTM.TEXT_NODE == type || DTM.CDATA_SECTION_NODE == type) {
    int dataIndex=m_dataOrQName.elementAt(identity);
    if (dataIndex >= 0) {
      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);
 else       m_chars.sendSAXcharacters(ch,dataIndex >>> TEXT_LENGTH_BITS,dataIndex & TEXT_LENGTH_MAX);
    }
 else {
      if (normalize)       m_chars.sendNormalizedSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));
 else       m_chars.sendSAXcharacters(ch,m_data.elementAt(-dataIndex),m_data.elementAt(-dataIndex + 1));
    }
  }
 else {
    int dataIndex=m_dataOrQName.elementAt(identity);
    if (dataIndex < 0) {
      dataIndex=-dataIndex;
      dataIndex=m_data.elementAt(dataIndex + 1);
    }
    String str=(String)m_values.elementAt(dataIndex);
    if (normalize)     FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch);
 else     ch.characters(str.toCharArray(),0,str.length());
  }
}

public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}

protected static Boolean lock(String serviceName,Object name){
  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);
  boolean locked=service.lock(name,1000,-1);
  return Boolean.valueOf(locked);
}

protected int checkKnownCookie(){
  int retVal=0;
  debug.message("{}.checkKnownCookie:",ADAPTIVE);
  HttpServletRequest req=getHttpServletRequest();
  if (req != null) {
    Cookie cookie=CookieUtils.getCookieFromReq(req,knownCookieName);
    if (cookie != null) {
      if (knownCookieValue.equalsIgnoreCase(CookieUtils.getCookieValue(cookie))) {
        retVal=knownCookieScore;
      }
    }
  }
  if (knownCookieValue == null) {
    knownCookieValue="1";
  }
  if (knownCookieSave) {
    postAuthNMap.put("COOKIENAME",knownCookieName);
    postAuthNMap.put("COOKIEVALUE",knownCookieValue);
  }
  if (!knownCookieInvert) {
    retVal=knownCookieScore - retVal;
  }
  return retVal;
}

public File[] selectImportFiles(final String title,boolean multipleSelection,FileNameExtensionFilter[] fileNameExtensionFilters){
  if (Boolean.parseBoolean(System.getProperty("use.native.choosers",Boolean.toString(OSType.isMac())))) {
    FileDialog importDialog=fileDialogs.get(title);
    if (importDialog == null) {
      importDialog=new FileDialog(this,title,FileDialog.LOAD);
      fileDialogs.put(title,importDialog);
    }
    importDialog.setVisible(true);
    if (importDialog.getFile() != null) {
      return new File[]{new File(importDialog.getDirectory(),importDialog.getFile())};
    }
  }
 else {
    JFileChooser importChooser=fileChoosers.get(title);
    if (importChooser == null) {
      importChooser=new JFileChooser(Utils.getCWD());
      importChooser.setMultiSelectionEnabled(multipleSelection);
      for (      FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters) {
        importChooser.setFileFilter(fileNameExtensionFilter);
      }
      importChooser.setDialogTitle(title);
      fileChoosers.put(title,importChooser);
    }
    int returnVal=importChooser.showOpenDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      if (importChooser.isMultiSelectionEnabled()) {
        return importChooser.getSelectedFiles();
      }
 else {
        return new File[]{importChooser.getSelectedFile()};
      }
    }
  }
  return null;
}

public GT_MetaGenerated_Item(String aUnlocalized,short aOffset,short aItemAmount){
  super(aUnlocalized);
  setCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS);
  setHasSubtypes(true);
  setMaxDamage(0);
  mEnabledItems=new BitSet(aItemAmount);
  mVisibleItems=new BitSet(aItemAmount);
  mOffset=(short)Math.min(32766,aOffset);
  mItemAmount=(short)Math.min(aItemAmount,32766 - mOffset);
  mIconList=new IIcon[aItemAmount][1];
  sInstances.put(getUnlocalizedName(),this);
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(8);
  newVector.addElement(new Option("\tSet confidence threshold for pruning.\n" + "\t(default 0.25)","C",1,"-C <pruning confidence>"));
  newVector.addElement(new Option("\tSet minimum number of objects per leaf.\n" + "\t(default 2)","M",1,"-M <minimum number of objects>"));
  newVector.addElement(new Option("\tUse reduced error pruning.","R",0,"-R"));
  newVector.addElement(new Option("\tSet number of folds for reduced error\n" + "\tpruning. One fold is used as pruning set.\n" + "\t(default 3)","N",1,"-N <number of folds>"));
  newVector.addElement(new Option("\tUse binary splits only.","B",0,"-B"));
  newVector.addElement(new Option("\tGenerate unpruned decision list.","U",0,"-U"));
  newVector.addElement(new Option("\tDo not use MDL correction for info gain on numeric attributes.","J",0,"-J"));
  newVector.addElement(new Option("\tSeed for random data shuffling (default 1).","Q",1,"-Q <seed>"));
  newVector.addElement(new Option("\tDo not make split point actual value.","-doNotMakeSplitPointActualValue",0,"-doNotMakeSplitPointActualValue"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

@Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {
  if (engine_was_shutteddown) {
    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);
  }
  if ((srcs == null) || (dst == null)) {
    throw new IllegalStateException("Some of the input parameters are null");
  }
  if (dst.isReadOnly()) {
    throw new ReadOnlyBufferException();
  }
  if (!handshake_started) {
    beginHandshake();
  }
  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();
  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {
    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);
  }
  int capacity=dst.remaining();
  int produced=0;
  if (alertProtocol.hasAlert()) {
    if (capacity < recordProtocol.getRecordSize(2)) {
      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
    }
    byte[] alert_data=alertProtocol.wrap();
    dst.put(alert_data);
    if (alertProtocol.isFatalAlert()) {
      alertProtocol.setProcessed();
      if (session != null) {
        session.invalidate();
      }
      shutdown();
      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);
    }
 else {
      alertProtocol.setProcessed();
      if (close_notify_was_sent && close_notify_was_received) {
        shutdown();
        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);
      }
      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);
    }
  }
  if (capacity < recordProtocol.getMinRecordSize()) {
    if (logger != null) {
      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");
    }
    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
  }
  try {
    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {
      dataStream.setSourceBuffers(srcs,offset,len);
      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {
        if (logger != null) {
          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");
        }
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
      }
      if (remaining_wrapped_data == null) {
        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);
      }
      if (capacity < remaining_wrapped_data.length) {
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);
      }
 else {
        dst.put(remaining_wrapped_data);
        produced=remaining_wrapped_data.length;
        remaining_wrapped_data=null;
        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);
      }
    }
 else {
      if (remaining_hsh_data == null) {
        remaining_hsh_data=handshakeProtocol.wrap();
      }
      if (capacity < remaining_hsh_data.length) {
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
      }
 else {
        dst.put(remaining_hsh_data);
        produced=remaining_hsh_data.length;
        remaining_hsh_data=null;
        handshakeStatus=handshakeProtocol.getStatus();
        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {
          session=recordProtocol.getSession();
        }
      }
      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);
    }
  }
 catch (  AlertException e) {
    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());
    engine_was_closed=true;
    if (session != null) {
      session.invalidate();
    }
    throw e.getReason();
  }
}

public static byte[] readFully(InputStream in) throws IOException {
  try {
    return readFullyNoClose(in);
  }
  finally {
    in.close();
  }
}

public static ParsedSql parseSqlStatement(String sql){
  Set<String> namedParameters=new HashSet<String>();
  ParsedSql parsedSql=new ParsedSql(sql);
  char[] statement=sql.toCharArray();
  int namedParameterCount=0;
  int unnamedParameterCount=0;
  int totalParameterCount=0;
  int i=0;
  while (i < statement.length) {
    int skipToPosition=skipCommentsAndQuotes(statement,i);
    if (i != skipToPosition) {
      if (skipToPosition >= statement.length) {
        break;
      }
      i=skipToPosition;
    }
    char c=statement[i];
    if (c == ':' || c == '&') {
      int j=i + 1;
      if (j < statement.length && statement[j] == ':' && c == ':') {
        i=i + 2;
        continue;
      }
      while (j < statement.length && !isParameterSeparator(statement[j])) {
        j++;
      }
      if (j - i > 1) {
        String parameter=sql.substring(i + 1,j);
        if (!namedParameters.contains(parameter)) {
          namedParameters.add(parameter);
          namedParameterCount++;
        }
        parsedSql.addNamedParameter(parameter,i,j);
        totalParameterCount++;
      }
      i=j - 1;
    }
 else {
      if (c == '?') {
        unnamedParameterCount++;
        totalParameterCount++;
      }
    }
    i++;
  }
  parsedSql.setNamedParameterCount(namedParameterCount);
  parsedSql.setUnnamedParameterCount(unnamedParameterCount);
  parsedSql.setTotalParameterCount(totalParameterCount);
  return parsedSql;
}

final void putLong(int offset,long value){
  unsafe.putLong(offset + address,value);
}

public boolean onEvent(ActionResult result){
synchronized (this) {
    String requestId=result.getResponseInfo().mRequestId;
    if (requestId == null) {
      return false;
    }
    boolean eventRemoved=mRequestIds.remove(requestId);
    if (eventRemoved) {
      Class key=null;
      for (      Class type : mLastRequestIdByType.keySet()) {
        if (requestId.equals(mLastRequestIdByType.get(type))) {
          key=type;
          break;
        }
      }
      if (key != null) {
        mLastRequestIdByType.remove(key);
      }
    }
    return eventRemoved;
  }
}

public static String gensalt(int log_rounds,SecureRandom random){
  StringBuffer rs=new StringBuffer();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append("$2a$");
  if (log_rounds < 10) {
    rs.append("0");
  }
  if (log_rounds > 30) {
    throw new IllegalArgumentException("log_rounds exceeds maximum (30)");
  }
  rs.append(Integer.toString(log_rounds));
  rs.append("$");
  rs.append(encode_base64(rnd,rnd.length));
  return rs.toString();
}

public void checkKey(Object key) throws PartitionedRegionException {
  if (!hasHash) {
    return;
  }
  if (key == null) {
    return;
  }
  int expected=key.hashCode();
  if (expected == keyHash) {
    return;
  }
  throw new PartitionedRegionException("Object hashCode inconsistent between cache peers. Here = " + expected + "; peer calculated = "+ keyHash);
}

public StringBuffer numberToString(final String strNumberToConvert){
  String strNumber="", signBit="";
  if (strNumberToConvert.startsWith("-")) {
    strNumber="" + strNumberToConvert.substring(1,strNumberToConvert.length());
    signBit="-";
  }
 else   strNumber="" + strNumberToConvert;
  final DecimalFormat dft=new DecimalFormat("##############0.00");
  final String strtemp="" + dft.format(Double.parseDouble(strNumber));
  StringBuffer strbNumber=new StringBuffer(strtemp);
  final int intLen=strbNumber.length();
  for (int i=intLen - 6; i > 0; i=i - 2)   strbNumber.insert(i,',');
  if (signBit.equals("-"))   strbNumber=strbNumber.insert(0,"-");
  return strbNumber;
}

private void runInitScriptIfRequired(String url,Connection connection) throws SQLException {
  Matcher matcher=INITSCRIPT_MATCHING_PATTERN.matcher(url);
  if (matcher.matches()) {
    String initScriptPath=matcher.group(2);
    try {
      URL resource=Resources.getResource(initScriptPath);
      String sql=Resources.toString(resource,Charsets.UTF_8);
      ScriptUtils.executeSqlScript(connection,initScriptPath,sql);
    }
 catch (    IOException|IllegalArgumentException e) {
      LOGGER.warn("Could not load classpath init script: {}",initScriptPath);
      throw new SQLException("Could not load classpath init script: " + initScriptPath,e);
    }
catch (    ScriptException e) {
      LOGGER.error("Error while executing init script: {}",initScriptPath,e);
      throw new SQLException("Error while executing init script: " + initScriptPath,e);
    }
  }
}

private static int parseInt(String value,int beginIndex,int endIndex) throws NumberFormatException {
  if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex) {
    throw new NumberFormatException(value);
  }
  int i=beginIndex;
  int result=0;
  int digit;
  if (i < endIndex) {
    digit=Character.digit(value.charAt(i++),10);
    if (digit < 0) {
      throw new NumberFormatException("Invalid number: " + value);
    }
    result=-digit;
  }
  while (i < endIndex) {
    digit=Character.digit(value.charAt(i++),10);
    if (digit < 0) {
      throw new NumberFormatException("Invalid number: " + value);
    }
    result*=10;
    result-=digit;
  }
  return -result;
}

public static void println(Object x){
  out.println(x);
}

public static void checkFinite(final double[] val) throws MathIllegalArgumentException {
  for (int i=0; i < val.length; i++) {
    final double x=val[i];
    if (Double.isInfinite(x) || Double.isNaN(x)) {
      throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER,x);
    }
  }
}

private void initKeyboardButtons(KeyboardView view){
  mButtons=new ArrayList<>();
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_0));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_1));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_2));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_3));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_4));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_5));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_6));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_7));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_8));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_9));
  mButtons.add((KeyboardButtonView)view.findViewById(R.id.pin_code_button_clear));
  for (  View button : mButtons) {
    button.setOnClickListener(this);
  }
}

public static boolean isAutoNew(Properties ctx,int WindowNo){
  if (ctx == null)   throw new IllegalArgumentException("Require Context");
  String s=getContext(ctx,WindowNo,"AutoNew",false);
  if (s != null) {
    if (s.equals("Y"))     return true;
 else     return false;
  }
  return isAutoNew(ctx);
}

private static String findRelativePath(String filePath,String dirPath){
  String relPath;
  if (!dirPath.endsWith(File.separator)) {
    dirPath=dirPath + File.separator;
  }
  if (filePath.startsWith(dirPath)) {
    relPath=filePath.substring(dirPath.length());
  }
 else {
    relPath=filePath;
  }
  return relPath;
}

public boolean init(){
  log.config("");
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="";
  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo";
 else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode, "+ "p.ReadOnlyLogic, p.DisplayLogic "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";
  boolean hasFields=false;
  Rows rows=new Rows();
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs,rows);
      isPair=!isPair;
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_wEditors.size() || m_mFields2.size() != m_wEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");
  if (hasFields) {
    centerPanel.appendChild(rows);
    dynamicDisplay();
  }
 else   dispose();
  return hasFields;
}

private static String doNormalize(String filename,char separator,boolean keepSeparator){
  if (filename == null) {
    return null;
  }
  int size=filename.length();
  if (size == 0) {
    return filename;
  }
  int prefix=getPrefixLength(filename);
  if (prefix < 0) {
    return null;
  }
  char[] array=new char[size + 2];
  filename.getChars(0,filename.length(),array,0);
  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;
  for (int i=0; i < array.length; i++) {
    if (array[i] == otherSeparator) {
      array[i]=separator;
    }
  }
  boolean lastIsDirectory=true;
  if (array[size - 1] != separator) {
    array[size++]=separator;
    lastIsDirectory=false;
  }
  for (int i=prefix + 1; i < size; i++) {
    if (array[i] == separator && array[i - 1] == separator) {
      System.arraycopy(array,i,array,i - 1,size - i);
      size--;
      i--;
    }
  }
  for (int i=prefix + 1; i < size; i++) {
    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {
      if (i == size - 1) {
        lastIsDirectory=true;
      }
      System.arraycopy(array,i + 1,array,i - 1,size - i);
      size-=2;
      i--;
    }
  }
  outer:   for (int i=prefix + 2; i < size; i++) {
    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {
      if (i == prefix + 2) {
        return null;
      }
      if (i == size - 1) {
        lastIsDirectory=true;
      }
      int j;
      for (j=i - 4; j >= prefix; j--) {
        if (array[j] == separator) {
          System.arraycopy(array,i + 1,array,j + 1,size - i);
          size-=i - j;
          i=j + 1;
          continue outer;
        }
      }
      System.arraycopy(array,i + 1,array,prefix,size - i);
      size-=i + 1 - prefix;
      i=prefix + 1;
    }
  }
  if (size <= 0) {
    return "";
  }
  if (size <= prefix) {
    return new String(array,0,size);
  }
  if (lastIsDirectory && keepSeparator) {
    return new String(array,0,size);
  }
  return new String(array,0,size - 1);
}

public void resetSingleton(){
  root=null;
  tmpFileCounter.set(0);
  accessedFiles.clear();
  shouldAllThrowIOException=false;
  classesThatShouldThrowIOException.clear();
synchronized (leakingResources) {
    for (    LeakingResource resource : leakingResources) {
      try {
        resource.release();
      }
 catch (      Exception e) {
        logger.warn("Failed to release resource: " + e.getMessage(),e);
      }
    }
    leakingResources.clear();
  }
}

public void testAndNotNegNegFirstLonger(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,2};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.andNot(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public static String generateStringOfCharacters(int count){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < count; i++) {
    sb.append(CHARACTERS.charAt((int)(Math.random() * CHARACTERS.length())));
  }
  return sb.toString();
}

private ExchangeRateManager(){
  if (System.getProperty("EXPERIMENTAL") == null)   throw new UnsupportedOperationException("Work in progress");
  addKnownRates();
}

public void removeAttribute(String name){
  if (name != null)   if (attributesList != null) {
    for (int i=0; i < attributesList.size(); i++) {
      Object o=attributesList.elementAt(i);
      if (o instanceof AttributeField) {
        AttributeField a=(AttributeField)o;
        try {
          String n=a.getName();
          if (n != null) {
            if (name.equals(n)) {
              attributesList.remove(a);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}

@Override public void evict(String key){
  key=safetyKey(key);
  final File file=new File(cacheDirectory,key);
  file.delete();
}

public static boolean isUniqueContraintError(Exception e){
  if (DB.isPostgreSQL())   return isSQLState(e,"23505");
  return isErrorCode(e,1);
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

private void insertUsedContextPrefixes(){
  int unknownPrefixesCount=unknownPrefixesInXMLLiteral.size();
  if (unknownPrefixesCount > 0) {
    StringBuilder contextPrefixes=new StringBuilder(1024);
    ElementInfo topElement=peekStack();
    for (int i=0; i < unknownPrefixesCount; i++) {
      String prefix=unknownPrefixesInXMLLiteral.get(i);
      String namespace=topElement.getNamespace(prefix);
      if (namespace != null) {
        appendNamespaceDecl(contextPrefixes,prefix,namespace);
      }
    }
    int endOfFirstStartTag=charBuf.indexOf(">");
    charBuf.insert(endOfFirstStartTag,contextPrefixes.toString());
  }
  unknownPrefixesInXMLLiteral.clear();
}

public void addPutTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutTimeNanos(duration);
}

public static List<Integer> precomputeHashes(byte[] data,long tweak){
  ArrayList<Integer> list=new ArrayList<>(MAX_HASH_FUNCS);
  for (int i=0; i < MAX_HASH_FUNCS; ++i) {
    list.add(murmurhash3bit(i,data,tweak));
  }
  return list;
}

@RequestProcessing(value="/member/{userName}/following/tags",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomeFollowingTags(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)request.getAttribute(User.USER);
  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName("/home/following-tags.ftl");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(request,response,dataModel);
  String pageNumStr=request.getParameter("p");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr="1";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt("userHomeFollowingTagsCnt");
  final int windowSize=Symphonys.getInt("userHomeFollowingTagsWindowSize");
  fillHomeUser(dataModel,user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  avatarQueryService.fillUserAvatarURL(user);
  final JSONObject followingTagsResult=followQueryService.getFollowingTags(followingId,pageNum,pageSize);
  final List<JSONObject> followingTags=(List<JSONObject>)followingTagsResult.opt(Keys.RESULTS);
  dataModel.put(Common.USER_HOME_FOLLOWING_TAGS,followingTags);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
    for (    final JSONObject followingTag : followingTags) {
      final String homeUserFollowingTagId=followingTag.optString(Keys.OBJECT_ID);
      followingTag.put(Common.IS_FOLLOWING,followQueryService.isFollowing(followerId,homeUserFollowingTagId));
    }
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int followingTagCnt=followingTagsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil(followingTagCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}

public int elevationAt(float lat,float lon){
  if (frame_is_valid == true) {
    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {
      int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval);
      int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval);
      if (elevations[lon_index] == null)       readDataRecord(lon_index);
      return (int)elevations[lon_index][lat_index];
    }
  }
  return -32767;
}

ObservedObject createObservedObject(ObjectName object){
  return new ObservedObject(object);
}

private void deleteChildren(Element container){
  while (container.hasChildNodes()) {
    container.removeChild(container.getLastChild());
  }
}

private void saveInitialChildState(FacesContext facesContext,UIComponent component){
  if (component instanceof EditableValueHolder && !component.isTransient()) {
    String clientId=component.getClientId(facesContext);
    SavedState state=new SavedState();
    initialChildState.put(clientId,state);
    state.populate((EditableValueHolder)component);
  }
  Iterator<UIComponent> iterator=component.getFacetsAndChildren();
  while (iterator.hasNext()) {
    saveChildState(facesContext,iterator.next());
  }
}

public boolean is_overlap(){
  Set<BrdItem> start_contacts=get_start_contacts();
  Set<BrdItem> end_contacts=get_end_contacts();
  for (  BrdItem end_contact : end_contacts) {
    if (start_contacts.contains(end_contact))     return true;
  }
  return false;
}

static Object ensureNotNull(Location location,Object value){
  if (value == null) {
    throw new EvalException(location,"Snippet runtime does not support null values.");
  }
  return value;
}

public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, IOException {
  XmlPullParser parser=Xml.newPullParser();
  parser.setInput(in,null);
  return (ArrayList)readValueXml(parser,new String[1]);
}

private static String padRight(String s,int minLength){
  return String.format("%1$-" + minLength + "s",s);
}

@Override public Enumeration<String> enumerateMeasures(){
  Vector<String> newVector=new Vector<String>(1);
  newVector.addElement("measureNumRules");
  return newVector.elements();
}

protected synchronized void onSendTaskCompleted(RecordBuffer<R> buffer){
  logger.trace("{}:{} Send Completed",name(),buffer);
  activeSendTasks.decrementAndGet();
}

public void addPreferencesButton(){
  JButton prefsButton=new JButton("Prefs");
  prefsButton.setHideActionText(true);
  prefsButton.setAction(RasterPlotActions.getPropertiesDialogAction(this));
  buttonPanel.add(prefsButton);
}

public void clearUnused(ConfigImpl config){
  SystemOut.printDate(config.getOutWriter(),"PagePool: " + size() + ">("+ maxSize+ ")");
  if (size() > maxSize) {
    Object[] keys=keys();
    LongKeyList list=new LongKeyList();
    for (int i=0; i < keys.length; i++) {
      PageSource ps=getPageSource(keys[i],false);
      long updateTime=ps.getLastAccessTime();
      if (updateTime + timeout < System.currentTimeMillis()) {
        long add=((ps.getAccessCount() - 1) * 10000);
        if (add > timeout)         add=timeout;
        list.add(updateTime + add,keys[i]);
      }
    }
    while (size() > maxSize) {
      Object key=list.shift();
      if (key == null)       break;
      remove(key);
    }
  }
}

public static GridField[] createFields(Properties ctx,int WindowNo,int TabNo,int AD_Tab_ID){
  ArrayList<GridFieldVO> listVO=new ArrayList<GridFieldVO>();
  int AD_Window_ID=0;
  boolean readOnly=false;
  String sql=GridFieldVO.getSQL(ctx);
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,AD_Tab_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      GridFieldVO vo=GridFieldVO.create(ctx,WindowNo,TabNo,AD_Window_ID,AD_Tab_ID,readOnly,rs);
      listVO.add(vo);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  GridField[] retValue=new GridField[listVO.size()];
  for (int i=0; i < listVO.size(); i++)   retValue[i]=new GridField((GridFieldVO)listVO.get(i));
  return retValue;
}

public ShortInterleavedRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){
  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}

private void copyCarbonDataFileToCarbonStorePath(String localFileName) throws CarbonDataWriterException {
  long copyStartTime=System.currentTimeMillis();
  LOGGER.info("Copying " + localFileName + " --> "+ carbonDataDirectoryPath);
  try {
    CarbonFile localCarbonFile=FileFactory.getCarbonFile(localFileName,FileFactory.getFileType(localFileName));
    String carbonFilePath=carbonDataDirectoryPath + localFileName.substring(localFileName.lastIndexOf(File.separator));
    copyLocalFileToCarbonStore(carbonFilePath,localFileName,CarbonCommonConstants.BYTEBUFFER_SIZE,getMaxOfBlockAndFileSize(fileSizeInBytes,localCarbonFile.getSize()));
  }
 catch (  IOException e) {
    throw new CarbonDataWriterException("Problem while copying file from local store to carbon store");
  }
  LOGGER.info("Total copy time (ms) to copy file " + localFileName + " is "+ (System.currentTimeMillis() - copyStartTime));
}

@Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {
  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());
  if (isVertical)   scrollable.setAsVerticalList();
 else   scrollable.setAsHorizontalList();
  return scrollable.flingBackward();
}

protected static double toDouble(String s){
  try {
    return Double.parseDouble(s);
  }
 catch (  Exception e) {
    TestCase.fail("Failed to parse double: " + s + "\n"+ throwableToString(e));
    return Double.NaN;
  }
}

public void addListener(final IFilterPanelListener<T> listener){
  m_listeners.addListener(listener);
}

public void testmirror(File orig,File origni,File truecolor){
  File mirror=TestSupport.addSuffixToName(orig,"_mirror");
  File recov=TestSupport.addSuffixToName(orig,"_recov");
  long crc0=0;
  boolean interlaced;
  boolean palete;
{
    PngReader pngr=new PngReader(orig);
    PngWriter pngw=null;
    try {
      if (rand.nextBoolean())       pngr.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      palete=pngr.imgInfo.indexed;
      pngr.prepareSimpleDigestComputation();
      interlaced=pngr.isInterlaced();
      pngw=new PngWriter(mirror,pngr.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_CYCLIC);
      pngw.copyChunksFrom(pngr.getChunksList());
      IImageLineSet<? extends IImageLine> lines=pngr.readRows();
      for (int row=0; row < pngr.imgInfo.rows; row++) {
        mirrorLine(lines.getImageLine(row),pngr.imgInfo);
        pngw.writeRow(lines.getImageLine(row));
      }
      pngr.end();
      crc0=PngHelperInternal.getDigest(pngr);
      pngw.end();
    }
  finally {
      pngr.close();
      if (pngw != null)       pngw.close();
    }
  }
{
    PngReader pngr2=new PngReader(mirror);
    PngWriter pngw=null;
    try {
      if (pngr2.imgInfo.bitDepth < 16 && rand.nextBoolean())       pngr2.setLineSetFactory(ImageLineSetDefault.getFactoryByte());
      pngw=new PngWriter(recov,pngr2.imgInfo,true);
      pngw.setFilterType(FilterType.FILTER_DEFAULT);
      pngw.copyChunksFrom(pngr2.getChunksList());
      for (int row=0; row < pngr2.imgInfo.rows; row++) {
        IImageLine line=pngr2.readRow();
        mirrorLine(line,pngr2.imgInfo);
        pngw.writeRow(line);
      }
      pngr2.end();
      pngw.end();
    }
  finally {
      pngr2.close();
      if (pngw != null)       pngw.close();
    }
  }
  if (!interlaced)   TestSupport.testCrcEquals(recov,crc0);
 else   TestSupport.testSameCrc(recov,origni);
  if (interlaced)   additionalTestInterlaced(orig,origni);
  if (palete && truecolor.exists())   additionalTestPalette(orig,truecolor);
}

public boolean isStable(){
  return myFeatures.contains(FEATURE_STABLE);
}

public static void calcTextSize(Paint paint,String demoText,FSize outputFSize){
  Rect r=mCalcTextSizeRect;
  r.set(0,0,0,0);
  paint.getTextBounds(demoText,0,demoText.length(),r);
  outputFSize.width=r.width();
  outputFSize.height=r.height();
}

protected void performDefaults(){
  super.performDefaults();
  initializeValues();
  verifyValidation();
}

public String toString(){
  final StringBuilder buf=new StringBuilder("{");
  for (int i=0, end=_pos - 1; i < end; i++) {
    buf.append(_data[i]);
    buf.append(", ");
  }
  if (size() > 0) {
    buf.append(_data[_pos - 1]);
  }
  buf.append("}");
  return buf.toString();
}

public static void write(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,DataOutputStream dos) throws IOException, InterruptedException {
  int[] pixels=new int[image_width * image_height];
  PixelGrabber pixelgrabber=new PixelGrabber(image,0,0,image_width,image_height,pixels,0,image_width);
  pixelgrabber.grabPixels();
  LinkRaster.write(x1,y1,image_width,image_height,pixels,properties,dos);
}

@SuppressWarnings("unchecked") public void testProjectionPredicateDifferentClassLoaders() throws Exception {
  final Ignite ignite3=startGrid(3);
  URL[] clsLdrUrls;
  try {
    clsLdrUrls=new URL[]{new URL(GridTestProperties.getProperty("p2p.uri.cls"))};
  }
 catch (  MalformedURLException e) {
    throw new RuntimeException("Define property p2p.uri.cls",e);
  }
  ClassLoader ldr1=new URLClassLoader(clsLdrUrls,getClass().getClassLoader());
  Class taskCls=ldr1.loadClass("org.apache.ignite.tests.p2p.JobStealingTask");
  Class nodeFilterCls=ldr1.loadClass("org.apache.ignite.tests.p2p.ExcludeNodeFilter");
  IgnitePredicate<ClusterNode> nodeFilter=(IgnitePredicate<ClusterNode>)nodeFilterCls.getConstructor(UUID.class).newInstance(ignite2.cluster().localNode().id());
  Map<UUID,Integer> ret=(Map<UUID,Integer>)executeAsync(compute(ignite1.cluster().forPredicate(nodeFilter)),taskCls,null).get(TASK_EXEC_TIMEOUT_MS);
  assert ret != null;
  assert ret.get(ignite1.cluster().localNode().id()) != null && ret.get(ignite1.cluster().localNode().id()) == 2 : ret.get(ignite1.cluster().localNode().id());
  assert ret.get(ignite3.cluster().localNode().id()) != null && ret.get(ignite3.cluster().localNode().id()) == 2 : ret.get(ignite3.cluster().localNode().id());
}

public void stateChanged(ChangeEvent evt){
  int scale=slider.getValue();
  value.setText("x" + String.valueOf(scale));
  size.setText("Image Size: " + (width * scale) + " x "+ (height * scale)+ " pixels");
  preview.repaint();
}

public static void writeToFile(String content,File dstFile) throws IOException {
  BufferedWriter bufferedWriter=new BufferedWriter(new FileWriter(dstFile,false));
  bufferedWriter.write(content);
  bufferedWriter.close();
}

public static boolean isFileURL(URL url){
  String protocol=url.getProtocol();
  return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFSFILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol));
}

private void updateStatus(String relayState,int currentStatus){
  Integer tmp=(Integer)currentStatusMap.get(relayState);
  if (tmp != null) {
    int previousStatus=tmp.intValue();
switch (previousStatus) {
case LOGOUT_SUCCEEDED_STATUS:
      if (currentStatus > previousStatus) {
        currentStatusMap.put(relayState,new Integer(currentStatus));
      }
    break;
case LOGOUT_FAILED_STATUS:
  if (currentStatus < LOGOUT_FAILED_STATUS) {
    currentStatusMap.put(relayState,new Integer(LOGOUT_PARTIAL_STATUS));
  }
break;
default :
break;
}
}
 else {
currentStatusMap.put(relayState,new Integer(currentStatus));
}
}

public static int[] oidStrToInts(String oid) throws IOException {
  int length=oid.length();
  if (oid.charAt(length - 1) == '.') {
    throw new IOException("Bad OID: " + oid);
  }
  int[] result=new int[length / 2 + 1];
  int number=0;
  for (int i=0; i < length; i++) {
    int value=0;
    int pos=i;
    for (; i < length; i++) {
      char ch=oid.charAt(i);
      if ((ch < '0') || (ch > '9')) {
        break;
      }
      value=10 * value + (ch - '0');
    }
    if (i == pos) {
      throw new IOException("Bad OID: " + oid);
    }
    result[number++]=value;
    if (i == length) {
      break;
    }
    char ch=oid.charAt(i);
    if (ch != '.') {
      throw new IOException("Bad OID: " + oid);
    }
  }
  if (number < 2) {
    throw new IOException("OID should consist of no less than 2 components: " + oid);
  }
  return Arrays.copyOfRange(result,0,number);
}

public static Set<String> listServers(SSOToken ssoToken,String siteName) throws SMSException, SSOException, ConfigurationException {
  Set<String> members=new HashSet<>();
  String siteId=getSiteId(ssoToken,siteName);
  if (siteId != null) {
    Set<String> allServers=ServerConfiguration.getServers(ssoToken);
    for (    String svr : allServers) {
      if (ServerConfiguration.belongToSite(ssoToken,svr,siteName)) {
        members.add(svr);
      }
    }
  }
  return members;
}

public static GenericObjectEditorDialog createDialog(Container parent){
  return createDialog(parent,null);
}

public static boolean containsInLineFeatures(StyledLayerDescriptor sld){
  if (sld != null) {
    for (    StyledLayer layer : sld.layers()) {
      if (layer instanceof UserLayer) {
        UserLayer userLayer=(UserLayer)layer;
        if (userLayer.getInlineFeatureDatastore() != null) {
          return true;
        }
      }
    }
  }
  return false;
}

public byte decodeBuffer(InputStream in)[] throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  decodeBuffer(in,outStream);
  return (outStream.toByteArray());
}

public static void runFinalization(){
  RUNTIME.runFinalization();
}

private void displayAllStringDefinedInStringXml(){
  SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_1);
  List<String> list=new ArrayList<>();
  list.add(getString(R.string.gems_logo));
  String text=TextUtils.join(" ",list);
  textView.setText(text);
}

public static void checkHTTPRequestLength(HttpServletRequest request) throws ServletException {
  int maxContentLength=SAMLUtils.getMaxContentLength();
  if (maxContentLength != 0) {
    int length=request.getContentLength();
    if (length == -1) {
      throw new ServletException(bundle.getString("unknownLength"));
    }
    if (length > maxContentLength) {
      if (debug.messageEnabled()) {
        debug.message("FSUtils.checkHTTPRequestLength: " + "content length too large" + length);
      }
      throw new ServletException(bundle.getString("largeContentLength"));
    }
  }
}

public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){
  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);
  addForeignKeyConstraint(foreignKey);
}

@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mHandler=new Handler();
  setContentView(R.layout.voice_recognition);
  Button speakButton=(Button)findViewById(R.id.btn_speak);
  mList=(ListView)findViewById(R.id.list);
  mSupportedLanguageView=(Spinner)findViewById(R.id.supported_languages);
  PackageManager pm=getPackageManager();
  List<ResolveInfo> activities=pm.queryIntentActivities(new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH),0);
  if (activities.size() != 0) {
    speakButton.setOnClickListener(this);
  }
 else {
    speakButton.setEnabled(false);
    speakButton.setText("Recognizer not present");
  }
  refreshVoiceSettings();
}

public void push(Notification notification,NotificationResponseListener listener){
  final String notificationTopic=notification.getTopic();
  final String topic=notificationTopic == null ? defaultTopic : notificationTopic;
  Request req=Utils.buildRequest(client,topic,notification,gateway);
  semaphore.acquireUninterruptibly();
  req.send(new ResponseListener(semaphore,notification,listener));
}

private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {
  boolean isValueNumeric=false;
  try {
    if (value.equals("0") || !value.endsWith("0")) {
      Double.parseDouble(value);
      isValueNumeric=true;
    }
  }
 catch (  NumberFormatException e) {
    isValueNumeric=false;
  }
  if (json.charAt(json.length() - 1) != '{') {
    json.append(',');
  }
  json.append(escapeJSON(key));
  json.append(':');
  if (isValueNumeric) {
    json.append(value);
  }
 else {
    json.append(escapeJSON(value));
  }
}

public void updateFromResource(){
  for (  String resource : resources) {
    InputStream is=ClassLoader.getSystemResourceAsStream(resource);
    LinkedHashMap<EntryType,LinkedHashMap<String,ConfigEntry>> parseResult=parse(is);
    for (    EntryType type : myMap.keySet()) {
      LinkedHashMap<String,ConfigEntry> dataMappings=myMap.get(type);
      LinkedHashMap<String,ConfigEntry> resourceMappings=parseResult.get(type);
      LinkedHashMap<String,ConfigEntry> tempMappings=new LinkedHashMap<String,ConfigEntry>();
      LinkedHashSet<String> keys=new LinkedHashSet<String>();
      keys.addAll(dataMappings.keySet());
      keys.addAll(resourceMappings.keySet());
      for (      String key : keys) {
        if (resourceMappings.containsKey(key)) {
          tempMappings.put(key,resourceMappings.get(key));
        }
 else {
          tempMappings.put(key,dataMappings.get(key));
        }
      }
      myMap.put(type,tempMappings);
    }
  }
}

private void deselect(final int index,final boolean shouldFireEvents){
  checkWidget();
  if (index < 0 || index >= items.size()) {
    return;
  }
  final DLItem item=selection.remove(index);
  if (shouldFireEvents) {
    fireSelectionEvent(item);
  }
  final List<DLItem> deselectedItems=new ArrayList<DLItem>();
  item.setLastAction(LAST_ACTION.DESELECTION);
  deselectedItems.add(item);
  if (shouldFireEvents) {
    fireSelectionChangeEvent(deselectedItems);
  }
  redrawTables();
}

public boolean isLeaf(Object nd){
  Node node=(Node)nd;
  return !node.hasChildNodes();
}

public void addListener(Listener listener){
  mListeners.add(listener);
  notifyServiceDiscovered(mMatchingDrones);
}

@Override boolean equals(Object obj);

private double[] parseVector(String s){
  String[] entries=WHITESPACE_PATTERN.split(s);
  double[] d=new double[entries.length];
  for (int i=0; i < entries.length; i++) {
    try {
      d[i]=ParseUtil.parseDouble(entries[i]);
    }
 catch (    NumberFormatException e) {
      throw new AbortException("Could not parse vector.");
    }
  }
  return d;
}

public void test_create_update() throws IOException {
  final String id="test";
  final Map<String,Object> metadata=new HashMap<String,Object>();
  metadata.put(FileMetadataSchema.ID,id);
  metadata.put("foo","bar");
  final int version0;
  final long createTime0;
  final byte[] expected0=new byte[]{1,2,3};
{
    version0=repo.create(metadata);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version0));
    assertEquals("version",0,version0);
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime0=doc.getVersionCreateTime();
    Map<String,Object> actual=doc.asMap();
    assertEquals("id",id,actual.get(FileMetadataSchema.ID));
    assertEquals("version",version0,actual.get(FileMetadataSchema.VERSION));
    assertEquals("user property","bar",actual.get("foo"));
    assertEquals("size",metadata.size(),actual.size());
    repo.copyStream(id,version0,new ByteArrayInputStream(expected0));
    assertEquals("version0",expected0,read(repo.inputStream(id,version0)));
  }
  final int version1;
  final long createTime1;
  final byte[] expected1=new byte[]{4,5,6};
{
    metadata.put("foo","baz");
    DocumentImpl doc1=new DocumentImpl(metadata);
    doc1.copyStream(expected1);
    version1=repo.update(doc1);
    assertEquals("version",1,version1);
    metadata.put(FileMetadataSchema.VERSION,Integer.valueOf(version1));
    RepositoryDocumentImpl doc=(RepositoryDocumentImpl)repo.read(id);
    createTime1=doc.getVersionCreateTime();
    assertNotSame("createTime",0L,createTime1);
    assertNotSame("createTime",createTime0,createTime1);
    Map<String,Object> actual=doc.asMap();
    assertEquals("id",id,actual.get(FileMetadataSchema.ID));
    assertEquals("version",version1,actual.get(FileMetadataSchema.VERSION));
    assertEquals("user property","baz",actual.get("foo"));
    assertEquals("size",metadata.size(),actual.size());
    assertEquals("version1",expected1,read(repo.inputStream(id,version1)));
    assertEquals("version0",new byte[]{},read(repo.inputStream(id,version0)));
{
      ITPS tps=repo.readMetadata(id,createTime1 - 1L);
      ITPV tpv=tps.get(FileMetadataSchema.VERSION);
      assertEquals("version",null,tpv.getValue());
    }
  }
}

@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeDouble(knnDistance);
}

public SessionWrapper(Session ses){
  this.ses=ses;
  this.time=System.currentTimeMillis();
}

public static List<BatchResponse> postWithSingleRequest(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final BatchRequest br){
  final List<BatchRequest> batchRequests=new ArrayList<>();
  batchRequests.add(br);
  final String jsonifiedRequest=BatchHelper.toJsonString(batchRequests);
  final List<BatchResponse> response=BatchHelper.postBatchRequestsWithoutEnclosingTransaction(requestSpec,responseSpec,jsonifiedRequest);
  Assert.assertNotNull(response);
  Assert.assertTrue(response.size() > 0);
  return response;
}

public File programDirectory(){
  return programDirectory;
}

@Override public void clearRouteSensors(){
  _controlSensorList=new ArrayList<>();
}

public static KEYSTORE_TYPE fromString(String x) throws ConfigurationException {
  for (  KEYSTORE_TYPE currentType : KEYSTORE_TYPE.values()) {
    if (x.equalsIgnoreCase(currentType.toString()))     return currentType;
  }
  throw new ConfigurationException(MessageFormat.format("Cannot cast into a known CERTIFICATE_KEY_TYPE: {0}",x));
}

public ObjectMapper nextLevel(ObjectMapper level){
  ObjectMapper previous=levelStack.peek();
  levelStack.push(level);
  return previous;
}

protected static int toDigit(final char ch,final int index) throws HexDecodeException {
  final int digit=Character.digit(ch,16);
  if (digit == -1) {
    throw new HexDecodeException("Illegal hexadecimal character " + ch + " at index "+ index);
  }
  return digit;
}

public JSONObject toJson() throws JSONException {
  JSONObject json=new JSONObject();
  JSONArray jpods=new JSONArray();
  for (  DiasporaPod pod : pods) {
    jpods.put(pod.toJson());
  }
  json.put("pods",jpods);
  json.put("timestamp",System.currentTimeMillis());
  return json;
}

public static KeyStore load(File keyStoreFile,Password password) throws CryptoException, FileNotFoundException {
  KeyStoreType keyStoreType=null;
  try {
    keyStoreType=CryptoFileUtil.detectKeyStoreType(new FileInputStream(keyStoreFile));
  }
 catch (  FileNotFoundException ex) {
    throw ex;
  }
catch (  IOException ex) {
    throw new CryptoException(res.getString("NoLoadKeyStore.exception.message"),ex);
  }
  if (keyStoreType == null) {
    return null;
  }
  return load(keyStoreFile,password,keyStoreType);
}

@Override public void removePropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.removePropertyChangeListener(pcl);
}

@VisibleForTesting static boolean isPrecachingEnabled(Context context){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  return prefs.getBoolean(PREF_IS_PRECACHING_ENABLED,false);
}

public void and(LongBitSet other){
  int pos=Math.min(numWords,other.numWords);
  while (--pos >= 0) {
    bits[pos]&=other.bits[pos];
  }
  if (numWords > other.numWords) {
    Arrays.fill(bits,other.numWords,numWords,0L);
  }
}

@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PrincipalEntry))   return false;
  PrincipalEntry that=(PrincipalEntry)obj;
  return (principalClass.equals(that.principalClass) && principalName.equals(that.principalName));
}

public boolean isValidLockdownProfile(){
  try {
    return true;
  }
 catch (  IllegalArgumentException e) {
    Log.w(TAG,"Invalid address",e);
    return false;
  }
}

private int readServerResponse() throws IOException {
  StringBuffer replyBuf=new StringBuffer(32);
  int c;
  int continuingCode=-1;
  int code;
  String response;
  serverResponse.setSize(0);
  while (true) {
    while ((c=in.read()) != -1) {
      if (c == '\r') {
        if ((c=in.read()) != '\n') {
          replyBuf.append('\r');
        }
      }
      replyBuf.append((char)c);
      if (c == '\n') {
        break;
      }
    }
    response=replyBuf.toString();
    replyBuf.setLength(0);
    if (logger.isLoggable(PlatformLogger.Level.FINEST)) {
      logger.finest("Server [" + serverAddr + "] --> "+ response);
    }
    if (response.length() == 0) {
      code=-1;
    }
 else {
      try {
        code=Integer.parseInt(response.substring(0,3));
      }
 catch (      NumberFormatException e) {
        code=-1;
      }
catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
    serverResponse.addElement(response);
    if (continuingCode != -1) {
      if (code != continuingCode || (response.length() >= 4 && response.charAt(3) == '-')) {
        continue;
      }
 else {
        continuingCode=-1;
        break;
      }
    }
 else     if (response.length() >= 4 && response.charAt(3) == '-') {
      continuingCode=code;
      continue;
    }
 else {
      break;
    }
  }
  return code;
}

public static boolean isExtension(String filename,String[] extensions){
  if (filename == null) {
    return false;
  }
  if (extensions == null || extensions.length == 0) {
    return indexOfExtension(filename) == -1;
  }
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension)) {
      return true;
    }
  }
  return false;
}

public FromClause(Stream streamOne,OuterJoinQualifier outerJoinQualifier,Stream streamTwo){
  this(streamOne);
  add(streamTwo);
  outerJoinQualifiers.add(outerJoinQualifier);
}

private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {
  int[] cValues=new int[3];
  do {
    if (bits.available() == 8) {
      return;
    }
    int firstByte=bits.readBits(8);
    if (firstByte == 254) {
      return;
    }
    parseTwoBytes(firstByte,bits.readBits(8),cValues);
    for (int i=0; i < 3; i++) {
      int cValue=cValues[i];
      if (cValue == 0) {
        result.append('\r');
      }
 else       if (cValue == 1) {
        result.append('*');
      }
 else       if (cValue == 2) {
        result.append('>');
      }
 else       if (cValue == 3) {
        result.append(' ');
      }
 else       if (cValue < 14) {
        result.append((char)(cValue + 44));
      }
 else       if (cValue < 40) {
        result.append((char)(cValue + 51));
      }
 else {
        throw FormatException.getFormatInstance();
      }
    }
  }
 while (bits.available() > 0);
}

public static KdbDatabase createKdbDatabase(Credentials credentials,KdbHeader kdbHeader,InputStream inputStream) throws IOException {
  DataInput dataInput=new LittleEndianDataInputStream(inputStream);
  checkSignature(dataInput);
  deserializeHeader(kdbHeader,dataInput);
  InputStream decryptedInputStream=kdbHeader.createDecryptedInputStream(credentials.getKey(),inputStream);
  MessageDigest digest=Encryption.getMessageDigestInstance();
  DigestInputStream digestInputStream=new DigestInputStream(decryptedInputStream,digest);
  dataInput=new LittleEndianDataInputStream(digestInputStream);
  KdbDatabase kdbDatabase=new KdbDatabase();
  KdbGroup lastGroup=(KdbGroup)kdbDatabase.getRootGroup();
  for (long group=0; group < kdbHeader.getGroupCount(); group++) {
    lastGroup=deserializeGroup(lastGroup,dataInput);
  }
  for (long entry=0; entry < kdbHeader.getEntryCount(); entry++) {
    deserializeEntry(kdbDatabase,dataInput);
  }
  if (!Arrays.equals(digest.digest(),kdbHeader.getContentHash())) {
    throw new IllegalStateException("Hash values did not match");
  }
  digestInputStream.close();
  return kdbDatabase;
}

private DiffPart decodeAdd(final int blockSize_S,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_S < 1 || blockSize_L < 1) {
    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + " or blockSize_L: "+ blockSize_L);
  }
  int s=r.read(blockSize_S);
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.INSERT);
  part.setStart(s);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}

public void sort(){
  Arrays.sort(V,0,size());
}

public void rebuildPanel(){
  if (activeWorker != null && !activeWorker.isDone()) {
    activeWorker.cancel(true);
  }
  panelImages.removeAll();
  panelImages.revalidate();
  scrollPane.repaint();
  activeWorker=new ImageLoader(mediaFiles);
  activeWorker.execute();
}

protected void processBytes(byte[] buf,int off,int len){
  nBytesIn+=len;
  if (len < 1 || state.isDone())   return;
  if (state == State.ROW_READY)   throw new PngjInputException("this should only be called if waitingForMoreInput");
  if (inf.needsDictionary() || !inf.needsInput())   throw new RuntimeException("should not happen");
  inf.setInput(buf,off,len);
  if (isCallbackMode()) {
    while (inflateData()) {
      int nextRowLen=processRowCallback();
      prepareForNextRow(nextRowLen);
      if (isDone())       processDoneCallback();
    }
  }
 else   inflateData();
}

@Override protected String toString(File obj){
  return obj.getAbsolutePath();
}

public final void goToNextPage(){
  final boolean isLastPage=viewPager.getCurrentItem() == (pages.size() - 1);
  if (!isLastPage) {
    viewPager.setCurrentItem(viewPager.getCurrentItem() + 1,true);
  }
}

private static InputStream nullInputStream() throws NullPointerException {
  if (currentTimeMillis() > 0) {
    return null;
  }
  throw new NullPointerException();
}

public List<TypeId<?>> asList(){
  return Collections.unmodifiableList(Arrays.asList(types));
}

private static void deleteRules(List<String> batchList,List<Rule> rulesToDelete){
  String deleteStatement="DELETE FROM " + RULES_TABLE + " WHERE RULE_INTERNAL_ID=%d";
  for (  Rule rule : rulesToDelete) {
    batchList.add(String.format(deleteStatement,rule.getUid()));
  }
}

public boolean isVisited(Object element){
  return myVisitedElements.containsKey(element);
}

public AwsIotConnection(AbstractAwsIotClient client){
  this.client=client;
}

public static <T>CompletableFuture<T> exceptionallyCompletedFuture(Throwable throwable){
  final CompletableFuture<T> future=new CompletableFuture<T>();
  future.completeExceptionally(throwable);
  return future;
}

protected void initForecastErrors(ArrayList<Float> model,TimeSeries.DataSequence data){
  double sumErr=0.0;
  double sumAbsErr=0.0;
  double sumAbsPercentErr=0.0;
  double sumErrSquared=0.0;
  int processedPoints=0;
  int n=data.size();
  for (int i=0; i < n; i++) {
    double error=model.get(i) - data.get(i).value;
    sumErr+=error;
    sumAbsErr+=Math.abs(error);
    sumAbsPercentErr+=Math.abs(error / data.get(i).value);
    sumErrSquared+=error * error;
    processedPoints++;
  }
  this.bias=sumErr / processedPoints;
  this.mad=sumAbsErr / processedPoints;
  this.mape=sumAbsPercentErr / processedPoints;
  this.mse=sumErrSquared / processedPoints;
  this.sae=sumAbsErr;
  errorsInit=true;
}

public boolean checkModifiers(MouseEvent e){
  return e.getModifiers() == modifiers;
}

public void emitRetainedVars(GenerateJsVisitor gen){
  if (!retainedVars.isEmpty()) {
    gen.out("var ");
    boolean first=true;
    for (    String varName : retainedVars) {
      if (!first) {
        gen.out(",");
      }
      first=false;
      gen.out(varName);
    }
    gen.endLine(true);
    retainedVars.clear();
  }
}

public URI(String scheme,String authority,String path,String query,String fragment) throws URISyntaxException {
  if (scheme != null && path != null && !path.isEmpty() && path.charAt(0) != '/') {
    throw new URISyntaxException(path,"Relative path");
  }
  StringBuilder uri=new StringBuilder();
  if (scheme != null) {
    uri.append(scheme);
    uri.append(':');
  }
  if (authority != null) {
    uri.append("//");
    AUTHORITY_ENCODER.appendEncoded(uri,authority);
  }
  if (path != null) {
    PATH_ENCODER.appendEncoded(uri,path);
  }
  if (query != null) {
    uri.append('?');
    ALL_LEGAL_ENCODER.appendEncoded(uri,query);
  }
  if (fragment != null) {
    uri.append('#');
    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);
  }
  parseURI(uri.toString(),false);
}

public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg,int topN){
  resetState();
  if (hg == null || hg.goalNode == null) {
    return emptyList();
  }
  final List<StructuredTranslation> kbest=new ArrayList<>(topN);
  for (int k=1; k <= topN; k++) {
    StructuredTranslation translation=getKthStructuredTranslation(hg.goalNode,k);
    if (translation == null) {
      break;
    }
    kbest.add(translation);
  }
  return kbest;
}

@Override public int read() throws IOException {
synchronized (lock) {
    checkNotClosed();
    if (pos != count) {
      return str.charAt(pos++);
    }
    return -1;
  }
}

public static boolean isSnapshotFullCopySupported(URI blockSnapURI,DbClient dbClient){
  BlockSnapshot blockObj=dbClient.queryObject(BlockSnapshot.class,blockSnapURI);
  StorageSystem storage=dbClient.queryObject(StorageSystem.class,blockObj.getStorageController());
  return (storage != null && (storage.deviceIsType(Type.openstack) || storage.deviceIsType(Type.vnxblock) || storage.deviceIsType(Type.ibmxiv)|| storage.deviceIsType(Type.vmax)));
}

public Iterable<ServiceDescriptor> listServices(){
  ArrayList<ServiceDescriptor> serviceDescriptors=new ArrayList<ServiceDescriptor>();
  for (  FileDescriptor fileDescriptor : fileDescriptors) {
    serviceDescriptors.addAll(fileDescriptor.getServices());
  }
  return serviceDescriptors;
}

private String stripCodeValueSentences(String string){
  return string.replaceAll("This result code corresponds to the LDAP result code value of \\{@code \\d+\\}.","");
}

public void testDivideRoundHalfEvenNeg2(){
  String a="-37361671119238118911893939591735";
  int aScale=10;
  String b="74723342238476237823787879183470";
  int bScale=15;
  String c="0E+5";
  int resScale=-5;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",resScale,result.scale());
}

public static double quantile(double p,double alpha,double beta){
  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {
    return Double.NaN;
  }
  if (p < 0 || p > 1) {
    return Double.NaN;
  }
  if (p == 0) {
    return 0.0;
  }
  if (p == 1) {
    return 1.0;
  }
  if (p > 0.5) {
    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));
  }
 else {
    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));
  }
}

public boolean validate(String cert,String signedData,String signature) throws NoSuchAlgorithmException, IOException, Exception {
  byte[] certBytes=Base64.decode(cert);
  byte[] signedDataBytes=Base64.decode(signedData);
  byte[] signatureBytes=Base64.decode(signature);
  return validate(certBytes,signedDataBytes,signatureBytes);
}

private SharedDeployment createNewDeployment(GridDeploymentMetadata meta,boolean isCache){
  assert Thread.holdsLock(mux);
  assert meta.parentLoader() == null;
  IgniteUuid ldrId=IgniteUuid.fromUuid(ctx.localNodeId());
  GridDeploymentClassLoader clsLdr;
  if (meta.deploymentMode() == CONTINUOUS || meta.participants() == null) {
    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,ctx.config().getClassLoader() != null ? ctx.config().getClassLoader() : U.gridClassLoader(),meta.classLoaderId(),meta.senderNodeId(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),meta.deploymentMode() == CONTINUOUS,false);
    if (meta.participants() != null)     for (    Map.Entry<UUID,IgniteUuid> e : meta.participants().entrySet())     clsLdr.register(e.getKey(),e.getValue());
    if (log.isDebugEnabled())     log.debug("Created class loader in CONTINUOUS mode or without participants " + "[ldr=" + clsLdr + ", meta="+ meta+ ']');
  }
 else {
    assert meta.deploymentMode() == SHARED;
    clsLdr=new GridDeploymentClassLoader(ldrId,meta.userVersion(),meta.deploymentMode(),false,ctx,U.gridClassLoader(),meta.participants(),comm,ctx.config().getNetworkTimeout(),log,ctx.config().getPeerClassLoadingLocalClassPathExclude(),ctx.config().getPeerClassLoadingMissedResourcesCacheSize(),false,false);
    if (log.isDebugEnabled())     log.debug("Created classloader in SHARED mode with participants " + "[ldr=" + clsLdr + ", meta="+ meta+ ']');
  }
  SharedDeployment dep=new SharedDeployment(meta.deploymentMode(),clsLdr,ldrId,meta.userVersion(),meta.alias());
  if (log.isDebugEnabled())   log.debug("Created new deployment: " + dep);
  if (isCache) {
    List<SharedDeployment> deps=F.addIfAbsent(cache,meta.userVersion(),new LinkedList<SharedDeployment>());
    assert deps != null;
    deps.add(dep);
    if (log.isDebugEnabled())     log.debug("Added deployment to cache: " + cache);
  }
  return dep;
}

public int size(){
  return seq.size();
}

public void testAddServletRunAsRole() throws Exception {
  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";
  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());
  WebXmlUtils.addServletRunAsRoleName(webXml,"s1","r1");
  String roleName=WebXmlUtils.getServletRunAsRoleName(webXml,"s1");
  assertEquals("r1",roleName);
}

public void testCase15(){
  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.subtract(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(-1,result.signum());
}

public MultiTermQuery(final String field){
  this.field=Objects.requireNonNull(field,"field must not be null");
}

public static void printLine(Object message){
  if (!isDisabled()) {
    printLine(String.valueOf(message));
  }
}

public void accumulate(TaggedLogAPIEntity entity) throws Exception {
  AggregateAPIEntity current=root;
  for (  String groupby : groupbys) {
    String tagv=locateGroupbyField(groupby,entity);
    if (tagv == null || tagv.isEmpty()) {
      tagv=UNASSIGNED_GROUPBY_ROOT_FIELD_NAME;
    }
    Map<String,AggregateAPIEntity> children=current.getEntityList();
    if (children.get(tagv) == null) {
      children.put(tagv,factory.create());
      current.setNumDirectDescendants(current.getNumDirectDescendants() + 1);
    }
    AggregateAPIEntity child=children.get(tagv);
    if (counting)     count(child);
    for (    String sumFunctionField : sumFunctionFields) {
      sum(child,entity,sumFunctionField);
    }
    current=child;
  }
}

public void testInvalidXml() throws Exception {
  testInvalidGpx(INVALID_XML_GPX);
}

public String toString(boolean expand){
  StringBuilder acc=new StringBuilder();
  toString(acc,0,expand);
  return acc.toString();
}

public static boolean isAccessorPair(TMember member,TMember member2){
  return (member instanceof TGetter && member2 instanceof TSetter) || (member instanceof TSetter && member2 instanceof TGetter);
}

public static DateFormat createUTCDateFormatter(String dateFormat){
  DateFormat formatter=new SimpleDateFormat(dateFormat);
  formatter.setTimeZone(TimeZone.getTimeZone("UTC"));
  return formatter;
}

public void writeLinkedKml(final String filename,final KmlType kml){
  if (filename.equals("doc.kml")) {
    throw new IllegalArgumentException("The filename 'doc.kml' is reserved for the primary kml.");
  }
  if (filename.equals("main.kml")) {
    throw new IllegalArgumentException("The filename 'main.kml' is reserved for the main kml.");
  }
  writeKml(filename,kml);
}

String destinationFilePath(){
  return destinationFilePath;
}

@Override public void refreshUsersOrGroupsListFromServer(){
  showLoadingDialog(getString(R.string.common_loading));
  GetShareWithUsersAsyncTask getTask=new GetShareWithUsersAsyncTask(this);
  Object[] params={getFile(),getAccount(),getStorageManager()};
  getTask.execute(params);
}

public BootPanel(){
  initComponents();
}

private List<Header> defaultHeaders(){
  DateFormat dateFormat=new SimpleDateFormat("EEE, dd mmm yyyy HH:mm:ss zzz");
  List<Header> headers=new ArrayList<>();
  headers.add(new BasicHeader("Date",dateFormat.format(new Date())));
  return headers;
}

public AemParsys clear(){
  List<WebElement> list=currentScope.findElements(By.cssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS));
  list.forEach(null);
  return this;
}

protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){
  if (contentType != null) {
    uriRequest.setHeader("Content-Type",contentType);
  }
  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());
  responseHandler.setRequestURI(uriRequest.getURI());
  Future<?> request=threadPool.submit(new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler));
  if (context != null) {
    List<WeakReference<Future<?>>> requestList=requestMap.get(context);
    if (requestList == null) {
      requestList=new LinkedList<WeakReference<Future<?>>>();
      requestMap.put(context,requestList);
    }
    requestList.add(new WeakReference<Future<?>>(request));
  }
  return new RequestHandle(request);
}

private void registerNewClient(JsonObject jData){
  Client newClient=gson.fromJson(jData,Client.class);
  if (newClient.isValid()) {
    addClient(newClient);
    broadcastNewClient(newClient);
    sendClientList(newClient);
  }
 else {
    logger.log(Level.WARNING,"Could not unpack received data into a Client.");
  }
}

@Override public void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (in == null) {
    throw new IllegalArgumentException("Input stream cannot be 'null'");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException("Base URI cannot be 'null'");
  }
  InputSource inputSource=new InputSource(new BOMInputStream(in,false));
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}

public static Date parseDate(String dateValue,Collection dateFormats) throws DateParseException {
  if (dateValue == null) {
    throw new IllegalArgumentException("dateValue is null");
  }
  if (dateFormats == null) {
    dateFormats=DEFAULT_PATTERNS;
  }
  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {
    dateValue=dateValue.substring(1,dateValue.length() - 1);
  }
  SimpleDateFormat dateParser=null;
  final Iterator formatIter=dateFormats.iterator();
  while (formatIter.hasNext()) {
    final String format=(String)formatIter.next();
    if (dateParser == null) {
      dateParser=new SimpleDateFormat(format,Locale.US);
      dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));
    }
 else {
      dateParser.applyPattern(format);
    }
    try {
      return dateParser.parse(dateValue);
    }
 catch (    final ParseException pe) {
    }
  }
  throw new DateParseException("Unable to parse the date " + dateValue);
}

public JSONObject remove(String name){
  if (name == null) {
    throw new NullPointerException("name is null");
  }
  int index=indexOf(name);
  if (index != -1) {
    table.remove(index);
    names.remove(index);
    values.remove(index);
  }
  return this;
}

EdgeMap<Block> findLoops(Deque<Block> code,Map<Block,Block> idom,SetMap<Block,Edge> pred){
  EdgeMap<Block> loops=new EdgeMap<Block>();
  for (  Block b : code)   for (  Edge s : b.succ())   if (isLoop(s,idom)) {
    verboseStatus("backedge " + s);
    Block h=s.to;
    Set<Block> loop=loops.get(h);
    Set<Block> work=new TreeSet<Block>();
    for (    Edge p : pred.get(h)) {
      if (isLoop(p,idom) && !loop.contains(p.from) && p.from != h) {
        loop.add(p.from);
        work.add(p.from);
      }
    }
    while (!work.isEmpty()) {
      Block x=getBlock(work);
      for (      Edge p : pred.get(x)) {
        if (p.from != h && !loop.contains(p.from)) {
          loop.add(p.from);
          work.add(p.from);
        }
      }
    }
  }
  return loops;
}

public int[] readLine(){
  int record[]=new int[MAX_LEN];
  int checksum=0;
  try {
    while (((charIn=buffIn.read()) == 0xd) || (charIn == 0xa)) {
    }
    if (charIn != ':') {
      if (log.isDebugEnabled()) {
        log.debug("HexFile.readLine no colon at start of line " + lineNo);
      }
      return new int[]{-1};
    }
  }
 catch (  IOException e) {
    JOptionPane.showMessageDialog(this,"I/O Error reading hex file!","Hex File",JOptionPane.ERROR_MESSAGE);
    if (log.isDebugEnabled()) {
      log.debug("I/O Error reading hex file!" + e.toString());
    }
  }
  record[LEN]=rdHexByte();
  checksum+=record[LEN];
  record[ADDRH]=rdHexByte();
  checksum+=record[ADDRH];
  record[ADDRL]=rdHexByte();
  checksum+=record[ADDRL];
  record[TYPE]=rdHexByte();
  checksum+=record[TYPE];
  address=(address & 0xffff0000) + record[ADDRH] * 256 + record[ADDRL];
  type=record[TYPE];
  if (type != END) {
    len=record[LEN];
    for (int i=1; i <= len; i++) {
      record[TYPE + i]=rdHexByte();
      checksum+=record[TYPE + i];
    }
  }
  int fileCheck=rdHexByte();
  if (((checksum + fileCheck) & 0xff) != 0) {
    log.error("HexFile.readLine bad checksum at line " + lineNo);
  }
  lineNo++;
  return record;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

private void generateHiveTestFiles() throws FileNotFoundException {
  try (PrintWriter writerA=new PrintWriter(new File(testWorkDir,"data-a"));PrintWriter writerB=new PrintWriter(new File(testWorkDir,"data-b"))){
    char sep='\t';
    int idB=0;
    int idA=0;
    int v=1000;
    for (int i=0; i < 1000; i++) {
      writerA.print(idA++);
      writerA.print(sep);
      writerA.println(idB);
      writerB.print(idB++);
      writerB.print(sep);
      writerB.println(v+=2);
      writerB.print(idB++);
      writerB.print(sep);
      writerB.println(v+=2);
    }
    writerA.flush();
    writerB.flush();
  }
 }

public void renameEditorPanel(Editor panel){
  if (panelsList.size() == 0) {
    return;
  }
  for (int i=0; i < panelsList.size(); i++) {
    Object o=panelsList.get(i);
    if (o == panel) {
      JCheckBoxMenuItem r=(JCheckBoxMenuItem)panelsSubMenu.getItem(i);
      r.setText(panel.getTitle());
      return;
    }
  }
}

private boolean fitsAsSingleLine(int col){
  return (col + singleLineWidth() <= PcalTLAGen.wrapColumn) || (bodyFormulas.sf == null && (prcdFormulas == null || prcdFormulas.size() == 0));
}

@Override protected void before() throws Throwable {
  previousThreads=Thread.getAllStackTraces();
}

public void sphericalToWorld(Vector3 vec){
  if (pjUnprojected == null) {
    String projStr="+proj=longlat +a=" + projInfo.getSemiMajorAxis() + " +b="+ projInfo.getSemiMinorAxis()+ " +no_defs";
    pjUnprojected=Proj4.newInstance(projStr);
  }
  if (pjProjected == null) {
    pjProjected=Proj4.newInstance(proj4String);
  }
  try {
    vec.toArray(coord);
    coord[0]=Math.toRadians(coord[0]);
    coord[1]=Math.toRadians(coord[1]);
    pjUnprojected.transform(pjProjected,coord);
    vec.setX(coord[0]);
    vec.setY(coord[1]);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

public String replace(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException("target == null");
  }
  if (replacement == null) {
    throw new NullPointerException("replacement == null");
  }
  String targetString=target.toString();
  int matchStart=indexOf(targetString,0);
  if (matchStart == -1) {
    return this;
  }
  String replacementString=replacement.toString();
  int targetLength=targetString.length();
  if (targetLength == 0) {
    int resultLength=count + (count + 1) * replacementString.length();
    StringBuilder result=new StringBuilder(resultLength);
    result.append(replacementString);
    int end=offset + count;
    for (int i=offset; i != end; ++i) {
      result.append(value[i]);
      result.append(replacementString);
    }
    return result.toString();
  }
  StringBuilder result=new StringBuilder(count);
  int searchStart=0;
  do {
    result.append(value,offset + searchStart,matchStart - searchStart);
    result.append(replacementString);
    searchStart=matchStart + targetLength;
  }
 while ((matchStart=indexOf(targetString,searchStart)) != -1);
  result.append(value,offset + searchStart,count - searchStart);
  return result.toString();
}

public static String encodeUrl(final String str){
  return encode(str,"%20");
}

public void drawRenderedImage(RenderedImage img,AffineTransform xform){
  if (img == null) {
    return;
  }
  mPrintMetrics.drawImage(this,img);
  mDrawingArea.addInfinite();
}

private long buildSize(int durationInSeconds,LinkInfo linfo){
  long result=-1;
  double bitRateSum=0;
switch (linfo.fmt) {
case 5:
    bitRateSum=0.25 + 64d / 1024d;
  break;
case 6:
bitRateSum=0.8 + 64d / 1024d;
break;
case 17:
bitRateSum=0.05 + 24d / 1024d;
break;
case 18:
bitRateSum=0.5 + 96d / 1024d;
break;
case 22:
bitRateSum=2.9 + 192d / 1024d;
break;
case 34:
bitRateSum=0.5 + 128d / 1024d;
break;
case 35:
bitRateSum=1 + 128d / 1024d;
break;
case 36:
bitRateSum=0.17 + 38d / 1024d;
break;
case 37:
bitRateSum=5.9 + 192d / 1024d;
break;
case 38:
bitRateSum=5 + 192d / 1024d;
break;
case 43:
bitRateSum=0.5 + 128d / 1024d;
break;
case 44:
bitRateSum=1 + 128d / 1024d;
break;
case 45:
bitRateSum=2 + 192d / 1024d;
break;
case 46:
bitRateSum=3 + 192d / 1024d;
break;
case 82:
bitRateSum=0.5 + 96d / 1024d;
break;
case 83:
bitRateSum=0.5 + 96d / 1024d;
break;
case 84:
bitRateSum=2.9 + 152d / 1024d;
break;
case 85:
bitRateSum=2.9 + 152d / 1024d;
break;
case 100:
bitRateSum=0.5 + 128d / 1024d;
break;
case 101:
bitRateSum=1 + 192d / 1024d;
break;
case 102:
bitRateSum=2 + 192d / 1024d;
break;
case 133:
bitRateSum=0.3 + 256d / 1024d;
break;
case 134:
bitRateSum=0.4 + 256d / 1024d;
break;
case 135:
bitRateSum=1 + 256d / 1024d;
break;
case 136:
bitRateSum=1.5 + 256d / 1024d;
break;
case 137:
bitRateSum=2.9 + 256d / 1024d;
break;
case 139:
bitRateSum=48d / 1024d;
break;
case 140:
bitRateSum=128d / 1024d;
break;
case 141:
bitRateSum=256d / 1024d;
break;
}
bitRateSum=bitRateSum * 1024 * 1024;
result=(long)(Math.ceil((bitRateSum * durationInSeconds) / 8));
return result;
}

private void skipToEndOfLine(){
  for (; pos < in.length(); pos++) {
    char c=in.charAt(pos);
    if (c == '\r' || c == '\n') {
      pos++;
      break;
    }
  }
}

public IndependenceTest indTestSubset(List vars){
  return null;
}

@Override public void actOn(File f){
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(f));
    announceSeedsFromReader(reader);
  }
 catch (  FileNotFoundException fnf) {
    logger.log(Level.SEVERE,"seed file source not found",fnf);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}

public static String formatMillis(int millis){
  String result="";
  int hr=millis / 3600000;
  millis%=3600000;
  int min=millis / 60000;
  millis%=60000;
  int sec=millis / 1000;
  if (hr > 0) {
    result+=hr + ":";
  }
  if (min >= 0) {
    if (min > 9) {
      result+=min + ":";
    }
 else {
      result+="0" + min + ":";
    }
  }
  if (sec > 9) {
    result+=sec;
  }
 else {
    result+="0" + sec;
  }
  return result;
}

public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){
  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);
}

public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException("Containing directory is null:");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException("Directory already exists:" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}

public ResourcesPoet addTypedArray(String name,@NotNull List<String> values){
  Element element=document.createElement("array");
  element.setAttribute("name",name);
  for (  String value : values) {
    Element valueElement=document.createElement("item");
    valueElement.appendChild(document.createTextNode(value));
    element.appendChild(valueElement);
  }
  resourceElement.appendChild(element);
  return this;
}

public boolean addSubAction(final ConfAction actionConf) throws GeneralException, ConfigurationException {
  if (actionConf.getType() != null) {
    final SubAction sub=SubAction.factory(actionConf.getType(),actionConf);
    if (sub == null) {
      if (Cfg.DEBUG) {
        Check.log(TAG + " Error (addSubAction): unknown type: " + actionConf.getType());
      }
      return false;
    }
    list.add(sub);
    if (sub instanceof SubActionSlow) {
      setQueue(MAIN_QUEUE);
    }
    return true;
  }
 else {
    if (Cfg.DEBUG) {
      Check.log(TAG + " Error (addSubAction): null type ");
    }
    return false;
  }
}

void fillEntryTree(Set<PageLeafEntry> entries,Row row){
  int ptr=_rowHead;
  byte[] buffer=_buffer;
  while (ptr < BLOCK_SIZE) {
    int code=buffer[ptr] & CODE_MASK;
    int len=getLength(code,row);
    if (code == INSERT || code == REMOVE) {
      PageLeafEntry entry=new PageLeafEntry(this,row,ptr,len,code);
      entries.add(entry);
    }
    ptr+=len;
  }
}

public static <S>boolean containsAtleastOne(Collection<S> left,Collection<S> right){
  if (left == null || right == null) {
    return false;
  }
  for (  S id : left) {
    if (right.contains(id)) {
      return true;
    }
  }
  return false;
}

private boolean processKeyUp(int keyCode){
  if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) {
    dismiss();
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_TAB) {
    if (mInKbMode) {
      if (isTypedTimeFullyLegal()) {
        finishKbMode(true);
      }
      return true;
    }
  }
 else   if (keyCode == KeyEvent.KEYCODE_ENTER) {
    if (mInKbMode) {
      if (!isTypedTimeFullyLegal()) {
        return true;
      }
      finishKbMode(false);
    }
    if (mCallback != null) {
      mCallback.onTimeSet(mTimePicker,mTimePicker.getHours(),mTimePicker.getMinutes());
    }
    dismiss();
    return true;
  }
 else   if (keyCode == KeyEvent.KEYCODE_DEL) {
    if (mInKbMode) {
      if (!mTypedTimes.isEmpty()) {
        int deleted=deleteLastTypedKey();
        String deletedKeyStr;
        if (deleted == getAmOrPmKeyCode(AM)) {
          deletedKeyStr=mAmText;
        }
 else         if (deleted == getAmOrPmKeyCode(PM)) {
          deletedKeyStr=mPmText;
        }
 else {
          deletedKeyStr=String.format("%d",getValFromKeyCode(deleted));
        }
        Utils.tryAccessibilityAnnounce(mTimePicker,String.format(mDeletedKeyFormat,deletedKeyStr));
        updateDisplay(true);
      }
    }
  }
 else   if (keyCode == KeyEvent.KEYCODE_0 || keyCode == KeyEvent.KEYCODE_1 || keyCode == KeyEvent.KEYCODE_2 || keyCode == KeyEvent.KEYCODE_3 || keyCode == KeyEvent.KEYCODE_4 || keyCode == KeyEvent.KEYCODE_5 || keyCode == KeyEvent.KEYCODE_6 || keyCode == KeyEvent.KEYCODE_7 || keyCode == KeyEvent.KEYCODE_8 || keyCode == KeyEvent.KEYCODE_9 || (!mIs24HourMode && (keyCode == getAmOrPmKeyCode(AM) || keyCode == getAmOrPmKeyCode(PM)))) {
    if (!mInKbMode) {
      if (mTimePicker == null) {
        Log.e(TAG,"Unable to initiate keyboard mode, TimePicker was null.");
        return true;
      }
      mTypedTimes.clear();
      tryStartingKbMode(keyCode);
      return true;
    }
    if (addKeyIfLegal(keyCode)) {
      updateDisplay(false);
    }
    return true;
  }
  return false;
}

public void assertDurationIsInRange(long expectedMillis){
  long minimum=(long)((double)expectedMillis * 0.90);
  long maximum=Math.max((long)((double)expectedMillis * 1.10),10);
  long waitMillis=Math.max(expectedMillis * 10,10);
  long duration=getDurationMillis(waitMillis);
  if (duration < minimum) {
    Assert.fail("expected duration: " + expectedMillis + " minimum duration: "+ minimum+ " actual duration too short: "+ duration);
  }
 else   if (duration > maximum) {
    Assert.fail("expected duration: " + expectedMillis + " maximum duration: "+ maximum+ " actual duration too long: "+ duration);
  }
}

public void logDiff(String id,String field,String db,String hw){
  StringBuffer diffBuffer=new StringBuffer(String.format("Controller database object ID [%s], field [%s]: ",id,field));
  if (db == null || db.isEmpty() || db.equalsIgnoreCase(NO_MATCHING_ENTRY)) {
    diffBuffer.append(String.format("The hardware reported entry [%s], whereas the controller is not managing or does not have a reference to the same resource\n",hw));
  }
 else   if (hw == null || hw.isEmpty() || hw.equalsIgnoreCase(NO_MATCHING_ENTRY)) {
    diffBuffer.append(String.format("The controller is managing resource [%s], whereas the hardware did not report that resource\n",db));
  }
 else {
    diffBuffer.append(String.format("The controller references resource: [%s], whereas the hardware reported the actual resource as: [%s]\n",db != null ? db : "null",hw != null ? hw : "null"));
  }
  msgs.append(diffBuffer.toString() + "\n");
  if (log != null) {
    log.info(diffBuffer.toString());
  }
}

public FieldFrameBodyIMG(Lyrics3Image image){
  images.add(image);
}

public AbstractResource(String mimetype){
  this(mimetype,System.currentTimeMillis());
}

private Parameters(){
  for (Iterator i=arguments.iterator(); i.hasNext(); ) {
    String arg=(String)i.next();
    arg=arg.toLowerCase();
    if (!arg.startsWith("-"))     throw new IllegalArgumentException("Command-line argument does not start with '-': " + arg);
    int colonIndex=arg.indexOf(":");
    String key;
    String value;
    if (colonIndex >= 0) {
      key=arg.substring(1,colonIndex);
      value=arg.substring(colonIndex + 1);
    }
 else {
      key=arg.substring(1);
      value="";
    }
    if (!allowedKeys.contains(key))     throw new IllegalArgumentException("Unrecognized command-line argument: " + arg.substring(1) + ". Valid arguments are: "+ StringUtil.toCommaDelimitedString(allowedKeys));
    hashtable.put(key,value);
  }
  for (Iterator i=requiredKeys.iterator(); i.hasNext(); ) {
    String requiredKey=(String)i.next();
    if (!hashtable.containsKey(requiredKey))     throw new IllegalArgumentException("Required command-line argument is missing: " + requiredKey);
  }
}

public List<TLV> initRespondSmp(String question,String secret,boolean initiating) throws OtrException {
  if (question != null && !initiating)   throw new IllegalArgumentException("Only supply a question if initiating");
  byte[] our_fp=Hex.decode(keyManager.getLocalFingerprint(sessionID));
  String remoteFingerprint=keyManager.getRemoteFingerprint(sessionID);
  if (remoteFingerprint == null)   throw new OtrException("no fingerprint for remote user");
  byte[] their_fp=Hex.decode(remoteFingerprint);
  byte[] sessionId;
  try {
    sessionId=computeSessionId(session.getS());
  }
 catch (  SMException ex) {
    throw new OtrException(ex);
  }
  byte[] bytes=secret.getBytes(SerializationUtils.UTF8);
  int combined_buf_len=41 + sessionId.length + bytes.length;
  byte[] combined_buf=new byte[combined_buf_len];
  combined_buf[0]=1;
  if (initiating) {
    System.arraycopy(our_fp,0,combined_buf,1,20);
    System.arraycopy(their_fp,0,combined_buf,21,20);
  }
 else {
    System.arraycopy(their_fp,0,combined_buf,1,20);
    System.arraycopy(our_fp,0,combined_buf,21,20);
  }
  System.arraycopy(sessionId,0,combined_buf,41,sessionId.length);
  System.arraycopy(bytes,0,combined_buf,41 + sessionId.length,bytes.length);
  MessageDigest sha256;
  try {
    sha256=MessageDigest.getInstance("SHA-256");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new OtrException(ex);
  }
  byte[] combined_secret=sha256.digest(combined_buf);
  byte[] smpmsg;
  try {
    if (initiating) {
      smpmsg=SM.step1(smstate,combined_secret);
    }
 else {
      smpmsg=SM.step2b(smstate,combined_secret);
    }
  }
 catch (  SMException ex) {
    throw new OtrException(ex);
  }
  if (question != null) {
    bytes=question.getBytes(SerializationUtils.UTF8);
    byte[] qsmpmsg=new byte[bytes.length + 1 + smpmsg.length];
    System.arraycopy(bytes,0,qsmpmsg,0,bytes.length);
    System.arraycopy(smpmsg,0,qsmpmsg,bytes.length + 1,smpmsg.length);
    smpmsg=qsmpmsg;
  }
  TLV sendtlv=new TLV(initiating ? (question != null ? TLV.SMP1Q : TLV.SMP1) : TLV.SMP2,smpmsg);
  smstate.nextExpected=initiating ? SM.EXPECT2 : SM.EXPECT3;
  return makeTlvList(sendtlv);
}

private double melToLinFreq(double inputFreq){
  return (700.0 * (Math.pow(10.0,(inputFreq / 2595.0)) - 1.0));
}

public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}

public static byte[] randomBytes(int size){
  byte[] bytes=new byte[size];
  seededRandom.nextBytes(bytes);
  return bytes;
}

@Override public String toString(){
  StringBuffer BfString=new StringBuffer();
  BfString.append("\tAttribute ranking.\n");
  if (m_starting != null) {
    BfString.append("\tIgnored attributes: ");
    BfString.append(startSetToString());
    BfString.append("\n");
  }
  if (m_threshold != -Double.MAX_VALUE) {
    BfString.append("\tThreshold for discarding attributes: " + Utils.doubleToString(m_threshold,8,4) + "\n");
  }
  return BfString.toString();
}

protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}

public boolean expired(){
  return System.currentTimeMillis() - time > DFLT_EXPIRATION_TIMEOUT;
}

public JSONObject put(String key,boolean value) throws JSONException {
  put(key,value ? Boolean.TRUE : Boolean.FALSE);
  return this;
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

private void handleSelection(View view,Item item,int position){
  if (!item.isSelectable()) {
    return;
  }
  if (item.isSelected() && !mAllowDeselection) {
    return;
  }
  boolean selected=false;
  if (mPositionBasedStateManagement) {
    selected=mSelections.contains(position);
  }
 else {
    selected=item.isSelected();
  }
  if (mSelectWithItemUpdate || view == null) {
    if (!mMultiSelect) {
      deselect();
    }
    if (selected) {
      deselect(position);
    }
 else {
      select(position);
    }
  }
 else {
    if (!mMultiSelect) {
      if (mPositionBasedStateManagement) {
        Iterator<Integer> entries=mSelections.iterator();
        while (entries.hasNext()) {
          Integer pos=entries.next();
          if (pos != position) {
            deselect(pos,entries);
          }
        }
      }
 else {
        Set<Integer> selections=getSelections();
        for (        int pos : selections) {
          if (pos != position) {
            deselect(pos);
          }
        }
      }
    }
    item.withSetSelected(!selected);
    view.setSelected(!selected);
    if (mSelectionListener != null)     mSelectionListener.onSelectionChanged(item,!selected);
    if (mPositionBasedStateManagement) {
      if (selected) {
        if (mSelections.contains(position)) {
          mSelections.remove(position);
        }
      }
 else {
        mSelections.add(position);
      }
    }
  }
}

public boolean canInvoke(MDepreciationWorkfile assetwk,MAssetAcct assetAcct,int A_Current_Period,BigDecimal Accum_Dep){
  if (assetwk == null) {
    log.warning("@NotFound@ @A_Depreciation_Workfile_ID@");
    return false;
  }
  int offset=0;
  int lifePeriods=assetwk.getUseLifeMonths(assetwk.isFiscal());
  boolean ok=(offset <= A_Current_Period);
  if (CLogMgt.isLevelFinest())   log.finest("A_Current_Period=" + A_Current_Period + ", lifePeriods="+ lifePeriods+ " (offset="+ offset+ ") ==> OK="+ ok);
  return ok;
}

public boolean writeHeader(OutputStream os){
  try {
    writeInt(os,CACHE_MAGIC);
    writeString(os,key);
    writeString(os,etag == null ? "" : etag);
    writeLong(os,serverDate);
    writeLong(os,lastModified);
    writeLong(os,ttl);
    writeLong(os,softTtl);
    writeStringStringMap(responseHeaders,os);
    os.flush();
    return true;
  }
 catch (  IOException e) {
    VolleyLog.d("%s",e.toString());
    return false;
  }
}

public byte[] bytes() throws HttpRequestException {
  final ByteArrayOutputStream output=byteStream();
  try {
    copy(buffer(),output);
  }
 catch (  IOException e) {
    throw new HttpRequestException(e);
  }
  return output.toByteArray();
}

public void fadeOutAllLayers(){
  mTransitionState=TRANSITION_STARTING;
  Arrays.fill(mIsLayerOn,false);
  invalidateSelf();
}

public TreeMap<Float,List<List<Integer>>> packModifiedFirstFitDescending(){
  throw new UnsupportedOperationException("Not implemented yet!");
}

public void addTextChangeListener(final FilterQueryChangeListener textChangeListener){
  listeners.add(textChangeListener);
}

@Override public Iterator<Profile> iterator(){
  return profiles.iterator();
}

private boolean startsWithSpace(String str){
  return str.length() != 0 && str.charAt(0) == ' ';
}

public String wrap(String path){
  return uriPrefix + path;
}

private int keyToLevel(String key){
  String[] token=key.split("/");
  return (token.length - 1);
}

public boolean mouseDragged(MouseEvent e){
  if (grabbed_plot_graphics_) {
    int x=e.getX();
    int y=e.getY();
    int dx=x - prevX;
    int dy=y - prevY;
    plotX+=dx;
    plotY+=dy;
    prevX=x;
    prevY=y;
    graph.resize(plotX,plotY,plotWidth,plotHeight);
    OMGraphicList plotGraphics=graph.getPlotGraphics();
    plotGraphics.generate(getProjection(),true);
    repaint();
  }
  return false;
}

private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){
  log.debug("Registering Caching HTTP Headers Filter");
  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties));
  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*");
  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*");
  cachingHttpHeadersFilter.setAsyncSupported(true);
}

protected void addCommonComponent(XMLComponent component){
  if (fCommonComponents.contains(component)) {
    return;
  }
  fCommonComponents.add(component);
  addRecognizedParamsAndSetDefaults(component);
}

SNode awaitFulfill(SNode s,boolean timed,long nanos){
  final long deadline=timed ? System.nanoTime() + nanos : 0L;
  Thread w=Thread.currentThread();
  int spins=(shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);
  for (; ; ) {
    if (w.isInterrupted())     s.tryCancel();
    SNode m=s.match;
    if (m != null)     return m;
    if (timed) {
      nanos=deadline - System.nanoTime();
      if (nanos <= 0L) {
        s.tryCancel();
        continue;
      }
    }
    if (spins > 0)     spins=shouldSpin(s) ? (spins - 1) : 0;
 else     if (s.waiter == null)     s.waiter=w;
 else     if (!timed)     LockSupport.park(this);
 else     if (nanos > spinForTimeoutThreshold)     LockSupport.parkNanos(this,nanos);
  }
}

public void load(GeneralSubtrees generalSubtrees){
  List<GeneralSubtree> generalSubtreesList=generalSubtrees.getGeneralSubtrees();
  Collections.sort(generalSubtreesList,new GeneralSubtreeBaseComparator());
  data=new Object[generalSubtreesList.size()][3];
  int i=0;
  for (  GeneralSubtree generalSubtree : generalSubtreesList) {
    data[i][0]=generalSubtree;
    data[i][1]=generalSubtree;
    data[i][2]=generalSubtree;
    i++;
  }
  fireTableDataChanged();
}

@Override public synchronized int read(){
  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;
}

public boolean isPingDisabled(){
  return (null != healthcheck && !healthcheck.exists());
}

public static void writeToFile(File file,String contents) throws IOException {
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(contents.getBytes());
  fos.close();
}

public void makeTreeOfWritables(Iterable<Pair<String,Integer>> flatData){
  Text key=new Text();
  for (  Pair<String,Integer> pair : flatData) {
    key.set(pair.key);
    ArrayList<IntWritable> valList;
    if (!mockInput.containsKey(key)) {
      valList=new ArrayList<>();
      mockInput.put(key,valList);
      key=new Text();
    }
 else     valList=(ArrayList<IntWritable>)mockInput.get(key);
    valList.add(new IntWritable(pair.value()));
  }
}

public static double angle(Coordinate p0,Coordinate p1){
  double dx=p1.x - p0.x;
  double dy=p1.y - p0.y;
  return Math.atan2(dy,dx);
}

public InMemoryCursor(String[] columnNames){
  mCurrentPosition=-1;
  mColumnNames=columnNames;
}

@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (slider != null) {
      return slider.isEnabled();
    }
  }
  return false;
}

private void renderForeground(final ExecutionUnit process,final Graphics2D g2,boolean printing){
  if (drawHighlight && !printing && (model.isDragStarted() || model.isDropTargetSet() && model.isImportDragged()) || model.isOperatorSourceHovered()) {
switch (RapidMinerGUI.getDragHighlighteMode()) {
case FULL:
case BORDER:
      drawDragBorder(process,g2);
    break;
case NONE:
default :
  break;
}
}
}

public ModbusTransaction createTransaction(){
  ModbusSerialTransaction transaction=new ModbusSerialTransaction();
  transaction.setTransport(this);
  return transaction;
}

public void start(){
  if (runner == null) {
    runner=new Thread(this,"Runner");
    runner.start();
  }
}

public synchronized int exportObject(String name,Object obj) throws CannotCompileException {
  Class clazz=obj.getClass();
  ExportedObject eo=new ExportedObject();
  eo.object=obj;
  eo.methods=clazz.getMethods();
  exportedObjects.addElement(eo);
  eo.identifier=exportedObjects.size() - 1;
  if (name != null)   exportedNames.put(name,eo);
  try {
    stubGen.makeProxyClass(clazz);
  }
 catch (  NotFoundException e) {
    throw new CannotCompileException(e);
  }
  return eo.identifier;
}

protected final File createDBFFDCDirectory(){
  File dbffdcDir=new File(ffdcDirectoryName);
  if (!dbffdcDir.exists()) {
    final boolean isDBFFDcDirCreated=dbffdcDir.mkdirs();
    if (isDBFFDcDirCreated) {
      dbffdcDir=new File(ffdcDirectoryName);
      return dbffdcDir;
    }
  }
 else   if (!dbffdcDir.isDirectory()) {
    return null;
  }
  return dbffdcDir;
}

public static String readCharacterSizedString(InputStream stream) throws IOException {
  StringBuilder result=new StringBuilder();
  int strLen=readUINT16(stream);
  int character=stream.read();
  character|=stream.read() << 8;
  do {
    if (character != 0) {
      result.append((char)character);
      character=stream.read();
      character|=stream.read() << 8;
    }
  }
 while (character != 0 || (result.length() + 1) > strLen);
  if (strLen != (result.length() + 1)) {
    throw new IllegalStateException("Invalid Data for current interpretation");
  }
  return result.toString();
}

protected void processChildren(QueryNode queryTree) throws QueryNodeException {
  List<QueryNode> children=queryTree.getChildren();
  ChildrenList newChildren;
  if (children != null && children.size() > 0) {
    newChildren=allocateChildrenList();
    try {
      for (      QueryNode child : children) {
        child=processIteration(child);
        if (child == null) {
          throw new NullPointerException();
        }
        newChildren.add(child);
      }
      List<QueryNode> orderedChildrenList=setChildrenOrder(newChildren);
      queryTree.set(orderedChildrenList);
    }
  finally {
      newChildren.beingUsed=false;
    }
  }
}

private void initializeMessages(List<String> messages){
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getGeneralMessages()));
  if (OSUtils.isWindows()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getWindowsMessages()));
  }
 else   if (OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getMacOSXMessages()));
  }
 else   if (OSUtils.isLinux()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getLinuxMessages()));
  }
 else {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getOtherMessages()));
  }
  if (!OSUtils.isMacOSX()) {
    messages.addAll(Arrays.asList(TipOfTheDayMessages.getNonMacOSXMessages()));
  }
  messages.addAll(Arrays.asList(TipOfTheDayMessages.getFrostWireMessages()));
  Collections.shuffle(messages);
  _currentTip=-1;
}

public PersistedQueue(final File queueEnvPath,final String queueName,final int cacheSize){
  queueEnvPath.mkdirs();
  final EnvironmentConfig dbEnvConfig=new EnvironmentConfig();
  dbEnvConfig.setTransactional(false);
  dbEnvConfig.setAllowCreate(true);
  this.dbEnv=new Environment(queueEnvPath,dbEnvConfig);
  DatabaseConfig dbConfig=new DatabaseConfig();
  dbConfig.setTransactional(false);
  dbConfig.setAllowCreate(true);
  dbConfig.setDeferredWrite(true);
  this.queueDatabase=dbEnv.openDatabase(null,queueName,dbConfig);
  this.queueName=queueName;
  this.cacheSize=cacheSize;
  this.opsCounter=0;
}

protected final StringBuilder write(StringBuilder sb,final Object... objects){
  for (  Object string : objects)   sb.append(string);
  return sb;
}

@Override public boolean connectionAllowed(EventSetDescriptor esd){
  return connectionAllowed(esd.getName());
}

public static Request newPostOpenGraphActionRequest(Session session,OpenGraphAction openGraphAction,Callback callback){
  if (openGraphAction == null) {
    throw new FacebookException("openGraphAction cannot be null");
  }
  if (Utility.isNullOrEmpty(openGraphAction.getType())) {
    throw new FacebookException("openGraphAction must have non-null 'type' property");
  }
  String path=String.format(MY_ACTION_FORMAT,openGraphAction.getType());
  return newPostRequest(session,path,openGraphAction,callback);
}

public void showLoading(){
  switchState(LOADING,null,null,null,null,null,Collections.<Integer>emptyList());
}

public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  int vocabSize=in.readInt();
  for (int i=0; i < vocabSize; i++) {
    String line=in.readUTF();
    Vocabulary.id(line);
  }
  numTokens=in.readDouble();
  countFuncs=new long[in.readInt()][2];
  for (int i=0; i < countFuncs.length; i++) {
    countFuncs[i][0]=in.readLong();
    countFuncs[i][1]=in.readLong();
  }
  typesFuncs=new long[in.readInt()][2];
  for (int i=0; i < typesFuncs.length; i++) {
    typesFuncs[i][0]=in.readLong();
    typesFuncs[i][1]=in.readLong();
  }
  quantizationBase=in.readDouble();
  bf=new BloomFilter();
  bf.readExternal(in);
}

public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  if (mad == Double.POSITIVE_INFINITY) {
    double max=0.;
    for (    double xi : x) {
      if (xi < Double.POSITIVE_INFINITY && xi > max) {
        max=xi;
      }
    }
    if (max < Double.POSITIVE_INFINITY) {
      mad=max;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public SdpException(Throwable rootCause){
  super(rootCause.getLocalizedMessage());
}

private boolean linkFirst(Node<E> node){
  if (count >= capacity)   return false;
  Node<E> f=first;
  node.next=f;
  first=node;
  if (last == null)   last=node;
 else   f.prev=node;
  ++count;
  notEmpty.signal();
  return true;
}

protected void notifyPropertyChangeListener(String property,Object oldValue,Object newValue){
  Set<PropertyChangeListener> v;
synchronized (this) {
    v=new HashSet<>(listeners);
  }
  for (  PropertyChangeListener listener : v) {
    listener.propertyChange(new PropertyChangeEvent(this,property,oldValue,newValue));
  }
}

public boolean indicateDirtyRead(ITemplateHolder template){
  return ((template.isReadOperation() && _useDirtyRead) || template.isDirtyReadRequested());
}

public JValueSlider(String title,int min,int max,int value){
  this(title,new Integer(min),new Integer(max),new Integer(value));
  m_smin=min;
  m_srange=max - min;
  m_slider.setMinimum(min);
  m_slider.setMaximum(max);
  setValue(new Integer(value));
}

protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){
  Double value=graphicAttributes.getInteriorOpacity();
  if (value != null) {
    symbolAttributes.setOpacity(value);
  }
  value=graphicAttributes.getScale();
  if (value != null) {
    symbolAttributes.setScale(value);
  }
  Material material=graphicAttributes.getInteriorMaterial();
  symbolAttributes.setInteriorMaterial(material);
  Font font=graphicAttributes.getTextModifierFont();
  if (font != null) {
    symbolAttributes.setTextModifierFont(font);
  }
  material=graphicAttributes.getTextModifierMaterial();
  if (material != null) {
    symbolAttributes.setTextModifierMaterial(material);
  }
}

public final void increaseIdleCount(IdleStatus status,long currentTime){
  if (status == IdleStatus.BOTH_IDLE) {
    idleCountForBoth.incrementAndGet();
    lastIdleTimeForBoth=currentTime;
  }
 else   if (status == IdleStatus.READER_IDLE) {
    idleCountForRead.incrementAndGet();
    lastIdleTimeForRead=currentTime;
  }
 else   if (status == IdleStatus.WRITER_IDLE) {
    idleCountForWrite.incrementAndGet();
    lastIdleTimeForWrite=currentTime;
  }
 else {
    throw new IllegalArgumentException("Unknown idle status: " + status);
  }
}

public RemoteServiceDescriptor(String baseUrl,HttpJsonRequestFactory requestFactory) throws IllegalArgumentException {
  this.baseUrl=baseUrl;
  this.requestFactory=requestFactory;
  try {
    final URL baseUrlURL=new URL(baseUrl);
    final String protocol=baseUrlURL.getProtocol();
    if (!(protocol.equals("http") || protocol.equals("https"))) {
      throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));
    }
  }
 catch (  MalformedURLException e) {
    throw new IllegalArgumentException(String.format("Invalid URL: %s",baseUrl));
  }
}

private Journal readJournal(ParcelFileDescriptor oldState){
  Journal journal=new Journal();
  if (oldState == null) {
    return journal;
  }
  FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());
  try {
    int availableBytes=inStream.available();
    if (DEBUG)     Log.d(TAG,"available " + availableBytes);
    if (availableBytes < MAX_JOURNAL_SIZE) {
      byte[] buffer=new byte[availableBytes];
      int bytesRead=0;
      boolean valid=false;
      InvalidProtocolBufferNanoException lastProtoException=null;
      while (availableBytes > 0) {
        try {
          int result=inStream.read(buffer,bytesRead,1);
          if (result > 0) {
            availableBytes-=result;
            bytesRead+=result;
          }
 else {
            Log.w(TAG,"unexpected end of file while reading journal.");
            availableBytes=0;
          }
        }
 catch (        IOException e) {
          buffer=null;
          availableBytes=0;
        }
        try {
          MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead));
          valid=true;
          availableBytes=0;
          if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal");
        }
 catch (        InvalidProtocolBufferNanoException e) {
          lastProtoException=e;
          journal.clear();
        }
      }
      if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead);
      if (!valid) {
        Log.w(TAG,"could not find a valid journal",lastProtoException);
      }
    }
  }
 catch (  IOException e) {
    Log.w(TAG,"failed to close the journal",e);
  }
  return journal;
}

public Server start() throws SQLException {
  try {
    started=true;
    service.start();
    String name=service.getName() + " (" + service.getURL()+ ")";
    Thread t=new Thread(this,name);
    t.setDaemon(service.isDaemon());
    t.start();
    for (int i=1; i < 64; i+=i) {
      wait(i);
      if (isRunning(false)) {
        return this;
      }
    }
    if (isRunning(true)) {
      return this;
    }
    throw DbException.get(ErrorCode.EXCEPTION_OPENING_PORT_2,name,"timeout; " + "please check your network configuration, specially the file /etc/hosts");
  }
 catch (  DbException e) {
    throw DbException.toSQLException(e);
  }
}

@Override public boolean isComplete(){
  return true;
}

public ByteMatrix encode(String contents,int width,int height,Map<EncodeHintType,Object> hints) throws WriterException {
  if (contents == null || contents.length() == 0) {
    throw new IllegalArgumentException("Found empty contents");
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException("Requested dimensions are too small: " + width + 'x'+ height);
  }
  ErrorCorrectionLevel errorCorrectionLevel=ErrorCorrectionLevel.L;
  if (hints != null) {
    ErrorCorrectionLevel requestedECLevel=(ErrorCorrectionLevel)hints.get(EncodeHintType.ERROR_CORRECTION);
    if (requestedECLevel != null) {
      errorCorrectionLevel=requestedECLevel;
    }
  }
  QRCode code=new QRCode();
  Encoder.encode(contents,errorCorrectionLevel,hints,code);
  return renderResult(code,width,height);
}

public IntBuffer put(int[] src,int srcOffset,int intCount){
  if (isReadOnly()) {
    throw new ReadOnlyBufferException();
  }
  Arrays.checkOffsetAndCount(src.length,srcOffset,intCount);
  if (intCount > remaining()) {
    throw new BufferOverflowException();
  }
  for (int i=srcOffset; i < srcOffset + intCount; ++i) {
    put(src[i]);
  }
  return this;
}

public Request header(String key,String value){
  Objects.requireNonNull(key);
  Objects.requireNonNull(value);
  _headers.put(key,value);
  return this;
}

public void updateUI(){
  super.updateUI();
  setBackground(new Color(255,255,255,0));
  setWrapStyleWord(true);
  setHighlighter(null);
  setEditable(false);
  LookAndFeel.installBorder(this,"Label.border");
  LookAndFeel.installColorsAndFont(this,"Label.background","Label.foreground","Label.font");
  if (resizeHandler != null) {
    resizeHandler.componentResized(null);
  }
  SizePolicy policy=(SizePolicy)getClientProperty(SizePolicy.class);
  if (policy != null) {
    GUIUtils.restrictSize(this,policy);
  }
}

public static void generateExtensionManager(File rootFolder) throws IOException {
  File outFile=new File(rootFolder,REGISTRY_PATH);
  StringBuilder builder=new StringBuilder();
  builder.append("package org.eclipse.che.ide.client;\n\n");
  generateImports(builder);
  generateClass(builder);
  FileUtils.writeStringToFile(outFile,builder.toString());
}

public synchronized Future<V> submit(Callable<V> task) throws RejectedExecutionException {
  return pool.submit(task);
}

private void checkBucketName(String name) throws InvalidBucketNameException {
  if (name == null) {
    throw new InvalidBucketNameException(NULL_STRING,"null bucket name");
  }
  if (name.length() < 3 || name.length() > 63) {
    String msg="bucket name must be at least 3 and no more than 63 characters long";
    throw new InvalidBucketNameException(name,msg);
  }
  if (name.matches("\\.\\.")) {
    String msg="bucket name cannot contain successive periods. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html";
    throw new InvalidBucketNameException(name,msg);
  }
  if (!name.matches("^[a-z0-9][a-z0-9\\.\\-]+[a-z0-9]$")) {
    String msg="bucket name does not follow Amazon S3 standards. For more information refer " + "http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html";
    throw new InvalidBucketNameException(name,msg);
  }
}

private void validateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request){
  Assert.notNull(request,"A user namespace authorization create request must be specified.");
  validateUserNamespaceAuthorizationKey(request.getUserNamespaceAuthorizationKey());
  validateNamespacePermissions(request.getNamespacePermissions());
}

protected String format(Object o){
  return o.toString();
}

public void calculateDerived(){
  xStats.calculateDerived();
  yStats.calculateDerived();
  differencesStats.calculateDerived();
  correlation=Double.NaN;
  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {
    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);
    if (!Utils.eq(yStats.stdDev,0)) {
      correlation=slope * xStats.stdDev / yStats.stdDev;
    }
 else {
      correlation=1.0;
    }
  }
  if (Utils.gr(differencesStats.stdDev,0)) {
    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;
    if (m_degreesOfFreedom >= 1) {
      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);
    }
 else {
      if (count > 1) {
        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);
      }
 else {
        differencesProbability=1;
      }
    }
  }
 else {
    if (differencesStats.sumSq == 0) {
      differencesProbability=1.0;
    }
 else {
      differencesProbability=0.0;
    }
  }
  differencesSignificance=0;
  if (differencesProbability <= sigLevel) {
    if (xStats.mean > yStats.mean) {
      differencesSignificance=1;
    }
 else {
      differencesSignificance=-1;
    }
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

protected boolean canDeleteConsistencyGroup(final BlockConsistencyGroup consistencyGroup){
  return (!consistencyGroup.getInactive() && !consistencyGroup.created());
}

public static void closeQuietly(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    RuntimeException rethrown) {
      throw rethrown;
    }
catch (    Exception ignored) {
    }
  }
}

public AmqpMessage receiveNoWait() throws Exception {
  checkClosed();
  return prefetch.poll();
}

@Override protected void removeRange(int start,int end){
  if (start < 0) {
    throw new IndexOutOfBoundsException("" + start);
  }
 else   if (end > size) {
    throw new IndexOutOfBoundsException("" + end + " out of: "+ size);
  }
 else   if (start > end) {
    throw new IndexOutOfBoundsException("" + start + " out of: "+ end);
  }
  if (start == end) {
    return;
  }
  if (end == size) {
    Arrays.fill(array,firstIndex + start,firstIndex + size,null);
  }
 else   if (start == 0) {
    Arrays.fill(array,firstIndex,firstIndex + end,null);
    firstIndex+=end;
  }
 else {
    System.arraycopy(array,firstIndex + end,array,firstIndex + start,size - end);
    int lastIndex=firstIndex + size;
    int newLast=lastIndex + start - end;
    Arrays.fill(array,newLast,lastIndex,null);
  }
  size-=end - start;
  modCount++;
}

private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzPushbackPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    final char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  final int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead < 0) {
    return true;
  }
 else {
    zzEndRead+=numRead;
    return false;
  }
}

private void checkDuplicateNamesDuringDelete(List<Integer> ids){
  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);
  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));
  for (  Entity e : myEntities) {
    String rawName=e.getShortNameRaw();
    ArrayList<Integer> namedIds=rawNameToId.get(rawName);
    if (namedIds == null) {
      namedIds=new ArrayList<Integer>();
    }
    namedIds.add(e.getId());
    rawNameToId.put(rawName,namedIds);
  }
  for (  int id : ids) {
    Entity removedEntity=game.getEntity(id);
    if (removedEntity == null) {
      continue;
    }
    String removedRawName=removedEntity.getShortNameRaw();
    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());
    if ((count != null) && (count > 1)) {
      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);
      for (      Integer i : namedIds) {
        Entity e=game.getEntity(i);
        String eRawName=e.getShortNameRaw();
        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {
          e.duplicateMarker--;
          e.generateShortName();
          e.generateDisplayName();
          if (!ids.contains(e.getId())) {
            sendUpdateEntity(e);
          }
        }
      }
      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));
    }
 else     if (count != null) {
      duplicateNameHash.remove(removedEntity.getShortNameRaw());
    }
  }
}

protected void stopBKCluster() throws Exception {
  if (bkc != null) {
    bkc.close();
  }
  for (  BookieServer server : bs) {
    server.shutdown();
    AutoRecoveryMain autoRecovery=autoRecoveryProcesses.get(server);
    if (autoRecovery != null && isAutoRecoveryEnabled()) {
      autoRecovery.shutdown();
      LOG.debug("Shutdown auto recovery for bookieserver:" + server.getLocalAddress());
    }
  }
  bs.clear();
  for (  File f : tmpDirs) {
    FileUtils.deleteDirectory(f);
  }
}

public void or(Criteria criteria){
  oredCriteria.add(criteria);
}

public void releaseSelections(Set<Entity> items){
  for (  Entity item : items) {
    releaseSelection(item);
  }
}

public HubLinkMapping(String fileName,int numberOfHubs,Network network){
  this.numberOfHubs=numberOfHubs;
  if (fileName.contains(".mappingTable.")) {
    readMappingTable(fileName);
    unMappedLinksAtZeroHub=true;
    return;
  }
  handleUnmappedLinksStart();
  try {
    FileReader fr=new FileReader(fileName);
    BufferedReader br=new BufferedReader(fr);
    String line;
    StringTokenizer tokenizer;
    String token;
    int linkId;
    line=br.readLine();
    while (line != null) {
      tokenizer=new StringTokenizer(line);
      for (int i=0; i < this.numberOfHubs; i++) {
        token=tokenizer.nextToken();
        linkId=(int)Double.parseDouble(token);
        linkHubMapping.put(Integer.toString(linkId),i);
      }
      if (tokenizer.hasMoreTokens()) {
        throw new RuntimeException("the number of hubs is wrong");
      }
      line=br.readLine();
    }
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException("Error reading the hub link mapping file");
  }
  linkHubMapping.remove("-1");
  handleUnmappedLinksEnd(network);
}

public boolean deleteLoadName(String load){
  if (!_loadList.contains(load)) {
    return false;
  }
  _loadList.remove(load);
  log.debug("train (" + getName() + ") delete car load "+ load);
  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_loadList.size() + 1,_loadList.size());
  return true;
}

private ComputeState validateComputeName(String awsId,String vmName) throws Throwable {
  if (this.isAwsClientMock) {
    return null;
  }
  ComputeState computeState=getComputeByAWSId(this.host,awsId);
  String tagNameValue=computeState.name;
  assertNotNull("'displayName' property should be present",tagNameValue);
  assertEquals(vmName,tagNameValue);
  return computeState;
}

public static String fromTag(IntArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  int value : tag.getValue()) {
    IntTag i=new IntTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(i));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}

public static int removeArgsAndReturnInsertionIndex(List<String> args,int argIndex,boolean tryRemovingArgValue){
  if (argIndex < 0 || argIndex >= args.size()) {
    return 0;
  }
  if (tryRemovingArgValue) {
    String argValue=getArgValue(args,argIndex + 1);
    if (argValue != null) {
      args.remove(argIndex + 1);
    }
  }
  args.remove(argIndex);
  return argIndex;
}

void replacePolicyInResourceTree(ServiceTypeManager svtm,SSOToken token,Policy oldPolicy,Policy newPolicy) throws PolicyException, SSOException {
  removePolicyFromResourceTree(svtm,token,oldPolicy);
  addPolicyToResourceTree(svtm,token,newPolicy);
}

public AtomicDoubleArray(int length){
  larray=new AtomicLongArray(length);
  long ZERO=Double.doubleToRawLongBits(0.0);
  for (int i=0; i < length; i++)   larray.set(i,ZERO);
}

private void copyAction(File srcFile,File destFile) throws FileNotFoundException, IOException {
  FileInputStream istream=new FileInputStream(srcFile);
  FileOutputStream ostream=new FileOutputStream(destFile);
  FileChannel input=istream.getChannel();
  FileChannel output=ostream.getChannel();
  try {
    input.transferTo(0,input.size(),output);
  }
  finally {
    istream.close();
    ostream.close();
    input.close();
    output.close();
  }
}

private void recomputeSeperation(double[][] means,double[][] cdist,LongStatistic diststat){
  final int k=means.length;
  for (int i=1; i < k; i++) {
    DoubleVector mi=DoubleVector.wrap(means[i]);
    for (int j=0; j < i; j++) {
      cdist[i][j]=cdist[j][i]=distanceFunction.distance(mi,DoubleVector.wrap(means[j]));
    }
  }
  if (diststat != null) {
    diststat.increment((k * (k - 1)) >> 1);
  }
}

private static BufferedImage makeSquare(BufferedImage input){
  if (input.getHeight() == input.getWidth()) {
    return input;
  }
 else {
    int max=Math.max(input.getHeight(),input.getWidth());
    int dx=(max - input.getWidth()) / 2;
    int dy=(max - input.getHeight()) / 2;
    return createImg(max,max,input.getType(),null);
  }
}

protected abstract void handleLostEntry(HttpRoute route);

public void writeStartElement(String localName) throws XMLStreamException {
  if (localName == null || localName.length() == 0) {
    throw new XMLStreamException("Local Name cannot be null or empty");
  }
  _state=STATE_ELEMENT;
  if (_currentEle != null && _currentEle.getState() == ELEMENT_STARTTAG_OPEN) {
    closeStartTag();
  }
  _currentEle=new Element(_currentEle,localName,false);
  openStartTag();
  _writer.write(localName);
}

public void addProcessInteractionListener(final ProcessInteractionListener l){
  if (l == null) {
    throw new IllegalArgumentException("l must not be null!");
  }
  processInteractionListeners.add(l);
}

private void traverseInternal(Object root,boolean yieldRoot,IdentityHashMap<Object,Object> seen){
  if (root == null || seen.containsKey(root)) {
    return;
  }
  if (yieldRoot) {
    if (!visit(root)) {
      return;
    }
  }
  seen.put(root,root);
  if (root instanceof JSONObject) {
    JSONObject json=(JSONObject)root;
    Iterator<String> keys=json.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      try {
        traverseInternal(json.get(key),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof JSONArray) {
    JSONArray array=(JSONArray)root;
    for (int i=0; i < array.length(); ++i) {
      try {
        traverseInternal(array.get(i),true,seen);
      }
 catch (      JSONException e) {
        throw new RuntimeException(e);
      }
    }
  }
 else   if (root instanceof Map) {
    Map<?,?> map=(Map<?,?>)root;
    for (    Object value : map.values()) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof List) {
    List<?> list=(List<?>)root;
    for (    Object value : list) {
      traverseInternal(value,true,seen);
    }
  }
 else   if (root instanceof ParseObject) {
    if (traverseParseObjects) {
      ParseObject object=(ParseObject)root;
      for (      String key : object.keySet()) {
        traverseInternal(object.get(key),true,seen);
      }
    }
  }
 else   if (root instanceof ParseACL) {
    ParseACL acl=(ParseACL)root;
    ParseUser user=acl.getUnresolvedUser();
    if (user != null && user.isCurrentUser()) {
      traverseInternal(user,true,seen);
    }
  }
}

public StrBuilder replaceFirst(final String searchStr,final String replaceStr){
  final int searchLen=(searchStr == null ? 0 : searchStr.length());
  if (searchLen > 0) {
    final int index=indexOf(searchStr,0);
    if (index >= 0) {
      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());
      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);
    }
  }
  return this;
}

protected abstract void internalPut(int index,byte b);

public CommonTurnoutOperationConfig(TurnoutOperation op){
  super(op);
  myOp=(CommonTurnoutOperation)op;
  maxTriesSpinner=new JSpinner();
  intervalSpinner=new JSpinner();
  Box vbox=Box.createVerticalBox();
  Box hbox1=Box.createHorizontalBox();
  Box hbox2=Box.createHorizontalBox();
  vbox.add(hbox2);
  vbox.add(hbox1);
  vbox.add(Box.createVerticalGlue());
  hbox1.add(new JLabel(Bundle.getMessage("Interval")));
  hbox1.add(Box.createHorizontalGlue());
  intervalSpinner.setMinimumSize(new Dimension(100,20));
  intervalSpinner.setModel(new SpinnerNumberModel(myOp.getInterval(),CommonTurnoutOperation.minInterval,CommonTurnoutOperation.maxInterval,CommonTurnoutOperation.intervalStepSize));
  hbox1.add(intervalSpinner);
  hbox2.add(new JLabel(Bundle.getMessage("TimesToTry")));
  hbox2.add(Box.createHorizontalGlue());
  maxTriesSpinner.setMinimumSize(new Dimension(100,20));
  maxTriesSpinner.setModel(new SpinnerNumberModel(myOp.getMaxTries(),CommonTurnoutOperation.minMaxTries,CommonTurnoutOperation.maxMaxTries,1));
  hbox2.add(maxTriesSpinner);
  Box hbox3=Box.createHorizontalBox();
  hbox3.add(Box.createHorizontalStrut(150));
  vbox.add(hbox3);
  add(vbox);
}

public static String gensalt(int log_rounds,SecureRandom random){
  if (log_rounds < 4 || log_rounds > 31) {
    throw new IllegalArgumentException("Bad number of rounds");
  }
  StringBuilder rs=new StringBuilder();
  byte rnd[]=new byte[BCRYPT_SALT_LEN];
  random.nextBytes(rnd);
  rs.append("$2a$");
  if (log_rounds < 10) {
    rs.append("0");
  }
  rs.append(log_rounds);
  rs.append("$");
  encode_base64(rnd,rnd.length,rs);
  return rs.toString();
}

protected void drawDescription(Canvas c){
  if (!mDescription.equals("")) {
    if (mDescriptionPosition == null) {
      c.drawText(mDescription,getWidth() - mViewPortHandler.offsetRight() - 10,getHeight() - mViewPortHandler.offsetBottom() - 10,mDescPaint);
    }
 else {
      c.drawText(mDescription,mDescriptionPosition.x,mDescriptionPosition.y,mDescPaint);
    }
  }
}

long parseBytes(String freeSpace,String path) throws IOException {
  try {
    long bytes=Long.parseLong(freeSpace);
    if (bytes < 0) {
      throw new IOException("Command line '" + DF + "' did not find free space in response "+ "for path '"+ path+ "'- check path is valid");
    }
    return bytes;
  }
 catch (  NumberFormatException ex) {
    throw new IOExceptionWithCause("Command line '" + DF + "' did not return numeric data as expected "+ "for path '"+ path+ "'- check path is valid",ex);
  }
}

public String findInterlanguageLink(String lang){
  int start=page.indexOf("[[" + lang + ":");
  if (start < 0)   return null;
  int end=page.indexOf("]]",start);
  if (end < 0)   return null;
  String link=page.substring(start + 3 + lang.length(),end);
  if (link.indexOf("\n") != -1) {
    return null;
  }
  if (link.length() == 0)   return null;
  return link;
}

private void updateActions(final INaviAddressSpace addressSpace){
  m_loadAddressSpaceAction.setEnabled(!addressSpace.isLoaded());
}

public static <T>ParallelFlux<T> from(Publisher<? extends T> source,int parallelism){
  return from(source,parallelism,QueueSupplier.SMALL_BUFFER_SIZE,QueueSupplier.small());
}

private static void cleanDirectoryOnExit(File directory) throws IOException {
  if (!directory.exists()) {
    String message=directory + " does not exist";
    throw new IllegalArgumentException(message);
  }
  if (!directory.isDirectory()) {
    String message=directory + " is not a directory";
    throw new IllegalArgumentException(message);
  }
  File[] files=directory.listFiles();
  if (files == null) {
    throw new IOException("Failed to list contents of " + directory);
  }
  IOException exception=null;
  for (  File file : files) {
    try {
      forceDeleteOnExit(file);
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
  }
  if (null != exception) {
    throw exception;
  }
}

private void addGumball(float xPos,float yPos){
  Gumball gumball=new Gumball();
  gumball.mXInitPos=xPos;
  gumball.mYInitPos=yPos;
  gumball.mSoundPoolId=UUID.randomUUID();
  mSoundPoolId.put(gumball.mSoundPoolId,false);
  mGameView.addGumball(gumball);
  mSoundPool.play(mSoundBallDrop,1,1,0,0,1);
}

int put(T segment,List<? super T> recycleBin){
  int count;
  if (lastCount == 0) {
    count=0;
    lastCount=1;
    last=segment;
  }
 else   if (Objects.deepEquals(last,segment)) {
    ++lastCount;
    count=0;
    recycleBin.add(segment);
  }
 else {
    count=lastCount;
    lastCount=1;
    last=segment;
  }
  return count;
}

@KnownFailure("not supported") public void testDelete6() throws SQLException {
  DatabaseCreator.fillFKStrictTable(conn);
  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");
  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");
  r.next();
  assertEquals("Should be 2 rows",2,r.getInt(1));
  r.close();
}

public Channel chan(final String topic,final JsonNode payload){
  LOG.log(Level.FINE,"chan: {0}, {1}",new Object[]{topic,payload});
  final Channel channel=new Channel(topic,payload,Socket.this);
synchronized (channels) {
    channels.add(channel);
  }
  return channel;
}

public PlaPointFloat change_size(double p_new_size){
  if (v_x == 0 && v_y == 0) {
    return this;
  }
  double length=Math.sqrt(v_x * v_x + v_y * v_y);
  double new_x=(v_x * p_new_size) / length;
  double new_y=(v_y * p_new_size) / length;
  return new PlaPointFloat(new_x,new_y);
}

int insert(Row row,byte[] sourceBuffer,int sourceOffset,BlobOutputStream[] blobs){
  int rowHead=_rowHead;
  int blobTail=_blobTail;
  int rowLength=row.length();
  rowHead-=rowLength;
  if (rowHead < blobTail) {
    return -1;
  }
  byte[] buffer=_buffer;
  System.arraycopy(sourceBuffer,sourceOffset,buffer,rowHead,rowLength);
  buffer[rowHead]=(byte)((buffer[rowHead] & ~CODE_MASK) | INSERT);
  blobTail=row.insertBlobs(buffer,rowHead,blobTail,blobs);
  if (blobTail < 0) {
    return -1;
  }
  setBlobTail(blobTail);
  rowHead(rowHead);
  validateBlock(row);
  return rowHead;
}

private void addDefaultUri() throws IgniteSpiException {
  assert uriEncodedList != null;
  URI uri;
  try {
    uri=U.resolveWorkDirectory(DFLT_DEPLOY_DIR,false).toURI();
  }
 catch (  IgniteCheckedException e) {
    throw new IgniteSpiException("Failed to initialize default file scanner",e);
  }
  uriEncodedList.add(uri);
}

protected void transfer(String seqRange) throws IOException {
  try {
    final int rangePos=seqRange.indexOf('-');
    if (rangePos == -1) {
      transfer(Long.parseLong(seqRange));
    }
 else {
      final String start=seqRange.substring(0,rangePos);
      final String end=seqRange.substring(rangePos + 1);
      final long startIdx;
      if (start.length() == 0) {
        startIdx=0;
      }
 else {
        startIdx=Long.parseLong(start);
      }
      final long endIdx;
      if (end.length() == 0) {
        endIdx=mReader.numberSequences() - 1;
      }
 else {
        endIdx=Long.parseLong(end);
      }
      if (startIdx > endIdx) {
        throw new NumberFormatException("Invalid range: " + seqRange);
      }
      for (long i=startIdx; i <= endIdx; i++) {
        transfer(i);
      }
    }
  }
 catch (  final NumberFormatException e) {
    warnInvalidSequence(seqRange);
  }
}

public static double distancePointLinePerpendicular(Coordinate p,Coordinate A,Coordinate B){
  double len2=(B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y);
  double s=((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2;
  return Math.abs(s) * Math.sqrt(len2);
}

BigInteger copy(){
  prepareJavaRepresentation();
  int[] copyDigits=new int[numberLength];
  System.arraycopy(digits,0,copyDigits,0,numberLength);
  return new BigInteger(sign,numberLength,copyDigits);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("staff",true);
  elementList=doc.getElementsByTagName("address");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.replaceData(0,4,"2500");
  childData=child.getData();
  assertEquals("characterdataReplaceDataBeginingAssert","2500 North Ave. Dallas, Texas 98551",childData);
}

public String patchFixIds(){
  return properties.getProperty("patch.fix.ids");
}

public final void readFully(byte[] b) throws java.io.IOException {
  readFully(b,0,b.length);
}

private void createGui(){
  final JPanel outerNamePanel=new JPanel(new BorderLayout());
  outerNamePanel.setBorder(new TitledBorder("Tag"));
  final JPanel namePanel=new JPanel(new BorderLayout());
  namePanel.setBorder(new EmptyBorder(0,0,5,0));
  final JLabel nameLabel=new CHelpLabel("Name" + ":",new CNameHelp());
  nameLabel.setPreferredSize(new Dimension(110,25));
  namePanel.add(nameLabel,BorderLayout.WEST);
  namePanel.add(m_nameTextField,BorderLayout.CENTER);
  outerNamePanel.add(namePanel,BorderLayout.CENTER);
  final JPanel outerDescriptionPanel=new JPanel(new BorderLayout());
  outerDescriptionPanel.setBorder(new EmptyBorder(5,0,0,0));
  final JPanel descriptionPanel=new JPanel(new BorderLayout());
  descriptionPanel.setBorder(new TitledBorder("Description"));
  descriptionPanel.setMinimumSize(new Dimension(0,120));
  descriptionPanel.add(new JScrollPane(m_descriptionField));
  outerDescriptionPanel.add(descriptionPanel,BorderLayout.CENTER);
  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));
  buttonPanel.add(new JPanel());
  buttonPanel.setBorder(new EmptyBorder(5,0,5,2));
  buttonPanel.add(m_saveButton);
  final JPanel topPanel=new JPanel(new BorderLayout());
  topPanel.add(outerNamePanel,BorderLayout.NORTH);
  topPanel.add(outerDescriptionPanel,BorderLayout.CENTER);
  topPanel.add(buttonPanel,BorderLayout.SOUTH);
  final JPanel bottomPanel=new JPanel(new BorderLayout());
  bottomPanel.setBorder(m_tableBorder);
  final JScrollPane scrollPane=new JScrollPane(m_childrenTagTable);
  bottomPanel.add(scrollPane,BorderLayout.CENTER);
  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);
  splitPane.setOneTouchExpandable(true);
  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());
  splitPane.setResizeWeight(0.5);
  add(splitPane);
}

public static boolean isJellybeanOrLater(){
  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
}

public PartialCorrelationPdf(int n,int k){
  this.n=n;
  this.k=k;
  double gammaRatio=gammaRatio(n,k);
  this.constant=(1 / Math.pow(Math.PI,0.5)) * gammaRatio;
  this.outsideExp=(double)(n - k - 2) / 2.0;
}

private static boolean isEnabled(){
  if (SystemUtils.IS_OS_WINDOWS) {
    return false;
  }
  try {
    List<String> lines=CommandUtil.executeCommandAndGetLines(Collections.singletonList("sestatus"));
    for (    String line : lines) {
      if (line.contains("SELinux status")) {
        if (line.contains("enabled")) {
          Logger.info("SELinux is enabled on this system");
          return true;
        }
        return false;
      }
    }
  }
 catch (  Exception ex) {
  }
  return false;
}

public boolean validate(){
  outputFile=new File(outputPath);
  if (outputFile.exists() || outputFile.isDirectory()) {
    invalidMessage="Output file already exists.";
    return valid=false;
  }
  if (!signMode) {
    keyFile=new File(keyFilePath);
    if (!keyFile.exists() || keyFile.isDirectory()) {
      invalidMessage="Key file not found.";
      return valid=false;
    }
  }
  return valid=true;
}

public void addResponseCodeListener(ActionListener a){
  responseCodeListeners.addElement(a);
}

public double calculateLogLikelihood(){
  double logL=0.0;
  for (  Statistic statistic : dataList) {
    for (int j=0; j < statistic.getDimension(); j++) {
      logL-=Math.log(statistic.getStatisticValue(j));
    }
  }
  return logL;
}

public static boolean hasDeadStatesFromInitial(Automaton a){
  BitSet reachableFromInitial=getLiveStatesFromInitial(a);
  BitSet reachableFromAccept=getLiveStatesToAccept(a);
  reachableFromInitial.andNot(reachableFromAccept);
  return reachableFromInitial.isEmpty() == false;
}

public Decimal subtract(Decimal decimal){
  assertDefined();
  if (null == m_value) {
    return (decimal);
  }
  BigDecimal value=m_value.subtract(decimal.getBigDecimalValue());
  return new Decimal(value,SCALE);
}

public final boolean equals(Object object){
  if (object == null) {
    return false;
  }
  if (!(object instanceof KnowledgeEdge)) {
    return false;
  }
  KnowledgeEdge pair=(KnowledgeEdge)object;
  return from.equals(pair.from) && to.equals(pair.to);
}

protected int skipLine(int c) throws IOException {
  while (c != -1 && c != '\r' && c != '\n') {
    c=reader.read();
  }
  if (c == '\n') {
    c=reader.read();
    lineNo++;
    reportLocation(lineNo,1);
  }
 else   if (c == '\r') {
    c=reader.read();
    if (c == '\n') {
      c=reader.read();
    }
    lineNo++;
    reportLocation(lineNo,1);
  }
  return c;
}

@Override public void listVolumes(CommandInput input,CompletionHandler completionHandler){
  createOrUpdateTargetSsl(input);
  URI uri=UriUtils.extendUri(input.getDockerUri(),"/volumes");
  sendGet(uri,null,completionHandler);
}

public static ByteBuffer base64StringToByteBuffer(String base64EncodedKey){
  return ByteBuffer.wrap(base64DecodeString(base64EncodedKey));
}

public boolean step(){
  long current=System.currentTimeMillis();
  if (mStart == 0 || (current - mStart < 0)) {
    mProgress=0;
  }
 else   if (current - mStart > mDuration) {
    if (mLoop) {
      mProgress=0;
      start();
      return true;
    }
    mProgress=1;
    return false;
  }
 else {
    mProgress=(current - mStart) / (double)mDuration;
  }
  return true;
}

protected void load_raw_characters(StringBuilder sb) throws IOException {
  int c=read_char();
  for (; ; ) {
    c=read_char();
switch (c) {
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2:
case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3:
      continue;
case -1:
    return;
default :
  if (!IonTokenConstsX.is7bitValue(c)) {
    c=read_large_char_sequence(c);
  }
}
if (IonUTF8.needsSurrogateEncoding(c)) {
sb.append(IonUTF8.highSurrogate(c));
c=IonUTF8.lowSurrogate(c);
}
sb.append((char)c);
}
}

public SignatureFakingOracle(final String documentString) throws SignatureFakingException {
  Security.addProvider(new BouncyCastleProvider());
  signatureValueElements=new LinkedList<Node>();
  keyInfoElements=new LinkedList<Node>();
  certificates=new LinkedList<String>();
  certHandlers=new LinkedList<CertificateHandler>();
  try {
    doc=DomUtilities.stringToDom(documentString);
    crawlSignatureElements();
    log.debug("found " + signatureValueElements.size() + " SignatureValue elements");
    crawlKeyInfoElements();
    log.debug("found " + keyInfoElements.size() + " KeyInfo elements containing X509 certificates");
  }
 catch (  SAXException e) {
    throw new SignatureFakingException(e);
  }
}

public ArbitraryLengthPathNode(final TermNode left,final TermNode right,final VarNode tVarLeft,final VarNode tVarRight,final long lowerBound,final long upperBound){
  this(new BOp[]{new JoinGroupNode()},NV.asMap(new NV(Annotations.LEFT_TERM,left),new NV(Annotations.RIGHT_TERM,right),new NV(Annotations.TRANSITIVITY_VAR_LEFT,tVarLeft),new NV(Annotations.TRANSITIVITY_VAR_RIGHT,tVarRight),new NV(Annotations.DROP_VARS,new ArrayList<VarNode>()),new NV(Annotations.LOWER_BOUND,lowerBound),new NV(Annotations.UPPER_BOUND,upperBound)));
  final Set<VarNode> dropVars=new LinkedHashSet<>();
  dropVars.add(tVarLeft);
  dropVars.add(tVarRight);
  setProperty(Annotations.DROP_VARS,dropVars);
}

public void addChangingListener(OnWheelChangedListener listener){
  changingListeners.add(listener);
}

private Integer scanYamlDirectiveNumber(Mark startMark){
  char ch=reader.peek();
  if (!Character.isDigit(ch)) {
    throw new ScannerException("while scanning a directive",startMark,"expected a digit, but found " + ch + "("+ ((int)ch)+ ")",reader.getMark());
  }
  int length=0;
  while (Character.isDigit(reader.peek(length))) {
    length++;
  }
  Integer value=Integer.parseInt(reader.prefixForward(length));
  return value;
}

public static final String toBitString(int i[]){
  StringBuilder sb=new StringBuilder(i.length);
  for (  int b : i) {
    sb.append(b);
  }
  return sb.toString();
}

public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){
  return convertToSigned16BitSamples(buffer.getSamples());
}

boolean checkToken(ByteWrapper token,Key nodeId,InetAddress ip,int port,Key lookupKey){
  updateTokenTimestamps();
  boolean valid=checkToken(token,nodeId,ip,port,lookupKey,timestampCurrent.get()) || checkToken(token,nodeId,ip,port,lookupKey,timestampPrevious);
  if (!valid)   DHT.logDebug("Received Invalid token from " + ip.getHostAddress());
  return valid;
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

public void expandAll(){
  cancelEditing();
  final TreeModel tm=getModel();
  final Object root=tm.getRoot();
  if (root != null) {
    expandAllPaths(new TreePath(root),tm);
  }
}

protected void describeVocabularies(final IVCount[] predicatePartitionCounts){
  final Set<String> namespaces=new LinkedHashSet<String>();
{
    for (    IVCount tmp : predicatePartitionCounts) {
      final URI p=(URI)tmp.getValue();
      String namespace=p.getNamespace();
      if (namespace.endsWith("#")) {
        namespace=namespace.substring(0,namespace.length() - 1);
      }
      namespaces.add(namespace);
    }
  }
  final String[] a=namespaces.toArray(new String[namespaces.size()]);
  Arrays.sort(a);
  for (  String namespace : a) {
    g.add(aDataset,VoidVocabularyDecl.vocabulary,f.createURI(namespace));
  }
}

public void testInvokeAny4() throws Throwable {
  CountDownLatch latch=new CountDownLatch(1);
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(latchAwaitingStringTask(latch));
    l.add(null);
    try {
      e.invokeAny(l);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
    latch.countDown();
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}

private static void solve_l2r_l1l2_svr(Problem prob,double[] w,Parameter param){
  int l=prob.l;
  double C=param.C;
  double p=param.p;
  int w_size=prob.n;
  double eps=param.eps;
  int i, s, iter=0;
  int max_iter=1000;
  int active_size=l;
  int[] index=new int[l];
  double d, G, H;
  double Gmax_old=Double.POSITIVE_INFINITY;
  double Gmax_new, Gnorm1_new;
  double Gnorm1_init=0;
  double[] beta=new double[l];
  double[] QD=new double[l];
  double[] y=prob.y;
  double[] lambda=new double[]{0.5 / C};
  double[] upper_bound=new double[]{Double.POSITIVE_INFINITY};
  if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) {
    lambda[0]=0;
    upper_bound[0]=C;
  }
  for (i=0; i < l; i++) {
    beta[i]=0;
  }
  for (i=0; i < w_size; i++) {
    w[i]=0;
  }
  for (i=0; i < l; i++) {
    QD[i]=0;
    for (    Feature xi : prob.x[i]) {
      double val=xi.getValue();
      QD[i]+=val * val;
      w[xi.getIndex() - 1]+=beta[i] * val;
    }
    index[i]=i;
  }
  while (iter < max_iter) {
    Gmax_new=0;
    Gnorm1_new=0;
    for (i=0; i < active_size; i++) {
      int j=i + random.nextInt(active_size - i);
      swap(index,i,j);
    }
    for (s=0; s < active_size; s++) {
      i=index[s];
      G=-y[i] + lambda[GETI_SVR(i)] * beta[i];
      H=QD[i] + lambda[GETI_SVR(i)];
      for (      Feature xi : prob.x[i]) {
        int ind=xi.getIndex() - 1;
        double val=xi.getValue();
        G+=val * w[ind];
      }
      double Gp=G + p;
      double Gn=G - p;
      double violation=0;
      if (beta[i] == 0) {
        if (Gp < 0) {
          violation=-Gp;
        }
 else         if (Gn > 0) {
          violation=Gn;
        }
 else         if (Gp > Gmax_old && Gn < -Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] >= upper_bound[GETI_SVR(i)]) {
        if (Gp > 0) {
          violation=Gp;
        }
 else         if (Gp < -Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] <= -upper_bound[GETI_SVR(i)]) {
        if (Gn < 0) {
          violation=-Gn;
        }
 else         if (Gn > Gmax_old) {
          active_size--;
          swap(index,s,active_size);
          s--;
          continue;
        }
      }
 else       if (beta[i] > 0) {
        violation=Math.abs(Gp);
      }
 else {
        violation=Math.abs(Gn);
      }
      Gmax_new=Math.max(Gmax_new,violation);
      Gnorm1_new+=violation;
      if (Gp < H * beta[i]) {
        d=-Gp / H;
      }
 else       if (Gn > H * beta[i]) {
        d=-Gn / H;
      }
 else {
        d=-beta[i];
      }
      if (Math.abs(d) < 1.0e-12) {
        continue;
      }
      double beta_old=beta[i];
      beta[i]=Math.min(Math.max(beta[i] + d,-upper_bound[GETI_SVR(i)]),upper_bound[GETI_SVR(i)]);
      d=beta[i] - beta_old;
      if (d != 0) {
        for (        Feature xi : prob.x[i]) {
          w[xi.getIndex() - 1]+=d * xi.getValue();
        }
      }
    }
    if (iter == 0) {
      Gnorm1_init=Gnorm1_new;
    }
    iter++;
    if (iter % 10 == 0) {
      info(".");
    }
    if (Gnorm1_new <= eps * Gnorm1_init) {
      if (active_size == l) {
        break;
      }
 else {
        active_size=l;
        info("*");
        Gmax_old=Double.POSITIVE_INFINITY;
        continue;
      }
    }
    Gmax_old=Gmax_new;
  }
  info("%noptimization finished, #iter = %d%n",iter);
  if (iter >= max_iter) {
    info("%nWARNING: reaching max number of iterations%nUsing -s 11 may be faster%n%n");
  }
  double v=0;
  int nSV=0;
  for (i=0; i < w_size; i++) {
    v+=w[i] * w[i];
  }
  v=0.5 * v;
  for (i=0; i < l; i++) {
    v+=p * Math.abs(beta[i]) - y[i] * beta[i] + 0.5 * lambda[GETI_SVR(i)] * beta[i]* beta[i];
    if (beta[i] != 0) {
      nSV++;
    }
  }
  info("Objective value = %g%n",v);
  info("nSV = %d%n",nSV);
}

public SignalGroupSubTableAction(String s){
}

public static List<String> generateXVals(int from,int to){
  List<String> xvals=new ArrayList<String>();
  for (int i=from; i < to; i++) {
    xvals.add("" + i);
  }
  return xvals;
}

public void testCompareToDiffSigns1(){
  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};
  int aSign=1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  assertEquals(1,aNumber.compareTo(bNumber));
}

private HashMap addAttr(SvcReg reg,EntryClass eclass,int fldidx,Object value){
  HashMap[] attrMaps=serviceByAttr.get(eclass);
  if (attrMaps == null) {
    attrMaps=new HashMap[eclass.getNumFields()];
    serviceByAttr.put(eclass,attrMaps);
  }
  HashMap map=attrMaps[fldidx];
  if (map == null) {
    map=new HashMap(11);
    attrMaps[fldidx]=map;
  }
  ArrayList regs=(ArrayList)map.get(value);
  if (regs == null) {
    regs=new ArrayList(3);
    map.put(value,regs);
  }
 else   if (regs.contains(reg))   return map;
  regs.add(reg);
  return map;
}

public QueryStringDecoderUtil(URI uri){
  this(uri,Charset.defaultCharset());
}

public static float[] cmykFromRgb(int rgbColor){
  int red=(0xff0000 & rgbColor) >> 16;
  int green=(0xff00 & rgbColor) >> 8;
  int blue=(0xff & rgbColor);
  float black=Math.min(1.0f - red / 255.0f,Math.min(1.0f - green / 255.0f,1.0f - blue / 255.0f));
  float cyan=1.0f;
  float magenta=1.0f;
  float yellow=1.0f;
  if (black != 1.0f) {
    cyan=(1.0f - (red / 255.0f) - black) / (1.0f - black);
    magenta=(1.0f - (green / 255.0f) - black) / (1.0f - black);
    yellow=(1.0f - (blue / 255.0f) - black) / (1.0f - black);
  }
  return new float[]{cyan,magenta,yellow,black};
}

public void removeSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    return;
  }
  mListeners.remove(listener);
}

public static void showErrorMessage(String msg){
  showErrorMessage(msg,3500);
}

public final static NameValuePair parseNameValuePair(final String value,HeaderValueParser parser) throws ParseException {
  if (value == null) {
    throw new IllegalArgumentException("Value to parse may not be null");
  }
  if (parser == null)   parser=BasicHeaderValueParser.DEFAULT;
  CharArrayBuffer buffer=new CharArrayBuffer(value.length());
  buffer.append(value);
  ParserCursor cursor=new ParserCursor(0,value.length());
  return parser.parseNameValuePair(buffer,cursor);
}

public static String stripCharsInBag(String s,String bag){
  int i;
  StringBuilder stringBuilder=new StringBuilder("");
  for (i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (bag.indexOf(c) == -1)     stringBuilder.append(c);
  }
  return stringBuilder.toString();
}

public static double cos(double radians){
  return Math.cos(radians);
}

public static String formatNumber(float number,int digitCount,boolean separateThousands){
  char[] out=new char[35];
  boolean neg=false;
  if (number == 0) {
    return "0";
  }
  boolean zero=false;
  if (number < 1 && number > -1) {
    zero=true;
  }
  if (number < 0) {
    neg=true;
    number=-number;
  }
  if (digitCount > POW_10.length) {
    digitCount=POW_10.length - 1;
  }
  number*=POW_10[digitCount];
  long lval=Math.round(number);
  int ind=out.length - 1;
  int charCount=0;
  boolean decimalPointAdded=false;
  while (lval != 0 || charCount < (digitCount + 1)) {
    int digit=(int)(lval % 10);
    lval=lval / 10;
    out[ind--]=(char)(digit + '0');
    charCount++;
    if (charCount == digitCount) {
      out[ind--]=',';
      charCount++;
      decimalPointAdded=true;
    }
 else     if (separateThousands && lval != 0 && charCount > digitCount) {
      if (decimalPointAdded) {
        if ((charCount - digitCount) % 4 == 0) {
          out[ind--]='.';
          charCount++;
        }
      }
 else {
        if ((charCount - digitCount) % 4 == 3) {
          out[ind--]='.';
          charCount++;
        }
      }
    }
  }
  if (zero) {
    out[ind--]='0';
    charCount+=1;
  }
  if (neg) {
    out[ind--]='-';
    charCount+=1;
  }
  int start=out.length - charCount;
  return String.valueOf(out,start,out.length - start);
}

@Override protected void onDestroy(){
  super.onDestroy();
  doReallyStop(false);
  mFragments.dispatchDestroy();
  if (mLoaderManager != null) {
    mLoaderManager.doDestroy();
  }
}

public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){
  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);
}

static public boolean doesFileExist(Context c,String fileName,long fileSize,boolean deleteFileOnMismatch){
  File fileForNewFile=new File(Helpers.generateSaveFileName(c,fileName));
  if (fileForNewFile.exists()) {
    if (fileForNewFile.length() == fileSize) {
      return true;
    }
    if (deleteFileOnMismatch) {
      fileForNewFile.delete();
    }
  }
  return false;
}

static WindowsFileAttributes fromFindData(long address){
  int fileAttrs=unsafe.getInt(address + OFFSETOF_FIND_DATA_ATTRIBUTES);
  long creationTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_CREATETIME);
  long lastAccessTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTACCESSTIME);
  long lastWriteTime=unsafe.getLong(address + OFFSETOF_FIND_DATA_LASTWRITETIME);
  long size=((long)(unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << 32) + (unsafe.getInt(address + OFFSETOF_FIND_DATA_SIZELOW) & 0xFFFFFFFFL);
  int reparseTag=isReparsePoint(fileAttrs) ? unsafe.getInt(address + OFFSETOF_FIND_DATA_RESERVED0) : 0;
  return new WindowsFileAttributes(fileAttrs,creationTime,lastAccessTime,lastWriteTime,size,reparseTag,0,0,0);
}

public static final void writeMapXml(Map val,XmlSerializer out,WriteMapCallback callback) throws XmlPullParserException, IOException {
  if (val == null) {
    return;
  }
  Set s=val.entrySet();
  Iterator i=s.iterator();
  while (i.hasNext()) {
    Map.Entry e=(Map.Entry)i.next();
    writeValueXml(e.getValue(),(String)e.getKey(),out,callback);
  }
}

public void fireEventProgrammatically(Event event){
  if (!event.isConsumed())   ripplerPane.fireEvent(event);
}

private boolean hasFullEntry(JsonValue entry,QuerySide querySide){
  if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) {
    return sourceQueryFullEntry;
  }
 else   if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) {
    return targetQueryFullEntry;
  }
  if (entry != null) {
    short ignoreFields=0;
    if (entry.isDefined("_id")) {
      ignoreFields++;
    }
    if (entry.isDefined("_rev")) {
      ignoreFields++;
    }
    ignoreFields+=2;
    return entry.size() > ignoreFields;
  }
 else {
    return false;
  }
}

public static boolean isModule(IResource resource){
  return (resource != null && TLA_EXTENSION.equals(resource.getFileExtension()));
}

public int writeAnnotation(Annotation annotation){
  int off=data.position();
  writeByte(annotation.visibility);
  writeEncodedArray(annotation.encodedAnnotation);
  return off;
}

public static long fromInet4Address(final InetAddress inetAddress){
  ensureIsInet4Address(inetAddress);
  return Integer.toUnsignedLong(inetAddress.hashCode());
}

public boolean revisionContainsTemplateName(int revId,String templateName) throws WikiApiException {
  return revisionContainsTemplateNames(revId,Arrays.asList(new String[]{templateName}));
}

public List<GenericEntry> retrieveAllAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, IOException, ServiceException {
  String url=BASE_URL + "account/" + domain;
  if (fromDate != null) {
    url+="?fromDate=" + DATE_FORMAT.format(fromDate);
  }
  return getAllPages(new URL(url),GenericFeed.class);
}

protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){
  int h4=h / 4;
  int r=w - 1;
  if (fillColor != null || fillPaint != null) {
    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));
    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));
    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));
    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));
    if (isShadow) {
      g.setColor(mxConstants.SHADOW_COLOR);
      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);
      g.fill(area);
      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);
    }
    if (fillPaint != null) {
      g.setPaint(fillPaint);
    }
 else {
      g.setColor(fillColor);
    }
    g.fill(area);
  }
  if (penColor != null) {
    g.setColor(penColor);
    int h2=h4 / 2;
    g.drawOval(x,y,r,h4);
    g.drawLine(x,y + h2,x,y + h - h2);
    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);
    g.drawArc(x,y + h - h4,r,h4,0,-180);
  }
}

public StringList plus(String... args){
  StringList newList=new StringList();
  newList.addAll(this);
  newList.addAll(Arrays.asList(args));
  return newList;
}

private void walkParseTree(List<SwiftBaseListener> listeners,TopLevelContext tree){
  ParseTreeWalker walker=new ParseTreeWalker();
  listeners.forEach(null);
}

@Override public final char readChar() throws IOException {
  dis.readFully(work,0,2);
  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));
}

public static int truncatedCompareTo(final Date date1,final Date date2,final int field){
  final Date truncatedDate1=truncate(date1,field);
  final Date truncatedDate2=truncate(date2,field);
  return truncatedDate1.compareTo(truncatedDate2);
}

protected List<DecompoundedWord> makeSplit(String aWord){
  List<DecompoundedWord> result=new ArrayList<DecompoundedWord>();
  for (int i=0; i < aWord.length(); i++) {
    String leftWord=aWord.substring(0,i + 1);
    String rightWord=aWord.substring(i + 1);
    boolean leftGood=dict.contains(leftWord) && leftWord.length() >= minWordLength;
    boolean rightGood=rightWord.length() > minRestLength || rightWord.length() == 0;
    if (leftGood && rightGood) {
      DecompoundedWord split=DecompoundedWord.createFromString(leftWord + "+" + rightWord);
      split.setSplitPos(i);
      result.add(split);
    }
    for (    String morpheme : morphemes.getAll()) {
      try {
        String leftWithoutMorpheme=leftWord.substring(0,leftWord.length() - morpheme.length());
        if (leftWord.endsWith(morpheme) && dict.contains(leftWithoutMorpheme) && rightGood) {
          DecompoundedWord split=DecompoundedWord.createFromString(leftWithoutMorpheme + "(" + morpheme+ ")+"+ rightWord);
          split.setSplitPos(i);
          result.add(split);
        }
      }
 catch (      StringIndexOutOfBoundsException e) {
        continue;
      }
    }
  }
  return result;
}

public static boolean isBookSearchUrl(String url){
  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");
}

public static String classNamePath(String className){
  String filename=className.replace(".",File.separator);
  filename=filename.replaceFirst("[$][0-9]+","");
  if (filename.indexOf("$") > 0) {
    filename=filename.substring(0,filename.indexOf("$"));
  }
  return "src" + File.separator + filename+ ".java";
}

public void removeTitlePrefix(String prfx){
  titlePrefix.remove(prfx);
  firePropertyChange(TITLE_PREFIX,null,titlePrefix);
}

public void send(Set recipients,boolean multicast) throws InterruptedException, ReplyException {
  final boolean isDebugEnabled=logger.isDebugEnabled();
  if (Thread.interrupted())   throw new InterruptedException();
  recipients=new HashSet(recipients);
  DistributedMember me=originDm.getDistributionManagerId();
  if (recipients.contains(me)) {
    recipients.remove(me);
  }
  if (isDebugEnabled) {
    logger.debug("Recipients for SerialAckedMessage are {}",recipients);
  }
  rp=new ReplyProcessor21(originDm,recipients);
  processorId=rp.getProcessorId();
  setRecipients(recipients);
  setMulticast(multicast);
  Set failures=originDm.putOutgoing(this);
  if (failures != null && failures.size() > 0) {
    for (Iterator i=failures.iterator(); i.hasNext(); ) {
      InternalDistributedMember mbr=(InternalDistributedMember)i.next();
      if (isDebugEnabled) {
        logger.debug("Unable to send serial acked message to {}",mbr);
      }
    }
  }
  rp.waitForReplies();
}

private boolean isRelevant(Object service,Entry[] attributes){
  LOOP:   for (  Entry e : _serviceAttributes) {
    for (    Entry en : attributes) {
      if (e.equals(en))       continue LOOP;
    }
    return false;
  }
  boolean flag=false;
  for (  Entry en : attributes) {
    if (_serviceName.equals(en)) {
      flag=true;
      break;
    }
  }
  if (!flag)   return false;
  flag=false;
  for (  Class cl : _classes) {
    if (cl.isInstance(service)) {
      flag=true;
      break;
    }
  }
  return flag;
}

private static boolean eq(Object o1,Object o2){
  return o1 == null ? o2 == null : o1.equals(o2);
}

public int findCarByRoadNumber(String roadNumber){
  if (sysList != null) {
    if (!roadNumber.equals(_roadNumber)) {
      return getIndex(0,roadNumber);
    }
    int index=getIndex(_index,roadNumber);
    if (index > 0) {
      return index;
    }
    return getIndex(0,roadNumber);
  }
  return -1;
}

@SlashedClassName @SuppressFBWarnings("TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK") public static String toSlashedClassName(@SlashedClassName(when=When.UNKNOWN) String className){
  if (className.indexOf('.') >= 0) {
    return DescriptorFactory.canonicalizeString(className.replace('.','/'));
  }
  return className;
}

public static double P_AveragePrecision(int y[],int r[]){
  double avg_prec=0;
  int L=y.length;
  List<Integer> ones=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      ones.add(j);
    }
  }
  if (ones.size() <= 0)   return 1.0;
  for (  int j : ones) {
    double s=0.0;
    for (    int k : ones) {
      if (r[k] <= r[j]) {
        s++;
      }
    }
    avg_prec+=(s / (1. + r[j]));
  }
  avg_prec/=ones.size();
  return avg_prec;
}

public Location newLocation(String name){
  Location location=getLocationByName(name);
  if (location == null) {
    _id++;
    location=new Location(Integer.toString(_id),name);
    Integer oldSize=Integer.valueOf(_locationHashTable.size());
    _locationHashTable.put(location.getId(),location);
    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));
  }
  return location;
}

@Override public void close(){
  closing=true;
  if (reservations == null || reservations.compareAndSet(0,-1))   doClose();
}

private void removeOMADownloadFromSharedPrefs(long downloadId){
  Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);
  for (  String omaDownload : omaDownloads) {
    OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);
    if (entry.mDownloadId == downloadId) {
      omaDownloads.remove(omaDownload);
      storeDownloadInfo(PENDING_OMA_DOWNLOADS,omaDownloads);
      return;
    }
  }
}

public static boolean isAndroidSdkDirInLocalPropertiesFile(@NotNull File projectDir){
  String androidHome=getAndroidHomeFromLocalPropertiesFile(projectDir);
  if (!Strings.isNullOrEmpty(androidHome)) {
    String msg=String.format("Found Android SDK home at '%1$s' (from local.properties file)",androidHome);
    LOG.info(msg);
    return true;
  }
  return false;
}

public static boolean hasTokenInformation(Bundle bundle){
  if (bundle == null) {
    return false;
  }
  String token=bundle.getString(TOKEN_KEY);
  if ((token == null) || (token.length() == 0)) {
    return false;
  }
  long expiresMilliseconds=bundle.getLong(EXPIRATION_DATE_KEY,0L);
  if (expiresMilliseconds == 0L) {
    return false;
  }
  return true;
}

public void resetPolicy(){
  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));
  setRetryUntil(DEFAULT_RETRY_UNTIL);
  setMaxRetries(DEFAULT_MAX_RETRIES);
  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));
  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);
  mPreferences.commit();
}

@Override public boolean connectionAllowed(String eventName){
  if (eventName.equals("trainingSet") && m_listenees.containsKey(eventName)) {
    return false;
  }
  return true;
}

public static Vector2 pow(Vector2 o,double power){
  return new Vector2(Math.pow(o.x,power),Math.pow(o.z,power));
}

public static Object invokeStatic(String clazz,String methodName,Class[] types,Object[] values) throws NoSuchMethodException {
  try {
    return invokeStatic(Class.forName(clazz),methodName,types,values);
  }
 catch (  ClassNotFoundException e) {
    throw new NoSuchMethodException("class " + clazz + " not found");
  }
}

public Prototype undump(InputStream stream,String chunkname) throws IOException {
  if (stream.read() != LUA_SIGNATURE[0] || stream.read() != LUA_SIGNATURE[1] || stream.read() != LUA_SIGNATURE[2] || stream.read() != LUA_SIGNATURE[3])   return null;
  String sname=getSourceName(chunkname);
  LoadState s=new LoadState(stream,sname);
  s.loadHeader();
switch (s.luacNumberFormat) {
case NUMBER_FORMAT_FLOATS_OR_DOUBLES:
case NUMBER_FORMAT_INTS_ONLY:
case NUMBER_FORMAT_NUM_PATCH_INT32:
    break;
default :
  throw new LuaError("unsupported int size");
}
return s.loadFunction(LuaString.valueOf(sname));
}

public void addButton(URL url,String info,ActionListener al){
  JButton b=new JButton(new ImageIcon(url,info));
  b.setToolTipText(info);
  b.setMargin(new Insets(0,0,0,0));
  b.addActionListener(al);
  b.setBorderPainted(false);
  add(b);
}

private void mapRequestToResponses(Matcher<Request> requestMatcher,ResponseSource responses){
  mappings.add(new MatcherResponseSourcePair(requestMatcher,responses));
}

@Override protected void commitToInput(){
  JmxBeanSensorAssignment assignment=getInput();
  if (null != assignment) {
    assignment.setDomain(domainText.getText());
    assignment.setObjectNameParameters(new HashMap<>(parametersMap));
    if (allAttributesButton.getSelection()) {
      assignment.setAttributes(Collections.<String>emptySet());
    }
 else {
      assignment.setAttributes(new HashSet<>(attributesSet));
    }
  }
}

public static String[] split(String original,String separator){
  Vector nodes=new Vector();
  int index=original.indexOf(separator);
  while (index >= 0) {
    nodes.addElement(original.substring(0,index));
    original=original.substring(index + separator.length());
    index=original.indexOf(separator);
  }
  nodes.addElement(original);
  String[] ret=new String[nodes.size()];
  for (int i=0; i < nodes.size(); i++) {
    ret[i]=(String)nodes.elementAt(i);
  }
  return ret;
}

public void insertTwin(Instruction inst,Instruction twin){
  ListIterator<GCIRMapElement> iter=list.listIterator();
  while (iter.hasNext()) {
    GCIRMapElement newPtr=iter.next();
    if (newPtr.getInstruction() == inst) {
      iter.add(newPtr.createTwin(twin));
      return;
    }
  }
  throw new OptimizingCompilerException("GCIRMap.createTwin: " + inst + " not found");
}

public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException {
  Object o=newInstanceImpl();
  if (o == null) {
    throw new InstantiationException();
  }
  return o;
}

FormatSpecifierParser(String format){
  this.format=format;
  this.length=format.length();
}

public static void toString(Iterator<?> iter,String separator,StringBuilder sb){
  while (iter.hasNext()) {
    sb.append(iter.next());
    if (iter.hasNext()) {
      sb.append(separator);
    }
  }
}

public boolean isFull(){
  if (maxSize > 0 && notifications.size() >= maxSize) {
    return true;
  }
  return false;
}

private void schedulePlaylistSave(){
  if (!mPlaylistLoading) {
    if (mPlaylistSavePending.compareAndSet(false,true)) {
      mThreadPoolManager.scheduleOnce(new PlaylistSaveTask(),2,TimeUnit.SECONDS);
    }
  }
}

public boolean isToRead(){
  Iterator<VariableValue> i=variables.iterator();
  while (i.hasNext()) {
    VariableValue v=i.next();
    if (v.isToRead()) {
      return true;
    }
  }
  return false;
}

public void actionPerformed(ActionEvent e){
  navigateToPriorDemo();
}

public String toString(){
  StringBuffer text=new StringBuffer();
  for (int i=0; i < m_Elements.length; i++) {
    if (i > 0)     text.append(",");
    text.append(Utils.doubleToString(m_Elements[i],6));
  }
  text.append("\n");
  return text.toString();
}

@Deprecated public static Integer Integer(int i){
  return Integer.valueOf(i);
}

public void or(Criteria criteria){
  oredCriteria.add(criteria);
}

public static void v(String tag,String msg,Object... args){
  if (sLevel > LEVEL_VERBOSE) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.v(tag,msg);
}

public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (VERBOSE) {
              Util.verbose("-> got the following exception while saving:",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}

private double match_bitapScore(int e,int x,int loc,String pattern){
  float accuracy=(float)e / pattern.length();
  int proximity=Math.abs(loc - x);
  if (Match_Distance == 0) {
    return proximity == 0 ? accuracy : 1.0;
  }
  return accuracy + (proximity / (float)Match_Distance);
}

private void movePos(float deltaY){
  if ((deltaY < 0 && mPtrIndicator.isInStartPosition())) {
    if (DEBUG) {
      PtrCLog.e(LOG_TAG,String.format("has reached the top"));
    }
    return;
  }
  int to=mPtrIndicator.getCurrentPosY() + (int)deltaY;
  if (mPtrIndicator.willOverTop(to)) {
    if (DEBUG) {
      PtrCLog.e(LOG_TAG,String.format("over top"));
    }
    to=PtrIndicator.POS_START;
  }
  mPtrIndicator.setCurrentPos(to);
  int change=to - mPtrIndicator.getLastPosY();
  updatePos(change);
}

public void putAll(Map<? extends K,? extends V> m){
  tryPresize(m.size());
  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   putVal(e.getKey(),e.getValue(),false);
}

public UndoableEdit insertString(int where,String str) throws BadLocationException {
  if (where >= count || where < 0) {
    throw new BadLocationException("Invalid location",count);
  }
  char[] chars=str.toCharArray();
  replace(where,0,chars,0,chars.length);
  if (marks != null) {
    updateMarksForInsert(where,str.length());
  }
  return new InsertUndo(where,str.length());
}

public String toString(){
  return Byte.toString(getValue());
}

boolean writeData() throws IOException {
  int tosend;
  int sent;
  byte[] block=new byte[kBlockSize];
  do {
    tosend=Math.min(sendStreamSize - totalSent,block.length);
    System.arraycopy(sendData,totalSent,block,0,tosend);
    if (tosend > 0) {
      sent=localSend(block,tosend);
      updateLocalClock();
      if (sent != -1) {
        totalSent+=sent;
      }
 else {
        logger.log(Level.FINE,"Flow Controlled");
      }
    }
 else {
      sent=tosend=0;
    }
  }
 while (sent > 0);
  if (logger.isLoggable(Level.FINER)) {
    logger.log(Level.FINER,"Sent: " + totalSent + " remaining: "+ (sendStreamSize - totalSent));
  }
  return tosend == 0;
}

public static int copyAndCloseOutput(Reader input,Writer output) throws IOException {
  try {
    return copy(input,output);
  }
  finally {
    output.close();
  }
}

public int checkBookiesUp(int count,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> children=zkc.getChildren("/ledgers/available",false);
        children.remove("readonly");
        mostRecentSize=children.size();
        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {
          LOG.info("Found " + mostRecentSize + " bookies up, "+ "waiting for "+ count);
          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {
            for (            String child : children) {
              LOG.info(" server: " + child);
            }
          }
        }
        if (mostRecentSize == count) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}

public Point2D inverseTransform(Point2D src,Point2D dst){
  try {
    src.setLocation(src.getX() + rotXOffset,src.getY() + rotYOffset);
    dst=rotTransform.inverseTransform(src,dst);
  }
 catch (  NoninvertibleTransformException e) {
    logger.log(Level.FINE,e.getMessage(),e);
  }
  return dst;
}

public static Throwable shouldFail(Class clazz,Closure code){
  Throwable th=null;
  try {
    code.call();
  }
 catch (  GroovyRuntimeException gre) {
    th=ScriptBytecodeAdapter.unwrap(gre);
  }
catch (  Throwable e) {
    th=e;
  }
  if (th == null) {
    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName());
  }
 else   if (!clazz.isInstance(th)) {
    fail("Closure " + code + " should have failed with an exception of type "+ clazz.getName()+ ", instead got Exception "+ th);
  }
  return th;
}

public int write(byte[] destMac,byte[] packet,int offset,int byteCount){
  if (destMac == null) {
    throw new NullPointerException("destMac == null");
  }
  if (packet == null) {
    throw new NullPointerException("packet == null");
  }
  Arrays.checkOffsetAndCount(packet.length,offset,byteCount);
  if (destMac.length != 6) {
    throw new IllegalArgumentException("MAC length must be 6: " + destMac.length);
  }
  return sendPacket(fd,mInterfaceName,mProtocolType,destMac,packet,offset,byteCount);
}

private Boolean processYESNO(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {
  if (!(value.equals("yes") || value.equals("no"))) {
    handleError(handler,XSLTErrorResources.INVALID_BOOLEAN,new Object[]{name,value},null);
    return null;
  }
  return new Boolean(value.equals("yes") ? true : false);
}

protected ArrayList<KeyNamePair> loadRMAData(int C_BPartner_ID){
  ArrayList<KeyNamePair> list=new ArrayList<KeyNamePair>();
  String sqlStmt="SELECT r.M_RMA_ID, r.DocumentNo || '-' || r.Amt from M_RMA r " + "WHERE ISSOTRX='N' AND r.DocStatus in ('CO', 'CL') " + "AND r.C_BPartner_ID=? "+ "AND NOT EXISTS (SELECT * FROM C_Invoice inv "+ "WHERE inv.M_RMA_ID=r.M_RMA_ID AND inv.DocStatus IN ('CO', 'CL'))";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sqlStmt,null);
    pstmt.setInt(1,C_BPartner_ID);
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      list.add(new KeyNamePair(rs.getInt(1),rs.getString(2)));
    }
    rs.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sqlStmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception ex) {
        log.severe("Could not close prepared statement");
      }
    }
  }
  return list;
}

@Override public List<WorkOrder> searchWOForBilling(final Map<String,Object> criteriaMap){
  logger.debug("-------------------------Inside searchWOForBilling-----------------------");
  final List<WorkOrder> filteredList=new ArrayList<WorkOrder>();
  criteriaMap.put(ACTION_FLAG,"searchWOForBilling");
  for (  final WorkOrder workorder : searchWO(criteriaMap))   if (!isWOValidforBill(workorder.getId()))   filteredList.add(workorder);
  return filteredList;
}

public Week(Date time,TimeZone zone,Locale locale){
  ParamChecks.nullNotPermitted(time,"time");
  ParamChecks.nullNotPermitted(zone,"zone");
  ParamChecks.nullNotPermitted(locale,"locale");
  Calendar calendar=Calendar.getInstance(zone,locale);
  calendar.setTime(time);
  int tempWeek=calendar.get(Calendar.WEEK_OF_YEAR);
  if (tempWeek == 1 && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
    this.week=1;
    this.year=(short)(calendar.get(Calendar.YEAR) + 1);
  }
 else {
    this.week=(byte)Math.min(tempWeek,LAST_WEEK_IN_YEAR);
    int yyyy=calendar.get(Calendar.YEAR);
    if (calendar.get(Calendar.MONTH) == Calendar.JANUARY && this.week >= 52) {
      yyyy--;
    }
    this.year=(short)yyyy;
  }
  peg(calendar);
}

public ResourceQueue(final NonBlockingLockManagerWithNewDesign<R> lockService,final R resource){
  if (lockService == null)   throw new IllegalArgumentException();
  if (resource == null)   throw new IllegalArgumentException();
  this.lockService=lockService;
  this.resource=resource;
  this.queue=new LinkedBlockingQueue<T>();
  this.statisticsTask=new QueueSizeMovingAverageTask(resource.toString(),queue);
}

public void encodeAndSign(X500Name subject,Signature signature) throws CertificateException, IOException, SignatureException {
  DerOutputStream out, scratch;
  byte[] certificateRequestInfo;
  byte[] sig;
  if (encoded != null)   throw new SignatureException("request is already signed");
  this.subject=subject;
  scratch=new DerOutputStream();
  scratch.putInteger(BigInteger.ZERO);
  subject.encode(scratch);
  scratch.write(subjectPublicKeyInfo.getEncoded());
  attributeSet.encode(scratch);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  certificateRequestInfo=out.toByteArray();
  scratch=out;
  signature.update(certificateRequestInfo,0,certificateRequestInfo.length);
  sig=signature.sign();
  AlgorithmId algId=null;
  try {
    algId=AlgorithmId.get(signature.getAlgorithm());
  }
 catch (  NoSuchAlgorithmException nsae) {
    throw new SignatureException(nsae);
  }
  algId.encode(scratch);
  scratch.putBitString(sig);
  out=new DerOutputStream();
  out.write(DerValue.tag_Sequence,scratch);
  encoded=out.toByteArray();
}

public synchronized void schedulePeriodicTask(TimerTask task,long period){
  try {
    m_timer.scheduleAtFixedRate(task,0,period);
  }
 catch (  IllegalStateException ie) {
    m_timer=new Timer();
    m_timer.scheduleAtFixedRate(task,0,period);
  }
}

public static String abbreviate(String str,FontMetrics fm,int width){
  int lastblank=0, nchars=0, cumx=0;
  while (cumx < width && nchars < str.length()) {
    if (Character.isWhitespace(str.charAt(nchars))) {
      lastblank=nchars;
    }
    cumx+=fm.charWidth(str.charAt(nchars));
    nchars++;
  }
  if (nchars < str.length() && lastblank > 0) {
    nchars=lastblank;
  }
  return (nchars > 0 ? str.substring(0,nchars) : str);
}

protected void stopWraparoundTest(){
  if (testRunning && wrapTest) {
    wrapTimer.stop();
    statusText1.setText("Wraparound Test Stopped, " + Integer.toString(numErrors) + " Errors Found");
    statusText1.setVisible(true);
    statusText2.setText(Integer.toString(numIterations) + " Cycles Completed");
    statusText2.setVisible(true);
  }
}

protected void checkRowIndex(final int row) throws MathIllegalArgumentException {
  if (row < 0 || row >= getRowDimension()) {
    throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX,row,0,getRowDimension() - 1);
  }
}

private void nukeSymbols(){
  _count=0;
  _longestCollisionList=0;
  Arrays.fill(_mainHash,0);
  Arrays.fill(_mainNames,null);
  Arrays.fill(_collList,null);
  _collCount=0;
  _collEnd=0;
}

private static float determineEnemyBlitzStrength(final Territory blitzHere,final List<Route> blitzTerrRoutes,final List<Territory> blockTerr,final GameData data,final PlayerID ePlayer){
  final HashSet<Integer> ignore=new HashSet<>();
  ignore.add(1);
  final CompositeMatch<Unit> blitzUnit=new CompositeMatchAnd<>(Matches.unitIsOwnedBy(ePlayer),Matches.UnitCanBlitz,Matches.UnitCanMove);
  final CompositeMatch<Territory> validBlitzRoute=new CompositeMatchAnd<>(Matches.territoryHasNoEnemyUnits(ePlayer,data),Matches.TerritoryIsNotImpassableToLandUnits(ePlayer,data));
  final List<Route> routes=new ArrayList<>();
  final List<Unit> blitzUnits=findAttackers(blitzHere,2,ignore,ePlayer,data,blitzUnit,validBlitzRoute,blockTerr,routes,false);
  for (  final Route r : routes) {
    if (r.numberOfSteps() == 2) {
      blitzTerrRoutes.add(r);
    }
  }
  return strength(blitzUnits,true,false,true);
}

public Name join(String identifier){
  validateLowerUnderscore(identifier);
  List<NamePiece> newPieceList=new ArrayList<>();
  newPieceList.addAll(namePieces);
  newPieceList.add(new NamePiece(identifier,CaseFormat.LOWER_UNDERSCORE));
  return new Name(newPieceList);
}

private LocalDateTime parseDate(String dateStr,boolean tryAgain){
  LocalDateTime date=LocalDateTime.now(ZoneId.of("GMT"));
  if (mDateTimeFormatter == null) {
    initFormatter(dateStr);
  }
  if (mDateTimeFormatter != null) {
    try {
      date=LocalDateTime.parse(dateStr,mDateTimeFormatter);
    }
 catch (    DateTimeParseException e) {
      Timber.d(String.format("ParseException parsing date: %s",dateStr));
      if (tryAgain) {
        Timber.d("ParseException encountered, re-initializing the date parser");
        mDateTimeFormatter=null;
        parseDate(dateStr,false);
      }
    }
  }
  return date;
}

public String toString(){
  String string=caller;
  if (level > 0 || thread != -1) {
    string+="[";
  }
  if (level > 0) {
    string+=level;
  }
  if (thread != -1) {
    string+="," + thread;
  }
  if (level > 0 || thread != -1) {
    string+="]";
  }
  string+=":";
  if (spawnMessage) {
    string+=">";
  }
  if (answer.length() > 0) {
    string+=answer + "=";
  }
  if (callee.length() > 0) {
    string+=callee + ".";
  }
  string+=message;
  if (returnsInstantly) {
    string+="&";
  }
  return string;
}

public static boolean isWhiteSpace(int c){
switch (c) {
case NUL_CHAR:
case '\t':
case '\n':
case FF_CHAR:
case '\r':
case ' ':
    return true;
default :
  return false;
}
}

public void remove(RequestFilter filter){
  filters.remove(filter);
}

protected void removeClassifiers(int[] indices){
  int i;
  if (indices == null) {
    m_ModelClassifiers.removeAllElements();
  }
 else {
    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);
  }
  setModified(true);
}

@Override public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

public int numCheckpoints(){
  return checkpoints.size();
}

public void addElement(Object anObject){
  p_data.add(anObject);
  fireIntervalAdded(this,p_data.size() - 1,p_data.size() - 1);
  if (p_data.size() == 1 && m_selectedObject == null && anObject != null)   setSelectedItem(anObject);
}

public Builder addListenUrls(List<String> urls){
  List<String> needAdd=new ArrayList<String>();
  for (  String url : urls) {
    if (!UrlUtil.isUrl(url)) {
      continue;
    }
    needAdd.add(url);
  }
  if (!CollectionUtil.isEmpty(needAdd)) {
    if (mListenUrls == null) {
      mListenUrls=new HashSet<String>();
    }
    mListenUrls.addAll(needAdd);
  }
  return this;
}

public void addAssignedVirtualArrays(Set<String> virtualArrayURIs){
  if ((virtualArrayURIs != null) && (!virtualArrayURIs.isEmpty())) {
    HashSet<String> addVirtualArrays=new HashSet<String>();
    addVirtualArrays.addAll(virtualArrayURIs);
    if (_assignedVirtualArrays == null) {
      setAssignedVirtualArrays(new StringSet());
      _assignedVirtualArrays.addAll(addVirtualArrays);
    }
 else {
      _assignedVirtualArrays.addAll(addVirtualArrays);
    }
    updateVirtualArrayTags();
  }
}

@Override public boolean isCellEditable(int row,int column){
  EnvVar envVar=dataList.get(row);
  if (column == COL_VALUE) {
    return true;
  }
  return !envVar.isPredefined();
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 150) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

private boolean dropInTrash(){
  if (mHighlightedBlockView != null) {
    mHighlightedBlockView.setHighlightedConnection(null);
    mHighlightedBlockView=null;
  }
  mDraggedConnections.clear();
  return mController.trashRootBlock(mPendingDrag.getRootDraggedBlock());
}

<T>List<T> concatValues(final T[]... data){
  final List<T> rv=new ArrayList<>();
  for (  T[] values : data) {
    rv.addAll(Arrays.asList(values));
  }
  return rv;
}

public DagIterator(Graph pattern){
  for (  Edge edge : pattern.getEdges()) {
    if (Edges.isDirectedEdge(edge) || Edges.isUndirectedEdge(edge)) {
      continue;
    }
    throw new IllegalArgumentException("The graph may consist only of " + "directed and undirected edges: " + edge);
  }
  decoratedGraphs.add(new DecoratedGraph(pattern));
}

private boolean validateCustomCatalog(String title,String value){
  return false;
}

public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> q,int poolSize,PoolStatHelper stats,ThreadFactory tf){
  this(q,poolSize,stats,tf,Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "IDLE_THREAD_TIMEOUT",30000 * 60),false);
}

protected boolean isSSDPDiscovery(String body){
  if (body != null && body.startsWith("M-SEARCH * HTTP/1.1") && body.contains("MAN: \"ssdp:discover\"")) {
    return true;
  }
  return false;
}

@Override public void addChild(WXComponent child,int index){
  if (child == null || index < -1) {
    return;
  }
  if (child instanceof WXBaseRefresh) {
    if (!checkRefreshOrLoading(child)) {
      mRefreshs.add(child);
    }
    return;
  }
  if (mChildren == null) {
    mChildren=new ArrayList<>();
  }
  int count=mChildren.size();
  index=index >= count ? -1 : index;
  if (index == -1) {
    mChildren.add(child);
  }
 else {
    mChildren.add(index,child);
  }
}

private void restoreSortingSelection(int[] selection,int lead,ModelChange change){
  for (int i=selection.length - 1; i >= 0; i--) {
    selection[i]=convertRowIndexToView(selection[i],change);
  }
  lead=convertRowIndexToView(lead,change);
  if (selection.length == 0 || (selection.length == 1 && selection[0] == getSelectedRow())) {
    return;
  }
  selectionModel.setValueIsAdjusting(true);
  selectionModel.clearSelection();
  for (int i=selection.length - 1; i >= 0; i--) {
    if (selection[i] != -1) {
      selectionModel.addSelectionInterval(selection[i],selection[i]);
    }
  }
  SwingUtilities2.setLeadAnchorWithoutSelection(selectionModel,lead,lead);
  selectionModel.setValueIsAdjusting(false);
}

public synchronized byte[] toByteArray(){
  int remaining=count;
  if (remaining == 0) {
    return EMPTY_BYTE_ARRAY;
  }
  byte newbuf[]=new byte[remaining];
  int pos=0;
  for (  byte[] buf : buffers) {
    int c=Math.min(buf.length,remaining);
    System.arraycopy(buf,0,newbuf,pos,c);
    pos+=c;
    remaining-=c;
    if (remaining == 0) {
      break;
    }
  }
  return newbuf;
}

@After public void clean(){
  mute(null);
  mute(null);
  mute(null);
}

public void consume(int eventCount,long timeoutInMillis,Predicate<Event> condition) throws TimeoutException {
  if (eventCount < 0)   throw new IllegalArgumentException("The eventCount may not be negative");
  if (eventCount == 0)   return;
  int eventsRemaining=eventCount;
  final long stopTime=System.currentTimeMillis() + timeoutInMillis;
  while (eventsRemaining > 0 && System.currentTimeMillis() < stopTime) {
    Event nextEvent=queue.poll();
    if (nextEvent != null) {
      if (condition.test(nextEvent)) {
        --eventsRemaining;
        consumedEvents.accept(nextEvent);
      }
 else {
        ignoredEvents.accept(nextEvent);
      }
    }
  }
  if (eventsRemaining > 0) {
    throw new TimeoutException("Received " + (eventCount - eventsRemaining) + " of "+ eventCount+ " in "+ timeoutInMillis+ "ms");
  }
}

private void updateUiFromCommand(Command command){
  if (command == null) {
    return;
  }
  actionsComboBox.setText(command.getAction());
  dataTextField.setText(command.getData());
  categoryTextField.setText(command.getCategory());
  mimeTextField.setText(command.getMimeType());
  componentTextField.setText(command.getComponent());
  userTextField.setText(command.getUser());
  flagsList_.removeSelectionInterval(0,flagsList_.getItemsCount());
  List<IntentFlags> flags=command.getFlags();
  if (flags != null && flags.size() > 0) {
    for (    IntentFlags flag : command.getFlags()) {
      flagsList_.setSelectedValue(flag,false);
    }
  }
 else {
    flagsList_.setSelectedIndex(0);
  }
  updateFlagsTextField();
  tableModel_.removeAllRows();
  List<ExtraField> extras=command.getExtras();
  if (extras != null && extras.size() > 0) {
    for (    ExtraField extra : extras) {
      tableModel_.addRow(extra);
    }
  }
  updateTableVisibility();
}

public void testCompareToZeroZero(){
  BigInteger aNumber=BigInteger.ZERO;
  BigInteger bNumber=BigInteger.ZERO;
  assertEquals(0,aNumber.compareTo(bNumber));
}

public static int randGaussian(final int mean,final int sd){
  return (int)(rand.nextGaussian() * sd + mean);
}

private float computeOverscrollPercent(){
  if (mOverScrollOffset >= 0) {
    return mOverScrollOffset / mMaxOverScroll;
  }
 else {
    return mOverScrollOffset / mMaxUnderScroll;
  }
}

public IVector(int c){
  vector=new int[Math.max(defaultCapacity,c)];
}

public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){
  final Request request=requestEvent.getRequest();
  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();
  ServerTransaction st=serverTransaction;
  try {
    if (st == null) {
      try {
        st=sipProvider.getNewServerTransaction(request);
      }
 catch (      TransactionUnavailableException tae) {
        tae.printStackTrace();
        return;
      }
catch (      TransactionAlreadyExistsException taex) {
        return;
      }
    }
    final String toTag="" + System.nanoTime();
    Response response=messageFactory.createResponse(Response.RINGING,request);
    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
    response=messageFactory.createResponse(Response.OK,request);
    final Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");
    final ContactHeader contactHeader=headerFactory.createContactHeader(address);
    response.addHeader(contactHeader);
    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);
    toHeader.setTag(toTag);
    st.sendResponse(response);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
}

public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Object obj){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(obj.getClass()));
    log=logRef.get();
  }
  return log;
}

protected boolean readReceiveDelay(){
  try {
    receiveDelay=Integer.parseInt(receiveDelayField.getText());
  }
 catch (  Exception e) {
    statusText1.setText(rb.getString("Error7"));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay < 0) {
    statusText1.setText(rb.getString("Error8"));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  if (receiveDelay > 65535) {
    statusText1.setText(rb.getString("Error9"));
    statusText1.setVisible(true);
    receiveDelay=0;
    errorInStatus1=true;
    resetNotes2();
    return (false);
  }
  return true;
}

private void writeIndent(int times) throws IOException {
  for (int i=options.getBaseIndent() + times; i > 0; i--) {
    writer.write(options.getIndent());
  }
}

@Override public int hashCode(){
  int result=1;
  Iterator<?> it=iterator();
  while (it.hasNext()) {
    Object object=it.next();
    result=(31 * result) + (object == null ? 0 : object.hashCode());
  }
  return result;
}

public static int parseString(String value){
  return Integer.parseInt(value);
}

void doHandleJavaMouseEvent(MouseEvent mouseEvent){
  if (!XToolkit.isLeftMouseButton(mouseEvent) && !XToolkit.isRightMouseButton(mouseEvent)) {
    return;
  }
  XBaseWindow grabWindow=XAwtState.getGrabWindow();
  Point ptGlobal=mouseEvent.getLocationOnScreen();
  if (!hasPointerMoved) {
    if (grabInputPoint == null || (Math.abs(ptGlobal.x - grabInputPoint.x) > getMouseMovementSmudge()) || (Math.abs(ptGlobal.y - grabInputPoint.y) > getMouseMovementSmudge())) {
      hasPointerMoved=true;
    }
  }
  XBaseMenuWindow wnd=getMenuWindowFromPoint(ptGlobal);
  XMenuItemPeer item=(wnd != null) ? wnd.getItemFromPoint(wnd.toLocal(ptGlobal)) : null;
  XBaseMenuWindow cwnd=getShowingLeaf();
switch (mouseEvent.getID()) {
case MouseEvent.MOUSE_PRESSED:
    showingMousePressedSubmenu=null;
  if ((grabWindow == this) && (wnd == null)) {
    ungrabInput();
  }
 else {
    grabInput();
    if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
      if (wnd.getShowingSubmenu() == item) {
        showingMousePressedSubmenu=(XMenuPeer)item;
      }
      wnd.selectItem(item,true);
    }
 else {
      if (wnd != null) {
        wnd.selectItem(null,false);
      }
    }
  }
break;
case MouseEvent.MOUSE_RELEASED:
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (item instanceof XMenuPeer) {
  if (showingMousePressedSubmenu == item) {
    if (wnd instanceof XMenuBarPeer) {
      ungrabInput();
    }
 else {
      wnd.selectItem(item,false);
    }
  }
}
 else {
  item.action(mouseEvent.getWhen());
  ungrabInput();
}
}
 else {
if (hasPointerMoved || (wnd instanceof XMenuBarPeer)) {
  ungrabInput();
}
}
showingMousePressedSubmenu=null;
break;
case MouseEvent.MOUSE_DRAGGED:
if (wnd != null) {
if (item != null && !item.isSeparator() && item.isTargetItemEnabled()) {
if (grabWindow == this) {
wnd.selectItem(item,true);
}
}
 else {
wnd.selectItem(null,false);
}
}
 else {
if (cwnd != null) {
cwnd.selectItem(null,false);
}
}
break;
}
}

public boolean isInvalidNode(){
  ASTNode first=fNodes.get(0);
  ASTNode candidate=first.getParent();
  if (candidate == null)   return false;
  if (candidate.getNodeType() == ASTNode.METHOD_DECLARATION)   return true;
  return false;
}

public void push(final float value){
  int bits=Float.floatToIntBits(value);
  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {
    mv.visitInsn(Opcodes.FCONST_0 + (int)value);
  }
 else {
    mv.visitLdcInsn(value);
  }
}

public void onMotion(MotionEvent event,Interaction iact){
}

public synchronized void removeBatchClustererListener(BatchClustererListener cl){
  m_batchClustererListeners.remove(cl);
}

public HeldLocksGrant refresh(long expirationDateMs){
  return new HeldLocksGrant(grantId,creationDateMs,expirationDateMs,lockMap,lockTimeout,versionId);
}

void removeKnownObject(ParseObject object){
synchronized (mutex) {
    knownObjects.remove(object);
  }
}

static HeapBytesStore<byte[]> wrap(@NotNull byte[] bytes){
  return HeapBytesStore.wrap(bytes);
}

private static String parse(JsonValue base){
  if (!base.isString()) {
    return null;
  }
  return buildString(base.asString());
}

public void testValueOfLongNegative2(){
  long longVal=-58930018L;
  BigInteger aNumber=BigInteger.valueOf(longVal);
  byte rBytes[]={-4,124,-52,-98};
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,aNumber.signum());
}

public void beforeInsert(int index,char element){
  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);
  ensureCapacity(size + 1);
  System.arraycopy(elements,index,elements,index + 1,size - index);
  elements[index]=element;
  size++;
}

private void growEntries(){
  int newLen=(next.length << 1) + 1;
  int[] newNext=new int[newLen];
  GridUnsafe.copyMemory(next,INT_ARR_OFF,newNext,INT_ARR_OFF,size << 2);
  next=newNext;
  nextEmpty=new int[newLen];
  Arrays.fill(nextEmpty,-1);
  Object[] newObjs=new Object[newLen];
  System.arraycopy(objs,0,newObjs,0,size);
  objs=newObjs;
}

public SidedPlane(final Vector p,final boolean onSide,final Vector A,final Vector B){
  super(A,B);
  sigNum=onSide ? Math.signum(evaluate(p)) : -Math.signum(evaluate(p));
  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");
}

public static boolean isInputStreamGZIPCompressed(final PushbackInputStream inputStream) throws IOException {
  if (inputStream == null)   return false;
  byte[] signature=new byte[2];
  int readStatus=inputStream.read(signature);
  inputStream.unread(signature);
  int streamHeader=((int)signature[0] & 0xff) | ((signature[1] << 8) & 0xff00);
  return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader;
}

void insertOp(int pos,int length,int op){
  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);
  for (int i=totalLen - 1; i >= pos; i--) {
    m_ops.setOp(i + length,m_ops.getOp(i));
  }
  m_ops.setOp(pos,op);
  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);
}

private void clear(){
  valid=false;
  if ((listenerObjects == null) || listenerObjects.isEmpty()) {
    deregisterListener();
  }
  ssm=null;
  if (SMSEntry.cacheSMSEntries) {
    orgConfigs.clear();
    globalConfigs.clear();
  }
}

public static void registerDecayableObject(Decayable obj){
  decayObjects.add(obj);
}

public static void assertExpectedOutputContains(String expectedString,String x){
  if (!x.contains(expectedString)) {
    fail("expected '" + expectedString + "' not found in '"+ x+ "'");
  }
}

public boolean remove(String classname){
  String pkgname;
  HashSet<String> names;
  classname=cleanUp(classname);
  pkgname=extractPackage(classname);
  names=m_Cache.get(pkgname);
  if (names != null) {
    return names.remove(classname);
  }
 else {
    return false;
  }
}

public void testFailedStage(){
  CFException ex=new CFException();
  CompletionStage<Integer> f=CompletableFuture.failedStage(ex);
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  f.whenComplete(null);
  assertEquals(x.get(),0);
  assertEquals(r.get(),ex);
}

@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g;
  graphics.setBackground(mColorSpectrumBackground);
  RenderingHints renderHints=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  renderHints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
  graphics.setRenderingHints(renderHints);
  drawFrequencies(graphics);
  drawCursor(graphics);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public void classLoaderDestroy(DynamicClassLoader loader){
  Method destroy=getDestroyMethod(_resource.getClass());
  if (destroy == null)   return;
  try {
    destroy.invoke(_resource);
  }
 catch (  Throwable e) {
    log.log(Level.WARNING,e.toString(),e);
  }
}

public boolean deleteAttachmentPoint(DatapathId sw,OFPort port){
  AttachmentPoint ap=new AttachmentPoint(sw,port,new Date(0));
  if (this.oldAPs != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.oldAPs);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.oldAPs=apList;
    }
  }
  if (this.attachmentPoints != null) {
    ArrayList<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
    apList.addAll(this.attachmentPoints);
    int index=apList.indexOf(ap);
    if (index > 0) {
      apList.remove(index);
      this.attachmentPoints=apList;
      return true;
    }
  }
  return false;
}

static boolean isAssignableTo(ClassNode type,ClassNode toBeAssignedTo){
  if (UNKNOWN_PARAMETER_TYPE == type)   return true;
  if (type == toBeAssignedTo)   return true;
  if (toBeAssignedTo.redirect() == STRING_TYPE && type.redirect() == GSTRING_TYPE) {
    return true;
  }
  if (isPrimitiveType(toBeAssignedTo))   toBeAssignedTo=getWrapper(toBeAssignedTo);
  if (isPrimitiveType(type))   type=getWrapper(type);
  if (Double_TYPE == toBeAssignedTo) {
    return type.isDerivedFrom(Number_TYPE);
  }
  if (Float_TYPE == toBeAssignedTo) {
    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect();
  }
  if (Long_TYPE == toBeAssignedTo) {
    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect();
  }
  if (Integer_TYPE == toBeAssignedTo) {
    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect();
  }
  if (Short_TYPE == toBeAssignedTo) {
    return type.isDerivedFrom(Number_TYPE) && Double_TYPE != type.redirect() && Float_TYPE != type.redirect() && Long_TYPE != type.redirect() && Integer_TYPE != type.redirect();
  }
  if (Byte_TYPE == toBeAssignedTo) {
    return type.redirect() == Byte_TYPE;
  }
  if (type.isArray() && toBeAssignedTo.isArray()) {
    return isAssignableTo(type.getComponentType(),toBeAssignedTo.getComponentType());
  }
  if (type.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(toBeAssignedTo)) {
    return true;
  }
  if (toBeAssignedTo.isDerivedFrom(GSTRING_TYPE) && STRING_TYPE.equals(type)) {
    return true;
  }
  if (implementsInterfaceOrIsSubclassOf(type,toBeAssignedTo)) {
    if (OBJECT_TYPE.equals(toBeAssignedTo))     return true;
    if (toBeAssignedTo.isUsingGenerics()) {
      GenericsType gt=GenericsUtils.buildWildcardType(toBeAssignedTo);
      return gt.isCompatibleWith(type);
    }
    return true;
  }
  if (type.isDerivedFrom(CLOSURE_TYPE) && isSAMType(toBeAssignedTo)) {
    return true;
  }
  return false;
}

public synchronized int totalRecoverFiles(){
  int total=0;
  for (  File file : fileDetails.values()) {
    if (file.reused() == false) {
      total++;
    }
  }
  return total;
}

public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {
  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);
  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);
  List<Mesh> list=new ArrayList<>();
  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {
    Mesh mesh=generateMesh(md5Model,md5Mesh);
    handleTexture(mesh,md5Mesh,defaultColour);
    list.add(mesh);
  }
  Mesh[] meshes=new Mesh[list.size()];
  meshes=list.toArray(meshes);
  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);
  return result;
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

@Override @Timed public void deleteAssignment(Experiment experiment,User.ID userID,Context context,Application.Name appName,Assignment currentAssignment){
  deleteUserFromLookUp(experiment.getID(),userID,context);
  boolean countUp=false;
  assignmentsCountExecutor.execute(new AssignmentCountEnvelope(assignmentsRepository,experimentRepository,dbRepository,experiment,currentAssignment,countUp,eventLog,null,assignUserToExport,assignBucketCount));
  deleteAssignmentOld(experiment.getID(),userID,context,appName,currentAssignment.getBucketLabel());
  removeIndexUserToExperiment(userID,experiment.getID(),context,appName);
  removeIndexUserToBucket(userID,experiment.getID(),context,currentAssignment.getBucketLabel());
  removeIndexExperimentsToUser(userID,experiment.getID(),context,appName);
}

String format(Object obj,StringBuffer toAppendTo) throws IllegalArgumentException {
  Date source=null;
  if (obj instanceof Date) {
    source=(Date)obj;
  }
 else   if (obj instanceof String) {
    try {
      source=parse((String)obj);
    }
 catch (    ParseException pe) {
      throw new RuntimeException(pe.toString());
    }
  }
  if (source == null) {
    throw new IllegalArgumentException((obj == null) ? "null" : obj.toString());
  }
  return format(source,toAppendTo);
}

private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){
  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);
}

public static ThreadDump create(){
  ThreadDump threadDump=_threadDumpRef.get();
  if (threadDump == null) {
    threadDump=new ThreadDumpPro();
    _threadDumpRef.compareAndSet(null,threadDump);
    threadDump=_threadDumpRef.get();
  }
  return threadDump;
}

private void checkStart(){
  if (mCanProcessAudio && !mOutput.isRunning() && mOutput.available() <= mBufferStartThreshold) {
    mOutput.start();
  }
}

protected boolean matchesFilter(final String input,final String[] filter){
  for (  final String match : filter) {
    if (!input.contains(match))     return false;
  }
  return true;
}

private E unlinkFirst(){
  Node<E> f=first;
  if (f == null)   return null;
  Node<E> n=f.next;
  E item=f.item;
  f.item=null;
  f.next=f;
  first=n;
  if (n == null)   last=null;
 else   n.prev=null;
  --count;
  notFull.signal();
  return item;
}

public IStatus run(IProgressMonitor monitor){
  InputStream input=null;
  FileOutputStream output=null;
  IStatus jobStatus=Status.OK_STATUS;
  byte[] b=new byte[1024];
  int bytesRead;
  try {
    HttpURLConnection connection=(HttpURLConnection)url.openConnection();
    input=url.openStream();
    long totalBytesRead=0L;
    int responseStatusCode=connection.getResponseCode();
    if (responseStatusCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,MessageFormat.format("Remote ServerError: {0} ({1})",responseStatusCode,connection.getResponseMessage()));
    }
    long contentLength=connection.getContentLength();
    output=new FileOutputStream(target);
    monitor.beginTask("Downloading " + url.toString(),(int)contentLength);
    while (jobStatus == Status.OK_STATUS) {
      if (contentLength > 0 && totalBytesRead >= contentLength) {
        break;
      }
      bytesRead=input.read(b);
      if (bytesRead == -1) {
        break;
      }
      output.write(b,0,bytesRead);
      totalBytesRead+=bytesRead;
      monitor.worked(bytesRead);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
  }
 catch (  MalformedURLException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"Malformed URL: " + url.toExternalForm(),e);
  }
catch (  IOException e) {
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,"IO error while downloading " + url.toExternalForm(),e);
  }
  closeStreams(input,output);
  return jobStatus;
}

private static synchronized void initDocBuilderFactory(){
  docBuilderFactory=DocumentBuilderFactory.newInstance();
  docBuilderFactory.setIgnoringComments(true);
  docBuilderFactory.setCoalescing(true);
}

public double interceptStdErr(){
  return Math.sqrt(svar0);
}

private void createMissingValues(){
  String sql="SELECT ra.A_RegistrationAttribute_ID " + "FROM A_RegistrationAttribute ra" + " LEFT OUTER JOIN A_RegistrationProduct rp ON (rp.A_RegistrationAttribute_ID=ra.A_RegistrationAttribute_ID)"+ " LEFT OUTER JOIN A_Registration r ON (r.M_Product_ID=rp.M_Product_ID) "+ "WHERE r.A_Registration_ID=?"+ " AND NOT EXISTS (SELECT A_RegistrationAttribute_ID FROM A_RegistrationValue v "+ "WHERE ra.A_RegistrationAttribute_ID=v.A_RegistrationAttribute_ID AND r.A_Registration_ID=v.A_Registration_ID)";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getA_Registration_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      MRegistrationValue v=new MRegistrationValue(this,rs.getInt(1),"?");
      v.saveEx();
    }
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,null,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
}

private static String normalisePath(String path){
  return path.replace('\\','/');
}

public void startLaunchNotifier(){
  if (m_launchNotification == null)   throw new NullPointerException();
  m_launchNotifierThread.setDaemon(true);
  m_launchNotifierThread.start();
}

private static void encode(List<AclEntry> acl,long address){
  long offset=address;
  for (  AclEntry ace : acl) {
    int flags=0;
    UserPrincipal who=ace.principal();
    if (!(who instanceof UnixUserPrincipals.User))     throw new ProviderMismatchException();
    UnixUserPrincipals.User user=(UnixUserPrincipals.User)who;
    int uid;
    if (user.isSpecial()) {
      uid=-1;
      if (who == UnixUserPrincipals.SPECIAL_OWNER)       flags|=ACE_OWNER;
 else       if (who == UnixUserPrincipals.SPECIAL_GROUP)       flags|=(ACE_GROUP | ACE_IDENTIFIER_GROUP);
 else       if (who == UnixUserPrincipals.SPECIAL_EVERYONE)       flags|=ACE_EVERYONE;
 else       throw new AssertionError("Unable to map special identifier");
    }
 else {
      if (user instanceof UnixUserPrincipals.Group) {
        uid=user.gid();
        flags|=ACE_IDENTIFIER_GROUP;
      }
 else {
        uid=user.uid();
      }
    }
    int type;
switch (ace.type()) {
case ALLOW:
      type=ACE_ACCESS_ALLOWED_ACE_TYPE;
    break;
case DENY:
  type=ACE_ACCESS_DENIED_ACE_TYPE;
break;
case AUDIT:
type=ACE_SYSTEM_AUDIT_ACE_TYPE;
break;
case ALARM:
type=ACE_SYSTEM_ALARM_ACE_TYPE;
break;
default :
throw new AssertionError("Unable to map ACE type");
}
Set<AclEntryPermission> aceMask=ace.permissions();
int mask=0;
if (aceMask.contains(AclEntryPermission.READ_DATA)) mask|=ACE_READ_DATA;
if (aceMask.contains(AclEntryPermission.WRITE_DATA)) mask|=ACE_WRITE_DATA;
if (aceMask.contains(AclEntryPermission.APPEND_DATA)) mask|=ACE_APPEND_DATA;
if (aceMask.contains(AclEntryPermission.READ_NAMED_ATTRS)) mask|=ACE_READ_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.WRITE_NAMED_ATTRS)) mask|=ACE_WRITE_NAMED_ATTRS;
if (aceMask.contains(AclEntryPermission.EXECUTE)) mask|=ACE_EXECUTE;
if (aceMask.contains(AclEntryPermission.DELETE_CHILD)) mask|=ACE_DELETE_CHILD;
if (aceMask.contains(AclEntryPermission.READ_ATTRIBUTES)) mask|=ACE_READ_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.WRITE_ATTRIBUTES)) mask|=ACE_WRITE_ATTRIBUTES;
if (aceMask.contains(AclEntryPermission.DELETE)) mask|=ACE_DELETE;
if (aceMask.contains(AclEntryPermission.READ_ACL)) mask|=ACE_READ_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_ACL)) mask|=ACE_WRITE_ACL;
if (aceMask.contains(AclEntryPermission.WRITE_OWNER)) mask|=ACE_WRITE_OWNER;
if (aceMask.contains(AclEntryPermission.SYNCHRONIZE)) mask|=ACE_SYNCHRONIZE;
Set<AclEntryFlag> aceFlags=ace.flags();
if (aceFlags.contains(AclEntryFlag.FILE_INHERIT)) flags|=ACE_FILE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.DIRECTORY_INHERIT)) flags|=ACE_DIRECTORY_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.NO_PROPAGATE_INHERIT)) flags|=ACE_NO_PROPAGATE_INHERIT_ACE;
if (aceFlags.contains(AclEntryFlag.INHERIT_ONLY)) flags|=ACE_INHERIT_ONLY_ACE;
unsafe.putInt(offset + OFFSETOF_UID,uid);
unsafe.putInt(offset + OFFSETOF_MASK,mask);
unsafe.putShort(offset + OFFSETOF_FLAGS,(short)flags);
unsafe.putShort(offset + OFFSETOF_TYPE,(short)type);
offset+=SIZEOF_ACE_T;
}
}

public static String expandHiddenDir(final String filename){
  final int macro=filename.indexOf(hiddenDirMacro,0);
  String expandedFilter;
  if (macro == -1) {
    return filename;
  }
  if (Cfg.DEBUG) {
    Check.log(TAG + " expanding macro");
  }
  expandedFilter=filename.replaceFirst("\\$dir\\$",StringUtils.chomp(Path.hidden(),"/"));
  if (Cfg.DEBUG) {
    Check.log(TAG + " expandedFilter: " + expandedFilter);
  }
  return expandedFilter;
}

private boolean tryQueueCurrentBuffer(long elapsedWaiting){
  if (currentBuffer.isEmpty())   return true;
  if (isOpen && neverPubQueue.size() < neverPubCapacity) {
    neverPubQueue.add(currentBuffer);
    totalQueuedRecords.addAndGet(currentBuffer.sizeRecords());
    totalQueuedBuffers.incrementAndGet();
    onQueueBufferSuccess(currentBuffer,elapsedWaiting);
    currentBuffer=new RecordBuffer<>(flow);
    return true;
  }
 else   if (elapsedWaiting > 0) {
    onQueueBufferTimeout(currentBuffer,elapsedWaiting);
    return false;
  }
 else   return false;
}

public void updateValue(final Object value,final boolean isSelected,boolean sync){
  if (isReadOnly()) {
    return;
  }
  if (GenericFormFactory.isTextForm(formType)) {
    textString=(String)value;
    if (textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
  }
 else {
    textString=(String)value;
    this.isSelected=isSelected;
    if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.equals(lastTextString)) {
      sync=false;
    }
    lastTextString=textString;
    lastIsSelected=isSelected;
  }
  if ((sync && guiType != FormFactory.ULC) && guiComp != null) {
    syncGUI(value);
  }
}

public boolean hasNext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}

private final StringBuilder appendParameterSignature(StringBuilder buffer,char[][] parameterTypes,char[][] parameterNames){
  if (parameterTypes != null) {
    for (int i=0; i < parameterTypes.length; i++) {
      if (i > 0) {
        buffer.append(',');
        buffer.append(' ');
      }
      buffer.append(parameterTypes[i]);
      if (parameterNames != null && parameterNames[i] != null) {
        buffer.append(' ');
        buffer.append(parameterNames[i]);
      }
    }
  }
  return buffer;
}

public void completeHeartbeat(Database database,long seqno,String eventId) throws SQLException {
  if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update");
  Statement st=null;
  ResultSet rs=null;
  Timestamp sts=new Timestamp(0);
  Timestamp now=new Timestamp(System.currentTimeMillis());
  ArrayList<Column> whereClause=new ArrayList<Column>();
  ArrayList<Column> values=new ArrayList<Column>();
  if (logger.isDebugEnabled())   logger.debug("Processing slave heartbeat update: " + now);
  try {
    st=database.createStatement();
    rs=st.executeQuery(sourceTsQuery);
    if (rs.next())     sts=rs.getTimestamp(1);
  }
  finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (st != null) {
      try {
        st.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  long lag_millis=now.getTime() - sts.getTime();
  hbId.setValue(KEY);
  whereClause.add(hbId);
  hbSeqno.setValue(seqno);
  hbEventId.setValue(eventId);
  hbTargetTstamp.setValue(now);
  hbLagMillis.setValue(lag_millis);
  values.add(hbSeqno);
  values.add(hbEventId);
  values.add(hbTargetTstamp);
  values.add(hbLagMillis);
  database.update(hbTable,whereClause,values);
}

public CipherParameters decrypt(byte[] in,int inOff,int inLen,int keyLen) throws IllegalArgumentException {
  if (!key.isPrivate()) {
    throw new IllegalArgumentException("Private key required for decryption");
  }
  BigInteger n=key.getModulus();
  BigInteger d=key.getExponent();
  byte[] C=new byte[inLen];
  System.arraycopy(in,inOff,C,0,C.length);
  BigInteger c=new BigInteger(1,C);
  BigInteger r=c.modPow(d,n);
  return generateKey(n,r,keyLen);
}

public PrivateKey loadPrivateKey() throws Exception {
  if (defaultKeys) {
    return getPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY);
  }
  if (priKey == null) {
    FileReader f=new FileReader(path + "privatekey" + this.id);
    BufferedReader r=new BufferedReader(f);
    String tmp="";
    String key="";
    while ((tmp=r.readLine()) != null) {
      key=key + tmp;
    }
    f.close();
    r.close();
    priKey=getPrivateKeyFromString(key);
  }
  return priKey;
}

public void removeCategoriesListener(SnapshotCategoriesListener listener){
  listeners.remove(listener);
}

public boolean hasUnsupportedCriticalExtension(){
  Set extns=getCriticalExtensionOIDs();
  if (extns == null) {
    return false;
  }
  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);
  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);
  return !extns.isEmpty();
}

private Integer zGetWeekNumberForASevenDayRange(LocalDate firstDateInRange,WeekFields weekFieldRules,boolean requireUnanimousWeekNumber){
  ArrayList<Integer> weekNumbersList=new ArrayList<Integer>();
  for (int daysIntoTheFuture=0; daysIntoTheFuture <= 6; ++daysIntoTheFuture) {
    LocalDate currentDateInRange;
    try {
      currentDateInRange=firstDateInRange.plusDays(daysIntoTheFuture);
      int currentWeekNumber=currentDateInRange.get(weekFieldRules.weekOfWeekBasedYear());
      weekNumbersList.add(currentWeekNumber);
    }
 catch (    Exception ex) {
      return 1;
    }
  }
  boolean isUnanimous=(InternalUtilities.areObjectsEqual(weekNumbersList.get(0),weekNumbersList.get(6)));
  if (isUnanimous) {
    return weekNumbersList.get(0);
  }
  if (requireUnanimousWeekNumber) {
    return null;
  }
  int mostCommonWeekNumber=InternalUtilities.getMostCommonElementInList(weekNumbersList);
  return mostCommonWeekNumber;
}

private boolean isNotInArray(String str,String[] array){
  for (int i=0; i < array.length; i++) {
    if (str.equals(array[i])) {
      return false;
    }
  }
  return true;
}

Node cloneOrImportNode(short operation,Node node,boolean deep){
  NodeImpl copy=shallowCopy(operation,node);
  if (deep) {
    NodeList list=node.getChildNodes();
    for (int i=0; i < list.getLength(); i++) {
      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));
    }
  }
  notifyUserDataHandlers(operation,node,copy);
  return copy;
}

public static synchronized void cleanup(){
  w.lock();
  try {
    secp256k1_destroy_context(Secp256k1Context.getContext());
  }
  finally {
    w.unlock();
  }
}

public void init() throws Exception {
  loadParameterFromZK();
  _invalidLoginCleanupExecutor.scheduleWithFixedDelay(new InvalidLoginCleaner(),CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS,TimeUnit.MINUTES);
  _log.info("Max invalid login attempts from the same client IP: {}",_maxAuthnLoginAttemtsCount);
  _log.info("Life time in minutes of invalid login records for a client IP: {}",_maxAuthnLoginAttemtsLifeTimeInMins);
  _log.info("Cleanup thread schedule interval: {} minutes",CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS);
}

public List<String> makeURLList(String shard){
  List<String> urls=StrUtils.splitSmart(shard,"|",true);
  for (int i=0; i < urls.size(); i++) {
    urls.set(i,buildUrl(urls.get(i)));
  }
  if (urls.size() > 1)   Collections.shuffle(urls,r);
  return urls;
}

public InputStreamReader reader(final String charset) throws HttpRequestException {
  try {
    return new InputStreamReader(stream(),getValidCharset(charset));
  }
 catch (  UnsupportedEncodingException e) {
    throw new HttpRequestException(e);
  }
}

private byte[] toZLIB(RenderedImage image,Color bkg,String colorModel) throws IOException {
  return ImageGraphics2D.toByteArray(image,ImageConstants.RAW,ImageConstants.ENCODING_FLATE_ASCII85,ImageGraphics2D.getRAWProperties(bkg,colorModel));
}

public void addVertex(Object id) throws IllegalArgumentException {
  if (initialized) {
    throw new IllegalArgumentException();
  }
  Vertex vertex=new Vertex(id);
  Object existing=vertexMap.put(id,vertex);
  if (existing != null) {
    throw new IllegalArgumentException();
  }
  vertexList.add(vertex);
}

public void configureLocalServices(){
  clientMemo.setLnTrafficController(this);
  clientMemo.configureCommandStation(LnCommandStationType.COMMAND_STATION_DCS100,false,false);
  clientMemo.configureManagers();
}

private static int indexOf(int fromIndex,CharSequence csq){
  if (csq == null)   return 0;
  int length=csq.length();
  int j=fromIndex;
  int i=(j < length) ? csq.charAt(j++) : 0;
  i<<=16;
  i|=(j < length) ? csq.charAt(j++) : 0;
  return i;
}

protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){
  updateGrid();
  calculateColumnRequirements(axis);
  if (r == null) {
    r=new SizeRequirements();
  }
  long min=0;
  long pref=0;
  int n=columnRequirements.length;
  for (int i=0; i < n; i++) {
    SizeRequirements req=columnRequirements[i];
    min+=req.minimum;
    pref+=req.preferred;
  }
  int adjust=(n + 1) * cellSpacing + 2 * borderWidth;
  min+=adjust;
  pref+=adjust;
  r.minimum=(int)min;
  r.preferred=(int)pref;
  r.maximum=(int)pref;
  AttributeSet attr=getAttributes();
  CSS.LengthValue cssWidth=(CSS.LengthValue)attr.getAttribute(CSS.Attribute.WIDTH);
  if (BlockView.spanSetFromAttributes(axis,r,cssWidth,null)) {
    if (r.minimum < (int)min) {
      r.maximum=r.minimum=r.preferred=(int)min;
    }
  }
  totalColumnRequirements.minimum=r.minimum;
  totalColumnRequirements.preferred=r.preferred;
  totalColumnRequirements.maximum=r.maximum;
  Object o=attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
  if (o != null) {
    String ta=o.toString();
    if (ta.equals("left")) {
      r.alignment=0;
    }
 else     if (ta.equals("center")) {
      r.alignment=0.5f;
    }
 else     if (ta.equals("right")) {
      r.alignment=1;
    }
 else {
      r.alignment=0;
    }
  }
 else {
    r.alignment=0;
  }
  return r;
}

public void append(String string){
  for (int i=0; i < string.length(); i++)   append(string.charAt(i));
}

public ListenableFuture<String> push(final String name,final Expression func){
  String let=String.format("let %s = %s",name,func.toHaskell());
  return pullRaw(let);
}

public final String toString(int depth){
  if (depth <= 0)   return "";
  return ("\n*DecimalNode" + super.toString(depth) + "Mantissa: "+ mantissa+ "; exponent: "+ exponent+ "; big value: "+ (bigVal != null ? bigVal.toString() : "<null>")+ "\n; image = "+ image);
}

public MetaDataColumnDescriptor(String columnName,int jdbcType,Object defaultValue){
  _columnName=columnName.toUpperCase();
  _jdbcType=jdbcType;
  _defaultValue=defaultValue;
}

private void bulkLoad(double[] lmin,double[] lmax,List<Node> children,ArrayModifiableDBIDs ids,int start,int end,int dim,int level,int code){
  if (dim == 0) {
    DBIDArrayIter iter=ids.iter();
    iter.seek(start);
    NumberVector first=relation.get(iter);
    iter.advance();
    boolean degenerate=true;
    loop:     for (; iter.getOffset() < end; iter.advance()) {
      NumberVector other=relation.get(iter);
      for (int d=0; d < lmin.length; d++) {
        if (Math.abs(first.doubleValue(d) - other.doubleValue(d)) > 1E-15) {
          degenerate=false;
          break loop;
        }
      }
    }
    if (degenerate) {
      double[] center=new double[lmin.length];
      for (int d=0; d < lmin.length; d++) {
        center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
        if (center[d] > min[d] + width[d]) {
          center[d]-=width[d];
        }
      }
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
  }
  if (dim == lmin.length) {
    double[] center=new double[lmin.length];
    for (int d=0; d < lmin.length; d++) {
      center[d]=lmin[d] * .5 + lmax[d] * .5 + shift[d];
      if (center[d] > min[d] + width[d]) {
        center[d]-=width[d];
      }
    }
    if (end - start < nmin) {
      children.add(new Node(code,center,end - start,level,null));
      return;
    }
 else {
      List<Node> newchildren=new ArrayList<>();
      bulkLoad(lmin,lmax,newchildren,ids,start,end,0,level + 1,0);
      children.add(new Node(code,center,end - start,level,newchildren));
      return;
    }
  }
 else {
    DBIDArrayIter siter=ids.iter(), eiter=ids.iter();
    siter.seek(start);
    eiter.seek(end - 1);
    while (siter.getOffset() < eiter.getOffset()) {
      if (getShiftedDim(relation.get(siter),dim,level) <= .5) {
        siter.advance();
        continue;
      }
      if (getShiftedDim(relation.get(eiter),dim,level) > 0.5) {
        eiter.retract();
        continue;
      }
      ids.swap(siter.getOffset(),eiter.getOffset() - 1);
      siter.advance();
      eiter.retract();
    }
    final int spos=siter.getOffset();
    if (start < spos) {
      final double tmp=lmax[dim];
      lmax[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,start,spos,dim + 1,level,code);
      lmax[dim]=tmp;
    }
    if (spos < end) {
      final double tmp=lmin[dim];
      lmin[dim]=lmax[dim] * .5 + lmin[dim] * .5;
      bulkLoad(lmin,lmax,children,ids,spos,end,dim + 1,level,code | (1 << dim));
      lmin[dim]=tmp;
    }
  }
}

protected ArrayList<float[]> _forwardPoly(float[] rawllpts,int ltype,int nsegs,boolean isFilled){
  boolean DEBUG=Debug.debugging("proj");
  int len=rawllpts.length >>> 1;
  if (len < 2)   return new ArrayList<float[]>(0);
  if (isComplicatedLineType(ltype))   return doPolyDispatch(rawllpts,ltype,nsegs,isFilled);
  int invalid_count=0;
  boolean curr_invalid, prev_invalid=false;
  Point temp=new Point();
  AzimuthVar az_first=null, az_save=null, azVar=new AzimuthVar();
  ArrayList<AzimuthVar> sections=new ArrayList<AzimuthVar>(128);
  float[] x_, xs=new float[len];
  float[] y_, ys=new float[len];
  _forward(rawllpts[0],rawllpts[1],temp,azVar);
  xs[0]=temp.x;
  ys[0]=temp.y;
  prev_invalid=azVar.invalid_forward;
  if (prev_invalid) {
    ++invalid_count;
  }
 else {
    azVar.index=0;
    azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[0],rawllpts[1]);
    if (!isFilled) {
      sections.add(azVar);
    }
 else {
      az_first=azVar;
    }
    azVar=new AzimuthVar();
  }
  int i=0, j=0;
  for (i=1, j=2; i < len; i++, j+=2) {
    azVar.invalid_forward=false;
    _forward(rawllpts[j],rawllpts[j + 1],temp,azVar);
    curr_invalid=azVar.invalid_forward;
    xs[i]=temp.x;
    ys[i]=temp.y;
    if (!curr_invalid && prev_invalid) {
      azVar.index=i - 1;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
      azVar=new AzimuthVar();
    }
 else     if (curr_invalid) {
      if (!prev_invalid) {
        azVar.index=i;
        if (isFilled && (invalid_count == 0)) {
          az_save=azVar;
        }
 else {
          sections.add(azVar);
        }
        azVar=new AzimuthVar();
      }
      ++invalid_count;
    }
    prev_invalid=curr_invalid;
  }
  if (invalid_count == 0) {
    ArrayList<float[]> ret_val=new ArrayList<float[]>(2);
    ret_val.add(xs);
    ret_val.add(ys);
    return ret_val;
  }
  if (invalid_count == len) {
    return new ArrayList<float[]>(0);
  }
  if (!prev_invalid) {
    if (isFilled && (az_save != null)) {
      int l=az_save.index;
      x_=new float[len + l];
      y_=new float[len + l];
      System.arraycopy(xs,0,x_,0,len);
      System.arraycopy(ys,0,y_,0,len);
      System.arraycopy(xs,0,x_,len,l);
      System.arraycopy(ys,0,y_,len,l);
      az_save.index=len + l;
      sections.add(az_save);
      xs=x_;
      ys=y_;
    }
 else {
      if (DEBUG && isFilled && (az_save == null)) {
        Debug.output("AA, filled, no-wrap!");
      }
      azVar.index=i;
      j=rawllpts.length;
      azVar.current_azimuth=GreatCircle.sphericalAzimuth((float)centerY,(float)centerX,rawllpts[j - 2],rawllpts[j - 1]);
      sections.add(azVar);
    }
  }
 else   if (az_save != null) {
    if (DEBUG)     Debug.output("DD, filled!");
    sections.add(az_first);
    sections.add(az_save);
  }
  int size=sections.size();
  ArrayList<float[]> ret_val=new ArrayList<float[]>(size);
  if (isFilled && (len > 2)) {
    generateFilledPoly(xs,ys,sections,ret_val);
    return ret_val;
  }
  for (j=0; j < size; j+=2) {
    AzimuthVar az1=(AzimuthVar)sections.get(j);
    AzimuthVar az2=(AzimuthVar)sections.get(j + 1);
    int off1=az1.index;
    int off2=az2.index;
    int l=off2 - off1;
    x_=new float[l];
    y_=new float[l];
    System.arraycopy(xs,off1,x_,0,l);
    System.arraycopy(ys,off1,y_,0,l);
    ret_val.add(x_);
    ret_val.add(y_);
  }
  return ret_val;
}

private ArrayList<String> filterYears(ArrayList<String> items){
  Iterator<String> iterator;
  Calendar now=Calendar.getInstance();
  int year=now.get(Calendar.YEAR);
  String yearInString=String.valueOf(year);
  Log.d(TAG,"Year: " + yearInString);
  int prevYear=year - 1;
  String prevYearInString=String.valueOf(prevYear);
  Log.d(TAG,"Previous year: " + prevYearInString);
  for (iterator=items.iterator(); iterator.hasNext(); ) {
    String s=iterator.next();
    if (s.matches(".*(19|20)\\d{2}.*") && !s.contains(yearInString) && !s.contains(prevYearInString)) {
      Log.d(TAG,"Filtering out year " + s);
      iterator.remove();
    }
  }
  Log.d(TAG,"Items: " + items.toString());
  return items;
}

public DataProviderEvent(final LocalizableMessage reason,final Set<Type> types){
  Reject.ifNull(reason,types);
  Reject.ifTrue(types.isEmpty());
  this.reason=reason;
  final EnumSet<Type> tmp=EnumSet.noneOf(Type.class);
  tmp.addAll(types);
  this.types=Collections.unmodifiableSet(tmp);
}

public <T>List<String> validateBean(T bean,String errIfBeanNull){
  List<String> errors=new ArrayList<String>();
  if (bean == null) {
    errors.add(errIfBeanNull);
    return errors;
  }
  Set<ConstraintViolation<T>> violations=validator.validate(bean);
  for (  ConstraintViolation<T> violation : violations) {
    errors.add(violation.getMessage());
  }
  return errors;
}

protected void smartInsertAfterBracket(IDocument document,DocumentCommand command){
  if (command.offset == -1 || document.getLength() == 0) {
    return;
  }
  try {
    int p=(command.offset == document.getLength() ? command.offset - 1 : command.offset);
    int line=document.getLineOfOffset(p);
    int start=document.getLineOffset(line);
    int whiteend=findEndOfWhiteSpace(document,start,command.offset);
    if (whiteend == command.offset) {
      int indLine=findMatchingOpenBracket(document,line,command.offset,1);
      if (indLine != -1 && indLine != line) {
        StringBuffer replaceText=new StringBuffer(getIndentOfLine(document,indLine));
        replaceText.append(document.get(whiteend,command.offset - whiteend));
        replaceText.append(command.text);
        command.length=command.offset - start;
        command.offset=start;
        command.text=replaceText.toString();
      }
    }
  }
 catch (  BadLocationException e) {
    GWTPluginLog.logError(e);
  }
}

private String attemptToChooseFormattingPattern(){
  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {
    getAvailableFormats(nationalNumber.toString());
    String formattedNumber=attemptToFormatAccruedDigits();
    if (formattedNumber.length() > 0) {
      return formattedNumber;
    }
    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();
  }
 else {
    return appendNationalNumber(nationalNumber.toString());
  }
}

private void fillPicks() throws Exception {
  MLookup orgL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2223,DisplayType.TableDir);
  fWarehouse=new VLookup("M_Warehouse_ID",true,false,true,orgL);
  lWarehouse.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));
  fWarehouse.addVetoableChangeListener(this);
  m_M_Warehouse_ID=fWarehouse.getValue();
  MLookup bpL=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,2762,DisplayType.Search);
  fBPartner=new VLookup("C_BPartner_ID",false,false,true,bpL);
  lBPartner.setText(Msg.translate(Env.getCtx(),"C_BPartner_ID"));
  fBPartner.addVetoableChangeListener(this);
  lDocType.setText(Msg.translate(Env.getCtx(),"C_DocType_ID"));
  cmbDocType.addItem(new KeyNamePair(MOrder.Table_ID,Msg.translate(Env.getCtx(),"Order")));
  cmbDocType.addItem(new KeyNamePair(MRMA.Table_ID,Msg.translate(Env.getCtx(),"VendorRMA")));
  cmbDocType.addActionListener(this);
}

@Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){
  FieldConfigFontPreview copy=null;
  if (fieldConfigBase != null) {
    copy=new FieldConfigFontPreview(fieldConfigBase.getCommonData());
  }
  return copy;
}

public void testConstructorSignBytesZeroNull3(){
  byte aBytes[]={};
  int aSign=1;
  byte rBytes[]={0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,aNumber.signum());
}

public Object castToType(int t,XPathContext support) throws javax.xml.transform.TransformerException {
  Object result;
switch (t) {
case CLASS_STRING:
    result=str();
  break;
case CLASS_NUMBER:
result=new Double(num());
break;
case CLASS_NODESET:
result=iter();
break;
case CLASS_BOOLEAN:
result=new Boolean(bool());
break;
case CLASS_UNKNOWN:
result=m_obj;
break;
default :
error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE,new Object[]{getTypeString(),Integer.toString(t)});
result=null;
}
return result;
}

public static void forceDeleteOnExit(File file) throws IOException {
  if (file.isDirectory()) {
    deleteDirectoryOnExit(file);
  }
 else {
    file.deleteOnExit();
  }
}

public boolean init(StepMetaInterface smi,StepDataInterface sdi){
  this.meta=((SortKeyStepMeta)smi);
  this.data=((SortKeyStepData)sdi);
  return super.init(smi,sdi);
}

private void printAnnotationFromEditor(final WorkflowAnnotation anno,final Graphics2D g2){
  Graphics2D gPr=(Graphics2D)g2.create();
  Rectangle2D loc=anno.getLocation();
  gPr.translate(loc.getX(),loc.getY());
  gPr.setClip(0,0,(int)loc.getWidth(),(int)loc.getHeight());
  Dimension size=new Dimension((int)loc.getWidth(),(int)loc.getHeight());
  pane.setSize(size);
  pane.setText(AnnotationDrawUtils.createStyledCommentString(anno));
  pane.setCaretPosition(0);
  pane.paint(gPr);
  gPr.dispose();
}

public void add(IPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException("Can't add point while iterator in progress");
  }
  points.add(pt);
}

public static Configuration load(Reader reader) throws IOException {
  try {
    Properties properties=new Properties();
    properties.load(reader);
    return from(properties);
  }
  finally {
    reader.close();
  }
}

public void add(OffsettedItem item){
  throwIfPrepared();
  try {
    if (item.getAlignment() > getAlignment()) {
      throw new IllegalArgumentException("incompatible item alignment");
    }
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException("item == null");
  }
  items.add(item);
}

public static void addAnnotationToXML(Element annotationsElement,String name,String value){
  if (value == null) {
    deleteAnnotationFromXML(annotationsElement,name);
  }
 else {
    final Document doc=annotationsElement.getOwnerDocument();
    Element elem=doc.createElement("annotation");
    annotationsElement.appendChild(elem);
    elem.setAttribute("key",name);
    elem.setTextContent(value);
  }
}

public boolean readBoolean() throws IOException {
  return primitiveTypes.readBoolean();
}

public Enumeration<String> enumerateMeasures(){
  Vector<String> newVector=new Vector<String>(1);
  newVector.addElement("measureNumIterations");
  return newVector.elements();
}

@Override public Instances defineDataFormat() throws Exception {
  ArrayList<Attribute> atts;
  ArrayList<String> attValues;
  int i;
  m_Random=new Random(getSeed());
  m_nextClassShouldBeZero=true;
  m_lastLabel=Double.NaN;
  setNumExamplesAct(getNumExamples());
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute("salary"));
  atts.add(new Attribute("commission"));
  atts.add(new Attribute("age"));
  attValues=new ArrayList<String>();
  for (i=0; i < 5; i++) {
    attValues.add("" + i);
  }
  atts.add(new Attribute("elevel",attValues));
  attValues=new ArrayList<String>();
  for (i=1; i <= 20; i++) {
    attValues.add("" + i);
  }
  atts.add(new Attribute("car",attValues));
  attValues=new ArrayList<String>();
  for (i=0; i < 9; i++) {
    attValues.add("" + i);
  }
  atts.add(new Attribute("zipcode",attValues));
  atts.add(new Attribute("hvalue"));
  atts.add(new Attribute("hyears"));
  atts.add(new Attribute("loan"));
  attValues=new ArrayList<String>();
  for (i=0; i < 2; i++) {
    attValues.add("" + i);
  }
  atts.add(new Attribute("group",attValues));
  m_DatasetFormat=new Instances(getRelationNameToUse(),atts,0);
  return m_DatasetFormat;
}

public static double lnGamma(double alpha){
  double x=alpha, f=0.0, z;
  if (x < 7) {
    f=1;
    z=x - 1;
    while (++z < 7) {
      f*=z;
    }
    x=z;
    f=-Math.log(f);
  }
  z=1 / (x * x);
  return f + (x - 0.5) * Math.log(x) - x + 0.918938533204673 + (((-0.000595238095238 * z + 0.000793650793651) * z - 0.002777777777778) * z + 0.083333333333333) / x;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 188) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public void startTicker(long delay,boolean rightToLeft){
  if (!tickerEnabled) {
    return;
  }
  if (!isCellRenderer()) {
    Form parent=getComponentForm();
    if (parent != null) {
      parent.registerAnimatedInternal(this);
    }
  }
  tickerStartTime=System.currentTimeMillis();
  tickerDelay=delay;
  tickerRunning=true;
  this.rightToLeft=rightToLeft;
  if (isRTL()) {
    this.rightToLeft=!this.rightToLeft;
  }
}

static CipherSuite valueOf(int id1,int id2){
  id1&=0xff;
  id2&=0xff;
  int id=(id1 << 8) | id2;
  CipherSuite c=idMap.get(id);
  if (c == null) {
    String h1=Integer.toString(id1,16);
    String h2=Integer.toString(id2,16);
    c=new CipherSuite("Unknown 0x" + h1 + ":0x"+ h2,id);
  }
  return c;
}

public static Context createPendingActionContext(Context context,ReconAction action,String mappingName,JsonValue sourceObject,String reconId,Situation situation){
  Map<String,Object> pendingActionMap=new HashMap<String,Object>();
  pendingActionMap.put(MAPPING_NAME,mappingName);
  pendingActionMap.put(SOURCE_OBJECT,sourceObject);
  pendingActionMap.put(RECON_ID,reconId);
  pendingActionMap.put(ORIGINAL_SITUATION,situation.toString());
  PendingActionContext pendingActionContext=new PendingActionContext(context,pendingActionMap,action.toString());
  return pendingActionContext;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 204) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public void showDroidsafeTextMarkers(IEditorPart openedEditor,String className){
  if (openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null) {
    ITextEditor editor=(ITextEditor)openedEditor;
    if (fProcessedClasses.contains(className)) {
      if (fClassesNeedUpdate.contains(className)) {
        ClassMarkerProcessor classProcessor=get(className);
        classProcessor.updateTaintMarkers(editor);
        fClassesNeedUpdate.remove(className);
      }
    }
 else {
      fProcessedClasses.add(className);
      Map<String,Map<IntRange,Map<String,Set<CallLocationModel>>>> classTaintedDataMap=fTaintedDataMap.get(className);
      Map<String,Set<IntRange>> classUnreachableMethodMap=fUnreachableSourceMethodMap.get(className);
      if (classTaintedDataMap != null || classUnreachableMethodMap != null) {
        IEditorInput input=editor.getEditorInput();
        if (input instanceof FileEditorInput) {
          ClassMarkerProcessor classProcessor=get(className);
          classProcessor.showDroidsafeTextMarkers(editor);
        }
      }
    }
  }
}

private static void resolveNewExpression(NewExpression objSubjectExpression,HashSet<String> objTypesSet){
  ClassReference objClassRef=objSubjectExpression.getClassReference();
  if (null == objClassRef || null == objClassRef.getFQN()) {
    objTypesSet.add(Types.strResolvingAbortedOnPsiLevel);
    return;
  }
  objTypesSet.add(objClassRef.getFQN());
}

private static List<Size> pickUpToThree(List<Size> sizes){
  List<Size> result=new ArrayList<Size>();
  Size largest=sizes.get(0);
  result.add(largest);
  Size lastSize=largest;
  for (  Size size : sizes) {
    double targetArea=Math.pow(.5,result.size()) * area(largest);
    if (area(size) < targetArea) {
      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {
        result.add(lastSize);
      }
 else {
        result.add(size);
      }
    }
    lastSize=size;
    if (result.size() == 3) {
      break;
    }
  }
  if (result.size() < 3 && !result.contains(lastSize)) {
    result.add(lastSize);
  }
  return result;
}

private boolean verifyLogRecord(String[] record,int macPos) throws Exception {
  StringBuilder data=new StringBuilder();
  for (int m=0; m < record.length - 2; m++) {
    data.append(record[m]);
  }
  curMAC=record[macPos];
  verified=helper.verifyMAC(data.toString(),helper.toByteArray(curMAC));
  return verified;
}

public static void copyToClipboard(Transferable t){
  ClipboardHelper.copyToClipboard(t);
}

public static String formatPercent(int downloadSize,int fileSize){
  float num=(float)downloadSize / fileSize;
  float percent=((float)(int)(num * 1000)) / 10;
  return String.valueOf(percent + "%");
}

final private String attrDef2AttrDesc(Attributes attrs) throws NamingException {
  StringBuffer attrDesc=new StringBuffer("( ");
  Attribute attr=null;
  int count=0;
  attr=attrs.get(NUMERICOID_ID);
  if (attr != null) {
    attrDesc.append(writeNumericOID(attr));
    count++;
  }
 else {
    throw new ConfigurationException("Attribute type doesn't" + "have a numeric OID");
  }
  attr=attrs.get(NAME_ID);
  if (attr != null) {
    attrDesc.append(writeQDescrs(attr));
    count++;
  }
  attr=attrs.get(DESC_ID);
  if (attr != null) {
    attrDesc.append(writeQDString(attr));
    count++;
  }
  attr=attrs.get(OBSOLETE_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(SUP_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(EQUALITY_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(ORDERING_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SUBSTR_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SYNTAX_ID);
  if (attr != null) {
    attrDesc.append(writeWOID(attr));
    count++;
  }
  attr=attrs.get(SINGLE_VAL_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(COLLECTIVE_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(NO_USER_MOD_ID);
  if (attr != null) {
    attrDesc.append(writeBoolean(attr));
    count++;
  }
  attr=attrs.get(USAGE_ID);
  if (attr != null) {
    attrDesc.append(writeQDString(attr));
    count++;
  }
  if (count < attrs.size()) {
    String attrId=null;
    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {
      attr=ae.next();
      attrId=attr.getID();
      if (attrId.equals(NUMERICOID_ID) || attrId.equals(NAME_ID) || attrId.equals(SYNTAX_ID)|| attrId.equals(DESC_ID)|| attrId.equals(SINGLE_VAL_ID)|| attrId.equals(EQUALITY_ID)|| attrId.equals(ORDERING_ID)|| attrId.equals(SUBSTR_ID)|| attrId.equals(NO_USER_MOD_ID)|| attrId.equals(USAGE_ID)|| attrId.equals(SUP_ID)|| attrId.equals(COLLECTIVE_ID)|| attrId.equals(OBSOLETE_ID)) {
        continue;
      }
 else {
        attrDesc.append(writeQDStrings(attr));
      }
    }
  }
  attrDesc.append(")");
  return attrDesc.toString();
}

private void updateActions(){
  String selectedText=getSelectedText();
  if (selectedText == null)   selectedText="";
  boolean stuffSelected=!selectedText.equals("");
  boolean allSelected=selectedText.equals(getText());
  UNDO_ACTION.setEnabled(isEnabled() && isEditable() && isUndoAvailable());
  CUT_ACTION.setEnabled(isEnabled() && isEditable() && stuffSelected);
  COPY_ACTION.setEnabled(isEnabled() && stuffSelected);
  PASTE_ACTION.setEnabled(isEnabled() && isEditable() && isPasteAvailable());
  DELETE_ACTION.setEnabled(isEnabled() && stuffSelected);
  SELECT_ALL_ACTION.setEnabled(isEnabled() && !allSelected);
}

public static <T>Collection<T> makeImmutable(Collection<T> mutableCollection){
  Collection<T> newCollection;
  try {
    @SuppressWarnings("unchecked") Class<Collection<T>> cls=(Class<Collection<T>>)mutableCollection.getClass();
    newCollection=cls.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  for (  T element : mutableCollection) {
    newCollection.add(Utils.makeImmutable(element));
  }
  return Collections.unmodifiableCollection(newCollection);
}

public synchronized void trackHexImages(IHex hex,MediaTracker tracker){
  Image base=hexToImageCache.get(hex);
  List<Image> superImgs=hexToImageListCache.get(hex);
  List<Image> orthoImgs=orthoListCache.get(hex);
  tracker.addImage(base,1);
  if (superImgs != null) {
    for (Iterator<Image> i=superImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
  if (orthoImgs != null) {
    for (Iterator<Image> i=orthoImgs.iterator(); i.hasNext(); ) {
      tracker.addImage(i.next(),1);
    }
  }
}

public static Date parseText(String dateStr){
  try {
    return mSimpleTextFormat.parse(dateStr);
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new RuntimeException("date formatDateTime error");
  }
}

public boolean isProcessed(Trace trace,Node node,Direction direction){
  boolean ret=false;
  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {
    if (uriFilter == null || uriFilter.test(node.getUri())) {
      ret=true;
    }
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest("ProcessManager/Processor: isProcessed trace=" + trace + " node="+ node+ " direction="+ direction+ "? "+ ret);
  }
  return ret;
}

@Override public synchronized void powerOnSelfTest() throws Error {
  for (Iterator<WaveformSynthesizer> it=waveformSynthesizers.iterator(); it.hasNext(); ) {
    WaveformSynthesizer ws=it.next();
    ws.powerOnSelfTest();
  }
}

private QuadEdge[] fetchTriangleToVisit(QuadEdge edge,Stack edgeStack,boolean includeFrame,Set visitedEdges){
  QuadEdge curr=edge;
  int edgeCount=0;
  boolean isFrame=false;
  do {
    triEdges[edgeCount]=curr;
    if (isFrameEdge(curr))     isFrame=true;
    QuadEdge sym=curr.sym();
    if (!visitedEdges.contains(sym))     edgeStack.push(sym);
    visitedEdges.add(curr);
    edgeCount++;
    curr=curr.lNext();
  }
 while (curr != edge);
  if (isFrame && !includeFrame)   return null;
  return triEdges;
}

public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {
  CRL crl;
  List crls=new ArrayList();
  while ((crl=engineGenerateCRL(inStream)) != null) {
    crls.add(crl);
  }
  return crls;
}

public void deleteEntityConfig(String realm,String federationId) throws WSFederationMetaException {
  if (federationId == null) {
    return;
  }
  if (realm == null) {
    realm="/";
  }
  String[] objs={federationId,realm};
  try {
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues == null || oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException("entity_config_not_exist",objs);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      removeFromCircleOfTrust(idpconfig,realm,federationId);
    }
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      removeFromCircleOfTrust(spconfig,realm,federationId);
    }
    Set attr=new HashSet();
    attr.add(ATTR_ENTITY_CONFIG);
    configInst.deleteConfiguration(realm,federationId,attr);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);
    WSFederationMetaCache.putEntityConfig(realm,federationId,null);
  }
 catch (  ConfigurationException e) {
    debug.error("WSFederationMetaManager.deleteEntityConfig:",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
}

public static synchronized DataSourceViewsManager sharedInstance(){
  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();
  return sharedInstance;
}

public String tag(String inner,String c1,String c2){
  boolean color=((attr & ATTR_COLOR) == ATTR_COLOR) && ToastBootstrap.color;
  String s="[";
  if (color)   s+="<" + c1 + ">";
  s+=inner;
  if (color)   s+="<" + c2 + ">";
  s+="] ";
  if (color)   s+="<" + c1 + ">";
  return color ? Pretty.format(s) : s;
}

private final String loadXmlDefinition(){
  final Cache cache=CacheFactory.getAnyInstance();
  final StringWriter stringWriter=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(stringWriter);
  CacheXmlGenerator.generate(cache,printWriter,true,false,false);
  printWriter.close();
  return loadXmlDefinition(stringWriter.toString());
}

private Long id(HttpServletRequest request){
  Long id=null;
  String pathInfo=request.getPathInfo();
  if (pathInfo != null && pathInfo.length() > 1) {
    String idString=pathInfo.substring(1);
    id=Long.valueOf(idString);
  }
  return id;
}

public void uncompress(){
  data.position(0);
  InflaterInputStream inflater=new InflaterInputStream(data.asInputStream());
  byte[] buffer=new byte[8192];
  IoBuffer tmp=IoBuffer.allocate(0);
  tmp.setAutoExpand(true);
  try {
    while (inflater.available() > 0) {
      int decompressed=inflater.read(buffer);
      if (decompressed <= 0) {
        break;
      }
      tmp.put(buffer,0,decompressed);
    }
  }
 catch (  IOException e) {
    tmp.free();
    throw new RuntimeException("could not uncompress data",e);
  }
 finally {
    if (inflater != null) {
      try {
        inflater.close();
      }
 catch (      IOException e1) {
      }
    }
  }
  data.free();
  data=tmp;
  data.flip();
  prepareIO();
}

public void poll(final TcpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}

@Override public void close() throws IOException {
synchronized (lock) {
    if (!isClosed()) {
      in.close();
      buf=null;
    }
  }
}

public int compareTo(CharBuffer otherBuffer){
  int compareRemaining=(remaining() < otherBuffer.remaining()) ? remaining() : otherBuffer.remaining();
  int thisPos=position;
  int otherPos=otherBuffer.position;
  char thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte=get(thisPos);
    otherByte=otherBuffer.get(otherPos);
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return remaining() - otherBuffer.remaining();
}

public UrbanSimZoneCSVWriterV2(String matsim4opusTempDirectory,String matsimOutputDirectory){
  this.matsim4opusTempDirectory=matsim4opusTempDirectory;
  this.matsimOutputDirectory=matsimOutputDirectory;
  try {
    log.info("Initializing UrbanSimZoneCSVWriterV2 ...");
    zoneWriter=IOUtils.getBufferedWriter(matsim4opusTempDirectory + FILE_NAME);
    log.info("Writing data into " + matsim4opusTempDirectory + FILE_NAME+ " ...");
    zoneWriter.write(Labels.ZONE_ID + "," + Labels.ACCESSIBILITY_BY_FREESPEED+ ","+ Labels.ACCESSIBILITY_BY_CAR+ ","+ Labels.ACCESSIBILITY_BY_BIKE+ ","+ Labels.ACCESSIBILITY_BY_WALK+ ","+ Labels.ACCESSIBILITY_BY_PT);
    zoneWriter.newLine();
    log.info("... done!");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      aggVal+=buffer.getLong();
      count+=buffer.getDouble();
      firstTime=false;
    }
    return;
  }
  aggVal+=(Long)newVal;
  count++;
  firstTime=false;
}

private static PolicyNotification extractPolicyNotification(String xml) throws PolicyEvaluationException {
  PolicyNotification policyNotification=null;
  try {
    String notificationDataBlock=getNotificationDataBlock(xml);
    if (notificationDataBlock != null) {
      Document doc=XMLUtils.getXMLDocument(new ByteArrayInputStream(notificationDataBlock.getBytes()));
      Node rootNode=XMLUtils.getRootNode(doc,NODE_POLICY_SERVICE);
      if (rootNode != null) {
        Node notificationNode=XMLUtils.getChildNode(rootNode,NODE_POLICY_NOTIFICATION);
        if (notificationNode != null) {
          policyNotification=PolicyNotification.parseXML(notificationNode);
        }
 else {
          debug.error("ResultsCacheUtil." + "extractPolicyNotification():" + "cannot find notification node");
          throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_root_element",null,null);
        }
      }
 else {
        debug.error("ResultsCacheUtil." + "extractPolicyNotification():");
      }
    }
 else {
      debug.error("ResultsCacheUtil:" + "extractPolicyNotification():" + "notification data block is null");
    }
  }
 catch (  Exception xe) {
    debug.error("ResultsCacheUtil.extractPolicyNotification():",xe);
    throw new PolicyEvaluationException(ResBundleUtils.rbName,"xml_parsing_error",null,xe);
  }
  return policyNotification;
}

public synchronized void flush() throws IOException {
  checkNotClosed();
  trimToSize();
  journalWriter.flush();
}

private Object findParcel(@NonNull byte[] objectArray,@NonNull String className){
  try {
    Class classTmp=getClassForName(className);
    Constructor declaredConstructor=classTmp.getDeclaredConstructor(Parcel.class);
    declaredConstructor.setAccessible(true);
    return declaredConstructor.newInstance(WearBusTools.byteToParcel(objectArray));
  }
 catch (  Exception e) {
    Log.d(WearBusTools.BUSWEAR_TAG,"syncEvent error: " + e.getMessage());
  }
  return null;
}

private static final String decodeFieldName(final String pXmlFieldName){
  StringBuilder str=new StringBuilder();
  int fieldNameLength=pXmlFieldName.length();
  char currentChar;
  for (int i=0; i < fieldNameLength; i++) {
    currentChar=pXmlFieldName.charAt(i);
    if (currentChar == '-') {
      str.append(Character.toUpperCase(pXmlFieldName.charAt(++i)));
    }
 else {
      str.append(currentChar);
    }
  }
  return str.toString();
}

public boolean isLoginSet(){
  return (username != null && (password != null && !username.equals("") && !password.equals(""))) || oauth;
}

public void addContentItem(ContentItem contentItem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentItem);
}

public static String canonicalizeClassName(String name){
  String classname=name.replace('/','.');
  classname=classname.replace('\\','.');
  if (classname.startsWith("class "))   classname=classname.substring(6);
  if (classname.endsWith(".class"))   classname=classname.substring(0,classname.length() - 6);
  return classname;
}

public static final void pause(final int milliseconds){
  if (milliseconds >= 1000 || logger.isDebugEnabled()) {
    logger.info("Pausing for {} ms...",milliseconds);
  }
  final long target=System.currentTimeMillis() + milliseconds;
  try {
    for (; ; ) {
      long msLeft=target - System.currentTimeMillis();
      if (msLeft <= 0) {
        break;
      }
      Thread.sleep(msLeft);
    }
  }
 catch (  InterruptedException e) {
    Assert.fail("interrupted",e);
  }
}

public boolean isHighlightWithInvisibleEdge(){
  return highlightWithInvisibleEdge;
}

private Configuration prepareJobForCancelling() throws Exception {
  prepareFile("/testFile",1500);
  executedTasks.set(0);
  cancelledTasks.set(0);
  failMapperId.set(0);
  splitsCount.set(0);
  Configuration cfg=new Configuration();
  setupFileSystems(cfg);
  Job job=Job.getInstance(cfg);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  job.setMapperClass(CancellingTestMapper.class);
  job.setNumReduceTasks(0);
  job.setInputFormatClass(InFormat.class);
  FileInputFormat.setInputPaths(job,new Path("igfs://:" + getTestGridName(0) + "@/"));
  FileOutputFormat.setOutputPath(job,new Path("igfs://:" + getTestGridName(0) + "@/output/"));
  job.setJarByClass(getClass());
  return job.getConfiguration();
}

public void removeChangingListener(OnWheelChangedListener listener){
  changingListeners.remove(listener);
}

public static double[] lsf2lpc(double[] lsf){
  MathUtils.quickSort(lsf);
  int P=lsf.length;
  int half_order=P / 2;
  int i, j;
  double xf, xx;
  double[] a=new double[P / 2 + 1];
  double[] a1=new double[P / 2 + 1];
  double[] a2=new double[P / 2 + 1];
  double[] b=new double[P / 2 + 1];
  double[] b1=new double[P / 2 + 1];
  double[] b2=new double[P / 2 + 1];
  double[] p=new double[P / 2];
  double[] q=new double[P / 2];
  double[] oneMinusA=new double[P + 1];
  oneMinusA[0]=1.;
  if ((lsf[0] <= 0.0) || (lsf[0] >= 0.5)) {
    throw new IllegalArgumentException("LSFs out of bounds; lsf[0] = " + lsf[0]);
  }
  for (i=1; i < P; i++) {
    if (lsf[i] <= lsf[i - 1])     throw new IllegalArgumentException("nonmonotonic LSFs");
    if ((lsf[i] <= 0.0) || (lsf[i] >= 0.5))     throw new IllegalArgumentException("LSFs out of bounds; lsf[" + i + "] = "+ lsf[i]);
  }
  for (i=0; i < half_order; i++) {
    p[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i]);
    q[i]=-2 * Math.cos(MathUtils.TWOPI * lsf[2 * i + 1]);
  }
  xf=0.0;
  for (i=0; i <= P; i++) {
    if (i == 0)     xx=1.0;
 else     xx=0.0;
    a[0]=xx + xf;
    b[0]=xx - xf;
    xf=xx;
    for (j=0; j < half_order; j++) {
      a[j + 1]=a[j] + p[j] * a1[j] + a2[j];
      b[j + 1]=b[j] + q[j] * b1[j] + b2[j];
      a2[j]=a1[j];
      a1[j]=a[j];
      b2[j]=b1[j];
      b1[j]=b[j];
    }
    if (i > 0)     oneMinusA[i]=0.5 * (a[half_order] + b[half_order]);
  }
  return oneMinusA;
}

protected void generateFields(){
  for (Iterator<Element> iterator=mElements.iterator(); iterator.hasNext(); ) {
    Element element=iterator.next();
    if (!element.used) {
      iterator.remove();
      continue;
    }
    PsiField[] fields=mClass.getFields();
    boolean duplicateField=false;
    for (    PsiField field : fields) {
      String name=field.getName();
      if (name != null && name.equals(element.getFieldName())) {
        duplicateField=true;
        break;
      }
    }
    if (duplicateField) {
      iterator.remove();
      continue;
    }
    mClass.add(mFactory.createFieldFromText("private " + element.name + " "+ element.getFieldName()+ ";",mClass));
  }
}

public boolean isFlying(){
  return (flyThroughDialog != null);
}

public synchronized void init(){
  channelFactory=new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool());
  datagramChannelFactory=new NioDatagramChannelFactory(Executors.newCachedThreadPool());
  timer=new HashedWheelTimer();
}

public static String removePattern(final String source,final String regex){
  return replacePattern(source,regex,StringUtils.EMPTY);
}

private void consumeNestedScroll(int dxUnconsumed,int dyUnconsumed,int dxFinalUnconsumed,int dyFinalUnconsumed){
  if (mOverScrollEffect == OverScrollEffect.BOUNCE && dyFinalUnconsumed != 0) {
    mUnconsumedOverScrollOffset+=-dyFinalUnconsumed;
    int maxOffset=mOverScrollOffsetLimit;
    if (mUnconsumedOverScrollOffset > 0) {
      mUnconsumedOverScrollOffset=Math.min(maxOffset,mUnconsumedOverScrollOffset);
    }
 else     if (mUnconsumedOverScrollOffset < 0) {
      mUnconsumedOverScrollOffset=Math.max(-maxOffset,mUnconsumedOverScrollOffset);
    }
    setScrollingOffset(getUnconsumedScrollingOffset());
  }
  pullEdgeEffects(dxUnconsumed,dyUnconsumed);
}

private void retrieveWaypoints(SearchQuery query,ArrayList<Waypoint> waypoints){
  String queryLikeSelection2="%" + query.textQuery + "%";
  String[] waypointSelectionArgs=new String[]{queryLikeSelection2,queryLikeSelection2,queryLikeSelection2};
  Cursor cursor=null;
  try {
    cursor=providerUtils.getWaypointCursor(WAYPOINT_SELECTION_QUERY,waypointSelectionArgs,WAYPOINT_SELECTION_ORDER,MAX_SCORED_WAYPOINTS);
    if (cursor != null) {
      waypoints.ensureCapacity(cursor.getCount());
      while (cursor.moveToNext()) {
        Waypoint waypoint=providerUtils.createWaypoint(cursor);
        if (LocationUtils.isValidLocation(waypoint.getLocation())) {
          waypoints.add(waypoint);
        }
      }
    }
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}

void release(){
  imageLoader.cancelPendingRequests();
  loading=new boolean[noxItems.size()];
}

public int size(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    return count;
  }
  finally {
    lock.unlock();
  }
}

public void add(String name,long cnt){
  if (_values == null) {
    _values=new ArrayList<>(30);
  }
  _values.add(new Count(this,name,cnt));
}

void closeDialog();

private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){
  Mode subMode=Mode.ALPHA;
  Mode priorToShiftMode=Mode.ALPHA;
  int i=0;
  while (i < length) {
    int subModeCh=textCompactionData[i];
    char ch=0;
switch (subMode) {
case ALPHA:
      if (subModeCh < 26) {
        ch=(char)('A' + subModeCh);
      }
 else {
        if (subModeCh == 26) {
          ch=' ';
        }
 else         if (subModeCh == LL) {
          subMode=Mode.LOWER;
        }
 else         if (subModeCh == ML) {
          subMode=Mode.MIXED;
        }
 else         if (subModeCh == PS) {
          priorToShiftMode=subMode;
          subMode=Mode.PUNCT_SHIFT;
        }
 else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
          result.append((char)byteCompactionData[i]);
        }
 else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
          subMode=Mode.ALPHA;
        }
      }
    break;
case LOWER:
  if (subModeCh < 26) {
    ch=(char)('a' + subModeCh);
  }
 else {
    if (subModeCh == 26) {
      ch=' ';
    }
 else     if (subModeCh == AS) {
      priorToShiftMode=subMode;
      subMode=Mode.ALPHA_SHIFT;
    }
 else     if (subModeCh == ML) {
      subMode=Mode.MIXED;
    }
 else     if (subModeCh == PS) {
      priorToShiftMode=subMode;
      subMode=Mode.PUNCT_SHIFT;
    }
 else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
      result.append((char)byteCompactionData[i]);
    }
 else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
      subMode=Mode.ALPHA;
    }
  }
break;
case MIXED:
if (subModeCh < PL) {
ch=MIXED_CHARS[subModeCh];
}
 else {
if (subModeCh == PL) {
  subMode=Mode.PUNCT;
}
 else if (subModeCh == 26) {
  ch=' ';
}
 else if (subModeCh == LL) {
  subMode=Mode.LOWER;
}
 else if (subModeCh == AL) {
  subMode=Mode.ALPHA;
}
 else if (subModeCh == PS) {
  priorToShiftMode=subMode;
  subMode=Mode.PUNCT_SHIFT;
}
 else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
  result.append((char)byteCompactionData[i]);
}
 else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
  subMode=Mode.ALPHA;
}
}
break;
case PUNCT:
if (subModeCh < PAL) {
ch=PUNCT_CHARS[subModeCh];
}
 else {
if (subModeCh == PAL) {
subMode=Mode.ALPHA;
}
 else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
result.append((char)byteCompactionData[i]);
}
 else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
subMode=Mode.ALPHA;
}
}
break;
case ALPHA_SHIFT:
subMode=priorToShiftMode;
if (subModeCh < 26) {
ch=(char)('A' + subModeCh);
}
 else {
if (subModeCh == 26) {
ch=' ';
}
 else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
subMode=Mode.ALPHA;
}
}
break;
case PUNCT_SHIFT:
subMode=priorToShiftMode;
if (subModeCh < PAL) {
ch=PUNCT_CHARS[subModeCh];
}
 else {
if (subModeCh == PAL) {
subMode=Mode.ALPHA;
}
 else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
result.append((char)byteCompactionData[i]);
}
 else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {
subMode=Mode.ALPHA;
}
}
break;
}
if (ch != 0) {
result.append(ch);
}
i++;
}
}

public MediaConfig createChannelFileAttachment(String file,MediaConfig config){
  config.addCredentials(this);
  String xml=POSTFILE(this.url + "/create-channel-attachment",file,config.name,config.toXML());
  Element root=parse(xml);
  if (root == null) {
    return null;
  }
  try {
    MediaConfig media=new MediaConfig();
    media.parseXML(root);
    return media;
  }
 catch (  Exception exception) {
    this.exception=SDKException.parseFailure(exception);
    throw this.exception;
  }
}

public void addParam(AstNode param){
  assertNotNull(param);
  if (params == null) {
    params=new ArrayList<AstNode>();
  }
  params.add(param);
  param.setParent(this);
}

DeleteEvent(@NonNull JSONObject json) throws JSONException {
  super(TYPE_DELETE,json);
  if (TextUtils.isEmpty(mBlockId)) {
    throw new JSONException(TYPENAME_DELETE + " requires " + JSON_BLOCK_ID);
  }
  mOldXml=json.optString(JSON_OLD_VALUE);
  JSONArray ids=json.getJSONArray(JSON_IDS);
  int count=ids.length();
  List<String> temp=new ArrayList<>(count);
  for (int i=0; i < count; ++i) {
    temp.add(ids.getString(i));
  }
  mIds=Collections.unmodifiableList(temp);
}

public static boolean isFullCopyRestorable(Volume volume,DbClient dbClient){
  boolean result=false;
  String replicaState=volume.getReplicaState();
  if (isVolumeFullCopy(volume,dbClient) && replicaState != null && !replicaState.isEmpty()) {
    ReplicationState state=ReplicationState.getEnumValue(replicaState);
    if (state != null && state == ReplicationState.SYNCHRONIZED) {
      result=true;
    }
  }
  return result;
}

private final static String[] readQDStrings(String string,int[] pos) throws NamingException {
  return readQDescrs(string,pos);
}

private static boolean isBufferTooLarge(ByteBuffer buf){
  return isBufferTooLarge(buf.capacity());
}

public static void resetIndexBufferTime(){
  SAFE_QUERY_TIME.set(0);
}

protected abstract AdminResponse createResponse(DistributionManager dm);

protected boolean checkExternalStorageAndNotify(String fileName){
  if (fileName != null && fileName.startsWith("null")) {
    alertDownloadFailure(R.string.download_no_sdcard_dlg_title);
    return false;
  }
  String status=Environment.getExternalStorageState();
  if (!status.equals(Environment.MEDIA_MOUNTED)) {
    int title;
    if (status.equals(Environment.MEDIA_SHARED)) {
      title=R.string.download_sdcard_busy_dlg_title;
    }
 else {
      title=R.string.download_no_sdcard_dlg_title;
    }
    alertDownloadFailure(title);
    return false;
  }
  return true;
}

public static String plnoun(final int quantity,final String noun){
  final String enoun=fullForm(noun);
  if (quantity == 1) {
    return singular(enoun);
  }
 else {
    return plural(noun);
  }
}

public boolean verifyXMLSignature(org.w3c.dom.Element element,java.lang.String certAlias) throws XMLSignatureException {
  return verifyXMLSignature(element,DEF_ID_ATTRIBUTE,certAlias);
}

public void add(Video video){
  videoList.add(video);
  notifyDataSetChanged();
}

private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){
  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {
    return true;
  }
  return false;
}

public void readTransportSystems(final int[] columnsIndices,final BufferedReader reader) throws IOException {
  String line=reader.readLine();
  while (line != null && line.length() > 0) {
    line=reader.readLine();
  }
}

private boolean hasPrefix(byte[] nal){
  if (nal[0] == 0 && nal[1] == 0 && nal[2] == 0 && nal[3] == 0x01)   return true;
 else   return false;
}

private void unshareMain(){
  int[] old=_mainHash;
  int len=_mainHash.length;
  _mainHash=new int[len];
  System.arraycopy(old,0,_mainHash,0,len);
  _mainHashShared=false;
}

public ComponentConfigBuilder addItemInMultifield(String multifieldLabel,int index,String itemType,String itemLabel,String value){
  String type=String.format("multifield#%s#%s",index,itemType);
  String label=String.format("%s#%s",multifieldLabel,itemLabel);
  config.add(new ConfigurationEntry(currentTab,type,label,value));
  return this;
}

public int size(){
  return names.size();
}

public static IMultiPoint[] randomPoints(int n,int d,int scale){
  IMultiPoint points[]=new IMultiPoint[n];
  for (int i=0; i < n; i++) {
    StringBuilder sb=new StringBuilder();
    for (int j=0; j < d; j++) {
      sb.append(rGen.nextDouble() * scale);
      if (j < d - 1) {
        sb.append(",");
      }
    }
    points[i]=new Hyperpoint(sb.toString());
  }
  return points;
}

private void parseParameters(String parameters){
  Log.v("HttpHeader","HttpAuthHeader.parseParameters():" + " parameters: " + parameters);
  if (parameters != null) {
    int i;
    do {
      i=parameters.indexOf(',');
      if (i < 0) {
        parseParameter(parameters);
      }
 else {
        parseParameter(parameters.substring(0,i));
        parameters=parameters.substring(i + 1);
      }
    }
 while (i >= 0);
  }
}

public void addHttpSessionToken(String site,String token){
  if (!site.contains(":")) {
    site=site + (":80");
  }
  HttpSessionTokensSet siteTokens=sessionTokens.get(site);
  if (siteTokens == null) {
    siteTokens=new HttpSessionTokensSet();
    sessionTokens.put(site,siteTokens);
  }
  log.info("Added new session token for site '" + site + "': "+ token);
  siteTokens.addToken(token);
  unmarkRemovedDefaultSessionToken(site,token);
}

public GradleDistribution deserializeFromString(String distributionString){
  Preconditions.checkNotNull(distributionString);
  String localInstallationPrefix="GRADLE_DISTRIBUTION(LOCAL_INSTALLATION(";
  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith("))")) {
    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));
  }
  String remoteDistributionPrefix="GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION(";
  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith("))")) {
    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));
  }
  String versionPrefix="GRADLE_DISTRIBUTION(VERSION(";
  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith("))")) {
    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);
    return GradleDistribution.forVersion(version);
  }
  String wrapperString="GRADLE_DISTRIBUTION(WRAPPER)";
  if (distributionString.equals(wrapperString)) {
    return GradleDistribution.fromBuild();
  }
  String message=String.format("Cannot deserialize Gradle distribution string '%s.'",distributionString);
  throw new RuntimeException(message);
}

public double metersToPixels(){
  double screenCenterLat=screenTopLeft.latitude - screenSize.latitude / 2;
  double metersToLon=1 / (Util.LON_TO_METERS_AT_EQUATOR * Math.cos(screenCenterLat / 180 * Math.PI));
  return screenSize.longitude / windowWidth * metersToLon;
}

public boolean sendViaDataSocket(byte[] bytes,int start,int len){
  if (dataOutputStream == null) {
    Log.i(TAG,"Can't send via null dataOutputStream");
    return false;
  }
  if (len == 0) {
    return true;
  }
  try {
    dataOutputStream.write(bytes,start,len);
  }
 catch (  IOException e) {
    Log.i(TAG,"Couldn't write output stream for data socket");
    Log.i(TAG,e.toString());
    return false;
  }
  localDataSocket.reportTraffic(len);
  return true;
}

private void pushContext(BaseContext c){
  contextStack.push(c);
}

@Override public void bookmarksOrHistoryPicker(ComboViews startView){
  if (mTabControl.getCurrentWebView() == null) {
    return;
  }
  if (isInCustomActionMode()) {
    endActionMode();
  }
  Bundle extras=new Bundle();
  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());
  mUi.showComboView(startView,extras);
}

public FST(String fileName,String encoding,boolean verbose) throws IOException {
  FileInputStream fis=new FileInputStream(fileName);
  try {
    loadHeaderless(fis,encoding,verbose);
  }
  finally {
    fis.close();
  }
}

public static double[] normalizeZscore(double[] x){
  double mn=mean(x,0);
  double sd=standardDeviation(x,0);
  for (int i=0; i < x.length; i++)   if (!Double.isNaN(x[i]))   x[i]=(x[i] - mn) / sd;
  return x;
}

void addLocation(String location){
  if (fLocationList.contains(location)) {
    return;
  }
  fLocationList.add(location);
  fTableViewer.refresh();
  fTableViewer.setChecked(location,true);
  fTableViewer.setSelection(new StructuredSelection(location));
  validateLocations();
}

public JavaFormatter(String lineDelimiter,int initialIndentLevel,boolean useCodeFormatter,IJavaProject project){
  fLineDelimiter=lineDelimiter;
  fUseCodeFormatter=useCodeFormatter;
  fInitialIndentLevel=initialIndentLevel;
  fProject=project;
}

public String encode(final String pString,final String charset) throws EncoderException {
  if (pString == null) {
    return null;
  }
  try {
    return encodeText(pString,charset);
  }
 catch (  UnsupportedEncodingException e) {
    throw new EncoderException(e.getMessage());
  }
}

private static void checkPathNeed(){
  if (samplingInterval == -1) {
    lastPreloadTime=readMorePaths();
  }
  if (!Double.isNaN(lastPreloadTime) && SimClock.getTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) {
    for (int i=0; i < nrofPreload && !Double.isNaN(lastPreloadTime); i++) {
      lastPreloadTime=readMorePaths();
    }
  }
}

public double wide(Prior prior,Likelihood likelihood) throws OperatorFailedException {
  final int nodeCount=tree.getNodeCount();
  final NodeRef root=tree.getRoot();
  NodeRef i;
  int indexI;
  do {
    indexI=MathUtils.nextInt(nodeCount);
    i=tree.getNode(indexI);
  }
 while (root == i || (tree.getParent(i) == root && tree.getNodeHeight(i) > tree.getNodeHeight(getOtherChild(tree,tree.getParent(i),i))));
  List<Integer> secondNodeIndices=new ArrayList<Integer>();
  List<Double> probabilities=new ArrayList<Double>();
  NodeRef j, jP;
  NodeRef iP=tree.getParent(i);
  double heightIP=tree.getNodeHeight(iP);
  double heightI=tree.getNodeHeight(i);
  double sum=0.0;
  double backward=calculateTreeLikelihood(prior,likelihood,tree);
  int offset=(int)-backward;
  backward=Math.exp(backward + offset);
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        secondNodeIndices.add(n);
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        probabilities.add(prob);
        swap(tree,i,j,jP,iP);
        sum+=prob;
      }
    }
  }
  if (sum <= 1E-100) {
    throw new OperatorFailedException("Couldn't find another proposal with a decent likelihood.");
  }
  double ran=Math.random() * sum;
  int index=0;
  while (ran > 0.0) {
    ran-=probabilities.get(index);
    index++;
  }
  index--;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  double heightJP=tree.getNodeHeight(jP);
  double heightJ=tree.getNodeHeight(j);
  double sumForward2=0.0;
  NodeRef k, kP;
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumForward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  swap(tree,i,j,iP,jP);
  double forward=probabilities.get(index);
  iP=jP;
  heightIP=heightJP;
  double sumBackward=0.0;
  for (int n=0; n < nodeCount; n++) {
    j=tree.getNode(n);
    if (j != root) {
      jP=tree.getParent(j);
      if ((iP != jP) && (tree.getNodeHeight(j) < heightIP) && (heightI < tree.getNodeHeight(jP))) {
        swap(tree,i,j,iP,jP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward+=prob;
        swap(tree,i,j,jP,iP);
      }
    }
  }
  double sumBackward2=0.0;
  j=tree.getNode(secondNodeIndices.get(index));
  jP=tree.getParent(j);
  heightJP=tree.getNodeHeight(jP);
  heightJ=tree.getNodeHeight(j);
  for (int n=0; n < nodeCount; n++) {
    k=tree.getNode(n);
    if (k != root) {
      kP=tree.getParent(k);
      if ((jP != kP) && (tree.getNodeHeight(k) < heightJP) && (heightJ < tree.getNodeHeight(kP))) {
        swap(tree,j,k,jP,kP);
        double prob=Math.exp(calculateTreeLikelihood(prior,likelihood,tree) + offset);
        sumBackward2+=prob;
        swap(tree,j,k,kP,jP);
      }
    }
  }
  double forwardProb=(forward / sum) + (forward / sumForward2);
  double backwardProb=(backward / sumBackward) + (backward / sumBackward2);
  double hastingsRatio=Math.log(backwardProb / forwardProb);
  return hastingsRatio;
}

public boolean isInputColumnNameAllowed(String columnName){
  if (columnName == null || columnName.length() == 0)   return false;
  getInputColumnNames(false);
  for (int i=0; i < m_inputcolumnnames.length; i++) {
    if (columnName.equals(m_inputcolumnnames[i]))     return true;
  }
  return false;
}

public static int rgb(String hex){
  int color=(int)Long.parseLong(hex.replace("#",""),16);
  int r=(color >> 16) & 0xFF;
  int g=(color >> 8) & 0xFF;
  int b=(color >> 0) & 0xFF;
  return Color.rgb(r,g,b);
}

@Override public void addPropertyChangeListener(String name,PropertyChangeListener pcl){
  m_bcSupport.addPropertyChangeListener(name,pcl);
}

public void testEmptyOrNullBlob() throws Exception {
  try {
    PreparedStatement stmt=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES(?, ?)");
    try {
      stmt.setInt(1,3);
      stmt.setBytes(2,new byte[0]);
      int insertedCount=stmt.executeUpdate();
      assertTrue("Should insert one row.",insertedCount == 1);
      stmt.setInt(1,4);
      stmt.setNull(2,Types.BINARY);
      insertedCount=stmt.executeUpdate();
      assertTrue("Should insert one row.",insertedCount == 1);
    }
  finally {
      stmt.close();
    }
    stmt=connection.prepareStatement("SELECT bin_data FROM test_blob WHERE id = ?");
    stmt.setInt(1,3);
    try {
      ResultSet rs=stmt.executeQuery();
      assertTrue("Should select at least one row.",rs.next());
      assertTrue("Result should byte[0]",Arrays.equals(rs.getBytes(1),new byte[0]));
      rs.close();
      stmt.setInt(1,4);
      rs=stmt.executeQuery();
      assertTrue("Should select at least one row.",rs.next());
      assertTrue("Result should byte[0]",rs.getObject(1) == null);
      rs.close();
    }
  finally {
      stmt.close();
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw ex;
  }
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

private synchronized void rebuildJournal() throws IOException {
  if (journalWriter != null) {
    journalWriter.close();
  }
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Utils.US_ASCII));
  try {
    writer.write(MAGIC);
    writer.write("\n");
    writer.write(VERSION_1);
    writer.write("\n");
    writer.write(Integer.toString(appVersion));
    writer.write("\n");
    writer.write(Integer.toString(valueCount));
    writer.write("\n");
    writer.write("\n");
    for (    Entry entry : lruEntries.values()) {
      if (entry.currentEditor != null) {
        writer.write(DIRTY + ' ' + entry.key+ '\n');
      }
 else {
        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');
      }
    }
  }
  finally {
    writer.close();
  }
  if (journalFile.exists()) {
    renameTo(journalFile,journalFileBackup,true);
  }
  renameTo(journalFileTmp,journalFile,false);
  journalFileBackup.delete();
  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Utils.US_ASCII));
}

public void testCase22(){
  byte bBytes[]={120,34,78,-23,-111,45,127,23,45,-3};
  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};
  int bSign=-1;
  BigInteger aNumber=BigInteger.ZERO;
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.subtract(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(1,result.signum());
}

@SuppressWarnings("unchecked") public void restore(String fileName) throws IOException, ClassNotFoundException {
  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));
  locations=(Map<V,Point>)ois.readObject();
  ois.close();
  initializeLocations();
  locked=true;
  fireStateChanged();
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public void waitForData(){
  if (this.initialized) {
    return;
  }
  waitOnInitialization(this.initializationLatchAfterGetInitialImage);
}

private void blackmanHarris4sMin(int size){
  int start=(windowFunction.length - size) / 2;
  int stop=(windowFunction.length + size) / 2;
  double scale=1.0 / (double)size / 0.36;
  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.35875 - 0.48829 * Math.cos(twoPI * i / size) + 0.14128 * Math.cos(2 * twoPI * i / size) - 0.01168 * Math.cos(3 * twoPI * i / size));
}

private byte[] calculateCMSKeyChecksum(byte[] key){
  byte[] result=new byte[8];
  sha1.update(key,0,key.length);
  sha1.doFinal(digest,0);
  System.arraycopy(digest,0,result,0,8);
  return result;
}

public int hashCode(){
  return _lowerNick.hashCode();
}

public boolean incrementReceived(){
  Long diff=System.currentTimeMillis() - startTime;
  if (diff >= 1000) {
    packetsPerSecond=intervalPackets;
    startTime=System.currentTimeMillis();
    intervalPackets=1;
    return true;
  }
 else {
    intervalPackets++;
  }
  this.receivedPackets++;
  return false;
}

Sentence parseSentence(final String text,final ConversationContext ctx){
  if (isEmpty()) {
    return ConversationParser.parse(text,ctx);
  }
  String txt=text.trim();
  final Sentence sentence=new SentenceImplementation(ctx,txt);
  txt=ConversationParser.detectSentenceType(txt,sentence);
  if (typeMatching) {
    readTypeMatchExpressions(txt,ctx,sentence);
  }
 else   if (exactMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (similarMatching) {
    readSimpleExpressions(txt,ctx,sentence);
  }
 else   if (jokerMatching) {
    readJokerExpressions(txt,ctx,sentence);
  }
 else   if (caseInsensitive) {
    readSimpleExpressions(txt,ctx,sentence);
  }
  return sentence;
}

public KafkaCluster usingDirectory(File dataDir){
  if (running)   throw new IllegalStateException("Unable to add a broker when the cluster is already running");
  if (dataDir != null && dataDir.exists() && !dataDir.isDirectory() && !dataDir.canWrite() && !dataDir.canRead()) {
    throw new IllegalArgumentException("The directory must be readable and writable");
  }
  this.dataDir=dataDir;
  return this;
}

private void expand(int i){
  if (count + i <= buf.length) {
    return;
  }
  byte[] newbuf=mPool.getBuf((count + i) * 2);
  System.arraycopy(buf,0,newbuf,0,count);
  mPool.returnBuf(buf);
  buf=newbuf;
}

void onConsumeFinished(Purchase purchase,IabResult result);

protected boolean checkProsodicPosition(Element currentRulePart,String prosodicPositionType){
  NamedNodeMap attNodes=currentRulePart.getAttributes();
  for (int z=0; z < attNodes.getLength(); z++) {
    Node el=attNodes.item(z);
    String currentAtt=el.getNodeName();
    String currentVal=el.getNodeValue();
    if (currentAtt.equals("type")) {
      if (!currentVal.startsWith("!")) {
        if (!prosodicPositionType.equals(currentVal))         return false;
      }
 else {
        currentVal=currentVal.substring(1,currentVal.length());
        if (prosodicPositionType.equals(currentVal))         return false;
      }
    }
  }
  return true;
}

public static BigDecimal parseBigDecimalForEntity(String bigDecimalString) throws NumberFormatException {
  if (bigDecimalString == null) {
    return null;
  }
  bigDecimalString=bigDecimalString.trim();
  bigDecimalString=bigDecimalString.replaceAll(",","");
  if (bigDecimalString.length() < 1) {
    return null;
  }
  return new BigDecimal(bigDecimalString);
}

public static void registerOperators(String name,InputStream operatorsXML,ClassLoader classLoader){
  registerOperators(name,operatorsXML,classLoader,null);
}

private void doPermissionWorkBeforeAndroidM(@NonNull Activity activity,@NonNull String[] permissions,@Nullable PermissionsResultAction action){
  for (  String perm : permissions) {
    if (action != null) {
      if (!mPermissions.contains(perm)) {
        action.onResult(perm,Permissions.NOT_FOUND);
      }
 else       if (ActivityCompat.checkSelfPermission(activity,perm) != PackageManager.PERMISSION_GRANTED) {
        action.onResult(perm,Permissions.DENIED);
      }
 else {
        action.onResult(perm,Permissions.GRANTED);
      }
    }
  }
}

public void deleteSubGroupContainers(Set groupContainers) throws AMException, SSOException {
  Iterator iter=groupContainers.iterator();
  while (iter.hasNext()) {
    String groupContainerDN=(String)iter.next();
    AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN);
    groupContainer.delete();
  }
}

public GlowTask(Plugin owner,Runnable task,boolean sync,long delay,long period){
  super(task,null);
  taskId=nextTaskId.getAndIncrement();
  description=task.toString();
  this.owner=owner;
  this.delay=delay;
  this.period=period;
  counter=0;
  this.sync=sync;
}

public static void init(String[] args){
  try {
    compiler.initCompiler(args);
    if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) {
      optCompiler.initCompiler(args);
    }
  }
 catch (  Throwable e) {
    while (e != null) {
      e.printStackTrace();
      e=e.getCause();
    }
  }
}

static native boolean openDev();

int sendNextByte(){
  int result=0;
  try {
    long tDiff=interByteTime - ((System.currentTimeMillis() - lastRxTime) * 1000000000);
    if (tDiff > 0) {
      log.debug("TX: waiting " + tDiff + " ns");
      Thread.sleep(tDiff / 1000000L,(int)(tDiff % 1000000L));
    }
  }
 catch (  InterruptedException ex) {
    log.error("wait: " + ex.toString());
  }
  if (currTxCharPos >= currTxTgm.length) {
    result=dequeueTelegram();
  }
  if (result == 0) {
    writeChar(currTxTgm[currTxCharPos++],true);
    if (currTxCharPos >= currTxTgm.length) {
      setProtStat(ProtStatus.RECEIVING);
    }
  }
  return result;
}

public static String encode(Serializable o){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    ObjectOutputStream oos=new ObjectOutputStream(bos);
    try {
      oos.writeObject(o);
      oos.flush();
    }
  finally {
      oos.close();
    }
    return Base64.encodeBytes(bos.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

public static Map<String,Object> createImage(DispatchContext dctx,Map<String,? extends Object> context){
  Map<String,Object> result=createImageMethod(dctx,context);
  return result;
}

public void addProfiles(@NonNull IProfile... profiles){
  if (mAccountHeaderBuilder.mProfiles == null) {
    mAccountHeaderBuilder.mProfiles=new ArrayList<>();
  }
  Collections.addAll(mAccountHeaderBuilder.mProfiles,IdDistributor.checkIds(profiles));
  mAccountHeaderBuilder.updateHeaderAndList();
}

private static boolean isIdentifierName(String k){
  int n=k.length();
  if (n == 0) {
    return false;
  }
  if (!Character.isJavaIdentifierStart(k.charAt(0))) {
    return false;
  }
  for (int i=1; i < n; ++i) {
    if (!Character.isJavaIdentifierPart(k.charAt(i))) {
      return false;
    }
  }
  return true;
}

static boolean lessThanUnsignedLong(long x1,long x2){
  return (x1 + Long.MIN_VALUE) < (x2 + Long.MIN_VALUE);
}

private void moveSingleNode(Object source,Point newPoint){
  DisplayNode node=(DisplayNode)source;
  int deltaX=newPoint.x - clickPoint.x;
  int deltaY=newPoint.y - clickPoint.y;
  int newX=node.getLocation().x + deltaX;
  int newY=node.getLocation().y + deltaY;
  node.setLocation(newX,newY);
}

public static <T>List<T> toList(T obj1,T obj2,T obj3){
  List<T> list=new LinkedList<T>();
  list.add(obj1);
  list.add(obj2);
  list.add(obj3);
  return list;
}

public void addMacroRecord(MacroRecord record){
  if (record != null)   macroRecords.add(record);
}

@SuppressWarnings("rawtypes") protected KafkaSpoutWrapper createKafkaSpout(Map conf,TopologyContext context,SpoutOutputCollector collector,final String topic,String schemeClsName,SpoutSpec spoutSpec,Map<String,StreamDefinition> sds) throws Exception {
  String kafkaBrokerZkQuorum=config.getString("spout.kafkaBrokerZkQuorum");
  BrokerHosts hosts=null;
  if (config.hasPath("spout.kafkaBrokerZkBasePath")) {
    hosts=new ZkHosts(kafkaBrokerZkQuorum,config.getString("spout.kafkaBrokerZkBasePath"));
  }
 else {
    hosts=new ZkHosts(kafkaBrokerZkQuorum);
  }
  String transactionZkRoot=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT;
  if (config.hasPath("spout.stormKafkaTransactionZkPath")) {
    transactionZkRoot=config.getString("spout.stormKafkaTransactionZkPath");
  }
  String zkStateTransactionRelPath=DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH;
  if (config.hasPath("spout.stormKafkaEagleConsumer")) {
    zkStateTransactionRelPath=config.getString("spout.stormKafkaEagleConsumer");
  }
  SpoutConfig spoutConfig=new SpoutConfig(hosts,topic,transactionZkRoot,zkStateTransactionRelPath + "/" + topic+ "/"+ topologyId);
  boolean stormKafkaUseSameZkQuorumWithKafkaBroker=config.getBoolean("spout.stormKafkaUseSameZkQuorumWithKafkaBroker");
  if (stormKafkaUseSameZkQuorumWithKafkaBroker) {
    ZkServerPortUtils utils=new ZkServerPortUtils(kafkaBrokerZkQuorum);
    spoutConfig.zkServers=utils.getZkHosts();
    spoutConfig.zkPort=utils.getZkPort();
  }
 else {
    ZkServerPortUtils utils=new ZkServerPortUtils(config.getString("spout.stormKafkaTransactionZkQuorum"));
    spoutConfig.zkServers=utils.getZkHosts();
    spoutConfig.zkPort=utils.getZkPort();
  }
  spoutConfig.stateUpdateIntervalMs=config.hasPath("spout.stormKafkaStateUpdateIntervalMs") ? config.getInt("spout.stormKafkaStateUpdateIntervalMs") : 2000;
  spoutConfig.fetchSizeBytes=config.hasPath("spout.stormKafkaFetchSizeBytes") ? config.getInt("spout.stormKafkaFetchSizeBytes") : 1048586;
  if (config.hasPath("spout.stormKafkaStartOffsetTime")) {
    spoutConfig.startOffsetTime=config.getInt("spout.stormKafkaStartOffsetTime");
  }
  spoutConfig.scheme=createMultiScheme(conf,topic,schemeClsName);
  KafkaSpoutWrapper wrapper=new KafkaSpoutWrapper(spoutConfig,kafkaSpoutMetric);
  SpoutOutputCollectorWrapper collectorWrapper=new SpoutOutputCollectorWrapper(this,collector,topic,spoutSpec,numOfRouterBolts,sds,this.serializer);
  wrapper.open(conf,context,collectorWrapper);
  if (LOG.isInfoEnabled()) {
    LOG.info("create and open kafka wrapper: topic {}, scheme class{} ",topic,schemeClsName);
  }
  return wrapper;
}

public Builder addEmail(Email email){
  emails.add(email);
  return this;
}

public static HashProvider best(HashParameters params){
  return best(params,EnumSet.of(HashSupport.STATEFUL));
}

public byte[] readRawBytes(final int size) throws IOException {
  if (size < 0) {
    throw InvalidProtocolBufferNanoException.negativeSize();
  }
  if (bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - bufferPos);
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
  if (size <= bufferSize - bufferPos) {
    final byte[] bytes=new byte[size];
    System.arraycopy(buffer,bufferPos,bytes,0,size);
    bufferPos+=size;
    return bytes;
  }
 else {
    throw InvalidProtocolBufferNanoException.truncatedMessage();
  }
}

static boolean pairSum(int ar[],int x){
  Arrays.sort(ar);
  int len=ar.length;
  for (int i=0, j=len - 1; i < j; ) {
    if (ar[i] + ar[j] == x) {
      return true;
    }
 else     if (ar[i] + ar[j] < x) {
      i++;
    }
 else {
      j--;
    }
  }
  return false;
}

public synchronized void loadFromFile(){
  entries.clear();
  Path file=Paths.get(fileName);
  try (BufferedReader reader=Files.newBufferedReader(file,CHARSET)){
    String line;
    do {
      line=reader.readLine();
      AddressbookEntry parsedEntry=parseLine(line);
      if (parsedEntry != null) {
        entries.put(parsedEntry.getName(),parsedEntry);
      }
    }
 while (line != null);
  }
 catch (  IOException ex) {
    LOGGER.warning("Error reading addressbook: " + ex.getLocalizedMessage());
  }
  LOGGER.info("Read " + entries.size() + " addressbook entries from "+ fileName);
  scanCategories();
}

public double localScore(int i,int... parents){
  for (  int p : parents)   if (forbidden.contains(p))   return Double.NaN;
  double residualVariance=covariances.get(i,i);
  int n=getSampleSize();
  int p=parents.length;
  Matrix covxx=getSelection1(covariances,parents);
  try {
    Matrix covxxInv=covxx.inverse();
    Matrix covxy=getSelection2(covariances,parents,i);
    Matrix b=covxxInv.times(covxy);
    double dot=0.0;
    for (int j=0; j < covxy.getRowDimension(); j++) {
      for (int k=0; k < covxy.getColumnDimension(); k++) {
        dot+=covxy.get(j,k) * b.get(j,k);
      }
    }
    residualVariance-=dot;
    if (residualVariance <= 0) {
      if (isVerbose()) {
        out.println("Nonpositive residual varianceY: resVar / varianceY = " + (residualVariance / covariances.get(i,i)));
      }
      return Double.NaN;
    }
    double c=getPenaltyDiscount();
    return score(residualVariance,n,logn,p,c);
  }
 catch (  Exception e) {
    boolean removedOne=true;
    while (removedOne) {
      List<Integer> _parents=new ArrayList<>();
      for (int y=0; y < parents.length; y++)       _parents.add(parents[y]);
      _parents.removeAll(forbidden);
      parents=new int[_parents.size()];
      for (int y=0; y < _parents.size(); y++)       parents[y]=_parents.get(y);
      removedOne=printMinimalLinearlyDependentSet(parents,covariances);
    }
    return Double.NaN;
  }
}

public boolean remove(final int position){
  final AdapterTransaction removeTransaction=new RemoveTransaction<>(this,position);
  final boolean success=removeTransaction.perform();
  mTransactions.offer(removeTransaction);
  return success;
}

private void encodeTypes(List<Type> types,Map<String,Object> m,String key,Declaration from){
  if (types == null || types.isEmpty())   return;
  List<Map<String,Object>> sats=new ArrayList<>(types.size());
  for (  Type st : types) {
    sats.add(typeMap(st,from));
  }
  m.put(key,sats);
}

public static void clearAssertionInformation(){
  _AssertInfos.clear();
  _AssertOccured=false;
}

public void build(String code,String customStatus){
  try {
    if (customStatus != null) {
      result.put(resources.getString(R.string.intent_extra_status),customStatus);
    }
 else {
      result.put(resources.getString(R.string.intent_extra_status),resources.getString(R.string.shared_pref_default_status));
    }
    result.put(resources.getString(R.string.intent_extra_code),code);
    operationListResult.put(result);
  }
 catch (  JSONException e) {
    Log.e(TAG,"Invalid JSON format." + e.toString());
  }
}

public static Operator generateBranchPlan(AkibanInformationSchema ais,Table table){
  final Operator indexScan=generateIndexScan(ais,table);
  final Schema schema=SchemaCache.globalSchema(ais);
  PrimaryKey pkey=table.getPrimaryKeyIncludingInternal();
  IndexRowType indexType=schema.indexRowType(pkey.getIndex());
  return generateBranchPlan(table,indexScan,indexType);
}

protected void addToMaintenanceQueue(NodePortTuple npt){
  if (maintenanceQueue.contains(npt) == false) {
    maintenanceQueue.add(npt);
  }
}

private boolean linkFirst(Node<E> node){
  if (count >= capacity)   return false;
  Node<E> f=first;
  node.next=f;
  first=node;
  if (last == null)   last=node;
 else   f.prev=node;
  ++count;
  notEmpty.signal();
  return true;
}

public long startstack(){
  return Long.parseLong(fields[27]);
}

public static void copyRealmPrivilegesFromParent(SSOToken token,OrganizationConfigManager parent,OrganizationConfigManager child) throws SSOException, DelegationException {
  if (debug.messageEnabled()) {
    debug.message("DelegationUtils.copyRealmPrivilegesFromParent" + " Parent org: " + parent.getOrganizationName() + " Child org: "+ child.getOrganizationName());
  }
  DelegationManager pdm=new DelegationManager(token,parent.getOrganizationName());
  DelegationManager cdm=new DelegationManager(token,child.getOrganizationName());
  String childOrgName=DNMapper.orgNameToDN(child.getOrganizationName());
  Set pdps=pdm.getPrivileges();
  if (pdps == null || pdps.isEmpty()) {
    if (debug.messageEnabled()) {
      debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: No privilege subjects in parent");
    }
    return;
  }
  for (Iterator items=pdps.iterator(); items.hasNext(); ) {
    DelegationPrivilege dp=(DelegationPrivilege)items.next();
    Set subjects=dp.getSubjects();
    if (subjects == null || subjects.isEmpty()) {
      if (debug.messageEnabled()) {
        debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: No subjects in privilege: " + dp);
      }
      continue;
    }
    Set newSubjects=new HashSet();
    for (Iterator subs=subjects.iterator(); subs.hasNext(); ) {
      String sName=(String)subs.next();
      try {
        AMIdentity id=IdUtils.getIdentity(token,sName);
        AMIdentity newId=new AMIdentity(token,id.getName(),id.getType(),childOrgName,id.getDN());
        newSubjects.add(IdUtils.getUniversalId(newId));
      }
 catch (      IdRepoException ide) {
        if (debug.messageEnabled()) {
          debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: IdRepoException for: " + dp,ide);
        }
        continue;
      }
    }
    dp.setSubjects(newSubjects);
    Set permissions=dp.getPermissions();
    if ((permissions != null) && (!permissions.isEmpty())) {
      Iterator it=permissions.iterator();
      while (it.hasNext()) {
        DelegationPermission perm=(DelegationPermission)it.next();
        perm.setOrganizationName("*" + childOrgName);
      }
    }
    cdm.addPrivilege(dp);
    if (debug.messageEnabled()) {
      debug.message("DelegationUtils.copyRealmPrivileges" + "FromParent: Privilege copied from parent: " + dp);
    }
  }
}

public boolean match(MimeType other){
  if (this == other)   return true;
  if (type != null && other.type != null && !type.equals(other.type))   return false;
  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;
  return true;
}

@Override public boolean isArmed(){
  return other.isArmed();
}

public EncoderTestSuiteBuilder valid(int min,int max){
  _valid.set(min,max + 1);
  _invalid.clear(min,max + 1);
  _encoded.clear(min,max + 1);
  return this;
}

protected List<VolumeDescriptor> createChangeVirtualPoolDescriptors(StorageSystem vplexSystem,Volume volume,VirtualPool newVpool,String taskId,List<Recommendation> recommendations,VirtualPoolCapabilityValuesWrapper capabilities,ControllerOperationValuesWrapper operationsWrapper) throws InternalException {
  URI volumeVarrayURI=volume.getVirtualArray();
  VirtualArray volumeVarray=_dbClient.queryObject(VirtualArray.class,volumeVarrayURI);
  s_logger.info("Virtual volume varray is {}",volumeVarrayURI);
  URI volumeVpoolURI=volume.getVirtualPool();
  VirtualPool currentVpool=_dbClient.queryObject(VirtualPool.class,volumeVpoolURI);
  List<VolumeDescriptor> descriptors=new ArrayList<VolumeDescriptor>();
  VolumeDescriptor vplexVirtualVolumeDesc=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),null);
  Map<String,Object> volumeParams=new HashMap<String,Object>();
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID,volume.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID,newVpool.getId());
  volumeParams.put(VolumeDescriptor.PARAM_VPOOL_CHANGE_OLD_VPOOL_ID,volume.getVirtualPool());
  if (operationsWrapper != null) {
    if (operationsWrapper.getMigrationSuspendBeforeCommit() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT,operationsWrapper.getMigrationSuspendBeforeCommit());
    }
    if (operationsWrapper.getMigrationSuspendBeforeDeleteSource() != null) {
      volumeParams.put(VolumeDescriptor.PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,operationsWrapper.getMigrationSuspendBeforeDeleteSource());
    }
  }
  vplexVirtualVolumeDesc.setParameters(volumeParams);
  descriptors.add(vplexVirtualVolumeDesc);
  if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentVpool,newVpool)) {
    Volume migSrcVolume=getAssociatedVolumeInVArray(volume,volumeVarrayURI);
    descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,volumeVarray,newVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,false,capabilities));
  }
  URI haVarrayURI=VirtualPoolChangeAnalyzer.getHaVarrayURI(currentVpool);
  if (haVarrayURI != null) {
    VirtualArray haVarray=_dbClient.queryObject(VirtualArray.class,haVarrayURI);
    VirtualPool currentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(currentVpool,_dbClient);
    VirtualPool newHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(currentVpool,newVpool,_dbClient);
    if (VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(currentHaVpool,newHaVpool)) {
      Volume migSrcVolume=getAssociatedVolumeInVArray(volume,haVarrayURI);
      descriptors.addAll(createBackendVolumeMigrationDescriptors(vplexSystem,volume,migSrcVolume,haVarray,newHaVpool,getVolumeCapacity(migSrcVolume != null ? migSrcVolume : volume),taskId,recommendations,true,capabilities));
    }
  }
  return descriptors;
}

public static boolean isJavaScriptEnabled(HttpServletRequest request){
  HttpSession session=request.getSession();
  Boolean javaScriptEnabled=(Boolean)session.getAttribute("javaScriptEnabled");
  if (javaScriptEnabled != null) {
    return javaScriptEnabled.booleanValue();
  }
  return false;
}

public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj instanceof ECFieldFp) {
    return (p.equals(((ECFieldFp)obj).p));
  }
  return false;
}

public String name(){
  return theName;
}

public static void closeQuietly(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    RuntimeException rethrown) {
      throw rethrown;
    }
catch (    Exception ignored) {
    }
  }
}

private static String checksumMD5(String data){
  MessageDigest md5=null;
  try {
    md5=MessageDigest.getInstance("MD5");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException("Unable to create MD5 instance",ex);
  }
  return hexEncode(md5.digest(data.getBytes()));
}

public static boolean validSkinSpecFile(String fileName){
  File file=new File(Configuration.skinsDir(),fileName);
  if (!file.exists() || !file.isFile()) {
    return false;
  }
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  try {
    DocumentBuilder builder=dbf.newDocumentBuilder();
    Document doc=builder.parse(file);
    NodeList listOfComponents=doc.getElementsByTagName(UI_ELEMENT);
    if (listOfComponents.getLength() > 0) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  Exception e) {
    return false;
  }
}

private void generateLegalTimesTree(){
  int k0=KeyEvent.KEYCODE_0;
  int k1=KeyEvent.KEYCODE_1;
  int k2=KeyEvent.KEYCODE_2;
  int k3=KeyEvent.KEYCODE_3;
  int k4=KeyEvent.KEYCODE_4;
  int k5=KeyEvent.KEYCODE_5;
  int k6=KeyEvent.KEYCODE_6;
  int k7=KeyEvent.KEYCODE_7;
  int k8=KeyEvent.KEYCODE_8;
  int k9=KeyEvent.KEYCODE_9;
  mLegalTimesTree=new Node();
  if (mIs24HourMode) {
    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);
    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    minuteFirstDigit.addChild(minuteSecondDigit);
    Node firstDigit=new Node(k0,k1);
    mLegalTimesTree.addChild(firstDigit);
    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    Node thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    secondDigit=new Node(k6,k7,k8,k9);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    firstDigit=new Node(k2);
    mLegalTimesTree.addChild(firstDigit);
    secondDigit=new Node(k0,k1,k2,k3);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    secondDigit=new Node(k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteSecondDigit);
    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(minuteFirstDigit);
  }
 else {
    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));
    Node firstDigit=new Node(k1);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    Node secondDigit=new Node(k0,k1,k2);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(ampm);
    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    thirdDigit.addChild(fourthDigit);
    fourthDigit.addChild(ampm);
    thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    secondDigit=new Node(k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
  }
}

public StrBuilder insert(final int index,final Object obj){
  if (obj == null) {
    return insert(index,nullText);
  }
  return insert(index,obj.toString());
}

@Override public void handleMouseMoved(ChartCanvas canvas,MouseEvent e){
  if (!canvas.isTooltipEnabled()) {
    return;
  }
  String text=getTooltipText(canvas,e.getX(),e.getY());
  canvas.setTooltip(text,e.getScreenX(),e.getScreenY());
}

public int size(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    return count;
  }
  finally {
    lock.unlock();
  }
}

private boolean loadUnpackedUMD(String filename) throws IOException, GeneralJpcspException {
  if (doUmdBuffering) {
    return false;
  }
  File file=new File(filename);
  if (file.exists()) {
    RandomAccessFile raf=new RandomAccessFile(file,"r");
    FileChannel roChannel=raf.getChannel();
    ByteBuffer readbuffer=roChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)roChannel.size());
    emulator.load("disc0:/PSP_GAME/SYSDIR/EBOOT.BIN",readbuffer);
    raf.close();
    log.info("Using unpacked UMD EBOOT.BIN image");
    return true;
  }
  return false;
}

public boolean disableVMAX3Compression(URI blockObjectURI,StorageSystem storageSystem){
  VirtualPool virtualPool=null;
  StoragePool storagePool=null;
  Volume volume=null;
  if (URIUtil.isType(blockObjectURI,Volume.class)) {
    volume=_dbClient.queryObject(Volume.class,blockObjectURI);
  }
 else   if (URIUtil.isType(blockObjectURI,BlockSnapshot.class)) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,blockObjectURI);
    volume=_dbClient.queryObject(Volume.class,snapshot.getParent());
  }
 else   if (URIUtil.isType(blockObjectURI,BlockMirror.class)) {
    BlockMirror mirror=_dbClient.queryObject(BlockMirror.class,blockObjectURI);
    virtualPool=_dbClient.queryObject(VirtualPool.class,mirror.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,mirror.getPool());
  }
  if (volume != null) {
    virtualPool=_dbClient.queryObject(VirtualPool.class,volume.getVirtualPool());
    storagePool=_dbClient.queryObject(StoragePool.class,volume.getPool());
  }
  return (checkIfProviderSupportsCompressionOperations(storageSystem) && !virtualPool.getCompressionEnabled() && storagePool.getCompressionEnabled());
}

public static LatLon rhumbEndPosition(LatLon p,double rhumbAzimuthRadians,double pathLengthRadians){
  if (p == null) {
    throw new IllegalArgumentException("LatLon Is Null");
  }
  return rhumbEndPosition(p,Angle.fromRadians(rhumbAzimuthRadians),Angle.fromRadians(pathLengthRadians));
}

private static int indexOf(Object[] array,Object elt){
  return indexOf(array,array.length,elt);
}

public Dimension maximumLayoutSize(Container target){
  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);
}

public static String readStream(InputStream in){
  BufferedReader reader=new BufferedReader(new InputStreamReader(in));
  StringBuilder sb=new StringBuilder();
  String line=null;
  try {
    while ((line=reader.readLine()) != null) {
      sb.append(line + "\n");
    }
  }
 catch (  IOException e) {
    FreshAirLog.e("Error reading stream",e);
  }
 finally {
    try {
      in.close();
    }
 catch (    IOException e) {
    }
    try {
      reader.close();
    }
 catch (    IOException e) {
    }
  }
  return sb.toString();
}

public void update(long n){
  uncounted.addAndGet(n);
}

private void logExpiration(Entry e){
  if (e.renewalsDone()) {
    logger.log(Level.FINE,"Reached desired expiration for lease {0}",e.lease);
  }
 else {
    logger.log(Levels.FAILED,"Lease {0} expired before reaching desired expiration",e.lease);
  }
}

void removeRipple(Ripple ripple){
  final Ripple[] ripples=mExitingRipples;
  final int count=mExitingRipplesCount;
  final int index=getRippleIndex(ripple);
  if (index >= 0) {
    System.arraycopy(ripples,index + 1,ripples,index,count - (index + 1));
    ripples[count - 1]=null;
    mExitingRipplesCount--;
    invalidateSelf();
  }
}

protected final void writeS(ByteBuffer buf,String text){
  if (text == null) {
    buf.putChar('\000');
  }
 else {
    final int len=text.length();
    for (int i=0; i < len; i++) {
      buf.putChar(text.charAt(i));
    }
    buf.putChar('\000');
  }
}

@Override public void onDrawEye(Eye eye){
  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);
  Engine.checkGLError("mColorParam");
  if (!prefOrientationProviderString.equals("0")) {
    if (firstOnDrawEye > 0) {
      firstOnDrawEye--;
      float[] m=new float[16];
      Matrix.invertM(m,0,mHeadViewSDK,0);
      Matrix.multiplyMM(m,0,eye.getEyeView(),0,m,0);
      if (eye.getType() == Eye.Type.RIGHT) {
        mEyeRightView=m;
      }
 else       if (eye.getType() == Eye.Type.LEFT) {
        mEyeLeftView=m;
      }
      return;
    }
    float[] m=new float[16];
    if (eye.getType() == Eye.Type.RIGHT) {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeRightView,0);
    }
 else {
      Matrix.multiplyMM(m,0,mHeadViewUse,0,mEyeLeftView,0);
    }
    Matrix.multiplyMM(mView,0,m,0,mCamera,0);
  }
 else {
    Matrix.multiplyMM(mView,0,eye.getEyeView(),0,mCamera,0);
  }
  float[] perspective=eye.getPerspective(Z_NEAR,Z_FAR);
  GLES20.glEnable(GLES20.GL_DEPTH_TEST);
  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glEnable(GLES20.GL_BLEND);
  if (prefShowEnv && bgEnv.isReady()) {
    Matrix.multiplyMM(mModelView,0,mView,0,bgEnv.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    bgEnv.draw(eye.getType(),mModelViewProjection);
  }
  GLES20.glDisable(GLES20.GL_DEPTH_TEST);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,cameraPreview.model,0);
  cameraPreview.draw(eye.getType(),mModelViewProjection);
  Matrix.multiplyMM(mModelView,0,mView,0,screen.model,0);
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
  screen.draw(eye.getType(),mModelViewProjection);
  for (  ButtonThing button : buttonList) {
    Matrix.multiplyMM(mModelView,0,mView,0,button.model,0);
    Matrix.multiplyMM(mModelViewProjection,0,perspective,0,mModelView,0);
    button.draw(eye.getType(),mModelViewProjection);
  }
  Matrix.multiplyMM(mModelViewProjection,0,perspective,0,aimPoint.model,0);
  aimPoint.draw(Eye.Type.MONOCULAR,mModelViewProjection);
}

protected SourceRecords consumeRecordsByTopic(int numRecords) throws InterruptedException {
  SourceRecords records=new SourceRecords();
  consumeRecords(numRecords,null);
  return records;
}

@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof PrototypeSize)) {
    return false;
  }
  PrototypeSize size=(PrototypeSize)o;
  return prototype.equals(size.prototype);
}

private static int compareVersion(String versionStr1,String versionStr2){
  if (versionStr1 == null) {
    throw new MLContextException("First version argument to compareVersion() is null");
  }
  if (versionStr2 == null) {
    throw new MLContextException("Second version argument to compareVersion() is null");
  }
  Scanner scanner1=null;
  Scanner scanner2=null;
  try {
    scanner1=new Scanner(versionStr1);
    scanner2=new Scanner(versionStr2);
    scanner1.useDelimiter("\\.");
    scanner2.useDelimiter("\\.");
    while (scanner1.hasNextInt() && scanner2.hasNextInt()) {
      int version1=scanner1.nextInt();
      int version2=scanner2.nextInt();
      if (version1 < version2) {
        return -1;
      }
 else       if (version1 > version2) {
        return 1;
      }
    }
    return scanner1.hasNextInt() ? 1 : 0;
  }
  finally {
    scanner1.close();
    scanner2.close();
  }
}

public static boolean isValidVector(Vector2f vector){
  if (vector == null) {
    return false;
  }
  if (Float.isNaN(vector.x) || Float.isNaN(vector.y)) {
    return false;
  }
  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y)) {
    return false;
  }
  return true;
}

public boolean isObsessional(){
  return typeString.contains(SUFFIX_OBSESSIONAL);
}

@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="equality is specifically 'Unchanged' here") public void changeLocoSpeed(DccThrottle t,Block blk,float speed){
  if (blk == referenced && speed == desiredSpeedStep) {
    return;
  }
  float blockLength=blk.getLengthMm();
  if (blk == referenced) {
    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));
    blockLength=distanceRemaining;
    log.debug("Block passed is the same as we are currently processing");
  }
 else {
    referenced=blk;
  }
  changeLocoSpeed(t,blockLength,speed);
}

public boolean remove(Object targetChild){
  return remove(targetChild,true);
}

private void notifyClassObservers(ClassDescriptor classDescriptor){
  for (  IClassObserver observer : classObserverList) {
    observer.observeClass(classDescriptor);
  }
}

public void dup2(){
  mv.visitInsn(Opcodes.DUP2);
}

static boolean isAppXml(String mime){
  return mime != null && (mime.equals("application/xml") || mime.equals("application/xml-dtd") || mime.equals("application/xml-external-parsed-entity")|| mime.startsWith("application/") && mime.endsWith("+xml"));
}

public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){
  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());
}

protected void throwParseException(ParseException e) throws ParseException {
  if (locator != null) {
    String elementLocation="";
    if (curHandler != null) {
      elementLocation+=", element " + curHandler.qName;
    }
    String location="[Line " + String.valueOf(locator.getLineNumber()) + ", Column "+ String.valueOf(locator.getColumnNumber())+ elementLocation+ "] ";
    LogUtils.logException(logger,Level.FINE,location,e);
    throw new ParseException(location + e.getMessage(),e);
  }
 else {
    LogUtils.logException(logger,Level.FINE,null,e);
    throw e;
  }
}

public CustomEditor(){
  setLayout(new BorderLayout());
  add(m_Label,BorderLayout.CENTER);
  m_DeleteBut.addActionListener(m_InnerActionListener);
  m_EditBut.addActionListener(m_InnerActionListener);
  m_UpBut.addActionListener(m_InnerActionListener);
  m_DownBut.addActionListener(m_InnerActionListener);
  m_AddBut.addActionListener(m_InnerActionListener);
  m_ElementList.addListSelectionListener(m_InnerSelectionListener);
  m_ElementList.addMouseListener(m_InnerMouseListener);
  m_AddBut.setToolTipText("Add the current item to the list");
  m_DeleteBut.setToolTipText("Delete the selected list item");
  m_EditBut.setToolTipText("Edit the selected list item");
  m_UpBut.setToolTipText("Move the selected item(s) one up");
  m_DownBut.setToolTipText("Move the selected item(s) one down");
}

public MemoidOne(Function<? super Input,? extends Output> fn,BiPredicate<Input,Input> equality){
  fn_=Objects.requireNonNull(fn);
  equality_=Objects.requireNonNull(equality);
}

public static EPType singleValue(Class singleValueType){
  if (singleValueType != null && singleValueType.isArray()) {
    return new ClassMultiValuedEPType(singleValueType,singleValueType.getComponentType());
  }
  return new ClassEPType(singleValueType);
}

private static Class<?> convertFieldType(String fieldType){
  if (fieldTypeMap.containsKey(fieldType)) {
    return fieldTypeMap.get(fieldType);
  }
  return null;
}

void addXMLElementAfterTokenIndex(int lastTokenIndex,XMLElement element,boolean addAfterNewLine) throws Exception {
  addXMLElementAfterTokenIndex(lastTokenIndex,element,addAfterNewLine,true);
}

public static Map<String,Object> findContentParents(DispatchContext dctx,Map<String,? extends Object> context){
  Map<String,Object> results=FastMap.newInstance();
  List<Object> parentList=FastList.newInstance();
  results.put("parentList",parentList);
  LocalDispatcher dispatcher=dctx.getDispatcher();
  String contentId=(String)context.get("contentId");
  String contentAssocTypeId=(String)context.get("contentAssocTypeId");
  String direction=(String)context.get("direction");
  if (UtilValidate.isEmpty(direction)) {
    direction="To";
  }
  Map<String,Object> traversMap=FastMap.newInstance();
  traversMap.put("contentId",contentId);
  traversMap.put("direction",direction);
  traversMap.put("contentAssocTypeId",contentAssocTypeId);
  try {
    Map<String,Object> thisResults=dispatcher.runSync("traverseContent",traversMap);
    String errorMsg=ServiceUtil.getErrorMessage(thisResults);
    if (UtilValidate.isNotEmpty(errorMsg)) {
      Debug.logError("Problem in traverseContent. " + errorMsg,module);
      return ServiceUtil.returnError(errorMsg);
    }
    Map<String,Object> nodeMap=UtilGenerics.checkMap(thisResults.get("nodeMap"));
    walkParentTree(nodeMap,parentList);
  }
 catch (  GenericServiceException e) {
    return ServiceUtil.returnFailure(e.getMessage());
  }
  return results;
}

public static boolean arrayEquals(Object x,Object y,double tolf,double told){
  if (x == null && y == null) {
    return true;
  }
  if (x == null || y == null) {
    return false;
  }
  Class<?> xClass=x.getClass();
  Class<?> yClass=y.getClass();
  if (xClass != yClass) {
    return false;
  }
  if (!xClass.isArray()) {
    return x.equals(y);
  }
 else {
    if (xClass.equals(int[].class)) {
      return Arrays.equals((int[])x,(int[])y);
    }
 else     if (xClass.equals(double[].class)) {
      if (told == 0) {
        return Arrays.equals((double[])x,(double[])y);
      }
 else {
        return doubleArrayEquals((double[])x,(double[])y,told);
      }
    }
 else     if (xClass.equals(long[].class)) {
      return Arrays.equals((long[])x,(long[])y);
    }
 else     if (xClass.equals(float[].class)) {
      if (tolf == 0) {
        return Arrays.equals((float[])x,(float[])y);
      }
 else {
        return floatArrayEquals((float[])x,(float[])y,(float)tolf);
      }
    }
 else     if (xClass.equals(byte[].class)) {
      return Arrays.equals((byte[])x,(byte[])y);
    }
 else     if (xClass.equals(short[].class)) {
      return Arrays.equals((short[])x,(short[])y);
    }
 else     if (xClass.equals(char[].class)) {
      return Arrays.equals((char[])x,(char[])y);
    }
 else     if (xClass.equals(boolean[].class)) {
      return Arrays.equals((boolean[])x,(boolean[])y);
    }
 else {
      Object[] xo=(Object[])x;
      Object[] yo=(Object[])y;
      if (xo.length != yo.length) {
        return false;
      }
      for (int i=0; i < xo.length; i+=1) {
        if (!arrayEquals(xo[i],yo[i],tolf,told)) {
          return false;
        }
      }
      return true;
    }
  }
}

public Dictionary(Directory tempDir,String tempFileNamePrefix,InputStream affix,List<InputStream> dictionaries,boolean ignoreCase) throws IOException, ParseException {
  this.ignoreCase=ignoreCase;
  this.needsInputCleaning=ignoreCase;
  this.needsOutputCleaning=false;
  flagLookup.add(new BytesRef());
  Path aff=Files.createTempFile(tempPath,"affix","aff");
  OutputStream out=new BufferedOutputStream(Files.newOutputStream(aff));
  InputStream aff1=null;
  InputStream aff2=null;
  boolean success=false;
  try {
    final byte[] buffer=new byte[1024 * 8];
    int len;
    while ((len=affix.read(buffer)) > 0) {
      out.write(buffer,0,len);
    }
    out.close();
    aff1=new BufferedInputStream(Files.newInputStream(aff));
    String encoding=getDictionaryEncoding(aff1);
    CharsetDecoder decoder=getJavaEncoding(encoding);
    aff2=new BufferedInputStream(Files.newInputStream(aff));
    readAffixFile(aff2,decoder);
    IntSequenceOutputs o=IntSequenceOutputs.getSingleton();
    Builder<IntsRef> b=new Builder<>(FST.INPUT_TYPE.BYTE4,o);
    readDictionaryFiles(tempDir,tempFileNamePrefix,dictionaries,decoder,b);
    words=b.finish();
    aliases=null;
    morphAliases=null;
    success=true;
  }
  finally {
    IOUtils.closeWhileHandlingException(out,aff1,aff2);
    if (success) {
      Files.delete(aff);
    }
 else {
      IOUtils.deleteFilesIgnoringExceptions(aff);
    }
  }
}

public void collapseBuilding(Building bldg){
  buildings.removeElement(bldg);
  Enumeration<Coords> bldgCoords=bldg.getCoords();
  while (bldgCoords.hasMoreElements()) {
    final Coords coords=bldgCoords.nextElement();
    collapseBuilding(coords);
  }
}

@RpcMethod public void detachISO(String vmId,boolean isDeleteFile,AsyncMethodCallback<Host.AsyncClient.detach_iso_call> handler) throws RpcException {
  ensureClient();
  DetachISORequest detachISORequest=new DetachISORequest(vmId);
  detachISORequest.setDelete_file(isDeleteFile);
  clientProxy.setTimeout(DETACH_ISO_TIMEOUT_MS);
  logger.info("detach_iso vm {}, target {}, request {}",vmId,getHostIp(),detachISORequest);
  try {
    clientProxy.detach_iso(detachISORequest,handler);
  }
 catch (  TException e) {
    throw new RpcException(e.getMessage());
  }
}

private String readNfcErrorMsg(ByteBuffer reply) throws IOException {
  int errorType=reply.getInt();
  int errorCode=reply.getInt();
  int msgLen=reply.getInt();
  if (msgLen == 0) {
    return "";
  }
  ByteBuffer msgBuffer=ByteBuffer.allocate(msgLen);
  readFully(msgBuffer);
  String errorMsg=new String(msgBuffer.array(),0,msgLen - 1,Charsets.US_ASCII);
  return String.format("NFC Error %d/%d: %s",errorType,errorCode,errorMsg);
}

private void show(boolean show){
  if (show) {
    if (mXFade != null) {
      mXFade.cancel();
    }
    mState=STATE_PIE;
    mCurrentItem=null;
    PieItem root=getRoot();
    for (    PieItem openItem : mOpen) {
      if (openItem.hasItems()) {
        for (        PieItem item : openItem.getItems()) {
          item.setSelected(false);
        }
      }
    }
    mLabel.setText("");
    mOpen.clear();
    mOpen.add(root);
    layoutPie();
    fadeIn();
  }
 else {
    mState=STATE_IDLE;
    mTapMode=false;
    if (mXFade != null) {
      mXFade.cancel();
    }
    if (mLabel != null) {
      mLabel.setText("");
    }
  }
  setVisible(show);
  mHandler.sendEmptyMessage(show ? MSG_OPEN : MSG_CLOSE);
}

private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){
  modifiedProvider.setLastModified(System.currentTimeMillis());
  if (newObject) {
    _dbClient.createObject(modifiedProvider);
  }
 else {
    _dbClient.persistObject(modifiedProvider);
  }
  notifyChange();
}

public void addUndoableAction(UndoableAction action){
  undoStack.push(action);
  redoStack.removeAllElements();
}

public IntArrayList(int[] data){
  array=new int[(int)(data.length * 1.1) + 1];
  size=data.length;
  System.arraycopy(data,0,array,0,size);
}

private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}

public StringBuilder encodeBody(StringBuilder buffer){
  return buffer.append(contentEncoding);
}

protected void tearDown(){
  try {
    ds.close();
    sds.close();
  }
 catch (  Exception e) {
  }
}

public String substring(String subject,int start,int stop){
  if (stop == -1 || stop >= subject.length()) {
    return subject.substring(start);
  }
  return subject.substring(start,stop);
}

public boolean controlRunTrain(int idx){
  if (log.isDebugEnabled()) {
    log.debug("controlRunTrain= " + idx + " runMode= "+ _runMode+ " - warrant= "+ getDisplayName());
  }
  boolean ret=true;
  int oldIndex=-MODE_MANUAL;
  if (_engineer == null) {
switch (idx) {
case HALT:
case RESUME:
case RETRY:
      ret=false;
    break;
case ABORT:
  if (_runMode == Warrant.MODE_LEARN) {
    firePropertyChange("abortLearn",Integer.valueOf(-MODE_LEARN),Integer.valueOf(_idxCurrentOrder));
  }
 else {
    stopWarrant(true);
  }
break;
}
}
 else {
synchronized (_engineer) {
oldIndex=_engineer.getRunState();
switch (idx) {
case HALT:
_engineer.setHalt(true);
break;
case RESUME:
_engineer.setHalt(false);
restart();
ret=moveIntoNextBlock(MID);
break;
case RETRY:
BlockOrder bo=getBlockOrderAt(_idxCurrentOrder + 1);
ret=false;
if (bo != null) {
OBlock b=bo.getBlock();
if (b.allocate(this) == null && (b.getState() & OBlock.OCCUPIED) != 0) {
_idxCurrentOrder++;
if (b.equals(_stoppingBlock)) {
_stoppingBlock.removePropertyChangeListener(this);
_stoppingBlock=null;
}
bo.setPath(this);
restart();
goingActive(b);
ret=true;
}
}
break;
case ABORT:
stopWarrant(true);
break;
}
}
}
if (ret) {
firePropertyChange("controlChange",Integer.valueOf(oldIndex),Integer.valueOf(idx));
}
return ret;
}

public void removeCustomSashFormListener(ICustomSashFormListener listener){
  if (customSashFormListeners != null) {
    customSashFormListeners.remove(listener);
  }
}

public static void writeStringToFile(File file,String data) throws IOException {
  writeStringToFile(file,data,Charset.defaultCharset(),false);
}

protected void deleteSessionVariables(String sessionId,String... varNames){
  if (sessionId.equals("")) {
    return;
  }
  Key key=keyFactory.newKey(sessionId);
  Transaction transaction=datastore.newTransaction();
  try {
    Entity stateEntity=transaction.get(key);
    Entity.Builder builder=Entity.builder(stateEntity);
    StringBuilder delNames=new StringBuilder();
    for (    String varName : varNames) {
      delNames.append(varName + " ");
      builder=builder.remove(varName);
    }
    datastore.update(builder.build());
  }
 catch (  NullPointerException e) {
  }
 finally {
    if (transaction.active()) {
      transaction.rollback();
    }
  }
}

@Override public String toString(){
  StringBuilder sb=new StringBuilder(10);
  format((getYear() + 1900),4,sb);
  sb.append('-');
  format((getMonth() + 1),2,sb);
  sb.append('-');
  format(getDate(),2,sb);
  return sb.toString();
}

@Override public void close() throws IOException {
  if (mBufferCount > 0) {
    try {
      mQueue.write(mBuffer,0,mBufferCount);
    }
 catch (    InterruptedException e) {
      throw new IOException("GzipAsynchOutputStream interrupted during write/3");
    }
    mBufferCount=0;
  }
  mQueue.close();
  try {
    mThread.join();
  }
 catch (  InterruptedException e) {
    throw new IOException("AsynchOutputStream interrupted during close");
  }
 finally {
    super.close();
  }
  checkException();
}

public static int parseStringAsInt(String in) throws IndexParseFieldException {
  try {
    return Integer.parseInt(in);
  }
 catch (  NumberFormatException e) {
    throw new IndexParseFieldException(in,e);
  }
}

public void writeAll(ResultSet rs,boolean includeColumnNames,boolean trim) throws SQLException, IOException {
  if (includeColumnNames) {
    writeColumnNames(rs);
  }
  while (rs.next()) {
    writeNext(resultService.getColumnValues(rs,trim));
  }
}

public void testSpecialCase1(){
  byte aBytes[]={-1,-1,-1,-1};
  byte bBytes[]={5,-4,-3,-2};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={-1,0,0,0,0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

private static void verifyDevice(IDevice d,long mac,Short vlan,Integer ip,long swId,int port){
  assertNotNull(d);
  assertEquals(MacAddress.of(mac),d.getMACAddress());
  if (vlan == null)   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(-1)},d.getVlanId());
 else   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(vlan)},d.getVlanId());
  if (ip == null)   assertArrayEquals(new IPv4Address[]{IPv4Address.of(0)},d.getIPv4Addresses());
 else   assertArrayEquals(new IPv4Address[]{IPv4Address.of(ip)},d.getIPv4Addresses());
  SwitchPort expectedAp=new SwitchPort(DatapathId.of(swId),OFPort.of(port));
  assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints());
}

public ZoneRulesBuilder addWindow(ZoneOffset standardOffset,LocalDateTime until,TimeDefinition untilDefinition){
  Objects.requireNonNull(standardOffset,"standardOffset");
  Objects.requireNonNull(until,"until");
  Objects.requireNonNull(untilDefinition,"untilDefinition");
  TZWindow window=new TZWindow(standardOffset,until,untilDefinition);
  if (windowList.size() > 0) {
    TZWindow previous=windowList.get(windowList.size() - 1);
    window.validateWindowOrder(previous);
  }
  windowList.add(window);
  return this;
}

public Hashtable<IPoint,List<ILineSegment>> intersections(Iterator<ILineSegment> it){
  Collection<ILineSegment> c=new ArrayList<ILineSegment>();
  while (it.hasNext()) {
    c.add(it.next());
  }
  return intersections(c.toArray(new ILineSegment[]{}));
}

public boolean isTTFNativeFont(){
  return ttf;
}

private void registerProviders(){
  final DevMachine devMachine=appContext.getDevMachine();
  if (devMachine == null) {
    return;
  }
  final Set<Macro> providers=getMacros(devMachine);
  checkNotNull(providers);
  if (providers.isEmpty()) {
    return;
  }
  providerRegistry.register(providers);
}

public LongMap(int initialCapacity,float loadFactor){
  if (initialCapacity < 0)   throw new IllegalArgumentException("initialCapacity must be >= 0: " + initialCapacity);
  if (capacity > 1 << 30)   throw new IllegalArgumentException("initialCapacity is too large: " + initialCapacity);
  capacity=MathUtils.nextPowerOfTwo(initialCapacity);
  if (loadFactor <= 0)   throw new IllegalArgumentException("loadFactor must be > 0: " + loadFactor);
  this.loadFactor=loadFactor;
  threshold=(int)(capacity * loadFactor);
  mask=capacity - 1;
  hashShift=31 - Integer.numberOfTrailingZeros(capacity);
  stashCapacity=Math.max(3,(int)Math.ceil(Math.log(capacity)) + 1);
  pushIterations=Math.max(Math.min(capacity,32),(int)Math.sqrt(capacity) / 4);
  keyTable=new long[capacity + stashCapacity];
  valueTable=(V[])new Object[keyTable.length];
}

protected ASN1Set(ASN1Encodable obj){
  set.addElement(obj);
}

protected void populateStreamBlob(int testId,byte[] baseContent,int requiredSize) throws SQLException {
  final byte[] testBytes=generateBlobContent(baseContent,requiredSize);
  try (FbDatabase db=createDatabaseConnection()){
    listener=new SimpleStatementListener();
    transaction=getTransaction(db);
    try {
      statement=db.createStatement(transaction);
      statement.addStatementListener(listener);
      final BlobParameterBuffer blobParameterBuffer=db.createBlobParameterBuffer();
      blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,BlobParameterBuffer.TYPE_STREAM);
      final FbBlob blob=db.createBlobForOutput(transaction,blobParameterBuffer);
      blob.open();
      int bytesWritten=0;
      while (bytesWritten < testBytes.length) {
        byte[] buffer=new byte[Math.min(blob.getMaximumSegmentSize(),testBytes.length - bytesWritten)];
        System.arraycopy(testBytes,bytesWritten,buffer,0,buffer.length);
        blob.putSegment(buffer);
        bytesWritten+=buffer.length;
      }
      blob.close();
      statement.prepare(INSERT_BLOB_TABLE);
      final DatatypeCoder datatypeCoder=db.getDatatypeCoder();
      FieldValue param1=new FieldValue(datatypeCoder.encodeInt(testId));
      FieldValue param2=new FieldValue(datatypeCoder.encodeLong(blob.getBlobId()));
      statement.execute(RowValue.of(param1,param2));
      statement.close();
    }
  finally {
      transaction.commit();
    }
  }
 }

private static long signFromBit_antiCyclic(final double value){
  return Double.doubleToRawLongBits(value) >> 62 | 1;
}

public void addNearKey(KeyCacheObject key,GridCacheSharedContext ctx) throws IgniteCheckedException {
  nearKeys.add(key);
}

private void analyzeClassFields(String className,int action){
  try {
    Class<?> dynamicClass=Class.forName(className);
    Field[] fields=dynamicClass.getDeclaredFields();
    for (    Field field : fields) {
      if (isPrivateAndNonPrimitive(field)) {
        oneToAnyConditions(className,field,action);
        manyToAnyConditions(className,field,action);
      }
    }
  }
 catch (  ClassNotFoundException ex) {
    ex.printStackTrace();
    throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className);
  }
}

protected boolean isLevelEnabled(int logLevel){
  return (logLevel >= currentLogLevel);
}

public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){
  checkArguments(parent,debugger,offset);
  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);
  CProgressDialog.showEndless(parent,"Loading memory" + " ...",waiter);
  if (waiter.getException() != null) {
    CUtilityFunctions.logException(waiter.getException());
    final String innerMessage="E00078: " + "Could not load memory section";
    final String innerDescription=CUtilityFunctions.createDescription(String.format("The memory section starting at address '%s' could not loaded.",offset.toHexString()),new String[]{"There was a problem with the connection to the debug client."},new String[]{"The memory data was not loaded."});
    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());
  }
}

public static boolean deleteDirectory(String directory,boolean useOSNativeDelete) throws IOException {
  boolean result=false;
  if (!useOSNativeDelete) {
    File dir=new File(directory);
    for (    File file : dir.listFiles()) {
      if (file.delete()) {
        log.debug("{} was deleted",file.getName());
      }
 else {
        log.debug("{} was not deleted",file.getName());
        file.deleteOnExit();
      }
      file=null;
    }
    if (dir.delete()) {
      log.debug("Directory was deleted");
      result=true;
    }
 else {
      log.debug("Directory was not deleted, it may be deleted on exit");
      dir.deleteOnExit();
    }
    dir=null;
  }
 else {
    Process p=null;
    Thread std=null;
    try {
      Runtime runTime=Runtime.getRuntime();
      log.debug("Execute runtime");
      if (File.separatorChar == '\\') {
        p=runTime.exec("CMD /D /C \"RMDIR /Q /S " + directory.replace('/','\\') + "\"");
      }
 else {
        p=runTime.exec("rm -rf " + directory.replace('\\',File.separatorChar));
      }
      std=stdOut(p);
      while (std.isAlive()) {
        try {
          Thread.sleep(250);
        }
 catch (        Exception e) {
        }
      }
      log.debug("Process threads wait exited");
      result=true;
    }
 catch (    Exception e) {
      log.error("Error running delete script",e);
    }
 finally {
      if (null != p) {
        log.debug("Destroying process");
        p.destroy();
        p=null;
      }
      std=null;
    }
  }
  return result;
}

public void testSetAttributeNodeNS1() throws Throwable {
  Document doc;
  Element element;
  Attr attribute1;
  Attr attribute2;
  Attr attrNode;
  String attrName;
  String attrNS;
  NamedNodeMap attributes;
  int length;
  doc=(Document)load("staff",builder);
  element=doc.createElementNS("http://www.w3.org/DOM/Test/Level2","new:element");
  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p1:att");
  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p2:att");
  attribute2.setValue("value2");
  element.setAttributeNodeNS(attribute1);
  element.setAttributeNodeNS(attribute2);
  attrNode=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1","att");
  attrName=attrNode.getNodeName();
  attrNS=attrNode.getNamespaceURI();
  assertEquals("elementsetattributenodens01_attrName","p2:att",attrName);
  assertEquals("elementsetattributenodens01_attrNS","http://www.w3.org/DOM/Test/att1",attrNS);
  attributes=element.getAttributes();
  length=(int)attributes.getLength();
  assertEquals("length",1,length);
}

public boolean isCritical(){
  return true;
}

public static String findEditTable(String tables){
  if (!StringUtils.isEmpty(tables)) {
    int spacepos=tables.indexOf(' ');
    int commapos=tables.indexOf(',');
    if (spacepos > 0 && (spacepos < commapos || commapos < 0)) {
      return tables.substring(0,spacepos);
    }
 else     if (commapos > 0 && (commapos < spacepos || spacepos < 0)) {
      return tables.substring(0,commapos);
    }
    return tables;
  }
 else {
    throw new IllegalStateException("Invalid tables");
  }
}

public void writeOperationsCarFile(){
  makeBackupFile(defaultOperationsFilename());
  try {
    if (!checkFile(defaultOperationsFilename())) {
      java.io.File file=new java.io.File(defaultOperationsFilename());
      java.io.File parentDir=file.getParentFile();
      if (!parentDir.exists()) {
        if (!parentDir.mkdir()) {
          log.error("Directory wasn't created");
        }
      }
      if (file.createNewFile()) {
        log.debug("File created");
      }
    }
    writeFile(defaultOperationsFilename());
  }
 catch (  Exception e) {
    log.error("Exception while writing the new CSV operations file, may not be complete: " + e);
  }
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

private boolean hasNewFollowers(List<Follower> followers){
  return !followers.isEmpty() && followers.get(0).newFollower;
}

private void onTrackPointElementStart(Attributes attributes) throws SAXException {
  String latitude=attributes.getValue(ATT_LAT);
  String longitude=attributes.getValue(ATT_LON);
  if (latitude == null || longitude == null) {
    throw new SAXException(createErrorMessage("Point with no longitude or latitude."));
  }
  try {
    latitudeValue=Double.parseDouble(latitude);
    longitudeValue=Double.parseDouble(longitude);
  }
 catch (  NumberFormatException e) {
    throw new SAXException(createErrorMessage("Unable to parse latitude/longitude: " + latitude + "/"+ longitude),e);
  }
}

protected final void firePropertyChange(PropertyChangeEvent evt){
  pcs.firePropertyChange(evt);
}

static int checkDesc(final String desc,final int start,final boolean canBeVoid){
  if (desc == null || start >= desc.length()) {
    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");
  }
  int index;
switch (desc.charAt(start)) {
case 'V':
    if (canBeVoid) {
      return start + 1;
    }
 else {
      throw new IllegalArgumentException("Invalid descriptor: " + desc);
    }
case 'Z':
case 'C':
case 'B':
case 'S':
case 'I':
case 'F':
case 'J':
case 'D':
  return start + 1;
case '[':
index=start + 1;
while (index < desc.length() && desc.charAt(index) == '[') {
++index;
}
if (index < desc.length()) {
return checkDesc(desc,index,false);
}
 else {
throw new IllegalArgumentException("Invalid descriptor: " + desc);
}
case 'L':
index=desc.indexOf(';',start);
if (index == -1 || index - start < 2) {
throw new IllegalArgumentException("Invalid descriptor: " + desc);
}
try {
checkInternalName(desc,start + 1,index,null);
}
 catch (IllegalArgumentException unused) {
throw new IllegalArgumentException("Invalid descriptor: " + desc);
}
return index + 1;
default :
throw new IllegalArgumentException("Invalid descriptor: " + desc);
}
}

public static void sortFields(FieldBinding[] sortedFields,int left,int right){
  Arrays.sort(sortedFields,left,right,FIELD_COMPARATOR);
}

private void drawBackground(final Graphics g){
  g.setColor(m_bgColorOffset);
  g.fillRect(-m_firstColumn * m_charWidth,0,m_offsetViewWidth,getHeight());
}

public void addUniqueAttribute(final String elementName,final String attrName){
  if ((elementName != null) && (attrName != null)) {
    _uniqueElementAttrMap.put(elementName,attrName);
  }
}

private static DeleteVmResponse checkDeleteVmResponse(DeleteVmResponse deleteVmResponse) throws RpcException {
  logger.info("Checking {}",deleteVmResponse);
switch (deleteVmResponse.getResult()) {
case OK:
    break;
case SYSTEM_ERROR:
  throw new SystemErrorException(deleteVmResponse.getError());
case VM_NOT_FOUND:
throw new VmNotFoundException(deleteVmResponse.getError());
case VM_NOT_POWERED_OFF:
throw new VmNotPoweredOffException(deleteVmResponse.getError());
default :
throw new RpcException(String.format("Unknown response: %s",deleteVmResponse.getResult()));
}
return deleteVmResponse;
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("acronym");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
{
    boolean success=false;
    try {
      child.deleteData(40,3);
    }
 catch (    DOMException ex) {
      success=(ex.code == DOMException.INDEX_SIZE_ERR);
    }
    assertTrue("throw_INDEX_SIZE_ERR",success);
  }
}

public void limitTransAndScale(Matrix matrix,RectF content){
  float[] vals=new float[9];
  matrix.getValues(vals);
  float curTransX=vals[Matrix.MTRANS_X];
  float curScaleX=vals[Matrix.MSCALE_X];
  float curTransY=vals[Matrix.MTRANS_Y];
  float curScaleY=vals[Matrix.MSCALE_Y];
  mScaleX=Math.max(mMinScaleX,curScaleX);
  mScaleY=Math.max(mMinScaleY,curScaleY);
  float width=0f;
  float height=0f;
  if (content != null) {
    width=content.width();
    height=content.height();
  }
  float maxTransX=-width * (mScaleX - 1f);
  float newTransX=Math.min(Math.max(curTransX,maxTransX - mTransOffsetX),mTransOffsetX);
  float maxTransY=height * (mScaleY - 1f);
  float newTransY=Math.max(Math.min(curTransY,maxTransY + mTransOffsetY),-mTransOffsetY);
  vals[Matrix.MTRANS_X]=newTransX;
  vals[Matrix.MSCALE_X]=mScaleX;
  vals[Matrix.MTRANS_Y]=newTransY;
  vals[Matrix.MSCALE_Y]=mScaleY;
  matrix.setValues(vals);
}

public BlazeValueFactory valueFactory(){
  return vf;
}

public StatefulRefreshToken(JsonValue token) throws InvalidGrantException {
  super(token);
  if (!OAUTH_REFRESH_TOKEN.equals(getTokenName())) {
    throw new InvalidGrantException("Token is not an refresh token: " + getTokenId());
  }
}

public void putStyle(String styleId,StyleSelector styleSelector){
  try {
    int id=Integer.parseInt(styleId);
    mMaxStyleId=Math.max(mMaxStyleId,id);
  }
 catch (  NumberFormatException e) {
  }
  mStyles.put(styleId,styleSelector);
}

private static String extractClientName(String clientId,String host){
  String hostExcludedId="";
  if ((isIPv6(host) || isIPv4(host)) && clientId.startsWith(host)) {
    hostExcludedId=clientId.substring(host.length());
  }
 else {
    int firstDotIndex=host.indexOf(".");
    if (firstDotIndex != -1) {
      String hostShortName=host.substring(0,firstDotIndex);
      hostExcludedId=clientId.substring(hostShortName.length());
    }
  }
  String vmPIDAndKindRegex="\\(\\w+:\\w+\\)";
  String regex="(\\<ec\\>)?:[0-9]+(:\\w+){2}+";
  String name=NOT_AVAILABLE;
  String temp=hostExcludedId;
  int openIndex=temp.indexOf("(");
  if (openIndex != -1) {
    regex=vmPIDAndKindRegex + regex;
  }
  if (temp.matches(regex)) {
    String[] splitted=temp.split(":");
    name=splitted[splitted.length - 1];
  }
  return name;
}

public static <T>FastFuture<T> fromCompletableFuture(final CompletableFuture<T> cf){
  final FastFuture<T> f=new FastFuture<>();
  cf.thenAccept(null);
  cf.exceptionally(null);
  return f;
}

public static boolean isPlaceAction(InventoryAction action){
switch (action) {
case SWAP_WITH_CURSOR:
case PLACE_ONE:
case PLACE_ALL:
case PLACE_SOME:
    return true;
}
return false;
}

private void refreshMarkers(){
  removeAll();
  Map markerMap=new HashMap();
  List notices=textArea.getParserNotices();
  for (Iterator i=notices.iterator(); i.hasNext(); ) {
    ParserNotice notice=(ParserNotice)i.next();
    if (notice.getLevel() <= levelThreshold || (notice instanceof TaskNotice)) {
      Integer key=new Integer(notice.getLine());
      Marker m=(Marker)markerMap.get(key);
      if (m == null) {
        m=new Marker(notice);
        m.addMouseListener(listener);
        markerMap.put(key,m);
        add(m);
      }
 else {
        m.addNotice(notice);
      }
    }
  }
  if (getShowMarkedOccurrences() && textArea.getMarkOccurrences()) {
    List occurrences=textArea.getMarkedOccurrences();
    for (Iterator i=occurrences.iterator(); i.hasNext(); ) {
      DocumentRange range=(DocumentRange)i.next();
      int line=0;
      try {
        line=textArea.getLineOfOffset(range.getStartOffset());
      }
 catch (      BadLocationException ble) {
        continue;
      }
      ParserNotice notice=new MarkedOccurrenceNotice(range);
      Integer key=new Integer(line);
      Marker m=(Marker)markerMap.get(key);
      if (m == null) {
        m=new Marker(notice);
        m.addMouseListener(listener);
        markerMap.put(key,m);
        add(m);
      }
 else {
        if (!m.containsMarkedOccurence()) {
          m.addNotice(notice);
        }
      }
    }
  }
  revalidate();
  repaint();
}

private List<View> addView(View view,List<View> cache){
  if (cache == null) {
    cache=new LinkedList<View>();
  }
  cache.add(view);
  return cache;
}

public static byte[] readInputStream(InputStream i) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  copy(i,b);
  return b.toByteArray();
}

public void playMedia(boolean showPlayerWindow){
  String filename=stopAndPrepareFilename();
  if (filename.length() > 0) {
    MPlayerMediator mplayerMediator=MPlayerMediator.instance();
    if (mplayerMediator != null) {
      mplayerMediator.showPlayerWindow(showPlayerWindow);
    }
    mplayer.open(filename,getAdjustedVolume());
  }
  notifyState(getState());
}

public static String toUTF8String(String s){
  return new String(s.getBytes(),Charset.forName(PanboxConstants.STANDARD_CHARSET));
}

public static int encodeCacheFlags(Collection<GridClientCacheFlag> flagSet){
  int bits=0;
  if (flagSet.contains(GridClientCacheFlag.SKIP_STORE))   bits|=1;
  return bits;
}

public void add(DataSource source,boolean visible){
  add(data.size(),source,visible);
}

@Override public void addValue(double value,double weight){
  m_WeightedSum+=value * weight;
  m_WeightedSumSquared+=value * value * weight;
  m_SumOfWeights+=weight;
  if (m_TM.get(value) == null) {
    m_TM.put(value,weight);
  }
 else {
    m_TM.put(value,m_TM.get(value) + weight);
  }
}

private JPanel buildRow(final String string,final JCheckBox checkBox){
  final JPanel panel=new JPanel(new BorderLayout());
  panel.add(new JLabel(string),BorderLayout.WEST);
  panel.add(checkBox,BorderLayout.EAST);
  checkBox.addItemListener(m_checkBoxListener);
  return panel;
}

private static synchronized String formatAndParse(SimpleDateFormat formatDate,SimpleDateFormat parseDate,String text){
  try {
    Date date=parseDate.parse(text);
    String result=formatDate.format(date);
    return result;
  }
 catch (  ParseException e) {
    logger.warning("Unable to parse:" + text);
  }
  return "";
}

public static boolean isChildGroup(String group){
  return group.indexOf(GROUP_DELIMITER) != -1;
}

private void throwArrayIndexOutOfBoundsException(int itemIndex){
  throw new ArrayIndexOutOfBoundsException("Your item index can't be 0 or greater than space item size," + " your items size is " + spaceItems.size() + ", your current index is :"+ itemIndex);
}

private LocusInfo createNextUncoveredLocusInfo(final Locus stopBeforeLocus){
  while (lastReferenceSequence <= stopBeforeLocus.getSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.getMaxSequenceIndex()) {
    if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex() && lastPosition + 1 >= stopBeforeLocus.getPosition()) {
      return null;
    }
    final int nextbit=referenceSequenceMask.nextPosition(lastReferenceSequence,lastPosition);
    if (nextbit == -1) {
      if (lastReferenceSequence == stopBeforeLocus.getSequenceIndex()) {
        lastPosition=stopBeforeLocus.getPosition();
        return null;
      }
      lastReferenceSequence++;
      lastPosition=0;
    }
 else     if (lastReferenceSequence < stopBeforeLocus.getSequenceIndex() || nextbit < stopBeforeLocus.getPosition()) {
      lastPosition=nextbit;
      return new LocusInfo(getReferenceSequence(lastReferenceSequence),lastPosition);
    }
 else     if (nextbit >= stopBeforeLocus.getPosition()) {
      return null;
    }
  }
  return null;
}

public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){
}

public static void launchEmailIntent(final Activity activity,String addr,String text){
  Log.i(LOG_TAG,"Launch email intent from " + activity.getLocalClassName());
  Intent emailIntent=new Intent(Intent.ACTION_SEND);
  emailIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{addr});
  emailIntent.setType("text/plain");
  PackageManager emailpackageManager=activity.getPackageManager();
  List<ResolveInfo> emailresolveInfos=emailpackageManager.queryIntentActivities(emailIntent,0);
  if (emailresolveInfos.size() > 0) {
    activity.startActivity(emailIntent);
  }
}

public int count(){
  return n;
}

public void add(int position,T item){
  mData.add(position,item);
  notifyItemInserted(position);
}

public void addTranslator(ClassPool cp,Translator t) throws NotFoundException, CannotCompileException {
  source=cp;
  translator=t;
  t.start(cp);
}

private void onMainContentScrolled(int currentY,int deltaY){
  if (deltaY > mActionBarAutoHideSensivity) {
    deltaY=mActionBarAutoHideSensivity;
  }
 else   if (deltaY < -mActionBarAutoHideSensivity) {
    deltaY=-mActionBarAutoHideSensivity;
  }
  if (Math.signum(deltaY) * Math.signum(mActionBarAutoHideSignal) < 0) {
    mActionBarAutoHideSignal=deltaY;
  }
 else {
    mActionBarAutoHideSignal+=deltaY;
  }
  boolean shouldShow=currentY < mActionBarAutoHideMinY || (mActionBarAutoHideSignal <= -mActionBarAutoHideSensivity);
  autoShowOrHideActionBar(shouldShow);
}

public void writeLEChars(String s) throws IOException {
  int length=s.length();
  for (int i=0; i < length; i++) {
    int c=s.charAt(i);
    out.write(c & 0xFF);
    out.write((c >>> 8) & 0xFF);
  }
  written+=length * 2;
}

public static String readLine(){
  String line;
  try {
    line=scanner.nextLine();
  }
 catch (  NoSuchElementException e) {
    line=null;
  }
  return line;
}

@Deprecated public boolean isValid(String regex){
  if (regex == null) {
    return false;
  }
  Pattern pattern=Pattern.compile(regex);
  Matcher matcher=pattern.matcher(getText());
  return matcher.matches();
}

public void writeToFile(String filename){
  GridUtils.writeSpatialGridTable(this,filename);
}

public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mDataSetObserver != null) {
    mDataSetObserver.onChanged();
  }
}

public void addCloseHook(CloseHook hook){
  if (closeHooks == null) {
    closeHooks=new ArrayList<>();
  }
  closeHooks.add(hook);
}

public void rejectedExecution(Runnable r,ThreadPoolExecutor e){
  if (!e.isShutdown()) {
    r.run();
  }
}

private void updateRange(double x,double y){
  mMinX=Math.min(mMinX,x);
  mMaxX=Math.max(mMaxX,x);
  mMinY=Math.min(mMinY,y);
  mMaxY=Math.max(mMaxY,y);
}

static boolean checkStandardUPCEANChecksum(CharSequence s) throws FormatException {
  int length=s.length();
  if (length == 0) {
    return false;
  }
  int sum=0;
  for (int i=length - 2; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  sum*=3;
  for (int i=length - 1; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  return sum % 10 == 0;
}

public void readConfig(String filename) throws FileNotFoundException {
  if (filename == null || filename.equals(""))   return;
  readConfig(new FileReader(filename));
}

private void applyTradingBonus(Player player){
  player.incrementTradescore();
}

public static String slurpURLNoExceptions(URL u){
  try {
    return slurpURL(u);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}

private static void createCombinedTrace(final TraceList newTrace,final List<TraceList> traces,final Set<BreakpointAddress> addresses){
  final Set<BreakpointAddress> visitedAddresses=new LinkedHashSet<BreakpointAddress>();
  for (  final TraceList trace : traces) {
    for (    final ITraceEvent event : trace) {
      final BreakpointAddress address=event.getOffset();
      if (!addresses.contains(address)) {
        continue;
      }
      if (visitedAddresses.contains(address)) {
        continue;
      }
      visitedAddresses.add(address);
      newTrace.addEvent(event);
    }
  }
}

public void interruptAll(){
synchronized (knownActorTasks) {
    for (    Future<Void> ft : knownActorTasks) {
      ft.cancel(true);
    }
    threadGuard.interruptAll();
  }
}

@SuppressWarnings("unchecked") public void registerDefaultDeviceTypes(){
  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}

private static void removeDependencySubsets(String swcLocation,Map<String,Set<String>> dependencyMap,SwcDependencyInfoImpl depInfo){
  Set<String> removeSet=new HashSet<String>();
  SwcExternalScriptInfo externalInfo=depInfo.getSwcExternalScriptInfo(swcLocation);
  Map<String,Set<String>> externalsBySwc=new HashMap<String,Set<String>>();
  for (  String swcDependLocation : dependencyMap.get(swcLocation)) {
    for (    String swcDependLocation2 : dependencyMap.get(swcLocation)) {
      if (swcDependLocation.equals(swcDependLocation2))       continue;
      Set<String> externalScripts=externalsBySwc.get(swcDependLocation);
      Set<String> externalScripts2=externalsBySwc.get(swcDependLocation2);
      if (externalScripts == null) {
        externalScripts=externalInfo.getExternalScripts(swcDependLocation);
        externalsBySwc.put(swcDependLocation,externalScripts);
      }
      if (externalScripts2 == null) {
        externalScripts2=externalInfo.getExternalScripts(swcDependLocation2);
        externalsBySwc.put(swcDependLocation2,externalScripts2);
      }
      if (externalScripts2.size() > externalScripts.size() && externalScripts2.containsAll(externalScripts)) {
        removeSet.add(swcDependLocation);
        break;
      }
    }
  }
  Set<String> dependencySet=dependencyMap.get(swcLocation);
  dependencySet.removeAll(removeSet);
}

private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){
  for (double i=min; i <= max; i+=ticks) {
    double angle=getAngleForValue(i,minAngle,maxAngle,min,max);
    double sinValue=Math.sin(angle);
    double cosValue=Math.cos(angle);
    int x1=Math.round(centerX + (float)(shortRadius * sinValue));
    int y1=Math.round(centerY + (float)(shortRadius * cosValue));
    int x2=Math.round(centerX + (float)(longRadius * sinValue));
    int y2=Math.round(centerY + (float)(longRadius * cosValue));
    canvas.drawLine(x1,y1,x2,y2,paint);
    if (labels) {
      paint.setTextAlign(Align.LEFT);
      if (x1 <= x2) {
        paint.setTextAlign(Align.RIGHT);
      }
      String text=i + "";
      if (Math.round(i) == (long)i) {
        text=(long)i + "";
      }
      canvas.drawText(text,x1,y1,paint);
    }
  }
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=imageView.getWidth();
  final float viewHeight=imageView.getHeight();
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public static <T,K,L extends List<T>>BiFunction<Partition<T,K,L>,T,Boolean> alwaysInsert(){
  return null;
}

public void testFindSpringOpenLdap(){
  LdapProxy proxy=getLdapOpenLdap();
  List result=null;
  try {
    result=proxy.find(getLdapSearchVO("",LdapConstants.NO_SEARCH_LIMIT,null,null,null,LdapScopeConstants.SCOPE_SUBTREE));
  }
 catch (  Exception e) {
  }
  assertNotNull(result);
  assertEquals(4,result.size());
}

public void testConstructorStringRadix8(){
  String value="76356237071623450";
  int radix=8;
  byte rBytes[]={7,-50,-28,-8,-25,39,40};
  BigInteger aNumber=new BigInteger(value,radix);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,aNumber.signum());
}

private static boolean inEncoding(char ch,String encoding){
  boolean isInEncoding;
  try {
    char cArray[]=new char[1];
    cArray[0]=ch;
    String s=new String(cArray);
    byte[] bArray=s.getBytes(encoding);
    isInEncoding=inEncoding(ch,bArray);
  }
 catch (  Exception e) {
    isInEncoding=false;
    if (encoding == null)     isInEncoding=true;
  }
  return isInEncoding;
}

public void delete(SSOToken token,String dn) throws SMSException, SSOException {
  for (  String entry : subEntries(token,dn,"*",0,false,false)) {
    debug.message("SMSLdapObject: deleting sub-entry: {}",entry);
    delete(token,getNamingAttribute() + "=" + entry+ ","+ dn);
  }
  for (  String subOrg : searchSubOrgNames(token,dn,"*",0,false,false,false)) {
    debug.message("SMSLdapObject: deleting suborganization: {}",subOrg);
    delete(token,subOrg);
  }
  delete(token.getPrincipal(),dn);
  objectChanged(dn,DELETE);
}

private void removeHighlights(){
  if (textArea != null) {
    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();
    for (int i=0; i < tags.size(); i++) {
      h.removeMarkOccurrencesHighlight(tags.get(i));
    }
  }
  tags.clear();
}

private static <T extends AbstractBlockBase<T>>void enqueueSuccessors(T block,PriorityQueue<T> worklist,BitSet visitedBlocks){
  for (  T successor : block.getSuccessors()) {
    if (!visitedBlocks.get(successor.getId())) {
      visitedBlocks.set(successor.getId());
      worklist.add(successor);
    }
  }
}

protected void addCommonComponent(XMLComponent component){
  if (fCommonComponents.contains(component)) {
    return;
  }
  fCommonComponents.add(component);
  addRecognizedParamsAndSetDefaults(component);
}

public void addRole(String role){
  if (role != null) {
    roles.add(role);
  }
}

public CModulesCheckBoxPanel(final CModulesTableModel modulesTableModel){
  super(new BorderLayout());
  final JCheckBox checkBox=new JCheckBox("Show full module paths");
  checkBox.addItemListener(new InternalCheckboxListener());
  add(checkBox);
  m_modulesTableModel=modulesTableModel;
}

public QDate(){
  this(_gmtTimeZone);
}

protected void responseSent(StreamResponseMessage responseMessage){
  if (syncProtocol != null)   syncProtocol.responseSent(responseMessage);
}

public final void append(FastStringBuffer value){
  if (value == null)   return;
  int strlen=value.length();
  if (0 == strlen)   return;
  int copyfrom=0;
  char[] chunk=m_array[m_lastChunk];
  int available=m_chunkSize - m_firstFree;
  while (strlen > 0) {
    if (available > strlen)     available=strlen;
    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;
    int sourcecolumn=copyfrom & value.m_chunkMask;
    int runlength=value.m_chunkSize - sourcecolumn;
    if (runlength > available)     runlength=available;
    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);
    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);
    strlen-=available;
    copyfrom+=available;
    if (strlen > 0) {
      int i=m_array.length;
      if (m_lastChunk + 1 == i) {
        char[][] newarray=new char[i + 16][];
        System.arraycopy(m_array,0,newarray,0,i);
        m_array=newarray;
      }
      chunk=m_array[++m_lastChunk];
      if (chunk == null) {
        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {
          m_innerFSB=new FastStringBuffer(this);
        }
        chunk=m_array[m_lastChunk]=new char[m_chunkSize];
      }
      available=m_chunkSize;
      m_firstFree=0;
    }
  }
  m_firstFree+=available;
}

protected Tuple<BlobStoreIndexShardSnapshots,Integer> buildBlobStoreIndexShardSnapshots(Map<String,BlobMetaData> blobs){
  int latest=-1;
  for (  String name : blobs.keySet()) {
    if (name.startsWith(SNAPSHOT_INDEX_PREFIX)) {
      try {
        int gen=Integer.parseInt(name.substring(SNAPSHOT_INDEX_PREFIX.length()));
        if (gen > latest) {
          latest=gen;
        }
      }
 catch (      NumberFormatException ex) {
        logger.warn("failed to parse index file name [{}]",name);
      }
    }
  }
  if (latest >= 0) {
    try {
      return new Tuple<>(indexShardSnapshotsFormat.read(blobContainer,Integer.toString(latest)),latest);
    }
 catch (    IOException e) {
      logger.warn("failed to read index file  [{}]",e,SNAPSHOT_INDEX_PREFIX + latest);
    }
  }
  List<SnapshotFiles> snapshots=new ArrayList<>();
  for (  String name : blobs.keySet()) {
    try {
      BlobStoreIndexShardSnapshot snapshot=null;
      if (name.startsWith(SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotFormat.readBlob(blobContainer,name);
      }
 else       if (name.startsWith(LEGACY_SNAPSHOT_PREFIX)) {
        snapshot=indexShardSnapshotLegacyFormat.readBlob(blobContainer,name);
      }
      if (snapshot != null) {
        snapshots.add(new SnapshotFiles(snapshot.snapshot(),snapshot.indexFiles()));
      }
    }
 catch (    IOException e) {
      logger.warn("failed to read commit point [{}]",e,name);
    }
  }
  return new Tuple<>(new BlobStoreIndexShardSnapshots(snapshots),-1);
}

protected MapleQuestRequirement(MapleQuest quest,ReadBin data) throws IOException {
  this.quest=quest;
  this.dayByDay=data.readByte() > 0;
  this.normalAutoStart=data.readByte() > 0;
  this.lvmin=data.readShort();
  this.lvmax=data.readShort();
  this.mbmin=data.readShort();
  this.charismaMin=data.readShort();
  this.charmMin=data.readShort();
  this.craftMin=data.readShort();
  this.insightMin=data.readShort();
  this.senseMin=data.readShort();
  this.willMin=data.readShort();
  this.pop=data.readShort();
  this.pettamenessmin=data.readShort();
  this.subJobFlag=data.readShort();
  this.npc=data.readInt();
  this.interval=data.readInt();
  this.end=data.readString();
  this.startscript=data.readString();
  this.endscript=data.readString();
  short size=data.readShort();
  for (int i=0; i < size; i++) {
    int field=data.readInt();
    fieldEnter.add(field);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    short job=data.readShort();
    jobs.add(job);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    boolean acquire=data.readByte() > 0;
    skills.put(id,acquire);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    byte state=data.readByte();
    byte order=data.readByte();
    quests.put(id,state);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    byte order=data.readByte();
    items.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    int count=data.readInt();
    mobs.put(id,count);
  }
  size=data.readShort();
  for (int i=0; i < size; i++) {
    int id=data.readInt();
    pets.add(id);
  }
}

public ForumPostConfig createReply(ForumPostConfig config){
  config.addCredentials(this);
  String xml=POST(this.url + "/create-reply",config.toXML());
  Element root=parse(xml);
  if (root == null) {
    return null;
  }
  try {
    ForumPostConfig reply=new ForumPostConfig();
    reply.parseXML(root);
    return reply;
  }
 catch (  Exception exception) {
    this.exception=SDKException.parseFailure(exception);
    throw this.exception;
  }
}

public boolean isArmed(){
  return other.isArmed();
}

public static AttribKey forHtmlAttrib(ElKey el,String localName){
  return new AttribKey(el,HTML_NS,localName);
}

SparseArray(Class<L> linearArrayType,int[] rowIndices,int[] colIndices,L realValues,L imagValues,int numRows,int numCols){
  validateUserSuppliedParameters(linearArrayType,rowIndices,colIndices,realValues,imagValues);
  _baseComponentType=linearArrayType.getComponentType();
  _outputArrayType=(Class<L[]>)ArrayUtils.getArrayClass(_baseComponentType,2);
  Map<SparseKey,SparseValue> sparseMap=createSparseMap(linearArrayType,rowIndices,colIndices,realValues,imagValues,numRows,numCols);
  _numRows=numRows;
  _numCols=numCols;
  ArrayList<SparseKey> keys=new ArrayList<SparseKey>(sparseMap.keySet());
  Collections.sort(keys);
  _rowIndices=new int[keys.size()];
  _colIndices=new int[keys.size()];
  _linearIndices=new int[keys.size()];
  _realValues=linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  _imagValues=imagValues == null ? null : linearArrayType.cast(Array.newInstance(_baseComponentType,keys.size()));
  for (int i=0; i < keys.size(); i++) {
    SparseKey key=keys.get(i);
    _rowIndices[i]=key.row;
    _colIndices[i]=key.col;
    _linearIndices[i]=key.linearIndex;
    SparseValue value=sparseMap.get(key);
    setSparseValue(value,_realValues,_imagValues,i);
  }
}

public static Tuple max(TupleSet tuples,String field,Comparator cmp){
  if (tuples instanceof Table) {
    Table table=(Table)tuples;
    ColumnMetadata md=table.getMetadata(field);
    return table.getTuple(md.getMaximumRow());
  }
 else {
    return max(tuples.tuples(),field,cmp);
  }
}

protected void updateRadioLinks(){
  m_CVBut.setEnabled(true);
  m_CVText.setEnabled(m_CVBut.isSelected());
  m_CVLab.setEnabled(m_CVBut.isSelected());
  m_SeedText.setEnabled(m_CVBut.isSelected());
  m_SeedLab.setEnabled(m_CVBut.isSelected());
  if (m_AttributeEvaluatorEditor.getValue() instanceof AttributeTransformer) {
    m_CVBut.setSelected(false);
    m_CVBut.setEnabled(false);
    m_CVText.setEnabled(false);
    m_CVLab.setEnabled(false);
    m_SeedText.setEnabled(false);
    m_SeedLab.setEnabled(false);
    m_TrainBut.setSelected(true);
  }
}

private String idString(int id1,int id2){
  return "0x" + Integer.toHexString(id2 & 0x7F) + " 0x"+ Integer.toHexString(id1 & 0x7F)+ " ("+ ((id2 & 0x7F) * 128 + (id1 & 0x7F))+ ")";
}

public EtagCache resetStats(){
  hits.set(0);
  misses.set(0);
  return this;
}

public void testOtherToStringDefault(){
  NumberConverter converter=makeConverter();
  assertEquals("Default Convert ","ABC",converter.convert(String.class,new StringBuffer("ABC")));
}

private void removeItemAtInt(int index,boolean updateChildrenOnMenuViews){
  if ((index < 0) || (index >= mItems.size()))   return;
  mItems.remove(index);
  if (updateChildrenOnMenuViews)   onItemsChanged(true);
}

public void testShiftRight3(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=27;
  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.shiftRight(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

private void showFilterDialog(Filter filter){
  int sortOrder=mAdapter.getCount() - 1;
  if (filter == null) {
    EditFilterActivity.createNewFilter(getActivity(),sortOrder);
  }
 else {
    EditFilterActivity.editFilter(getActivity(),filter,sortOrder);
  }
}

public static int numPixelsBetween(int x1,int y1,int x2,int y2){
  return (int)Math.sqrt(Math.pow((double)(x1 - x2),2.0) + Math.pow((double)(y1 - y2),2.0));
}

private KeyStore createKeys(KeyStore keyStore,String keyAlgorithm,String publicAlias,String privateAlias,PrivateKeyEntry signer) throws Exception {
  PrivateKey caKey;
  X509Certificate caCert;
  X509Certificate[] caCertChain;
  if (signer == null) {
    caKey=null;
    caCert=null;
    caCertChain=null;
  }
 else {
    caKey=signer.getPrivateKey();
    caCert=(X509Certificate)signer.getCertificate();
    caCertChain=(X509Certificate[])signer.getCertificateChain();
  }
  PrivateKey privateKey;
  X509Certificate x509c;
  if (publicAlias == null && privateAlias == null) {
    privateKey=null;
    x509c=null;
  }
 else {
    int keySize;
    if (keyAlgorithm.equals("RSA")) {
      keySize=1024;
    }
 else     if (keyAlgorithm.equals("DSA")) {
      keySize=512;
    }
 else     if (keyAlgorithm.equals("EC")) {
      keySize=256;
    }
 else     if (keyAlgorithm.equals("EC_RSA")) {
      keySize=256;
      keyAlgorithm="EC";
    }
 else {
      throw new IllegalArgumentException("Unknown key algorithm " + keyAlgorithm);
    }
    KeyPairGenerator kpg=KeyPairGenerator.getInstance(keyAlgorithm);
    kpg.initialize(keySize,new SecureRandom());
    KeyPair kp=kpg.generateKeyPair();
    privateKey=kp.getPrivate();
    PublicKey publicKey=kp.getPublic();
    X500Principal issuer=((caCert != null) ? caCert.getSubjectX500Principal() : subject);
    PrivateKey signingKey=(caKey == null) ? privateKey : caKey;
    x509c=createCertificate(publicKey,signingKey,subject,issuer,keyUsage,ca,extendedKeyUsages,criticalExtendedKeyUsages,subjectAltNames,permittedNameConstraints,excludedNameConstraints);
  }
  X509Certificate[] x509cc;
  if (privateAlias == null) {
    x509cc=null;
  }
 else   if (caCertChain == null) {
    x509cc=new X509Certificate[]{x509c};
  }
 else {
    x509cc=new X509Certificate[caCertChain.length + 1];
    x509cc[0]=x509c;
    System.arraycopy(caCertChain,0,x509cc,1,caCertChain.length);
  }
  if (privateAlias != null) {
    keyStore.setKeyEntry(privateAlias,privateKey,keyPassword,x509cc);
  }
  if (publicAlias != null) {
    keyStore.setCertificateEntry(publicAlias,x509c);
  }
  return keyStore;
}

static boolean allowsPopup(FormObject formObject){
switch (formObject.getParameterConstant(PdfDictionary.Subtype)) {
case PdfDictionary.Text:
case PdfDictionary.Square:
case PdfDictionary.Highlight:
case PdfDictionary.Underline:
case PdfDictionary.StrickOut:
case PdfDictionary.Stamp:
    return true;
default :
  return false;
}
}

public static LocalGitRepo fromCurrentDir(String remoteUrl) throws ValidationException {
  Git git;
  File gitDir=new File(".");
  try {
    git=Git.open(gitDir);
  }
 catch (  RepositoryNotFoundException rnfe) {
    String fullPathOfCurrentDir=pathOf(gitDir);
    File gitRoot=getGitRootIfItExistsInOneOfTheParentDirectories(new File(fullPathOfCurrentDir));
    String summary;
    List<String> messages=new ArrayList<String>();
    if (gitRoot == null) {
      summary="Releases can only be performed from Git repositories.";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + " is not a Git repository.");
    }
 else {
      summary="The release plugin can only be run from the root folder of your Git repository";
      messages.add(summary);
      messages.add(fullPathOfCurrentDir + " is not the root of a Gir repository");
      messages.add("Try running the release plugin from " + pathOf(gitRoot));
    }
    throw new ValidationException(summary,messages);
  }
catch (  Exception e) {
    throw new ValidationException("Could not open git repository. Is " + pathOf(gitDir) + " a git repository?",Arrays.asList("Exception returned when accessing the git repo:",e.toString()));
  }
  return new LocalGitRepo(git,remoteUrl);
}

public static Vector2 min(Vector2 o1,Vector2 o2){
  return new Vector2(Math.min(o1.x,o2.x),Math.min(o1.z,o2.z));
}

public void addTestCall(GenericAccessibleObject<?> call) throws IllegalArgumentException {
  Inputs.checkNull(call);
  testMethods.add(call);
}

public void serialize(KXmlSerializer serializer) throws IOException {
  mDeviceInfo.serialize(serializer);
  serializeHostInfo(serializer);
  serializeTestSummary(serializer);
  monkeyTag.serialize(serializer);
  List<TestPackageResult> pkgs=new ArrayList<TestPackageResult>(mPackageMap.values());
  Collections.sort(pkgs,new PkgComparator());
  for (  TestPackageResult r : pkgs) {
    r.serialize(serializer);
  }
}

private void verifyBlockMirrorMigration() throws Exception {
  log.info("Verifying BlockMirror migration.");
  Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,blockMirrorURIs);
  List<BlockObject> blockObjects=new ArrayList<BlockObject>();
  while (blockMirrorItr.hasNext()) {
    blockObjects.add(blockMirrorItr.next());
  }
  verifyBlockObjects(blockObjects);
}

public LogFormatter(Logger log){
  if (log == null)   log=Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);
  Level lvl=null;
  while (log != null) {
    lvl=log.getLevel();
    if (lvl != null)     break;
    log=log.getParent();
  }
  ;
  if (lvl == null)   lvl=Level.WARNING;
  this.level=lvl;
}

public synchronized void removeTextListener(TextListener cl){
  m_textListeners.remove(cl);
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

private Element createIDPEntityDescriptor(boolean exportPrivateData) throws Exception {
  Element entEle=doc.createElementNS(null,SAMLNames.ENTDESCRIPTOR);
  String id=idmClient.getEntityID(tenantName);
  String alias=idmClient.getLocalIDPAlias(tenantName);
  if (id == null) {
    id=tenantName;
  }
  entEle.setAttribute(SAMLNames.ENTID,id);
  Element idpSSO=createIDPSSODescriptor(exportPrivateData);
  entEle.appendChild(idpSSO);
  if (exportPrivateData) {
    if (alias == null || alias.isEmpty()) {
      alias=id;
    }
    Element orgEle=createOrganization(tenantName,tenantName,alias,SAMLNames.ENGLISH);
    entEle.appendChild(orgEle);
  }
  return entEle;
}

public void clear(){
  infoQueue.clear();
  while (!dataQueue.isEmpty()) {
    allocator.release(dataQueue.remove());
  }
  totalBytesDropped=0;
  totalBytesWritten=0;
  lastAllocation=null;
  lastAllocationOffset=allocationLength;
}

public void applyCamera(GL2 gl){
  gl.glMatrixMode(GL2.GL_PROJECTION);
  gl.glLoadIdentity();
  glu.gluPerspective(45f,width / (float)height,0.f,10.f);
  eye[0]=(float)Math.sin(theta) * 2.f;
  eye[1]=.5f;
  eye[2]=(float)Math.cos(theta) * 2.f;
  glu.gluLookAt(eye[0],eye[1],eye[2],.0f,.0f,0.f,0.f,1.f,0.f);
  gl.glMatrixMode(GL2.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glViewport(0,0,width,height);
}

public static ResultSet pointTable(double x,double y){
  GeometryFactory factory=new GeometryFactory();
  SimpleResultSet rs=new SimpleResultSet();
  rs.addColumn("THE_GEOM",Types.JAVA_OBJECT,"GEOMETRY",0,0);
  rs.addRow(factory.createPoint(new Coordinate(x,y)));
  return rs;
}

public void addToExistingVolumesIfAbsent(Map<String,Integer> volumeWWNs){
  if (_existingVolumes == null) {
    _existingVolumes=new StringMap();
  }
  for (  String wwn : volumeWWNs.keySet()) {
    String normalizedWWN=BlockObject.normalizeWWN(wwn);
    if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {
      String hluStr=ExportGroup.LUN_UNASSIGNED_STR;
      Integer hlu=volumeWWNs.get(normalizedWWN);
      if (hlu != null) {
        hluStr=hlu.toString();
      }
      _existingVolumes.put(normalizedWWN,hluStr);
    }
  }
}

public PathImpl createTempFile(String prefix,String suffix) throws IOException {
  if (prefix == null || prefix.length() == 0)   prefix="t";
  if (suffix == null)   suffix=".tmp";
synchronized (LOCK) {
    for (int i=0; i < 32768; i++) {
      int r=Math.abs((int)RandomUtil.getRandomLong());
      PathImpl file=lookup(prefix + r + suffix);
      if (file.createNewFile())       return file;
    }
  }
  throw new IOException("cannot create temp file");
}

static Map<TargetType,List<TypeCompound>> partitionByTargetType(Collection<TypeCompound> annos,List<TypeCompound> unmatched,TargetType... targetTypes){
  final Map<TargetType,List<TypeCompound>> targetTypeToAnnos=new HashMap<>();
  for (  TargetType targetType : targetTypes) {
    targetTypeToAnnos.put(targetType,new ArrayList<TypeCompound>(10));
  }
  for (  final TypeCompound anno : annos) {
    final List<TypeCompound> annoSet=targetTypeToAnnos.get(anno.getPosition().type);
    if (annoSet != null) {
      annoSet.add(anno);
    }
 else     if (unmatched != null) {
      unmatched.add(anno);
    }
  }
  return targetTypeToAnnos;
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

public void load(){
  try {
    if (fileChannel == null) {
      fileChannel=FileChannel.open(path,StandardOpenOption.READ);
    }
    fileChannel.position(0L);
    buffer.clear();
    tmp.clear();
    while (fileChannel.read(tmp) > 0) {
      tmp.flip();
      if (tmp.remaining() > buffer.capacity() - buffer.position()) {
        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));
        buffer.flip();
        next.put(buffer);
        buffer=next;
      }
      buffer.put(tmp);
      tmp.clear();
    }
    buffer.flip();
  }
 catch (  final IOException e) {
    throw new UncheckedIOException(e);
  }
}

private void onHPChange(final int amount){
  if (User.squaredDistanceTo(x,y) < HEARING_DISTANCE_SQ) {
    if (amount > 0) {
      addTextIndicator("+" + amount,NotificationType.POSITIVE);
    }
 else {
      addTextIndicator(String.valueOf(amount),NotificationType.NEGATIVE);
    }
  }
}

@NotNull private File resolveName(@NotNull String name) throws IOException {
  File file;
  if (name.startsWith(ROOT)) {
    file=new File(myTemplateRootFolder,name.substring(ROOT.length()));
  }
 else   if (myLastTemplateFolders != null) {
    file=new File(myLastTemplateFolders.peek(),name);
  }
 else {
    file=new File(myTemplateRootFolder,name);
  }
  return file.getCanonicalFile();
}

public void initToolTip(){
  if (ttmanager == null) {
    ttmanager=ToolTipManager.sharedInstance();
    ttmanager.registerComponent(map);
    ttmanager.setEnabled(true);
    return;
  }
  if (map != null) {
    map.setToolTipText(null);
  }
}

public static String[] decodeArray(String encodedArray){
  String[] items=encodedArray.split("_\\.");
  ArrayList<String> list=new ArrayList<String>();
  for (int i=0; i < items.length; i++) {
    String item=items[i];
    item=gsub("__","_",item);
    if (!item.equals("")) {
      list.add(item);
    }
  }
  return list.toArray(new String[list.size()]);
}

public boolean computeAngleOffset(){
  if (mFinished) {
    return false;
  }
  long systemClock=AnimationUtils.currentAnimationTimeMillis();
  long timePassed=systemClock - mStartTime;
  if (timePassed < mDuration) {
switch (mMode) {
case SCROLL_MODE:
      float sc=(float)timePassed / mDuration;
    mCurrAngle=mStartAngle + Math.round(mDeltaAngle * sc);
  break;
case FLING_MODE:
float timePassedSeconds=timePassed / 1000.0f;
float distance;
if (mVelocity < 0) {
distance=mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);
}
 else {
distance=-mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / 2.0f);
}
mCurrAngle=mStartAngle - Math.signum(mVelocity) * Math.round(distance);
break;
}
return true;
}
 else {
mFinished=true;
return false;
}
}

private void sendResource(final UUID uuid,final Object resource,final long length,final InputStream is) throws IOException {
  assert uuid != null;
  assert resource != null;
  assert length >= 0;
  assert is != null;
  assert !sentStatus;
  long bytesWritten=0L;
  final long begin=System.nanoTime();
  final OutputStream os=s.getOutputStream();
  try {
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.write(new byte[]{StatusEnum.OK.get()});
      dos.writeLong(length);
      dos.flush();
      bytesWritten+=1 + Bytes.SIZEOF_LONG;
      sentStatus=true;
    }
    final long checksum;
{
      final int BUFSIZE=Bytes.kilobyte32 * 2;
      final CheckedInputStream cis=new CheckedInputStream(new BufferedInputStream(is),new Adler32());
      final byte[] buff=new byte[BUFSIZE];
      while (true) {
        final int read=cis.read(buff,0,BUFSIZE);
        if (read <= 0)         break;
        os.write(buff,0,read);
        bytesWritten+=read;
      }
      checksum=cis.getChecksum().getValue();
    }
{
      final DataOutputStream dos=new DataOutputStream(os);
      dos.writeLong(checksum);
      bytesWritten+=Bytes.SIZEOF_LONG;
      dos.flush();
    }
    os.flush();
    if (log.isInfoEnabled())     log.info("Sent: uuid=" + uuid + ", resource="+ resource+ ", length="+ length+ ", checksum="+ checksum+ ", elapsed="+ TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - begin)+ "ms");
  }
  finally {
    try {
      os.close();
    }
 catch (    Throwable t) {
    }
    counters.bytesWritten.add(bytesWritten);
    counters.elapsedWriteNanos.add(System.nanoTime() - begin);
synchronized (counters.maxWriteSizeLock) {
      counters.maxWriteSize=Math.max(counters.maxWriteSize,bytesWritten);
    }
  }
}

public long sigignore(){
  return Long.parseLong(fields[32]);
}

private static byte[] generateSeed(){
  try {
    final ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();
    final DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);
    seedBufferOut.writeLong(System.currentTimeMillis());
    seedBufferOut.writeLong(System.nanoTime());
    seedBufferOut.writeInt(Process.myPid());
    seedBufferOut.writeInt(Process.myUid());
    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);
    seedBufferOut.close();
    return seedBuffer.toByteArray();
  }
 catch (  final IOException e) {
    throw new SecurityException("Failed to generate seed",e);
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public String render(ValueExpr theExpr) throws Exception {
  theExpr.visit(this);
  return mBuffer.toString();
}

public void stopSampling(){
  if (mSamplingCounter.decrementAndGet() == 0) {
    mHandler.stopSamplingThread();
    addFinalSample();
  }
}

public static final void reverseWinding(List<Vector2> points){
  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointList"));
  int size=points.size();
  if (size == 1 || size == 0)   return;
  Collections.reverse(points);
}

public DSignCsr(JFrame parent,PKCS10CertificationRequest pkcs10Csr,File csrFile,PrivateKey signPrivateKey,KeyPairType signKeyPairType,X509Certificate verificationCertificate,Provider provider) throws CryptoException {
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  this.pkcs10Csr=pkcs10Csr;
  this.csrFile=csrFile;
  this.signPrivateKey=signPrivateKey;
  this.signKeyPairType=signKeyPairType;
  this.verificationCertificate=verificationCertificate;
  this.provider=provider;
  setTitle(res.getString("DSignCsr.Title"));
  initComponents();
}

protected static void init(){
  String notificationfactoryClassName=null;
  try {
    notificationfactoryClassName=System.getProperty(NOTIFICATION_FACTORY_NAME);
  }
 catch (  SecurityException e) {
    throw new RuntimeException(e);
  }
  if (notificationfactoryClassName != null) {
    Class<?> nfc;
    try {
      nfc=Class.forName(notificationfactoryClassName);
      factory=(INotificationManagerFactory)nfc.newInstance();
    }
 catch (    ClassNotFoundException|InstantiationException|IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    factory=new SyslogNotificationFactory();
  }
}

private int awaitDone(boolean timed,long nanos) throws InterruptedException {
  final long deadline=timed ? System.nanoTime() + nanos : 0L;
  WaitNode q=null;
  boolean queued=false;
  for (; ; ) {
    if (Thread.interrupted()) {
      removeWaiter(q);
      throw new InterruptedException();
    }
    int s=state;
    if (s > COMPLETING) {
      if (q != null)       q.thread=null;
      return s;
    }
 else     if (s == COMPLETING)     Thread.yield();
 else     if (q == null)     q=new WaitNode();
 else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q);
 else     if (timed) {
      nanos=deadline - System.nanoTime();
      if (nanos <= 0L) {
        removeWaiter(q);
        return state;
      }
      LockSupport.parkNanos(this,nanos);
    }
 else     LockSupport.park(this);
  }
}

private boolean linkFirst(Node<E> node){
  if (count >= capacity)   return false;
  Node<E> f=first;
  node.next=f;
  first=node;
  if (last == null)   last=node;
 else   f.prev=node;
  ++count;
  notEmpty.signal();
  return true;
}

public static double clamp(double value,double low,double high){
  return Math.min(Math.max(value,low),high);
}

public static String parseVolumeHostDirectory(String volume){
  if (StringUtils.isEmpty(volume)) {
    return volume;
  }
  if (!volume.contains(HOST_CONTAINER_DIR_DELIMITER)) {
    return volume;
  }
  String[] hostContainerDir=volume.split(HOST_CONTAINER_DIR_DELIMITER);
  if (hostContainerDir.length != 2) {
    throw new IllegalArgumentException("Invalid volume directory.");
  }
  String hostDir=hostContainerDir[0];
  return hostDir;
}

private String fmtTime(double time){
  return Utilities.pad(timeFormatter.format(time) + "s",10);
}

@Override public synchronized Object[] toArray(){
  Object[] result=new Object[elementCount];
  System.arraycopy(elementData,0,result,0,elementCount);
  return result;
}

public static String right(String s,int width,char fillChar){
  if (s.length() >= width) {
    return s;
  }
  StringBuffer sb=new StringBuffer(width);
  for (int i=width - s.length(); --i >= 0; ) {
    sb.append(fillChar);
  }
  sb.append(s);
  return sb.toString();
}

public synchronized boolean addAll(Collection<? extends E> c){
  modCount++;
  Object[] a=c.toArray();
  int numNew=a.length;
  ensureCapacityHelper(elementCount + numNew);
  System.arraycopy(a,0,elementData,elementCount,numNew);
  elementCount+=numNew;
  return numNew != 0;
}

@Override public void update(DefaultApplicationState transState){
  newCheckpoint(transState.getState(),transState.getStateHash(),transState.getLastCheckpointCID());
  setLastCheckpointCID(transState.getLastCheckpointCID());
}

public static byte[] stringToUtf8Bytes(String string){
  int len=string.length();
  byte[] bytes=new byte[len * 3];
  int outAt=0;
  for (int i=0; i < len; i++) {
    char c=string.charAt(i);
    if ((c != 0) && (c < 0x80)) {
      bytes[outAt]=(byte)c;
      outAt++;
    }
 else     if (c < 0x800) {
      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);
      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);
      outAt+=2;
    }
 else {
      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);
      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);
      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);
      outAt+=3;
    }
  }
  byte[] result=new byte[outAt];
  System.arraycopy(bytes,0,result,0,outAt);
  return result;
}

private List<Pair<String,Object>> toPairList(final Map<String,Object> bindings){
  final List<Pair<String,Object>> blist=new ArrayList<Pair<String,Object>>();
  for (  final Map.Entry<String,Object> pair : bindings.entrySet()) {
    blist.add(new Pair<String,Object>(pair.getKey(),pair.getValue()));
  }
  return blist;
}

@Override public boolean validateLabel(String label){
  Objects.requireNonNull(label,"label cannot be null");
  return !labels.contains(label);
}

public void addMessageObserver(final MessageObserver observer){
  if (observer == null) {
    throw new NullPointerException();
  }
 else   if (messageObservers == null) {
    initMessageObserverList();
  }
  messageObservers.add(observer);
}

public void show(char initialChar){
  initialString=initialString.append(initialChar);
  show();
  if (SWT.getPlatform() != "carbon") {
    setEditText(initialString.toString());
  }
}

private static void byte2hex(byte b,StringBuffer buf){
  int high=((b & 0xf0) >> 4);
  int low=(b & 0x0f);
  buf.append(HEX_DIGITS[high]);
  buf.append(HEX_DIGITS[low]);
}

public E remove(int index){
  hashCodeUpToDate=false;
  modCount++;
  E oldValue=elementData(index);
  int numMoved=size - index - 1;
  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);
  elementData[--size]=null;
  return oldValue;
}

public static DoubleVector rnorm(int n,double mean,double sd,Random random){
  if (sd < 0.0)   throw new IllegalArgumentException("standard deviation < 0.0");
  if (sd == 0.0)   return new DoubleVector(n,mean);
  DoubleVector v=new DoubleVector(n);
  for (int i=0; i < n; i++)   v.set(i,(random.nextGaussian() + mean) / sd);
  return v;
}

private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {
  while (pointer != -1) {
    movePointer(pointer);
    final byte[] raw=objectReader.readObjectData(-1,null);
    final StringBuilder objectName=new StringBuilder();
    char current1, last=' ';
    int matched=0, i1=0;
    while (i1 < raw.length) {
      current1=(char)raw[i1];
      if (current1 == 10 || current1 == 13) {
        current1=' ';
      }
      if (current1 == ' ' && last == ' ') {
        matched=0;
      }
 else       if (current1 == pattern.charAt(matched)) {
        matched++;
      }
 else {
        matched=0;
        objectName.append(current1);
      }
      if (matched == 3) {
        break;
      }
      last=current1;
      i1++;
    }
    objectName.append('R');
    final PdfObject pdfObject=new CompressedObject(objectName.toString());
    pdfObject.setCompressedStream(true);
    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);
    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);
    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);
    byte[] xrefs=pdfObject.getDecodedStream();
    if (xrefs == null) {
      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);
    }
    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);
    if (Index == null) {
      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);
    }
 else {
      final int count=Index.length;
      int pntr=0;
      for (int aa=0; aa < count; aa+=2) {
        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);
      }
    }
    if (rootObj == null) {
      rootObj=pdfObject.getDictionary(PdfDictionary.Root);
      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);
      if (encryptObj != null) {
        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);
        if (IDs != null && this.ID == null) {
          this.ID=IDs[0];
        }
      }
      infoObject=pdfObject.getDictionary(PdfDictionary.Info);
    }
    if (linearObj != null) {
      pointer=-1;
    }
 else {
      pointer=pdfObject.getInt(PdfDictionary.Prev);
      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {
        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);
      }
    }
  }
  return rootObj;
}

protected void warningOccurred(int code){
  cbLock.lock();
  try {
    if ((code < 0) || (code > MAX_WARNING)) {
      throw new InternalError("Invalid warning index");
    }
    processWarningOccurred("com.sun.imageio.plugins.jpeg.JPEGImageReaderResources",Integer.toString(code));
  }
  finally {
    cbLock.unlock();
  }
}

public boolean isKnownSub(String subName){
  return KNOWN_SUBS.contains(subName);
}

public String diff_text1(LinkedList<Diff> diffs){
  StringBuilder text=new StringBuilder();
  for (  Diff aDiff : diffs) {
    if (aDiff.operation != Operation.INSERT) {
      text.append(aDiff.text);
    }
  }
  return text.toString();
}

public boolean isStored(){
  return Integer.signum(id) != -1;
}

public static BigInteger sizeOfDirectoryAsBigInteger(File directory){
  checkDirectory(directory);
  final File[] files=directory.listFiles();
  if (files == null) {
    return BigInteger.ZERO;
  }
  BigInteger size=BigInteger.ZERO;
  for (  final File file : files) {
    try {
      if (!isSymlink(file)) {
        size=size.add(BigInteger.valueOf(sizeOf(file)));
      }
    }
 catch (    IOException ioe) {
    }
  }
  return size;
}

public boolean isSearchLightBit(int bit){
  if (nodeType != SMINI) {
    log.error("Invalid query of Searchlights bits - not SMINI node");
    return (false);
  }
  if ((bit < 0) || (bit > 47)) {
    log.error("Invalid bit number in query of SMINI Searchlights bits: " + Integer.toString(bit));
    return (false);
  }
  if (locSearchLightBits[bit] == 1) {
    return (true);
  }
  return (false);
}

public AgeFileFilter(Date cutoffDate,boolean acceptOlder){
  this(cutoffDate.getTime(),acceptOlder);
}

public void calcMajorTick(){
  majorTick=10;
  majorTickCount=(int)Math.round(log10(maxTick / minTick)) + 1;
}

public boolean next() throws GenericDataSourceException {
  try {
    return _rs.next();
  }
 catch (  SQLException sqle) {
    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);
  }
}

public void put(String sample,HiddenAttribute attribute,Object value){
  put(sample,attribute.toString(),value);
}

void postMessage(List<JetstreamMessage> msgs,DispatchQueueStats stats) throws MessageServiceException {
  m_msgRcvCounter.addAndGet(msgs.size());
  if ((monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL) && (m_paused.get())) {
    if (!m_msgProcessor.hasAvailableCapacity(m_twentyPercentCapacity)) {
      m_totalMsgsDropped.increment();
      return;
    }
  }
  List<Runnable> requests=new ArrayList<Runnable>(msgs.size());
  for (int i=0, t=msgs.size(); i < t; i++) {
    JetstreamMessage tm=msgs.get(i);
    if (tm.getTopic() == null) {
      m_totalMsgsDropped.increment();
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Topic is not present in incoming message");
      }
      continue;
    }
    MessageServiceRequest msr=new MessageServiceRequest(tm);
    msr.setPriority(tm.getPriority());
    msr.setSequenceid(tm.getSequenceId());
    if (msr.getPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) {
      if (!m_internalMsgProcessor.processRequest(msr)) {
        m_totalMsgsDropped.increment();
        throw new MessageServiceException(MessageServiceException.BUFFER_FULL,"Dispatch Queue Full");
      }
      if (m_msgsRcvdPerSec.addAndGet(1) < 0)       m_msgsRcvdPerSec.set(0);
      m_totalMsgsRcvd.increment();
    }
 else {
      requests.add(msr);
    }
  }
  if (!requests.isEmpty()) {
    int batchsize=requests.size();
    if (!m_msgProcessor.processBatch(requests)) {
      m_totalMsgsDropped.addAndGet(batchsize);
      throw new MessageServiceException(MessageServiceException.BUFFER_FULL,"High Priority Dispatch Queue Full - " + " Requested capacity = " + batchsize + " : available capacity = "+ m_msgProcessor.getAvailableCapacity());
    }
    m_avgMsgsRcvdPerSec.add(batchsize);
    m_totalMsgsRcvd.addAndGet(batchsize);
  }
  if (stats != null) {
    stats.setHighPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setLowPriorityQueueDepth((int)m_msgProcessor.getPendingRequests());
    stats.setMaxQueueDepth((int)m_msgProcessor.getMaxQueueSz());
  }
}

public boolean unsetOrdering(Object first,Object second){
  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);
  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);
  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);
}

public String convertSWFToHTML(InputStream in) throws Exception {
  StringWriter out1=new StringWriter();
  output=new PrintWriter(out1);
  TagParser parser=new TagParser(this);
  SWFReader reader=new SWFReader(parser,in);
  reader.readFile();
  in.close();
  sizeCount=reader.size;
  final String ret="<html>" + (headerstr.isEmpty() ? "<body>" : "<header>" + headerstr + "</header><body>") + out1.toString()+ "</body></html>";
  return ret;
}

public void write(ClassFile classFile,File f) throws IOException {
  FileOutputStream f_out=new FileOutputStream(f);
  try {
    write(classFile,f_out);
  }
  finally {
    f_out.close();
  }
}

public Shape greatCircleLineShape(){
  GeneralPath path=null;
  if (llpts != null && llpts.length >= 4 && llpts.length % 2 == 0) {
    double y1=llpts[0];
    double x1=llpts[1];
    path=new GeneralPath(GeneralPath.WIND_EVEN_ODD,llpts.length / 2);
    boolean firstCoords=true;
    for (int i=2; i < llpts.length; i+=2) {
      double y2=llpts[i];
      double x2=llpts[i + 1];
      double radDist=GreatCircle.sphericalDistance(y1,x1,y2,x2);
      int nsegs=(int)(ProjMath.radToDeg(radDist) * segsPerDeg);
      if (nsegs == 0) {
        nsegs=1;
      }
      double[] coords=GreatCircle.greatCircle(y1,x1,y2,x2,nsegs,false);
      if (returnDegrees) {
        ProjMath.arrayRadToDeg(coords);
      }
      for (int j=0; j <= coords.length - 1; j+=2) {
        if (firstCoords) {
          path.moveTo(coords[j + 1],coords[j]);
          firstCoords=false;
        }
 else {
          path.lineTo(coords[j + 1],coords[j]);
        }
      }
      x1=x2;
      y1=y2;
    }
    if (returnDegrees) {
      path.lineTo(ProjMath.radToDeg(x1),ProjMath.radToDeg(y1));
    }
 else {
      path.lineTo(x1,y1);
    }
  }
  return path;
}

public Connection(final InetSocketAddress peerAddress){
  this(peerAddress,(Handshaker)null);
}

protected static Vector convertToVector(final Object[] anArray){
  if (anArray == null) {
    return null;
  }
  final Vector v=new Vector(anArray.length);
  for (  final Object element : anArray) {
    v.addElement(element);
  }
  return v;
}

protected synchronized void notifyVersion(SprogVersion v){
  ver=v;
  for (  SprogVersionListener listener : getCopyOfListeners()) {
    try {
      listener.notifyVersion(ver);
      versionListeners.remove(listener);
    }
 catch (    Exception e) {
      log.warn("notify: During dispatch to " + listener + "\nException "+ e);
    }
  }
}

protected void acceptDrop(int dropOperation){
  DropTargetContextPeer peer=getDropTargetContextPeer();
  if (peer != null) {
    peer.acceptDrop(dropOperation);
  }
}

public void clear(){
  oredCriteria.clear();
  orderByClause=null;
  distinct=false;
}

@Override public String toString(){
  String result;
  result=super.toString();
  if (m_CapabilitiesFilter != null) {
    initCapabilities();
    if (m_Capabilities != null) {
      if (m_Capabilities.supportsMaybe(m_CapabilitiesFilter) && !m_Capabilities.supports(m_CapabilitiesFilter)) {
        result="<html><font color=\"" + MAYBE_SUPPORT + "\">"+ result+ "</font></i><html>";
      }
 else       if (!m_Capabilities.supports(m_CapabilitiesFilter)) {
        result="<html><font color=\"" + NO_SUPPORT + "\">"+ result+ "</font></i><html>";
      }
    }
  }
  return result;
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {
  correctlyInitialized();
  if (node.m_NodesRectBounds == null) {
    node.m_NodesRectBounds=new double[2][node.m_NodeRanges.length];
    for (int i=0; i < node.m_NodeRanges.length; i++) {
      node.m_NodesRectBounds[MIN][i]=node.m_NodeRanges[i][MIN];
      node.m_NodesRectBounds[MAX][i]=node.m_NodeRanges[i][MAX];
    }
  }
  double maxRectWidth=Double.NEGATIVE_INFINITY, maxPtWidth=Double.NEGATIVE_INFINITY, tempval;
  int splitDim=-1, classIdx=m_Instances.classIndex();
  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {
    if (i == classIdx)     continue;
    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];
    if (m_NormalizeNodeWidth) {
      tempval=tempval / universe[i][WIDTH];
    }
    if (tempval > maxRectWidth && node.m_NodeRanges[i][WIDTH] > 0.0)     maxRectWidth=tempval;
  }
  for (int i=0; i < node.m_NodesRectBounds[0].length; i++) {
    if (i == classIdx)     continue;
    tempval=node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i];
    if (m_NormalizeNodeWidth) {
      tempval=tempval / universe[i][WIDTH];
    }
    if (tempval >= maxRectWidth * (1 - ERR) && node.m_NodeRanges[i][WIDTH] > 0.0) {
      if (node.m_NodeRanges[i][WIDTH] > maxPtWidth) {
        maxPtWidth=node.m_NodeRanges[i][WIDTH];
        if (m_NormalizeNodeWidth)         maxPtWidth=maxPtWidth / universe[i][WIDTH];
        splitDim=i;
      }
    }
  }
  double splitVal=node.m_NodesRectBounds[MIN][splitDim] + (node.m_NodesRectBounds[MAX][splitDim] - node.m_NodesRectBounds[MIN][splitDim]) * 0.5;
  if (splitVal < node.m_NodeRanges[splitDim][MIN])   splitVal=node.m_NodeRanges[splitDim][MIN];
 else   if (splitVal >= node.m_NodeRanges[splitDim][MAX])   splitVal=node.m_NodeRanges[splitDim][MAX] - node.m_NodeRanges[splitDim][WIDTH] * 0.001;
  int rightStart=rearrangePoints(m_InstList,node.m_Start,node.m_End,splitDim,splitVal);
  if (rightStart == node.m_Start || rightStart > node.m_End) {
    if (rightStart == node.m_Start)     throw new Exception("Left child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code.");
 else     throw new Exception("Right child is empty in node " + node.m_NodeNumber + ". Not possible with "+ "SlidingMidPointofWidestSide splitting method. Please "+ "check code.");
  }
  node.m_SplitDim=splitDim;
  node.m_SplitValue=splitVal;
  double[][] widths=new double[2][node.m_NodesRectBounds[0].length];
  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);
  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);
  widths[MAX][splitDim]=splitVal;
  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,rightStart - 1,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,rightStart - 1),widths);
  widths=new double[2][node.m_NodesRectBounds[0].length];
  System.arraycopy(node.m_NodesRectBounds[MIN],0,widths[MIN],0,node.m_NodesRectBounds[MIN].length);
  System.arraycopy(node.m_NodesRectBounds[MAX],0,widths[MAX],0,node.m_NodesRectBounds[MAX].length);
  widths[MIN][splitDim]=splitVal;
  node.m_Right=new KDTreeNode(numNodesCreated + 2,rightStart,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,rightStart,node.m_End),widths);
}

public Date modifiedDate(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException("Client not connected");
    }
    if (!authenticated) {
      throw new IllegalStateException("Client not authenticated");
    }
    communication.sendFTPCommand("MDTM " + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
    String[] messages=r.getMessages();
    if (messages.length != 1) {
      throw new FTPIllegalReplyException();
    }
 else {
      try {
        return MDTM_DATE_FORMAT.parse(messages[0]);
      }
 catch (      ParseException e) {
        throw new FTPIllegalReplyException();
      }
    }
  }
}

public boolean importPkcs8(){
  return jrbPkcs8.isSelected();
}

public ControlFlowGraph run(CompilationUnitTree root,ProcessingEnvironment env,MethodTree tree,ClassTree classTree){
  UnderlyingAST underlyingAST=new CFGMethod(tree,classTree);
  return run(root,env,underlyingAST);
}

private boolean isValidEngine(){
  if (hasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE| SUPERHEAVY_ENGINE| SUPPORT_VEE_ENGINE))) {
    problem.append("Flags:" + engineFlags);
    return false;
  }
  if (hasFlag(SUPPORT_VEE_ENGINE) && (engineType != STEAM) && (engineType != COMBUSTION_ENGINE)&& (engineType != BATTERY)&& (engineType != FUEL_CELL)&& (engineType != SOLAR)&& (engineType != FISSION)&& (engineType != NORMAL_ENGINE)&& (engineType != NONE)) {
    problem.append("Invalid Engine type for support vehicle engines!");
    return false;
  }
  if ((((int)Math.ceil(engineRating / 5) > ENGINE_RATINGS.length) || (engineRating < 0)) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    problem.append("Rating:" + engineRating);
    return false;
  }
  if ((engineRating > 400) && !hasFlag(SUPPORT_VEE_ENGINE)) {
    engineFlags|=LARGE_ENGINE;
  }
switch (engineType) {
case COMBUSTION_ENGINE:
case NORMAL_ENGINE:
case XL_ENGINE:
case XXL_ENGINE:
case FUEL_CELL:
case NONE:
case MAGLEV:
case BATTERY:
case SOLAR:
    break;
case COMPACT_ENGINE:
  if (hasFlag(LARGE_ENGINE)) {
    problem.append(Messages.getString("Engine.invalidCompactLarge"));
    return false;
  }
break;
case LIGHT_ENGINE:
case FISSION:
if (hasFlag(CLAN_ENGINE)) {
problem.append(Messages.getString("Engine.invalidSphereOnly"));
return false;
}
break;
default :
problem.append("Type:" + engineType);
return false;
}
return true;
}

static public void assertEquals(String message,float expected,float actual,float delta){
  if (Float.isInfinite(expected)) {
    if (!(expected == actual))     failNotEquals(message,new Float(expected),new Float(actual));
  }
 else   if (!(Math.abs(expected - actual) <= delta))   failNotEquals(message,new Float(expected),new Float(actual));
}

private void calculateD(double[] b){
  int length=mExtremalIndices.size() - 1;
  mD=new double[length];
  for (int k=0; k < length; k++) {
    mD[k]=b[k] * (mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)] - mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(length)]);
  }
}

public static byte[] base64decode(String coded){
  if (null == coded)   return null;
  byte[] src=coded.getBytes();
  int len=src.length;
  int dlen=len - (len / 77);
  dlen=(dlen >>> 2) + (dlen >>> 1);
  int rem=0;
  if (61 == src[len - 1])   rem++;
  if (61 == src[len - 2])   rem++;
  dlen-=rem;
  byte[] dst=new byte[dlen];
  int pos=0;
  int dpos=0;
  int col=0;
  len-=4;
  while (pos < len) {
    byte b0=_base64de[src[pos++]];
    byte b1=_base64de[src[pos++]];
    byte b2=_base64de[src[pos++]];
    byte b3=_base64de[src[pos++]];
    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException("Invalid character at or around position " + pos);
    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
    col+=4;
    if (76 == col) {
      if (10 != src[pos++])       throw new RuntimeException("No linefeed found at position " + (pos - 1));
      col=0;
    }
  }
  byte b0=_base64de[src[pos++]];
  byte b1=_base64de[src[pos++]];
  byte b2=_base64de[src[pos++]];
  byte b3=_base64de[src[pos++]];
  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException("Invalid character at or around position " + pos);
  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));
  if (2 == rem)   return dst;
  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));
  if (1 == rem)   return dst;
  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));
  return dst;
}

private static Properties loadProperties(String propertiesFile){
  Properties properties=new Properties();
  try (InputStream is=new FileInputStream(propertiesFile)){
    properties.load(is);
  }
 catch (  IOException e) {
    throw new RuntimeException("failed to load properties",e);
  }
  return properties;
}

public TextEditor replaceAll(Pattern pattern,Replacement replacement){
  Matcher m=pattern.matcher(text);
  int lastIndex=0;
  StringBuilder sb=new StringBuilder();
  while (m.find()) {
    sb.append(text.subSequence(lastIndex,m.start()));
    sb.append(replacement.replacement(m));
    lastIndex=m.end();
  }
  sb.append(text.subSequence(lastIndex,text.length()));
  text=sb;
  return this;
}

public Map<String,Map<String,String>> list(String serviceName){
  Map<String,Map<String,String>> results=new HashMap<String,Map<String,String>>();
  ServiceInfo[] infos=jmdns.list("_" + serviceName + "._tcp.local.");
  for (  ServiceInfo info : infos) {
    _log.info("ServiceInfo:{}",info);
    final String[] hostAddrs=info.getHostAddresses();
    final StringBuffer buf=new StringBuffer();
    for (    String hostAddr : hostAddrs) {
      buf.append(hostAddr);
      buf.append(';');
    }
    final String key=buf.toString();
    _log.info("\tkey:{}",key);
    final Map<String,String> values=new HashMap<String,String>();
    for (Enumeration<String> e=info.getPropertyNames(); e.hasMoreElements(); ) {
      final String prop=e.nextElement();
      final String value=new String(info.getPropertyBytes(prop));
      _log.info("\tprop:{}, value:{}",prop,value);
      values.put(prop,value);
    }
    if (values.isEmpty()) {
      _log.warn("values are empty for key: {}",key);
    }
    results.put(key,values.isEmpty() ? null : values);
  }
  return results;
}

@SuppressWarnings({"unchecked"}) @Override default LazyFutureStream<U> concat(final Stream<? extends U> other){
  return fromStream(Stream.concat(StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.ORDERED),false),StreamSupport.stream(Spliterators.spliteratorUnknownSize(other.iterator(),Spliterator.ORDERED),false)));
}

private int moveComponents(Container target,int x,int y,int width,int height,int rowStart,int rowEnd,boolean ltr,boolean useBaseline,int[] ascent,int[] descent){
switch (newAlign) {
case LEFT:
    x+=ltr ? 0 : width;
  break;
case CENTER:
x+=width / 2;
break;
case RIGHT:
x+=ltr ? width : 0;
break;
case LEADING:
break;
case TRAILING:
x+=width;
break;
}
int maxAscent=0;
int nonbaselineHeight=0;
int baselineOffset=0;
if (useBaseline) {
int maxDescent=0;
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.visible) {
if (ascent[i] >= 0) {
maxAscent=Math.max(maxAscent,ascent[i]);
maxDescent=Math.max(maxDescent,descent[i]);
}
 else {
nonbaselineHeight=Math.max(m.getHeight(),nonbaselineHeight);
}
}
}
height=Math.max(maxAscent + maxDescent,nonbaselineHeight);
baselineOffset=(height - maxAscent - maxDescent) / 2;
}
for (int i=rowStart; i < rowEnd; i++) {
Component m=target.getComponent(i);
if (m.isVisible()) {
int cy;
if (useBaseline && ascent[i] >= 0) {
cy=y + baselineOffset + maxAscent - ascent[i];
}
 else {
cy=y + (height - m.height) / 2;
}
if (ltr) {
m.setLocation(x,cy);
}
 else {
m.setLocation(target.width - x - m.width,cy);
}
x+=m.width + hgap;
}
}
return height;
}

@Override public void readExternal(ObjectInput in) throws IOException {
  path=IgfsUtils.readPath(in);
  blockSize=in.readInt();
  grpBlockSize=in.readLong();
  len=in.readLong();
  props=U.readStringMap(in);
  accessTime=in.readLong();
  modificationTime=in.readLong();
  flags=in.readByte();
}

public StandardXYItemLabelGenerator(){
  this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());
}

public Vector2(double direction){
  this.x=Math.cos(direction);
  this.y=Math.sin(direction);
}

public static Map<String,Object> convertDocumentFileToFile(DispatchContext dctx,Map<String,? extends Object> context){
  XMultiComponentFactory xmulticomponentfactory=null;
  String stringUrl=(String)context.get("filenameFrom");
  String stringConvertedFile=(String)context.get("filenameTo");
  String inputMimeType=(String)context.get("inputMimeType");
  String outputMimeType=(String)context.get("outputMimeType");
  String oooHost=(String)context.get("oooHost");
  String oooPort=(String)context.get("oooPort");
  try {
    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);
    File inputFile=new File(stringUrl);
    long fileSize=inputFile.length();
    FileInputStream fis=new FileInputStream(inputFile);
    ByteArrayOutputStream baos=new ByteArrayOutputStream((int)fileSize);
    int c;
    while ((c=fis.read()) != -1) {
      baos.write(c);
    }
    OpenOfficeByteArrayInputStream oobais=new OpenOfficeByteArrayInputStream(baos.toByteArray());
    OpenOfficeByteArrayOutputStream oobaos=OpenOfficeWorker.convertOODocByteStreamToByteStream(xmulticomponentfactory,oobais,inputMimeType,outputMimeType);
    FileOutputStream fos=new FileOutputStream(stringConvertedFile);
    fos.write(oobaos.toByteArray());
    fos.close();
    fis.close();
    oobais.close();
    oobaos.close();
    Map results=ServiceUtil.returnSuccess();
    return results;
  }
 catch (  IOException e) {
    Debug.logError(e,"Error in OpenOffice operation: ",module);
    return ServiceUtil.returnError(e.toString());
  }
catch (  Exception e) {
    Debug.logError(e,"Error in OpenOffice operation: ",module);
    return ServiceUtil.returnError(e.toString());
  }
}

public double adjustedPow10(double val){
  boolean negFlag=(val < 0.0);
  if (negFlag) {
    val=-val;
  }
  double res;
  if (val < 1.0) {
    res=(Math.pow(10,val + 1.0) - 10.0) / 9.0;
  }
 else {
    res=Math.pow(10,val);
  }
  return negFlag ? (-res) : res;
}

@Override public void clear(){
  columnList.forEach(null);
}

public boolean isLastInvoice(){
  String cm=getCostingMethod();
  return cm != null && cm.equals(COSTINGMETHOD_LastInvoice);
}

public static void proxyPort(final int port){
  final String portValue=Integer.toString(port);
  setProperty("http.proxyPort",portValue);
  setProperty("https.proxyPort",portValue);
}

public static String fetchClusterName(String clusterCgName){
  String clusterName=null;
  if (clusterCgName != null && !clusterCgName.isEmpty()) {
    String[] tmp=clusterCgName.split(SPLITTER);
    clusterName=tmp[0];
  }
  return clusterName;
}

private void fetchMyServiceCardsFromServer(){
  RetroCallback retroCallback;
  retroCallback=new RetroCallback(this);
  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES);
  retroCallbackList.add(retroCallback);
  mYeloApi.getMyServiceCards(retroCallback);
}

public DViewAsymmetricKeyFields(JDialog parent,String title,RSAPublicKey rsaPublicKey){
  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);
  key=rsaPublicKey;
  initFields();
}

public List<ColourChange> sampleConditionalMigrationEvents2(int parentColour,double parentHeight,int childColour,double childHeight,double[] m){
  List<ColourChange> colourChanges=new ArrayList<ColourChange>();
  if (parentHeight < childHeight) {
    throw new IllegalArgumentException("sampleConditionalMigrationEvents: parentHeight=" + parentHeight + " childHeight="+ childHeight+ ", not good.");
  }
  try {
    int currentColour=parentColour;
    double currentHeight=parentHeight;
    while (true) {
      ColourChange nextEvent=randomConditionalMigrationEvent(currentColour,currentHeight,childColour,childHeight,m);
      currentHeight=nextEvent.getTime();
      currentColour=nextEvent.getColourAbove();
      colourChanges.add(nextEvent);
    }
  }
 catch (  NoEventException nee) {
  }
  reverseColourChangeList(colourChanges,parentColour);
  return colourChanges;
}

public static boolean isAttribute(Object objValue){
  if (objValue instanceof String) {
    String stringValue=(String)objValue;
    if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {
      return true;
    }
  }
  return false;
}

public static String decodeASCII(final byte[] key,final int off,final int len){
  final byte[] b=new byte[len];
  System.arraycopy(key,off,b,0,len);
  for (int i=0; i < len; i++) {
    b[i]=decodeByte(b[i]);
  }
  try {
    return new String(b,"US-ASCII");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}

@Override public void valueChanged(TreeSelectionEvent e){
  if (preventEvent) {
    return;
  }
  if (mainFrame != null) {
    List<Operator> selectedOperators=getSelectedOperators();
    if (selectedOperators != null && !selectedOperators.isEmpty()) {
      mainFrame.selectOperators(selectedOperators);
    }
  }
}

public synchronized void removePropertyChangeListener(PropertyChangeListener listener){
  listeners.remove(listener);
}

final boolean transferAfterCancelledWait(Node node){
  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {
    enq(node);
    return true;
  }
  while (!isOnSyncQueue(node))   Thread.yield();
  return false;
}

private static Intent createShareIntent(Context context,final String shareText){
  final Intent shareIntent=new Intent(Intent.ACTION_SEND);
  shareIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,context.getString(R.string.share_subject));
  shareIntent.putExtra(android.content.Intent.EXTRA_TEXT,shareText);
  shareIntent.setType("text/plain");
  return shareIntent;
}

public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){
  if (UnsafeHolder.isAvailable()) {
    return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName);
  }
  return AtomicIntegerFieldUpdater.newUpdater(tclass,fieldName);
}

private boolean tryStep(final double t0,final double[] y0,final double step,final int k,final double[] scale,final double[][] f,final double[] yMiddle,final double[] yEnd) throws MathIllegalArgumentException, MathIllegalStateException {
  final int n=sequence[k];
  final double subStep=step / n;
  final double subStep2=2 * subStep;
  double t=t0 + subStep;
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=y0[i] + subStep * f[0][i];
  }
  f[1]=computeDerivatives(t,yEnd);
  final double[] yTmp=y0.clone();
  for (int j=1; j < n; ++j) {
    if (2 * j == n) {
      System.arraycopy(yEnd,0,yMiddle,0,y0.length);
    }
    t+=subStep;
    for (int i=0; i < y0.length; ++i) {
      final double middle=yEnd[i];
      yEnd[i]=yTmp[i] + subStep2 * f[j][i];
      yTmp[i]=middle;
    }
    f[j + 1]=computeDerivatives(t,yEnd);
    if (performTest && (j <= maxChecks) && (k < maxIter)) {
      double initialNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=f[0][l] / scale[l];
        initialNorm+=ratio * ratio;
      }
      double deltaNorm=0.0;
      for (int l=0; l < scale.length; ++l) {
        final double ratio=(f[j + 1][l] - f[0][l]) / scale[l];
        deltaNorm+=ratio * ratio;
      }
      if (deltaNorm > 4 * FastMath.max(1.0e-15,initialNorm)) {
        return false;
      }
    }
  }
  for (int i=0; i < y0.length; ++i) {
    yEnd[i]=0.5 * (yTmp[i] + yEnd[i] + subStep * f[n][i]);
  }
  return true;
}

public Map<String,Object> convertDataToObjects(Map<String,String> data){
  Map<String,Object> results=new HashMap<>();
  if (data != null) {
    for (    String key : data.keySet()) {
      results.put(key,data.get(key));
    }
  }
  return results;
}

private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}

public static RowLimitSpec buildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx){
  Object numRows;
  Object offset;
  if (ctx.o != null) {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else   if (ctx.c != null) {
    offset=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    numRows=parseNumOrVariableIdent(ctx.n2,ctx.i2);
  }
 else {
    numRows=parseNumOrVariableIdent(ctx.n1,ctx.i1);
    offset=null;
  }
  Integer numRowsInt=null;
  String numRowsVariable=null;
  if (numRows instanceof String) {
    numRowsVariable=(String)numRows;
  }
 else {
    numRowsInt=(Integer)numRows;
  }
  Integer offsetInt=null;
  String offsetVariable=null;
  if (offset instanceof String) {
    offsetVariable=(String)offset;
  }
 else {
    offsetInt=(Integer)offset;
  }
  return new RowLimitSpec(numRowsInt,offsetInt,numRowsVariable,offsetVariable);
}

public final int first_common_layer(BrdItem p_other){
  int max_first_layer=Math.max(first_layer(),p_other.first_layer());
  int min_last_layer=Math.min(last_layer(),p_other.last_layer());
  if (max_first_layer > min_last_layer) {
    return -1;
  }
  return max_first_layer;
}

public ItemStack removeItems(ItemStack drive,ItemStack stack,int amountWanted){
  if (getMaxKilobits(drive) == -1)   return null;
  int stored=getAmountStored(drive,stack);
  int amountGiven=Math.min(amountWanted,stored);
  if (amountGiven > 0) {
    setAmountStored(drive,stack,stored - amountGiven);
    stack.stackSize+=amountGiven;
    markDirty(drive);
  }
  return stack;
}

public void saveIndexes(){
  ArrayList toSave=new ArrayList();
synchronized (this) {
    Object[] valueTable=this.indexes.valueTable;
    for (int i=0, l=valueTable.length; i < l; i++) {
      Index index=(Index)valueTable[i];
      if (index != null)       toSave.add(index);
    }
  }
  boolean allSaved=true;
  for (int i=0, length=toSave.size(); i < length; i++) {
    Index index=(Index)toSave.get(i);
    ReadWriteMonitor monitor=index.monitor;
    if (monitor == null)     continue;
    try {
      monitor.enterRead();
      if (index.hasChanged()) {
        if (monitor.exitReadEnterWrite()) {
          try {
            saveIndex(index);
          }
 catch (          IOException e) {
            if (JobManager.VERBOSE) {
              Util.verbose("-> got the following exception while saving:",System.err);
              e.printStackTrace();
            }
            allSaved=false;
          }
 finally {
            monitor.exitWriteEnterRead();
          }
        }
 else {
          allSaved=false;
        }
      }
    }
  finally {
      monitor.exitRead();
    }
  }
  if (this.participantsContainers != null && this.participantUpdated) {
    writeParticipantsIndexNamesFile();
    this.participantUpdated=false;
  }
  this.needToSave=!allSaved;
}

public void addItem(Artist artist,int position){
  if (artist == null)   throw new NullPointerException("The item cannot be null");
  if (position < getItemCount() || position > getItemCount())   throw new IllegalArgumentException("The position must be between 0 and lastIndex + 1");
  artists.add(position,artist);
  notifyItemInserted(position);
}

public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {
  if (workingDirectory != null && !workingDirectory.exists()) {
    throw new IOException(workingDirectory + " doesn't exist.");
  }
  return executeInternal(command,environment,workingDirectory,streamHandler,null);
}

public void expandAndSelectIfExists(RepositoryLocation location){
  if (location.parent() != null) {
    expandIfExists(location.parent(),location.getName());
  }
 else {
    expandIfExists(location,null);
  }
  scrollPathToVisible(getSelectionPath());
}

public void nextToken(){
  previousLine=line;
  previousColumn=column;
  while (pos < matcher.regionStart()) {
    if (text.charAt(pos) == '\n') {
      ++line;
      column=0;
    }
 else {
      ++column;
    }
    ++pos;
  }
  if (matcher.regionStart() == matcher.regionEnd()) {
    currentToken="";
  }
 else {
    matcher.usePattern(TOKEN);
    if (matcher.lookingAt()) {
      currentToken=matcher.group();
      matcher.region(matcher.end(),matcher.regionEnd());
    }
 else {
      currentToken=String.valueOf(text.charAt(pos));
      matcher.region(pos + 1,matcher.regionEnd());
    }
    skipWhitespace();
  }
}

public static void saveProvisioningValidity(Context context,long validity){
  if (validity <= 0L) {
    return;
  }
  long next=System.currentTimeMillis() + validity;
  SharedPreferences preferences=context.getSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME,Activity.MODE_PRIVATE);
  SharedPreferences.Editor editor=preferences.edit();
  editor.putLong(REGISTRY_PROVISIONING_VALIDITY,validity);
  editor.putLong(REGISTRY_PROVISIONING_EXPIRATION,next);
  editor.commit();
}

public void encode(OutputStream out) throws IOException {
  DerOutputStream tmp=new DerOutputStream();
  if (this.extensionValue == null) {
    this.extensionId=PKIXExtensions.ReasonCode_Id;
    this.critical=false;
    encodeThis();
  }
  super.encode(tmp);
  out.write(tmp.toByteArray());
}

public DriverTask unexportVolumesFromInitiators(List<Initiator> initiators,List<StorageVolume> volumes){
  LOG.info("Unexporting volumes from initiators");
  DriverTask task=new DellSCDriverTask("unexportVolumes");
  ScServer server=null;
  StringBuilder errBuffer=new StringBuilder();
  int volumesUnmapped=0;
  for (  StorageVolume volume : volumes) {
    String ssn=volume.getStorageSystemId();
    boolean isSnapshot=StringUtils.countMatches(volume.getNativeId(),".") == 2;
    try {
      StorageCenterAPI api=connectionManager.getConnection(ssn);
      ScVolume scVol=null;
      if (isSnapshot) {
        scVol=api.findReplayView(volume.getNativeId());
        if (scVol != null) {
          api.deleteVolume(scVol.instanceId);
          volumesUnmapped++;
          continue;
        }
      }
 else {
        scVol=api.getVolume(volume.getNativeId());
      }
      if (scVol == null) {
        throw new DellSCDriverException(String.format("Unable to find volume %s",volume.getNativeId()));
      }
      if (server == null) {
        server=findScServer(api,ssn,initiators);
      }
      if (server == null) {
        throw new DellSCDriverException(SERVER_CREATE_FAIL_MSG);
      }
      ScMappingProfile[] mappingProfiles=api.findMappingProfiles(server.instanceId,scVol.instanceId);
      for (      ScMappingProfile mappingProfile : mappingProfiles) {
        api.deleteMappingProfile(mappingProfile.instanceId);
      }
      volumesUnmapped++;
      LOG.info("Volume '{}' unexported from server '{}'",scVol.name,server.name);
    }
 catch (    StorageCenterAPIException|DellSCDriverException dex) {
      String error=String.format("Error unmapping volume %s: %s",volume.getDisplayName(),dex);
      LOG.error(error);
      errBuffer.append(String.format("%s%n",error));
      if (SERVER_CREATE_FAIL_MSG.equals(dex.getMessage())) {
        break;
      }
    }
  }
  task.setMessage(errBuffer.toString());
  if (volumesUnmapped == volumes.size()) {
    task.setStatus(TaskStatus.READY);
  }
 else   if (volumesUnmapped == 0) {
    task.setStatus(TaskStatus.FAILED);
  }
 else {
    task.setStatus(TaskStatus.PARTIALLY_FAILED);
  }
  return task;
}

public void createClusterAsync(final String projectId,final ClusterCreateSpec clusterCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  String path=String.format("%s/%s/clusters",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(clusterCreateSpec),responseCallback);
}

public static DereferenceAliasesPolicy valueOf(final int intValue){
  if (intValue < 0 || intValue >= ELEMENTS.length) {
    return null;
  }
  return ELEMENTS[intValue];
}

public void testGetNamedItemNS2() throws Throwable {
  Document doc;
  NamedNodeMap attributes;
  Node element;
  Attr attribute;
  NodeList elementList;
  String attrName;
  doc=(Document)load("staffNS",builder);
  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");
  element=elementList.item(1);
  attributes=element.getAttributes();
  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");
  attrName=attribute.getNodeName();
  assertEquals("namednodemapgetnameditemns02","emp:domestic",attrName);
}

public static void writeUnsafe(PacketOutputStream out,String value,boolean noBackslashEscapes) throws IOException {
  byte[] bytes=value.getBytes("UTF-8");
  out.writeUnsafe(QUOTE);
  writeBytesEscapedUnsafe(out,bytes,bytes.length,noBackslashEscapes);
  out.writeUnsafe(QUOTE);
}

public void add(final SAMRecord read,final int position){
  recordAndOffsets.add(new RecordAndOffset(read,position));
}

private Sha256Hash calculateHash(){
  try {
    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);
    writeHeader(bos);
    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

private void addPropertyType(URI p,Resource t){
  OwlProperty prop=getProperty(p);
  if (t.equals(OWL.TRANSITIVEPROPERTY)) {
    prop.setTransitive();
  }
 else   if (t.equals(OWL.SYMMETRICPROPERTY)) {
    prop.setSymmetric();
  }
 else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {
    prop.setAsymmetric();
  }
 else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {
    prop.setFunctional();
  }
 else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {
    prop.setInverseFunctional();
  }
 else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {
    prop.setIrreflexive();
  }
}

public static void equals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}

public static String writeActionsToString(OFInstructionWriteActions inst,Logger log) throws Exception {
  return ActionUtils.actionsToString(inst.getActions(),log);
}

protected void preAddInterruptibly(Object o) throws InterruptedException {
}

public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){
  int blockLen=(lineLen * 3) / 4;
  if (blockLen <= 0)   throw new IllegalArgumentException();
  int lines=(iLen + blockLen - 1) / blockLen;
  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();
  StringBuilder buf=new StringBuilder(bufLen);
  int ip=0;
  while (ip < iLen) {
    int l=Math.min(iLen - ip,blockLen);
    buf.append(encode(in,iOff + ip,l));
    buf.append(lineSeparator);
    ip+=l;
  }
  return buf.toString();
}

private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {
  long delta_time=System.currentTimeMillis();
  ODataFeed feed=client.readFeed(query,params);
  log(Level.DEBUG,"query(" + query + ") done in "+ delta_time+ "ms");
  return feed;
}

final int rllong(DataInputStream dis) throws IOException {
  int b1, b2, b3, b4;
  int i=0;
  i=dis.readInt();
  b1=(i & 0xFF) << 24;
  b2=(i & 0xFF00) << 8;
  b3=(i & 0xFF0000) >> 8;
  b4=(i & 0xFF000000) >>> 24;
  i=(b1 | b2 | b3| b4);
  return i;
}

public void testShiftRight4(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=45;
  byte rBytes[]={12,1,-61,39,-11,-94,-55};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.shiftRight(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public Dependencies resolveFromFile(File file,String className,SootClass sc){
  DexlibWrapper wrapper=cache.get(file);
  if (wrapper == null) {
    wrapper=new DexlibWrapper(file);
    cache.put(file,wrapper);
    wrapper.initialize();
  }
  Dependencies deps=wrapper.makeSootClass(sc,className);
  addSourceFileTag(sc,"dalvik_source_" + file.getName());
  return deps;
}

public static String buildResponseUrl(String tenant,LogoutState logoutState){
  String retval=null;
  LogoutResponse samlResponse=logoutState.generateResponseForTenant(tenant,logoutState.getMessageSource(),logoutState.getLocale());
  if (samlResponse != null) {
    log.info("SAML SLO Response is " + samlResponse.toString());
    retval=logoutState.generateResponseUrlForTenant(samlResponse,tenant);
  }
  return retval;
}

public static void assertLabel(int[] path,String text){
  if (verbose) {
    log("assertLabel(" + toString(path) + ", "+ text+ ")");
  }
  Label l=(Label)getComponentByPath(path);
  assertBool(l != null,"Null label" + text);
  assertBool(text == l.getText() || text.equals(l.getText()),("" + l.getText()) + " != " + text);
}

private void interpolateResultList(ArrayList<PathParser.PathDataNode> list){
  if (list == null || list.size() <= 2)   return;
  float[][] listPenPos=PathNodeUtils.calculatePenPosition(list);
  ArrayList<PathParser.PathDataNode> subList=new ArrayList<>();
  int size=list.size();
  PathParser.PathDataNode currentNode=null;
  int i=0;
  while (i < size - 1) {
    currentNode=list.get(i);
    if (!isInterpolatableCommand(currentNode.mType)) {
      i++;
      continue;
    }
    boolean validSequence=true;
    int k=i;
    for (int j=i; j < size && validSequence; j++) {
      if (currentNode.mType == list.get(j).mType) {
        k=j;
        if (!Arrays.equals(currentNode.mParams,list.get(j).mParams))         break;
      }
 else       validSequence=false;
    }
    if (k - i > 2) {
      interpolateSubList(list.subList(i,k + 1));
    }
    i++;
  }
}

private void initTokenizer(StreamTokenizer tokenizer){
  tokenizer.resetSyntax();
  tokenizer.whitespaceChars(0,(' ' - 1));
  tokenizer.wordChars(' ','\u00FF');
  tokenizer.whitespaceChars(',',',');
  tokenizer.whitespaceChars(':',':');
  tokenizer.commentChar('|');
  tokenizer.whitespaceChars('\t','\t');
  tokenizer.quoteChar('"');
  tokenizer.quoteChar('\'');
  tokenizer.eolIsSignificant(true);
}

protected void illegalMessageReceived(OFMessage m){
  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");
  throw new SwitchStateException(msg);
}

protected void run_ThreadSizeLoop() throws Exception {
  for (int i=25; i <= 100; i+=25) {
    setNumWorkers(i);
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
    }
  }
}

protected boolean read(){
  if (!nReuseHeader) {
    Debug.message("iso8211","DDFRecord reusing header, calling readHeader()");
    return readHeader();
  }
  byte[] tempData=new byte[nDataSize - nFieldOffset];
  int nReadBytes=poModule.read(tempData,0,tempData.length);
  System.arraycopy(pachData,nFieldOffset,tempData,0,tempData.length);
  if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) {
    return false;
  }
 else   if (nReadBytes != (int)(nDataSize - nFieldOffset)) {
    Debug.error("DDFRecord: Data record is short on DDF file.");
    return false;
  }
  return true;
}

@Override public boolean lock(){
  try {
    if (!FileFactory.isFileExist(location,FileFactory.getFileType(tmpPath))) {
      FileFactory.mkdirs(location,FileFactory.getFileType(tmpPath));
    }
    String lockFilePath=location + CarbonCommonConstants.FILE_SEPARATOR + lockFile;
    if (!FileFactory.isFileExist(lockFilePath,FileFactory.getFileType(location))) {
      FileFactory.createNewLockFile(lockFilePath,FileFactory.getFileType(location));
    }
    fileOutputStream=new FileOutputStream(lockFilePath);
    channel=fileOutputStream.getChannel();
    try {
      fileLock=channel.tryLock();
    }
 catch (    OverlappingFileLockException e) {
      return false;
    }
    if (null != fileLock) {
      return true;
    }
 else {
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}

public void open(int port) throws IOException {
  connection=new DatagramSocket(port);
  connection.setSoTimeout(timeout);
}

public String globalInfo(){
  return "A SplitEvaluator that produces results for a classification " + "scheme on a numeric class attribute.";
}

public MLResults execute(Script script){
  ScriptExecutor scriptExecutor=new ScriptExecutor(sparkMonitoringUtil);
  scriptExecutor.setExplain(explain);
  scriptExecutor.setExplainLevel(explainLevel);
  scriptExecutor.setStatistics(statistics);
  scriptExecutor.setInit(scriptHistoryStrings.isEmpty());
  return execute(script,scriptExecutor);
}

public void disable(RichFormatterFeature feature){
  features.remove(feature);
}

public void removeEventListener(ZWaveEventListener eventListener){
synchronized (zwaveEventListeners) {
    zwaveEventListeners.remove(eventListener);
  }
}

private static double pythonTime(){
  return System.currentTimeMillis() / 1000;
}

@SafeVarargs public final void add(T... newItems){
  add(Arrays.asList(newItems));
}

public static String quoteIfJavaKeyword(String name){
  return JVMModuleUtil.quoteIfJavaKeyword(name);
}

public static Recipe fromCursor(Cursor cursor){
  Recipe recipe=new Recipe(null);
  for (int c=0; c < cursor.getColumnCount(); c++) {
    String columnName=cursor.getColumnName(c);
    if (columnName.equals(RecipeTable.ID_COLUMN)) {
      recipe.id=cursor.getString(c);
    }
 else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {
      recipe.setTitle(cursor.getString(c));
    }
 else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {
      recipe.setDescription(cursor.getString(c));
    }
 else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {
      recipe.setPhoto(cursor.getString(c));
    }
 else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {
      recipe.setPrepTime(cursor.getString(c));
    }
  }
  return recipe;
}

public static void checkState(boolean expression,@Nullable Object errorMessage){
  if (!expression) {
    throw new IllegalStateException(String.valueOf(errorMessage));
  }
}

private static <T,ID>void addDropTableStatements(DatabaseType databaseType,TableInfo<T,ID> tableInfo,List<String> statements){
  List<String> statementsBefore=new ArrayList<String>();
  List<String> statementsAfter=new ArrayList<String>();
  for (  FieldType fieldType : tableInfo.getFieldTypes()) {
    databaseType.dropColumnArg(fieldType,statementsBefore,statementsAfter);
  }
  StringBuilder sb=new StringBuilder(64);
  sb.append("DROP TABLE ");
  databaseType.appendEscapedEntityName(sb,tableInfo.getTableName());
  sb.append(' ');
  statements.addAll(statementsBefore);
  statements.add(sb.toString());
  statements.addAll(statementsAfter);
}

public boolean isLocked(){
  return !queue.isEmpty();
}

public long cguest_time(){
  return Long.parseLong(fields[43]);
}

private static ClassInfo findOrCreateClass(String t){
  if (!t.endsWith("[]")) {
    return ClassInfo.findOrCreateClass(t);
  }
 else {
    String baseType=t.substring(0,t.indexOf("[]"));
    int level=(t.length() - t.indexOf("[]")) / 2;
    String s="";
    for (int i=0; i < level; ++i)     s+="[";
    if (baseType.equals("int"))     s+="I";
 else     if (baseType.equals("boolean"))     s+="B";
 else     s+="L" + baseType + ";";
    return ClassInfo.findOrCreateClass(s);
  }
}

private void resetNotes(){
  if (errorInStatus1) {
    if (editMode) {
      statusText1.setText(editStatus1);
    }
 else {
      statusText1.setText(stdStatus1);
    }
    errorInStatus1=false;
  }
  resetNotes2();
}

@HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){
  long ticks=ticksAddr.getValue() - rtcMagicOffset;
  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);
  time.write(timeAddr);
  return 0;
}

public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {
  String str=data == null ? null : data.toString();
  writeStringToFile(file,str,encoding,append);
}

private void populateNavDrawer(){
  mNavDrawerItems.clear();
  mNavDrawerItems.add(NAVDRAWER_ITEM_HOME);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_FOLLOWING);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_SHOTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_BUCKETS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_PROJECTS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_TEAMS);
  mNavDrawerItems.add(NAVDRAWER_ITEM_MY_LIKES);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL);
  mNavDrawerItems.add(NAVDRAWER_ITEM_SETTINGS);
  createNavDrawerItems();
}

private BigInteger oddModPow(BigInteger y,BigInteger z){
  if (y.equals(ONE))   return this;
  if (signum == 0)   return ZERO;
  int[] base=mag.clone();
  int[] exp=y.mag;
  int[] mod=z.mag;
  int modLen=mod.length;
  if ((modLen & 1) != 0) {
    int[] x=new int[modLen + 1];
    System.arraycopy(mod,0,x,1,modLen);
    mod=x;
    modLen++;
  }
  int wbits=0;
  int ebits=bitLength(exp,exp.length);
  if ((ebits != 17) || (exp[0] != 65537)) {
    while (ebits > bnExpModThreshTable[wbits]) {
      wbits++;
    }
  }
  int tblmask=1 << wbits;
  int[][] table=new int[tblmask][];
  for (int i=0; i < tblmask; i++)   table[i]=new int[modLen];
  long n0=(mod[modLen - 1] & LONG_MASK) + ((mod[modLen - 2] & LONG_MASK) << 32);
  long inv=-MutableBigInteger.inverseMod64(n0);
  int[] a=leftShift(base,base.length,modLen << 5);
  MutableBigInteger q=new MutableBigInteger(), a2=new MutableBigInteger(a), b2=new MutableBigInteger(mod);
  b2.normalize();
  MutableBigInteger r=a2.divide(b2,q);
  table[0]=r.toIntArray();
  if (table[0].length < modLen) {
    int offset=modLen - table[0].length;
    int[] t2=new int[modLen];
    System.arraycopy(table[0],0,t2,offset,table[0].length);
    table[0]=t2;
  }
  int[] b=montgomerySquare(table[0],mod,modLen,inv,null);
  int[] t=Arrays.copyOf(b,modLen);
  for (int i=1; i < tblmask; i++) {
    table[i]=montgomeryMultiply(t,table[i - 1],mod,modLen,inv,null);
  }
  int bitpos=1 << ((ebits - 1) & (32 - 1));
  int buf=0;
  int elen=exp.length;
  int eIndex=0;
  for (int i=0; i <= wbits; i++) {
    buf=(buf << 1) | (((exp[eIndex] & bitpos) != 0) ? 1 : 0);
    bitpos>>>=1;
    if (bitpos == 0) {
      eIndex++;
      bitpos=1 << (32 - 1);
      elen--;
    }
  }
  int multpos=ebits;
  ebits--;
  boolean isone=true;
  multpos=ebits - wbits;
  while ((buf & 1) == 0) {
    buf>>>=1;
    multpos++;
  }
  int[] mult=table[buf >>> 1];
  buf=0;
  if (multpos == ebits)   isone=false;
  while (true) {
    ebits--;
    buf<<=1;
    if (elen != 0) {
      buf|=((exp[eIndex] & bitpos) != 0) ? 1 : 0;
      bitpos>>>=1;
      if (bitpos == 0) {
        eIndex++;
        bitpos=1 << (32 - 1);
        elen--;
      }
    }
    if ((buf & tblmask) != 0) {
      multpos=ebits - wbits;
      while ((buf & 1) == 0) {
        buf>>>=1;
        multpos++;
      }
      mult=table[buf >>> 1];
      buf=0;
    }
    if (ebits == multpos) {
      if (isone) {
        b=mult.clone();
        isone=false;
      }
 else {
        t=b;
        a=montgomeryMultiply(t,mult,mod,modLen,inv,a);
        t=a;
        a=b;
        b=t;
      }
    }
    if (ebits == 0)     break;
    if (!isone) {
      t=b;
      a=montgomerySquare(t,mod,modLen,inv,a);
      t=a;
      a=b;
      b=t;
    }
  }
  int[] t2=new int[2 * modLen];
  System.arraycopy(b,0,t2,modLen,modLen);
  b=montReduce(t2,mod,modLen,(int)inv);
  t2=Arrays.copyOf(b,modLen);
  return new BigInteger(1,t2);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childValue;
  int childLength;
  doc=(Document)load("staff",false);
  elementList=doc.getElementsByTagName("name");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  childValue=child.getData();
  childLength=childValue.length();
  assertEquals("characterdataGetLengthAssert",15,childLength);
}

public int nextToken(){
  while (index < length && Character.isWhitespace(expr[index])) {
    index++;
  }
  tokenVal=null;
  if (index == length)   return TOKEN_END;
  int start=index;
  char currentChar=expr[index];
  char nextChar=(char)0;
  index++;
  if (index < length)   nextChar=expr[index];
switch (currentChar) {
case '(':
    return TOKEN_LBRACE;
case ')':
  return TOKEN_RBRACE;
case '=':
return TOKEN_EQ;
case '!':
if (nextChar == '=') {
index++;
return TOKEN_NOT_EQ;
}
return TOKEN_NOT;
case '|':
if (nextChar == '|') {
index++;
return TOKEN_OR;
}
break;
case '&':
if (nextChar == '&') {
index++;
return TOKEN_AND;
}
break;
case '>':
if (nextChar == '=') {
index++;
return TOKEN_GE;
}
return TOKEN_GT;
case '<':
if (nextChar == '=') {
index++;
return TOKEN_LE;
}
return TOKEN_LT;
default :
break;
}
int end=index;
if (currentChar == '"' || currentChar == '\'') {
char endChar=currentChar;
boolean escaped=false;
start++;
for (; index < length; index++) {
if (expr[index] == '\\' && !escaped) {
escaped=true;
continue;
}
if (expr[index] == endChar && !escaped) break;
escaped=false;
}
end=index;
index++;
}
 else if (currentChar == '/') {
char endChar=currentChar;
boolean escaped=false;
for (; index < length; index++) {
if (expr[index] == '\\' && !escaped) {
escaped=true;
continue;
}
if (expr[index] == endChar && !escaped) break;
escaped=false;
}
end=++index;
}
 else {
for (; index < length; index++) {
if (isMetaChar(expr[index])) break;
}
end=index;
}
this.tokenVal=new String(expr,start,end - start);
return TOKEN_STRING;
}

public static Byte[] valuesOf(byte[] array){
  Byte[] dest=new Byte[array.length];
  for (int i=0; i < array.length; i++) {
    dest[i]=Byte.valueOf(array[i]);
  }
  return dest;
}

public void auditCallhome(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){
  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);
}

public static float mean(float[] data,int startIndex,int endIndex){
  float mean=0;
  int total=0;
  startIndex=Math.max(startIndex,0);
  startIndex=Math.min(startIndex,data.length - 1);
  endIndex=Math.max(endIndex,0);
  endIndex=Math.min(endIndex,data.length - 1);
  if (startIndex > endIndex)   startIndex=endIndex;
  for (int i=startIndex; i <= endIndex; i++) {
    if (Float.isNaN(data[i]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");
    mean+=data[i];
    total++;
  }
  mean/=total;
  return mean;
}

public static String constructNTPtime(long date){
  long ntpTime=2208988800L;
  long startTime=(date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime;
  return String.valueOf(startTime);
}

protected MediaType selectMediaType(ServerWebExchange exchange,List<MediaType> producibleTypes){
  List<MediaType> acceptableTypes=getAcceptableTypes(exchange);
  producibleTypes=getProducibleTypes(exchange,producibleTypes);
  Set<MediaType> compatibleMediaTypes=new LinkedHashSet<>();
  for (  MediaType acceptable : acceptableTypes) {
    for (    MediaType producible : producibleTypes) {
      if (acceptable.isCompatibleWith(producible)) {
        compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable,producible));
      }
    }
  }
  List<MediaType> result=new ArrayList<>(compatibleMediaTypes);
  MediaType.sortBySpecificityAndQuality(result);
  for (  MediaType mediaType : compatibleMediaTypes) {
    if (mediaType.isConcrete()) {
      return mediaType;
    }
 else     if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {
      return MediaType.APPLICATION_OCTET_STREAM;
    }
  }
  return null;
}

public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (!(c instanceof JPopupMenu)) {
    return;
  }
  Font origFont=g.getFont();
  Color origColor=g.getColor();
  JPopupMenu popup=(JPopupMenu)c;
  String title=popup.getLabel();
  if (title == null) {
    return;
  }
  g.setFont(font);
  FontMetrics fm=SwingUtilities2.getFontMetrics(popup,g,font);
  int fontHeight=fm.getHeight();
  int descent=fm.getDescent();
  int ascent=fm.getAscent();
  Point textLoc=new Point();
  int stringWidth=SwingUtilities2.stringWidth(popup,fm,title);
  textLoc.y=y + ascent + TEXT_SPACING;
  textLoc.x=x + ((width - stringWidth) / 2);
  g.setColor(background);
  g.fillRect(textLoc.x - TEXT_SPACING,textLoc.y - (fontHeight - descent),stringWidth + (2 * TEXT_SPACING),fontHeight - descent);
  g.setColor(foreground);
  SwingUtilities2.drawString(popup,g,title,textLoc.x,textLoc.y);
  MotifGraphicsUtils.drawGroove(g,x,textLoc.y + TEXT_SPACING,width,GROOVE_HEIGHT,shadowColor,highlightColor);
  g.setFont(origFont);
  g.setColor(origColor);
}

public void ensureCapacity(int mincap){
  if (mincap > array.length) {
    int newcap=((array.length * 3) >> 1) + 1;
    int[] olddata=array;
    array=new int[newcap < mincap ? mincap : newcap];
    System.arraycopy(olddata,0,array,0,size);
  }
}

public void invalidateAndUnmap(ByteBuffer... bufs) throws IOException {
  if (cleaner != null) {
    invalidated=true;
    barrier.lazySet(0);
    Thread.yield();
    for (    ByteBuffer b : bufs) {
      cleaner.freeBuffer(resourceDescription,b);
    }
  }
}

public int addDir(File file){
  if (!file.exists()) {
    return 0;
  }
  String[] names=getNames(getFiles(file,".class"));
  loadClass(file,names);
  return 1;
}

private boolean isMineshafterPresent(){
  try {
    Class.forName("mineshafter.MineServer");
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}

@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof BubbleXYItemLabelGenerator)) {
    return false;
  }
  if (!super.equals(obj)) {
    return false;
  }
  BubbleXYItemLabelGenerator that=(BubbleXYItemLabelGenerator)obj;
  if (!ObjectUtilities.equal(this.zFormat,that.zFormat)) {
    return false;
  }
  if (!ObjectUtilities.equal(this.zDateFormat,that.zDateFormat)) {
    return false;
  }
  return true;
}

public static boolean hasElementChild(Node node){
  NodeList nl=node.getChildNodes();
  Node child=null;
  int length=nl.getLength();
  for (int i=0; i < length; i++) {
    child=nl.item(i);
    if (child.getNodeType() == Node.ELEMENT_NODE) {
      return true;
    }
  }
  return false;
}

public void delItem(int index){
synchronized (getMenuTreeLock()) {
    if (selectedIndex == index) {
      selectItem(null,false);
    }
 else     if (selectedIndex > index) {
      selectedIndex--;
    }
    if (index < items.size()) {
      items.remove(index);
    }
 else {
      if (log.isLoggable(PlatformLogger.Level.FINE)) {
        log.fine("WARNING: Attempt to remove non-existing menu item, index : " + index + ", item count : "+ items.size());
      }
    }
  }
  updateSize();
}

public static int countCSSPrimitiveNames(){
  return ALL_PRIMITIVE_PROPERTY_NAMES.size();
}

public void printString(String v) throws IOException {
  printString(v,0,v.length());
}

private void checkPermission(Object object,NamespacePermissionEnum[] permissions,List<AccessDeniedException> accessDeniedExceptions){
  if (object != null) {
    if (object instanceof Collection) {
      Collection<?> collection=(Collection<?>)object;
      for (      Object element : collection) {
        checkPermission(element,permissions,accessDeniedExceptions);
      }
    }
 else     if (object instanceof String) {
      try {
        checkPermission((String)object,permissions);
      }
 catch (      AccessDeniedException accessDeniedException) {
        accessDeniedExceptions.add(accessDeniedException);
      }
    }
 else {
      throw new IllegalStateException(String.format("Object must be of type %s or %s. Actual object.class = %s",String.class,Collection.class,object.getClass()));
    }
  }
}

private void displayAllStringDefinedInStringXml(){
  SimpleIconFontTextView textView=(SimpleIconFontTextView)findViewById(R.id.text_view_2);
  List<String> list=new ArrayList<>();
  list.add(getString(R.string.cubeicon_gems_logo));
  list.add(getString(R.string.cubeicon_android));
  list.add(getString(R.string.cubeicon_heart));
  String text=TextUtils.join(" ",list);
  textView.setText(text);
}

private static Intent createMapActivityIntent(Context context,URLSpan[] urlSpans){
  for (int span_i=0; span_i < urlSpans.length; span_i++) {
    URLSpan urlSpan=urlSpans[span_i];
    String urlString=urlSpan.getURL();
    if (urlString.startsWith(GEO_PREFIX)) {
      Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(urlString));
      geoIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      return geoIntent;
    }
  }
  return null;
}

private StringBuilder generateParameters(){
  StringBuilder parameters=new StringBuilder();
  if (filterMap == null && expandParameters == null) {
    return parameters;
  }
  parameters.append('?');
  int filterParameterCounter=0;
  if (filterMap != null && !filterMap.isEmpty()) {
    parameters.append(FILTER_PREFIX);
    for (    Map.Entry<String,String> filterEntry : filterMap.entrySet()) {
      parameters.append(String.format("%s eq '%s'",filterEntry.getKey(),filterEntry.getValue()));
      if (++filterParameterCounter < filterMap.size()) {
        parameters.append(" and ");
      }
    }
    if (expandParameters != null) {
      parameters.append("&");
    }
  }
  if (expandParameters != null) {
    parameters.append(EXPAND_PREFIX);
    Iterator iterator=expandParameters.iterator();
    parameters.append(String.format("%s",iterator.next()));
    while (iterator.hasNext()) {
      parameters.append(String.format(",%s",iterator.next()));
    }
  }
  return parameters;
}

public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {
  if (bmap == null || exifOutStream == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=getExifWriterStream(exifOutStream);
  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);
  s.flush();
}

public void removeAttribute(int index){
  if (index >= 0 && index < length) {
    if (index < length - 1) {
      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);
    }
    index=(length - 1) * 5;
    data[index++]=null;
    data[index++]=null;
    data[index++]=null;
    data[index++]=null;
    data[index]=null;
    length--;
  }
 else {
    badIndex(index);
  }
}

public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){
  if (signature.charAt(0) != 'L') {
    return null;
  }
  return signature.substring(1,signature.length() - 1);
}

private void paintPreview(int dx,int dy,float zoomfactor){
  if (image != null) {
    Graphics2D g2=(Graphics2D)getGraphics();
    UColor bg=renderer.getBackgroundColor();
    g2.setBackground(new Color(bg.getRed(),bg.getGreen(),bg.getBlue(),bg.getAlpha()));
    int newWidth=Math.round(image.getWidth(null) * zoomfactor);
    int newHeight=(int)Math.round(image.getHeight(null) * zoomfactor);
    g2.drawImage(image,dx,dy,newWidth,newHeight,null);
    if (dx > 0)     g2.clearRect(0,0,dx,getHeight());
 else     g2.clearRect(getWidth() + dx,0,getWidth(),getHeight());
    if (dy > 0)     g2.clearRect(0,0,getWidth(),dy);
 else     g2.clearRect(0,getHeight() + dy,getWidth(),getHeight());
  }
}

@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException {
synchronized (mCameraLock) {
    if (mCamera != null) {
      return this;
    }
    mCamera=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      mCamera.setPreviewTexture(mDummySurfaceTexture);
    }
 else {
      mDummySurfaceView=new SurfaceView(mContext);
      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());
    }
    mCamera.startPreview();
    mProcessingThread=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
    mProcessingThread.start();
  }
  return this;
}

public synchronized void clear(){
  mCategories.clear();
  mValues.clear();
}

public static List<List<Double>> partitionVariable(List<Double> arr,int chunk){
  int count=0;
  List<List<Double>> ret=new ArrayList<List<Double>>();
  while (count < arr.size()) {
    List<Double> sublist=arr.subList(count,count + chunk);
    count+=chunk;
    ret.add(sublist);
  }
  for (  List<Double> lists : ret) {
    if (lists.size() < chunk)     ret.remove(lists);
  }
  return ret;
}

private static void updateWindowUI(Window window){
  SwingUtilities.updateComponentTreeUI(window);
  Window ownedWins[]=window.getOwnedWindows();
  for (  Window ownedWin : ownedWins) {
    updateWindowUI(ownedWin);
  }
}

public void clearResults(){
  if (resultList != null) {
    resultList.clear();
    mAdapter.notifyDataSetChanged();
  }
  listener.onSearchCleared();
}

public ArrayList<ConstraintWidget> findWidgets(WidgetContainer container,int x,int y,int width,int height){
  ArrayList<ConstraintWidget> found=new ArrayList<>();
  Rectangle area=new Rectangle(x,y,width,height);
  for (  ConstraintWidget widget : container.getChildren()) {
    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();
    WidgetDecorator decorator=companion.getWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE);
    if (!decorator.isVisible()) {
      continue;
    }
    Rectangle bounds=new Rectangle(widget.getDrawX(),widget.getDrawY(),widget.getWidth(),widget.getHeight());
    if (area.intersects(bounds)) {
      found.add(widget);
    }
  }
  return found;
}

public final void printSymbol(CharSequence text) throws IOException {
  if (text == null) {
    appendAscii("null.symbol");
  }
 else   if (text.length() == 0) {
    throw new EmptySymbolException();
  }
 else   if (symbolNeedsQuoting(text,true)) {
    appendAscii('\'');
    printCodePoints(text,SYMBOL_ESCAPE_CODES);
    appendAscii('\'');
  }
 else {
    appendAscii(text);
  }
}

public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {
  return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks);
}

@Override public String toString(){
  Map<Assignment,Double> sortedTable=InferenceUtils.getNBest(table,Math.max(table.size(),1));
  String str="";
  for (  Entry<Assignment,Double> entry : sortedTable.entrySet()) {
    String prob=StringUtils.getShortForm(entry.getValue());
    str+="P(" + entry.getKey() + "):="+ prob+ "\n";
  }
  return (str.length() > 0) ? str.substring(0,str.length() - 1) : str;
}

protected final void updateBorderText(final String text){
  Preconditions.checkNotNull(text,"IE01842: Text argument can not be null");
  m_titledBorder.setTitle(text);
  updateUI();
}

private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){
  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);
  for (  Class<?> classe : classes)   result.add(classe);
}

public void resetReferences(){
  if (_refs != null)   _refs.clear();
}

public static BigInteger decodeMPI(byte[] mpi,boolean hasLength){
  byte[] buf;
  if (hasLength) {
    int length=(int)readUint32BE(mpi,0);
    buf=new byte[length];
    System.arraycopy(mpi,4,buf,0,length);
  }
 else   buf=mpi;
  if (buf.length == 0)   return BigInteger.ZERO;
  boolean isNegative=(buf[0] & 0x80) == 0x80;
  if (isNegative)   buf[0]&=0x7f;
  BigInteger result=new BigInteger(buf);
  return isNegative ? result.negate() : result;
}

public void schemaChanged(String serviceName,String version){
synchronized (mapRealmToFormat) {
    mapRealmToFormat.remove(ROOT);
  }
}

public void sort(DTMIterator v,Vector keys,XPathContext support) throws javax.xml.transform.TransformerException {
  m_keys=keys;
  int n=v.getLength();
  Vector nodes=new Vector();
  for (int i=0; i < n; i++) {
    NodeCompareElem elem=new NodeCompareElem(v.item(i));
    nodes.addElement(elem);
  }
  Vector scratchVector=new Vector();
  mergesort(nodes,scratchVector,0,n - 1,support);
  for (int i=0; i < n; i++) {
    v.setItem(((NodeCompareElem)nodes.elementAt(i)).m_node,i);
  }
  v.setCurrentPos(0);
}

protected DateTimeData parse(String str) throws SchemaDateTimeException {
  DateTimeData date=new DateTimeData(str,this);
  int len=str.length();
  date.year=YEAR;
  date.day=DAY;
  if (str.charAt(0) != '-' || str.charAt(1) != '-') {
    throw new SchemaDateTimeException("Invalid format for gMonth: " + str);
  }
  int stop=4;
  date.month=parseInt(str,2,stop);
  if (str.length() >= stop + 2 && str.charAt(stop) == '-' && str.charAt(stop + 1) == '-') {
    stop+=2;
  }
  if (stop < len) {
    if (!isNextCharUTCSign(str,stop,len)) {
      throw new SchemaDateTimeException("Error in month parsing: " + str);
    }
 else {
      getTimeZone(str,date,stop,len);
    }
  }
  validateDateTime(date);
  saveUnnormalized(date);
  if (date.utc != 0 && date.utc != 'Z') {
    normalize(date);
  }
  date.position=1;
  return date;
}

private void addToQueue(SerialMessage serialMessage){
  if (serialMessage == null) {
    return;
  }
  if (!msgQueue.contains(serialMessage) && msgQueue.remainingCapacity() > 1) {
    msgQueue.add(serialMessage);
  }
  sendMessage();
}

private DBID stringToDBID(String query){
  return DBIDUtil.importInteger(Integer.valueOf(query));
}

@Override public final void writeShort(int v) throws IOException {
  work[0]=(byte)v;
  work[1]=(byte)(v >> 8);
  dis.write(work,0,2);
}

final public void println(long v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

public ThriftServiceMetadata(Class<?> serviceType){
  requireNonNull(serviceType,"serviceType");
  interfaces=init(null,Collections.singleton(serviceType));
}

public WritableRaster createCompatibleWritableRaster(int w,int h){
  if (w <= 0 || h <= 0) {
    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));
  }
  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);
  return new BytePackedRaster(sm,new Point(0,0));
}

public static Response invalidEntity(ConstraintViolationException e){
  StringBuilder errorMessage=new StringBuilder();
  boolean firstPass=true;
  for (  ConstraintViolation error : e.getConstraintViolations()) {
    if (!firstPass) {
      errorMessage.append(", ");
    }
    errorMessage.append(String.format("%s %s (was %s)",error.getPropertyPath(),error.getMessage(),error.getInvalidValue()));
    firstPass=false;
  }
  ExternalException externalException=new ExternalException(ErrorCode.INVALID_ENTITY,errorMessage.toString(),null);
  return externalException(externalException);
}

public String checkStartBlock(int mode){
  if (log.isDebugEnabled())   log.debug("checkStartBlock for warrant \"" + getDisplayName() + "\".");
  BlockOrder bo=_orders.get(0);
  OBlock block=bo.getBlock();
  String msg=block.allocate(this);
  if (msg != null) {
    return msg;
  }
  msg=bo.setPath(this);
  if (msg != null) {
    return msg;
  }
  int state=block.getState();
  if ((state & OBlock.DARK) != 0 || _tempRunBlind) {
    msg=Bundle.getMessage("BlockDark",block.getDisplayName());
  }
 else   if ((state & OBlock.OCCUPIED) == 0) {
    if (mode == MODE_LEARN) {
      msg="learnStart";
    }
 else {
      msg="warnStart";
    }
    msg=Bundle.getMessage(msg,getTrainName(),block.getDisplayName());
  }
 else {
    TrackerTableAction.stopTrackerIn(block);
  }
  return msg;
}

private void parseSwitch(int indent,boolean firstContent,String header,Layout layout,List<Elem> elems){
  TokenStream tokens=new TokenStream(header);
  Elem selector=parseExpr(tokens);
  tokens.checkAtEnd();
  ImmutableList.Builder<Case> cases=ImmutableList.builder();
  List<Elem> defaultElems=null;
  boolean done;
  String line=getNextLine();
  Matcher matcher=COMMAND_LINE.matcher(line);
  String command;
  String rest;
  if (matcher.find()) {
    command=matcher.group(COMMAND_NAME_GROUP);
    rest=line.substring(matcher.end());
    done=false;
  }
 else {
    error("expected '@end', '@case' or '@default' command after 'switch'");
    done=true;
    command=null;
    rest=null;
  }
  while (!done) {
switch (command) {
case END_COMMAND:
      checkHeaderEmpty(command,rest);
    done=true;
  break;
case DEFAULT_COMMAND:
checkHeaderEmpty(command,rest);
if (defaultElems != null) {
error("duplicate '@default' in @switch");
}
defaultElems=parseUntil(indent,layout,END_COMMAND);
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
case CASE_COMMAND:
tokens=new TokenStream(rest);
Elem value=parseExpr(tokens);
tokens.checkAtEnd();
List<Elem> caseElems=parseUntil(indent,layout,END_COMMAND,CASE_COMMAND,DEFAULT_COMMAND);
if (value != null) {
cases.add(Case.create(value,caseElems));
}
command=lastTerminator;
rest=lastTerminatorHeader;
done=lastTerminator == null;
break;
default :
unexpectedCommandError(command);
done=true;
break;
}
}
if (selector != null) {
elems.add(Block.create(!firstContent,Switch.create(input.location(),selector,cases.build(),defaultElems)));
}
}

public void init(String prefix,java.net.URL url){
  try {
    java.io.InputStream in=url.openStream();
    Properties props=new Properties();
    props.load(in);
    init(getLayers(prefix,props));
  }
 catch (  java.net.MalformedURLException murle) {
    logger.warning("LayerHandler.init(URL): " + url + " is not a valid URL");
  }
catch (  java.io.IOException e) {
    logger.warning("LayerHandler.init(URL): Caught an IOException");
  }
}

boolean suppressedBy(DNSIncoming msg){
  try {
    for (    DNSRecord answer : msg.getAllAnswers()) {
      if (suppressedBy(answer)) {
        return true;
      }
    }
    return false;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    logger.log(Level.WARNING,"suppressedBy() message " + msg + " exception ",e);
    return false;
  }
}

public static Properties createProperties(final Map<String,String> map){
  Properties properties=new Properties();
  if (!(map == null || map.isEmpty())) {
    for (    Entry<String,String> entry : map.entrySet()) {
      properties.setProperty(entry.getKey(),entry.getValue());
    }
  }
  return properties;
}

public Node selectFirst(String query){
  List<Node> selectedNodes=select(query);
  if (selectedNodes.isEmpty()) {
    return null;
  }
  return selectedNodes.get(0);
}

public static String[] stringArrayFromProperties(Properties p,String propName,String tok){
  String[] ret=null;
  String raw=p.getProperty(propName);
  if (raw != null && raw.length() > 0) {
    try {
      StringTokenizer token=new StringTokenizer(raw,tok);
      int numPaths=token.countTokens();
      ret=new String[numPaths];
      for (int i=0; i < numPaths; i++) {
        ret[i]=token.nextToken();
      }
      return ret;
    }
 catch (    java.util.NoSuchElementException e) {
      e.printStackTrace();
    }
  }
  return ret;
}

public void generate(int x1,int y1,int x2,int y2){
  Point midPoint=new Point();
  Point arcCenter=new Point();
  Point2D peakPoint=new Point2D.Float();
  double distance=Math.sqrt(Math.pow(Math.abs(y2 - y1),2.0) + Math.pow(Math.abs(x2 - x1),2.0));
  double straightLineSlope=Math.atan((double)(y2 - y1) / (double)(x2 - x1));
  double inverseSlope=straightLineSlope - (Math.PI / 2.0);
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generate: Slope is " + Math.toDegrees(straightLineSlope) + " degrees, distance = "+ distance+ " pixels.");
  }
  midPoint.setLocation(x1 + ((x2 - x1) / 2),y1 + ((y2 - y1) / 2));
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generate: Center point for (" + x1 + ", "+ y1+ ") to ("+ x2+ ", "+ y2+ ") is ("+ midPoint.x+ ", "+ midPoint.y+ ")");
  }
  double arccos=Math.cos(arcAngle);
  double arcRadius;
  if (arccos != 1.0) {
    arcRadius=distance / Math.sqrt(2.0 * (1.0 - Math.cos(arcAngle)));
  }
 else {
    arcRadius=distance / Math.sqrt(2.0);
  }
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generate: radius of arc = " + arcRadius);
  }
  double x=arcRadius - arcRadius * Math.cos(arcAngle);
  double rPrime=(distance / 2.0) * (Math.sqrt(1.0 - Math.pow(x / distance,2.0))) / Math.sin(arcAngle / 2.0);
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generate: rPrime = " + rPrime);
  }
  int direction=1;
  if (arcUp)   direction=-1;
  arcCenter.x=midPoint.x + (direction * (int)(rPrime * Math.cos(inverseSlope)));
  arcCenter.y=midPoint.y + (direction * (int)(rPrime * Math.sin(inverseSlope)));
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generateArc: creating supplimental graphics list");
    arcGraphics=new OMGraphicList();
    double dist1=Math.sqrt(Math.pow((double)(arcCenter.x - x1),2.0) + Math.pow((double)(arcCenter.y - y1),2.0));
    double dist2=Math.sqrt(Math.pow((double)(arcCenter.x - x2),2.0) + Math.pow((double)(arcCenter.y - y2),2.0));
    Debug.output("ArcCalc.generate: Center focus for arc is (" + arcCenter.x + ", "+ arcCenter.y+ ") along slope line of "+ Math.toDegrees(inverseSlope)+ " degrees).");
    Debug.output("ArcCalc.generate: Distance to point 1 from arc focus = " + dist1 + "\n                    Distance to point 2 from arc focus = "+ dist2);
    OMRect point1=new OMRect(x1 - 1,y1 - 1,x1 + 1,y1 + 1);
    OMRect point2=new OMRect(x2 - 1,y2 - 1,x2 + 1,y2 + 1);
    OMRect arcPoint=new OMRect(arcCenter.x - 1,arcCenter.y - 1,arcCenter.x + 1,arcCenter.y + 1);
    point1.setLinePaint(OMColor.red);
    point2.setLinePaint(OMColor.red);
    arcPoint.setLinePaint(OMColor.blue);
    arcGraphics.add(point1);
    arcGraphics.add(point2);
    arcGraphics.add(arcPoint);
    OMLine line1=new OMLine(x1,y1,x2,y2);
    OMLine line2=new OMLine(midPoint.x,midPoint.y,arcCenter.x,arcCenter.y);
    arcGraphics.add(line1);
    arcGraphics.add(line2);
  }
  int realCount=0;
  double startSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x1,y1);
  double endSlope=getRealAngle((float)arcCenter.getX(),(float)arcCenter.getY(),x2,y2);
  double smallSlope, largeSlope;
  double angleIncrement;
  smallSlope=(startSlope > endSlope) ? endSlope : startSlope;
  largeSlope=(smallSlope == startSlope) ? endSlope : startSlope;
  while (Math.abs(smallSlope - largeSlope) > Math.PI) {
    if (Math.abs(largeSlope - smallSlope - Math.PI) < .001) {
      break;
    }
    Debug.message("arc","ArcCalc.generate: Modifying the starting slope.");
    double tmpSlope=smallSlope + MoreMath.TWO_PI;
    smallSlope=largeSlope;
    largeSlope=tmpSlope;
  }
  if (MoreMath.approximately_equal(arcAngle,Math.PI) && arcUp) {
    Debug.message("arc","ArcCalc.generate: Modifying 180 angle points.");
    double tmpSlope=smallSlope + MoreMath.TWO_PI;
    smallSlope=largeSlope;
    largeSlope=tmpSlope;
  }
  if (Math.abs(y2 - y1) < Math.abs(x2 - x1)) {
    angleIncrement=Math.PI / Math.abs(x2 - x1);
  }
 else {
    angleIncrement=Math.PI / Math.abs(y2 - y1);
  }
  int numPoints=(int)(Math.abs(smallSlope - largeSlope) / angleIncrement + 2);
  float[] xPoints=new float[numPoints];
  float[] yPoints=new float[numPoints];
  if (Debug.debugging("arc")) {
    Debug.output("ArcCalc.generate: angle to x1, y1 is " + startSlope + " ("+ Math.toDegrees(startSlope)+ " degrees), angle to x2, y2 is "+ endSlope+ " ("+ Math.toDegrees(endSlope)+ " degrees)");
    Debug.output("ArcCalc.generate: Starting angle is " + smallSlope + "("+ Math.toDegrees(smallSlope)+ " degrees), end angle is "+ largeSlope+ " ("+ Math.toDegrees(largeSlope)+ " degrees), incrementing by "+ angleIncrement+ " ("+ Math.toDegrees(angleIncrement)+ " degrees)");
  }
  reversed=false;
  while (smallSlope < largeSlope && realCount < numPoints) {
    xPoints[realCount]=arcCenter.x + (int)(arcRadius * Math.cos(smallSlope));
    yPoints[realCount]=arcCenter.y + (int)(arcRadius * Math.sin(smallSlope));
    if (realCount == 0 && xPoints[realCount] == x2) {
      Debug.message("arc","ArcCalc: line reversed");
      reversed=true;
    }
    if (Debug.debugging("arc") && realCount == 0) {
      OMLine startLine=new OMLine(arcCenter.x,arcCenter.y,(int)xPoints[0],(int)yPoints[0]);
      startLine.setLinePaint(OMColor.white);
      arcGraphics.add(startLine);
    }
 else     if (Debug.debugging("arcdetail")) {
      Debug.output("  angle " + smallSlope + " ("+ smallSlope * 180 / Math.PI + " degrees)  = " + xPoints[realCount] + ", " + yPoints[realCount]);
    }
    if (Math.abs(largeSlope - smallSlope - (arcAngle / 2.0)) < angleIncrement) {
      peakPoint.setLocation(xPoints[realCount],yPoints[realCount]);
      Debug.message("arc","ArcCalc: Found a midpoint.");
    }
    smallSlope+=angleIncrement;
    realCount++;
  }
  xpoints=new float[realCount];
  ypoints=new float[realCount];
  System.arraycopy(xPoints,0,xpoints,0,realCount);
  System.arraycopy(yPoints,0,ypoints,0,realCount);
}

private static int compareLocales(Locale primary,Locale other){
  final String lang=primary.getLanguage();
  if ((lang == null) || !lang.equals(other.getLanguage())) {
    return 0;
  }
  final String country=primary.getCountry();
  if ((country == null) || !country.equals(other.getCountry())) {
    return 1;
  }
  final String variant=primary.getVariant();
  if ((variant == null) || !variant.equals(other.getVariant())) {
    return 2;
  }
  return 3;
}

void queryReadResult(PreparedStatement prep) throws SQLException {
  ResultSet rs=prep.executeQuery();
  ResultSetMetaData meta=rs.getMetaData();
  int columnCount=meta.getColumnCount();
  while (rs.next()) {
    for (int i=0; i < columnCount; i++) {
      rs.getString(i + 1);
    }
  }
}

public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){
  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;
}

public boolean equals(Object obj){
  if (obj instanceof MSort) {
    MSort ms=(MSort)obj;
    if (data == ms.data)     return true;
  }
  return false;
}

public static void endTransaction(final CConnection connection) throws SQLException {
  endTransaction(connection.getConnection());
}

public CCrossReferencesPanel(){
  super(new BorderLayout());
  m_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  add(new JScrollPane(m_table));
  m_table.addMouseListener(new InternalMouseListener());
}

private void doubleCapacity(){
  int p=head;
  int n=elements.length;
  int r=n - p;
  int newCapacity=n << 1;
  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");
  Object[] a=new Object[newCapacity];
  System.arraycopy(elements,p,a,0,r);
  System.arraycopy(elements,0,a,r,p);
  elements=a;
  head=0;
  tail=n;
}

private void changeOpenAMDebugFolder(String newOpenAMDebugFolder){
  SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMDebugFolder);
}

protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith("http")) {
    if (link.startsWith("/")) {
      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains(":")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith("/")) {
        int sep=path.lastIndexOf("/");
        String file=path.substring(sep + 1);
        if (file.contains(".") || file.contains("?"))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ path+ "/"+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith(".jpg") || l.endsWith(".jpeg") || l.endsWith(".png")|| l.endsWith(".gif")) {
    return null;
  }
  return link;
}

private void loadManifest(){
  if (_isManifestRead)   return;
synchronized (this) {
    if (_isManifestRead)     return;
    try {
      _manifest=_jarPath.getManifest();
      if (_manifest == null)       return;
      Attributes attr=_manifest.getMainAttributes();
      if (attr != null)       addManifestPackage("",attr);
      Map<String,Attributes> entries=_manifest.getEntries();
      for (      Map.Entry<String,Attributes> entry : entries.entrySet()) {
        String pkg=entry.getKey();
        attr=entry.getValue();
        if (attr == null)         continue;
        addManifestPackage(pkg,attr);
      }
    }
 catch (    IOException e) {
      log.log(Level.WARNING,e.toString(),e);
    }
 finally {
      _isManifestRead=true;
    }
  }
}

public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){
  if (originalTypes == null)   return null;
  ReferenceBinding[] convertedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    ReferenceBinding originalType=originalTypes[i];
    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);
    if (convertedType != originalType) {
      if (convertedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);
      }
      convertedTypes[i]=convertedType;
    }
 else     if (convertedTypes != originalTypes) {
      convertedTypes[i]=originalType;
    }
  }
  return convertedTypes;
}

public void addColumn(int idx,Column column){
  if (column != null) {
    columns.add(idx,column);
  }
}

public void readData(DataInput din) throws IOException {
  reference=din.readUnsignedShort();
  andMask=din.readUnsignedShort();
  orMask=din.readUnsignedShort();
}

boolean removeDisplay(Display display){
  return m_displays.remove(display);
}

public double nextGaussian(){
  if (mHaveNextNextGaussian) {
    mHaveNextNextGaussian=false;
    return mNextNextGaussian;
  }
 else {
    double v1, v2, s;
    do {
      v1=2 * nextDouble() - 1;
      v2=2 * nextDouble() - 1;
      s=v1 * v1 + v2 * v2;
    }
 while (s >= 1 || s == 0);
    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);
    mNextNextGaussian=v2 * multiplier;
    mHaveNextNextGaussian=true;
    return v1 * multiplier;
  }
}

private void fireEvent(final IRunningQuery q){
  if (q == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final IRunningQueryListener[] a=listeners.toArray(new IRunningQueryListener[0]);
  for (  IRunningQueryListener l : a) {
    final IRunningQueryListener listener=l;
    try {
      listener.notify(q);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}

private void updateContactHeaderPort(int localPort,SIPMessage message){
  if (message != null && message.getContactHeader() != null) {
    ContactHeader contactHeader=message.getContactHeader();
    Address contactAddress=contactHeader.getAddress();
    contactAddress.setPort(localPort);
  }
}

public static AndroidHttpClient newInstance(String userAgent){
  return newInstance(userAgent,null);
}

@Nullable GridCacheMvccCandidate addEntry(GridLocalCacheEntry entry) throws GridCacheEntryRemovedException {
  GridCacheMvccCandidate c=entry.addLocal(threadId,lockVer,null,null,timeout,!inTx(),inTx(),implicitSingle(),true);
  entries.add(entry);
  if (c == null && timeout < 0) {
    if (log.isDebugEnabled())     log.debug("Failed to acquire lock with negative timeout: " + entry);
    onFailed();
    return null;
  }
  if (c != null) {
    entry.readyLocal(c);
  }
  return c;
}

@Override public void visitVertex(StreetRouter.State state){
  Integer edgeIdx=state.backEdge;
  if (!(edgeIdx == null || edgeIdx == -1)) {
    EdgeStore.Edge edge=edgeStore.getCursor(edgeIdx);
    GeoJsonFeature feature=new GeoJsonFeature(edge.getGeometry());
    feature.addProperty("weight",state.weight);
    feature.addProperty("mode",state.streetMode);
    feature.addProperty("backEdge",state.backEdge);
    features.add(feature);
  }
}

public void test_BSBM_Q1_noSolutions() throws Exception {
  final TestHelper helper=new TestHelper("rto/BSBM-Q1","rto/BSBM-Q1.rq",new String[]{},"rto/BSBM-Q1-noSolutions.srx");
  assertSameJoinOrder(new int[]{2,1,3,4,5},helper);
}

public static void deleteFileOrLog(File file){
  if (!file.delete()) {
    logger.warn(FAILED_DELETING_FILE + file.getPath());
  }
}

public synchronized void remove(int index){
  super.remove(index);
  mMaxValues.remove(index);
}

public GitlabGroupMember addGroupMember(GitlabGroup group,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException {
  return addGroupMember(group.getId(),user.getId(),accessLevel);
}

protected Logger(String name,String resourceBundleName){
  super(name,resourceBundleName);
}

@Override public void increment(double coord,short val){
  int bin=getBinNr(coord);
  if (bin < 0) {
    if (size - bin > data.length) {
      short[] tmpdata=new short[growSize(data.length,size - bin)];
      System.arraycopy(data,0,tmpdata,-bin,size);
      data=tmpdata;
    }
 else {
      System.arraycopy(data,0,data,-bin,size);
      Arrays.fill(data,0,-bin,(short)0);
    }
    data[0]=val;
    assert (data.length >= size - bin);
    offset-=bin;
    size-=bin;
  }
 else   if (bin >= data.length) {
    short[] tmpdata=new short[growSize(data.length,bin + 1)];
    System.arraycopy(data,0,tmpdata,0,size);
    tmpdata[bin]=val;
    data=tmpdata;
    size=bin + 1;
    max=Double.MAX_VALUE;
  }
 else {
    if (bin >= size) {
      size=bin + 1;
    }
    data[bin]+=val;
  }
}

public static void checkArgument(boolean expression,Object errorMessage){
  if (!expression) {
    throw new IllegalArgumentException(String.valueOf(errorMessage));
  }
}

default Document putAll(Map<? extends CharSequence,Object> fields){
  if (fields != null) {
    for (    Map.Entry<? extends CharSequence,Object> entry : fields.entrySet()) {
      set(entry.getKey(),entry.getValue());
    }
  }
  return this;
}

private boolean containsIgnoreCase(List<String> stringlist,String match){
  for (  String s : stringlist) {
    if (s.equalsIgnoreCase(match)) {
      return true;
    }
  }
  return false;
}

public static double computeMAD(double[] x,double median){
  for (int i=0; i < x.length; i++) {
    x[i]=Math.abs(x[i] - median);
  }
  double mad=QuickSelect.median(x);
  if (!(mad > 0.)) {
    double min=Double.POSITIVE_INFINITY;
    for (    double xi : x) {
      if (xi > 0. && xi < min) {
        min=xi;
      }
    }
    if (min < Double.POSITIVE_INFINITY) {
      mad=min;
    }
 else {
      mad=1.0;
    }
  }
  return mad;
}

private static <T>void initializeKnownPlugins(final T pluginInterface,final IPluginRegistry<IPlugin<T>> registry,final List<PluginConfigItem> xmlPluginOrder,final List<Pair<IPlugin<T>,PluginStatus>> validatedPlugins,final List<Pair<IPlugin<T>,Exception>> initializedPlugins,final Set<Long> processedPlugins){
  for (  final PluginConfigItem pt : xmlPluginOrder) {
    processedPlugins.add(pt.getGUID());
    final IPlugin<T> plugin=findPlugin(validatedPlugins,pt.getGUID());
    if (plugin != null) {
      if (pt.isLoad()) {
        initializePlugin(plugin,pluginInterface,registry,initializedPlugins);
      }
 else {
        registry.addDisabledPlugin(plugin,DisabledPluginReason.NotLoaded);
      }
    }
  }
}

public static void sessionStop(){
  if (mProcess == null)   return;
  mProcess.destroy();
  mProcess=null;
}

public static void keepAlive(final boolean keepAlive){
  setProperty("http.keepAlive",Boolean.toString(keepAlive));
}

public static Request newUploadVideoRequest(Session session,File file,Callback callback) throws FileNotFoundException {
  ParcelFileDescriptor descriptor=ParcelFileDescriptor.open(file,ParcelFileDescriptor.MODE_READ_ONLY);
  Bundle parameters=new Bundle(1);
  parameters.putParcelable(file.getName(),descriptor);
  return new Request(session,MY_VIDEOS,parameters,HttpMethod.POST,callback);
}

private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {
  CheckedMessage wrapper=new CheckedMessage();
  MessageNano.mergeFrom(wrapper,buffer,0,dataSize);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  if (wrapper.checksum != checksum.getValue()) {
    throw new InvalidProtocolBufferNanoException("checksum does not match");
  }
  return wrapper.payload;
}

private MulticastSocket createSocket() throws IOException {
  MulticastSocket sock=new MulticastSocket(mcastPort);
  sock.setLoopbackMode(false);
  if (sockItf != null)   sock.setInterface(sockItf);
  if (sock.getLoopbackMode())   U.warn(log,"Loopback mode is disabled which prevents nodes on the same machine from discovering " + "each other.");
  sock.joinGroup(mcastGrp);
  if (ttl != -1)   sock.setTimeToLive(ttl);
  return sock;
}

void copyNodeStructure(ArrayList<Node> destination){
  while (destination.size() < nodes.size())   destination.add(new Node());
  while (destination.size() > nodes.size())   destination.remove(0);
  int n=nodes.size();
  for (int i=0; i < n; i++) {
    Node node0=nodes.get(i);
    Node node1=destination.get(i);
    node1.heightParameter=node0.heightParameter;
    node1.rateParameter=node0.rateParameter;
    node1.traitParameter=node0.traitParameter;
    node1.partitioning=node0.partitioning;
    node1.taxon=node0.taxon;
    node1.bifurcation=node0.bifurcation;
    node1.number=node0.number;
    node1.myHashCode=node0.myHashCode;
    if (node0.leftParent != null) {
      node1.leftParent=storedNodes.get(nodes.indexOf(node0.leftParent));
    }
 else {
      node1.leftParent=null;
    }
    if (node0.rightParent != null) {
      node1.rightParent=storedNodes.get(nodes.indexOf(node0.rightParent));
    }
 else {
      node1.rightParent=null;
    }
    if (node0.leftChild != null) {
      node1.leftChild=storedNodes.get(nodes.indexOf(node0.leftChild));
    }
 else {
      node1.leftChild=null;
    }
    if (node0.rightChild != null) {
      node1.rightChild=storedNodes.get(nodes.indexOf(node0.rightChild));
    }
 else {
      node1.rightChild=null;
    }
  }
}

protected void checkSelectedSubsetMetaData(ExampleSetMetaData subsetMetaData){
}

private void validateWill(String dest,Object payload){
  if ((dest == null) || (payload == null)) {
    throw new IllegalArgumentException();
  }
  MqttTopic.validate(dest,false);
}

public BerInputStream(InputStream in,int initialSize) throws IOException {
  this.in=in;
  buffer=new byte[initialSize];
  next();
  if (length != INDEFINIT_LENGTH) {
    if (buffer.length < (length + offset)) {
      byte[] newBuffer=new byte[length + offset];
      System.arraycopy(buffer,0,newBuffer,0,offset);
      buffer=newBuffer;
    }
  }
 else {
    isIndefinedLength=true;
    throw new ASN1Exception("Decoding indefinite length encoding is not supported");
  }
}

private Member nextMember(Member.Type type){
  return new TestMember(type,new Address("localhost",++port),new Address("localhost",port + 1000));
}

protected void encodeLineSuffix(OutputStream aStream) throws IOException {
  pStream.println();
}

boolean isSystemFont(){
  return systemFont;
}

public void addToBeLoaded(final String url){
  if (toBeLoaded == null) {
    toBeLoaded=new ArrayList<String>();
  }
  if (StringUtils.isNotBlank(url)) {
    toBeLoaded.add(url);
  }
}

default Document putAll(Iterator<Field> fields){
  while (fields.hasNext()) {
    Field field=fields.next();
    setValue(field.getName(),field.getValue());
  }
  return this;
}

public AppraiseGitReviewClient(Repository repo){
  this.repo=repo;
  this.author=new PersonIdent(repo);
}

public RootBlockView(final boolean rootBlock0,final ByteBuffer buf,final ChecksumUtility checker) throws RootBlockException {
  if (buf == null)   throw new IllegalArgumentException();
  if (buf.remaining() != SIZEOF_ROOT_BLOCK) {
    throw new IllegalArgumentException("Expecting " + SIZEOF_ROOT_BLOCK + " remaining, actual="+ buf.remaining());
  }
  this.buf=buf.asReadOnlyBuffer();
  this.rootBlock0=rootBlock0;
switch (getStoreType()) {
case RW:
{
      am=new RWAddressManager(null);
      break;
    }
case WORM:
{
    final int offsetBits=getOffsetBits();
    am=new WormAddressManager(offsetBits);
    break;
  }
default :
throw new RootBlockException("Unknown storeType=" + getStoreType());
}
if (checker == null) {
log.warn("Checksum will not be validated");
}
this.checker=checker;
valid();
}

protected SOAPRequest createSOAPRequest(final String methodName,final SOAPMethodRequestWriter requestWriter){
  final PostMethod method=new PostMethod(endpoint.toString());
  method.setContentChunked(false);
  setRequestHeaders(method,methodName);
  final SOAPRequestEntity requestEntity=buildRequestEntity(methodName,requestWriter);
  requestEntity.setSOAPHeaderProvider(soapHeaderProvider);
  final BufferedSOAPRequestEntity bufferedEntity=new BufferedSOAPRequestEntity(requestEntity);
  method.setRequestEntity(bufferedEntity);
  return new SOAPRequest(method,requestEntity);
}

@SuppressWarnings("unchecked") @Test public void innerEnum(){
  Class<?> pc=PlayingCard.class;
  List<Enum<?>> include=new ArrayList<>();
  List<Enum<?>> exclude=new ArrayList<>();
  for (  Class<?> c : pc.getDeclaredClasses()) {
    int mods=c.getModifiers();
    if (c.isEnum()) {
      if (Modifier.isPublic(mods)) {
        include.addAll(asList(c.getEnumConstants()));
      }
 else {
        exclude.addAll(asList(c.getEnumConstants()));
      }
    }
  }
  Set<TypedOperation> actual=getConcreteOperations(pc);
  assertEquals("number of statements",include.size() + 5,actual.size());
  for (  Enum<?> e : include) {
    assertTrue("enum constant " + e.name() + " should occur",actual.contains(createEnumOperation(e)));
  }
  for (  Enum<?> e : exclude) {
    assertFalse("enum constant " + e.name() + " should not occur",actual.contains(createEnumOperation(e)));
  }
}

public String toURI(){
  CharArrayBuffer buffer=new CharArrayBuffer(32);
  buffer.append(this.schemeName);
  buffer.append("://");
  buffer.append(this.hostname);
  if (this.port != -1) {
    buffer.append(':');
    buffer.append(Integer.toString(this.port));
  }
  return buffer.toString();
}

public void testWildcardsDoesNotNeedTwoDots() throws Exception {
  String cert="-----BEGIN CERTIFICATE-----\n" + "MIIBjDCCATagAwIBAgIJAOVulXCSu6HuMA0GCSqGSIb3DQEBBQUAMBAxDjAMBgNV\n" + "BAMUBSouY29tMCAXDTEwMTIyMDE2NDkzOFoYDzIxMTAxMTI2MTY0OTM4WjAQMQ4w\n"+ "DAYDVQQDFAUqLmNvbTBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQDJd8xqni+h7Iaz\n"+ "ypItivs9kPuiJUqVz+SuJ1C05SFc3PmlRCvwSIfhyD67fHcbMdl+A/LrIjhhKZJe\n"+ "1joO0+pFAgMBAAGjcTBvMB0GA1UdDgQWBBS4Iuzf5w8JdCp+EtBfdFNudf6+YzBA\n"+ "BgNVHSMEOTA3gBS4Iuzf5w8JdCp+EtBfdFNudf6+Y6EUpBIwEDEOMAwGA1UEAxQF\n"+ "Ki5jb22CCQDlbpVwkruh7jAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EA\n"+ "U6LFxmZr31lFyis2/T68PpjAppc0DpNQuA2m/Y7oTHBDi55Fw6HVHCw3lucuWZ5d\n"+ "qUYo4ES548JdpQtcLrW2sA==\n"+ "-----END CERTIFICATE-----";
  CertificateFactory cf=CertificateFactory.getInstance("X.509");
  InputStream in=new ByteArrayInputStream(cert.getBytes("UTF-8"));
  X509Certificate x509=(X509Certificate)cf.generateCertificate(in);
  mySSLSession session=new mySSLSession(new X509Certificate[]{x509});
  HostnameVerifier verifier=HttpsURLConnection.getDefaultHostnameVerifier();
  assertTrue(verifier.verify("google.com",session));
}

public static boolean inTargetDir(File file){
  return inTargetDir(file.toPath());
}

public final boolean skipAny(char c,CharSequence csq){
  int i=index;
  int n=csq.length();
  for (; (i < n) && (csq.charAt(i) == c); i++) {
  }
  if (i == index)   return false;
  index=i;
  return true;
}

private void generateUniformIntegerExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){
  Instance example=null;
  int numAtts=m_NumAttributes;
  if (getClassFlag()) {
    numAtts++;
  }
  example=new DenseInstance(numAtts);
  example.setDataset(format);
  boolean[] attributes=cl.getAttributes();
  double[] minValue=cl.getMinValue();
  double[] maxValue=cl.getMaxValue();
  int[] minInt=new int[minValue.length];
  int[] maxInt=new int[maxValue.length];
  int[] intValue=new int[maxValue.length];
  int[] numInt=new int[minValue.length];
  int num=1;
  for (int i=0; i < minValue.length; i++) {
    minInt[i]=(int)Math.ceil(minValue[i]);
    maxInt[i]=(int)Math.floor(maxValue[i]);
    numInt[i]=(maxInt[i] - minInt[i] + 1);
    num=num * numInt[i];
  }
  int numEach=numInstances / num;
  int rest=numInstances - numEach * num;
  for (int i=0; i < m_NumAttributes; i++) {
    if (attributes[i]) {
      example.setValue(i,minInt[i]);
      intValue[i]=minInt[i];
    }
 else {
      example.setMissing(i);
    }
  }
  if (getClassFlag()) {
    example.setClassValue(cName);
  }
  int added=0;
  int attr=0;
  do {
    for (int k=0; k < numEach; k++) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
    }
    if (rest > 0) {
      format.add(example);
      example=(Instance)example.copy();
      added++;
      rest--;
    }
    if (added >= numInstances) {
      break;
    }
    boolean done=false;
    do {
      if (attributes[attr] && (intValue[attr] + 1 <= maxInt[attr])) {
        intValue[attr]++;
        done=true;
      }
 else {
        attr++;
      }
    }
 while (!done);
    example.setValue(attr,intValue[attr]);
  }
 while (added < numInstances);
}

public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}

private final boolean compareAndSetTail(Node expect,Node update){
  return unsafe.compareAndSwapObject(this,tailOffset,expect,update);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public Phone createPhone(String value){
  PhoneField phoneImpl=new PhoneField();
  try {
    phoneImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return phoneImpl;
}

private ListResourceBundle loadResourceBundle(String resourceBundle) throws MissingResourceException {
  m_resourceBundleName=resourceBundle;
  Locale locale=getLocale();
  ListResourceBundle lrb;
  try {
    ResourceBundle rb=ResourceBundle.getBundle(m_resourceBundleName,locale);
    lrb=(ListResourceBundle)rb;
  }
 catch (  MissingResourceException e) {
    try {
      lrb=(ListResourceBundle)ResourceBundle.getBundle(m_resourceBundleName,new Locale("en","US"));
    }
 catch (    MissingResourceException e2) {
      throw new MissingResourceException("Could not load any resource bundles." + m_resourceBundleName,m_resourceBundleName,"");
    }
  }
  m_resourceBundle=lrb;
  return lrb;
}

private Set<String> returnRemotePoolsAssociatedWithRemoteCopySettings(Map<String,List<String>> remoteCopySettings,Set<String> poolUris){
  Set<String> remotePoolUris=new HashSet<String>();
  for (  Entry<String,List<String>> entry : remoteCopySettings.entrySet()) {
    VirtualPool vPool=_objectCache.queryObject(VirtualPool.class,URI.create(entry.getKey()));
    if (null == vPool) {
      remotePoolUris.addAll(poolUris);
    }
 else     if (null != vPool.getUseMatchedPools() && vPool.getUseMatchedPools()) {
      if (null != vPool.getMatchedStoragePools()) {
        remotePoolUris.addAll(vPool.getMatchedStoragePools());
      }
    }
 else     if (null != vPool.getAssignedStoragePools()) {
      remotePoolUris.addAll(vPool.getAssignedStoragePools());
    }
  }
  return remotePoolUris;
}

private String convertToHtml(final String string){
  return "<pre><br/>" + string.replaceAll("\n","<br/>") + "<br/></pre>";
}

private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {
  long lockEnd=lock.position() + lock.size();
  for (  FileLock existingLock : locks) {
    if (existingLock.position() > lockEnd) {
      break;
    }
    if (existingLock.overlaps(lock.position(),lock.size())) {
      throw new OverlappingFileLockException();
    }
  }
  locks.add(lock);
}

public static void UF7(double[] x,double[] f,int nx){
  int count1=0;
  int count2=0;
  double sum1=0.0;
  double sum2=0.0;
  double yj;
  for (int j=2; j <= nx; j++) {
    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);
    if (j % 2 == 0) {
      sum2+=yj * yj;
      count2++;
    }
 else {
      sum1+=yj * yj;
      count1++;
    }
  }
  yj=Math.pow(x[0],0.2);
  f[0]=yj + 2.0 * sum1 / (double)count1;
  f[1]=1.0 - yj + 2.0 * sum2 / (double)count2;
}

private void reloadModelWithNewValue(final Long newValue){
  final long newValueAsPrimitive=newValue == null ? getModelUpdatePeriod() : newValue;
  for (  final PropertyChangeListener listener : modelUpdatePeriodListeners) {
    final PropertyChangeEvent event=new PropertyChangeEvent(this,"model",getModelUpdatePeriod(),newValueAsPrimitive);
    listener.propertyChange(event);
  }
}

public static final String moveToUCIString(Move m){
  String ret=squareToString(m.from);
  ret+=squareToString(m.to);
switch (m.promoteTo) {
case Piece.WQUEEN:
case Piece.BQUEEN:
    ret+="q";
  break;
case Piece.WROOK:
case Piece.BROOK:
ret+="r";
break;
case Piece.WBISHOP:
case Piece.BBISHOP:
ret+="b";
break;
case Piece.WKNIGHT:
case Piece.BKNIGHT:
ret+="n";
break;
default :
break;
}
return ret;
}

public Image createAcceleratedImage(Component target,int width,int height){
  ColorModel model=getColorModel(Transparency.OPAQUE);
  WritableRaster wr=model.createCompatibleWritableRaster(width,height);
  return new OffScreenImage(target,model,wr,model.isAlphaPremultiplied());
}

public void displayState(){
  PrintWriter xout=context.get(Log.outKey);
  xout.println("File Object History : " + fileObjectHistory);
  xout.println("Open Type Names     : " + openTypeNames);
  xout.println("Gen. Src Names      : " + generatedSourceNames);
  xout.println("Gen. Cls Names      : " + generatedClasses.keySet());
  xout.println("Agg. Gen. Src Names : " + aggregateGeneratedSourceNames);
  xout.println("Agg. Gen. Cls Names : " + aggregateGeneratedClassNames);
}

public static void writeStringToWriter(String string,Writer writer) throws IOException {
  BufferedWriter bw=new BufferedWriter(writer);
  try {
    bw.write(string);
  }
  finally {
    bw.close();
  }
}

private void ensureCapacity(int n){
  if (n <= 0) {
    return;
  }
  int max;
  if (data == null || data.length == 0) {
    max=25;
  }
 else   if (data.length >= n * 5) {
    return;
  }
 else {
    max=data.length;
  }
  while (max < n * 5) {
    max*=2;
  }
  String newData[]=new String[max];
  if (length > 0) {
    System.arraycopy(data,0,newData,0,length * 5);
  }
  data=newData;
}

public final void decRef() throws IOException {
  ensureOpen();
  final int rc=refCount.decrementAndGet();
  if (rc == 0) {
    boolean success=false;
    try {
      doClose();
      closed=true;
      success=true;
    }
  finally {
      if (!success) {
        refCount.incrementAndGet();
      }
    }
  }
 else   if (rc < 0) {
    throw new IllegalStateException("too many decRef calls: refCount is " + rc + " after decrement");
  }
}

public static X500Name x500PrincipalToX500Name(X500Principal principal){
  return X500Name.getInstance(KseX500NameStyle.INSTANCE,principal.getEncoded());
}

private void assertDescribedResource(final BigdataValue describedResource,final IDescribeCache describeCache,final TestHelper h){
  final Graph actualGraph=describeCache.lookup(describedResource.getIV());
  assertNotNull(actualGraph);
  final Set<Statement> expectedGraph=getExpectedDescription(describedResource,h);
  h.compareGraphs(new HashSet<Statement>(actualGraph),expectedGraph);
  for (  Statement stmt : actualGraph) {
    assertTrue(stmt instanceof BigdataStatement);
    final BigdataStatement st=(BigdataStatement)stmt;
    assertNotNull(st.s());
    assertNotNull(st.p());
    assertNotNull(st.o());
    if (st.getContext() != null) {
      assertNotNull(st.c());
    }
  }
}

public boolean isFlat(){
  return TYPE_FLAT.equals(getType());
}

@Deprecated private List<CharSequence> buildLimitedNetworksList(){
  final Context context=getActivity();
  final ArrayList<CharSequence> limited=Lists.newArrayList();
  if (hasSubscription(context)) {
    final String subscriberId=getActiveSubscriberId(context);
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {
      limited.add(getText(R.string.data_usage_list_mobile));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_3g));
    }
    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {
      limited.add(getText(R.string.data_usage_tab_4g));
    }
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {
    limited.add(getText(R.string.data_usage_tab_wifi));
  }
  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {
    limited.add(getText(R.string.data_usage_tab_ethernet));
  }
  return limited;
}

public int evalRPN(String[] tokens){
  if (tokens == null || tokens.length == 0)   return 0;
  Stack<String> s=new Stack<String>();
  int len=tokens.length;
  for (int i=0; i < len; i++) {
    String cur=tokens[i];
    if (isOperator(cur)) {
      int t2=Integer.parseInt(s.pop());
      int t1=Integer.parseInt(s.pop());
      int res=calculate(t1,t2,cur);
      s.push(Integer.toString(res));
    }
 else     s.push(cur);
  }
  return Integer.valueOf(s.peek());
}

public synchronized void addAllSeries(List<XYSeries> series){
  mSeries.addAll(series);
}

private static void exit(String errMsg,Options options,int exitCode){
  if (errMsg != null)   echo("ERROR: " + errMsg);
  String runner=System.getProperty(IGNITE_PROG_NAME,"randignite.{sh|bat}");
  int space=runner.indexOf(' ');
  runner=runner.substring(0,space == -1 ? runner.length() : space);
  if (options != null) {
    HelpFormatter formatter=new HelpFormatter();
    formatter.printHelp(runner,options);
  }
  System.exit(exitCode);
}

@Override public int compare(NewSplitEmittedTerm term1,NewSplitEmittedTerm term2){
  return term1.compareTo(term2);
}

public AABB merge(AABB other){
  minX=Math.min(minX,other.minX);
  maxX=Math.max(maxX,other.maxX);
  minY=Math.min(minY,other.minY);
  maxY=Math.max(maxY,other.maxY);
  minZ=Math.min(minZ,other.minZ);
  maxZ=Math.max(maxZ,other.maxZ);
  return this;
}

public static String generateAutoTag(int stackOffset){
  StackTraceElement[] currentStack=getCurrentStack();
  StackTraceElement element=currentStack[stackOffset];
  String className=element.getClassName();
  String pkgPath[]=className.split("\\.");
  if (pkgPath.length > 0) {
    className=pkgPath[pkgPath.length - 1];
  }
  StringBuilder sbInnerClass=new StringBuilder();
  int index;
  String strLoop=className;
  while ((index=strLoop.lastIndexOf("$")) != -1) {
    String piece=strLoop.substring(index + 1);
    sbInnerClass.insert(0,piece);
    if (!piece.matches("[0-9$]+")) {
      break;
    }
    sbInnerClass.insert(0,"$");
    strLoop=strLoop.substring(0,index);
  }
  if (sbInnerClass.length() > 0 && sbInnerClass.charAt(0) == '$') {
    sbInnerClass.deleteCharAt(0);
  }
  String innerClassName=sbInnerClass.toString();
  if (TextUtils.isDigitsOnly(innerClassName)) {
    innerClassName=null;
  }
  return TextUtils.isEmpty(innerClassName) ? className : innerClassName;
}

public void flushPending() throws SAXException {
  if (m_needToCallStartDocument) {
    startDocumentInternal();
    m_needToCallStartDocument=false;
  }
  if (m_elemContext.m_startTagOpen) {
    closeStartTag();
    m_elemContext.m_startTagOpen=false;
  }
  if (m_cdataTagOpen) {
    closeCDATA();
    m_cdataTagOpen=false;
  }
  if (m_writer != null) {
    try {
      m_writer.flush();
    }
 catch (    IOException e) {
    }
  }
}

private void handleSubscribe(String[] args){
switch (args[1]) {
case "rr":
    TestSubscriber<Payload> rrsub=new TestSubscriber<>(0L);
  payloadSubscribers.put(args[2],rrsub);
idToType.put(args[2],args[1]);
ReactiveSocket rrclient=createClient.get();
Publisher<Payload> rrpub=rrclient.requestResponse(new PayloadImpl(args[3],args[4]));
rrpub.subscribe(rrsub);
break;
case "rs":
TestSubscriber<Payload> rssub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rssub);
idToType.put(args[2],args[1]);
ReactiveSocket rsclient=createClient.get();
Publisher<Payload> rspub=rsclient.requestStream(new PayloadImpl(args[3],args[4]));
rspub.subscribe(rssub);
break;
case "sub":
TestSubscriber<Payload> rsubsub=new TestSubscriber<>(0L);
payloadSubscribers.put(args[2],rsubsub);
idToType.put(args[2],args[1]);
ReactiveSocket rsubclient=createClient.get();
Publisher<Payload> rsubpub=rsubclient.requestSubscription(new PayloadImpl(args[3],args[4]));
rsubpub.subscribe(rsubsub);
break;
case "fnf":
TestSubscriber<Void> fnfsub=new TestSubscriber<>(0L);
fnfSubscribers.put(args[2],fnfsub);
idToType.put(args[2],args[1]);
ReactiveSocket fnfclient=createClient.get();
Publisher<Void> fnfpub=fnfclient.fireAndForget(new PayloadImpl(args[3],args[4]));
fnfpub.subscribe(fnfsub);
break;
default :
break;
}
}

@PostConstruct public void init(){
  configurationViews.add(defaultDistributionSetTypeLayout);
  configurationViews.add(authenticationConfigurationView);
  configurationViews.add(pollingConfigurationView);
}

public ExtendedType(int nodetype,String namespace,String localName){
  this.nodetype=nodetype;
  this.namespace=namespace;
  this.localName=localName;
  this.hash=nodetype + namespace.hashCode() + localName.hashCode();
}

private static void validateNewAddition(Vector paths,ExpressionOwner owner,LocPathIterator path) throws RuntimeException {
  assertion(owner.getExpression() == path,"owner.getExpression() != path!!!");
  int n=paths.size();
  for (int i=0; i < n; i++) {
    ExpressionOwner ew=(ExpressionOwner)paths.elementAt(i);
    assertion(ew != owner,"duplicate owner on the list!!!");
    assertion(ew.getExpression() != path,"duplicate expression on the list!!!");
  }
}

@Override public void start(){
  for (int i=0; i < threadCount; ++i) {
    Set<SystemStreamPartition> threadSsps=new HashSet<SystemStreamPartition>();
    for (    SystemStreamPartition ssp : ssps) {
      if (Math.abs(ssp.hashCode()) % threadCount == i) {
        threadSsps.add(ssp);
      }
    }
    Thread thread=new Thread(new MockSystemConsumerRunnable(threadSsps),"MockSystemConsumer-" + i);
    thread.setDaemon(true);
    threads.add(thread);
    thread.start();
  }
}

private List<double[]> initializeWeightsND(){
  int N=50;
  List<double[]> candidates=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfPoints * N; i++) {
    double[] weight=new double[numberOfObjectives];
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]=PRNG.nextDouble();
    }
    double sum=StatUtils.sum(weight);
    for (int j=0; j < numberOfObjectives; j++) {
      weight[j]/=sum;
    }
    candidates.add(weight);
  }
  List<double[]> weights=new ArrayList<double[]>(numberOfPoints * N);
  for (int i=0; i < numberOfObjectives; i++) {
    double[] weight=new double[numberOfObjectives];
    weight[i]=1.0;
    weights.add(weight);
  }
  while (weights.size() < numberOfPoints) {
    double[] weight=null;
    double distance=Double.NEGATIVE_INFINITY;
    for (int i=0; i < candidates.size(); i++) {
      double d=Double.POSITIVE_INFINITY;
      for (int j=0; j < weights.size(); j++) {
        d=Math.min(d,MathArrays.distance(candidates.get(i),weights.get(j)));
      }
      if (d > distance) {
        weight=candidates.get(i);
        distance=d;
      }
    }
    weights.add(weight);
    candidates.remove(weight);
  }
  return weights;
}

public void undo(){
  try {
    if (undoManager != null)     undoManager.undoOrRedo();
  }
 catch (  CannotUndoException ignored) {
  }
catch (  CannotRedoException ignored) {
  }
}

public void removeColumn(Column column){
  if (column != null) {
    columns.remove(column);
  }
}

public String info(){
  StringBuilder sb=new StringBuilder("Report: size: " + tableSize + ", elements: "+ elements+ ", loadFactor: "+ loadFactor+ ", threshold: "+ threshold);
  sb.append(", empty bins:" + numEmpty);
  int size=0;
  int min=elements;
  int max=-1;
  for (int i=0; i < tableSize; i++) {
    LinkedList<String> list=bins[i];
    if (list != null) {
      int sz=list.size();
      size+=sz;
      if (sz < min) {
        min=sz;
      }
      if (sz > max) {
        max=sz;
      }
    }
  }
  float avg=size;
  int base=(tableSize - numEmpty);
  if (base == 0) {
    sb.append(", average:0");
    sb.append(", minListSize:0");
    sb.append(", maxListSize:0");
  }
 else {
    avg/=base;
    sb.append(", average:" + avg);
    sb.append(", minListSize:" + min);
    sb.append(", maxListSize:" + max);
  }
  return sb.toString();
}

public boolean peekSample(MediaCodec.BufferInfo out_bufferInfo){
  update();
  boolean result=false;
  if (!mAvailableOutputBuffers.isEmpty()) {
    int index=mAvailableOutputBuffers.peek();
    MediaCodec.BufferInfo info=mOutputBufferInfo[index];
    out_bufferInfo.set(info.offset,info.size,info.presentationTimeUs,info.flags);
    result=true;
  }
  return result;
}

@Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {
  try {
    fillScannedResult(blocksChunkHolder);
  }
 catch (  FilterUnsupportedException e) {
    throw new QueryExecutionException(e.getMessage());
  }
  return scannedResult;
}

@Override public int hashCode(){
  return subconditions.hashCode() - operator.hashCode();
}

public void balanceSegments(){
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced())     balanceSegment(ase.getElementType());
  }
}

public AnnotationDrawer(final AnnotationsModel model,final ProcessRendererModel rendererModel){
  this.model=model;
  this.rendererModel=rendererModel;
  this.displayCache=new HashMap<>();
  this.cachedID=new HashMap<>();
  pane=new JEditorPane("text/html","");
  pane.setBorder(null);
  pane.setOpaque(false);
}

public boolean hasUserPartitions(){
  return !userOutput.isEmpty();
}

@Override public void insertString(final int offs,final String str,final AttributeSet attr){
  if (offs < 0) {
    return;
  }
  if (str.length() > 1) {
    int i;
    for (i=0; i < str.length(); i++) {
      if (str.charAt(i) == '\n') {
        remainingTextString=str.substring(i + 1);
        remainingTextAttr=attr;
        inputKeyListener.keyPressed(new KeyEvent(new Container(),KeyEvent.KEY_PRESSED,0,0,KeyEvent.VK_ENTER,'\n'));
        break;
      }
 else {
        insertChar(offs + i,"" + str.charAt(i));
      }
    }
  }
 else   if (str.length() == 1) {
    insertChar(offs,str);
  }
}

protected int readCodePoint() throws IOException {
  int next=reader.read();
  if (Character.isHighSurrogate((char)next)) {
    next=Character.toCodePoint((char)next,(char)reader.read());
  }
  return next;
}

public static int putInt(byte[] bytes,int offset,int val){
  if (littleEndian) {
    val=Integer.reverseBytes(val);
  }
  theUnsafe.putInt(bytes,offset + BYTE_ARRAY_BASE_OFFSET,val);
  return offset + Bytes.SIZEOF_INT;
}

public Item(Drawable symbol,String labelText,Font font){
  double fontSize=font.getSize2D();
  setLayout(new EdgeLayout(fontSize,0.0));
  this.symbol=symbol;
  add(symbol,Location.WEST);
  label=new Label(labelText);
  label.setFont(font);
  label.setAlignmentX(0.0);
  label.setAlignmentY(0.5);
  add(label,Location.CENTER);
}

void tag(String tag);

public int consume(){
  int consumedAmount;
  if (Math.abs(left) < Math.abs(getRegen())) {
    consumedAmount=left;
    left=0;
  }
 else {
    consumedAmount=getRegen();
    left-=getRegen();
  }
  return consumedAmount;
}

private Delegate delegate() throws HadoopIgfsCommunicationException {
  Exception errShmem=null;
  Exception errTcp=null;
  Delegate curDelegate=delegateRef.get();
  if (curDelegate != null)   return curDelegate;
  boolean skipInProc=parameter(conf,PARAM_IGFS_ENDPOINT_NO_EMBED,authority,false);
  if (!skipInProc) {
    IgfsEx igfs=getIgfsEx(endpoint.grid(),endpoint.igfs());
    if (igfs != null) {
      HadoopIgfsEx hadoop=null;
      try {
        hadoop=new HadoopIgfsInProc(igfs,log,userName);
        curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));
      }
 catch (      IOException|IgniteCheckedException e) {
        if (e instanceof HadoopIgfsCommunicationException)         if (hadoop != null)         hadoop.close(true);
        if (log.isDebugEnabled())         log.debug("Failed to connect to in-process IGFS, fallback to IPC mode.",e);
      }
    }
  }
  boolean skipLocShmem=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM,authority,false);
  if (curDelegate == null && !skipLocShmem && !U.isWindows()) {
    HadoopIgfsEx hadoop=null;
    try {
      hadoop=new HadoopIgfsOutProc(endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);
      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));
    }
 catch (    IOException|IgniteCheckedException e) {
      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);
      if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using shared memory [port=" + endpoint.port() + ']',e);
      errShmem=e;
    }
  }
  boolean skipLocTcp=parameter(conf,PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP,authority,false);
  if (curDelegate == null && !skipLocTcp) {
    HadoopIgfsEx hadoop=null;
    try {
      hadoop=new HadoopIgfsOutProc(LOCALHOST,endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);
      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));
    }
 catch (    IOException|IgniteCheckedException e) {
      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);
      if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using TCP [host=" + endpoint.host() + ", port="+ endpoint.port()+ ']',e);
      errTcp=e;
    }
  }
  if (curDelegate == null && (skipLocTcp || !F.eq(LOCALHOST,endpoint.host()))) {
    HadoopIgfsEx hadoop=null;
    try {
      hadoop=new HadoopIgfsOutProc(endpoint.host(),endpoint.port(),endpoint.grid(),endpoint.igfs(),log,userName);
      curDelegate=new Delegate(hadoop,hadoop.handshake(logDir));
    }
 catch (    IOException|IgniteCheckedException e) {
      if (e instanceof HadoopIgfsCommunicationException)       hadoop.close(true);
      if (log.isDebugEnabled())       log.debug("Failed to connect to IGFS using TCP [host=" + endpoint.host() + ", port="+ endpoint.port()+ ']',e);
      errTcp=e;
    }
  }
  if (curDelegate != null) {
    if (!delegateRef.compareAndSet(null,curDelegate))     curDelegate.doomed=true;
    return curDelegate;
  }
 else {
    SB errMsg=new SB("Failed to connect to IGFS [endpoint=igfs://" + authority + ", attempts=[");
    if (errShmem != null)     errMsg.a("[type=SHMEM, port=" + endpoint.port() + ", err="+ errShmem+ "], ");
    errMsg.a("[type=TCP, host=" + endpoint.host() + ", port="+ endpoint.port()+ ", err="+ errTcp+ "]] ");
    errMsg.a("(ensure that IGFS is running and have IPC endpoint enabled; ensure that " + "ignite-shmem-1.0.0.jar is in Hadoop classpath if you use shared memory endpoint).");
    throw new HadoopIgfsCommunicationException(errMsg.toString());
  }
}

public FromClause add(OuterJoinQualifier outerJoinQualifier){
  outerJoinQualifiers.add(outerJoinQualifier);
  return this;
}

private static final File[] encode(String src){
  if (src == null || src.length() == 0) {
    return (new File[0]);
  }
  StringTokenizer tokenizer=new StringTokenizer(src,";");
  File[] dirs=new File[tokenizer.countTokens()];
  for (int i=0; i < dirs.length; i++) {
    dirs[i]=new File(tokenizer.nextToken());
  }
  return dirs;
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

public E poll(long timeout,TimeUnit unit) throws InterruptedException {
  long nanos=unit.toNanos(timeout);
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null) {
        if (nanos <= 0)         return null;
 else         nanos=available.awaitNanos(nanos);
      }
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
        if (nanos <= 0)         return null;
        if (nanos < delay || leader != null)         nanos=available.awaitNanos(nanos);
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            long timeLeft=available.awaitNanos(delay);
            nanos-=delay - timeLeft;
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}

public void addSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<SwipeListener>();
  }
  mListeners.add(listener);
}

public int size(){
  return patterns.size();
}

private SublimeBaseMenuItem addInternal(int pivotID,Positioned positioned,SublimeBaseMenuItem newItem){
  int newItemGroupId=newItem.getGroupId();
  checkExistenceOfGroup(newItemGroupId);
  int pivotIndex=findItemIndex(pivotID);
  SublimeBaseMenuItem pivot=mItems.get(pivotIndex);
  if (newItem.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
    checkIfGroupHeaderAlreadyExistsForGroup(newItemGroupId);
    int index=findGroupIndex(newItemGroupId);
    if (index >= 0) {
      mItems.add(index,newItem);
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivot.getItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(newItemGroupId)) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
 else {
    if (newItemGroupId != NO_GROUP_ID) {
      int lastGroupIndex=findLastGroupIndex(newItemGroupId);
      if (lastGroupIndex == mItems.size()) {
        if (positioned == Positioned.BEFORE) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
 else         if (positioned == Positioned.AFTER) {
          if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
            mItems.add(pivotIndex + 1,newItem);
          }
 else {
            mItems.add(newItem);
          }
        }
      }
 else {
        if (newItemGroupId == pivot.getGroupId()) {
          if (positioned == Positioned.BEFORE) {
            if (pivot.getItemType() != SublimeBaseMenuItem.ItemType.GROUP_HEADER) {
              mItems.add(pivotIndex,newItem);
            }
 else {
              mItems.add(lastGroupIndex + 1,newItem);
            }
          }
 else           if (positioned == Positioned.AFTER) {
            mItems.add(pivotIndex + 1,newItem);
          }
        }
 else {
          mItems.add(lastGroupIndex + 1,newItem);
        }
      }
    }
 else {
      if (positioned == Positioned.BEFORE) {
        if (pivot.getGroupId() == NO_GROUP_ID || findGroupIndex(pivot.getGroupId()) == pivotIndex) {
          mItems.add(pivotIndex,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
 else       if (positioned == Positioned.AFTER) {
        if (pivot.getGroupId() == NO_GROUP_ID || pivotIndex == findLastGroupIndex(pivot.getGroupId())) {
          mItems.add(pivotIndex + 1,newItem);
        }
 else {
          mItems.add(newItem);
        }
      }
    }
  }
  onItemsChanged();
  return newItem;
}

public static void writeUint8(OutputStream theOs,int theValue) throws IOException {
  theOs.write(theValue);
}

private E unlinkFirst(){
  Node<E> f=first;
  if (f == null)   return null;
  Node<E> n=f.next;
  E item=f.item;
  f.item=null;
  f.next=f;
  first=n;
  if (n == null)   last=null;
 else   n.prev=null;
  --count;
  notFull.signal();
  return item;
}

public void testCase11(){
  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

@Override public void addHeader(final String header,final String value){
  mHeadersOptions.add(new HeaderOption(header,value));
}

public void store() throws SAMLException {
  try {
    keyProvider.store();
  }
 catch (  KeyStoreException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  CertificateException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  NoSuchAlgorithmException e) {
    throw new SAMLException(e.getMessage());
  }
catch (  IOException e) {
    throw new SAMLException(e.getMessage());
  }
}

static void appendToPointerHierarchy(final BaseType type,final BaseType pointer){
  Preconditions.checkNotNull(type,"Error: type argument can not be null.");
  Preconditions.checkNotNull(pointer,"Error: pointer argument can not be null.");
  Preconditions.checkArgument(type != pointer,"Error: Can not establish pointer relation between identical types.");
  Preconditions.checkArgument(pointer.pointedToBy != type,"Error: Can not establish circular pointer relation.");
  Preconditions.checkArgument(type.pointsTo != pointer,"Error: Can not establish circular pointer relation.");
  pointer.pointsTo=type;
  type.pointedToBy=pointer;
}

public static void sort(long[] a){
  doSort(a,0,a.length - 1);
}

public String toString(){
  return "Value: " + String.format("%5.2f%%",ValueSimilarity * 100.0) + " Containment: "+ String.format("%5.2f%%",ContainmentSimilarity * 100.0)+ " Size: "+ String.format("%5.2f%%",SizeSimilarity * 100.0);
}

public Optional<T> last(){
  Iterator<T> iterator=iterator();
  T value=null;
  while (iterator.hasNext())   value=iterator.next();
  return Optional.of(value);
}

public static void threadSleep(long millis){
  try {
    Thread.sleep(millis);
  }
 catch (  InterruptedException ex) {
    Log.e("Exception",StringUtils.exceptionStackTraceToString(ex));
  }
}

public int indexOf(Node elem,int index){
  runTo(-1);
  if (null == m_map)   return -1;
  for (int i=index; i < m_firstFree; i++) {
    Node node=m_map[i];
    if ((null != node) && node.equals(elem))     return i;
  }
  return -1;
}

static boolean isPackageAccess(final int modifiers){
  return (modifiers & ACCESS_TEST) == 0;
}

public void write(final String filename){
  PrintStream stream;
  try {
    stream=new PrintStream(new File(filename));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  write(stream);
  stream.close();
}

ManagedWindowDecorator(Window window,String windowId){
  this.window=window;
  name="system." + windowId;
}

@Override public void write(byte[] b,int off,int len) throws IOException {
  while (len > 0) {
    int c=Math.min(len,decoderIn.remaining());
    decoderIn.put(b,off,c);
    processInput(false);
    len-=c;
    off+=c;
  }
  if (writeImmediately) {
    flushOutput();
  }
}

public static void log(String message,Object... args){
  if (loggingEnabled) {
    Log.d(TAG,args.length == 0 ? message : String.format(message,args));
  }
}

protected void processUpdates(Queue<DeviceUpdate> updates){
  if (updates == null)   return;
  DeviceUpdate update=null;
  while (null != (update=updates.poll())) {
    if (logger.isTraceEnabled()) {
      logger.trace("Dispatching device update: {}",update);
    }
    if (update.change == DeviceUpdate.Change.DELETE) {
      deviceSyncManager.removeDevice(update.device);
    }
 else {
      deviceSyncManager.storeDevice(update.device);
    }
    List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
    notifyListeners(listeners,update);
  }
}

boolean handleRemoteCanRebalance(long size){
  return false;
}

public static File toSLDFile(final File file){
  final String path=file.getAbsolutePath();
  final String base=path.substring(0,path.length() - 4);
  String newPath=base + ".sld";
  File sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  newPath=base + ".SLD";
  sld=new File(newPath);
  if (sld.exists()) {
    return sld;
  }
  return null;
}

private String insertProperties(String template,Map<String,String> properties){
  for (  Entry<String,String> entry : properties.entrySet()) {
    template=template.replace(entry.getKey(),entry.getValue());
  }
  return template;
}

public static void changeFont(JComponent comp,int style){
  Font font=comp.getFont();
  comp.setFont(font.deriveFont(style));
}

public void drawContours(Mat img,Color color){
  Drawing.drawContours(img,contours,color);
}

public static void saveX509Cert(String certStr,File certFile) throws IOException {
  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));
  writer.write(BEGIN_CERT);
  writer.newLine();
  writer.write(certStr);
  writer.newLine();
  writer.write(END_CERT);
  writer.newLine();
  writer.close();
}

public void clearOnCentralPositionChangedListener(){
  mOnCentralPositionChangedListeners.clear();
}

public static Object invokeStatic(Class clazz,String methodName) throws NoSuchMethodException {
  try {
    Method method=clazz.getMethod(methodName,new Class[0]);
    Object result=method.invoke(null,new Object[0]);
    return result;
  }
 catch (  IllegalAccessException e) {
    throw new NoSuchMethodException(methodName + " is not accessible");
  }
catch (  InvocationTargetException e) {
    throw new InternalError(e.getMessage());
  }
}

@Deprecated public boolean isFillBelowLine(){
  return mFillBelowLine.size() > 0;
}

public void onPatchServiceResult(boolean isUpgradePatch){
  if (!isRetryEnable) {
    TinkerLog.w(TAG,"onPatchServiceResult retry disabled, just return");
    return;
  }
  if (!isUpgradePatch) {
    TinkerLog.w(TAG,"onPatchServiceResult is not upgrade patch, just return");
    return;
  }
  if (retryInfoFile.exists()) {
    SharePatchFileUtil.safeDeleteFile(retryInfoFile);
  }
  if (tempPatchFile.exists()) {
    SharePatchFileUtil.safeDeleteFile(tempPatchFile);
  }
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return NOTE_ID;
case 2:
  return CLASS_NAME;
case 3:
return INTERPRETER_CONTEXT;
default :
return null;
}
}

public static boolean isStanza(Packet packet){
  if (packet instanceof Message)   return true;
  if (packet instanceof IQ)   return true;
  if (packet instanceof Presence)   return true;
  return false;
}

@Override public int execute(final FormObject form,final int type,final String code,final int eventType,final char keyPressed){
  int messageCode=ActionHandler.NOMESSAGE;
  if (code instanceof String) {
    final String js=code;
    final String[] args=JSFunction.convertToArray(js);
    final String command=args[0];
    if (command.startsWith("AF")) {
      messageCode=handleAFCommands(form,command,js,args,eventType,keyPressed);
    }
  }
  return messageCode;
}

private boolean needsUpdate(Long bundleVersion,String beanVersion){
  if (beanVersion.contains("OAD")) {
    Log.i(TAG,"Bundle version: " + bundleVersion);
    Log.i(TAG,"Bean version: " + beanVersion);
    return true;
  }
 else {
    try {
      long parsedVersion=Long.parseLong(beanVersion.split(" ")[0]);
      Log.i(TAG,"Bundle version: " + bundleVersion);
      Log.i(TAG,"Bean version: " + parsedVersion);
      if (bundleVersion > parsedVersion) {
        return true;
      }
 else {
        Log.i(TAG,"No update required!");
      }
    }
 catch (    NumberFormatException e) {
      Log.e(TAG,"Couldn't parse Bean Version: " + beanVersion);
      fail(BeanError.UNPARSABLE_FW_VERSION);
    }
  }
  return false;
}

public void clear(FacesContext facesContext,Map<String,Object> viewMap){
  if (LOGGER.isLoggable(Level.FINEST)) {
    LOGGER.log(Level.FINEST,"Clearing @ViewScoped CDI beans for given view map: {0}");
  }
  Map<String,ViewScopeContextObject> contextMap=getContextMap(facesContext,viewMap);
  if (contextMap != null) {
    destroyBeans(viewMap,contextMap);
  }
}

public void loadLogicalTablesWithGranularities(Map<String,TableGroup> nameGroupMap,Set<? extends Granularity> validGrains,ResourceDictionaries dictionaries){
  for (  Map.Entry<String,TableGroup> entry : nameGroupMap.entrySet()) {
    String logicalTableName=entry.getKey();
    TableGroup group=entry.getValue();
    loadLogicalTableWithGranularities(logicalTableName,group,validGrains,dictionaries);
  }
}

protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count=0;
      while (n < blockSize) {
        count=in.read(block,n,blockSize - n);
        if (count == -1)         break;
        n+=count;
      }
    }
 catch (    IOException e) {
    }
    if (n < blockSize) {
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}

@Override public void addNewSubscription(final Subscription newSubscription){
  final String clientID=newSubscription.getClientId();
  List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID);
  if (clientSubscriptions == null) {
    clientSubscriptions=new ArrayList<>();
    subscriptions.put(clientID,clientSubscriptions);
  }
  clientSubscriptions.add(newSubscription.asClientTopicCouple());
}

public X509CertPathImpl(List<? extends java.security.cert.Certificate> certs) throws CertificateException {
  super("X.509");
  final int size=certs.size();
  certificates=new ArrayList<X509Certificate>(size);
  for (int i=0; i < size; i++) {
    final java.security.cert.Certificate cert=certs.get(i);
    if (!(cert instanceof X509Certificate)) {
      throw new CertificateException("Certificate " + i + " is not an X.509 certificate");
    }
    certificates.add((X509Certificate)cert);
  }
}

public Process(final String xmlString) throws IOException, XMLException {
  initContext();
  StringReader in=new StringReader(xmlString);
  readProcess(in);
  in.close();
}

public ConsulTopologyFraction(){
  this.url=DEFAULT_URL;
}

protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append("^");
  sb.append(qualifierValue);
  sb.append("$");
  return sb.toString();
}

public String shortenName(String name,int desiredLength){
  int originalLength=name.length();
  if ((desiredLength <= 0) || (originalLength <= desiredLength)) {
    return name;
  }
  int delta=originalLength - desiredLength;
  int startCut=desiredLength / 2;
  StringBuffer result=new StringBuffer();
  result.append(name.substring(0,startCut));
  if (((startCut == 0) || (name.charAt(startCut - 1) != '_')) && ((startCut + delta + 1 == originalLength) || (name.charAt(startCut + delta + 1) != '_'))) {
    result.append("_");
  }
  result.append(name.substring(startCut + delta + 1,originalLength));
  return result.toString();
}

public static Color blend(Color color1,Color color2,double weight){
  double w2=MathUtils.limit(weight,0.0,1.0);
  double w1=1.0 - w2;
  int r=(int)Math.round(w1 * color1.getRed() + w2 * color2.getRed());
  int g=(int)Math.round(w1 * color1.getGreen() + w2 * color2.getGreen());
  int b=(int)Math.round(w1 * color1.getBlue() + w2 * color2.getBlue());
  int a=(int)Math.round(w1 * color1.getAlpha() + w2 * color2.getAlpha());
  return new Color(r,g,b,a);
}

public long kstkeip(){
  return Long.parseLong(fields[29]);
}

private void decideUILookAndFeel(MainOptions options){
  try {
    boolean systemPlaf=false;
    systemPlaf=options.system_plaf;
    String systemPlafReq=System.getenv("systemplaf");
    if (systemPlafReq != null && systemPlafReq.equalsIgnoreCase("true"))     systemPlaf=true;
    if (systemPlaf)     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}

public static BufferedImage toBufferedImage(Image img,int type){
  if (img instanceof BufferedImage) {
    return (BufferedImage)img;
  }
  BufferedImage bimage=new BufferedImage(img.getWidth(null),img.getHeight(null),type);
  Graphics2D bGr=bimage.createGraphics();
  bGr.drawImage(img,0,0,null);
  bGr.dispose();
  return bimage;
}

private JSONArray readArray() throws JSONException {
  JSONArray result=new JSONArray();
  boolean hasTrailingSeparator=false;
  while (true) {
switch (nextCleanInternal()) {
case -1:
      throw syntaxError("Unterminated array");
case ']':
    if (hasTrailingSeparator) {
      result.put(null);
    }
  return result;
case ',':
case ';':
result.put(null);
hasTrailingSeparator=true;
continue;
default :
pos--;
}
result.put(nextValue());
switch (nextCleanInternal()) {
case ']':
return result;
case ',':
case ';':
hasTrailingSeparator=true;
continue;
default :
throw syntaxError("Unterminated array");
}
}
}

public static byte[] hexStringToByteArray(String strA){
  ByteArrayOutputStream result=new ByteArrayOutputStream();
  byte sum=(byte)0x00;
  boolean nextCharIsUpper=true;
  for (int i=0; i < strA.length(); i++) {
    char c=strA.charAt(i);
switch (Character.toUpperCase(c)) {
case '0':
      if (nextCharIsUpper) {
        sum=(byte)0x00;
        nextCharIsUpper=false;
      }
 else {
        sum|=(byte)0x00;
        result.write(sum);
        nextCharIsUpper=true;
      }
    break;
case '1':
  if (nextCharIsUpper) {
    sum=(byte)0x10;
    nextCharIsUpper=false;
  }
 else {
    sum|=(byte)0x01;
    result.write(sum);
    nextCharIsUpper=true;
  }
break;
case '2':
if (nextCharIsUpper) {
sum=(byte)0x20;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x02;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '3':
if (nextCharIsUpper) {
sum=(byte)0x30;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x03;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '4':
if (nextCharIsUpper) {
sum=(byte)0x40;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x04;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '5':
if (nextCharIsUpper) {
sum=(byte)0x50;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x05;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '6':
if (nextCharIsUpper) {
sum=(byte)0x60;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x06;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '7':
if (nextCharIsUpper) {
sum=(byte)0x70;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x07;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '8':
if (nextCharIsUpper) {
sum=(byte)0x80;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x08;
result.write(sum);
nextCharIsUpper=true;
}
break;
case '9':
if (nextCharIsUpper) {
sum=(byte)0x90;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x09;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'A':
if (nextCharIsUpper) {
sum=(byte)0xA0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0A;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'B':
if (nextCharIsUpper) {
sum=(byte)0xB0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0B;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'C':
if (nextCharIsUpper) {
sum=(byte)0xC0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0C;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'D':
if (nextCharIsUpper) {
sum=(byte)0xD0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0D;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'E':
if (nextCharIsUpper) {
sum=(byte)0xE0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0E;
result.write(sum);
nextCharIsUpper=true;
}
break;
case 'F':
if (nextCharIsUpper) {
sum=(byte)0xF0;
nextCharIsUpper=false;
}
 else {
sum|=(byte)0x0F;
result.write(sum);
nextCharIsUpper=true;
}
break;
default :
break;
}
}
if (!nextCharIsUpper) {
throw new RuntimeException("The String did not contain an equal number of hex digits");
}
return result.toByteArray();
}

public List<Node> listAvailableTerminals(Class<?> type){
  List<Node> result=new ArrayList<Node>();
  for (  Node node : availableNodes) {
    if ((node.getNumberOfArguments() == 0) && type.isAssignableFrom(node.getReturnType())) {
      result.add(node);
    }
  }
  return result;
}

public void removeSensorSelectionListener(SensorSelectionListener listener){
  listenerList.remove(SensorSelectionListener.class,listener);
}

public void write(int c) throws IOException {
  if (_output == null)   throw new IOException("Writer closed");
  _output.append((char)c);
}

private static void testDexClassLoader(){
  ClassLoader dexClassLoader=getDexClassLoader();
  Class anotherClass;
  try {
    anotherClass=dexClassLoader.loadClass("Another");
  }
 catch (  ClassNotFoundException cnfe) {
    throw new RuntimeException("Another?");
  }
  Object another;
  try {
    another=anotherClass.newInstance();
  }
 catch (  IllegalAccessException ie) {
    throw new RuntimeException("new another",ie);
  }
catch (  InstantiationException ie) {
    throw new RuntimeException("new another",ie);
  }
  dexClassLoader.getResource("nonexistent");
}

public void register(GridCacheTtlManager mgr){
synchronized (mux) {
    if (cleanupWorker == null)     startCleanupWorker();
    mgrs.add(mgr);
  }
}

public static java.sql.Time toSqlTime(int hour,int minute,int second){
  java.util.Date newDate=toDate(0,0,0,hour,minute,second);
  if (newDate != null) {
    return new java.sql.Time(newDate.getTime());
  }
 else {
    return null;
  }
}

public void initializeKeyStore(){
  try {
    Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName);
    resetCurrentFileList(logName);
    addToCurrentFileList(logName,logName,logName);
    String logPath=lmanager.getProperty(LogConstants.LOG_LOCATION);
    if (!logPath.endsWith("/"))     logPath+="/";
    String fileName=logName;
    String loggerFileName=logPath + PREFIX + "log."+ fileName;
    String verifierFileName=logPath + PREFIX + "ver."+ fileName;
    Debug.message(logName + ":Logger Keystore name = " + loggerFileName);
    Debug.message(logName + ":Verifier Keystore name= " + verifierFileName);
    helper.initializeSecureLogHelper(loggerFileName,logPassword,verifierFileName,logPassword);
    Debug.message(logName + ":Initialized SecureLogHelper");
    helper.initializeVerifier(verifierFileName,logPassword,verPassword);
    Debug.message(logName + ":Done init of SecureLogHelper and Verifier");
  }
 catch (  Exception e) {
    Debug.error(logName + ":Logger: exception thrown while initializing secure logger",e);
  }
}

private native byte[] imageDataToPlatformImageBytes(byte[] imageData,int width,int height,long format);

public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {
  if (bmap == null || exifOutStream == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=getExifWriterStream(exifOutStream);
  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);
  s.flush();
}

public static String cleanFolderStackingMarkers(String filename){
  if (!StringUtils.isEmpty(filename)) {
    Matcher m=folderStackingPattern.matcher(filename);
    if (m.matches()) {
      return m.group(1) + m.group(3);
    }
  }
  return filename;
}

public void discard(ServiceRegistrar reg){
synchronized (registrars) {
    if (terminated) {
      throw new IllegalStateException("discovery terminated");
    }
    if (reg == null)     return;
    sendDiscarded(reg,null);
  }
}

public boolean isFinalState(int state){
  return (state < 0) ? false : fFinalStateFlags[state];
}

public static String generateScaleMarkers(int proteinLength,int maxNumScaleMarkers){
  if (maxNumScaleMarkers < 2) {
    maxNumScaleMarkers=2;
  }
  int scale=calcScale(proteinLength,maxNumScaleMarkers);
  StringBuilder sb=new StringBuilder("0");
  int index=0;
  int numRemaining=proteinLength;
  while (index <= proteinLength) {
    index+=scale;
    numRemaining-=scale;
    sb.append(",");
    if ((numRemaining > 0) && (numRemaining < scale)) {
      if (numRemaining < (scale / 2)) {
        sb.append(proteinLength);
        break;
      }
    }
    if (index >= proteinLength) {
      sb.append(proteinLength);
    }
 else {
      sb.append(index);
    }
  }
  return sb.toString();
}

public void writeFigTreeBlock(Map<String,Object> settings) throws IOException {
  writer.println("\nbegin figtree;");
  for (  String key : settings.keySet()) {
    Object value=settings.get(key);
    writer.println("\tset " + key + "="+ createString(value)+ ";");
  }
  writer.println("end;\n");
}

public int hashCode(){
  return font.hashCode() ^ glyphs.length;
}

public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj instanceof Map == false) {
    return false;
  }
  Map map=(Map)obj;
  if (map.size() != size()) {
    return false;
  }
  MapIterator it=mapIterator();
  try {
    while (it.hasNext()) {
      Object key=it.next();
      Object value=it.getValue();
      if (value == null) {
        if (map.get(key) != null || map.containsKey(key) == false) {
          return false;
        }
      }
 else {
        if (value.equals(map.get(key)) == false) {
          return false;
        }
      }
    }
  }
 catch (  ClassCastException ignored) {
    return false;
  }
catch (  NullPointerException ignored) {
    return false;
  }
  return true;
}

@Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {
  fInDTD=true;
  try {
    if (fLexicalHandler != null) {
      fLexicalHandler.startDTD(rootElement,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
  if (fDeclHandler != null) {
    fDeclaredAttrs=new SymbolHash();
  }
}

public void writeExif(byte[] jpeg,String exifOutFileName) throws FileNotFoundException, IOException {
  if (jpeg == null || exifOutFileName == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=null;
  try {
    s=getExifWriterStream(exifOutFileName);
    s.write(jpeg,0,jpeg.length);
    s.flush();
  }
 catch (  IOException e) {
    closeSilently(s);
    throw e;
  }
  s.close();
}

public void cleanStart(){
  Connection conn=getConnection(true,true);
  if (conn == null)   throw new IllegalStateException("No Database");
  dropDatabase(conn);
  createUser(conn);
  createDatabase(conn);
  try {
    if (conn != null)     conn.close();
  }
 catch (  SQLException e2) {
    log.log(Level.SEVERE,"close connection",e2);
  }
  conn=null;
}

static TemplateModelException newMethodArgInvalidValueException(String methodName,int argIdx,Object... details){
  return new _TemplateModelException(methodName,"(...) argument #",Integer.valueOf(argIdx + 1)," had invalid value: ",details);
}

public static byte[] compressForZlib(String stringToCompress){
  byte[] returnValues=null;
  try {
    returnValues=compressForZlib(stringToCompress.getBytes("UTF-8"));
  }
 catch (  UnsupportedEncodingException uee) {
    uee.printStackTrace();
  }
  return returnValues;
}

private void loadMap(String extension,String mimeType){
  if (!mimeTypeToExtensionMap.containsKey(mimeType)) {
    mimeTypeToExtensionMap.put(mimeType,extension);
  }
  extensionToMimeTypeMap.put(extension,mimeType);
  if (isImageType(mimeType)) {
    imageMimeTypeSet.add(mimeType);
  }
}

public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {
}

private String convertTimestamp(){
  String result=timestampFormat.replaceAll(VALID_DATEFORMAT_CHAR_PATTERN + "+","\\\\S+");
  result=result.replaceAll(Pattern.quote("."),"\\\\.");
  return result;
}

public static String encode(byte[] bytes){
  int len=bytes.length;
  final StringBuffer encoded=new StringBuffer((len + 2) / 3 * 4);
  int i=0;
  int j=len;
  while (j >= 3) {
    encoded.append(to64((((bytes[i] & 0xff) << 16) | (int)((bytes[i + 1] & 0xff) << 8) | (int)(bytes[i + 2] & 0xff)),4));
    i+=3;
    j-=3;
  }
  if (j == 2) {
    encoded.append(to64(((bytes[i] & 0xff) << 8) | ((bytes[i + 1] & 0xff)),3));
  }
  if (j == 1) {
    encoded.append(to64(((bytes[i] & 0xff)),2));
  }
  return encoded.toString();
}

final public void print(double v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    String s=String.valueOf(v);
    out.write(s,0,s.length());
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

public String toString(){
  StringBuffer result=new StringBuffer(ipAddress.toString());
  result.append("/");
  result.append(extendedNetworkPrefix);
  return result.toString();
}

private static boolean containsChroot(String zkHost){
  return zkHost.contains("/");
}

public static void onDatabase(MongoClient client,String dbName,Consumer<MongoDatabase> dbOperation){
  if (contains(client.listDatabaseNames(),dbName)) {
    dbOperation.accept(client.getDatabase(dbName));
  }
}

protected int createHashCode(){
  int result=uri.hashCode() ^ prefix.hashCode();
  if (result == 0) {
    result=0xbabe;
  }
  return result;
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=imageView.getWidth();
  final float viewHeight=imageView.getHeight();
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public static PlaceholderFragment newInstance(int sectionNumber){
  PlaceholderFragment fragment=new PlaceholderFragment();
  Bundle args=new Bundle();
  args.putInt(ARG_SECTION_NUMBER,sectionNumber);
  fragment.setArguments(args);
  return fragment;
}

public String importTrl(String directory,int AD_Client_ID,String AD_Language,String Trl_Table){
  String fileName=directory + File.separator + Trl_Table+ "_"+ AD_Language+ ".xml";
  log.info(fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg="File does not exist: " + fileName;
    log.log(Level.SEVERE,msg);
    return msg;
  }
  try {
    TranslationHandler handler=new TranslationHandler(AD_Client_ID);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(in,handler);
    log.info("Updated=" + handler.getUpdateCount());
    return Msg.getMsg(m_ctx,"Updated") + "=" + handler.getUpdateCount();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"importTrl",e);
    return e.toString();
  }
}

public ResultFileReader(Problem problem,File file) throws IOException {
  super();
  this.problem=problem;
  reader=new BufferedReader(new FileReader(file));
  line=reader.readLine();
}

@Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){
  exception.printStackTrace();
  Log.e("TrafficService","Error connecting: " + exception.getMessage());
  onDisconnect(false);
}

@Override public boolean exclude(String identifier){
  return blacklist.contains(identifier);
}

public static boolean checkCommunicationError(Exception exc){
  Throwable rootCause=SolrException.getRootCause(exc);
  boolean wasCommError=(rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException|| rootCause instanceof SocketException);
  return wasCommError;
}

public boolean isReliable(){
  return true;
}

private void push(final int type){
  if (outputStack == null) {
    outputStack=new int[10];
  }
  int n=outputStack.length;
  if (outputStackTop >= n) {
    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];
    System.arraycopy(outputStack,0,t,0,n);
    outputStack=t;
  }
  outputStack[outputStackTop++]=type;
  int top=owner.inputStackTop + outputStackTop;
  if (top > owner.outputStackMax) {
    owner.outputStackMax=top;
  }
}

static private String SHORT_Max_Plus(){
  long tempValue=Short.MAX_VALUE + 1;
  return String.valueOf(tempValue);
}

public void firePropertyChange(String name,Object oldValue,Object newValue){
  beanContextChildSupport.firePropertyChange(name,oldValue,newValue);
}

public static String encode(String value){
  value=value.replace("&","&amp;");
  value=value.replace("<","&lt;");
  value=value.replace(">","&gt;");
  value=value.replace("\"","&quot;");
  value=value.replace("'","&#x27;");
  value=value.replace("/","&#x2F;");
  return value;
}

public void createDatabaseEntitiesForStoragePolicyTesting(){
  createDatabaseEntitiesForStoragePolicyTesting(AbstractServiceTest.STORAGE_POLICY_NAMESPACE_CD,Arrays.asList(AbstractServiceTest.STORAGE_POLICY_RULE_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.STORAGE_NAME_2));
}

private PDFPage createPage(int pagenum,PDFObject pageObj) throws IOException {
  int rotation=0;
  RectF mediabox=null;
  RectF cropbox=null;
  PDFObject mediaboxObj=getInheritedValue(pageObj,"MediaBox");
  if (mediaboxObj != null) {
    mediabox=parseRect(mediaboxObj);
  }
  PDFObject cropboxObj=getInheritedValue(pageObj,"CropBox");
  if (cropboxObj != null) {
    cropbox=parseRect(cropboxObj);
  }
  PDFObject rotateObj=getInheritedValue(pageObj,"Rotate");
  if (rotateObj != null) {
    rotation=rotateObj.getIntValue();
  }
  RectF bbox=((cropbox == null) ? mediabox : cropbox);
  return new PDFPage(pagenum,bbox,rotation,cache);
}

static Map addElementToMap(String key,Set values,Map toMap){
  if ((key != null) && (toMap != null)) {
    toMap.put(key,values);
  }
  return toMap;
}

public void saveBootProp() throws IOException {
  if (!bootProp.equals(bootPropOrg)) {
    final String propFile=jarFolder + "jar.properties";
    final OutputStream os=new FileOutputStream(propFile);
    try {
      bootProp.store(os,"Stendhal Boot Configuration");
    }
  finally {
      os.close();
    }
  }
}

private int append(FileSystem fs,Configuration conf,Path src,PrintWriter writer,int currentRecordNumber) throws IOException {
  BufferedReader reader=new BufferedReader(new InputStreamReader(fs.open(src)));
  try {
    String line=reader.readLine();
    while (line != null) {
      if (line.startsWith("Recno:: ")) {
        line="Recno:: " + currentRecordNumber++;
      }
      writer.println(line);
      line=reader.readLine();
    }
    return currentRecordNumber;
  }
  finally {
    reader.close();
  }
}

public PacketOutputStream writeTimestampLength(final Calendar calendar,Timestamp ts,boolean fractionalSeconds){
  assureBufferCapacity(fractionalSeconds ? 12 : 8);
  buffer.put((byte)(fractionalSeconds ? 11 : 7));
  buffer.putShort((short)calendar.get(Calendar.YEAR));
  buffer.put((byte)((calendar.get(Calendar.MONTH) + 1) & 0xff));
  buffer.put((byte)(calendar.get(Calendar.DAY_OF_MONTH) & 0xff));
  buffer.put((byte)calendar.get(Calendar.HOUR_OF_DAY));
  buffer.put((byte)calendar.get(Calendar.MINUTE));
  buffer.put((byte)calendar.get(Calendar.SECOND));
  if (fractionalSeconds) {
    buffer.putInt(ts.getNanos() / 1000);
  }
  return this;
}

public int difference(String s1,String s2) throws EncoderException {
  return SoundexUtils.difference(this,s1,s2);
}

public static String morpha(String text,boolean tags){
  if (text.isEmpty()) {
    return "";
  }
  String[] textParts=whitespace.split(text);
  StringBuilder result=new StringBuilder();
  try {
    for (    String textPart : textParts) {
      Morpha morpha=new Morpha(new StringReader(textPart),tags);
      if (result.length() != 0) {
        result.append(" ");
      }
      result.append(morpha.next());
    }
  }
 catch (  Error e) {
    return text;
  }
catch (  java.io.IOException e) {
    return text;
  }
  return result.toString();
}

public static void deleteFile(File file) throws AdeUsageException {
  if (!file.delete()) {
    throw new AdeUsageException(FAILED_DELETING_FILE + file.getPath());
  }
}

public Shape createCheckMark(final int x,final int y,final int w,final int h){
  double xf=w / 12.0;
  double hf=h / 12.0;
  path.reset();
  path.moveTo(x,y + 7.0 * hf);
  path.lineTo(x + 2.0 * xf,y + 7.0 * hf);
  path.lineTo(x + 4.75 * xf,y + 10.0 * hf);
  path.lineTo(x + 9.0 * xf,y);
  path.lineTo(x + 11.0 * xf,y);
  path.lineTo(x + 5.0 * xf,y + 12.0 * hf);
  path.closePath();
  return path;
}

@Override public synchronized void initialize(){
  if (!mRootDirectory.exists()) {
    if (!mRootDirectory.mkdirs()) {
      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());
    }
    return;
  }
  File[] files=mRootDirectory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    FileInputStream fis=null;
    try {
      fis=new FileInputStream(file);
      CacheHeader entry=CacheHeader.readHeader(fis);
      entry.size=file.length();
      putEntry(entry.key,entry);
    }
 catch (    IOException e) {
      if (file != null) {
        file.delete();
      }
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}

public TCPChannelClient(ExecutorService executor,TCPChannelEvents eventListener,String ip,int port){
  this.executor=executor;
  executorThreadCheck=new ThreadUtils.ThreadChecker();
  executorThreadCheck.detachThread();
  this.eventListener=eventListener;
  InetAddress address;
  try {
    address=InetAddress.getByName(ip);
  }
 catch (  UnknownHostException e) {
    reportError("Invalid IP address.");
    return;
  }
  if (address.isAnyLocalAddress()) {
    socket=new TCPSocketServer(address,port);
  }
 else {
    socket=new TCPSocketClient(address,port);
  }
  socket.start();
}

protected void cutSelectedBean(){
  if (Debug.debugging("beanbox"))   Debug.output("Enter> cutSelectedBean");
  if (selectedBean == null || selectedBeanLocation == null) {
    if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean);
    if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation);
    clearSelection();
    return;
  }
  try {
    serBean=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(serBean);
    oos.writeObject(selectedBean);
  }
 catch (  Exception e) {
    e.printStackTrace();
    clearSelection();
    if (Debug.debugging("beanbox"))     Debug.output("Exit> copySelectedBean");
    return;
  }
  cutBean=selectedBean;
  selectedBeanBox.showCut(selectedBean);
  if (Debug.debugging("beanbox"))   Debug.output("Exit> cutSelectedBean");
}

public RemoverManager track(Remover remover){
  if (handlers == null) {
    handlers=new ArrayList<>();
  }
  handlers.add(remover);
  return this;
}

public void actionPerformed(java.awt.event.ActionEvent e){
  Object source=e.getSource();
  if (!(source instanceof JMenuItem))   return;
  JMenuItem mi=(JMenuItem)source;
  String name=mi.getText();
  OMGraphicHandlerLayer targetLayer=(OMGraphicHandlerLayer)layers.get(name);
  if (targetLayer == null) {
    Debug.message("defaultdndcatcher","ERROR> DefaultDnDCatcher::actionPerformed: " + "no layer found with name " + name);
    return;
  }
  targetLayer.doAction((OMGraphic)transferData,new OMAction(OMAction.UPDATE_GRAPHIC_MASK));
}

private void addEntry(){
  model.addNewEntry();
  removeButton.setEnabled(false);
}

private void ensureSize(){
  if (children == EMPTY_CHILDREN) {
    children=new FPNode[1];
    return;
  }
  int newsize=children.length == 1 ? INITIAL_SIZE : (children.length << 1);
  children=Arrays.copyOf(children,newsize);
}

public UUID(long mostSigBits,long leastSigBits){
  this.mostSigBits=mostSigBits;
  this.leastSigBits=leastSigBits;
  init();
}

public static PrettyPrint indentWithSpaces(int number){
  if (number < 0) {
    throw new IllegalArgumentException("number is negative");
  }
  char[] chars=new char[number];
  Arrays.fill(chars,' ');
  return new PrettyPrint(chars);
}

private static void renderHandler(FacesContext context,UIComponent component,Collection<ClientBehaviorContext.Parameter> params,String handlerName,Object handlerValue,String behaviorEventName,String submitTarget,boolean needsSubmit,boolean includeExec) throws IOException {
  ResponseWriter writer=context.getResponseWriter();
  String userHandler=getNonEmptyUserHandler(handlerValue);
  List<ClientBehavior> behaviors=getClientBehaviors(component,behaviorEventName);
  if ((null != behaviors) && (behaviors.size() > 0) && Util.componentIsDisabled(component)) {
    behaviors=null;
  }
  if (params == null) {
    params=Collections.emptyList();
  }
  String handler=null;
switch (getHandlerType(behaviors,params,userHandler,needsSubmit,includeExec)) {
case USER_HANDLER_ONLY:
    handler=userHandler;
  break;
case SINGLE_BEHAVIOR_ONLY:
handler=getSingleBehaviorHandler(context,component,behaviors.get(0),params,behaviorEventName,submitTarget,needsSubmit);
break;
case SUBMIT_ONLY:
handler=getSubmitHandler(context,component,params,submitTarget,true);
break;
case CHAIN:
handler=getChainedHandler(context,component,behaviors,params,behaviorEventName,userHandler,submitTarget,needsSubmit);
break;
default :
assert (false);
}
writer.writeAttribute(handlerName,handler,null);
}

public String constructTSDBMetricName(){
  StringBuilder sb=new StringBuilder(getScope());
  if (_namespace != null && !_namespace.isEmpty()) {
    sb.append(getNamespace());
  }
  return sb.toString();
}

@Override protected void registerNewSelector() throws IOException {
synchronized (selector) {
    Set<SelectionKey> keys=selector.keys();
    Selector newSelector=null;
    if (selectorProvider == null) {
      newSelector=Selector.open();
    }
 else {
      newSelector=selectorProvider.openSelector();
    }
    for (    SelectionKey key : keys) {
      SelectableChannel ch=key.channel();
      NioSession session=(NioSession)key.attachment();
      SelectionKey newKey=ch.register(newSelector,key.interestOps(),session);
      session.setSelectionKey(newKey);
    }
    selector.close();
    selector=newSelector;
  }
}

public void testCase4(){
  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={10,40,100,-55,96,51,76,40,-45,85,115,44,-127,115,-21,-62,-15,85,64,-87,-2,-36,-36,-106};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.multiply(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

protected synchronized void received(int responseCode,String stream,String json){
  FollowerInfo result=parseFollowers(stream,json);
  if (result != null) {
    noError(stream);
    cached.put(stream,result);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(result);
      if (hasNewFollowers(result.followers)) {
        listener.newFollowers(result);
      }
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(result);
    }
    requested.add(stream);
  }
 else {
    String errorMessage="";
    if (responseCode == 404) {
      errorMessage="Channel not found.";
      error(stream,10);
    }
 else     if (responseCode == 200) {
      errorMessage="Parse error.";
      error(stream,1);
    }
 else     if (responseCode == 401 || responseCode == 403) {
      errorMessage="Access denied.";
      error(stream,1);
    }
 else     if (responseCode == 422) {
      errorMessage="No data for this channel.";
      error(stream,10);
    }
 else {
      errorMessage="Request error.";
      error(stream,1);
    }
    FollowerInfo errorResult=new FollowerInfo(type,stream,errorMessage);
    cached.put(stream,errorResult);
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(errorResult);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(errorResult);
    }
  }
}

public static <T>List<T> select(Connection connection,String rawSqlQuery,RowProcessor<T> rowProcessor,Object... parameters) throws IOException, SQLException {
  PreparedStatement stmt=null;
  ResultSet rs=null;
  try {
    stmt=connection.prepareStatement(rawSqlQuery);
    for (int index=0; index < parameters.length; index++) {
      JdbcUtils.bindParameter(stmt,index + 1,parameters[index]);
    }
    rs=stmt.executeQuery();
    List<T> result=Lists.newLinkedList();
    while (rs.next()) {
      result.add(rowProcessor.process(rs));
    }
    return result;
  }
  finally {
    JdbcUtils.closeResultSet(rs);
    JdbcUtils.closeStatement(stmt);
  }
}

public static long nowInNanos(){
  return System.nanoTime();
}

public void test_clone(){
  Format fm=new MockFormat();
  Format fmc=(Format)fm.clone();
  assertEquals(fm.getClass(),fmc.getClass());
}

public Future<SyncReply> sendRequest(int xid,SyncMessage request) throws RemoteStoreException {
  ensureConnected();
  RemoteSyncFuture future=new RemoteSyncFuture(xid,connectionGeneration);
  futureMap.put(Integer.valueOf(xid),future);
  if (futureMap.size() > MAX_PENDING_REQUESTS) {
synchronized (futureNotify) {
      while (futureMap.size() > MAX_PENDING_REQUESTS) {
        try {
          futureNotify.wait();
        }
 catch (        InterruptedException e) {
          throw new RemoteStoreException("Could not send request",e);
        }
      }
    }
  }
  channel.writeAndFlush(request);
  return future;
}

public static boolean isEmpty(String str){
  return (null == str || 0 == str.length());
}

private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){
  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);
}

public void enableDependency(Capability c){
  if (doNotCheckCapabilities()) {
    return;
  }
  if (c == Capability.NOMINAL_ATTRIBUTES) {
    enableDependency(Capability.BINARY_ATTRIBUTES);
  }
 else   if (c == Capability.BINARY_ATTRIBUTES) {
    enableDependency(Capability.UNARY_ATTRIBUTES);
  }
 else   if (c == Capability.UNARY_ATTRIBUTES) {
    enableDependency(Capability.EMPTY_NOMINAL_ATTRIBUTES);
  }
 else   if (c == Capability.NOMINAL_CLASS) {
    enableDependency(Capability.BINARY_CLASS);
  }
  m_Dependencies.add(c);
}

public IVariable[] extractRobotDebugVariables(final int stackTraceId,final Map<String,Object> newVariables){
  final RobotDebugVariablesContext currentVariablesContext=findCurrentVariablesContext(stackTraceId);
  Map<String,IVariable> previousVariablesMap=initPreviousVariablesState(currentVariablesContext);
  final Map<String,IVariable> nonGlobalVariablesMap=new LinkedHashMap<>();
  if (previousVariablesMap == null) {
    initNewNonGlobalVariables(newVariables,nonGlobalVariablesMap);
  }
 else {
    initVariablesComparingWithPreviousState(newVariables,previousVariablesMap,nonGlobalVariablesMap);
  }
  final LinkedList<IVariable> currentVariablesList=createCurrentVariablesList(nonGlobalVariablesMap);
  saveCurrentVariablesState(stackTraceId,currentVariablesContext,nonGlobalVariablesMap);
  return currentVariablesList.toArray(new IVariable[currentVariablesList.size()]);
}

public ResourcesPoet addInteger(String name,String value){
  Element bool=document.createElement("integer");
  bool.setAttribute("name",name);
  bool.appendChild(document.createTextNode(String.valueOf(value)));
  resourceElement.appendChild(bool);
  return this;
}

static boolean checkStandardUPCEANChecksum(CharSequence s) throws FormatException {
  int length=s.length();
  if (length == 0) {
    return false;
  }
  int sum=0;
  for (int i=length - 2; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  sum*=3;
  for (int i=length - 1; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  return sum % 10 == 0;
}

public static String mapFullWidthLetterToHalfWidth(String text){
}

private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){
  String msg=String.format("expected=%s, actual=%s",expected.toString(),actual.toString());
  assertEquals(msg,expected.size(),actual.size());
  for (  T e : expected) {
    if (!actual.contains(e)) {
      msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual);
      fail(msg);
    }
  }
}

private static boolean hasResponseBody(int requestMethod,int responseCode){
  return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED;
}

public int availableInProcess(){
  return Math.max(0,maxInProcess - pending.size());
}

public void add(double x){
  Cell[] as;
  long b, v;
  int m;
  Cell a;
  if ((as=cells) != null || !casBase(b=base,Double.doubleToRawLongBits(Double.longBitsToDouble(b) + x))) {
    boolean uncontended=true;
    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x))))     doubleAccumulate(x,null,uncontended);
  }
}

public boolean shouldExecuteAction(){
  if (delay <= 0) {
    return true;
  }
  long timePassed=System.currentTimeMillis() - lastActionExecuted;
  if (timePassed > delay * 100) {
    lastActionExecuted=System.currentTimeMillis();
    return true;
  }
  return false;
}

public static int moveByWord(String text,int column,boolean forward,boolean returnCursorAtEnd){
  int curColumn=column;
  int length=text.length();
  int direction=forward ? 1 : -1;
  boolean farWordEnd=((direction == 1 && returnCursorAtEnd) || (direction == -1 && !returnCursorAtEnd));
  boolean foundEarlyMatch=false;
  if (!UnicodeUtils.isWhitespace(text.charAt(curColumn))) {
    curColumn=skipNonwhitespaceSimilar(text,curColumn,forward);
    if (farWordEnd && curColumn - direction != column) {
      curColumn-=direction;
      foundEarlyMatch=true;
    }
  }
  if (!foundEarlyMatch && curColumn >= 0 && curColumn < length) {
    curColumn=skipWhitespace(text,curColumn,forward);
    if (farWordEnd && curColumn >= 0 && curColumn < length) {
      curColumn=skipNonwhitespaceSimilar(text,curColumn,forward) - direction;
    }
  }
  if (curColumn < 0 || curColumn >= length) {
    return -1;
  }
  return curColumn;
}

protected void handleOrDeferMessage(DistributionMessage msg){
synchronized (startupLock) {
    if (beingSick || playingDead) {
      if (msg.containsRegionContentChange() || msg instanceof PartitionMessageWithDirectReply) {
        startupMessages.add(new StartupEvent(msg));
        return;
      }
    }
    if (!processingEvents) {
      startupMessages.add(new StartupEvent(msg));
      return;
    }
  }
  dispatchMessage(msg);
}

public boolean zoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){
  NetworkZoningParam zoningParam=zoningParams.get(0);
  _log.info(String.format("Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s",zoningParam.getExportGroupDisplay(),volumeURIs.toString()));
  return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId);
}

private void shutdown(){
  if (nbestListWriter != null) {
    logger.info("Closing n-best writer");
    nbestListWriter.close();
  }
  if (alignmentWriter != null) {
    logger.info("Closing alignment writer");
    alignmentWriter.close();
  }
}

@Override public void paintIcon(Component c,Graphics g,int x,int y){
  Painter painter=(Painter)UIManager.get(prefix + "[Enabled]." + key);
  if (painter != null) {
    JComponent jc=(c instanceof JComponent) ? (JComponent)c : null;
    Graphics2D gfx=(Graphics2D)g;
    gfx.translate(x,y);
    painter.paint(gfx,jc,width,height);
    gfx.translate(-x,-y);
  }
}

protected void zoomImageToPosition(float scale,float centerX,float centerY,long durationMs){
  if (scale > getMaxScale()) {
    scale=getMaxScale();
  }
  final float oldScale=getCurrentScale();
  final float deltaScale=scale - oldScale;
  post(mZoomImageToPositionRunnable=new ZoomImageToPosition(CropImageView.this,durationMs,oldScale,deltaScale,centerX,centerY));
}

public List<Map<String,String>> list(Database conn) throws SQLException {
  ResultSet rs=null;
  Statement statement=conn.createStatement();
  List<Map<String,String>> shardToChannels=new ArrayList<Map<String,String>>();
  try {
    rs=statement.executeQuery(select);
    while (rs.next()) {
      Map<String,String> shard=new HashMap<String,String>();
      shard.put(ShardChannelTable.SHARD_ID_COL,rs.getString(ShardChannelTable.SHARD_ID_COL));
      shard.put(ShardChannelTable.CHANNEL_COL,rs.getString(ShardChannelTable.CHANNEL_COL));
      shardToChannels.add(shard);
    }
  }
  finally {
    close(rs);
    close(statement);
  }
  return shardToChannels;
}

public Boolean isHidden(File f){
  String name=f.getName();
  if ((name != null) && !name.equals("") && (name.charAt(0) == '.')) {
    return Boolean.TRUE;
  }
 else {
    return Boolean.FALSE;
  }
}

private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){
  final int offset=Math.max(0,scrollView.getScrollY());
  final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight();
  if (range == 0)   return false;
  if (direction < 0) {
    return offset > 0;
  }
 else {
    return offset < range - 1;
  }
}

public JarInfo loadJar() throws IOException {
  ZipInputStream zis=null;
  Manifest mf=null;
  boolean empty=true;
  try {
    zis=new ZipInputStream(jarStream);
    ZipEntry ent=null;
    while ((ent=zis.getNextEntry()) != null) {
      empty=false;
      String name=ent.getName();
      if (Manifest.isManifestName(name)) {
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte buffer[]=new byte[1024];
        for (; ; ) {
          int len=zis.read(buffer);
          if (len < 0) {
            break;
          }
          baos.write(buffer,0,len);
        }
        byte[] buf=baos.toByteArray();
        mf=new Manifest(buf);
      }
    }
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Throwable th) {
    th.printStackTrace();
    throw new IOException("loadJar caught: " + th);
  }
 finally {
    if (zis != null) {
      try {
        zis.close();
      }
 catch (      Exception ex) {
      }
    }
  }
  if (empty) {
    throw new IOException("JAR file is corrupt or empty");
  }
  JarInfo ji=createJarInfo(mf);
  return ji;
}

public void invalidateTitleSortable(){
  for (  Movie movie : new ArrayList<>(movieList)) {
    movie.clearTitleSortable();
  }
}

public void addRow(Assignment head,double prob){
  if (prob < 0.0f || prob > 1.02f) {
    return;
  }
  headVars.addAll(head.getVariables());
  table.put(head,prob);
}

public byte[] createJarFromFileContent(final String fileName,final String content) throws IOException {
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  JarOutputStream jarOutputStream=new JarOutputStream(byteArrayOutputStream);
  JarEntry entry=new JarEntry(fileName);
  entry.setTime(System.currentTimeMillis());
  jarOutputStream.putNextEntry(entry);
  jarOutputStream.write(content.getBytes());
  jarOutputStream.closeEntry();
  jarOutputStream.close();
  return byteArrayOutputStream.toByteArray();
}

private boolean goTo(long day,boolean animate,boolean setSelected,boolean forceScroll){
  if (setSelected) {
    mSelectedDay.setTimeInMillis(day);
  }
  mTempDay.setTimeInMillis(day);
  final int position=getPositionFromDay(day);
  View child;
  int i=0;
  int top=0;
  do {
    child=getChildAt(i++);
    if (child == null) {
      break;
    }
    top=child.getTop();
  }
 while (top < 0);
  int selectedPosition;
  if (child != null) {
    selectedPosition=getPositionForView(child);
  }
 else {
    selectedPosition=0;
  }
  if (setSelected) {
    mAdapter.setSelectedDay(mSelectedDay);
  }
  if (position != selectedPosition || forceScroll) {
    setMonthDisplayed(mTempDay);
    mPreviousScrollState=OnScrollListener.SCROLL_STATE_FLING;
    if (animate) {
      smoothScrollToPositionFromTop(position,LIST_TOP_OFFSET,GOTO_SCROLL_DURATION);
      return true;
    }
 else {
      postSetSelection(position);
    }
  }
 else   if (setSelected) {
    setMonthDisplayed(mSelectedDay);
  }
  return false;
}

public boolean search(V v){
  int h=hashMethod.hash(v);
  LinkedList<V> list=(LinkedList<V>)table[h];
  if (list == null) {
    return false;
  }
  return list.contains(v);
}

public void closeJDBCConnection(Connection conn){
  try {
    if (conn != null) {
      conn.close();
    }
  }
 catch (  SQLException sqle) {
    subclassLogWrapper("Unexpected exception while closing database connection.");
  }
}

@Override public void messageItemDetails(String strClass,String item,String description,String[] msgOption,int[] msgNumber,int defaultOption){
  HashMap<Integer,String> options=new HashMap<>(msgOption.length);
  for (int i=0; i < msgOption.length; i++) {
    options.put(msgNumber[i],msgOption[i]);
  }
  messageItemDetails(strClass,description,item,options,defaultOption);
}

public void addListener(ColorMapListener listener){
  listeners.add(listener);
}

protected void computePDists(Relation<O> relation,KNNQuery<O> knn,WritableDoubleDataStore pdists){
  FiniteProgress prdsProgress=LOG.isVerbose() ? new FiniteProgress("pdists",relation.size(),LOG) : null;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    final KNNList neighbors=knn.getKNNForDBID(iditer,kreach + 1);
    int ks=0;
    double ssum=0.;
    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid() && ks < kreach; neighbor.advance()) {
      if (DBIDUtil.equal(neighbor,iditer)) {
        continue;
      }
      final double d=neighbor.doubleValue();
      ssum+=d * d;
      ks++;
    }
    double pdist=ks > 0 ? Math.sqrt(ssum / ks) : 0.;
    pdists.putDouble(iditer,pdist);
    LOG.incrementProcessed(prdsProgress);
  }
  LOG.ensureCompleted(prdsProgress);
}

private static String appendIfMissing(final String str,final CharSequence suffix,final boolean ignoreCase,final CharSequence... suffixes){
  if (str == null || isEmpty(suffix) || endsWith(str,suffix,ignoreCase)) {
    return str;
  }
  if (suffixes != null && suffixes.length > 0) {
    for (    final CharSequence s : suffixes) {
      if (endsWith(str,s,ignoreCase)) {
        return str;
      }
    }
  }
  return str + suffix.toString();
}

private JSONArray requestAllFileSystems() throws IOException, JSONException {
  JSONArray ret=new JSONArray();
  for (  Filesystem fs : filesystems) {
    ret.put(fs.getRootEntry());
  }
  return ret;
}

ExternalProblem(Process process){
  this(process.getInputStream(),process.getOutputStream());
  RedirectStream.redirect(process.getErrorStream(),System.err);
}

protected static boolean networkMonitorExist(String nwMonName){
  String classMethod="OpenSSOMonitoringUtil.networkMonitorExist: ";
  if (debug.messageEnabled()) {
    debug.message(classMethod + "checking " + nwMonName);
  }
  if ((nwMonName == null) || (nwMonName.length() == 0)) {
    if (debug.warningEnabled()) {
      debug.warning(classMethod + "isNull");
    }
    return false;
  }
  Set<String> ntwStats=NetworkMonitor.getInstanceNames();
  String ss=nwMonName.toLowerCase();
  if (ntwStats.contains(ss)) {
    return true;
  }
 else {
    return false;
  }
}

protected boolean error_recovery(boolean debug) throws java.lang.Exception {
  if (debug)   debug_message("# Attempting error recovery");
  if (!find_recovery_config(debug)) {
    if (debug)     debug_message("# Error recovery fails");
    return false;
  }
  read_lookahead();
  for (; ; ) {
    if (debug)     debug_message("# Trying to parse ahead");
    if (try_parse_ahead(debug)) {
      break;
    }
    if (lookahead[0].sym == EOF_sym()) {
      if (debug)       debug_message("# Error recovery fails at EOF");
      return false;
    }
    if (debug)     debug_message("# Consuming Symbol #" + lookahead[0].sym);
    restart_lookahead();
  }
  if (debug)   debug_message("# Parse-ahead ok, going back to normal parse");
  parse_lookahead(debug);
  return true;
}

public void andWith(List<QueryPredicate> predicates){
  children.addAll(predicates);
}

public void addRoll(MMRandom rng){
  int result=rng.randomInt(this.faces) + this.min;
  all.addElement(new Integer(result));
  this.total+=result;
  if (keep != -1 && all.size() >= keep) {
    this.total=0;
    Collections.sort(all,Collections.reverseOrder());
    for (int i=0; i < keep; i++) {
      this.total+=all.get(i);
    }
  }
}

public boolean checkCanonicalUserOptions(){
  boolean result;
  OptionHandler handler;
  String[] userOptions;
  String[] userOptionsCheck;
  print("Canonical user options...");
  try {
    handler=getDefaultHandler();
    handler.setOptions(getUserOptions());
    if (getDebug()) {
      print("\n  Getting canonical user options: ");
    }
    userOptions=handler.getOptions();
    if (getDebug()) {
      println(printOptions(userOptions));
    }
    if (getDebug()) {
      println("  Setting canonical user options");
    }
    handler.setOptions(userOptions.clone());
    if (getDebug()) {
      println("  Checking canonical user options");
    }
    userOptionsCheck=handler.getOptions();
    compareOptions(userOptions,userOptionsCheck);
    println("yes");
    result=true;
  }
 catch (  Exception e) {
    println("no");
    result=false;
    if (getDebug()) {
      println(e);
    }
  }
  return result;
}

public static void closeQuietly(final Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    final RuntimeException rethrown) {
      throw rethrown;
    }
catch (    final Exception ignored) {
    }
  }
}

public static void pushEncryptedMessage(final TextSecureEnvelope envelope){
  while (true) {
    try {
      queue.put(envelope);
      return;
    }
 catch (    final InterruptedException e) {
    }
  }
}

public static int randomRangeInt(int min,int max){
  return (int)(Math.random() < 0.5 ? ((1 - Math.random()) * (max - min) + min) : (Math.random() * (max - min) + min));
}

public void test_simplePrematureClose(){
  Striterator iter=new Striterator(m_data.iterator());
  int i=0;
  while (iter.hasNext()) {
    iter.next();
    if (++i == 10) {
      iter.close();
      assertTrue(!iter.hasNext());
    }
  }
  assertTrue(!iter.isOpen());
  assertTrue(i == 10);
}

public void pushDrawList(PspGeList list){
synchronized (drawListQueue) {
    drawListQueue.add(list);
  }
}

private void populateTaskList(Volume source,Map<BlockMirror,Volume> groupMirrorSourceMap,TaskList taskList,String taskId,ResourceOperationTypeEnum operationType){
  Set<URI> groupSet=new HashSet<URI>();
  addTask(taskList,source,taskId,operationType);
  for (  Entry<BlockMirror,Volume> entry : groupMirrorSourceMap.entrySet()) {
    BlockMirror mirror=entry.getKey();
    Volume mirrorSource=entry.getValue();
    if (source.isInCG() && null != taskList.getTaskList()) {
      groupSet.add(mirrorSource.getConsistencyGroup());
    }
  }
  List<BlockConsistencyGroup> groups=_dbClient.queryObject(BlockConsistencyGroup.class,groupSet);
  for (  BlockConsistencyGroup group : groups) {
    addTask(taskList,group,taskId,operationType);
  }
}

public static Tuple max(Iterator tuples,String field,Comparator cmp){
  Tuple t=null, tmp;
  Object min=null;
  if (tuples.hasNext()) {
    t=(Tuple)tuples.next();
    min=t.get(field);
  }
  while (tuples.hasNext()) {
    tmp=(Tuple)tuples.next();
    Object obj=tmp.get(field);
    if (cmp.compare(obj,min) > 0) {
      t=tmp;
      min=obj;
    }
  }
  return t;
}

public String clusterDefinitionsTipText(){
  return "The clusters to use.";
}

public void testConstructorSignBytesPositive1(){
  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15};
  int aSign=1;
  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,aNumber.signum());
}

public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY){
  if (mFlywheel && !isFinished()) {
    float oldVelocityX=mScrollerX.mCurrVelocity;
    float oldVelocityY=mScrollerY.mCurrVelocity;
    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {
      velocityX+=oldVelocityX;
      velocityY+=oldVelocityY;
    }
  }
  mMode=FLING_MODE;
  mScrollerX.fling(startX,velocityX,minX,maxX,overX);
  mScrollerY.fling(startY,velocityY,minY,maxY,overY);
}

public Map<String,Object> convertDataToObjects(Map<String,String> data){
  Map<String,Object> results=new HashMap<>();
  if (data != null) {
    for (    String key : data.keySet()) {
      results.put(key,data.get(key));
    }
  }
  return results;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 178) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public void addListener(NavigatorListener listener){
  listeners.add(listener);
}

public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}

public double patience(int k,F f,int N){
  double pf=p(f);
  BinomialDistribution dist=new BinomialDistribution(null,N,pf);
  double p0=Math.pow(1 - pf,N);
  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);
}

public static List seriesNameListFromDataArray(Object[][] data){
  int seriesCount=data.length;
  List seriesNameList=new java.util.ArrayList(seriesCount);
  for (int i=0; i < seriesCount; i++) {
    seriesNameList.add("Series " + (i + 1));
  }
  return seriesNameList;
}

@Override public int read(char b[],int off,int len) throws IOException {
  ensureOpen();
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return 0;
  }
  if (pos >= count) {
    return -1;
  }
  if (pos + len > count) {
    len=count - pos;
  }
  if (len <= 0) {
    return 0;
  }
  System.arraycopy(buf,pos,b,off,len);
  pos+=len;
  return len;
}

public static void CF6(double[] x,double[] f,double[] c,int nx){
  double sum1=0.0;
  double sum2=0.0;
  double yj;
  for (int j=2; j <= nx; j++) {
    if (j % 2 == 1) {
      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);
      sum1+=yj * yj;
    }
 else {
      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);
      sum2+=yj * yj;
    }
  }
  f[0]=x[0] + sum1;
  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;
  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));
  c[1]=x[3] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));
}

public static void f(String tag,String msg,Object... args){
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}

private static void expandNumberAt(String numberString,int startIndex,WordRelation wordRelation){
  expandNumber(numberString.substring(startIndex,numberString.length()),wordRelation);
}

public static boolean nullEquals(String s1,String s2){
  return (s1 == null ? s2 == null : s1.equals(s2));
}

@Override public void run(){
  MultipleObjectsBundle data=generator.loadData();
  if (LOG.isVerbose()) {
    LOG.verbose("Writing output ...");
  }
  try {
    if (outputFile.exists() && LOG.isVerbose()) {
      LOG.verbose("The file " + outputFile + " already exists, "+ "the generator result will be APPENDED.");
    }
    try (OutputStreamWriter outStream=new FileWriter(outputFile,true)){
      writeClusters(outStream,data);
    }
   }
 catch (  IOException e) {
    throw new AbortException("IO Error in data generator.",e);
  }
  if (LOG.isVerbose()) {
    LOG.verbose("Done.");
  }
}

private boolean usedAllRule17Directors(Set<String> allocatedDirectors,PortAllocationContext context){
  Set<String> rule17Directors=getRule17Directors(context);
  for (  String director : allocatedDirectors) {
    rule17Directors.remove(director);
  }
  return rule17Directors.isEmpty();
}

public void stop(){
synchronized (privateInstanceLock) {
    if (connectionAcceptThread == null) {
      return;
    }
  }
  isStopped.set(true);
  try {
    connectionAcceptThread.interrupt();
    connectionAcceptThread.join();
  }
 catch (  InterruptedException e) {
  }
  try {
    serverSocket.close();
  }
 catch (  IOException e) {
  }
}

private static String expandSystemIdStrictOn(String systemId,String baseSystemId) throws URI.MalformedURIException {
  URI systemURI=new URI(systemId,true);
  if (systemURI.isAbsoluteURI()) {
    return systemId;
  }
  URI baseURI=null;
  if (baseSystemId == null || baseSystemId.length() == 0) {
    baseURI=getUserDir();
  }
 else {
    baseURI=new URI(baseSystemId,true);
    if (!baseURI.isAbsoluteURI()) {
      baseURI.absolutize(getUserDir());
    }
  }
  systemURI.absolutize(baseURI);
  return systemURI.toString();
}

public static void free(DMessage msg){
  int index=size2Index(msg.getSize());
  msg.clear();
  if (index < 0)   ;
 else   if (m_cache[index] != null)   ;
 else   m_cache[index]=msg;
}

public boolean equalsIgnoreCase(final StrBuilder other){
  if (this == other) {
    return true;
  }
  if (this.size != other.size) {
    return false;
  }
  final char thisBuf[]=this.buffer;
  final char otherBuf[]=other.buffer;
  for (int i=size - 1; i >= 0; i--) {
    final char c1=thisBuf[i];
    final char c2=otherBuf[i];
    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
      return false;
    }
  }
  return true;
}

protected static Long convertUuidToLong(UUID uuid){
  if (uuid == null) {
    return null;
  }
  Long convertedUuid;
  if (uuid.version() == 1) {
    convertedUuid=uuid.timestamp();
  }
 else {
    convertedUuid=uuid.getMostSignificantBits();
  }
  return convertedUuid;
}

public void addVMArguments(String vmArgumentName,String vmArgumentValue){
  VmArgumentData vmArg=new VmArgumentData(vmArgumentName,vmArgumentValue);
  vmSet.add(vmArg);
}

private void applyTo(ClassVisitor v,Field f){
  if (Log.isLoggingOn()) {
    Log.logLine(String.format("Visiting field %s",f.toGenericString()));
  }
  v.visit(f);
}

public void testCompareToEqualNeg(){
  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  int aSign=-1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  assertEquals(0,aNumber.compareTo(bNumber));
}

public void testScreenshot() throws Exception {
  Log.d(LOG_TAG,"starting testScreenshot");
  ScreenshotStubActivity activity=getActivity();
  assertNotNull(activity);
  File screenshotDir=getScreenshotDir();
  NewScreenshotObserver observer=new NewScreenshotObserver(screenshotDir.getAbsolutePath());
  observer.startWatching();
  takeScreenshot();
  if (observer.getCreatedPath() == null) {
synchronized (observer) {
      observer.wait(SCREEN_WAIT_TIME_SEC * 1000);
    }
  }
  assertNotNull(String.format("Could not find screenshot after %d seconds",SCREEN_WAIT_TIME_SEC),observer.getCreatedPath());
  File screenshotFile=new File(screenshotDir,observer.getCreatedPath());
  try {
    assertTrue(String.format("Detected new screenshot %s but its not a file",screenshotFile.getName()),screenshotFile.isFile());
    assertTrue(String.format("Detected new screenshot %s but its not an image",screenshotFile.getName()),isValidImage(screenshotFile));
  }
  finally {
    screenshotFile.delete();
  }
}

public TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI snapSessionURI,SnapshotSessionUnlinkTargetsParam param){
  return unlinkTargetVolumesFromSnapshotSession(snapSessionURI,param,OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET);
}

private List reverse(List seq){
  LinkedList newSeq=new LinkedList();
  for (Iterator i=seq.iterator(); i.hasNext(); ) {
    DirectedEdge de=(DirectedEdge)i.next();
    newSeq.addFirst(de.getSym());
  }
  return newSeq;
}

protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){
  Variable var=new Variable();
  var.setQName(uniquePseudoVarName);
  var.setIsGlobal(isGlobal);
  if (isGlobal) {
    ElemTemplateElement elem=getElemFromExpression(wi);
    StylesheetRoot root=elem.getStylesheetRoot();
    Vector vars=root.getVariablesAndParamsComposed();
    var.setIndex(vars.size() - 1);
  }
  AxesWalker walker=wi.getFirstWalker();
  for (int i=0; i < numSteps; i++) {
    assertion(null != walker,"Walker should not be null!");
    walker=walker.getNextWalker();
  }
  if (null != walker) {
    FilterExprWalker few=new FilterExprWalker(wi);
    few.setInnerExpression(var);
    few.exprSetParent(wi);
    few.setNextWalker(walker);
    walker.setPrevWalker(few);
    wi.setFirstWalker(few);
    return wi;
  }
 else {
    FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var);
    feis.exprSetParent(wi.exprGetParent());
    return feis;
  }
}

@Deprecated @Override public String readLine() throws IOException {
  StringBuilder b=new StringBuilder(0);
  int chr;
  while ((chr=read()) >= 0) {
    if (chr != '\n') {
      b.append((char)chr);
    }
 else {
      return b.toString();
    }
  }
  return b.toString();
}

private void addToScene(final Node items){
  collection.add(items);
}

public String documentationHomePageUrl(){
  return properties.getProperty("doc.homepage.url");
}

public static boolean hasTaxonomyInfo(SequencesReader reader){
  final File taxonFile=new File(reader.path(),TAXONOMY_FILE);
  final File mappingFile=new File(reader.path(),TAXONOMY_TO_SEQUENCE_FILE);
  if (taxonFile.exists() && mappingFile.exists()) {
    return true;
  }
 else   if (taxonFile.exists() || mappingFile.exists()) {
    throw new NoTalkbackSlimException("Reference SDF does not contain both taxonomy and sequences lookup");
  }
 else {
    return false;
  }
}

public void removeSelectionListener(final SelectionListener listener){
  checkWidget();
  if (listener == null) {
    SWT.error(SWT.ERROR_NULL_ARGUMENT);
  }
  listOfSelectionListeners.remove(listener);
}

public void replace(ClassNode type,int n){
  remove(n);
  push(type);
}

public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {
  submitCycle=true;
  EntitiesModel model=(EntitiesModel)getModel();
  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);
  String universalId=(String)getPageSessionAttribute(UNIVERSAL_ID);
  try {
    Map oldValues=model.getAttributeValues(universalId,false);
    Map values=prop.getAttributeValues(oldValues,true,model);
    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);
    model.modifyEntity(curRealm,universalId,values);
    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());
  }
  forwardTo();
}

private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){
  final double latitude=point.getLatitude();
  final double longitude=point.getLongitude();
  final double sinLatitude=Math.sin(latitude);
  final double cosLatitude=Math.cos(latitude);
  final double sinLongitude=Math.sin(longitude);
  final double cosLongitude=Math.cos(longitude);
  double arcDistance=0.0;
  Double prevAngle=null;
  for (  final GeoPoint polyPoint : polyPoints) {
    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (angle == null) {
      return null;
    }
    if (prevAngle != null) {
      double angleDelta=angle - prevAngle;
      if (angleDelta < -Math.PI) {
        angleDelta+=Math.PI * 2.0;
      }
      if (angleDelta > Math.PI) {
        angleDelta-=Math.PI * 2.0;
      }
      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
        return null;
      }
      arcDistance+=angleDelta;
    }
    prevAngle=angle;
  }
  if (prevAngle != null) {
    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);
    if (lastAngle == null) {
      return null;
    }
    double angleDelta=lastAngle - prevAngle;
    if (angleDelta < -Math.PI) {
      angleDelta+=Math.PI * 2.0;
    }
    if (angleDelta > Math.PI) {
      angleDelta-=Math.PI * 2.0;
    }
    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {
      return null;
    }
    arcDistance+=angleDelta;
  }
  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {
    return null;
  }
  return arcDistance > 0.0;
}

private Node deleteMax(Node x){
  if (x.right == null)   return x.left;
  x.right=deleteMax(x.right);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}

public void clear(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    for (Node<E> f=first; f != null; ) {
      f.item=null;
      Node<E> n=f.next;
      f.prev=null;
      f.next=null;
      f=n;
    }
    first=last=null;
    count=0;
    notFull.signalAll();
  }
  finally {
    lock.unlock();
  }
}

protected void onProgress(int itemcount,int size){
}

private TreeNode(long nodeValue,SnmpMibAgent agent,TreeNode sup){
  this.nodeValue=nodeValue;
  this.parent=sup;
  agents.addElement(agent);
}

public Week(Date time){
  this(time,TimeZone.getDefault(),Locale.getDefault());
}

public CodeAttribute createCode(){
  CodeAttribute code=new CodeAttribute();
  for (int i=0; i < _attributes.size(); i++) {
    Attribute attr=_attributes.get(i);
    if (attr instanceof CodeAttribute)     return (CodeAttribute)attr;
  }
  return null;
}

public BinaryOut(String filename){
  try {
    OutputStream os=new FileOutputStream(filename);
    out=new BufferedOutputStream(os);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}

protected ObjectStreamClass readClassDescriptor() throws IOException, ClassNotFoundException {
  ObjectStreamClass newClassDesc=new ObjectStreamClass();
  String name=input.readUTF();
  if (name.length() == 0) {
    throw new IOException("The stream is corrupted");
  }
  newClassDesc.setName(name);
  newClassDesc.setSerialVersionUID(input.readLong());
  newClassDesc.setFlags(input.readByte());
  if (descriptorHandle == -1) {
    descriptorHandle=nextHandle();
  }
  registerObjectRead(newClassDesc,descriptorHandle,false);
  readFieldDescriptors(newClassDesc);
  return newClassDesc;
}

public static boolean createNewFile(File targetFile){
  if (targetFile.exists())   targetFile.delete();
  try {
    return targetFile.createNewFile();
  }
 catch (  IOException e) {
    return false;
  }
}

public void testZeroOne(){
  byte aBytes[]={0};
  byte bBytes[]={1};
  int aSign=0;
  int bSign=1;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

protected int executePrepareStatement(List<Column> columns,PreparedStatement statement) throws SQLException {
  int bindNo=1;
  for (  Column c : columns) {
    setColumnValue(statement,bindNo,c);
    bindNo++;
  }
  return statement.executeUpdate();
}

public Config(SamlAuthorityConfiguration samlAuthorityConfig,TokenRestrictions tokenRestrictions,Collection<List<Certificate>> validCerts,long clockTolerance,Collection<IDPConfig> inExternalIdps){
  Validate.notNull(samlAuthorityConfig);
  Validate.notNull(tokenRestrictions);
  Validate.notEmpty(validCerts);
  List<Certificate> authorityCert=samlAuthorityConfig.getSigningCertificateChain();
  boolean authorityCertInValidCerts=false;
  for (  List<Certificate> currentChain : validCerts) {
    Validate.notEmpty(currentChain);
    Validate.noNullElements(currentChain);
    if (!authorityCertInValidCerts && currentChain.equals(authorityCert)) {
      authorityCertInValidCerts=true;
    }
  }
  Validate.isTrue(authorityCertInValidCerts,"signing certificate chain is not in valid chains.");
  Validate.isTrue(clockTolerance >= 0);
  this.samlAuthorityConfig=samlAuthorityConfig;
  this.validCerts=validCerts;
  this.clockTolerance=clockTolerance;
  this.tokenRestrictions=tokenRestrictions;
  HashMap<String,IDPConfig> idpsSet=new HashMap<String,IDPConfig>();
  if (inExternalIdps != null) {
    for (    IDPConfig conf : inExternalIdps) {
      if (conf != null) {
        idpsSet.put(conf.getEntityID(),conf);
      }
    }
  }
  this.externalIdps=Collections.unmodifiableMap(idpsSet);
}

public static void checkNotEmpty(String string){
  if (string.isEmpty()) {
    throw new NullPointerException();
  }
}

protected void addCommonComponent(XMLComponent component){
  if (fCommonComponents.contains(component)) {
    return;
  }
  fCommonComponents.add(component);
  addRecognizedParamsAndSetDefaults(component);
}

public void cancelUnnamedTasks(){
  if (unnamedTaskExecutor != null) {
    unnamedTaskExecutor.shutdownNow();
  }
}

public static double[] minmax(List<Double> values){
  if (values.size() == 0) {
    return new double[2];
  }
  double min=values.get(0);
  double max=min;
  int length=values.size();
  for (int i=1; i < length; i++) {
    double value=values.get(i);
    min=Math.min(min,value);
    max=Math.max(max,value);
  }
  return new double[]{min,max};
}

public Criteria createCriteria(){
  Criteria criteria=createCriteriaInternal();
  if (oredCriteria.size() == 0) {
    oredCriteria.add(criteria);
  }
  return criteria;
}

private char readEscapeCharacter() throws IOException {
  if (pos == limit && !fillBuffer(1)) {
    throw syntaxError("Unterminated escape sequence");
  }
  char escaped=buffer[pos++];
switch (escaped) {
case 'u':
    if (pos + 4 > limit && !fillBuffer(4)) {
      throw syntaxError("Unterminated escape sequence");
    }
  char result=0;
for (int i=pos, end=i + 4; i < end; i++) {
  char c=buffer[i];
  result<<=4;
  if (c >= '0' && c <= '9') {
    result+=(c - '0');
  }
 else   if (c >= 'a' && c <= 'f') {
    result+=(c - 'a' + 10);
  }
 else   if (c >= 'A' && c <= 'F') {
    result+=(c - 'A' + 10);
  }
 else {
    throw new NumberFormatException("\\u" + new String(buffer,pos,4));
  }
}
pos+=4;
return result;
case 't':
return '\t';
case 'b':
return '\b';
case 'n':
return '\n';
case 'r':
return '\r';
case 'f':
return '\f';
case '\n':
lineNumber++;
lineStart=pos;
case '\'':
case '"':
case '\\':
case '/':
return escaped;
default :
throw syntaxError("Invalid escape sequence");
}
}

private void updateParamsForAuth(String[] authNames,List<Pair> queryParams,Map<String,String> headerParams){
  for (  String authName : authNames) {
    Authentication auth=authentications.get(authName);
    if (auth == null)     throw new RuntimeException("Authentication undefined: " + authName);
    auth.applyToParams(queryParams,headerParams);
  }
}

private void fixSpannedWithSpaces(SpannableStringBuilder builder,int widthMeasureSpec,int heightMeasureSpec){
  long startFix=System.currentTimeMillis();
  FixingResult result=addSpacesAroundSpansUntilFixed(builder,widthMeasureSpec,heightMeasureSpec);
  if (result.fixed) {
    removeUnneededSpaces(widthMeasureSpec,heightMeasureSpec,builder,result);
  }
 else {
    fallbackToString(widthMeasureSpec,heightMeasureSpec);
  }
  long fixDuration=System.currentTimeMillis() - startFix;
  Logger.d(TAG,"fixSpannedWithSpaces() duration in ms: " + fixDuration);
}

public EventsIntegrationTest(){
  setResponseLogLengthLimit(1000);
  dateFormat=new SimpleDateFormat("yyyy-MM-dd");
  Calendar cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-1);
  yesterday=dateFormat.format(cal.getTime());
  yesterday+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,0);
  today=dateFormat.format(cal.getTime());
  today+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,1);
  tomorrow=dateFormat.format(cal.getTime());
  tomorrow+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,3);
  tomorrowPlus3=dateFormat.format(cal.getTime());
  tomorrowPlus3+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-3);
  yesterdayMinus3=dateFormat.format(cal.getTime());
  yesterdayMinus3+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,5);
  tomorrowPlus5=dateFormat.format(cal.getTime());
  tomorrowPlus5+="T00:00:00+0000";
  cal=Calendar.getInstance();
  cal.add(Calendar.DATE,-5);
  yesterdayMinus5=dateFormat.format(cal.getTime());
  yesterdayMinus5+="T00:00:00+0000";
  experiment=ExperimentFactory.createExperiment();
  experiment.startTime=yesterdayMinus3;
  experiment.endTime=tomorrowPlus3;
  experiment.samplingPercent=1.0;
  experiment.label="experiment";
  experiment.applicationName=QBO + UUID.randomUUID();
  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");
  experiment.setSerializationStrategy(experimentComparisonStrategy);
}

private void removeBookmarkTrackingIcons(){
  if (trackingIcons != null) {
    for (Iterator i=trackingIcons.iterator(); i.hasNext(); ) {
      GutterIconImpl ti=(GutterIconImpl)i.next();
      if (ti.getIcon() == bookmarkIcon) {
        i.remove();
      }
    }
  }
}

public SimpleMetricGroup(GroupName name,Stream<? extends Metric> i){
  this(name,i.collect(Collectors.<Metric>toList()));
}

public boolean isInside(Point point){
  return bounds.contains(point);
}

private void resolveProtocols(ClassLoader loader){
  ServiceLoader<ProtocolManagerFactory> serviceLoader=ServiceLoader.load(ProtocolManagerFactory.class,loader);
  loadProtocolManagerFactories(serviceLoader);
}

public static List<InetAddress> hostAddresses(){
  List<InetAddress> addrList=new ArrayList<>();
  Enumeration<NetworkInterface> IFCs=null;
  try {
    IFCs=NetworkInterface.getNetworkInterfaces();
  }
 catch (  SocketException ex) {
    log.error("Unable to get network interfaces.",ex);
  }
  if (IFCs != null) {
    while (IFCs.hasMoreElements()) {
      NetworkInterface IFC=IFCs.nextElement();
      try {
        if (IFC.isUp()) {
          Enumeration<InetAddress> addresses=IFC.getInetAddresses();
          while (addresses.hasMoreElements()) {
            InetAddress address=addresses.nextElement();
            if (!address.isLoopbackAddress() && !address.isLinkLocalAddress()) {
              addrList.add(address);
            }
          }
        }
      }
 catch (      SocketException ex) {
        log.error("Unable to read network interface {}.",IFC.toString(),ex);
      }
    }
  }
  return addrList;
}

public final static int caculateInSampleSize(BitmapFactory.Options options,int rqsW,int rqsH){
  final int height=options.outHeight;
  final int width=options.outWidth;
  int inSampleSize=1;
  if (rqsW == 0 || rqsH == 0)   return 1;
  if (height > rqsH || width > rqsW) {
    final int heightRatio=Math.round((float)height / (float)rqsH);
    final int widthRatio=Math.round((float)width / (float)rqsW);
    inSampleSize=heightRatio < widthRatio ? heightRatio : widthRatio;
  }
  return inSampleSize;
}

public boolean hasStatus(final StatusID status){
  return statuses.contains(status);
}

@Override public String toString(){
  return "SparseFeatureStore{" + "instanceList=" + instanceList + ", outcomeList="+ outcomeList+ ", weightList="+ weightList+ ", sequenceIds="+ sequenceIds+ ", sequencePositions="+ sequencePositions+ ", addingAnotherInstancesAllowed="+ addingAnotherInstancesAllowed+ ", totalNonNullFeaturesCount="+ totalNonNullFeaturesCount+ '}';
}

static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){
  if (sha == null) {
    init();
  }
  int pos=0;
  int iteration=1;
  byte[] digest;
  while (pos < out.length) {
    byte[] pref=new byte[iteration];
    Arrays.fill(pref,(byte)(64 + iteration++));
    sha.update(pref);
    sha.update(secret);
    sha.update(seed);
    md5.update(secret);
    md5.update(sha.digest());
    digest=md5.digest();
    if (pos + 16 > out.length) {
      System.arraycopy(digest,0,out,pos,out.length - pos);
      pos=out.length;
    }
 else {
      System.arraycopy(digest,0,out,pos,16);
      pos+=16;
    }
  }
}

public void addChannelMap(ChannelMap channelMap){
  if (!mChannelMaps.contains(channelMap)) {
    mChannelMaps.add(channelMap);
    int index=mChannelMaps.indexOf(channelMap);
    fireIntervalAdded(this,index,index);
    broadcast(new ChannelMapEvent(channelMap,Event.ADD));
  }
}

@Override public boolean add(E o){
  if (null == o) {
    throw new NullPointerException();
  }
  if (offer(o)) {
    return true;
  }
  throw new IllegalStateException();
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public Object putResource(Object key,Object value){
  return (objectCache.put(key,value));
}

public UidRange[] parseUidRange() throws DecodingException {
  CharacterValidator validator=new MessageSetCharValidator();
  String nextWord=consumeWord(validator,true);
  int commaPos=nextWord.indexOf(',');
  if (commaPos == -1) {
    return new UidRange[]{parseUidRange(nextWord)};
  }
  ArrayList<UidRange> rangeList=new ArrayList<UidRange>();
  int pos=0;
  while (commaPos != -1) {
    String range=nextWord.substring(pos,commaPos);
    UidRange set=parseUidRange(range);
    rangeList.add(set);
    pos=commaPos + 1;
    commaPos=nextWord.indexOf(',',pos);
  }
  String range=nextWord.substring(pos);
  rangeList.add(parseUidRange(range));
  List<UidRange> merged=UidRange.mergeRanges(rangeList);
  return merged.toArray(new UidRange[merged.size()]);
}

private String replaceSuffix(String value,String toReplace,String changeTo){
  String vvalue;
  if ((value == null) || (toReplace == null) || (changeTo == null)) {
    return value;
  }
  vvalue=removeSuffix(value,toReplace);
  if (value.equals(vvalue)) {
    return value;
  }
 else {
    return vvalue + changeTo;
  }
}

private void executeClaimedTask(ClaimedTask claimedTask){
  if (!claimedTask.setStartTime(new Date())) {
    _log.info("Claimed task is overdue; range not scanned: {}",claimedTask.getTask());
    return;
  }
  ScanRangeTask task=claimedTask.getTask();
  boolean releaseTask=false;
  try {
    _scanWorkflow.renewScanRangeTasks(ImmutableList.of(task),QUEUE_RENEW_TTL);
    releaseTask=asyncRangeScan(task);
  }
  finally {
    unclaimTask(claimedTask,releaseTask);
    _backgroundService.submit(_startScansIfAvailableRunnable);
  }
}

private static boolean createNaviDirectory(){
  final File dir=new File(ConfigHelper.getConfigurationDirectory(Constants.COMPANY_NAME,Constants.PROJECT_NAME));
  return dir.exists() || dir.mkdir();
}

public void updateButtonActionPerformed(){
  if (!readReceiveDelay()) {
    return;
  }
  if (!readPulseWidth()) {
    return;
  }
  if (!checkConsistency()) {
    return;
  }
  if (curNode.getNodeType() != nodeType) {
    curNode.setNodeType(nodeType);
  }
  setNodeParameters();
  changedNode=true;
  editMode=false;
  curNode=null;
  addButton.setVisible(true);
  editButton.setVisible(true);
  deleteButton.setVisible(true);
  doneButton.setVisible(true);
  updateButton.setVisible(false);
  cancelButton.setVisible(false);
  nodeAddrField.setVisible(true);
  nodeAddrStatic.setVisible(false);
  statusText2.setText(stdStatus2);
  statusText3.setText(stdStatus3);
  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));
  errorInStatus1=true;
}

public static Class toClass(ClassFile cf,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {
  try {
    byte[] b=toBytecode(cf);
    Method method;
    Object[] args;
    if (domain == null) {
      method=defineClass1;
      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length)};
    }
 else {
      method=defineClass2;
      args=new Object[]{cf.getName(),b,new Integer(0),new Integer(b.length),domain};
    }
    return toClass2(method,loader,args);
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  java.lang.reflect.InvocationTargetException e) {
    throw new CannotCompileException(e.getTargetException());
  }
catch (  Exception e) {
    throw new CannotCompileException(e);
  }
}

public Iterator<Target> targetIterator(){
  return targetList.iterator();
}

private void fitSizeOfScrolledContent(){
  Point p=scrollComposite.getSize();
  main.setSize(main.computeSize(p.x,SWT.DEFAULT));
}

public int hashCode(){
  return name.hashCode();
}

private static Map<String,SnmpOid> buildPoolIndexMap(SnmpCachedData cached){
  if (cached == null)   return Collections.emptyMap();
  final SnmpOid[] indexes=cached.indexes;
  final Object[] datas=cached.datas;
  final int len=indexes.length;
  final Map<String,SnmpOid> m=new HashMap<>(len);
  for (int i=0; i < len; i++) {
    final SnmpOid index=indexes[i];
    if (index == null)     continue;
    final MemoryPoolMXBean mpm=(MemoryPoolMXBean)datas[i];
    if (mpm == null)     continue;
    final String name=mpm.getName();
    if (name == null)     continue;
    m.put(name,index);
  }
  return m;
}

public DCryptoStrength(JFrame parent) throws CryptoException {
  super(parent,res.getString("DCryptoStrength.Title"),ModalityType.DOCUMENT_MODAL);
  initComponents();
}

private Component createSeparator(){
  JSeparator sep=new JSeparator(SwingConstants.VERTICAL);
  sep.setPreferredSize(new Dimension(2,30));
  sep.setMinimumSize(new Dimension(2,30));
  return sep;
}

public void add(final T object){
synchronized (mLock) {
    mList.add(object);
  }
  notifyDataSetChanged();
}

public void build(RealmResults<T> results){
  int xIndex=0;
  for (  T object : results) {
    mValues.add(buildEntryFromResultObject(object,xIndex++));
  }
}

public byte[] generateSignature() throws CryptoException, DataLengthException {
  contentDigest.doFinal(mDash,mDash.length - hLen - sLen);
  if (sLen != 0) {
    random.nextBytes(salt);
    System.arraycopy(salt,0,mDash,mDash.length - sLen,sLen);
  }
  byte[] h=new byte[hLen];
  contentDigest.update(mDash,0,mDash.length);
  contentDigest.doFinal(h,0);
  block[block.length - sLen - 1- hLen- 1]=0x01;
  System.arraycopy(salt,0,block,block.length - sLen - hLen- 1,sLen);
  byte[] dbMask=maskGeneratorFunction1(h,0,h.length,block.length - hLen - 1);
  for (int i=0; i != dbMask.length; i++) {
    block[i]^=dbMask[i];
  }
  block[0]&=(0xff >> ((block.length * 8) - emBits));
  System.arraycopy(h,0,block,block.length - hLen - 1,hLen);
  block[block.length - 1]=trailer;
  byte[] b=cipher.processBlock(block,0,block.length);
  clearBlock(block);
  return b;
}

public static double[][] computeWeightMatrix(final int quanth,final int quants,final int quantb){
  final int dim=quanth * quants * quantb;
  assert (dim > 0);
  final double[][] m=new double[dim][dim];
  for (int x=0; x < dim; x++) {
    final int hx=x / (quantb * quants);
    final int sx=(x / quantb) % quants;
    final int bx=x % quantb;
    for (int y=x; y < dim; y++) {
      final int hy=y / (quantb * quants);
      final int sy=(y / quantb) % quants;
      final int by=y % quantb;
      final double chx=Math.cos((hx + .5) / quanth * MathUtil.TWOPI);
      final double chy=Math.cos((hy + .5) / quanth * MathUtil.TWOPI);
      final double shx=MathUtil.cosToSin((hx + .5) / quanth * MathUtil.TWOPI,chx);
      final double shy=MathUtil.cosToSin((hy + .5) / quanth * MathUtil.TWOPI,chy);
      final double cos=chx * (sx + .5) / quants - chy * (sy + .5) / quants;
      final double sin=shx * (sx + .5) / quants - shy * (sy + .5) / quants;
      final double db=(bx - by) / (double)quantb;
      final double val=1. - Math.sqrt((db * db + sin * sin + cos * cos) / 5);
      m[x][y]=m[y][x]=val;
    }
  }
  return m;
}

public void testNegPosFirstLonger(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={73,-92,-48,4,12,6,4,32,48,64,0,8,3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

@Override public void write(byte[] b,int off,int len){
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
synchronized (this) {
    int newcount=count + len;
    int remaining=len;
    int inBufferPos=count - filledBufferSum;
    while (remaining > 0) {
      int part=Math.min(remaining,currentBuffer.length - inBufferPos);
      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);
      remaining-=part;
      if (remaining > 0) {
        needNewBuffer(newcount);
        inBufferPos=0;
      }
    }
    count=newcount;
  }
}

public static void openFileIntent(Context context,File openFile){
  if (context != null && openFile.exists()) {
    try {
      Intent intent=getFileIntent(context,openFile);
      context.startActivity(intent);
    }
 catch (    Exception e) {
      GlobalUtils.logThis(TAG,"openFileIntent Exception",e);
    }
  }
}

public static java.sql.Date toSqlDate(String date){
  java.util.Date newDate=toDate(date,"00:00:00");
  if (newDate != null) {
    return new java.sql.Date(newDate.getTime());
  }
 else {
    return null;
  }
}

private synchronized void rebuildJournal() throws IOException {
  if (journalWriter != null) {
    journalWriter.close();
  }
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));
  try {
    writer.write(MAGIC);
    writer.write("\n");
    writer.write(VERSION_1);
    writer.write("\n");
    writer.write(Integer.toString(appVersion));
    writer.write("\n");
    writer.write(Integer.toString(valueCount));
    writer.write("\n");
    writer.write("\n");
    for (    Entry entry : lruEntries.values()) {
      if (entry.currentEditor != null) {
        writer.write(DIRTY + ' ' + entry.key+ '\n');
      }
 else {
        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');
      }
    }
  }
  finally {
    writer.close();
  }
  if (journalFile.exists()) {
    renameTo(journalFile,journalFileBackup,true);
  }
  renameTo(journalFileTmp,journalFile,false);
  journalFileBackup.delete();
  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));
}

public static int round(final float value){
  final int bits=Float.floatToRawIntBits(value);
  final int biasedExp=bits >> 23 & 0xFF;
  final int shift=23 - 1 + MAX_FLOAT_EXPONENT - biasedExp;
  if ((shift & -32) == 0) {
    int extendedMantissa=0x00800000 | bits & 0x007FFFFF;
    if (bits < 0) {
      extendedMantissa=-extendedMantissa;
    }
    return (extendedMantissa >> shift) + 1 >> 1;
  }
 else {
    return (int)value;
  }
}

public static PlainText plain(short text){
  return plain(Integer.toString(text));
}

public AttributeInfo copy(ConstPool newCp,Map classnames){
  Copier copier=new Copier(info,constPool,newCp,classnames);
  try {
    copier.parameters();
    return new ParameterAnnotationsAttribute(newCp,getName(),copier.close());
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString());
  }
}

private String createComponentChanges(){
  StringBuilder builder=new StringBuilder();
  for (  ServiceCatalogDiff serviceCatalogDiff : diffList) {
    builder.append(createApiChanges(serviceCatalogDiff));
  }
  return builder.toString();
}

public static synchronized void it(String description,UnsafeBlock block){
  it(description,identity(),block);
}

public static boolean isWritable(final File file,final boolean makeDirs){
  if (file == null) {
    Log.e(FileUtils.class,"isWritable(): Null or Empty parameter given");
    return false;
  }
  final String fileParentDir=file.getParent();
  if (!TextUtils.isEmpty(fileParentDir)) {
    final File fileDir=new File(fileParentDir);
    if (!fileDir.exists()) {
      if (makeDirs)       return makeDirsForFile(file);
 else       return false;
    }
  }
  boolean isWritable=true;
  if (file.exists())   isWritable=file.canWrite();
 else {
    try {
      isWritable=file.createNewFile();
    }
 catch (    IOException e) {
    }
    if (isWritable)     isWritable=file.delete();
  }
  return isWritable;
}

public String toString(){
  return oid.toString();
}

private static void createOrgAuthConfig(String realmName) throws Exception {
  String classMethod="UpgradeUtils:createOrgAuthConfig: ";
  OrganizationConfigManager org=new OrganizationConfigManager(ssoToken,realmName);
  ServiceConfig orgConfig=org.getServiceConfig(AUTH_SERVICE_NAME);
  if (orgConfig != null) {
    Map aa=orgConfig.getAttributes();
    if (debug.messageEnabled()) {
      debug.message(classMethod + "Org is :" + realmName);
      debug.message(classMethod + "Attribute Map is :" + aa);
    }
    String orgName=realmName;
    if (LDAPUtils.isDN(realmName)) {
      orgName=LDAPUtils.rdnValueFromDn(realmName);
    }
    String authConfigName=orgName + "-authconfig";
    String adminAuthConfigName=orgName + "-admin-authconfig";
    Set authConfigAttrValue=(Set)aa.get(ATTR_ORG_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message(classMethod + "authConfigAttrValue : " + authConfigAttrValue);
    }
    Set newVal=new HashSet();
    if (authConfigAttrValue.size() != 1 && !authConfigAttrValue.contains(authConfigName)) {
      newVal.add(authConfigName);
      orgConfig.replaceAttributeValues(ATTR_ORG_AUTH_MODULE,authConfigAttrValue,newVal);
    }
    Set adminConfigAttrValue=(Set)aa.get(ATTR_ADMIN_AUTH_MODULE);
    if (debug.messageEnabled()) {
      debug.message("adminauthConfigAttrValue : " + adminConfigAttrValue);
    }
    if (adminConfigAttrValue.size() != 1 && !adminConfigAttrValue.contains(adminAuthConfigName)) {
      newVal.clear();
      newVal.add(adminAuthConfigName);
      orgConfig.replaceAttributeValues(ATTR_ADMIN_AUTH_MODULE,adminConfigAttrValue,newVal);
    }
    aa=orgConfig.getAttributes();
    ServiceConfig s=org.getServiceConfig(AUTH_CONFIG_SERVICE);
    ServiceConfig authConfig=s.getSubConfig(NAMED_CONFIG);
    if (authConfig == null) {
      s.addSubConfig(NAMED_CONFIG,null,0,null);
      authConfig=s.getSubConfig(NAMED_CONFIG);
    }
    Map aMap=new HashMap();
    aMap.put(ATTR_AUTH_CONFIG,authConfigAttrValue);
    authConfig.addSubConfig(authConfigName,SUB_NAMED_CONFIG,0,aMap);
    aMap.clear();
    aMap.put(ATTR_AUTH_CONFIG,adminConfigAttrValue);
    authConfig.addSubConfig(adminAuthConfigName,SUB_NAMED_CONFIG,0,aMap);
  }
}

public void read(ByteCodeParser in) throws IOException {
  int length=in.readInt();
  _maxStack=in.readShort();
  _maxLocals=in.readShort();
  int codeLength=in.readInt();
  _code=new byte[codeLength];
  in.read(_code,0,codeLength);
  int exnCount=in.readShort();
  for (int i=0; i < exnCount; i++) {
    ExceptionItem exn=new ExceptionItem();
    exn.setStart(in.readShort() & 0xffff);
    exn.setEnd(in.readShort() & 0xffff);
    exn.setHandler(in.readShort() & 0xffff);
    exn.setType(in.readShort() & 0xffff);
    _exceptions.add(exn);
  }
  int attrCount=in.readShort();
  for (int i=0; i < attrCount; i++) {
    Attribute attr=in.parseAttribute();
    _attributes.add(attr);
  }
}

public void testSkip() throws Exception {
  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};
  TestInputStream tis=new TestInputStream(data);
  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());
  int expected=data.length;
  byte[] result=new byte[expected];
  int skipped=(int)cis.skip(2);
  int ind=skipped;
  int got=skipped + cis.read(result,0,1);
  while (true) {
    for (int j=0; j < got - ind; j++) {
      if (result[j] != data[ind + j]) {
        fail("read(byte[] b, int off, int len) " + "returned incorrect data: Expected " + data[ind + j] + ", got: "+ result[j]);
      }
    }
    if (got == expected) {
      break;
    }
 else     if (got > expected) {
      fail("The data returned by " + "read(byte[] b, int off, int len) " + "is larger than expected.");
    }
 else {
      ind=got;
      got+=cis.read(result,0,1);
    }
  }
  if ((got=cis.read(result,0,1)) != -1) {
    fail("read() should return -1 at the end of the stream. " + "Output is: " + got + ".");
  }
}

void addString(int c){
  if (strpos == str.length) {
    char newstr[]=new char[str.length + 128];
    System.arraycopy(str,0,newstr,0,str.length);
    str=newstr;
  }
  str[strpos++]=(char)c;
}

@Override public int hashCode(){
  return oid.hashCode();
}

public CholeskyDecomposition(Matrix Arg){
  double[][] A=Arg.getArray();
  n=Arg.getRowDimension();
  L=new double[n][n];
  isspd=(Arg.getColumnDimension() == n);
  for (int j=0; j < n; j++) {
    double[] Lrowj=L[j];
    double d=0.0;
    for (int k=0; k < j; k++) {
      double[] Lrowk=L[k];
      double s=0.0;
      for (int i=0; i < k; i++) {
        s+=Lrowk[i] * Lrowj[i];
      }
      Lrowj[k]=s=(A[j][k] - s) / L[k][k];
      d=d + s * s;
      isspd=isspd & (A[k][j] == A[j][k]);
    }
    d=A[j][j] - d;
    isspd=isspd & (d > 0.0);
    L[j][j]=Math.sqrt(Math.max(d,0.0));
    for (int k=j + 1; k < n; k++) {
      L[j][k]=0.0;
    }
  }
}

protected void findCandidateCrossings(S2Point a,S2Point b,List<Integer> candidateCrossings){
  Preconditions.checkState(indexComputed);
  ArrayList<S2CellId> cover=Lists.newArrayList();
  getCovering(a,b,false,cover);
  Set<Integer> uniqueSet=new HashSet<Integer>();
  getEdgesInParentCells(cover,uniqueSet);
  getEdgesInChildrenCells(a,b,cover,uniqueSet);
  candidateCrossings.clear();
  candidateCrossings.addAll(uniqueSet);
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return TRUE_AS_OF_SECS;
case 2:
  return SOURCE;
case 3:
return SYSTEM;
default :
return null;
}
}

public RepositoryLocation(String repositoryName,String[] pathComponents) throws MalformedRepositoryLocationException {
  if (repositoryName == null || repositoryName.isEmpty()) {
    throw new MalformedRepositoryLocationException("repositoryName must not contain null or empty!");
  }
  if (pathComponents == null) {
    throw new MalformedRepositoryLocationException("pathComponents must not be null!");
  }
  for (  String pathComp : pathComponents) {
    if (pathComp == null || pathComp.isEmpty()) {
      throw new MalformedRepositoryLocationException("path must not contain null or empty strings!");
    }
  }
  this.repositoryName=repositoryName;
  this.path=pathComponents;
}

public void addProperty(String key,String value){
  carbonProperties.setProperty(key,value);
}

protected JavaElementDelta createDeltaTree(IJavaElement element,JavaElementDelta delta){
  JavaElementDelta childDelta=delta;
  ArrayList ancestors=getAncestors(element);
  if (ancestors == null) {
    if (equalsAndSameParent(delta.getElement(),getElement())) {
      this.kind=delta.kind;
      this.changeFlags=delta.changeFlags;
      this.movedToHandle=delta.movedToHandle;
      this.movedFromHandle=delta.movedFromHandle;
    }
  }
 else {
    for (int i=0, size=ancestors.size(); i < size; i++) {
      IJavaElement ancestor=(IJavaElement)ancestors.get(i);
      JavaElementDelta ancestorDelta=new JavaElementDelta(ancestor);
      ancestorDelta.addAffectedChild(childDelta);
      childDelta=ancestorDelta;
    }
  }
  return childDelta;
}

@Override public String toString(){
  return getTitle();
}

public int size(){
  if (hmap == null) {
    return 0;
  }
  return hmap.size();
}

public static String replace(String inString,String oldPattern,String newPattern){
  if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
    return inString;
  }
  StringBuilder sb=new StringBuilder();
  int pos=0;
  int index=inString.indexOf(oldPattern);
  int patLen=oldPattern.length();
  while (index >= 0) {
    sb.append(inString.substring(pos,index));
    sb.append(newPattern);
    pos=index + patLen;
    index=inString.indexOf(oldPattern,pos);
  }
  sb.append(inString.substring(pos));
  return sb.toString();
}

public boolean coordinateInZone(Id<ActivityFacility> zoneID,Coord coordinate){
  Point point=MGC.xy2Point(coordinate.getX(),coordinate.getY());
  return pointInZone(zoneID,point);
}

public String associatorTipText(){
  return "The base associator to be used.";
}

public XwavesLabelfileReader(Reader reader) throws IOException {
  this.reader=new BufferedReader(reader);
  parseLabels();
  reader.close();
}

public static double parseDoubleDefault(String s,double def){
  if (s == null) {
    return def;
  }
  try {
    return Double.parseDouble(s);
  }
 catch (  NumberFormatException e) {
    return def;
  }
}

public static void registerApp(int application,String appName) throws AppIDException {
  if ((application & APP_ID_MASK) != application) {
    throw new InvalidAppIDValueException(application);
  }
  String oldApp=appIdMap.putIfAbsent(application,appName);
  if (oldApp != null && !oldApp.equals(appName)) {
    throw new AppIDInUseException(application,oldApp,appName);
  }
}

public boolean putProfile(Profile profile){
  return putProfile(profile,false);
}

public void print(char c){
  writer.print(c);
}

public void initBlockViews(){
  if (mWorkspaceView != null) {
    List<Block> rootBlocks=mWorkspace.getRootBlocks();
    ConnectionManager connManager=mWorkspace.getConnectionManager();
    for (int i=0; i < rootBlocks.size(); i++) {
      BlockGroup bg=mViewFactory.buildBlockGroupTree(rootBlocks.get(i),connManager,mTouchHandler);
      mWorkspaceView.addView(bg);
    }
  }
}

protected void clearAllTrails(SSOTokenID tokenID){
  boolean removed=false;
  String key=tokenID.toString();
synchronized (mapTokenIDs) {
    removed=(mapTokenIDs.remove(key) != null);
  }
}

public DNetscapeCaRevocationUrl(JDialog parent,byte[] value) throws IOException {
  super(parent);
  setTitle(res.getString("DNetscapeCaRevocationUrl.Title"));
  initComponents();
  prepopulateWithValue(value);
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

public static int[] parseNumberList(String listStr,int minVal,int maxVal,boolean allowZero){
  int[] values;
  if (listStr.indexOf(",") < 0) {
    values=new int[1];
    values[0]=parseIntRange(listStr,minVal,maxVal,allowZero);
  }
 else {
    String[] valueStrs=listStr.split(",");
    int len=valueStrs.length;
    values=new int[len];
    for (int i=0; i < len; i++) {
      values[i]=parseIntRange(valueStrs[i],minVal,maxVal,allowZero);
    }
  }
  return values;
}

public DirectoryOrFileNotFoundException(String entity,String name){
  super(String.format(_errorMessage,entity,name));
}

public void closeStream(){
  CarbonUtil.closeStreams(stream);
  executorService.shutdown();
}

void scramble(){
  initialSize=getSize();
  int a[]=new int[initialSize.height / 2];
  double f=initialSize.width / (double)a.length;
  for (int i=a.length; --i >= 0; ) {
    a[i]=(int)(i * f);
  }
  for (int i=a.length; --i >= 0; ) {
    int j=(int)(i * Math.random());
    int t=a[i];
    a[i]=a[j];
    a[j]=t;
  }
  arr=a;
}

private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){
  int i;
  if (av == null) {
switch (b[v] & 0xFF) {
case 'e':
      return v + 5;
case '@':
    return readAnnotationValues(v + 3,buf,true,null);
case '[':
  return readAnnotationValues(v + 1,buf,false,null);
default :
return v + 3;
}
}
switch (b[v++] & 0xFF) {
case 'I':
case 'J':
case 'F':
case 'D':
av.visit(name,readConst(readUnsignedShort(v),buf));
v+=2;
break;
case 'B':
av.visit(name,new Byte((byte)readInt(items[readUnsignedShort(v)])));
v+=2;
break;
case 'Z':
av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);
v+=2;
break;
case 'S':
av.visit(name,new Short((short)readInt(items[readUnsignedShort(v)])));
v+=2;
break;
case 'C':
av.visit(name,new Character((char)readInt(items[readUnsignedShort(v)])));
v+=2;
break;
case 's':
av.visit(name,readUTF8(v,buf));
v+=2;
break;
case 'e':
av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));
v+=4;
break;
case 'c':
av.visit(name,Type.getType(readUTF8(v,buf)));
v+=2;
break;
case '@':
v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));
break;
case '[':
int size=readUnsignedShort(v);
v+=2;
if (size == 0) {
return readAnnotationValues(v - 2,buf,false,av.visitArray(name));
}
switch (this.b[v++] & 0xFF) {
case 'B':
byte[] bv=new byte[size];
for (i=0; i < size; i++) {
bv[i]=(byte)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,bv);
--v;
break;
case 'Z':
boolean[] zv=new boolean[size];
for (i=0; i < size; i++) {
zv[i]=readInt(items[readUnsignedShort(v)]) != 0;
v+=3;
}
av.visit(name,zv);
--v;
break;
case 'S':
short[] sv=new short[size];
for (i=0; i < size; i++) {
sv[i]=(short)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,sv);
--v;
break;
case 'C':
char[] cv=new char[size];
for (i=0; i < size; i++) {
cv[i]=(char)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,cv);
--v;
break;
case 'I':
int[] iv=new int[size];
for (i=0; i < size; i++) {
iv[i]=readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,iv);
--v;
break;
case 'J':
long[] lv=new long[size];
for (i=0; i < size; i++) {
lv[i]=readLong(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,lv);
--v;
break;
case 'F':
float[] fv=new float[size];
for (i=0; i < size; i++) {
fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));
v+=3;
}
av.visit(name,fv);
--v;
break;
case 'D':
double[] dv=new double[size];
for (i=0; i < size; i++) {
dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));
v+=3;
}
av.visit(name,dv);
--v;
break;
default :
v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));
}
}
return v;
}

public static SIPHeader parseSIPHeader(String header) throws ParseException {
  int start=0;
  int end=header.length() - 1;
  try {
    while (header.charAt(start) <= 0x20)     start++;
    while (header.charAt(end) <= 0x20)     end--;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new ParseException("Empty header.",0);
  }
  StringBuilder buffer=new StringBuilder(end + 1);
  int i=start;
  int lineStart=start;
  boolean endOfLine=false;
  while (i <= end) {
    char c=header.charAt(i);
    if (c == '\r' || c == '\n') {
      if (!endOfLine) {
        buffer.append(header.substring(lineStart,i));
        endOfLine=true;
      }
    }
 else {
      if (endOfLine) {
        endOfLine=false;
        if (c == ' ' || c == '\t') {
          buffer.append(' ');
          lineStart=i + 1;
        }
 else {
          lineStart=i;
        }
      }
    }
    i++;
  }
  buffer.append(header.substring(lineStart,i));
  buffer.append('\n');
  HeaderParser hp=ParserFactory.createParser(buffer.toString());
  if (hp == null)   throw new ParseException("could not create parser",0);
  return hp.parse();
}

private static int convertSRGBtoLinearRGB(int color){
  float input, output;
  input=color / 255.0f;
  if (input <= 0.04045f) {
    output=input / 12.92f;
  }
 else {
    output=(float)Math.pow((input + 0.055) / 1.055,2.4);
  }
  return Math.round(output * 255.0f);
}

public void recordBeginning(){
  final String msg="Usage beginning module=" + mModuleName + " runId="+ mRunId;
  mUsageMessages.add(msg);
  Diagnostic.developerLog(msg);
  mClient.recordBeginning(mModuleName,mRunId);
}

static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){
  double angle=Math.toRadians(angleInDegrees);
  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);
}

public boolean isPronounceable(String word){
  String lowerCaseWord=word.toLowerCase();
  return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord));
}

public void addSplitEdges(List edgeList){
  addEndpoints();
  Iterator it=iterator();
  EdgeIntersection eiPrev=(EdgeIntersection)it.next();
  while (it.hasNext()) {
    EdgeIntersection ei=(EdgeIntersection)it.next();
    Edge newEdge=createSplitEdge(eiPrev,ei);
    edgeList.add(newEdge);
    eiPrev=ei;
  }
}

public IOUtils(){
  super();
}

public MemBasedCache(int maxCacheSizeInBytes){
  mMaxCacheSizeInBytes=maxCacheSizeInBytes;
  mDataEntries=new LinkedHashMap<String,CacheHeader>(16,.75f,true);
}

public void updateMaxTextWidths(float requiredWidth,float matchContentsWidth){
  mMaxRequiredWidth=Math.max(mMaxRequiredWidth,requiredWidth);
  mMaxMatchContentsWidth=Math.max(mMaxMatchContentsWidth,matchContentsWidth);
}

public void enableOverview(boolean b){
  if (overviewItem != null) {
    overviewItem.setEnabled(b);
  }
}

public void mouseEntered(MouseEvent e){
  if (Debug.debugging("mousemodedetail")) {
    Debug.output(getID() + "|NavMouseMode.mouseEntered()");
  }
  super.mouseEntered(e);
  autoZoom=true;
}

public PageOfCollections fetchPage(PageOfCollections page,SolrZkClient zkClient) throws KeeperException, InterruptedException {
  List<String> children=getCollections(zkClient);
  page.selected=children;
  if (page.start == 0 && page.rows == -1 && page.filter == null && children.size() > 10) {
    page.rows=20;
    page.start=0;
  }
  if (page.filterType == FilterType.name && page.filter != null)   children=page.applyNameFilter(children);
  if (page.filterType != FilterType.status)   page.selectPage(children);
  return page;
}

public void accept(final AnnotationVisitor av){
  if (av != null) {
    if (values != null) {
      for (int i=0; i < values.size(); i+=2) {
        String name=(String)values.get(i);
        Object value=values.get(i + 1);
        accept(av,name,value);
      }
    }
    av.visitEnd();
  }
}

public IdsQueryBuilder addIds(String... ids){
  values.addAll(Arrays.asList(ids));
  return this;
}

private void stop(HttpServletRequest request,HttpServletResponse response) throws IOException {
  PrintWriter out=response.getWriter();
  String label=request.getParameter("stop");
  Monitor mon=removeMon(label,null,DEFAULT_UNITS);
  if (mon == null) {
    out.println(ERROR + ": stop requires that an existing label is passed in.  For example: curl http://localhost:8080/jamon/Mon?stop=mylabel");
  }
 else {
    mon.stop();
    out.println(OK + ": stop successfully called on - " + mon);
  }
}

public static String normalizeUrl(String requestUrl) throws OAuthException {
  if ((requestUrl == null) || (requestUrl.length() == 0)) {
    throw new OAuthException("Request Url cannot be empty");
  }
  URI uri;
  try {
    uri=new URI(requestUrl);
  }
 catch (  URISyntaxException e) {
    throw new OAuthException(e);
  }
  String authority=uri.getAuthority();
  String scheme=uri.getScheme();
  if (authority == null || scheme == null) {
    throw new OAuthException("Invalid Request Url");
  }
  authority=authority.toLowerCase();
  scheme=scheme.toLowerCase();
  if ((scheme.equals("http") && uri.getPort() == 80) || (scheme.equals("https") && uri.getPort() == 443)) {
    int index=authority.lastIndexOf(":");
    if (index >= 0) {
      authority=authority.substring(0,index);
    }
  }
  return scheme + "://" + authority+ uri.getRawPath();
}

public void invoke(InputStream is,OutputStream os,SerializerFactory serializerFactory) throws Exception {
  boolean isDebug=false;
  if (isDebugInvoke()) {
    isDebug=true;
    PrintWriter dbg=createDebugPrintWriter();
    HessianDebugInputStream dIs=new HessianDebugInputStream(is,dbg);
    dIs.startTop2();
    is=dIs;
    HessianDebugOutputStream dOs=new HessianDebugOutputStream(os,dbg);
    dOs.startTop2();
    os=dOs;
  }
  HessianInputFactory.HeaderType header=_inputFactory.readHeader(is);
  AbstractHessianInput in;
  AbstractHessianOutput out;
switch (header) {
case CALL_1_REPLY_1:
    in=_hessianFactory.createHessianInput(is);
  out=_hessianFactory.createHessianOutput(os);
break;
case CALL_1_REPLY_2:
in=_hessianFactory.createHessianInput(is);
out=_hessianFactory.createHessian2Output(os);
break;
case HESSIAN_2:
in=_hessianFactory.createHessian2Input(is);
in.readCall();
out=_hessianFactory.createHessian2Output(os);
break;
default :
throw new IllegalStateException(header + " is an unknown Hessian call");
}
if (serializerFactory != null) {
in.setSerializerFactory(serializerFactory);
out.setSerializerFactory(serializerFactory);
}
try {
invoke(_service,in,out);
}
  finally {
in.close();
out.close();
if (isDebug) os.close();
}
}

private void commitLocalTransaction() throws CommitFailedException {
  if (_tx == null) {
    return;
  }
  if (_logger.isLoggable(Level.FINEST)) {
    _logger.log(Level.FINEST,"Committing local transaction: " + _tx);
  }
  try {
    _tx.commit();
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,"Failed to commit local transaction: " + _tx,e);
    }
    throw new CommitFailedException(e);
  }
}

public static Entry addObjectClass(Entry entry){
  Attribute attribute=entry.getAttribute(CoreTokenConstants.OBJECT_CLASS);
  if (attribute == null) {
    entry.addAttribute(CoreTokenConstants.OBJECT_CLASS,CoreTokenConstants.FR_CORE_TOKEN);
  }
  return entry;
}

@SuppressWarnings("unchecked") public List<Boundary> populateArea(final Long wardId){
  HierarchyType hType=heirarchyTypeService.getHierarchyTypeByName(hierarchyTypeName);
  ;
  List<Boundary> areaList=new LinkedList<Boundary>();
  final BoundaryType childBoundaryType=boundaryTypeService.getBoundaryTypeByNameAndHierarchyType("Area",hType);
  final Boundary parentBoundary=boundaryService.getBoundaryById(wardId);
  areaList=new LinkedList(crossHeirarchyService.getCrossHierarchyChildrens(parentBoundary,childBoundaryType));
  LOGGER.info("***********Ajax AreaList: " + areaList.toString());
  return areaList;
}

private static String readName(DataInputStream dis,byte data[]) throws IOException {
  int c=dis.readUnsignedByte();
  if ((c & 0xc0) == 0xc0) {
    c=((c & 0x3f) << 8) + dis.readUnsignedByte();
    HashSet<Integer> jumps=new HashSet<Integer>();
    jumps.add(c);
    return readName(data,c,jumps);
  }
  if (c == 0) {
    return "";
  }
  byte b[]=new byte[c];
  dis.readFully(b);
  String s=IDN.toUnicode(new String(b));
  String t=readName(dis,data);
  if (t.length() > 0) {
    s=s + "." + t;
  }
  return s;
}

public SimpleString concat(final char c){
  byte[] bytes=new byte[data.length + 2];
  System.arraycopy(data,0,bytes,0,data.length);
  bytes[data.length]=(byte)(c & 0xFF);
  bytes[data.length + 1]=(byte)(c >> 8 & 0xFF);
  return new SimpleString(bytes);
}

public static double probToLogOdds(double prob){
  if (gr(prob,1) || (sm(prob,0))) {
    throw new IllegalArgumentException("probToLogOdds: probability must " + "be in [0,1] " + prob);
  }
  double p=SMALL + (1.0 - 2 * SMALL) * prob;
  return Math.log(p / (1 - p));
}

private void signalNotEmpty(){
  final ReentrantLock takeLock=this.takeLock;
  takeLock.lock();
  try {
    notEmpty.signal();
  }
  finally {
    takeLock.unlock();
  }
}

public void deepFill(MaryNode specTree){
  tree=specTree;
  numberOfLeaves=0;
  sortNode(0,tree);
}

public int nodeCount(){
  return nodes == null ? 0 : nodes.size();
}

public void addToGlobalBlacklist(String host){
  addToGlobalBlacklist(host,System.currentTimeMillis() + this.globalBlacklistTimeout);
}

public boolean addNode(Lop node){
  if (nodes.contains(node))   return false;
  nodes.add(node);
  return true;
}

private JSONArray requestAllFileSystems() throws IOException, JSONException {
  JSONArray ret=new JSONArray();
  for (  Filesystem fs : filesystems) {
    ret.put(fs.getRootEntry());
  }
  return ret;
}

private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  for (Node<K,V> n=findFirst(); n != null; n=n.next) {
    V v=n.getValidValue();
    if (v != null) {
      s.writeObject(n.key);
      s.writeObject(v);
    }
  }
  s.writeObject(null);
}

public static final double sigma(double a){
  return 1.0 / (1.0 + Math.exp(-a));
}

public void insertOrRefresh(final KBucketEntry newEntry){
  if (newEntry == null)   return;
  List<KBucketEntry> entriesRef=entries;
  for (  KBucketEntry existing : entriesRef) {
    if (existing.equals(newEntry)) {
      existing.mergeInTimestamps(newEntry);
      return;
    }
    if (existing.matchIPorID(newEntry)) {
      DHT.logInfo("new node " + newEntry + " claims same ID or IP as "+ existing+ ", might be impersonation attack or IP change. ignoring until old entry times out");
      return;
    }
  }
  if (newEntry.verifiedReachable()) {
    if (entriesRef.size() < DHTConstants.MAX_ENTRIES_PER_BUCKET) {
      modifyMainBucket(null,newEntry);
      return;
    }
    if (replaceBadEntry(newEntry))     return;
    KBucketEntry youngest=entriesRef.get(entriesRef.size() - 1);
    if (youngest.getCreationTime() > newEntry.getCreationTime() || newEntry.getRTT() * 2.5 < youngest.getRTT()) {
      modifyMainBucket(youngest,newEntry);
      insertInReplacementBucket(youngest);
      return;
    }
  }
  insertInReplacementBucket(newEntry);
}

public void translate(double x,double y){
  currentTransform.translate(x,y);
  try {
    writeTransform(new AffineTransform(1,0,0,1,x,y));
  }
 catch (  IOException e) {
    handleException(e);
  }
}

public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){
  s_logger.info(String.format("Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));
  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {
    return false;
  }
  if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {
    notSuppReasonBuff.append("Can't add RecoverPoint Protection since it already exists.");
    return false;
  }
  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {
    notSuppReasonBuff.append("Can't add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first.");
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {
    notSuppReasonBuff.append("Can't add MetroPoint Protection directly to VPLEX Local volume. " + "Upgrade from VPLEX Local to VPLEX Distributed first.");
    return false;
  }
  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};
  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (!changes.isEmpty()) {
    notSuppReasonBuff.append("These target virtual pool differences are invalid: ");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  include=new String[]{PROTECTION_VARRAY_SETTINGS};
  changes=analyzeChanges(currentVpool,newVpool,include,null,null);
  if (changes.isEmpty()) {
    notSuppReasonBuff.append("These target virtual pool differences are required: ");
    fillInNotSupportedReasons(changes,notSuppReasonBuff);
    return false;
  }
  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {
    VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);
    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {
      return false;
    }
  }
  return true;
}

private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  boolean writeFont=(f != OMText.DEFAULT_FONT);
  oos.writeBoolean(writeFont);
  if (writeFont) {
    oos.writeObject(f.getName());
    oos.writeInt(f.getSize());
    oos.writeInt(f.getStyle());
  }
  writeStroke(oos,stroke,OMGraphic.BASIC_STROKE);
  writeStroke(oos,textMatteStroke,DEFAULT_TEXT_MATTE_STROKE);
}

private static void writeSpaces(Writer out,int amt) throws IOException {
  while (amt > 0) {
    out.write(' ');
    amt--;
  }
}

public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){
  final int dim=assertSameDimensionality(box1,box2);
  double overlap=1.;
  double vol1=1.;
  double vol2=1.;
  for (int i=0; i < dim; i++) {
    final double box1min=box1.getMin(i);
    final double box1max=box1.getMax(i);
    final double box2min=box2.getMin(i);
    final double box2max=box2.getMax(i);
    final double omax=Math.min(box1max,box2max);
    final double omin=Math.max(box1min,box2min);
    if (omax <= omin) {
      return 0.;
    }
    overlap*=omax - omin;
    vol1*=box1max - box1min;
    vol2*=box2max - box2min;
  }
  return overlap / (vol1 + vol2);
}

protected void handleAutoDraw(){
  if (isToolItemSelected(ToolBarItemKey.AUTO_DRAW)) {
    onAutoDraw();
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

protected final void _loadToHaveAtLeast(int minAvailable) throws IOException {
  if (_inputStream == null) {
    throw _constructError("Needed to read " + minAvailable + " bytes, reached end-of-input");
  }
  int amount=_inputEnd - _inputPtr;
  _currInputProcessed+=_inputPtr;
  if (amount > 0 && _inputPtr > 0) {
    System.arraycopy(_inputBuffer,_inputPtr,_inputBuffer,0,amount);
    _inputEnd=amount;
  }
 else {
    _inputEnd=0;
  }
  _inputPtr=0;
  while (_inputEnd < minAvailable) {
    int count=_inputStream.read(_inputBuffer,_inputEnd,_inputBuffer.length - _inputEnd);
    if (count < 1) {
      _closeInput();
      if (count == 0) {
        throw new IOException("InputStream.read() returned 0 characters when trying to read " + amount + " bytes");
      }
      throw _constructError("Needed to read " + minAvailable + " bytes, missed "+ minAvailable+ " before end-of-input");
    }
    _inputEnd+=count;
  }
}

public Z21Message(byte[] a,int l){
  super(String.valueOf(a));
  setBinary(true);
}

private MethodDescriptor[] sortMethodDescriptors(MethodDescriptor[] methodDescriptors){
  return methodSorter != null ? methodSorter.sortMethodDescriptors(methodDescriptors) : methodDescriptors;
}

public static Properties parsePropertyList(String list) throws PropertyStringFormatException {
  return parsePropertyList(list,propertySeparators,keyValueSeparators);
}

public boolean packageHasAnnotation(Annotation annotation){
  try {
    Package pkg=type.getPackage();
    if (pkg == null) {
      return false;
    }
    String className=pkg.getName() + ".package-info";
    Class<?> packageType=Class.forName(className);
    AnnotationAccessor accessor=new AnnotationAccessor(supportedAnnotations,packageType,ignoreAnnotationFailure);
    return accessor.typeHas(annotation);
  }
 catch (  ClassNotFoundException e) {
    return false;
  }
}

private String buildToolTip(final CTaggedGraphNodesContainerNode node){
  final StringBuilder tooltip=new StringBuilder("<html>");
  boolean first=true;
  for (  final NaviNode graphnode : node.getGraphNodes()) {
    if (!first) {
      tooltip.append("<br>");
    }
    tooltip.append(CNodesDisplayString.getDisplayString(graphnode));
    first=false;
  }
  return tooltip + "</html>";
}

public void makeGraph(File linkGraph) throws Exception {
  String temp212;
  int rowNum=0;
  BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(linkGraph)));
  while ((temp212=br.readLine()) != null) {
    String[] strs=temp212.split(" ");
    for (int i=0; i < strs.length; i++) {
      graph[rowNum][i]=Double.parseDouble(strs[i]);
    }
    rowNum++;
  }
  for (int i=0; i < dataNum; i++) {
    for (int j=0; j < dimension; j++) {
      W[i][j]=r.nextDouble();
      H[j][i]=r.nextDouble();
    }
  }
  for (int i=0; i < dataNum; i++) {
    double sumW=0;
    double sumH=0;
    for (int j=0; j < dimension; j++) {
      sumW+=W[i][j] * W[i][j];
      sumH+=H[j][i] * H[j][i];
    }
    sumW=Math.sqrt(sumW);
    sumH=Math.sqrt(sumH);
    for (int j=0; j < dimension; j++) {
      W[i][j]/=sumW;
      H[j][i]/=sumH;
    }
  }
  trainW();
  init=false;
}

public void removeSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    return;
  }
  mListeners.remove(listener);
}

public boolean removeOnItemClickListener(OnItemClickListener itemClickListener){
  return clickListeners.remove(itemClickListener);
}

@Override protected int lookForSelectablePosition(int position,boolean lookDown){
  final ListAdapter adapter=mAdapter;
  if (adapter == null || isInTouchMode()) {
    return INVALID_POSITION;
  }
  final int count=adapter.getCount();
  if (!mAreAllItemsSelectable) {
    if (lookDown) {
      position=Math.max(0,position);
      while (position < count && !adapter.isEnabled(position)) {
        position++;
      }
    }
 else {
      position=Math.min(position,count - 1);
      while (position >= 0 && !adapter.isEnabled(position)) {
        position--;
      }
    }
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
 else {
    if (position < 0 || position >= count) {
      return INVALID_POSITION;
    }
    return position;
  }
}

public static String padRight(final String s,final int length){
  final int pad=length - s.length();
  return pad > 0 ? s + getSpaceString(pad) : s;
}

private static String[] collationMatchingRuleNames(final List<String> localeNames,final int numSuffix,final String symbolicSuffix){
  final List<String> names=new ArrayList<>();
  for (  String localeName : localeNames) {
    if (symbolicSuffix.isEmpty()) {
      names.add(localeName);
    }
 else {
      names.add(localeName + "." + numSuffix);
      names.add(localeName + "." + symbolicSuffix);
    }
  }
  return names.toArray(new String[names.size()]);
}

public static boolean isCacheSafe(Class<?> clazz,ClassLoader classLoader){
  Assert.notNull(clazz,"Class must not be null");
  ClassLoader target=clazz.getClassLoader();
  if (target == null) {
    return false;
  }
  ClassLoader cur=classLoader;
  if (cur == target) {
    return true;
  }
  while (cur != null) {
    cur=cur.getParent();
    if (cur == target) {
      return true;
    }
  }
  return false;
}

public void write(PrintStream out){
  write(out,table);
}

static Part from(String encoded,String decoded){
  if (encoded == null) {
    return NULL;
  }
  if (encoded.length() == 0) {
    return EMPTY;
  }
  if (decoded == null) {
    return NULL;
  }
  if (decoded.length() == 0) {
    return EMPTY;
  }
  return new Part(encoded,decoded);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

private int[] createEpochMonths(int epochDay,int minYear,int maxYear,Map<Integer,int[]> years){
  int numMonths=(maxYear - minYear + 1) * 12 + 1;
  int epochMonth=0;
  int[] epochMonths=new int[numMonths];
  minMonthLength=Integer.MAX_VALUE;
  maxMonthLength=Integer.MIN_VALUE;
  for (int year=minYear; year <= maxYear; year++) {
    int[] months=years.get(year);
    for (int month=0; month < 12; month++) {
      int length=months[month];
      epochMonths[epochMonth++]=epochDay;
      if (length < 29 || length > 32) {
        throw new IllegalArgumentException("Invalid month length in year: " + minYear);
      }
      epochDay+=length;
      minMonthLength=Math.min(minMonthLength,length);
      maxMonthLength=Math.max(maxMonthLength,length);
    }
  }
  epochMonths[epochMonth++]=epochDay;
  if (epochMonth != epochMonths.length) {
    throw new IllegalStateException("Did not fill epochMonths exactly: ndx = " + epochMonth + " should be "+ epochMonths.length);
  }
  return epochMonths;
}

private static String descriptorToInternalName(String descriptor){
switch (descriptor.charAt(0)) {
case 'B':
case 'C':
case 'D':
case 'F':
case 'I':
case 'J':
case 'S':
case 'Z':
case 'V':
case '[':
    return descriptor;
case 'L':
  return classDescriptorToInternalName(descriptor);
default :
throw new IllegalArgumentException("bad descriptor:" + descriptor);
}
}

public Subscription register(Object mBean,MBeanDescription description){
  return register(mBean,description.getMBeanName(getNextId()));
}

void checkAfterUnmarshalled(){
  assertEquals(shortVal.shortValue(),0x1122);
  assertEquals(longVal,0x8877665544332211L);
  assertNull(aArr);
  assertNull(strVal);
  assertEquals(doubleVal,123.456);
}

public void put(int key,E value){
  int i=ContainerHelpers.binarySearch(mKeys,mSize,key);
  if (i >= 0) {
    mValues[i]=value;
  }
 else {
    i=~i;
    if (i < mSize && mValues[i] == DELETED) {
      mKeys[i]=key;
      mValues[i]=value;
      return;
    }
    if (mGarbage && mSize >= mKeys.length) {
      gc();
      i=~ContainerHelpers.binarySearch(mKeys,mSize,key);
    }
    if (mSize >= mKeys.length) {
      int n=ContainerHelpers.idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      Object[] nvalues=new Object[n];
      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
      System.arraycopy(mValues,0,nvalues,0,mValues.length);
      mKeys=nkeys;
      mValues=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);
      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);
    }
    mKeys[i]=key;
    mValues[i]=value;
    mSize++;
  }
}

@Override public <R>CompletableFuture<R> collect(final Supplier<R> supplier,final BiConsumer<R,? super T> accumulator,final BiConsumer<R,R> combiner){
  return CompletableFuture.supplyAsync(null,exec);
}

@SuppressWarnings("unchecked") protected Object fromReflectionType(final Object value){
  FieldDescriptor descriptor=getDescriptor();
  if (descriptor.isRepeated()) {
    if (descriptor.getJavaType() == FieldDescriptor.JavaType.MESSAGE || descriptor.getJavaType() == FieldDescriptor.JavaType.ENUM) {
      final List result=new ArrayList();
      for (      final Object element : (List)value) {
        result.add(singularFromReflectionType(element));
      }
      return result;
    }
 else {
      return value;
    }
  }
 else {
    return singularFromReflectionType(value);
  }
}

public void registerManufacturerSpecificBuilder(int companyId,ADManufacturerSpecificBuilder builder){
  if (companyId < 0 || 0xFFFF < companyId) {
    String message=String.format("'companyId' is out of the valid range: %d",companyId);
    throw new IllegalArgumentException(message);
  }
  if (builder == null) {
    return;
  }
  Integer key=Integer.valueOf(companyId);
  List<ADManufacturerSpecificBuilder> builders=mMSBuilders.get(key);
  if (builders == null) {
    builders=new ArrayList<ADManufacturerSpecificBuilder>();
    mMSBuilders.put(key,builders);
  }
  builders.add(0,builder);
}

public static ReilGraph copyReilCode(final Window parent,final INaviCodeNode node){
  final ReilTranslator<INaviInstruction> translator=new ReilTranslator<INaviInstruction>();
  try {
    return translator.translate(new StandardEnvironment(),node);
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
    final String message="E000XXX: " + "Could not show REIL code for node";
    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not show the REIL code for basic block at '%X'.",node.getAddress()),new String[]{"The instructions could not be converted to REIL code."},new String[]{"You can not fix this problem yourself. Please contact " + "the BinNavi support."});
    NaviErrorDialog.show(parent,message,description,e);
  }
  return null;
}

private static void applyOverrides(){
  InputStream stream=getContentTypesPropertiesStream();
  if (stream == null) {
    return;
  }
  try {
    try {
      Properties overrides=new Properties();
      overrides.load(stream);
      for (      Map.Entry<Object,Object> entry : overrides.entrySet()) {
        String extension=(String)entry.getKey();
        String mimeType=(String)entry.getValue();
        add(mimeType,extension);
      }
    }
  finally {
      stream.close();
    }
  }
 catch (  IOException ignored) {
  }
}

public static String toString(Reader reader,long timeout) throws IOException {
  StringWriter sw=new StringWriter(512);
  copy(toBufferedReader(reader),sw,timeout);
  sw.close();
  return sw.toString();
}

private static float computeSimilarity(Lane a,Lane b){
  int same=0;
  int diff=0;
  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());
  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());
  for (int i=firstCoordinate; i <= lastCoordinate; i++) {
    char cha=a.charAt(i);
    char chb=b.charAt(i);
    if (Character.isLetter(cha) && Character.isLetter(chb)) {
      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++;
 else       diff++;
    }
  }
  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);
}

private void forceOverflow(){
  forceOverflow();
}

public int find(String string){
  if (string == null) {
    return -1;
  }
  for (int i=0; i != m_stringOffsets.length; ++i) {
    int offset=m_stringOffsets[i];
    int length=getShort(m_strings,offset);
    if (length != string.length()) {
      continue;
    }
    int j=0;
    for (; j != length; ++j) {
      offset+=2;
      if (string.charAt(j) != getShort(m_strings,offset)) {
        break;
      }
    }
    if (j == length) {
      return i;
    }
  }
  return -1;
}

public String prepOperand(String label,DataType dt,ValueType vt,boolean literal){
  StringBuilder sb=new StringBuilder();
  sb.append(label);
  sb.append(Lop.DATATYPE_PREFIX);
  sb.append(dt);
  sb.append(Lop.VALUETYPE_PREFIX);
  sb.append(vt);
  sb.append(Lop.LITERAL_PREFIX);
  sb.append(literal);
  return sb.toString();
}

public static List<SpaceTime> divideConquerBrownianBridge(MultivariateNormalDistribution normal,SpaceTime start,SpaceTime end,int depth,int maxTries,SpaceTimeRejector rejector){
  List<SpaceTime> points=new LinkedList<SpaceTime>();
  points.add(start);
  points.add(end);
  stop=false;
  if (divideConquerBrownianBridge(normal,0,points,depth,maxTries,rejector) == (2 << (depth - 1))) {
    return points;
  }
  stop=false;
  return null;
}

public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException {
  return valueOf(docType.getPublicId());
}

private boolean matchStrings(String pattern,String str,boolean caseSensitive){
  char[] patArr=pattern.toCharArray();
  char[] strArr=str.toCharArray();
  int patIdxStart=0;
  int patIdxEnd=patArr.length - 1;
  int strIdxStart=0;
  int strIdxEnd=strArr.length - 1;
  char ch;
  boolean containsStar=false;
  for (  char c : patArr) {
    if (c == '*') {
      containsStar=true;
      break;
    }
  }
  if (!containsStar) {
    if (patIdxEnd != strIdxEnd) {
      return false;
    }
    for (int i=0; i <= patIdxEnd; i++) {
      ch=patArr[i];
      if (ch != '?') {
        if (different(caseSensitive,ch,strArr[i])) {
          return false;
        }
      }
    }
    return true;
  }
  if (patIdxEnd == 0) {
    return true;
  }
  while ((ch=patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {
    if (ch != '?') {
      if (different(caseSensitive,ch,strArr[strIdxStart])) {
        return false;
      }
    }
    patIdxStart++;
    strIdxStart++;
  }
  if (strIdxStart > strIdxEnd) {
    for (int i=patIdxStart; i <= patIdxEnd; i++) {
      if (patArr[i] != '*') {
        return false;
      }
    }
    return true;
  }
  while ((ch=patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {
    if (ch != '?') {
      if (different(caseSensitive,ch,strArr[strIdxEnd])) {
        return false;
      }
    }
    patIdxEnd--;
    strIdxEnd--;
  }
  if (strIdxStart > strIdxEnd) {
    for (int i=patIdxStart; i <= patIdxEnd; i++) {
      if (patArr[i] != '*') {
        return false;
      }
    }
    return true;
  }
  while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
    int patIdxTmp=-1;
    for (int i=patIdxStart + 1; i <= patIdxEnd; i++) {
      if (patArr[i] == '*') {
        patIdxTmp=i;
        break;
      }
    }
    if (patIdxTmp == patIdxStart + 1) {
      patIdxStart++;
      continue;
    }
    int patLength=patIdxTmp - patIdxStart - 1;
    int strLength=strIdxEnd - strIdxStart + 1;
    int foundIdx=-1;
    strLoop:     for (int i=0; i <= strLength - patLength; i++) {
      for (int j=0; j < patLength; j++) {
        ch=patArr[patIdxStart + j + 1];
        if (ch != '?') {
          if (different(caseSensitive,ch,strArr[strIdxStart + i + j])) {
            continue strLoop;
          }
        }
      }
      foundIdx=strIdxStart + i;
      break;
    }
    if (foundIdx == -1) {
      return false;
    }
    patIdxStart=patIdxTmp;
    strIdxStart=foundIdx + patLength;
  }
  for (int i=patIdxStart; i <= patIdxEnd; i++) {
    if (patArr[i] != '*') {
      return false;
    }
  }
  return true;
}

public static List<Double> mergeCoords(List<Double> x,List<Double> y){
  if (x.size() != y.size())   throw new IllegalArgumentException("Sample sizes must be the same for each data applyTransformToDestination.");
  List<Double> ret=new ArrayList<>();
  for (int i=0; i < x.size(); i++) {
    ret.add(x.get(i));
    ret.add(y.get(i));
  }
  return ret;
}

public static void print(int x){
  out.print(x);
  out.flush();
}

public void copyText(){
  int end, start;
  end=selectedCharField.getSelectionEnd();
  start=selectedCharField.getSelectionStart();
  selectedCharField.selectAll();
  selectedCharField.copy();
  selectedCharField.select(start,end);
}

public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {
  try {
    AuthPropertiesModel model=(AuthPropertiesModel)getModel();
    Map original=model.getValues();
    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);
    model.setValues(ps.getAttributeValues(original,true,model));
    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.profile.updated");
  }
 catch (  AMConsoleException a) {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",a.getMessage());
  }
  forwardTo();
}

private void buildDescriptionPanel(final Composite parent){
  descriptionLabel=new StyledText(parent,SWT.READ_ONLY);
  descriptionLabel.setText("");
  descriptionLabel.setLayoutData(new GridData(GridData.FILL,GridData.FILL,true,true,1,1));
}

public HttpMethodClient(){
  this(5000,10000,3 * 60000);
}

public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher,Digest digest,int saltLength,boolean implicit){
  this.cipher=cipher;
  this.digest=digest;
  this.hLen=digest.getDigestSize();
  this.saltLength=saltLength;
  if (implicit) {
    trailer=TRAILER_IMPLICIT;
  }
 else {
    Integer trailerObj=(Integer)trailerMap.get(digest.getAlgorithmName());
    if (trailerObj != null) {
      trailer=trailerObj.intValue();
    }
 else {
      throw new IllegalArgumentException("no valid trailer for digest");
    }
  }
}

String decodeTextValue(byte[] data) throws IOException {
  boolean isCompressed=((data.length > 1) && (data[0] == TEXT_COMPRESSION_HEADER[0]) && (data[1] == TEXT_COMPRESSION_HEADER[1]));
  if (isCompressed) {
    StringBuilder textBuf=new StringBuilder(data.length);
    int dataStart=TEXT_COMPRESSION_HEADER.length;
    int dataEnd=dataStart;
    boolean inCompressedMode=true;
    while (dataEnd < data.length) {
      if (data[dataEnd] == (byte)0x00) {
        decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
        inCompressedMode=!inCompressedMode;
        ++dataEnd;
        dataStart=dataEnd;
      }
 else {
        ++dataEnd;
      }
    }
    decodeTextSegment(data,dataStart,dataEnd,inCompressedMode,textBuf);
    return textBuf.toString();
  }
  return decodeUncompressedText(data,getCharset());
}

private <S,T>Set<T> extract(final Collection<S> collection,final Extractor<S,T> extractor){
  final Set<T> values=new HashSet<T>(collection.size());
  for (  final S instance : collection) {
    values.add(extractor.getValue(instance));
  }
  return values;
}

public static boolean isZTE(){
  return sBuildModel.startsWith("zte");
}

static public String normalizeToEncoding(String origString_,Charset encoding_){
  String normString=origString_;
  CharsetEncoder encoder=encoding_.newEncoder();
  if (!encoder.canEncode(origString_)) {
    final int length=origString_.length();
    char[] normSeq=new char[(origString_.length())];
    int charNum=0;
    for (int offset=0; offset < length; ) {
      Pair<Character,Integer> replacement=normalizeCodepoint(origString_,encoding_,offset);
      Character replacedChar=replacement.getFirst();
      int codepoint=replacement.getSecond();
      if (null != replacedChar) {
        normSeq[charNum]=replacedChar;
        charNum++;
      }
      offset+=Character.charCount(codepoint);
    }
    normString=new String(normSeq);
  }
  return normString;
}

private FastConcurrentSkipListMap.Node<K,V> loNode(){
  if (lo == null)   return m.findFirst();
 else   if (loInclusive)   return m.findNear(lo,m.GT | m.EQ);
 else   return m.findNear(lo,m.GT);
}

public int size(){
  return m_sets.size();
}

public Line3D(Stack<Vector3> points,float thickness,int[] colors,boolean createVBOs){
  super();
  mPoints=points;
  mLineThickness=thickness;
  mColors=colors;
  if (colors != null && colors.length != points.size())   throw new RuntimeException("The number of line points and colors is not the same.");
  init(createVBOs);
}

public static byte[] asUnsignedByteArray(BigInteger value){
  byte[] bytes=value.toByteArray();
  if (bytes[0] == 0) {
    byte[] tmp=new byte[bytes.length - 1];
    System.arraycopy(bytes,1,tmp,0,tmp.length);
    return tmp;
  }
  return bytes;
}

public static float approximateLength(float controlPoints[][]){
  float length=0;
  for (int i=0; i < controlPoints.length - 1; i++) {
    float xDif=controlPoints[i + 1][0] - controlPoints[i][0];
    float yDif=controlPoints[i + 1][1] - controlPoints[i][1];
    float zDif=controlPoints[i + 1][2] - controlPoints[i][2];
    length+=Math.sqrt(xDif * xDif + yDif * yDif + zDif * zDif);
  }
  return length;
}

protected int mapDragOperationFromModifiers(MouseEvent e){
  int mods=e.getModifiersEx();
  int btns=mods & ButtonMask;
  if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) {
    return DnDConstants.ACTION_NONE;
  }
  return SunDragSourceContextPeer.convertModifiersToDropAction(mods,getSourceActions());
}

public UpdateClause addAssignment(Expression expression){
  assignments.add(new Assignment(expression));
  return this;
}

private boolean stepValue(){
  while (true) {
    if (iter != null && iter.hasNext()) {
      svcs=(ArrayList)iter.next();
      svcidx=svcs.size();
      return true;
    }
    if (!stepClass())     return false;
    if (iter == null)     return true;
  }
}

private ArrayList<IconMarker> createIconMarkers(){
  final ArrayList<IconMarker> iconMarkers=new ArrayList<>(LOCATIONS.length);
  iconMarkers.add(new IconMarker(LOCATIONS[0],R.drawable.bread,R.drawable.bread_c));
  iconMarkers.add(new IconMarker(LOCATIONS[1],R.drawable.butcher,R.drawable.butcher_c));
  iconMarkers.add(new IconMarker(LOCATIONS[2],R.drawable.fruits,R.drawable.fruits_c));
  iconMarkers.add(new IconMarker(LOCATIONS[3],R.drawable.grocery,R.drawable.grocery_c));
  iconMarkers.add(new IconMarker(LOCATIONS[4],R.drawable.patisserie,R.drawable.patisserie_c));
  return iconMarkers;
}

public void hasNetworkConnection(NetworkRequestCheckListener listener){
  if (hasNetworkConnection()) {
    testNetworkRequest(listener);
  }
 else {
    listener.onNoResponse();
  }
}

public void assignThreadForSubscriber(@NonNull Object subscriber){
  Looper looper=Looper.myLooper();
  if (looper != null) {
    mSubscribersDefaultThreads.put(new IdentityWeakReferenceKey<>(subscriber),looper != Looper.getMainLooper() ? new Handler(looper) : mUiThreadHandler);
  }
 else {
    mSubscribersDefaultThreads.remove(new IdentityWeakReferenceKey<>(subscriber));
  }
}

private void validateDynamicAttribute(Set dynamicSet) throws PolicyException {
  if (DEBUG.messageEnabled()) {
    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "entering with dynamicSet=" + dynamicSet);
  }
  responseAttrNames=new HashSet();
  repoAttrNames=new HashSet();
  responseAttrToRepoAttr=new HashMap();
  if (DEBUG.messageEnabled()) {
    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "valid dynamic attributes:" + validDynamicAttrNames);
  }
  Set dynamicAttrs=((Set)properties.get(DYNAMIC_ATTRIBUTE));
  if (DEBUG.messageEnabled()) {
    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "selected dynamic attributes:" + dynamicAttrs);
  }
  Iterator dynamicAttrsIter=dynamicAttrs.iterator();
  while (dynamicAttrsIter.hasNext()) {
    String attr=(String)dynamicAttrsIter.next();
    if (!validDynamicAttrNames.contains(attr)) {
      if (DEBUG.warningEnabled()) {
        DEBUG.warning("IDReporesponseProvider." + "validateDynamicAttribute():Invalid dynamic property " + "encountered:"+ attr);
      }
      continue;
    }
    String[] attrNames=parseDynamicAttrName(attr);
    String responseAttrName=attrNames[0];
    String repoAttrName=attrNames[1];
    responseAttrNames.add(responseAttrName);
    repoAttrNames.add(repoAttrName);
    addToResponseAttrToRepoAttrMap(responseAttrName,repoAttrName);
    if (DEBUG.messageEnabled()) {
      DEBUG.message("IDRepoResponseProvider." + "validateDynamicAttribute():" + "responseAttrName=" + responseAttrName + ", repoAttrName="+ repoAttrName);
    }
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "responseAttrToRepoAttr=" + responseAttrToRepoAttr);
    DEBUG.message("IDRepoResponseProvider.validateDynamicAttribute():" + "returning");
  }
}

public static boolean typeCheck(Class type,Object instance){
  return type.isAssignableFrom(instance.getClass()) || isWrapperInstance(type,instance);
}

public synchronized void init(){
  ArrayList<Warrant> tempList=new ArrayList<Warrant>();
  List<String> systemNameList=_manager.getSystemNameList();
  Iterator<String> iter=systemNameList.iterator();
  while (iter.hasNext()) {
    Warrant w=_manager.getBySystemName(iter.next());
    if (!_warList.contains(w)) {
      w.addPropertyChangeListener(this);
    }
 else {
      _warList.remove(w);
    }
    tempList.add(w);
  }
  for (int i=0; i < _warList.size(); i++) {
    Warrant w=_warList.get(i);
    if (!_warNX.contains(w)) {
      w.removePropertyChangeListener(this);
    }
  }
  for (int i=0; i < _warNX.size(); i++) {
    tempList.add(_warNX.get(i));
  }
  _warList=tempList;
}

public void addCommand(Command cmd,int offset){
  menuBar.addCommand(cmd,offset);
}

public boolean connect(final String address){
  if (mBluetoothAdapter == null || address == null) {
    Log.w(TAG,"BluetoothAdapter not initialized or unspecified address.");
    return false;
  }
  if (mBluetoothDeviceAddress != null && address.equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) {
    Log.d(TAG,"Trying to use an existing mBluetoothGatt for connection.");
    if (mBluetoothGatt.connect()) {
      mConnectionState=STATE_CONNECTING;
      return true;
    }
 else {
      return false;
    }
  }
  final BluetoothDevice device=mBluetoothAdapter.getRemoteDevice(address);
  if (device == null) {
    Log.w(TAG,"Device not found.  Unable to connect.");
    return false;
  }
  mBluetoothGatt=device.connectGatt(this,false,mGattCallback);
  Log.d(TAG,"Trying to create a new connection.");
  mBluetoothDeviceAddress=address;
  mConnectionState=STATE_CONNECTING;
  return true;
}

private double normalDens(double x,double mean,double stdDev){
  double diff=x - mean;
  return (1 / (m_normConst * stdDev)) * Math.exp(-(diff * diff / (2 * stdDev * stdDev)));
}

private static void drawShape(GL2 gl,Shape s){
  PathIterator it=s.getPathIterator(new AffineTransform(),shapeFlatness);
  float[] lastMoveTo=new float[6];
  float[] f=new float[6];
  while (!it.isDone()) {
    int res=it.currentSegment(f);
switch (res) {
case PathIterator.SEG_CLOSE:
      GLPanel.V(gl,lastMoveTo[0],lastMoveTo[1]);
    break;
case PathIterator.SEG_MOVETO:
  GLPanel.V(gl,f[0],f[1]);
System.arraycopy(f,0,lastMoveTo,0,6);
break;
case PathIterator.SEG_LINETO:
GLPanel.V(gl,f[0],f[1]);
break;
case PathIterator.SEG_CUBICTO:
CubicCurve2D c=new CubicCurve2D.Float(lastMoveTo[0],lastMoveTo[1],f[0],f[1],f[2],f[3],f[4],f[5]);
drawShape(gl,c);
break;
default :
throw new Error("Error while drawing AWT shape. " + "Path iterator setment not handled:" + res);
}
it.next();
}
}

@Override protected void tearDown() throws NamingException, JMSException {
  NamingEnumeration<Binding> iter=context.listBindings("");
  while (iter.hasMore()) {
    Binding binding=iter.next();
    Object connFactory=binding.getObject();
    if (connFactory instanceof ActiveMQConnectionFactory) {
    }
  }
}

protected List<URI> load(final InputStream in) throws SAXException, IOException {
  SAXParser saxParser;
  final SAXParserFactory factory=SAXParserFactory.newInstance();
  try {
    saxParser=factory.newSAXParser();
  }
 catch (  final ParserConfigurationException ex) {
    throw new SAXException(ex);
  }
  groups=new LinkedList<URI>();
  saxParser.parse(in,this);
  return groups;
}

public final void lazySet(long newValue){
  unsafe.putOrderedLong(this,valueOffset,newValue);
}

private static List<Object> createEqualityKey(Node node){
  List<Object> values=new ArrayList<Object>();
  values.add(node.getNodeType());
  values.add(node.getNodeName());
  values.add(node.getLocalName());
  values.add(node.getNamespaceURI());
  values.add(node.getPrefix());
  values.add(node.getNodeValue());
  for (Node child=node.getFirstChild(); child != null; child=child.getNextSibling()) {
    values.add(child);
  }
switch (node.getNodeType()) {
case DOCUMENT_TYPE_NODE:
    DocumentTypeImpl doctype=(DocumentTypeImpl)node;
  values.add(doctype.getPublicId());
values.add(doctype.getSystemId());
values.add(doctype.getInternalSubset());
values.add(doctype.getEntities());
values.add(doctype.getNotations());
break;
case ELEMENT_NODE:
Element element=(Element)node;
values.add(element.getAttributes());
break;
}
return values;
}

@Deprecated public static String Collection2String(Collection<?> in,String separator){
  if (in == null) {
    return null;
  }
  return Iterator2String(in.iterator(),separator);
}

public static byte[] decodeBase64(String base64Str){
  return DatatypeConverter.parseBase64Binary(base64Str);
}

protected void removeAllPremoveDrops(){
  for (  PremoveInfo info : premoves.toArray(new PremoveInfo[0])) {
    if (info.isPremoveDrop) {
      premoves.remove(info);
    }
  }
}

public void testClearBitZero(){
  byte aBytes[]={0};
  int aSign=0;
  int number=0;
  byte rBytes[]={0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.clearBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,result.signum());
}

public static String sayNumber(StringBuffer appendTo,double number) throws IllegalArgumentException {
  if (number == Double.MIN_VALUE) {
    throw new IllegalArgumentException("Out of range");
  }
  if (number < 0) {
    appendTo.append("Minus ");
  }
  double abs=Math.abs(number);
  if (abs < POWER_THREE) {
    saySimpleNumber(appendTo,(int)abs);
  }
 else   if (abs < 2000) {
    int thousand=(int)(abs % POWER_THREE);
    appendTo.append("Seribu ");
    saySimpleNumber(appendTo,thousand);
  }
 else   if (abs < POWER_SIX) {
    int thousand=(int)(abs % POWER_SIX / POWER_THREE);
    saySimpleNumber(appendTo,thousand);
    appendTo.append(" Ribu");
    double remainder=abs - thousand * POWER_THREE;
    if (remainder > 0) {
      appendTo.append(' ');
      sayNumber(appendTo,remainder);
    }
  }
 else   if (abs < POWER_NINE) {
    int million=(int)(abs % POWER_NINE / POWER_SIX);
    saySimpleNumber(appendTo,million);
    appendTo.append(" Juta");
    double remainder=abs - million * POWER_SIX;
    if (remainder > 0) {
      appendTo.append(' ');
      sayNumber(appendTo,remainder);
    }
  }
 else   if (abs < POWER_TWELVE) {
    int billion=(int)(abs % POWER_TWELVE / POWER_NINE);
    saySimpleNumber(appendTo,billion);
    appendTo.append(" Milyar");
    double remainder=abs - billion * POWER_NINE;
    if (remainder > 0) {
      appendTo.append(' ');
      sayNumber(appendTo,remainder);
    }
  }
 else   if (abs < POWER_FIFTEEN) {
    int trillion=(int)(abs % POWER_FIFTEEN / POWER_TWELVE);
    saySimpleNumber(appendTo,trillion);
    appendTo.append(" Trilyun");
    double remainder=abs - trillion * POWER_TWELVE;
    if (remainder > 0) {
      appendTo.append(' ');
      sayNumber(appendTo,remainder);
    }
  }
 else {
    appendTo.append("Lebih Dari Seribu Triliun");
  }
  return appendTo.toString();
}

public void stop(){
  _throttle.setSpeedSetting(-0.5F);
  _throttle.setSpeedSetting(0.0F);
  stopLabel.setIcon(stopIcon);
  stopLabel.setIconTextGap(_gap);
  pack();
}

public void encode(OutputStream out) throws IOException {
  DerOutputStream tmp=new DerOutputStream();
  dnName.encode(tmp);
  out.write(tmp.toByteArray());
}

public void makeDirty(){
  betaChanged=true;
  newMode=true;
  precisionChanged=true;
  regressionInterface.makeDirty(instance);
}

private ArrayList<E> toArrayList(){
  ArrayList<E> list=new ArrayList<E>();
  for (Node<E> p=first(); p != null; p=succ(p)) {
    E item=p.item;
    if (item != null)     list.add(item);
  }
  return list;
}

public boolean remove(HttpConnection connection){
  TimeValues times=connectionToTimes.remove(connection);
  if (times == null) {
    log.warn("Removing a connection that never existed!");
    return true;
  }
 else {
    return System.currentTimeMillis() <= times.timeExpires;
  }
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(3);
  newVector.addElement(new Option("\tSets the attribute index.","C",1,"-C <col>"));
  newVector.addElement(new Option("\tSpecify the list of values to indicate. First and last are\n" + "\tvalid indexes (default last)","V",1,"-V <index1,index2-index4,...>"));
  newVector.addElement(new Option("\tSet if new boolean attribute nominal.","N",0,"-N <index>"));
  return newVector.elements();
}

private List<String> split(String prefix){
  List<String> parts=new ArrayList<String>();
  int bracketCount=0;
  boolean inquotes=false;
  int lastIndex=0;
  for (int i=0; i < prefix.length(); i++) {
    char c=prefix.charAt(i);
    if (c == '[') {
      bracketCount++;
      continue;
    }
 else     if (c == '"') {
      inquotes=!inquotes;
      continue;
    }
 else     if (c == ']') {
      bracketCount--;
      if (bracketCount < 0) {
        throw new RuntimeException("Malformed prefix: " + prefix);
      }
      continue;
    }
    if (c == ':' && !inquotes && bracketCount == 0) {
      parts.add(prefix.substring(lastIndex,i));
      lastIndex=i + 1;
    }
  }
  if (lastIndex < prefix.length() - 1 && !inquotes && bracketCount == 0) {
    parts.add(prefix.substring(lastIndex));
  }
  return parts;
}

public static long lowerHexToUnsignedLong(String lowerHex){
  int length=lowerHex.length();
  if (length < 1 || length > 32)   throw isntLowerHexLong(lowerHex);
  int i=length > 16 ? length - 16 : 0;
  long result=0;
  for (; i < length; i++) {
    char c=lowerHex.charAt(i);
    result<<=4;
    if (c >= '0' && c <= '9') {
      result|=c - '0';
    }
 else     if (c >= 'a' && c <= 'f') {
      result|=c - 'a' + 10;
    }
 else {
      throw isntLowerHexLong(lowerHex);
    }
  }
  return result;
}

public static double sampleSkewStandardError(int size){
  int n=size;
  return Math.sqrt(6.0 * n * (n - 1) / ((n - 2) * (n + 1) * (n + 3)));
}

public void load(List<PolicyQualifierInfo> policyQualifierInfo){
  PolicyQualifierInfo[] policyQualifierInfoArray=policyQualifierInfo.toArray(new PolicyQualifierInfo[policyQualifierInfo.size()]);
  Arrays.sort(policyQualifierInfoArray,new PolicyQualifierInfoComparator());
  data=new Object[policyQualifierInfoArray.length][1];
  int i=0;
  for (  PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray) {
    data[i][0]=policyQualInfo;
    i++;
  }
  fireTableDataChanged();
}

public void runScript(Reader reader) throws IOException, SQLException {
  try {
    boolean originalAutoCommit=connection.getAutoCommit();
    try {
      if (originalAutoCommit != this.autoCommit) {
        connection.setAutoCommit(this.autoCommit);
      }
      runScript(connection,reader);
    }
  finally {
      connection.setAutoCommit(originalAutoCommit);
    }
  }
 catch (  IOException|SQLException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException("Error running script.  Cause: " + e,e);
  }
}

public double doOperation() throws OperatorFailedException {
  double logq;
  final NodeRef root=tree.getRoot();
  final double oldTreeHeight=tree.getNodeHeight(root);
  NodeRef i;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (root == i);
  final NodeRef iP=tree.getParent(i);
  final NodeRef CiP=getOtherChild(tree,iP,i);
  final NodeRef PiP=tree.getParent(iP);
  final double delta=getDelta();
  final double oldHeight=tree.getNodeHeight(iP);
  final double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      NodeRef newParent=PiP;
      NodeRef newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(newChild,iP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(newChild);
          tree.setNodeRate(newChild,tree.getNodeRate(iP));
          tree.setNodeRate(iP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logq=-Math.log(possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      List<NodeRef> newChildren=new ArrayList<NodeRef>();
      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      final int childIndex=MathUtils.nextInt(newChildren.size());
      NodeRef newChild=newChildren.get(childIndex);
      NodeRef newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
        if (tree.hasNodeTraits()) {
          tree.swapAllTraits(iP,CiP);
        }
        if (tree.hasRates()) {
          final double rootNodeRate=tree.getNodeRate(iP);
          tree.setNodeRate(iP,tree.getNodeRate(CiP));
          tree.setNodeRate(CiP,rootNodeRate);
        }
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logq=Math.log(possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logq=0.0;
    }
  }
  if (swapInRandomRate) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      final double tmp=tree.getNodeRate(i);
      tree.setNodeRate(i,tree.getNodeRate(j));
      tree.setNodeRate(j,tmp);
    }
  }
  if (swapInRandomTrait) {
    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
    if (j != i) {
      tree.swapAllTraits(i,j);
    }
  }
  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");
  if (scaledDirichletBranches) {
    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException("Temporarily disabled.");
  }
  return logq;
}

MarkerSegment findMarkerSegment(Class cls,boolean first){
  if (first) {
    Iterator iter=markerSequence.iterator();
    while (iter.hasNext()) {
      MarkerSegment seg=(MarkerSegment)iter.next();
      if (cls.isInstance(seg)) {
        return seg;
      }
    }
  }
 else {
    ListIterator iter=markerSequence.listIterator(markerSequence.size());
    while (iter.hasPrevious()) {
      MarkerSegment seg=(MarkerSegment)iter.previous();
      if (cls.isInstance(seg)) {
        return seg;
      }
    }
  }
  return null;
}

default Filterable<T> removeAll(final T... values){
  return removeAll(Stream.of(values));
}

public static Map<String,Object> createContentAssocMethod(DispatchContext dctx,Map<String,? extends Object> rcontext) throws GenericServiceException, GenericEntityException {
  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);
  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_CREATE");
  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);
  context.put("targetOperationList",targetOperationList);
  context.put("contentPurposeList",contentPurposeList);
  Locale locale=(Locale)context.get("locale");
  Delegator delegator=dctx.getDelegator();
  LocalDispatcher dispatcher=dctx.getDispatcher();
  Map<String,Object> result=FastMap.newInstance();
  String contentIdFrom=(String)context.get("contentIdFrom");
  String contentIdTo=(String)context.get("contentIdTo");
  String contentId=(String)context.get("contentId");
  int contentIdCount=0;
  if (UtilValidate.isNotEmpty(contentIdFrom))   contentIdCount++;
  if (UtilValidate.isNotEmpty(contentIdTo))   contentIdCount++;
  if (UtilValidate.isNotEmpty(contentId))   contentIdCount++;
  if (contentIdCount < 2) {
    Debug.logError("Not 2 out of ContentId/To/From.","ContentServices");
    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentCreateContentAssocMethodError",locale));
  }
  if (UtilValidate.isNotEmpty(contentIdFrom)) {
    if (UtilValidate.isEmpty(contentIdTo))     contentIdTo=contentId;
  }
  if (UtilValidate.isNotEmpty(contentIdTo)) {
    if (UtilValidate.isEmpty(contentIdFrom))     contentIdFrom=contentId;
  }
  GenericValue contentAssoc=delegator.makeValue("ContentAssoc",FastMap.newInstance());
  contentAssoc.put("contentId",contentIdFrom);
  contentAssoc.put("contentIdTo",contentIdTo);
  contentAssoc.put("contentAssocTypeId",context.get("contentAssocTypeId"));
  contentAssoc.put("contentAssocPredicateId",context.get("contentAssocPredicateIdFrom"));
  contentAssoc.put("dataSourceId",context.get("dataSourceId"));
  Timestamp fromDate=(Timestamp)context.get("fromDate");
  if (fromDate == null) {
    contentAssoc.put("fromDate",UtilDateTime.nowTimestamp());
  }
 else {
    contentAssoc.put("fromDate",fromDate);
  }
  Timestamp thruDate=(Timestamp)context.get("thruDate");
  if (thruDate == null) {
    contentAssoc.put("thruDate",null);
  }
 else {
    contentAssoc.put("thruDate",thruDate);
  }
  contentAssoc.put("sequenceNum",context.get("sequenceNum"));
  contentAssoc.put("mapKey",context.get("mapKey"));
  String upperCoordinateStr=(String)context.get("upperCoordinate");
  if (UtilValidate.isEmpty(upperCoordinateStr)) {
    contentAssoc.put("upperCoordinate",null);
  }
 else {
    contentAssoc.put("upperCoordinate",upperCoordinateStr);
  }
  String leftCoordinateStr=(String)context.get("leftCoordinate");
  if (UtilValidate.isEmpty(leftCoordinateStr)) {
    contentAssoc.put("leftCoordinate",null);
  }
 else {
    contentAssoc.put("leftCoordinate",leftCoordinateStr);
  }
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  String userLoginId=(String)userLogin.get("userLoginId");
  String createdByUserLogin=userLoginId;
  String lastModifiedByUserLogin=userLoginId;
  Timestamp createdDate=UtilDateTime.nowTimestamp();
  Timestamp lastModifiedDate=UtilDateTime.nowTimestamp();
  contentAssoc.put("createdByUserLogin",createdByUserLogin);
  contentAssoc.put("lastModifiedByUserLogin",lastModifiedByUserLogin);
  contentAssoc.put("createdDate",createdDate);
  contentAssoc.put("lastModifiedDate",lastModifiedDate);
  Map<String,Object> serviceInMap=FastMap.newInstance();
  String permissionStatus=null;
  serviceInMap.put("userLogin",context.get("userLogin"));
  serviceInMap.put("targetOperationList",targetOperationList);
  serviceInMap.put("contentPurposeList",contentPurposeList);
  serviceInMap.put("entityOperation",context.get("entityOperation"));
  serviceInMap.put("contentAssocPredicateId",context.get("contentAssocPredicateId"));
  serviceInMap.put("contentIdTo",contentIdTo);
  serviceInMap.put("contentIdFrom",contentIdFrom);
  serviceInMap.put("statusId",context.get("statusId"));
  serviceInMap.put("privilegeEnumId",context.get("privilegeEnumId"));
  serviceInMap.put("roleTypeList",context.get("roleTypeList"));
  serviceInMap.put("displayFailCond",context.get("displayFailCond"));
  Map<String,Object> permResults=null;
  permResults=dispatcher.runSync("checkAssocPermission",serviceInMap);
  permissionStatus=(String)permResults.get("permissionStatus");
  if (permissionStatus != null && permissionStatus.equals("granted")) {
    contentAssoc.create();
  }
 else {
    String errorMsg=(String)permResults.get(ModelService.ERROR_MESSAGE);
    result.put(ModelService.ERROR_MESSAGE,errorMsg);
    return ServiceUtil.returnFailure(errorMsg);
  }
  result.put("contentIdTo",contentIdTo);
  result.put("contentIdFrom",contentIdFrom);
  result.put("fromDate",contentAssoc.get("fromDate"));
  result.put("contentAssocTypeId",contentAssoc.get("contentAssocTypeId"));
  return result;
}

public void reset(boolean clear){
  gotVersion=false;
  gotHeaderLength=false;
  gotHeader=false;
  gotBody=false;
  gotBodyBoundary=false;
  headerLength=0;
  bodyLength=0;
  bodyBytesReceived=0;
  if (clear) {
    bufferOffset=0;
    buffer.clear();
    bodyFile=null;
    if (bodyStream != null) {
      try {
        bodyStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      bodyStream=null;
    }
  }
}

void removeAt(final int removeIndex){
  final Object[] items=this.items;
  if (removeIndex == takeIndex) {
    items[takeIndex]=null;
    takeIndex=inc(takeIndex);
    count--;
    if (itrs != null)     itrs.elementDequeued();
  }
 else {
    final int putIndex=this.putIndex;
    for (int i=removeIndex; ; ) {
      int next=inc(i);
      if (next != putIndex) {
        items[i]=items[next];
        i=next;
      }
 else {
        items[i]=null;
        this.putIndex=i;
        break;
      }
    }
    count--;
    if (itrs != null)     itrs.removedAt(removeIndex);
  }
  notFull.signal();
}

private void saveAndClose(boolean save){
  content.setEnabled(false);
  if (timer != null) {
    timer.cancel();
    timer=null;
  }
  if (timerNextSync != null) {
    timerNextSync.cancel();
    timerNextSync=null;
  }
  if (save) {
    Log.d(LOG_TAG,"saveAndClose with SAVE");
    saveData(null);
  }
 else {
    Log.d(LOG_TAG,"saveAndClose WITHOUT save");
  }
  Intent data=new Intent();
  data.setAction(Intent.ACTION_VIEW);
  data.putExtra(PARAM_NOTE,note);
  data.putExtra(PARAM_NOTE_POSITION,notePosition);
  setResult(RESULT_OK,data);
  finish();
}

public static Uri addMessage(ContentResolver resolver,String address,String body,String subject,Long date,boolean deliveryReport,long threadId){
  final Uri CONTENT_URI=Uri.parse("content://sms/outbox");
  return addMessageToUri(resolver,CONTENT_URI,address,body,subject,date,true,deliveryReport,threadId);
}

public static <T>void blockingSubscribePrint(Observable<T> observable,String name){
  CountDownLatch latch=new CountDownLatch(1);
  subscribePrint(observable.finallyDo(null),name);
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
  }
}

public static final double calcNiceNumber(final double RANGE,final boolean ROUND){
  double niceFraction;
  double exponent=Math.floor(Math.log10(RANGE));
  double fraction=RANGE / Math.pow(10,exponent);
  if (ROUND) {
    if (Double.compare(fraction,1.5) < 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,3) < 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,7) < 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
 else {
    if (Double.compare(fraction,1) <= 0) {
      niceFraction=1;
    }
 else     if (Double.compare(fraction,2) <= 0) {
      niceFraction=2;
    }
 else     if (Double.compare(fraction,5) <= 0) {
      niceFraction=5;
    }
 else {
      niceFraction=10;
    }
  }
  return niceFraction * Math.pow(10,exponent);
}

private final Object internalReplace(Object k,Object v,Object cv){
  int h=spread(k.hashCode());
  Object oldVal=null;
  for (Node[] tab=table; ; ) {
    Node f;
    int i, fh;
    Object fk;
    if (tab == null || (f=tabAt(tab,i=(tab.length - 1) & h)) == null)     break;
 else     if ((fh=f.hash) == MOVED) {
      if ((fk=f.key) instanceof TreeBin) {
        TreeBin t=(TreeBin)fk;
        boolean validated=false;
        boolean deleted=false;
        t.acquire(0);
        try {
          if (tabAt(tab,i) == f) {
            validated=true;
            TreeNode p=t.getTreeNode(h,k,t.root);
            if (p != null) {
              Object pv=p.val;
              if (cv == null || cv == pv || cv.equals(pv)) {
                oldVal=pv;
                if ((p.val=v) == null) {
                  deleted=true;
                  t.deleteTreeNode(p);
                }
              }
            }
          }
        }
  finally {
          t.release(0);
        }
        if (validated) {
          if (deleted)           counter.add(-1L);
          break;
        }
      }
 else       tab=(Node[])fk;
    }
 else     if ((fh & HASH_BITS) != h && f.next == null)     break;
 else     if ((fh & LOCKED) != 0) {
      checkForResize();
      f.tryAwaitLock(tab,i);
    }
 else     if (f.casHash(fh,fh | LOCKED)) {
      boolean validated=false;
      boolean deleted=false;
      try {
        if (tabAt(tab,i) == f) {
          validated=true;
          for (Node e=f, pred=null; ; ) {
            Object ek, ev;
            if ((e.hash & HASH_BITS) == h && ((ev=e.val) != null) && ((ek=e.key) == k || k.equals(ek))) {
              if (cv == null || cv == ev || cv.equals(ev)) {
                oldVal=ev;
                if ((e.val=v) == null) {
                  deleted=true;
                  Node en=e.next;
                  if (pred != null)                   pred.next=en;
 else                   setTabAt(tab,i,en);
                }
              }
              break;
            }
            pred=e;
            if ((e=e.next) == null)             break;
          }
        }
      }
  finally {
        if (!f.casHash(fh | LOCKED,fh)) {
          f.hash=fh;
synchronized (f) {
            f.notifyAll();
          }
          ;
        }
      }
      if (validated) {
        if (deleted)         counter.add(-1L);
        break;
      }
    }
  }
  return oldVal;
}

private static final boolean copyHeader(String name,String fromReq,StringBuffer buf){
  int start=fromReq.indexOf(name);
  if (start != -1) {
    int end=fromReq.indexOf("\r\n",start);
    if (end != -1) {
      buf.append(fromReq.subSequence(start - 2,end));
      return true;
    }
  }
  return false;
}

public void sendMetric(final String name,final double value){
  logger.debug(String.format("sendMetric(%s, %f)",name,value));
  if (telemetryClient != null) {
    telemetryClient.trackMetric(name,value);
  }
}

default Document putAll(Iterable<Field> fields,Predicate<CharSequence> acceptableFieldNames){
  for (  Field field : fields) {
    if (acceptableFieldNames.test(field.getName())) {
      setValue(field.getName(),field.getValue());
    }
  }
  return this;
}

public static URL findResourceBase(String baseResource,ClassLoader loader){
  URL url=loader.getResource(baseResource);
  return findResourceBase(url,baseResource);
}

public String toEPL(EPStatementFormatter formatter){
  StringWriter writer=new StringWriter();
  toEPL(formatter,writer);
  return writer.toString();
}

public boolean isSpecified(int index){
  if ((index < 0) || (index >= mLength)) {
    throw new ArrayIndexOutOfBoundsException("");
  }
  String str=mItems[(index << 3) + 5];
  return ((str != null) ? (str.charAt(0) == 'd') : true);
}

public StatArchiveReader(String archiveName) throws IOException {
  this(new File[]{new File(archiveName)},null,false);
}

private static void initAdbSocketAddr(){
  try {
    sAdbServerPort=getAdbServerPort();
    InetAddress hostAddr=InetAddress.getByName(DEFAULT_ADB_HOST);
    sSocketAddr=new InetSocketAddress(hostAddr,sAdbServerPort);
  }
 catch (  UnknownHostException e) {
  }
}

public int read(long fileOffset,byte[] buffer,int offset,int length) throws IOException {
  _file.seek(fileOffset);
  return _file.read(buffer,offset,length);
}

private boolean matchesAnyTag(String tagName){
  return tagNames.contains(tagName);
}

default void shutdown(){
  Platform.exit();
}

public boolean isExpanded(int row){
  TreeUI tree=getUI();
  if (tree != null) {
    TreePath path=tree.getPathForRow(this,row);
    if (path != null) {
      Boolean value=expandedState.get(path);
      return (value != null && value.booleanValue());
    }
  }
  return false;
}

private static int labelEnd(String s){
  int colonIndex=s.indexOf(":");
  int semicolonIndex=s.indexOf(";");
  if ((semicolonIndex == -1) || (colonIndex < semicolonIndex)) {
    return colonIndex;
  }
 else {
    return -1;
  }
}

public void addListener(AnimatorListener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<AnimatorListener>();
  }
  mListeners.add(listener);
}

public HttpMethodInfo(Method method,Object handler,Object[] args,MultivaluedMap<String,Object> formParameters,Response responder){
  this.method=method;
  this.handler=handler;
  this.args=Arrays.copyOf(args,args.length);
  this.formParameters=formParameters;
  this.responder=responder;
}

public static boolean equals(byte[][] field1,byte[][] field2){
  int index1=0;
  int length1=field1 == null ? 0 : field1.length;
  int index2=0;
  int length2=field2 == null ? 0 : field2.length;
  while (true) {
    while (index1 < length1 && field1[index1] == null) {
      index1++;
    }
    while (index2 < length2 && field2[index2] == null) {
      index2++;
    }
    boolean atEndOf1=index1 >= length1;
    boolean atEndOf2=index2 >= length2;
    if (atEndOf1 && atEndOf2) {
      return true;
    }
 else     if (atEndOf1 != atEndOf2) {
      return false;
    }
 else     if (!Arrays.equals(field1[index1],field2[index2])) {
      return false;
    }
    index1++;
    index2++;
  }
}

private void drawText(int x1,int y1,int s,boolean e_or_n,Graphics g){
  Color oldColor=g.getColor();
  g.setPaintMode();
  if (m_FontColor == null) {
    g.setColor(Color.black);
  }
 else {
    g.setColor(m_FontColor);
  }
  String st;
  if (e_or_n) {
    Edge e=m_edges[s].m_edge;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_edges[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
 else {
    Node e=m_nodes[s].m_node;
    for (int noa=0; (st=e.getLine(noa)) != null; noa++) {
      g.drawString(st,(m_nodes[s].m_width - m_fontSize.stringWidth(st)) / 2 + x1,y1 + (noa + 1) * m_fontSize.getHeight());
    }
  }
  g.setColor(oldColor);
}

public void update(List<Race> races){
  if (currentRace == null) {
    return;
  }
  if (races.contains(currentRace)) {
    setRace(races.get(races.indexOf(currentRace)));
  }
}

public boolean required(){
  return _parameterMetadata.contains(Metadata.REQUIRED);
}

protected void sendDataToReceiver(ResultReceiver receiver,Intent originalIntent,Serializable data){
  if (receiver != null && data != null) {
    Bundle bundle=new Bundle();
    bundle.putParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT,originalIntent);
    bundle.putSerializable(ServiceReceiver.EXTRA_DATA,data);
    receiver.send(ServiceReceiver.STATUS_DATA,bundle);
  }
}

private static Object matchOrReplace(Context cx,Scriptable scope,Scriptable thisObj,Object[] args,RegExpImpl reImpl,GlobData data,boolean forceFlat){
  NativeRegExp re;
  String str=ScriptRuntime.toString(thisObj);
  data.str=str;
  Scriptable topScope=ScriptableObject.getTopLevelScope(scope);
  if (args.length == 0) {
    Object compiled=NativeRegExp.compileRE(cx,"","",false);
    re=new NativeRegExp(topScope,compiled);
  }
 else   if (args[0] instanceof NativeRegExp) {
    re=(NativeRegExp)args[0];
  }
 else {
    String src=ScriptRuntime.toString(args[0]);
    String opt;
    if (data.optarg < args.length) {
      args[0]=src;
      opt=ScriptRuntime.toString(args[data.optarg]);
    }
 else {
      opt=null;
    }
    Object compiled=NativeRegExp.compileRE(cx,src,opt,forceFlat);
    re=new NativeRegExp(topScope,compiled);
  }
  data.global=(re.getFlags() & NativeRegExp.JSREG_GLOB) != 0;
  int[] indexp={0};
  Object result=null;
  if (data.mode == RA_SEARCH) {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
    if (result != null && result.equals(Boolean.TRUE))     result=Integer.valueOf(reImpl.leftContext.length);
 else     result=Integer.valueOf(-1);
  }
 else   if (data.global) {
    re.lastIndex=0;
    for (int count=0; indexp[0] <= str.length(); count++) {
      result=re.executeRegExp(cx,scope,reImpl,str,indexp,NativeRegExp.TEST);
      if (result == null || !result.equals(Boolean.TRUE))       break;
      if (data.mode == RA_MATCH) {
        match_glob(data,cx,scope,count,reImpl);
      }
 else {
        if (data.mode != RA_REPLACE)         Kit.codeBug();
        SubString lastMatch=reImpl.lastMatch;
        int leftIndex=data.leftIndex;
        int leftlen=lastMatch.index - leftIndex;
        data.leftIndex=lastMatch.index + lastMatch.length;
        replace_glob(data,cx,scope,reImpl,leftIndex,leftlen);
      }
      if (reImpl.lastMatch.length == 0) {
        if (indexp[0] == str.length())         break;
        indexp[0]++;
      }
    }
  }
 else {
    result=re.executeRegExp(cx,scope,reImpl,str,indexp,((data.mode == RA_REPLACE) ? NativeRegExp.TEST : NativeRegExp.MATCH));
  }
  return result;
}

public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){
  for (int i=1; i < keys.length; ++i) {
    if (keys[i] < keys[i - 1]) {
      throw new IllegalArgumentException("keys must be sorted ascending");
    }
  }
  Label def=newLabel();
  Label end=newLabel();
  if (keys.length > 0) {
    int len=keys.length;
    int min=keys[0];
    int max=keys[len - 1];
    int range=max - min + 1;
    if (useTable) {
      Label[] labels=new Label[range];
      Arrays.fill(labels,def);
      for (int i=0; i < len; ++i) {
        labels[keys[i] - min]=newLabel();
      }
      mv.visitTableSwitchInsn(min,max,def,labels);
      for (int i=0; i < range; ++i) {
        Label label=labels[i];
        if (label != def) {
          mark(label);
          generator.generateCase(i + min,end);
        }
      }
    }
 else {
      Label[] labels=new Label[len];
      for (int i=0; i < len; ++i) {
        labels[i]=newLabel();
      }
      mv.visitLookupSwitchInsn(def,keys,labels);
      for (int i=0; i < len; ++i) {
        mark(labels[i]);
        generator.generateCase(keys[i],end);
      }
    }
  }
  mark(def);
  generator.generateDefault();
  mark(end);
}

public void print(PrintWriter output,int w,int d){
  DecimalFormat format=new DecimalFormat();
  format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
  format.setMinimumIntegerDigits(1);
  format.setMaximumFractionDigits(d);
  format.setMinimumFractionDigits(d);
  format.setGroupingUsed(false);
  print(output,format,w + 2);
}

public static <E>Set<E> newSetFromMap(Map<E,Boolean> map){
  if (map.isEmpty()) {
    return new SetFromMap<E>(map);
  }
  throw new IllegalArgumentException();
}

public void removeBiomeType(BiomeDictionary.Type type){
  ArrayList<BiomeGenBase> entryList=new ArrayList<BiomeGenBase>();
  entryList.addAll(Arrays.asList(BiomeDictionary.getBiomesForType(type)));
  for (  BiomeGenBase biome : entryList) {
    Iterator<BiomeEntry> iterator=allowedBiomes.iterator();
    while (iterator.hasNext()) {
      if (BiomeDictionary.areBiomesEquivalent(iterator.next().biome,biome))       iterator.remove();
    }
  }
}

static SizeRequirements calculateTiledRequirements(LayoutIterator iter,SizeRequirements r){
  long minimum=0;
  long maximum=0;
  long preferred=0;
  int lastMargin=0;
  int totalSpacing=0;
  int n=iter.getCount();
  for (int i=0; i < n; i++) {
    iter.setIndex(i);
    int margin0=lastMargin;
    int margin1=(int)iter.getLeadingCollapseSpan();
    totalSpacing+=Math.max(margin0,margin1);
    preferred+=(int)iter.getPreferredSpan(0);
    minimum+=iter.getMinimumSpan(0);
    maximum+=iter.getMaximumSpan(0);
    lastMargin=(int)iter.getTrailingCollapseSpan();
  }
  totalSpacing+=lastMargin;
  totalSpacing+=2 * iter.getBorderWidth();
  minimum+=totalSpacing;
  preferred+=totalSpacing;
  maximum+=totalSpacing;
  if (r == null) {
    r=new SizeRequirements();
  }
  r.minimum=(minimum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)minimum;
  r.preferred=(preferred > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)preferred;
  r.maximum=(maximum > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)maximum;
  return r;
}

public static void writePaddedInteger(Writer out,long value,int size) throws IOException {
  int intValue=(int)value;
  if (intValue == value) {
    writePaddedInteger(out,intValue,size);
  }
 else   if (size <= 19) {
    out.write(Long.toString(value));
  }
 else {
    if (value < 0) {
      out.write('-');
      if (value != Long.MIN_VALUE) {
        value=-value;
      }
 else {
        for (; size > 19; size--) {
          out.write('0');
        }
        out.write("9223372036854775808");
        return;
      }
    }
    int digits=(int)(Math.log(value) / LOG_10) + 1;
    for (; size > digits; size--) {
      out.write('0');
    }
    out.write(Long.toString(value));
  }
}

private static LDAPFilter createORFilter(FilterSet filterSet) throws LDAPException, IOException {
  List<JAXBElement<?>> list=filterSet.getFilterGroup();
  ArrayList<RawFilter> filters=new ArrayList<>(list.size());
  for (  JAXBElement<?> filter : list) {
    filters.add(createFilter(filter));
  }
  return LDAPFilter.createORFilter(filters);
}

private void sendBlob(String index,byte[] blob){
  sendInstruction(new GuacamoleInstruction("blob",index,DatatypeConverter.printBase64Binary(blob)));
}

protected void defineLabels(){
  labelsValues=calcLabels();
  if (handleValues)   labels=getLabelsFromValues();
 else   labels=getLabelsFromData();
  nLabels=labels.size();
}

public static Set<Interval> mergeIntervalToSet(Set<Interval> intervals,Interval intervalToMerge){
  LinkedHashSet<Interval> copyOfOriginalSet=new LinkedHashSet<>(intervals);
  copyOfOriginalSet.add(intervalToMerge);
  return mergeIntervalSet(copyOfOriginalSet);
}

public static String dropWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={"String","Character"}) Closure condition){
  return dropWhile(self.toString(),condition);
}

public void addNode(TopologicalNode node){
  nodeList.add(node);
}

public void printText(String text){
  view.print(text,text.endsWith("\r"));
  for (  ActionDelegate actionDelegate : actionDelegates) {
    actionDelegate.onConsoleOutput(this);
  }
}

@Override public void trim(){
  if (counter < x.length) {
    int[] y=new int[counter];
    System.arraycopy(x,0,y,0,counter);
    x=y;
    resizeValues(counter);
  }
}

private void divide(int[] idx,double[] data,ArrayList<int[]> ret,int start,int end,int depth){
  if (depth == 0) {
    int[] a=Arrays.copyOfRange(idx,start,end);
    Arrays.sort(a);
    ret.add(a);
    return;
  }
  final int count=end - start;
  if (count == 0) {
    for (int j=1 << depth; j > 0; --j) {
      ret.add(new int[0]);
    }
    return;
  }
  double m=0.;
  for (int i=start; i < end; i++) {
    m+=data[i];
  }
  m/=count;
  int pos=Arrays.binarySearch(data,start,end,m);
  if (pos >= 0) {
    final int opt=(start + end) >> 1;
    while (data[pos] == m) {
      if (pos < opt) {
        pos++;
      }
 else       if (pos > opt) {
        pos--;
      }
 else {
        break;
      }
    }
  }
 else {
    pos=(-pos - 1);
  }
  divide(idx,data,ret,start,pos,depth - 1);
  divide(idx,data,ret,pos,end,depth - 1);
}

void assertThreadsStayAlive(long millis,Thread... threads){
  try {
    delay(millis);
    for (    Thread thread : threads)     assertTrue(thread.isAlive());
  }
 catch (  InterruptedException fail) {
    threadFail("Unexpected InterruptedException");
  }
}

public AbstractWorkerManager(String id){
  _id=id;
  _status=new WorkerManagerStatus();
  setExecutionMode(EXECUTION_MODE.NON_SERIAL);
  setupExecutor();
}

@Override public void applyInline(double[] data,int pos,int len){
  int i;
  double[] dataOut=new double[len];
  if (len > real.length) {
    throw new IllegalArgumentException("Length must not be larger than FFT size");
  }
  int middle=len / 2 + len % 2;
  System.arraycopy(data,0,dataOut,0,len);
  System.arraycopy(dataOut,pos + middle,real,0,len - middle);
  System.arraycopy(dataOut,pos,real,real.length - middle,middle);
  if (real.length > len)   Arrays.fill(real,len - middle,real.length - middle,0);
  Arrays.fill(imag,0,imag.length,0.);
  FFT.transform(real,imag,false);
  process(real,imag);
  FFT.transform(real,imag,true);
  System.arraycopy(real,0,dataOut,pos + middle,len - middle);
  System.arraycopy(real,real.length - middle,dataOut,pos,middle);
  double origAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  for (i=0; i < len; i++)   data[i]=amount * dataOut[i] + oneMinusAmount * data[i];
  double newAvgEnergy=SignalProcUtils.getAverageSampleEnergy(data,len);
  double scale=origAvgEnergy / newAvgEnergy;
  for (i=0; i < len; i++)   data[i]*=0.8 * scale;
}

@OnMessage public void onMessage(String message,Session session){
  callInternal("onMessage",session,message);
}

public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){
  shove_fail_clear();
  changed_area_clear();
  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);
  if (!r_ok)   return false;
  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;
  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);
  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);
  return true;
}

boolean thresholdExceeded(final Set<IBindingSet> distinctProjectionBuffer,final int distinctProjectionBufferThreshold,final List<IBindingSet> incomingBindingsBuffer,final int incomingBindingsBufferThreshold){
  return distinctProjectionBuffer.size() >= distinctProjectionBufferThreshold || incomingBindingsBuffer.size() >= incomingBindingsBufferThreshold;
}

public static byte[] toByteArray(String str){
  int len=str.length();
  StringTokenizer st=new StringTokenizer(str,":");
  String[] newStrArray=new String[st.countTokens()];
  int j=0;
  while (st.hasMoreTokens()) {
    newStrArray[j]=st.nextToken();
    j++;
  }
  byte[] ret=new byte[newStrArray.length];
  int tmp;
  for (int i=0; i < newStrArray.length; i++) {
    tmp=Integer.parseInt(newStrArray[i],16);
    ret[i]=(byte)(tmp - 128);
  }
  return ret;
}

public static boolean nullEquals(String s1,String s2){
  return (s1 == null ? s2 == null : s1.equals(s2));
}

private char[] fFormatDigits(final double x){
  String sx;
  int i, j, k;
  final int n1In;
  final int n2In;
  int expon=0;
  boolean minusSign=false;
  if (x > 0.0) {
    sx=Double.toString(x);
  }
 else   if (x < 0.0) {
    sx=Double.toString(-x);
    minusSign=true;
  }
 else {
    sx=Double.toString(x);
    if (sx.charAt(0) == '-') {
      minusSign=true;
      sx=sx.substring(1);
    }
  }
  final int ePos=sx.indexOf('E');
  final int rPos=sx.indexOf('.');
  if (rPos != -1) {
    n1In=rPos;
  }
 else   if (ePos != -1) {
    n1In=ePos;
  }
 else {
    n1In=sx.length();
  }
  if (rPos != -1) {
    if (ePos != -1) {
      n2In=ePos - rPos - 1;
    }
 else {
      n2In=sx.length() - rPos - 1;
    }
  }
 else {
    n2In=0;
  }
  if (ePos != -1) {
    int ie=ePos + 1;
    expon=0;
    if (sx.charAt(ie) == '-') {
      for (++ie; ie < sx.length(); ie++) {
        if (sx.charAt(ie) != '0') {
          break;
        }
      }
      if (ie < sx.length()) {
        expon=-Integer.parseInt(sx.substring(ie));
      }
    }
 else {
      if (sx.charAt(ie) == '+') {
        ++ie;
      }
      for (; ie < sx.length(); ie++) {
        if (sx.charAt(ie) != '0') {
          break;
        }
      }
      if (ie < sx.length()) {
        expon=Integer.parseInt(sx.substring(ie));
      }
    }
  }
  final int p;
  if (precisionSet) {
    p=precision;
  }
 else {
    p=defaultDigits - 1;
  }
  final char[] ca1=sx.toCharArray();
  final char[] ca2=new char[n1In + n2In];
  final char[] ca3;
  final char[] ca4;
  final char[] ca5;
  for (j=0; j < n1In; j++) {
    ca2[j]=ca1[j];
  }
  i=j + 1;
  for (k=0; k < n2In; j++, i++, k++) {
    ca2[j]=ca1[i];
  }
  if (n1In + expon <= 0) {
    ca3=new char[-expon + n2In];
    for (j=0, k=0; k < (-n1In - expon); k++, j++) {
      ca3[j]='0';
    }
    for (i=0; i < (n1In + n2In); i++, j++) {
      ca3[j]=ca2[i];
    }
  }
 else {
    ca3=ca2;
  }
  boolean carry=false;
  if (p < -expon + n2In) {
    if (expon < 0) {
      i=p;
    }
 else {
      i=p + n1In;
    }
    carry=checkForCarry(ca3,i);
    if (carry) {
      carry=startSymbolicCarry(ca3,i - 1,0);
    }
  }
  if (n1In + expon <= 0) {
    ca4=new char[2 + p];
    if (!carry) {
      ca4[0]='0';
    }
 else {
      ca4[0]='1';
    }
    if (alternateForm || !precisionSet || precision != 0) {
      ca4[1]='.';
      for (i=0, j=2; i < Math.min(p,ca3.length); i++, j++) {
        ca4[j]=ca3[i];
      }
      for (; j < ca4.length; j++) {
        ca4[j]='0';
      }
    }
  }
 else {
    if (!carry) {
      if (alternateForm || !precisionSet || precision != 0) {
        ca4=new char[n1In + expon + p+ 1];
      }
 else {
        ca4=new char[n1In + expon];
      }
      j=0;
    }
 else {
      if (alternateForm || !precisionSet || precision != 0) {
        ca4=new char[n1In + expon + p+ 2];
      }
 else {
        ca4=new char[n1In + expon + 1];
      }
      ca4[0]='1';
      j=1;
    }
    for (i=0; i < Math.min(n1In + expon,ca3.length); i++, j++) {
      ca4[j]=ca3[i];
    }
    for (; i < n1In + expon; i++, j++) {
      ca4[j]='0';
    }
    if (alternateForm || !precisionSet || precision != 0) {
      ca4[j]='.';
      j++;
      for (k=0; i < ca3.length && k < p; i++, j++, k++) {
        ca4[j]=ca3[i];
      }
      for (; j < ca4.length; j++) {
        ca4[j]='0';
      }
    }
  }
  int nZeros=0;
  if (!leftJustify && leadingZeros) {
    int xThousands=0;
    if (thousands) {
      int xlead=0;
      if (ca4[0] == '+' || ca4[0] == '-' || ca4[0] == ' ') {
        xlead=1;
      }
      int xdp=xlead;
      for (; xdp < ca4.length; xdp++) {
        if (ca4[xdp] == '.') {
          break;
        }
      }
      xThousands=(xdp - xlead) / 3;
    }
    if (fieldWidthSet) {
      nZeros=fieldWidth - ca4.length;
    }
    if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {
      nZeros--;
    }
    nZeros-=xThousands;
    if (nZeros < 0) {
      nZeros=0;
    }
  }
  j=0;
  if ((!minusSign && (leadingSign || leadingSpace)) || minusSign) {
    ca5=new char[ca4.length + nZeros + 1];
    j++;
  }
 else {
    ca5=new char[ca4.length + nZeros];
  }
  if (!minusSign) {
    if (leadingSign) {
      ca5[0]='+';
    }
    if (leadingSpace) {
      ca5[0]=' ';
    }
  }
 else {
    ca5[0]='-';
  }
  for (i=0; i < nZeros; i++, j++) {
    ca5[j]='0';
  }
  for (i=0; i < ca4.length; i++, j++) {
    ca5[j]=ca4[i];
  }
  int lead=0;
  if (ca5[0] == '+' || ca5[0] == '-' || ca5[0] == ' ') {
    lead=1;
  }
  int dp=lead;
  for (; dp < ca5.length; dp++) {
    if (ca5[dp] == '.') {
      break;
    }
  }
  final int nThousands=(dp - lead) / 3;
  if (dp < ca5.length) {
    ca5[dp]=dfs.getDecimalSeparator();
  }
  char[] ca6=ca5;
  if (thousands && nThousands > 0) {
    ca6=new char[ca5.length + nThousands + lead];
    ca6[0]=ca5[0];
    for (i=lead, k=lead; i < dp; i++) {
      if (i > 0 && (dp - i) % 3 == 0) {
        ca6[k]=dfs.getGroupingSeparator();
        ca6[k + 1]=ca5[i];
        k+=2;
      }
 else {
        ca6[k]=ca5[i];
        k++;
      }
    }
    for (; i < ca5.length; i++, k++) {
      ca6[k]=ca5[i];
    }
  }
  return ca6;
}

int maxLength(){
  FontMetrics fm=getFontMetrics(getFont());
  int m=0;
  int end=items.size();
  for (int i=0; i < end; i++) {
    int l=fm.stringWidth(((String)items.elementAt(i)));
    m=Math.max(m,l);
  }
  return m;
}

public void write(final char chars[],final int start,final int length) throws java.io.IOException {
  if (m_writer != null)   m_writer.write(chars,start,length);
  int lengthx3=(length << 1) + length;
  if (lengthx3 >= buf_length) {
    flushBuffer();
    setBufferSize(2 * lengthx3);
  }
  if (lengthx3 > buf_length - count) {
    flushBuffer();
  }
  final int n=length + start;
  for (int i=start; i < n; i++) {
    final char c=chars[i];
    if (c < 0x80)     buf[count++]=(byte)(c);
 else     if (c < 0x800) {
      buf[count++]=(byte)(0xc0 + (c >> 6));
      buf[count++]=(byte)(0x80 + (c & 0x3f));
    }
 else {
      buf[count++]=(byte)(0xe0 + (c >> 12));
      buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));
      buf[count++]=(byte)(0x80 + (c & 0x3f));
    }
  }
}

public PlaPointInt round_to_the_left(PlaDirection p_dir){
  PlaPointFloat dir=p_dir.to_float();
  double rounded_x;
  if (dir.v_y > 0) {
    rounded_x=Math.floor(v_x);
  }
 else   if (dir.v_y < 0) {
    rounded_x=Math.ceil(v_x);
  }
 else {
    rounded_x=Math.round(v_x);
  }
  double rounded_y;
  if (dir.v_x > 0) {
    rounded_y=Math.ceil(v_y);
  }
 else   if (dir.v_x < 0) {
    rounded_y=Math.floor(v_y);
  }
 else {
    rounded_y=Math.round(v_y);
  }
  return new PlaPointInt(rounded_x,rounded_y);
}

protected HttpHost determineProxy(HttpHost target,HttpRequest request,HttpContext context) throws HttpException {
  ProxySelector psel=this.proxySelector;
  if (psel == null)   psel=ProxySelector.getDefault();
  if (psel == null)   return null;
  URI targetURI=null;
  try {
    targetURI=new URI(target.toURI());
  }
 catch (  URISyntaxException usx) {
    throw new HttpException("Cannot convert host to URI: " + target,usx);
  }
  List<Proxy> proxies=psel.select(targetURI);
  Proxy p=chooseProxy(proxies,target,request,context);
  HttpHost result=null;
  if (p.type() == Proxy.Type.HTTP) {
    if (!(p.address() instanceof InetSocketAddress)) {
      throw new HttpException("Unable to handle non-Inet proxy address: " + p.address());
    }
    final InetSocketAddress isa=(InetSocketAddress)p.address();
    result=new HttpHost(getHost(isa),isa.getPort());
  }
  return result;
}

private void addReference(final int sourcePosition,final int referencePosition){
  if (srcAndRefPositions == null) {
    srcAndRefPositions=new int[6];
  }
  if (referenceCount >= srcAndRefPositions.length) {
    int[] a=new int[srcAndRefPositions.length + 6];
    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);
    srcAndRefPositions=a;
  }
  srcAndRefPositions[referenceCount++]=sourcePosition;
  srcAndRefPositions[referenceCount++]=referencePosition;
}

public Object[] toArray(){
  return Arrays.copyOf(elementData,size);
}

public boolean isRunning(){
  return mThread != null && mThread.isAlive();
}

public static byte[] unwrapVCF(File sourceFile,File tmpFile) throws FileNotFoundException, IOException {
  ZipArchiveInputStream in=null;
  FileOutputStream fos=null;
  String hmacString=null;
  try {
    in=new ZipArchiveInputStream(new FileInputStream(sourceFile));
    ArchiveEntry entry;
    in.getNextEntry();
    fos=new FileOutputStream(tmpFile);
    IOUtils.copy(in,fos);
    entry=in.getNextEntry();
    hmacString=entry.getName();
    return Utils.hexToBytes(hmacString);
  }
 catch (  StringIndexOutOfBoundsException e) {
    logger.error("Error parsing hmac: " + hmacString + " is no valid hex String",e);
    throw e;
  }
catch (  Exception e) {
    logger.error("Error unwrapping VCF file",e);
    throw e;
  }
 finally {
    if (fos != null) {
      fos.flush();
      fos.close();
    }
    if (in != null) {
      in.close();
    }
  }
}

public boolean registerUser(String username,String password,String uri) throws DataAccessException {
  if (checkUsernameExists(username)) {
    return false;
  }
  storeUser(username,password,uri);
  return true;
}

public SELECT(@NonNull String... columns){
  if (columns == null) {
    throw new NullPointerException("SELECT: Columns are null");
  }
  if (columns.length == 0)   throw new IllegalArgumentException("At least on column is required");
  StringBuilder builder=new StringBuilder("SELECT ");
  for (int i=0; i < columns.length; i++) {
    builder.append(columns[i]);
    if (i != (columns.length - 1))     builder.append(", ");
  }
  sql=builder.toString();
}

public static synchronized MBeanInfo testCompliance(final Class<?> baseClass,Class<?> mbeanInterface) throws NotCompliantMBeanException {
  if (mbeanInterface == null)   mbeanInterface=getStandardMBeanInterface(baseClass);
  ReflectUtil.checkPackageAccess(mbeanInterface);
  MBeanIntrospector<?> introspector=StandardMBeanIntrospector.getInstance();
  return getClassMBeanInfo(introspector,baseClass,mbeanInterface);
}

public static Set<String> toStringSet(TemplateSequenceModel seqModel) throws TemplateModelException {
  Set<String> set=new HashSet<String>();
  for (int i=0; i < seqModel.size(); i++) {
    set.add(getAsStringNonEscaping((TemplateScalarModel)seqModel.get(i)));
  }
  return set;
}

public JKSSignatureToken(InputStream ksStream,String ksPassword){
  try {
    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());
    password=(ksPassword == null) ? null : ksPassword.toCharArray();
    keyStore.load(ksStream,password);
  }
 catch (  Exception e) {
    throw new DSSException(e);
  }
 finally {
    if (ksStream != null) {
      try {
        ksStream.close();
      }
 catch (      IOException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}

protected void writeLocation(String loc) throws IOException {
  hadAnnotations|=(loc != null);
  locOut.writeObject(loc);
}

protected int __offset(int vtable_offset){
  int vtable=bb_pos - bb.getInt(bb_pos);
  return vtable_offset < bb.getShort(vtable) ? bb.getShort(vtable + vtable_offset) : 0;
}

public static String selectText(XPathExpression expr,Node context){
  try {
    return (String)expr.evaluate(context,XPathConstants.STRING);
  }
 catch (  XPathExpressionException e) {
    throw new XmlException(e);
  }
}

public static HttpHeaders toArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders){
  if (inHeaders.isEmpty()) {
    return HttpHeaders.EMPTY_HEADERS;
  }
  final HttpHeaders out=new DefaultHttpHeaders(true,inHeaders.size());
  toArmeria(inHeaders,out);
  return out;
}

public static int calculateRMSLevel(short[] audioData,int numframes){
  long lSum=0;
  int numread=0;
  for (  short s : audioData) {
    lSum=lSum + s;
    numread++;
    if (numread == numframes)     break;
  }
  double dAvg=lSum / numframes;
  double sumMeanSquare=0d;
  numread=0;
  for (  short anAudioData : audioData) {
    sumMeanSquare=sumMeanSquare + Math.pow(anAudioData - dAvg,2d);
    numread++;
    if (numread == numframes)     break;
  }
  double averageMeanSquare=sumMeanSquare / numframes;
  return (int)(Math.pow(averageMeanSquare,0.5d) + 0.5);
}

private void initProgram(){
  glUseProgram(this.program);
  vec3ArrayUniform=glGetUniformLocation(this.program,"cols");
  chosenUniform=glGetUniformLocation(this.program,"chosen");
  glUseProgram(0);
}

public boolean engineContainsAlias(String alias){
  return entries.containsKey(alias.toLowerCase(Locale.ENGLISH));
}

public void invertSelectedRelations(){
  ISelection selection=viewer.getSelection();
  if (!(selection instanceof IStructuredSelection)) {
    return;
  }
  IStructuredSelection structuredSelection=(IStructuredSelection)selection;
  Collection<Relation> inverse=computeInverseRelations(getTableRelations(),structuredSelection);
  StructuredSelection nextSelection=new StructuredSelection(inverse.toArray());
  viewer.setSelection(nextSelection,true);
}

public void testFloatValueNeg(){
  String a="-1238096483923847.6356789029578E+21";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue("incorrect value",aNumber.floatValue() == result);
}

public void bindKeyStore(final KeyStoreService keyStoreService){
  this.keyStore=keyStoreService;
}

protected void drawConnectorCenters(Canvas c){
  List<Connection> connections=mBlock.getAllConnections();
  Paint paint=new Paint();
  paint.setStyle(Paint.Style.FILL);
  for (int i=0; i < connections.size(); i++) {
    Connection conn=connections.get(i);
    if (conn.inDragMode()) {
      if (conn.isConnected()) {
        paint.setColor(Color.RED);
      }
 else {
        paint.setColor(Color.MAGENTA);
      }
    }
 else {
      if (conn.isConnected()) {
        paint.setColor(Color.GREEN);
      }
 else {
        paint.setColor(Color.CYAN);
      }
    }
    mTempWorkspacePoint.set(conn.getPosition().x - mBlock.getPosition().x,conn.getPosition().y - mBlock.getPosition().y);
    mHelper.workspaceToVirtualViewDelta(mTempWorkspacePoint,mTempConnectionPosition);
    if (mHelper.useRtl()) {
      mTempConnectionPosition.x+=mBlockViewSize.x;
    }
    c.drawCircle(mTempConnectionPosition.x,mTempConnectionPosition.y,10,paint);
  }
}

private static boolean isMerge(InstructionHandle handle){
  if (handle.hasTargeters()) {
    InstructionTargeter[] targeterList=handle.getTargeters();
    for (    InstructionTargeter targeter : targeterList) {
      if (targeter instanceof BranchInstruction) {
        return true;
      }
    }
  }
  return false;
}

private synchronized void loadTrustManager(){
  try {
    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);
    tmf.init(keystore);
    for (    TrustManager trustManager : tmf.getTrustManagers()) {
      if (trustManager instanceof X509TrustManager) {
        defaultViPRTrustManager=(X509TrustManager)trustManager;
        log.debug("found a X509TrustManager instance");
        break;
      }
    }
    log.info("renew trust manager. the # of certificates in trust store is {}",defaultViPRTrustManager.getAcceptedIssuers().length);
  }
 catch (  GeneralSecurityException e) {
    log.error(e.getMessage(),e);
  }
}

private boolean isOutsideDocElem(){
  return (null == m_docFrag) && m_elemStack.size() == 0 && (null == m_currentNode || m_currentNode.getNodeType() == Node.DOCUMENT_NODE);
}

public ThreadPool(String name,int poolSize){
  this.poolSize=poolSize;
  this.poolName=name;
  taskList=new LinkedList<Runnable>();
  threads=new WorkerThread[poolSize];
  createThreads();
}

private static Object invokeOrDie(final Method method,final Object object,final Object... params){
  try {
    return method.invoke(object,params);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException("Couldn't use Java reflection to implement protocol message " + "reflection.",e);
  }
catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
 else     if (cause instanceof Error) {
      throw (Error)cause;
    }
 else {
      throw new RuntimeException("Unexpected exception thrown by generated accessor method.",cause);
    }
  }
}

public void clear(){
  this.normal=null;
  this.depth=0;
}

public String name(){
  return theName;
}

public final void addHelperTextColor(@ColorInt final int color){
  if (!helperTextColors.contains(color)) {
    helperTextColors.add(color);
    verifyPasswordStrength();
  }
}

public void advanceToNextMinute(){
}

ListBasedTokenStream(AttributeSource attributeSource,List<AttributeSource> tokens){
  super(attributeSource.getAttributeFactory());
  this.tokens=tokens;
  addAttributes(attributeSource);
}

@SuppressWarnings("rawtypes") protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  String cname=classDesc.getName();
  return ClassFinder.resolveClass(cname,this.loader);
}

public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode){
  return makeValid(source,mode,true,null);
}

public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){
  int result=-1;
  int sublen=key.length;
  int maxpos, first, sp=0;
  maxpos=Math.min(toIndex,a.length) - sublen;
  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {
    first=find(a,first,maxpos,key[0]);
    if ((first < 0) || (first > maxpos)) {
      break;
    }
    for (sp=1; sp < sublen; sp++) {
      if (a[first + sp] != key[sp]) {
        sp=sublen;
      }
    }
  }
  if (sublen == 0) {
    result=0;
  }
 else   if (sp == sublen) {
    result=(first - 1);
  }
  return result;
}

private void addSyntheticEdge(Collection<GraphEdge> result,GraphEdge original,GraphNode head,GraphNode tail){
  result.add(new GraphEdge(head,tail,original.getRelation()));
}

public void addStates(State[] s){
  for (int i=0; i < s.length; i++)   states.addElement(s[i]);
}

private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  init(getMask(actions));
}

private static byte[] WindowsRegEnumKeyEx1(int hKey,int subKeyIndex,int maxKeyLength){
  byte[] result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumKeyEx(hKey,subKeyIndex,maxKeyLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}

public Tasker addTask(Task task){
  tasks.add(task);
  lastAddedTask=task;
  return this;
}

private void initComputeProgram(){
  glUseProgram(computeProgram);
  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);
  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);
  workGroupSizeX=workGroupSize.get(0);
  workGroupSizeY=workGroupSize.get(1);
  timeUniform=glGetUniformLocation(computeProgram,"time");
  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");
  bounceCountUniform=glGetUniformLocation(computeProgram,"bounceCount");
  IntBuffer params=BufferUtils.createIntBuffer(1);
  int loc=glGetUniformLocation(computeProgram,"framebufferImage");
  glGetUniformiv(computeProgram,loc,params);
  framebufferImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,"worldPositionImage");
  glGetUniformiv(computeProgram,loc,params);
  worldPositionImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,"worldNormalImage");
  glGetUniformiv(computeProgram,loc,params);
  worldNormalImageBinding=params.get(0);
  glUseProgram(0);
}

public void sort(){
  throwIfImmutable();
  if (!sorted) {
    Arrays.sort(values,0,size);
    sorted=true;
  }
}

public static Object objectFromByteBuffer(byte[] buffer) throws Exception {
  if (buffer == null)   return null;
  ByteArrayInputStream inStream=new ByteArrayInputStream(buffer);
  ObjectInputStream in=new ObjectInputStreamExt(inStream);
  Object retval=in.readObject();
  in.close();
  return retval;
}

public String generateGroupName(String policyName,Set<String> existingGroupNames,String parentGroupName){
  int count=0;
  String format=null;
  while (count <= existingGroupNames.size()) {
    if (0 == count) {
      format=String.format("SG_%s",policyName);
    }
 else {
      format=String.format("SG_%s_%d",policyName,count);
    }
    String generatedGroupName=generate(parentGroupName,format,SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
    if (!existingGroupNames.contains(generatedGroupName)) {
      return generatedGroupName;
    }
    count++;
  }
  return generate(parentGroupName,String.format("SG1_%s",policyName),SmisConstants.MASK_NAME_DELIMITER,SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH);
}

public static void assertColumnTypes(ResultSet rs,int[] expectedTypes) throws SQLException {
  ResultSetMetaData rsmd=rs.getMetaData();
  int actualCols=rsmd.getColumnCount();
  assertEquals("Unexpected column count:",expectedTypes.length,rsmd.getColumnCount());
  for (int i=0; i < actualCols; i++) {
    assertEquals("Column types do not match for column " + (i + 1),expectedTypes[i],rsmd.getColumnType(i + 1));
  }
}

public DefaultActionGroup(@NotNull AnAction... actions){
  this(Arrays.asList(actions));
}

public int add(T dl,int row){
  _list.add(row,dl);
  fireTableRowsInserted(row,row);
  return row;
}

private void pushTerm(BytesRef text) throws IOException {
  int limit=Math.min(lastTerm.length(),text.length);
  int pos=0;
  while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset + pos]) {
    pos++;
  }
  for (int i=lastTerm.length() - 1; i >= pos; i--) {
    int prefixTopSize=pending.size() - prefixStarts[i];
    if (prefixTopSize >= minItemsInBlock) {
      writeBlocks(i + 1,prefixTopSize);
      prefixStarts[i]-=prefixTopSize - 1;
    }
  }
  if (prefixStarts.length < text.length) {
    prefixStarts=ArrayUtil.grow(prefixStarts,text.length);
  }
  for (int i=pos; i < text.length; i++) {
    prefixStarts[i]=pending.size();
  }
  lastTerm.copyBytes(text);
}

public NumericLiteral(Object x){
  if (x instanceof Number) {
    m_number=(Number)x;
    m_type=TypeLib.getPrimitiveType(m_number.getClass());
  }
 else {
    throw new IllegalArgumentException("Invalid type!");
  }
}

private boolean isMineshafterPresent(){
  try {
    Class.forName("mineshafter.MineServer");
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}

@SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);
  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;
  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  int maxRightBound=maxWidth - paddingRight;
  int maxBottomBound=maxHeight - paddingBottom;
  int left;
  int top;
  int right;
  int bottom;
  int rightBound=paddingLeft;
  int maxRightNoPadding=rightBound;
  int bottomBound;
  int lastMaxBottom=paddingTop;
  int maxBottom=lastMaxBottom;
  int childWidth;
  int childHeight;
  int lineStartIndex=0;
  int lineEndIndex;
  rectList.clear();
  int childCount=getChildCount();
  for (int index=0; index < childCount; index++) {
    final View child=getChildAt(index);
    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);
    if (child.getVisibility() == View.GONE)     continue;
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    childWidth=child.getMeasuredWidth();
    childHeight=child.getMeasuredHeight();
    left=rightBound + lp.leftMargin;
    right=left + childWidth;
    rightBound=right + lp.rightMargin;
    if (rightBound > maxRightBound) {
      lineEndIndex=index;
      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);
      if (maxBottom >= maxBottomBound)       break;
      if (lineEndIndex == lineStartIndex) {
        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);
        childWidth=child.getMeasuredWidth();
        childHeight=child.getMeasuredHeight();
      }
      left=paddingLeft + lp.leftMargin;
      right=left + childWidth;
      rightBound=right + lp.rightMargin;
      lastMaxBottom=maxBottom;
      top=lastMaxBottom + lp.topMargin;
      bottom=top + childHeight;
      bottomBound=bottom + lp.bottomMargin;
      lineStartIndex=index;
    }
 else {
      top=lastMaxBottom + lp.topMargin;
      bottom=top + childHeight;
      bottomBound=bottom + lp.bottomMargin;
    }
    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;
    if (bottomBound > maxBottom)     maxBottom=bottomBound;
    Rect rect=new Rect();
    rect.left=left;
    rect.top=top;
    rect.right=right;
    rect.bottom=bottom;
    rectList.add(rect);
  }
  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());
  int measuredWidth;
  int measuredHeight;
  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth;
 else   measuredWidth=maxRightNoPadding + paddingRight;
  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight;
 else {
    measuredHeight=maxBottom + paddingBottom;
    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;
  }
  setMeasuredDimension(measuredWidth,measuredHeight);
}

private final boolean compareAndSetHead(Node update){
  return unsafe.compareAndSwapObject(this,headOffset,null,update);
}

private void ensureBufferCapacity(int desiredCapacity){
  int capacity=pixelBuffer.length;
  while (capacity < desiredCapacity) {
    capacity*=2;
  }
  if (capacity > pixelBuffer.length) {
    pixelBuffer=new byte[capacity];
  }
}

protected Set<DependencyKind> removeDependency(Node n){
  Set<DependencyKind> removedKinds=new HashSet<>();
  for (  DependencyKind dk : DependencyKind.values()) {
    Set<Node> depsByKind=deps.get(dk);
    if (depsByKind == null)     continue;
    if (depsByKind.remove(n)) {
      removedKinds.add(dk);
    }
  }
  return removedKinds;
}

public static <K,V>ConcurrentMap<K,V> newConcurrentMapWithAggressiveConcurrency(){
  return new ConcurrentHashMap<>(16,0.75f,aggressiveConcurrencyLevel);
}

@Override public boolean connectionAllowed(String eventName){
  if (m_listenee != null || !eventName.equals("instance")) {
    return false;
  }
  return true;
}

protected char skipAllWhitespace(Reader r) throws IOException {
  char c;
  do {
    c=(char)r.read();
  }
 while (Character.isWhitespace(c) && c != (char)-1);
  return c;
}

public Iterator enumerateLiteralResultAttributes(){
  return (null == m_avts) ? null : m_avts.iterator();
}

public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<>();
  }
  return parse(str.toCharArray(),separator);
}

public PriorityQueue(Collection<? extends E> c){
  if (c instanceof PriorityQueue) {
    getFromPriorityQueue((PriorityQueue<? extends E>)c);
  }
 else   if (c instanceof SortedSet) {
    getFromSortedSet((SortedSet<? extends E>)c);
  }
 else {
    initSize(c);
    addAll(c);
  }
}

private String resourceId(){
  return subSchemaPath.isEmpty() ? null : lastSchemaNodeName();
}

private long acquireWrite(boolean interruptible,long deadline){
  WNode node=null, p;
  for (int spins=-1; ; ) {
    long m, s, ns;
    if ((m=(s=state) & ABITS) == 0L) {
      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;
    }
 else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0;
 else     if (spins > 0) {
      if (LockSupport.nextSecondarySeed() >= 0)       --spins;
    }
 else     if ((p=wtail) == null) {
      WNode hd=new WNode(WMODE,null);
      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;
    }
 else     if (node == null)     node=new WNode(WMODE,p);
 else     if (node.prev != p)     node.prev=p;
 else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {
      p.next=node;
      break;
    }
  }
  for (int spins=-1; ; ) {
    WNode h, np, pp;
    int ps;
    if ((h=whead) == p) {
      if (spins < 0)       spins=HEAD_SPINS;
 else       if (spins < MAX_HEAD_SPINS)       spins<<=1;
      for (int k=spins; ; ) {
        long s, ns;
        if (((s=state) & ABITS) == 0L) {
          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {
            whead=node;
            node.prev=null;
            return ns;
          }
        }
 else         if (LockSupport.nextSecondarySeed() >= 0 && --k <= 0)         break;
      }
    }
 else     if (h != null) {
      WNode c;
      Thread w;
      while ((c=h.cowait) != null) {
        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);
      }
    }
    if (whead == h) {
      if ((np=node.prev) != p) {
        if (np != null)         (p=np).next=node;
      }
 else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING);
 else       if (ps == CANCELLED) {
        if ((pp=p.prev) != null) {
          node.prev=pp;
          pp.next=node;
        }
      }
 else {
        long time;
        if (deadline == 0L)         time=0L;
 else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);
        Thread wt=Thread.currentThread();
        U.putObject(wt,PARKBLOCKER,this);
        node.thread=wt;
        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);
        node.thread=null;
        U.putObject(wt,PARKBLOCKER,null);
        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);
      }
    }
  }
}

@Override public boolean isInitial(){
  return init;
}

public static String denormalize(final CharSequence self){
  if (lineSeparator == null) {
    final StringWriter sw=new StringWriter(2);
    try {
      final BufferedWriter bw=new BufferedWriter(sw);
      bw.newLine();
      bw.flush();
      lineSeparator=sw.toString();
    }
 catch (    IOException ioe) {
      lineSeparator="\n";
    }
  }
  final int len=self.length();
  if (len < 1) {
    return self.toString();
  }
  final StringBuilder sb=new StringBuilder((110 * len) / 100);
  int i=0;
  CharSequence cs=(self instanceof GString) ? self.toString() : self;
  while (i < len) {
    final char ch=cs.charAt(i++);
switch (ch) {
case '\r':
      sb.append(lineSeparator);
    if ((i < len) && (cs.charAt(i) == '\n')) {
      ++i;
    }
  break;
case '\n':
sb.append(lineSeparator);
break;
default :
sb.append(ch);
break;
}
}
return sb.toString();
}

public static void performSaveAs(String schemaPrefixFileName,String selFilePath,ContainerConfig containerConfig){
  try {
    File fileWithDefaultConfiguration=createContainerSchemaFile(schemaPrefixFileName,selFilePath);
    updateFile(containerConfig,fileWithDefaultConfiguration.getPath(),schemaPrefixFileName);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

public boolean isAborted(){
  return isAborted.get();
}

public void append(int key,E value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  if (mGarbage && mSize >= mKeys.length) {
    gc();
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    Object[] nvalues=new Object[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}

public void testSkip() throws IOException {
  byte[] data=new byte[1024 * 1024];
  byte[] gzipped=GZIPOutputStreamTest.gzip(data);
  GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(gzipped));
  long totalSkipped=0;
  long count;
  do {
    count=in.skip(Long.MAX_VALUE);
    totalSkipped+=count;
  }
 while (count > 0);
  assertEquals(data.length,totalSkipped);
  in.close();
}

private Support_TestWebData(String path,String type){
  File file=new File(path);
  testLength=file.length();
  testLastModified=file.lastModified();
  testName=file.getName();
  testType=type;
  testDir=file.isDirectory();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  FileInputStream in=null;
  try {
    in=new FileInputStream(file);
    while (in.available() > 0) {
      out.write(in.read());
    }
    in.close();
    out.flush();
    test0Data=out.toByteArray();
    out.close();
    test0DataAvailable=true;
    return;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (in != null) {
        in.close();
      }
      if (out != null) {
        out.close();
      }
    }
 catch (    IOException e) {
    }
  }
}

public static void print(boolean x){
  out.print(x);
  out.flush();
}

public IpcSharedMemorySpace(String tokFileName,int writerPid,int readerPid,int size,boolean reader,IgniteLogger parent) throws IgniteCheckedException {
  assert size > 0 : "Size cannot be less than 1 byte";
  log=parent.getLogger(IpcSharedMemorySpace.class);
  opSize=size;
  shmemPtr=IpcSharedMemoryUtils.allocateSystemResources(tokFileName,size,DEBUG && log.isDebugEnabled());
  shmemId=IpcSharedMemoryUtils.sharedMemoryId(shmemPtr);
  semId=IpcSharedMemoryUtils.semaphoreId(shmemPtr);
  isReader=reader;
  this.tokFileName=tokFileName;
  this.readerPid=readerPid;
  this.writerPid=writerPid;
  if (DEBUG && log.isDebugEnabled())   log.debug("Shared memory space has been created: " + this);
}

@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}

public Version addQualifier(String qualifier){
  List<String> newQualifiers=new ArrayList<>(this.qualifiers);
  newQualifiers.add(qualifier);
  return new Version(major,minor,patch,newQualifiers.toArray(new String[newQualifiers.size()]));
}

public int loadSigned16(int addr){
  return loadSigned16(addr,AccessSource.CODE);
}

public static String arrayToHexString(byte[] array){
  return arrayToHexString(array,0,array.length);
}

public static void unregisterBaggageHandler(BaggageHandler handler){
  handlers.remove(handler);
}

public DefaultHeatMapDataset(int xSamples,int ySamples,double minX,double maxX,double minY,double maxY){
  if (xSamples < 1) {
    throw new IllegalArgumentException("Requires 'xSamples' > 0");
  }
  if (ySamples < 1) {
    throw new IllegalArgumentException("Requires 'ySamples' > 0");
  }
  if (Double.isInfinite(minX) || Double.isNaN(minX)) {
    throw new IllegalArgumentException("'minX' cannot be INF or NaN.");
  }
  if (Double.isInfinite(maxX) || Double.isNaN(maxX)) {
    throw new IllegalArgumentException("'maxX' cannot be INF or NaN.");
  }
  if (Double.isInfinite(minY) || Double.isNaN(minY)) {
    throw new IllegalArgumentException("'minY' cannot be INF or NaN.");
  }
  if (Double.isInfinite(maxY) || Double.isNaN(maxY)) {
    throw new IllegalArgumentException("'maxY' cannot be INF or NaN.");
  }
  this.xSamples=xSamples;
  this.ySamples=ySamples;
  this.minX=minX;
  this.maxX=maxX;
  this.minY=minY;
  this.maxY=maxY;
  this.zValues=new double[xSamples][];
  for (int x=0; x < xSamples; x++) {
    this.zValues[x]=new double[ySamples];
  }
}

public static void assertEqualsAnyOrder(EventBean[][] expected,EventBean[][] actual){
  if (compareArraySize(expected,actual)) {
    return;
  }
  int numMatches=0;
  boolean[] foundReceived=new boolean[actual.length];
  for (  EventBean[] expectedObject : expected) {
    boolean found=false;
    for (int i=0; i < actual.length; i++) {
      if (foundReceived[i]) {
        continue;
      }
      boolean match=compareEqualsExactOrder(actual[i],expectedObject);
      if (match) {
        found=true;
        numMatches++;
        foundReceived[i]=true;
        break;
      }
    }
    if (!found) {
      log.error(".assertEqualsAnyOrder Not found in received results is expected=" + Arrays.toString(expectedObject));
      log.error(".assertEqualsAnyOrder received=" + Arrays.toString(actual));
    }
    ScopeTestHelper.assertTrue(found);
  }
  ScopeTestHelper.assertEquals(numMatches,expected.length);
}

private void collectText(){
  if (textNodeCount > 1) {
    firstTextNode.setText(textBuffer.toString());
  }
  textNodeCount=0;
}

@SuppressWarnings({"rawtypes","unchecked"}) public static <T extends Annotation>T unproxy(T annotation){
  Function unproxyFunction=getUnproxyFunction(annotation.annotationType());
  return (T)unproxyFunction.apply(annotation);
}

public static List<Node> parseExpression(Context context,HashSet<String> configNamespaces,String text){
  return parseExpression(context,configNamespaces,text,0,false);
}

public void addTickMarkSection(final Section SECTION){
  if (null == SECTION)   return;
  tickMarkSections.add(SECTION);
  Collections.sort(tickMarkSections,new SectionComparator());
  fireUpdateEvent(REDRAW_EVENT);
}

protected static double calcQ_i(double f,double lambda){
  return lambda * Math.exp(-lambda * f);
}

void flush(){
  printStream.flush();
}

public CharBuffer delete(int start,int end){
  int length=length();
  if (start < 0 || end < start || length < start)   throw new StringIndexOutOfBoundsException();
  end=Math.min(length,end);
  int tail=length - end;
  char[] buffer=buffer();
  for (int i=0; i < tail; i++) {
    buffer[start + i]=buffer[end + i];
  }
  length(length - (end - start));
  return this;
}

public void addPlotter(final Plotter plotter){
  plotters.add(plotter);
}

Node<K,V> findNear(K kkey,int rel){
  Comparable<? super K> key=comparable(kkey);
  for (; ; ) {
    Node<K,V> b=findPredecessor(key);
    Node<K,V> n=b.next;
    for (; ; ) {
      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      Object v=n.value;
      if (v == null) {
        n.helpDelete(b,f);
        break;
      }
      if (v == n || b.value == null)       break;
      int c=key.compareTo(n.key);
      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;
      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;
      b=n;
      n=f;
    }
  }
}

public void addListener(SpeedrunsLiveListener listener){
  listeners.add(listener);
}

public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {
  if (bmap == null || exifOutStream == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=getExifWriterStream(exifOutStream);
  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);
  s.flush();
}

public boolean find(int start){
  if (start < 0 || start > input.length()) {
    throw new IndexOutOfBoundsException("start=" + start + "; length="+ input.length());
  }
synchronized (this) {
    matchFound=findImpl(address,input,start,matchOffsets);
  }
  return matchFound;
}

public int action(String fault,String action){
  Integer current=get(fault);
  if (current == null)   throw new IllegalArgumentException(fault);
  boolean no=action.startsWith("no");
  if (no)   action=action.substring(2);
  Integer bit=getAction(action);
  if (bit == null)   throw new IllegalArgumentException(action);
  int old=current.intValue();
  int mask=bit.intValue();
  int n=(old & (~mask));
  n=(no) ? n : (n | mask);
  put(fault,new Integer(n));
  return n;
}

public static boolean containsWhitespace(CharSequence str){
  if (!hasLength(str)) {
    return false;
  }
  int strLen=str.length();
  for (int i=0; i < strLen; i++) {
    if (Character.isWhitespace(str.charAt(i))) {
      return true;
    }
  }
  return false;
}

public boolean hasUnsupportedCriticalExtension(){
  Set extns=getCriticalExtensionOIDs();
  if (extns == null) {
    return false;
  }
  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);
  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);
  return !extns.isEmpty();
}

public static <T>T decodeFromBase64(Coder<T> coder,String encodedValue) throws CoderException {
  return decodeFromSafeStream(coder,new ByteArrayInputStream(Base64.decodeBase64(encodedValue)),Coder.Context.OUTER);
}

public void validate(Set setData) throws ValidationException {
  for (Iterator iter=setData.iterator(); iter.hasNext(); ) {
    performValidation((String)iter.next());
  }
}

public String add(Object... values){
  double result=0;
  for (int i=0; i < values.length; i++) {
    result+=FunctionHandler.getDouble(values[i]);
  }
  return Double.toString(result);
}

public List<String> listMyDBs(String owner,boolean restricted){
  Connection conn=null;
  try {
    conn=getConnection();
    return listMyDBs(conn,owner,restricted);
  }
 catch (  Exception ex) {
    logger.log(Level.SEVERE,"Exception",ex);
  }
 finally {
    DBUtils.close(conn);
  }
  return null;
}

protected void doFunction(float[] inputs,int inputOffset,float[] outputs,int outputOffset){
  float input=inputs[inputOffset];
  for (int i=0; i < getNumOutputs(); i++) {
    outputs[i + outputOffset]=getC0(i) + (float)(Math.pow(input,getN()) * (getC1(i) - getC0(i)));
  }
}

public void put(String key,long value){
  if (key != null) {
    urlParams.put(key,String.valueOf(value));
  }
}

public int compare(Object o1,Object o2){
  return comparator.compare(o1,o2);
}

public void addCheckBoxActionListener(ActionListener al){
  m_enableDistributedExperiment.addActionListener(al);
}

private Rect calcBounds(int index,Paint paint){
  Rect bounds=new Rect();
  CharSequence title=getTitle(index);
  bounds.right=(int)paint.measureText(title,0,title.length());
  bounds.bottom=(int)(paint.descent() - paint.ascent());
  return bounds;
}

GF256Poly addOrSubtract(GF256Poly other){
  if (!field.equals(other.field)) {
    throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
  }
  if (isZero()) {
    return other;
  }
  if (other.isZero()) {
    return this;
  }
  int[] smallerCoefficients=this.coefficients;
  int[] largerCoefficients=other.coefficients;
  if (smallerCoefficients.length > largerCoefficients.length) {
    int[] temp=smallerCoefficients;
    smallerCoefficients=largerCoefficients;
    largerCoefficients=temp;
  }
  int[] sumDiff=new int[largerCoefficients.length];
  int lengthDiff=largerCoefficients.length - smallerCoefficients.length;
  System.arraycopy(largerCoefficients,0,sumDiff,0,lengthDiff);
  for (int i=lengthDiff; i < largerCoefficients.length; i++) {
    sumDiff[i]=GF256.addOrSubtract(smallerCoefficients[i - lengthDiff],largerCoefficients[i]);
  }
  return new GF256Poly(field,sumDiff);
}

@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(type);
  sb.append("/");
  sb.append(subType);
  for (  String name : attributes.keySet()) {
    if (inferredCharset && ATTR_CHARSET.equals(name)) {
      continue;
    }
    sb.append(";");
    sb.append(name);
    sb.append("=");
    String value=attributes.get(name);
    Matcher tokenMatcher=TOKEN_PATTERN.matcher(value);
    if (tokenMatcher.matches()) {
      sb.append(value);
    }
 else {
      sb.append("\"" + value + "\"");
    }
  }
  return sb.toString();
}

public static long firstFieldOffset(Class clazz){
  long minSize=roundUpTo8(headerSize(clazz));
  while (clazz != Object.class) {
    for (    Field f : clazz.getDeclaredFields()) {
      if ((f.getModifiers() & Modifier.STATIC) == 0) {
        long offset=unsafe.objectFieldOffset(f);
        if (offset < minSize) {
          minSize=offset;
        }
      }
    }
    clazz=clazz.getSuperclass();
  }
  return minSize;
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

public static void w(String tag,String msg,Object... args){
  if (sLevel > LEVEL_WARNING) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.w(tag,msg);
}

private int processPollFds() throws IOException {
  if (pollFds.get(0).revents == POLLIN) {
    byte[] buffer=new byte[8];
    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {
    }
  }
  int readyKeyCount=0;
  for (int i=1; i < pollFds.size(); ++i) {
    StructPollfd pollFd=pollFds.get(i);
    if (pollFd.revents == 0) {
      continue;
    }
    if (pollFd.fd == null) {
      break;
    }
    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;
    pollFd.fd=null;
    pollFd.userData=null;
    int ops=key.interestOpsNoCheck();
    int selectedOps=0;
    if ((pollFd.revents & POLLHUP) != 0) {
      selectedOps|=ops;
    }
    if ((pollFd.revents & POLLIN) != 0) {
      selectedOps|=ops & (OP_ACCEPT | OP_READ);
    }
    if ((pollFd.revents & POLLOUT) != 0) {
      if (key.isConnected()) {
        selectedOps|=ops & OP_WRITE;
      }
 else {
        selectedOps|=ops & OP_CONNECT;
      }
    }
    if (selectedOps != 0) {
      boolean wasSelected=mutableSelectedKeys.contains(key);
      if (wasSelected && key.readyOps() != selectedOps) {
        key.setReadyOps(key.readyOps() | selectedOps);
        ++readyKeyCount;
      }
 else       if (!wasSelected) {
        key.setReadyOps(selectedOps);
        mutableSelectedKeys.add(key);
        ++readyKeyCount;
      }
    }
  }
  return readyKeyCount;
}

public final V extractFirst(){
  if (size() > 0) {
    if (GWT.isScript()) {
      V ret=jsArray.get(0);
      jsArray.remove(0);
      return ret;
    }
 else {
      return javaArray.remove(0);
    }
  }
  return null;
}

@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals("SelectLabelFont")) {
    attemptLabelFontSelection();
  }
 else   if (command.equals("SelectLabelPaint")) {
    attemptModifyLabelPaint();
  }
 else   if (command.equals("SelectTickLabelFont")) {
    attemptTickLabelFontSelection();
  }
}

@AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_unwrap_ByteBuffer$ByteBuffer_04(){
  String host="new host";
  int port=8080;
  ByteBuffer bbs=ByteBuffer.allocate(10);
  ByteBuffer[] bbd={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};
  SSLEngine sse=getEngine(host,port);
  try {
    sse.unwrap(bbs,bbd);
    fail("IllegalStateException wasn't thrown");
  }
 catch (  IllegalStateException iobe) {
  }
catch (  Exception e) {
    fail(e + " was thrown instead of IllegalStateException");
  }
}

public static void upgradeServerInstance(SSOToken ssoToken,String instanceName,String instanceId,Map<String,String> upgradedValues) throws SMSException, SSOException, ConfigurationException, IOException {
  ServiceConfig sc=getServerConfig(ssoToken,instanceName);
  if (sc != null) {
    Map map=sc.getAttributes();
    map.remove(ATTR_PARENT_SITE_ID);
    Set newSet=getPropertiesSet(upgradedValues);
    map.put(ATTR_SERVER_CONFIG,newSet);
    sc.setAttributes(map);
  }
 else {
    throw new ConfigurationException("Unable to upgrade server " + "default properties: no properties found!");
  }
}

public static <T>T instance(Class<T> clazz){
  try {
    return clazz.newInstance();
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
}

private void pop(final String desc){
  char c=desc.charAt(0);
  if (c == '(') {
    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);
  }
 else   if (c == 'J' || c == 'D') {
    pop(2);
  }
 else {
    pop(1);
  }
}

public GenericSipMsrpSession createMsrpSession(ContactId contact,String featureTag,String[] acceptTypes,String[] acceptWrappedTypes){
  if (sLogger.isActivated()) {
    sLogger.info("Initiate a MSRP session with contact " + contact);
  }
  return new OriginatingSipMsrpSession(this,contact,featureTag,mRcsSettings,System.currentTimeMillis(),mContactManager,acceptTypes,acceptWrappedTypes);
}

public ForumPostConfig create(ForumPostConfig config){
  config.addCredentials(this);
  String xml=POST(this.url + "/create-forum-post",config.toXML());
  Element root=parse(xml);
  if (root == null) {
    return null;
  }
  try {
    ForumPostConfig post=new ForumPostConfig();
    post.parseXML(root);
    return post;
  }
 catch (  Exception exception) {
    this.exception=SDKException.parseFailure(exception);
    throw this.exception;
  }
}

protected void drawMark(Graphics2D g2,float x,float y,Color color){
  Rectangle2D bounds=mark.getBounds2D();
  float w=(float)bounds.getWidth();
  float h=(float)bounds.getHeight();
  x=x - (w / 2);
  y=y - (h / 2);
  g2.translate(x,y);
  if (color == null) {
    if (markFillPaint != null) {
      g2.setPaint(markFillPaint);
      g2.fill(mark);
    }
  }
 else {
    g2.setPaint(color);
    g2.fill(mark);
  }
  g2.setPaint(markPaint);
  g2.setStroke(markStroke);
  g2.draw(mark);
  g2.translate(-x,-y);
  Rectangle2D rect=new Rectangle2D.Float(x,y,w,h);
  markBounds.add(rect);
}

public void componentResized(ComponentEvent e){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("Size changed: " + getWidth() + " x "+ getHeight());
  }
  projection.setWidth(getWidth());
  projection.setHeight(getHeight());
  fireProjectionChanged();
}

public String toString(){
  StringBuffer buf=new StringBuffer();
  for (StepPattern pat=this; pat != null; pat=pat.m_relativePathPattern) {
    if (pat != this)     buf.append("/");
    buf.append(Axis.getNames(pat.m_axis));
    buf.append("::");
    if (0x000005000 == pat.m_whatToShow) {
      buf.append("doc()");
    }
 else     if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) {
      buf.append("function()");
    }
 else     if (DTMFilter.SHOW_ALL == pat.m_whatToShow) {
      buf.append("node()");
    }
 else     if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) {
      buf.append("text()");
    }
 else     if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) {
      buf.append("processing-instruction(");
      if (null != pat.m_name) {
        buf.append(pat.m_name);
      }
      buf.append(")");
    }
 else     if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow) {
      buf.append("comment()");
    }
 else     if (null != pat.m_name) {
      if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {
        buf.append("@");
      }
      if (null != pat.m_namespace) {
        buf.append("{");
        buf.append(pat.m_namespace);
        buf.append("}");
      }
      buf.append(pat.m_name);
    }
 else     if (DTMFilter.SHOW_ATTRIBUTE == pat.m_whatToShow) {
      buf.append("@");
    }
 else     if ((DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT) == pat.m_whatToShow) {
      buf.append("doc-root()");
    }
 else {
      buf.append("?" + Integer.toHexString(pat.m_whatToShow));
    }
    if (null != pat.m_predicates) {
      for (int i=0; i < pat.m_predicates.length; i++) {
        buf.append("[");
        buf.append(pat.m_predicates[i]);
        buf.append("]");
      }
    }
  }
  return buf.toString();
}

public static String byteArrayToHexString(byte[] block,int offset,int length){
  StringBuffer buf=new StringBuffer();
  int len=block.length;
  length=length + offset;
  if ((len < length)) {
    length=len;
  }
  for (int i=0 + offset; i < length; i++) {
    byte2hex(block[i],buf);
    if (i < length - 1) {
      buf.append(':');
    }
  }
  return buf.toString();
}

private void changeValue(AbstractStorageLabel<Object> label,Object newValue){
  if (!Objects.equals(label.getValue(),newValue)) {
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.preLabelValueChange(label);
      }
    }
    label.setValue(newValue);
synchronized (labelEditListeners) {
      for (      LabelEditListener listener : labelEditListeners) {
        listener.postLabelValueChange(label);
      }
    }
  }
}

public void write(byte[] b,int offset,int length) throws IOException {
  if (entry.getMethod() == DEFLATED) {
    if (length > 0) {
      if (!def.finished()) {
        def.setInput(b,offset,length);
        while (!def.needsInput()) {
          deflate();
        }
      }
    }
  }
 else {
    writeOut(b,offset,length);
    written+=length;
  }
  crc.update(b,offset,length);
}

public void updatePoint(float x,float y){
  if (Math.sqrt(x * x + y * y) > 1.5)   if (listener != null) {
    listener.onAngleChangedListener(getAngle(x,-y));
  }
}

public final void quietlyJoin(){
  doJoin();
}

@Override public int clampViewPositionHorizontal(View child,int left,int dx){
  if (mDraggedView == null) {
    return 0;
  }
  final int leftBound=0 - MAX_OVERFLOW - (mColumnSizeSide / 2);
  final int rightBound=getWidth() + MAX_OVERFLOW + (mColumnSizeSide / 2);
  return Math.min(Math.max(left,leftBound),rightBound);
}

HttpRequestWrapper(HttpServletRequest request){
  super(request);
}

private int convertToPanelX(double xval){
  double temp=(xval - m_minX) / m_rangeX;
  temp=temp * m_panelWidth;
  return (int)temp;
}

public void forward(HttpServerRequest request){
  forward(request,null);
}

private Set<String> primaryKeys(PreparedStatement stmt,String owner,String tbl) throws SQLException {
  Set<String> pkCols=new HashSet<>();
  stmt.setString(1,owner);
  stmt.setString(2,tbl);
  try (ResultSet pkRs=stmt.executeQuery()){
    while (pkRs.next())     pkCols.add(pkRs.getString(1));
  }
   return pkCols;
}

public static long readUINT32(InputStream stream) throws IOException {
  long result=0;
  for (int i=0; i <= 24; i+=8) {
    result|=(long)stream.read() << i;
  }
  return result;
}

private Token toPrefixToken(ILeafNode leaf){
  Lexer lexer=new InternalN4JSLexer();
  String text=leaf.getText();
  String prefix=text.substring(0,endOffset - leaf.getTotalOffset());
  ANTLRStringStream stream=new ANTLRStringStream(prefix);
  lexer.setCharStream(stream);
  Token nextToken=lexer.nextToken();
  return new CommonToken(nextToken.getType(),nextToken.getText());
}

protected void add(CSVRecord record){
  records.add(Objects.requireNonNull(record));
}

private void scheduledEnqueueSend(){
  schedulerQueueSize.decrementAndGet();
  scheduled.set(false);
  enqueueSendWithErrorLogging();
}

private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){
  final long deadline=timed ? System.nanoTime() + nanos : 0L;
  Thread w=Thread.currentThread();
  int spins=-1;
  ThreadLocalRandom randomYields=null;
  for (; ; ) {
    Object item=s.item;
    if (item != e) {
      s.forgetContents();
      return LinkedTransferQueue.<E>cast(item);
    }
    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {
      unsplice(pred,s);
      return e;
    }
    if (spins < 0) {
      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();
    }
 else     if (spins > 0) {
      --spins;
      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();
    }
 else     if (s.waiter == null) {
      s.waiter=w;
    }
 else     if (timed) {
      nanos=deadline - System.nanoTime();
      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);
    }
 else {
      LockSupport.park(this);
    }
  }
}

public static String join(char[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="";
  for (  char next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}

private <T>BindingAmp<T> findObjectBinding(Key<T> key){
  Objects.requireNonNull(key);
  if (key.qualifiers().length != 1) {
    throw new IllegalArgumentException();
  }
  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));
}

private void initComputeProgram(){
  glUseProgram(computeProgram);
  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);
  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);
  workGroupSizeX=workGroupSize.get(0);
  workGroupSizeY=workGroupSize.get(1);
  timeUniform=glGetUniformLocation(computeProgram,"time");
  blendFactorUniform=glGetUniformLocation(computeProgram,"blendFactor");
  lightRadiusUniform=glGetUniformLocation(computeProgram,"lightRadius");
  IntBuffer props=BufferUtils.createIntBuffer(1);
  IntBuffer params=BufferUtils.createIntBuffer(1);
  props.put(0,GL_BUFFER_BINDING);
  int objectsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Objects");
  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,objectsResourceIndex,props,null,params);
  objectsSsboBinding=params.get(0);
  int trianglesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Triangles");
  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,trianglesResourceIndex,props,null,params);
  trianglesSsboBinding=params.get(0);
  int loc=glGetUniformLocation(computeProgram,"framebufferImage");
  glGetUniformiv(computeProgram,loc,params);
  framebufferImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,"worldPositionImage");
  glGetUniformiv(computeProgram,loc,params);
  worldPositionImageBinding=params.get(0);
  loc=glGetUniformLocation(computeProgram,"worldNormalImage");
  glGetUniformiv(computeProgram,loc,params);
  worldNormalImageBinding=params.get(0);
  glUseProgram(0);
}

public boolean ifTaskCompletedSuccessOrFailureFromResponse(ResponseOnSingeRequest myResponse){
  boolean isCompleted=false;
  try {
    if (myResponse == null || myResponse.isFailObtainResponse()) {
      return isCompleted;
    }
    String responseBody=myResponse.getResponseBody();
    if (responseBody.matches(successRegex) || responseBody.matches(failureRegex)) {
      isCompleted=true;
    }
  }
 catch (  Exception t) {
    logger.error("fail" + t);
  }
  return isCompleted;
}

public void centerHorizontal(ArrayList<Integer> nodes){
  if (m_bNeedsUndoAction) {
    addUndoAction(new centerHorizontalAction(nodes));
  }
  int nMinY=-1;
  int nMaxY=-1;
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nY=getPositionY(nodes.get(iNode));
    if (nY < nMinY || iNode == 0) {
      nMinY=nY;
    }
    if (nY > nMaxY || iNode == 0) {
      nMaxY=nY;
    }
  }
  for (int iNode=0; iNode < nodes.size(); iNode++) {
    int nNode=nodes.get(iNode);
    m_nPositionY.set(nNode,(nMinY + nMaxY) / 2);
  }
}

protected void appendText(final String text){
  if (text != null) {
    textBody.append(text);
  }
}

public void onRestoreInstanceState(Bundle savedInstanceState){
  mSelectedPositions.addAll(savedInstanceState.getIntegerArrayList(TAG));
  Log.d(TAG,"Restore selection " + mSelectedPositions);
}

public Hour(int hour,Day day){
  ParamChecks.nullNotPermitted(day,"day");
  this.hour=(byte)hour;
  this.day=day;
  peg(Calendar.getInstance());
}

public void undo(){
  if (--m_tempUndoIndex < 0) {
    m_tempUndoIndex=m_tempUndoFiles.length - 1;
  }
  if (m_tempUndoFiles[m_tempUndoIndex] != null) {
    AbstractFileLoader loader=ConverterUtils.getLoaderForFile(m_tempUndoFiles[m_tempUndoIndex]);
    try {
      loader.setFile(m_tempUndoFiles[m_tempUndoIndex]);
      setInstancesFromFile(loader);
    }
 catch (    Exception e) {
      e.printStackTrace();
      m_Log.logMessage(e.toString());
      JOptionPane.showMessageDialog(PreprocessPanel.this,"Cannot perform undo operation!\n" + e.toString(),"Undo",JOptionPane.ERROR_MESSAGE);
    }
    m_tempUndoFiles[m_tempUndoIndex]=null;
  }
  int temp=m_tempUndoIndex - 1;
  if (temp < 0) {
    temp=m_tempUndoFiles.length - 1;
  }
  m_UndoBut.setEnabled(m_tempUndoFiles[temp] != null);
}

public static boolean isConnectedUsingWifi(){
  Context context=FeApp.getAppContext();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ni=cm.getActiveNetworkInfo();
  return ni != null && ni.isConnected() == true && ni.getType() == ConnectivityManager.TYPE_WIFI;
}

public void close() throws IOException {
  if (writer != null)   writer.flushBuffer();
}

public boolean isEmpty(){
  return extOrdering.isEmpty();
}

public Process(final File file,final ProgressListener progressListener) throws IOException, XMLException {
  this.processLocation=new FileProcessLocation(file);
  initContext();
  Reader in=null;
  try {
    in=new InputStreamReader(new FileInputStream(file),"UTF-8");
    readProcess(in,progressListener);
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
}

public static String extractMusicIDFromMediaID(@NonNull String mediaID){
  int pos=mediaID.indexOf(LEAF_SEPARATOR);
  if (pos >= 0) {
    return mediaID.substring(pos + 1);
  }
  return null;
}

public void testGetScope() throws Exception {
  Identity i=new IdentityStub("testGetScope");
  assertNull(i.getScope());
  IdentityScope s=IdentityScope.getSystemScope();
  Identity i2=new IdentityStub("testGetScope2",s);
  assertSame(s,i2.getScope());
}

public Object[] buildParameters(Object[] firstParameters,Method method,Class<? extends Annotation> annotationType){
  int parametersLength=method.getParameterTypes().length;
  if (firstParameters.length > 0 && parametersLength < 1) {
    throw new RepositoryMethodException(String.format("Method with %s annotation should have at least one parameter.",annotationType));
  }
  int parametersToResolve=parametersLength - firstParameters.length;
  Object[] additionalParameters=new Object[parametersToResolve];
  for (int i=firstParameters.length; i < parametersLength; i++) {
    additionalParameters[i - firstParameters.length]=parameterProvider.provide(method,i);
  }
  return concatenate(firstParameters,additionalParameters);
}

@Override public boolean contains(S2Cell cell){
  return contains(cell.id());
}

public SimplexNoiseGenerator(Random rand){
  super(rand);
  offsetW=rand.nextDouble() * 256;
}

public static long[] values(Long[] array){
  long[] dest=new long[array.length];
  for (int i=0; i < array.length; i++) {
    Long v=array[i];
    if (v != null) {
      dest[i]=v.longValue();
    }
  }
  return dest;
}

@Override public void processNewLines(String[] lines){
  for (  String line : lines) {
    if (line.startsWith("idx")) {
      continue;
    }
    if (line.contains("No such file")) {
      myIsFileMissing=true;
      return;
    }
    String[] values=line.split(LINE_SPLIT_REGEX);
    if (values.length < INDEX_OF_TX_BYTES) {
      continue;
    }
    try {
      int lineUid=Integer.parseInt(values[INDEX_OF_UID]);
      if (myUid == lineUid) {
        int tempRxBytes=Integer.parseInt(values[INDEX_OF_RX_BYTES]);
        int tempTxBytes=Integer.parseInt(values[INDEX_OF_TX_BYTES]);
        if (tempRxBytes < 0 || tempTxBytes < 0) {
          LOG.warning(String.format("Negative rxBytes %1$d and/or txBytes %2$d in %3$s",tempRxBytes,tempTxBytes,line));
          continue;
        }
        myRxBytes+=tempRxBytes;
        myTxBytes+=tempTxBytes;
      }
    }
 catch (    NumberFormatException e) {
      LOG.warning(String.format("Expected int value, instead got uid %1$s, rxBytes %2$s, txBytes %3$s in %4$s",values[INDEX_OF_UID],values[INDEX_OF_RX_BYTES],values[INDEX_OF_TX_BYTES],line));
    }
  }
}

protected void initLookup(){
  m_lookup=new HashMap();
  for (int i=0; i < m_names.length; ++i) {
    m_lookup.put(m_names[i],new Integer(i));
  }
}

public String toString(){
  String str="";
  String followedBy="";
  int lastType=-1;
  String lastString="";
  int singlesCount=0;
  for (Enumeration e=formatConstraints.elements(); e.hasMoreElements(); ) {
    FormatConstraint constraint=(FormatConstraint)e.nextElement();
    if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) {
      if (lastType != -1) {
        if (lastType != constraint.type) {
          str+=followedBy + singlesCount + lastString;
          followedBy=" followed by ";
          singlesCount=1;
          lastType=constraint.type;
          lastString=constraint.toString();
        }
 else {
          singlesCount++;
        }
      }
 else {
        lastType=constraint.type;
        lastString=constraint.toString();
        singlesCount=1;
      }
    }
 else {
      if (lastType != -1) {
        str+=followedBy + singlesCount + lastString;
        followedBy=" followed by ";
        lastType=-1;
        singlesCount=0;
        lastString="";
      }
      str+=followedBy + constraint.toString();
      followedBy=" followed by ";
    }
  }
  if (lastType != -1) {
    str+=followedBy + singlesCount + lastString;
  }
  return str;
}

public void readData(DataInput din) throws IOException {
  din.readShort();
  count=din.readUnsignedShort();
  registers=new InputRegister[count];
  for (int i=0; i < count; i++) {
    registers[i]=new SimpleInputRegister(din.readShort());
  }
}

public void adjustIndentation(int delta){
  if (delta < 0) {
    indentationLevel=Math.max(0,indentationLevel + delta);
  }
 else {
    indentationLevel+=delta;
  }
}

public int capacity(){
  return capacity.get();
}

protected static token do_code_string() throws java.io.IOException {
  StringBuffer result=new StringBuffer();
  advance();
  advance();
  while (!(next_char == ':' && next_char2 == '}')) {
    if (next_char == EOF_CHAR) {
      emit_error("Specification file ends inside a code string");
      break;
    }
    result.append(new Character((char)next_char));
    advance();
  }
  advance();
  advance();
  return new str_token(sym.CODE_STRING,result.toString());
}

public String random(Object omin,Object omax){
  int min=FunctionHandler.getInt(omin);
  int max=FunctionHandler.getInt(omax);
  if (max > min) {
    return Integer.toString(rnd.nextInt(max - min) + min);
  }
  return "0";
}

public void test_reopen01(){
  final IRawStore store=new SimpleMemoryRawStore();
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(3);
    btree=BTree.create(store,md);
  }
  assertTrue(btree.isOpen());
  btree.close();
  assertFalse(btree.isOpen());
  try {
    btree.close();
    fail("Expecting: " + IllegalStateException.class);
  }
 catch (  IllegalStateException ex) {
    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);
  }
  assertNotNull(btree.getRoot());
  assertTrue(btree.isOpen());
}

public static File searchPaths(Iterable<? extends File> paths,String relFile){
  for (  File path : paths) {
    File f=new File(path,relFile);
    if (f.exists()) {
      return path;
    }
  }
  return null;
}

public boolean hasUnsupportedCriticalExtension(){
  Set extns=getCriticalExtensionOIDs();
  return extns != null && !extns.isEmpty();
}

private static String doNormalize(String filename,char separator,boolean keepSeparator){
  if (filename == null) {
    return null;
  }
  int size=filename.length();
  if (size == 0) {
    return filename;
  }
  int prefix=getPrefixLength(filename);
  if (prefix < 0) {
    return null;
  }
  char[] array=new char[size + 2];
  filename.getChars(0,filename.length(),array,0);
  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;
  for (int i=0; i < array.length; i++) {
    if (array[i] == otherSeparator) {
      array[i]=separator;
    }
  }
  boolean lastIsDirectory=true;
  if (array[size - 1] != separator) {
    array[size++]=separator;
    lastIsDirectory=false;
  }
  for (int i=prefix + 1; i < size; i++) {
    if (array[i] == separator && array[i - 1] == separator) {
      System.arraycopy(array,i,array,i - 1,size - i);
      size--;
      i--;
    }
  }
  for (int i=prefix + 1; i < size; i++) {
    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {
      if (i == size - 1) {
        lastIsDirectory=true;
      }
      System.arraycopy(array,i + 1,array,i - 1,size - i);
      size-=2;
      i--;
    }
  }
  outer:   for (int i=prefix + 2; i < size; i++) {
    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {
      if (i == prefix + 2) {
        return null;
      }
      if (i == size - 1) {
        lastIsDirectory=true;
      }
      int j;
      for (j=i - 4; j >= prefix; j--) {
        if (array[j] == separator) {
          System.arraycopy(array,i + 1,array,j + 1,size - i);
          size-=i - j;
          i=j + 1;
          continue outer;
        }
      }
      System.arraycopy(array,i + 1,array,prefix,size - i);
      size-=i + 1 - prefix;
      i=prefix + 1;
    }
  }
  if (size <= 0) {
    return "";
  }
  if (size <= prefix) {
    return new String(array,0,size);
  }
  if (lastIsDirectory && keepSeparator) {
    return new String(array,0,size);
  }
  return new String(array,0,size - 1);
}

@Override public StringBuffer format(double value,StringBuffer buffer,FieldPosition field){
  for (int i=choiceLimits.length - 1; i >= 0; i--) {
    if (choiceLimits[i] <= value) {
      return buffer.append(choiceFormats[i]);
    }
  }
  return choiceFormats.length == 0 ? buffer : buffer.append(choiceFormats[0]);
}

private void loadConfigurationFromJvmParameters(){
  String repositoryProperty=System.getProperty(REPOSITORY_PROPERTY);
  if (null != repositoryProperty) {
    String[] repositoryIpHost=repositoryProperty.split(":");
    if (repositoryIpHost.length == 2) {
      String repositoryIp=repositoryIpHost[0];
      String repositoryPort=repositoryIpHost[1];
      if (StringUtils.isNotBlank(repositoryIp) && StringUtils.isNotBlank(repositoryPort)) {
        log.info("Repository information found in the JVM parameters: IP=" + repositoryIp + " Port="+ repositoryPort);
        try {
          int port=Integer.parseInt(repositoryPort);
          setRepository(repositoryIp,port);
        }
 catch (        Exception e) {
          log.warn("Repository could not be defined from the data in the JVM parameters",e);
        }
      }
    }
  }
  String agentName=System.getProperty(AGENT_NAME_PROPERTY);
  if (StringUtils.isNotBlank(agentName)) {
    try {
      log.info("Agent name found in the JVM parameters: AgentName=" + agentName);
      setAgentName(agentName);
    }
 catch (    Exception e) {
      log.warn("Agent name could not be defined from the data in the JVM parameters",e);
    }
  }
 else {
    try {
      setAgentName(DEFAULT_AGENT_NAME);
    }
 catch (    StorageException e) {
      log.warn("Agent name could not be defined from default agent name",e);
    }
  }
}

public boolean softSignin() throws IOException {
  if (url == null) {
    throw new IllegalStateException("Null host");
  }
  checkResolveHost();
  if (sessionId != null) {
    if (checkAuthorized(getAuthCheckUrl(sessionId))) {
      LOGGER.fine("Skipping soft init; session ID already exists - " + sessionId);
      return true;
    }
 else {
      sessionId=null;
    }
  }
  long id=loadSessionId();
  if (id == 0) {
    return false;
  }
  boolean authorized=checkAuthorized(getAuthCheckUrl(id));
  if (authorized) {
    LOGGER.info("Authorized with session ID: " + id);
    this.sessionId=id;
  }
  return authorized;
}

private void testViewAlterAndCommandCache() throws SQLException {
  deleteDb("view");
  Connection conn=getConnection("view");
  Statement stat=conn.createStatement();
  stat.execute("create table t0(id int primary key)");
  stat.execute("create table t1(id int primary key)");
  stat.execute("insert into t0 values(0)");
  stat.execute("insert into t1 values(1)");
  stat.execute("create view v1 as select * from t0");
  ResultSet rs=stat.executeQuery("select * from v1");
  assertTrue(rs.next());
  assertEquals(0,rs.getInt(1));
  stat.execute("create or replace view v1 as select * from t1");
  rs=stat.executeQuery("select * from v1");
  assertTrue(rs.next());
  assertEquals(1,rs.getInt(1));
  conn.close();
  deleteDb("view");
}

protected static boolean approxUnit(final StringBuilder sbuf,final int amount,final int size,final String name){
  int count=amount / size;
  int remainder;
  if (count == 0) {
    return false;
  }
  remainder=amount - (count * size);
  if (remainder >= (size * 95 / 100)) {
    count++;
    sbuf.append(count);
  }
 else   if (remainder >= (size * 3 / 4)) {
    count++;
    sbuf.append("just under ");
    sbuf.append(count);
  }
 else   if (remainder >= (size * 1 / 4)) {
    sbuf.append("about ");
    sbuf.append(count);
    sbuf.append(" and a half");
    count=2;
  }
 else   if (remainder >= (size * 5 / 100)) {
    sbuf.append("just over ");
    sbuf.append(count);
  }
 else {
    sbuf.append(count);
  }
  sbuf.append(' ');
  sbuf.append(Grammar.plnoun(count,name));
  return true;
}

public static Element createElement(Document doc,String tag,String nsURI,String prefix){
  String qName=(prefix == null || prefix.length() == 0) ? tag : prefix + ":" + tag;
  return doc.createElementNS(nsURI,qName);
}

public static void modifyFile(File file,Function<String,String> modifier) throws IOException {
  String content=new String(Files.toByteArray(file),StandardCharsets.UTF_8);
  String result=modifier.apply(content);
  Files.write(result.getBytes(StandardCharsets.UTF_8),file);
}

private void state2() throws IOException {
  int[] selectionIds=readList(new File(filePrefix + "sel"));
  int[] archivedIds=readList(new File(filePrefix + "arc"));
  int[] variationIds=new int[lambda];
  if (selectionIds.length != mu) {
    throw new IOException("invalid selection length");
  }
  updatePopulation(archivedIds);
  clearFile(new File(filePrefix + "sel"));
  clearFile(new File(filePrefix + "arc"));
  List<Solution> offspring=new ArrayList<Solution>();
  for (int i=0; i < mu; i+=variation.getArity()) {
    Solution[] parents=new Solution[variation.getArity()];
    for (int j=0; j < variation.getArity(); j++) {
      parents[j]=solutions.get(selectionIds[i + j]);
    }
    offspring.addAll(Arrays.asList(variation.evolve(parents)));
  }
  if (offspring.size() != lambda) {
    throw new IOException("invalid variation length");
  }
  evaluateAll(offspring);
  for (int i=0; i < lambda; i++) {
    variationIds[i]=addToPopulation(offspring.get(i));
  }
  writePopulation(new File(filePrefix + "var"),variationIds);
}

public void testListOptions(){
  if (m_OptionTester.getOptionHandler() != null) {
    if (!m_OptionTester.checkListOptions())     fail("Options cannot be listed via listOptions.");
  }
}

protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){
  double phi_deg=lat;
  double phi=ProjMath.degToRad(phi_deg);
  double lamba_deg=lon;
  double lamba=ProjMath.degToRad(lamba_deg);
  double dlamda=lamba - lamdaf;
  if (dlamda > Math.PI) {
    dlamda-=MoreMath.TWO_PI_D;
  }
 else   if (dlamda < -Math.PI) {
    dlamda+=MoreMath.TWO_PI_D;
  }
  double e=ellps.ecc;
  double r=0.0d;
  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {
    double t=lambTsfn(phi,Math.sin(phi),e);
    r=ellps.radius * F * Math.pow(t,n);
  }
  double theta=n * dlamda;
  double easting=falseEasting + r * Math.sin(theta - alpha);
  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);
  lp.setLocation(easting,northing);
  return dlamda;
}

protected void notifySizeChanged(float width,float height,int orientation){
}

protected boolean removeTurntable(LayoutTurntable o){
  if (!noWarnTurntable) {
    int selectedValue=JOptionPane.showOptionDialog(this,rb.getString("Question4r"),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonYes"),Bundle.getMessage("ButtonNo"),rb.getString("ButtonYesPlus")},Bundle.getMessage("ButtonNo"));
    if (selectedValue == 1) {
      return (false);
    }
    if (selectedValue == 2) {
      noWarnTurntable=true;
    }
  }
  if (selectedObject == o) {
    selectedObject=null;
  }
  if (prevSelectedObject == o) {
    prevSelectedObject=null;
  }
  for (int j=0; j < o.getNumberRays(); j++) {
    TrackSegment t=o.getRayConnectOrdered(j);
    if (t != null) {
      substituteAnchor(o.getRayCoordsIndexed(j),o,t);
    }
  }
  for (int i=0; i < turntableList.size(); i++) {
    LayoutTurntable lx=turntableList.get(i);
    if (lx == o) {
      turntableList.remove(i);
      o.remove();
      setDirty(true);
      repaint();
      return (true);
    }
  }
  return (false);
}

@Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {
  String name=lName == null || lName.length() == 0 ? qName : lName;
  Rule r=(Rule)RULES.match(match);
  if (r != null) {
    r.end(name);
  }
  int slash=match.lastIndexOf('/');
  if (slash >= 0) {
    match=match.substring(0,slash);
  }
 else {
    match="";
  }
}

public INDArray asMatrix(BufferedImage image){
  if (channels == 3) {
    return toBgr(image);
  }
 else {
    image=scalingIfNeed(image,true);
    int w=image.getWidth();
    int h=image.getHeight();
    INDArray ret=Nd4j.create(h,w);
    for (int i=0; i < h; i++) {
      for (int j=0; j < w; j++) {
        ret.putScalar(new int[]{i,j},image.getRGB(i,j));
      }
    }
    return ret;
  }
}

public FileSystemUtils(){
  super();
}

public int scheduledQueueSize(){
  return schedulerQueueSize.get();
}

public DGeneralNameChooser(JFrame parent,String title,GeneralName generalName){
  super(parent,title,ModalityType.DOCUMENT_MODAL);
  initComponents(generalName);
}

public void destroyScene(){
  clearAnimations();
  clearCameras();
  clearLights();
  clearPlugins();
  clearChildren();
  clearFrameCallbacks();
}

private static Platform findPlatform(){
  try {
    try {
      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");
    }
 catch (    ClassNotFoundException e) {
      Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");
    }
    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class);
    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class);
    Method trafficStatsTagSocket=null;
    Method trafficStatsUntagSocket=null;
    OptionalMethod<Socket> getAlpnSelectedProtocol=null;
    OptionalMethod<Socket> setAlpnProtocols=null;
    try {
      Class<?> trafficStats=Class.forName("android.net.TrafficStats");
      trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class);
      trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class);
      try {
        Class.forName("android.net.Network");
        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol");
        setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
 catch (    ClassNotFoundException|NoSuchMethodException ignored) {
    }
    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);
  }
 catch (  ClassNotFoundException ignored) {
  }
  try {
    String negoClassName="org.eclipse.jetty.alpn.ALPN";
    Class<?> negoClass=Class.forName(negoClassName);
    Class<?> providerClass=Class.forName(negoClassName + "$Provider");
    Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider");
    Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider");
    Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass);
    Method getMethod=negoClass.getMethod("get",SSLSocket.class);
    Method removeMethod=negoClass.getMethod("remove",SSLSocket.class);
    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);
  }
 catch (  ClassNotFoundException|NoSuchMethodException ignored) {
  }
  return new Platform();
}

private void addLimitedMitreJoin(LineSegment offset0,LineSegment offset1,double distance,double mitreLimit){
  Coordinate basePt=seg0.p1;
  double ang0=Angle.angle(basePt,seg0.p0);
  double ang1=Angle.angle(basePt,seg1.p1);
  double angDiff=Angle.angleBetweenOriented(seg0.p0,basePt,seg1.p1);
  double angDiffHalf=angDiff / 2;
  double midAng=Angle.normalize(ang0 + angDiffHalf);
  double mitreMidAng=Angle.normalize(midAng + Math.PI);
  double mitreDist=mitreLimit * distance;
  double bevelDelta=mitreDist * Math.abs(Math.sin(angDiffHalf));
  double bevelHalfLen=distance - bevelDelta;
  double bevelMidX=basePt.x + mitreDist * Math.cos(mitreMidAng);
  double bevelMidY=basePt.y + mitreDist * Math.sin(mitreMidAng);
  Coordinate bevelMidPt=new Coordinate(bevelMidX,bevelMidY);
  LineSegment mitreMidLine=new LineSegment(basePt,bevelMidPt);
  Coordinate bevelEndLeft=mitreMidLine.pointAlongOffset(1.0,bevelHalfLen);
  Coordinate bevelEndRight=mitreMidLine.pointAlongOffset(1.0,-bevelHalfLen);
  if (side == Position.LEFT) {
    segList.addPt(bevelEndLeft);
    segList.addPt(bevelEndRight);
  }
 else {
    segList.addPt(bevelEndRight);
    segList.addPt(bevelEndLeft);
  }
}

static byte[] discardNonBase64(byte[] data){
  byte groomedData[]=new byte[data.length];
  int bytesCopied=0;
  for (int i=0; i < data.length; i++) {
    if (isBase64(data[i])) {
      groomedData[bytesCopied++]=data[i];
    }
  }
  byte packedData[]=new byte[bytesCopied];
  System.arraycopy(groomedData,0,packedData,0,bytesCopied);
  return packedData;
}

public void testMultiplyDiffScalePosNeg(){
  String a="1231212478987482988429808779810457634781384756794987";
  int aScale=10;
  String b="747233429293018787918347987234564568";
  int bScale=-10;
  String c="920003122862175749786430095741145455670101391569026662845893091880727173060570190220616";
  int cScale=0;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.multiply(bNumber);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",cScale,result.scale());
}

private static long limitDuration(long leaseDuration,long limit){
  if (leaseDuration == Lease.ANY || leaseDuration > limit)   leaseDuration=limit;
 else   if (leaseDuration < 0)   throw new IllegalArgumentException("negative lease duration");
  return leaseDuration;
}

static String pathToCookiePath(String path){
  if (path == null) {
    return "/";
  }
  int lastSlash=path.lastIndexOf('/');
  return path.substring(0,lastSlash + 1);
}

public static String formatSimpleDecimal(double d){
  return simpleFormat.format(d);
}

protected AbstractCategoryItemLabelGenerator(String labelFormat,DateFormat formatter){
  ParamChecks.nullNotPermitted(labelFormat,"labelFormat");
  ParamChecks.nullNotPermitted(formatter,"formatter");
  this.labelFormat=labelFormat;
  this.numberFormat=null;
  this.percentFormat=NumberFormat.getPercentInstance();
  this.dateFormat=formatter;
  this.nullValueString="-";
}

public void delItems(int s,int e){
  boolean hsbWasVisible=hsbVis;
  boolean vsbWasVisible=vsbVis;
  int oldLastDisplayed=lastItemDisplayed();
  if (log.isLoggable(PlatformLogger.Level.FINE)) {
    log.fine("Deleting from " + s + " to "+ e);
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest("Last displayed item: " + oldLastDisplayed + ", items in window "+ itemsInWindow()+ ", size "+ items.size());
  }
  if (items.size() == 0) {
    return;
  }
  if (s > e) {
    int tmp=s;
    s=e;
    e=tmp;
  }
  if (s < 0) {
    s=0;
  }
  if (e >= items.size()) {
    e=items.size() - 1;
  }
  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());
  for (int i=s; i <= e; i++) {
    items.removeElementAt(s);
    int j=posInSel(i);
    if (j != -1) {
      int newsel[]=new int[selected.length - 1];
      System.arraycopy(selected,0,newsel,0,j);
      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));
      selected=newsel;
    }
  }
  int diff=(e - s) + 1;
  for (int i=0; i < selected.length; i++) {
    if (selected[i] > e) {
      selected[i]-=diff;
    }
  }
  int options=PAINT_VSCROLL;
  if (getFocusIndex() > e) {
    setFocusIndex(getFocusIndex() - (e - s + 1));
    options|=PAINT_FOCUS;
  }
 else   if (getFocusIndex() >= s && getFocusIndex() <= e) {
    int focusBound=(items.size() > 0) ? 0 : -1;
    setFocusIndex(Math.max(s - 1,focusBound));
    options|=PAINT_FOCUS;
  }
  if (log.isLoggable(PlatformLogger.Level.FINEST)) {
    log.finest("Multiple selections: " + multipleSelections);
  }
  if (vsb.getValue() >= s) {
    if (vsb.getValue() <= e) {
      vsb.setValue(e + 1 - diff);
    }
 else {
      vsb.setValue(vsb.getValue() - diff);
    }
  }
  int oldMaxLength=maxLength;
  maxLength=maxLength();
  if (maxLength != oldMaxLength) {
    options|=PAINT_HSCROLL;
  }
  layout();
  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);
  if (repaintNeeded) {
    options|=PAINT_ALL;
  }
  repaint(s,oldLastDisplayed,options);
}

static long makeId(SnmpOid oid){
  long id=0;
  long[] arcs=oid.longValue(false);
  id|=arcs[0] << 56;
  id|=arcs[1] << 48;
  id|=arcs[2] << 40;
  id|=arcs[3] << 32;
  id|=arcs[4] << 24;
  id|=arcs[5] << 16;
  id|=arcs[6] << 8;
  id|=arcs[7];
  return id;
}

private void cacheAttribute(String attrId,byte[][] values){
  String cacheKey=name + "|" + attrId;
  valueCache.put(cacheKey,values);
}

void read(Reader policy) throws ParsingException, IOException {
  if (!(policy instanceof BufferedReader)) {
    policy=new BufferedReader(policy);
  }
  st=new StreamTokenizer(policy);
  st.resetSyntax();
  st.wordChars('a','z');
  st.wordChars('A','Z');
  st.wordChars('.','.');
  st.wordChars('0','9');
  st.wordChars('_','_');
  st.wordChars('$','$');
  st.wordChars(128 + 32,255);
  st.whitespaceChars(0,' ');
  st.commentChar('/');
  st.quoteChar('\'');
  st.quoteChar('"');
  st.lowerCaseMode(false);
  st.ordinaryChar('/');
  st.slashSlashComments(true);
  st.slashStarComments(true);
  st.parseNumbers();
  Hashtable<String,Vector<String>> processedPermissions=null;
  lookahead=st.nextToken();
  while (lookahead != StreamTokenizer.TT_EOF) {
    if (peek("grant")) {
      GrantEntry ge=parseGrantEntry(processedPermissions);
      if (ge != null)       grantEntries.addElement(ge);
    }
 else {
      throw new ParsingException(st.lineno(),"expected grant " + "statement");
    }
    match(";");
  }
}

protected void injectIntoVolumeInformationContainer(Map<String,StringSet> volumeInformation,String infoKey,String altKey,CIMInstance volumeInstance){
  Object value=getCIMPropertyValue(volumeInstance,infoKey);
  if (null == value) {
    value=getCIMPropertyValue(volumeInstance,altKey);
  }
  String charactersticName=SupportedVolumeInformation.getVolumeInformation(infoKey);
  if (null != value && null != charactersticName) {
    StringSet valueSet=new StringSet();
    if (value instanceof String) {
      valueSet.add(value.toString());
    }
 else     if (value instanceof String[]) {
      valueSet.addAll(Arrays.asList((String[])value));
    }
    volumeInformation.put(charactersticName,valueSet);
  }
}

@Override public void onDetachedFromRecyclerView(RecyclerView recyclerView){
  super.onDetachedFromRecyclerView(recyclerView);
  mAttachedRecyclerViewPool.remove(recyclerView);
}

private void loadFile(String filename,AbstractFileLoader... loaders){
  ArffSortedTableModel model;
  this.m_Filename=filename;
  createTitle();
  if (filename.equals("")) {
    model=null;
  }
 else {
    model=new ArffSortedTableModel(filename,loaders);
    model.setShowAttributeIndex(getShowAttributeIndex());
  }
  m_TableArff.setModel(model);
  setChanged(false);
  createName();
}

private void destinationTypeChanged(){
  if (m_Exp == null)   return;
  String str="";
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    m_ResultsDestinationPathLabel.setText("URL:");
    str=m_destinationDatabaseURL;
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText("User...");
  }
 else {
    m_ResultsDestinationPathLabel.setText("Filename:");
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=m_destinationFilename.lastIndexOf(".csv");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + ".arff";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=m_destinationFilename.lastIndexOf(".arff");
      if (ind > -1) {
        m_destinationFilename=m_destinationFilename.substring(0,ind) + ".csv";
      }
    }
    str=m_destinationFilename;
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      int ind=str.lastIndexOf(".csv");
      if (ind > -1) {
        str=str.substring(0,ind) + ".arff";
      }
    }
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      int ind=str.lastIndexOf(".arff");
      if (ind > -1) {
        str=str.substring(0,ind) + ".csv";
      }
    }
    m_BrowseDestinationButton.setEnabled(true);
    m_BrowseDestinationButton.setText("Browse...");
  }
  if (m_ResultsDestinationCBox.getSelectedItem() == DEST_DATABASE_TEXT) {
    DatabaseResultListener drl=null;
    try {
      drl=new DatabaseResultListener();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    drl.setDatabaseURL(m_destinationDatabaseURL);
    m_Exp.setResultListener(drl);
  }
 else {
    if (m_ResultsDestinationCBox.getSelectedItem() == DEST_ARFF_TEXT) {
      InstancesResultListener irl=new InstancesResultListener();
      if (!m_destinationFilename.equals("")) {
        irl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(irl);
    }
 else     if (m_ResultsDestinationCBox.getSelectedItem() == DEST_CSV_TEXT) {
      CSVResultListener crl=new CSVResultListener();
      if (!m_destinationFilename.equals("")) {
        crl.setOutputFile(new File(m_destinationFilename));
      }
      m_Exp.setResultListener(crl);
    }
  }
  m_ResultsDestinationPathTField.setText(str);
  m_Support.firePropertyChange("",null,null);
}

public static InputStream tryGzipInput(InputStream in) throws IOException {
  if (!in.markSupported()) {
    PushbackInputStream pb=new PushbackInputStream(in,16);
    in=pb;
    byte[] magic={0,0};
    pb.read(magic);
    pb.unread(magic);
    if (magic[0] == 31 && magic[1] == -117) {
      return new GZIPInputStream(pb);
    }
    return in;
  }
  in.mark(16);
  boolean isgzip=(in.read() == 31 && in.read() == -117);
  in.reset();
  if (isgzip) {
    in=new GZIPInputStream(in);
  }
  return in;
}

@Override public int hashCode(){
  if (location != null)   return location.hashCode();
 else   return 0;
}

public static Query newPrefixQuery(String field,InetAddress value,int prefixLength){
  if (value == null) {
    throw new IllegalArgumentException("InetAddress must not be null");
  }
  if (prefixLength < 0 || prefixLength > 8 * value.getAddress().length) {
    throw new IllegalArgumentException("illegal prefixLength '" + prefixLength + "'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges");
  }
  byte lower[]=value.getAddress();
  byte upper[]=value.getAddress();
  for (int i=prefixLength; i < 8 * lower.length; i++) {
    int m=1 << (7 - (i & 7));
    lower[i >> 3]&=~m;
    upper[i >> 3]|=m;
  }
  try {
    return newRangeQuery(field,InetAddress.getByAddress(lower),InetAddress.getByAddress(upper));
  }
 catch (  UnknownHostException e) {
    throw new AssertionError(e);
  }
}

public static Subject createAMIdentitySubject(PolicyManager pm,AMIdentity user) throws PolicyException {
  SubjectTypeManager mgr=pm.getSubjectTypeManager();
  Subject subject=mgr.getSubject("AMIdentitySubject");
  Set<String> set=new HashSet<String>();
  set.add(user.getUniversalId());
  subject.setValues(set);
  return subject;
}

protected void expandFor(int index,double d){
  if (index < size)   return;
  int oldSize=size, capacity=vector.length;
  size=index + 1;
  if (capacity >= size)   return;
  while (capacity < size)   capacity*=2;
  double[] t=new double[capacity];
  System.arraycopy(vector,0,t,0,oldSize);
  if (d != 0)   Arrays.fill(t,oldSize,size,d);
  vector=t;
}

private void doNormalCommandLineList(List<String> commandLineList,List<String> jointOptions,Path classpath){
  commandLineList.add("--classpath");
  commandLineList.add(classpath.toString());
  if (jointCompilation) {
    commandLineList.add("-j");
    commandLineList.addAll(jointOptions);
  }
  if (destDir != null) {
    commandLineList.add("-d");
    commandLineList.add(destDir.getPath());
  }
  if (encoding != null) {
    commandLineList.add("--encoding");
    commandLineList.add(encoding);
  }
  if (stacktrace) {
    commandLineList.add("-e");
  }
  if (parameters) {
    commandLineList.add("--parameters");
  }
  if (useIndy) {
    commandLineList.add("--indy");
  }
  if (scriptBaseClass != null) {
    commandLineList.add("-b");
    commandLineList.add(scriptBaseClass);
  }
  if (configscript != null) {
    commandLineList.add("--configscript");
    commandLineList.add(configscript);
  }
}

private synchronized void loadHexImage(IHex hex){
  hexTileset.assignMatch(hex,boardview);
  hexTileset.trackHexImages(hex,tracker);
}

public void triangulate(PointSet ps){
  _triangulations.clear();
  _triangulations.add(ps);
  start();
}

public String base64UrlEncode(byte[] data){
  String encodedData=new String(Base64.encode(data,Base64.URL_SAFE));
  encodedData=encodedData.replace("=","");
  encodedData=encodedData.replace("\n","");
  return encodedData;
}

private void writeJavaFieldSpec(JavaFieldSpec spec,Document document,Element parentElement){
  Element parameter=document.createElement("parameter");
  parameter.appendChild(parentElement);
  parameter.setAttribute("package",spec.getPackageName());
  parameter.setAttribute("class",spec.getClassName());
  parameter.setAttribute("field",spec.getFieldName());
}

private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  init(getMask(actions));
}

@Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {
  if (reader == null) {
    throw new IllegalArgumentException("Reader cannot be 'null'");
  }
  if (baseURI == null) {
    throw new IllegalArgumentException("Base URI cannot be 'null'");
  }
  InputSource inputSource=new InputSource(reader);
  inputSource.setSystemId(baseURI);
  parse(inputSource);
}

private String excludeDestinationStatement(String text){
  int idx=-1;
  if ((idx=text.indexOf("Destination will be")) != -1) {
    text=text.substring(0,idx);
  }
  return text;
}

static byte[] discardNonBase64(byte[] data){
  byte groomedData[]=new byte[data.length];
  int bytesCopied=0;
  for (int i=0; i < data.length; i++) {
    if (isBase64(data[i])) {
      groomedData[bytesCopied++]=data[i];
    }
  }
  byte packedData[]=new byte[bytesCopied];
  System.arraycopy(groomedData,0,packedData,0,bytesCopied);
  return packedData;
}

protected static final String addEscapes(String str){
  StringBuilder retval=new StringBuilder();
  char ch;
  for (int i=0; i < str.length(); i++) {
switch (str.charAt(i)) {
case 0:
      continue;
case '\b':
    retval.append("\\b");
  continue;
case '\t':
retval.append("\\t");
continue;
case '\n':
retval.append("\\n");
continue;
case '\f':
retval.append("\\f");
continue;
case '\r':
retval.append("\\r");
continue;
case '\"':
retval.append("\\\"");
continue;
case '\'':
retval.append("\\\'");
continue;
case '\\':
retval.append("\\\\");
continue;
default :
if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {
String s="0000" + Integer.toString(ch,16);
retval.append("\\u" + s.substring(s.length() - 4,s.length()));
}
 else {
retval.append(ch);
}
continue;
}
}
return retval.toString();
}

public static void addFile(String s) throws IOException {
  File f=new File(s);
  addFile(f);
}

@SafeVarargs public final void insert(int rowIndex,T... newItems){
  insert(rowIndex,Arrays.asList(newItems));
}

@Deprecated public void put(Collection<Integer> data){
  for (  Integer value : data) {
    final int val=value.intValue();
    min=val < min ? val : min;
    max=val > max ? val : max;
  }
}

public IntBuffer majorVersionBuffer(){
  int[] holder=new int[1];
  holder[0]=getMajorVersion();
  IntBuffer ib=IntBuffer.wrap(holder);
  ib.limit(1);
  return ib;
}

public CreateIndexRequest source(XContentBuilder source){
  return source(source.bytes());
}

public static byte[] createDataToSign(byte[] digest){
  byte[] prefix=getDigestInfoPrefix(digest);
  byte[] digestInfo=new byte[prefix.length + digest.length];
  System.arraycopy(prefix,0,digestInfo,0,prefix.length);
  System.arraycopy(digest,0,digestInfo,prefix.length,digest.length);
  return digestInfo;
}

public HttpRequest ifModifiedSince(final long value){
  connection.setIfModifiedSince(value);
  return this;
}

public static String tmpJournal(){
  final File file=Code.wrapThrow(null);
  file.deleteOnExit();
  return file.getAbsolutePath();
}

public void push(final float value){
  int bits=Float.floatToIntBits(value);
  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {
    mv.visitInsn(Opcodes.FCONST_0 + (int)value);
  }
 else {
    mv.visitLdcInsn(value);
  }
}

public static Object newInstance(Class<?> cl,int[] dims){
  if (dims.length == 0) {
    dims=new int[]{1};
  }
  return Array.newInstance(cl,dims);
}

private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {
  int[] cValues=new int[3];
  do {
    if (bits.available() == 8) {
      return;
    }
    int firstByte=bits.readBits(8);
    if (firstByte == 254) {
      return;
    }
    parseTwoBytes(firstByte,bits.readBits(8),cValues);
    for (int i=0; i < 3; i++) {
      int cValue=cValues[i];
      if (cValue == 0) {
        result.append('\r');
      }
 else       if (cValue == 1) {
        result.append('*');
      }
 else       if (cValue == 2) {
        result.append('>');
      }
 else       if (cValue == 3) {
        result.append(' ');
      }
 else       if (cValue < 14) {
        result.append((char)(cValue + 44));
      }
 else       if (cValue < 40) {
        result.append((char)(cValue + 51));
      }
 else {
        throw FormatException.getFormatInstance();
      }
    }
  }
 while (bits.available() > 0);
}

public void playTogether(Collection<Animator> items){
  if (items != null && items.size() > 0) {
    mNeedsSort=true;
    Builder builder=null;
    for (    Animator anim : items) {
      if (builder == null) {
        builder=play(anim);
      }
 else {
        builder.with(anim);
      }
    }
  }
}

protected static void printErrorMessage(Exception e){
  if (e instanceof AbortException) {
    LoggingConfiguration.setVerbose(Level.VERBOSE);
    LOG.verbose(e.getMessage());
  }
 else   if (e instanceof UnspecifiedParameterException) {
    LOG.error(e.getMessage());
  }
 else   if (e instanceof ParameterException) {
    LOG.error(e.getMessage());
  }
 else {
    LOG.exception(e);
  }
}

public String requestStatistics(){
  sb.setLength(0);
  makeStringBuffer(sb);
  return sb.toString();
}

private void applyL1Reg(final double eta_t,Vec x){
  if (lambda1 > 0) {
    l1U+=eta_t * lambda1;
    for (int k=0; k < ws.length; k++) {
      final Vec w_k=ws[k];
      final double[] l1Q_k=l1Q[k];
      for (      IndexValue iv : x) {
        final int i=iv.getIndex();
        final double z=w_k.get(i);
        double newW_i=0;
        if (z > 0)         newW_i=Math.max(0,z - (l1U + l1Q_k[i]));
 else         if (z < 0)         newW_i=Math.min(0,z + (l1U - l1Q_k[i]));
        l1Q_k[i]+=(newW_i - z);
        w_k.set(i,newW_i);
      }
    }
  }
}

@Override public void keyPressed(KeyEvent e){
synchronized (keyLock) {
    keysDown.add(e.getKeyCode());
  }
}

public static String slurpURLNoExceptions(URL u,String encoding){
  try {
    return slurpURL(u,encoding);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}

public static MoveParticipant[] loadMoveParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,MoveArguments arguments,IParticipantDescriptorFilter filter,String[] affectedNatures,SharableParticipants shared){
  RefactoringParticipant[] participants=fgMoveExtensions.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);
  MoveParticipant[] result=new MoveParticipant[participants.length];
  System.arraycopy(participants,0,result,0,participants.length);
  return result;
}

private long[] determinePreferenceVector(Relation<V> relation,ModifiableDBIDs[] neighborIDs,StringBuilder msg){
  if (strategy.equals(Strategy.APRIORI)) {
    return determinePreferenceVectorByApriori(relation,neighborIDs,msg);
  }
 else   if (strategy.equals(Strategy.MAX_INTERSECTION)) {
    return determinePreferenceVectorByMaxIntersection(neighborIDs,msg);
  }
 else {
    throw new IllegalStateException("Should never happen!");
  }
}

private void paintForegroundDisabled(Graphics2D g,int width,int height){
  Shape s=decodeArrowPath(width,height);
  g.setPaint(disabledColor);
  g.fill(s);
}

public void testFlipBitNegativeInside1(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=-1;
  int number=15;
  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.flipBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

private void onUser(@NotNull TLAbsUser absUser){
  User currentUser=null;
  User user=null;
  if (absUser instanceof TLUser) {
    final TLUser tlUser=(TLUser)absUser;
    if (tlUser.isMutualContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserContact(currentUser,tlUser);
    }
 else     if (tlUser.isDeleted()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserDelete(currentUser,tlUser);
    }
 else     if (tlUser.isContact()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserRequest(currentUser,tlUser);
    }
 else     if (tlUser.isSelf() || !tlUser.isBot()) {
      currentUser=(User)databaseManager.getUserById(tlUser.getId());
      user=onUserForeign(currentUser,tlUser);
    }
 else {
      BotLogger.info(LOGTAG,"Bot received");
    }
  }
  if ((currentUser == null) && (user != null)) {
    databaseManager.addUser(user);
  }
 else   if (user != null) {
    databaseManager.updateUser(user);
  }
}

@Override public boolean hasNext(){
  log.log(Level.FINE,"hasNext()");
  boolean result=(nextEvent != null);
  log.log(Level.FINE,"hasNext(): {0}",result);
  return result;
}

@Override public void close(){
  try {
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}

public static XMPMeta extractXMPMeta(InputStream is){
  List<Section> sections=parse(is,true);
  if (sections == null) {
    return null;
  }
  for (  Section section : sections) {
    if (hasXMPHeader(section.data)) {
      int end=getXMPContentEnd(section.data);
      byte[] buffer=new byte[end - XMP_HEADER_SIZE];
      System.arraycopy(section.data,XMP_HEADER_SIZE,buffer,0,buffer.length);
      try {
        XMPMeta result=XMPMetaFactory.parseFromBuffer(buffer);
        return result;
      }
 catch (      XMPException e) {
        Log.d(TAG,"XMP parse error",e);
        return null;
      }
    }
  }
  return null;
}

private void initialize(ModelValidator validator,MClient client){
  if (client == null)   m_globalValidators.add(validator);
  m_validators.add(validator);
  validator.initialize(this,client);
}

void crossOver(BayesNetRepresentation other){
  boolean[] bits=new boolean[m_bits.length];
  for (int i=0; i < m_bits.length; i++) {
    bits[i]=m_bits[i];
  }
  int iCrossOverPoint=m_bits.length;
  do {
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=bits[i];
    }
    iCrossOverPoint=m_random.nextInt(m_bits.length);
    for (int i=iCrossOverPoint; i < m_bits.length; i++) {
      m_bits[i]=other.m_bits[i];
    }
  }
 while (hasCycles());
  calcGlobalScore();
}

public void reset(){
  engineReset();
  state=INITIAL;
}

public Perspective createUserPerspective(final String name,final boolean show){
  Perspective perspective=model.addPerspective(name,true);
  perspective.store(context);
  if (show) {
    showPerspective(name);
  }
  return perspective;
}

public static double phred(double error){
  return -10 * Math.log10(error);
}

public static String of(CtClass type){
  StringBuffer sbuf=new StringBuffer();
  toDescriptor(sbuf,type);
  return sbuf.toString();
}

public abstract String encode();

@SafeVarargs public final Token<TokenType> expect(TokenType... expected) throws SimpleParserException {
  if (hasType(expected))   return this;
  throw new SimpleParserException(line,column,"Expected " + Arrays.toString(expected) + ", but got "+ toString());
}

public void testUpdate3(){
  int newValue1=-1;
  int newValue2=-2;
  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2="+ newValue1+ ", field3="+ newValue2;
  try {
    int num=statement.executeUpdate(updateQuery);
    assertEquals("Not all records in the database were updated",numberOfRecords,num);
    String selectQuery="SELECT field2, field3 FROM " + DatabaseCreator.TEST_TABLE1;
    ResultSet result=statement.executeQuery(selectQuery);
    while (result.next()) {
    }
    result.close();
  }
 catch (  SQLException e) {
    fail("Unexpected exception" + e.getMessage());
  }
}

public void testSetNull() throws Exception {
  PreparedStatement stmt=connection.prepareStatement("INSERT INTO test_blob(id, bin_data) VALUES(?, ?)");
  try {
    stmt.setInt(1,1);
    stmt.setBytes(2,null);
    stmt.executeUpdate();
    stmt.setInt(1,2);
    stmt.setBinaryStream(2,null,0);
    stmt.executeUpdate();
    stmt.setInt(1,3);
    stmt.setString(2,null);
    stmt.executeUpdate();
  }
  finally {
    stmt.close();
  }
}

@Deprecated public boolean isAssignableFrom(Type from){
  if (from == null) {
    return false;
  }
  if (type.equals(from)) {
    return true;
  }
  if (type instanceof Class<?>) {
    return rawType.isAssignableFrom($Gson$Types.getRawType(from));
  }
 else   if (type instanceof ParameterizedType) {
    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());
  }
 else   if (type instanceof GenericArrayType) {
    return rawType.isAssignableFrom($Gson$Types.getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);
  }
 else {
    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);
  }
}

EgDemandDetails insertPenalty(final BigDecimal chqBouncePenalty,final Module module){
  EgDemandDetails demandDetail=null;
  if (chqBouncePenalty != null && chqBouncePenalty.compareTo(BigDecimal.ZERO) > 0) {
    final Installment currInstallment=getCurrentInstallment(module);
    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDao.getDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY,module);
    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(" Penalty Demand reason Master is null in method  insertPenalty");
    final EgDemandReason egDemandReason=demandGenericDao.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,currInstallment,module);
    if (egDemandReason == null)     throw new ApplicationRuntimeException(" Penalty Demand reason is null in method  insertPenalty ");
    demandDetail=EgDemandDetails.fromReasonAndAmounts(chqBouncePenalty,egDemandReason,BigDecimal.ZERO);
  }
  return demandDetail;
}

public SampleInfo(ByteBuffer bb) throws IOException {
  numberOfChannels=bb.getInt();
  sampleRate=bb.getInt();
  coeffMin=bb.getFloat();
  coeffRange=bb.getFloat();
  postEmphasis=bb.getFloat();
  residualFold=bb.getInt();
}

public void handleMaintenance(Operation maintOp){
  performPendingRequestMaintenance();
  checkAndScheduleSynchronization(this.cachedGroupState.membershipUpdateTimeMicros);
  maintOp.complete();
}

public void clear(){
  oredCriteria.clear();
  orderByClause=null;
  distinct=false;
}

public <T>T time(Callable<T> event) throws Exception {
  final long startTime=clock.tick();
  try {
    return event.call();
  }
  finally {
    update(clock.tick() - startTime);
  }
}

public static boolean isPostJDK7(String bytecodeVersion){
  return JDK7.equals(bytecodeVersion) || JDK8.equals(bytecodeVersion);
}

public PutIndexTemplateRequest mapping(String type,Object... source){
  mapping(type,PutMappingRequest.buildFromSimplifiedDef(type,source));
  return this;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 160) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

private InputStream findTemplate(String path,String template){
  try {
    File file=new File(path,template);
    if (file.canRead()) {
      return new BufferedInputStream(new FileInputStream(file.getAbsolutePath()));
    }
 else {
      return null;
    }
  }
 catch (  FileNotFoundException fnfe) {
    return null;
  }
}

@Override public synchronized void initialize(){
  if (!mRootDirectory.exists()) {
    if (!mRootDirectory.mkdirs()) {
      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());
    }
    return;
  }
  File[] files=mRootDirectory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    BufferedInputStream fis=null;
    try {
      fis=new BufferedInputStream(new FileInputStream(file));
      CacheHeader entry=CacheHeader.readHeader(fis);
      entry.size=file.length();
      putEntry(entry.key,entry);
    }
 catch (    IOException e) {
      if (file != null) {
        file.delete();
      }
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}

public void addListener(CircularProgressViewListener listener){
  if (listener != null)   listeners.add(listener);
}

public SiteStatusCheckThreadImpl(){
  super();
  urlCheckers=new HashMap();
}

@Override public void render(final int type,final Graphics2D g2,final float scaling,final boolean isFormGlyph){
  glyphDisplay.setScalingValues(0,0,scaling);
  final float OLDglyphScale=glyphScale;
  if (isFormGlyph) {
    glyphScale=scaling * glyphScale;
  }
  AffineTransform aff=null;
  if (glyphScale != 1f) {
    aff=g2.getTransform();
    g2.scale(glyphScale,glyphScale);
  }
  glyphDisplay.setG2(g2);
  glyphDisplay.paint(null,null,null);
  if (aff != null) {
    g2.setTransform(aff);
  }
  glyphScale=OLDglyphScale;
}

public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){
  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

public List<String> reset(List<String> replace){
  ArrayList<String> copy=new ArrayList<String>(retainedVars.size());
  copy.addAll(retainedVars);
  retainedVars.clear();
  if (replace != null) {
    retainedVars.addAll(replace);
  }
  return copy;
}

protected void release(){
  AppContext tempAppContext=null;
synchronized (grabReleaseSynchronizer) {
    if (usageCount > 1) {
      --usageCount;
    }
 else {
synchronized (threadGroupSynchronizer) {
        tempAppContext=resetAppContext();
      }
    }
  }
  if (tempAppContext != null) {
    try {
      tempAppContext.dispose();
    }
 catch (    IllegalThreadStateException e) {
    }
  }
}

public synchronized void deleteAllTables(){
  List<String> tableNames=new ArrayList<String>(tableLookup.keySet());
  for (  String s : tableNames) {
    deleteTable(s);
  }
}

public PetCategory findOne(String id){
  log.debug("Request to get PetCategory : {}",id);
  PetCategory petCategory=petCategoryRepository.findOne(UUID.fromString(id));
  return petCategory;
}

private void markRemovedDefaultSessionToken(String site,String token){
  if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1);
  HashSet<String> removedSet=removedDefaultTokens.get(site);
  if (removedSet == null) {
    removedSet=new HashSet<>(1);
    removedDefaultTokens.put(site,removedSet);
  }
  removedSet.add(token);
}

private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){
  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();
  for (  VolumeDescriptor descr : addDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);
    if (volumesToAdd == null) {
      volumesToAdd=new ArrayList<URI>();
      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);
    }
    volumesToAdd.add(descr.getVolumeURI());
  }
  for (  VolumeDescriptor descr : removeDescriptors) {
    URI deviceURI=descr.getDeviceURI();
    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);
    if (volumesToUpdateByCG == null) {
      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();
      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);
    }
    URI consistencyGroupURI=descr.getConsistencyGroupURI();
    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);
    if (volumesToUpdate == null) {
      volumesToUpdate=new HashMap<String,List<URI>>();
      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);
    }
    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);
    if (volumesToRemove == null) {
      volumesToRemove=new ArrayList<URI>();
      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);
    }
    volumesToRemove.add(descr.getVolumeURI());
  }
  return deviceToCGMap;
}

public Exchange(final Request request,final Origin origin){
  this.currentRequest=request;
  this.origin=origin;
  this.timestamp=System.currentTimeMillis();
}

public static float computeDiscardAlpha(float amount,float range){
  if (Math.abs(amount) < 1.0f)   return 1.0f;
  float t=amount / range;
  t=MathUtils.clamp(t,-1.0f,1.0f);
  return 1.f - Math.abs(t);
}

public static final FileTime unixTimeToFileTime(long utime){
  return FileTime.from(utime,TimeUnit.SECONDS);
}

public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys,String encoding) throws UnsupportedEncodingException, GeneralSecurityException {
  return encrypt(plaintext.getBytes(encoding),secretKeys);
}

public void removeAddress(AddressEntity address){
  addresses.remove(address);
}

@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSpecMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightSpecMode=MeasureSpec.getMode(heightMeasureSpec);
  int parentWidth=MeasureSpec.getSize(widthMeasureSpec);
  int parentHeight=MeasureSpec.getSize(heightMeasureSpec);
  boolean resizeWidth=widthSpecMode != MeasureSpec.EXACTLY;
  boolean resizeHeight=heightSpecMode != MeasureSpec.EXACTLY;
  int width=parentWidth;
  int height=parentHeight;
  if (sWidth > 0 && sHeight > 0) {
    if (resizeWidth && resizeHeight) {
      width=sWidth();
      height=sHeight();
    }
 else     if (resizeHeight) {
      height=(int)((((double)sHeight() / (double)sWidth()) * width));
    }
 else     if (resizeWidth) {
      width=(int)((((double)sWidth() / (double)sHeight()) * height));
    }
  }
  width=Math.max(width,getSuggestedMinimumWidth());
  height=Math.max(height,getSuggestedMinimumHeight());
  setMeasuredDimension(width,height);
}

protected void fireEndElem(String name) throws org.xml.sax.SAXException {
  if (m_tracer != null) {
    flushMyWriter();
    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);
  }
}

private boolean verifyMigrateFromProductHome(String migrateFromProductHome) throws InstallException {
  if (migrateFromProductHome == null || migrateFromProductHome.length() == 0) {
    Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() :" + "empty product home by the user");
    Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));
    return false;
  }
  if (!migrateFromProductHome.equals(ConfigUtil.getHomePath())) {
    Debug.log("MultipleMigrateDriver.verifyMigrateFromProductHome() : " + "Migrate from product home: " + migrateFromProductHome + ", New product home: "+ ConfigUtil.getHomePath());
    String translateFile=migrateFromProductHome + MigrateFromInstFinderStore.getRelativeTranslateFile();
    if (!FileUtils.isFileValid(translateFile)) {
      Console.println(LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND));
      return false;
    }
  }
 else {
    Debug.log("MultipleMigrateDriver - Error:" + "This product has been already migrated!");
    throw new InstallException(LocalizedMessage.get(LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED));
  }
  return true;
}

public Spanned[] history(){
  int i=0;
  Spanned[] array=new Spanned[history.size()];
  for (  String s : history) {
    if (s != null) {
      array[i]=Html.fromHtml(s);
      i++;
    }
  }
  return array;
}

public static String format(String message,Object[] arguments){
  return MessageFormat.format(message,arguments);
}

private void insertProsodySettings(Utterance utterance,Element element){
  Element prosody=(Element)DomUtils.getAncestor(element,MaryXML.PROSODY);
  if (prosody == null) {
    return;
  }
  Element voice=(Element)DomUtils.getAncestor(element,MaryXML.VOICE);
  if (voice != null && DomUtils.isAncestor(prosody,voice)) {
    return;
  }
  Element paragraph=(Element)DomUtils.getAncestor(element,MaryXML.PARAGRAPH);
  if (paragraph != null && DomUtils.isAncestor(prosody,paragraph)) {
    return;
  }
  for (  String att : PROSODY_ATTRIBUTES) {
    String val=prosody.getAttribute(att);
    if (!val.equals("")) {
      utterance.setString(att,val);
    }
  }
}

public static boolean createFolder(@SuppressWarnings("UnusedParameters") Context mContext,String path,String folderName){
  File SDCardRoot=new File(path,folderName);
  if (!SDCardRoot.exists()) {
    return SDCardRoot.mkdir();
  }
  return false;
}

private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){
  if (imageSize < viewSize) {
    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
  }
 else   if (trans > 0) {
    m[axis]=-((imageSize - viewSize) * 0.5f);
  }
 else {
    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));
  }
}

private CharSequence createTickerText(String title,String body){
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder();
  spannableStringBuilder.append(title);
  spannableStringBuilder.append("\n");
  spannableStringBuilder.append(body);
  spannableStringBuilder.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),0,title.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE);
  return spannableStringBuilder;
}

private void addProtocolIfNotExists(Set<String> protocols,String protocolType){
  if (!protocols.contains(protocolType)) {
    protocols.add(protocolType);
  }
}

public String toString(){
  StringBuilder result=new StringBuilder();
  result.append('@');
  result.append(klazz.getName());
  result.append('(');
  for (int i=0; i < elements.length; ++i) {
    if (i != 0) {
      result.append(", ");
    }
    result.append(elements[i]);
  }
  result.append(')');
  return result.toString();
}

void add(Object key){
  table.put(key,key);
}

public Configuration loadConfigFromResource(Resource resource){
  PropertiesConfiguration result=new PropertiesConfiguration();
  try {
    result.load(resource.getInputStream());
    return result;
  }
 catch (  ConfigurationException|IOException e) {
    LOG.error(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
    throw new SystemConfigException(CONFIGURATION_LOAD_ERROR.format(resource.getFilename()),e);
  }
}

public final void log(String filename,int lineNumber,String method,String tag,int level,String message){
  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());
  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);
  if (filename != null) {
    lm.addString(filename,LogMessage.PART_KEY_FILENAME);
    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);
  }
  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);
  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);
  lm.addString(message,LogMessage.PART_KEY_MESSAGE);
  log(lm);
}

protected Size2D drawVertical(Graphics2D g2,Rectangle2D chartArea){
  double startX;
  double topSpace=0.0;
  double bottomSpace=0.0;
  double leftSpace=0.0;
  double rightSpace=0.0;
  double w=getWidth();
  double h=getHeight();
  RectangleInsets padding=getPadding();
  if (padding != null) {
    topSpace=padding.calculateTopOutset(h);
    bottomSpace=padding.calculateBottomOutset(h);
    leftSpace=padding.calculateLeftOutset(w);
    rightSpace=padding.calculateRightOutset(w);
  }
  if (getPosition() == RectangleEdge.LEFT) {
    startX=chartArea.getX() + leftSpace;
  }
 else {
    startX=chartArea.getMaxX() - rightSpace - w;
  }
  VerticalAlignment alignment=getVerticalAlignment();
  double startY=0.0;
  if (alignment == VerticalAlignment.CENTER) {
    startY=chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0;
  }
 else   if (alignment == VerticalAlignment.TOP) {
    startY=chartArea.getMinY() + topSpace;
  }
 else   if (alignment == VerticalAlignment.BOTTOM) {
    startY=chartArea.getMaxY() - bottomSpace - h;
  }
  g2.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null);
  return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace);
}

private static final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {
  PublicKey key=null;
  try {
    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());
    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);
    key=keyFactory.generatePublic(keySpec);
  }
 catch (  NoSuchAlgorithmException nsae) {
    try {
      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);
      X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);
      key=keyFactory.generatePublic(keySpec);
    }
 catch (    NoSuchAlgorithmException nsae2) {
      throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm");
    }
catch (    InvalidKeySpecException ikse2) {
      InvalidKeyException ike=new InvalidKeyException("Cannot construct public key");
      ike.initCause(ikse2);
      throw ike;
    }
  }
catch (  InvalidKeySpecException ikse) {
    InvalidKeyException ike=new InvalidKeyException("Cannot construct public key");
    ike.initCause(ikse);
    throw ike;
  }
  return key;
}

public int numHits(String query) throws ParseException, IOException {
  Integer count;
  if ((count=(Integer)m_hitCountCache.get(query)) == null) {
    Hits hits=search(query);
    count=new Integer(hits.length());
    m_hitCountCache.put(query,count);
  }
  return count.intValue();
}

public static boolean expressionIsTrue(double leftSide,Operator operator,double rightSide){
  final String expression=leftSide + operator.getMathematicalOperator() + rightSide;
  return expressionIsTrue(expression);
}

public MockResponse addHeader(String name,Object value){
  return addHeader(name + ": " + String.valueOf(value));
}

@Override public CompletableFuture<Optional<T>> max(final Comparator<? super T> comparator){
  return CompletableFuture.supplyAsync(null,exec);
}

final public void println(char v){
  Writer out=this.out;
  if (out == null)   return;
  try {
    out.write(v);
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

public void test_write_correctRejection_emptyRecord(){
  final IRawStore store=getStore();
  try {
    try {
      store.write(ByteBuffer.wrap(new byte[]{}));
      fail("Expecting: " + IllegalArgumentException.class);
    }
 catch (    IllegalArgumentException ex) {
      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);
    }
    try {
      final ByteBuffer buf=ByteBuffer.wrap(new byte[2]);
      buf.position(buf.limit());
      store.write(buf);
      fail("Expecting: " + IllegalArgumentException.class);
    }
 catch (    IllegalArgumentException ex) {
      if (log.isInfoEnabled())       log.info("Ignoring expected exception: " + ex);
    }
  }
  finally {
    store.destroy();
  }
}

public synchronized void commit(){
synchronized (mutex) {
    Map<Column,Set<Interval>> temp=workingIntervals;
    workingIntervals=Collections.synchronizedMap(new LinkedHashMap<>());
    availableIntervalsRef.set(Collections.unmodifiableMap(new LinkedHashMap<>(temp)));
    super.columns=new LinkedHashSet<>(temp.keySet());
  }
}

public void testUpdate7(){
  String updateQuery="UPDATE " + DatabaseCreator.TEST_TABLE1 + " SET field2='1' WHERE id < ( SELECT COUNT(*) FROM "+ DatabaseCreator.TEST_TABLE2+ " WHERE finteger > 15)";
  try {
    int num=statement.executeUpdate(updateQuery);
    int expectedUpdated=4;
    assertEquals("Not all records in the database were updated",expectedUpdated,num);
    String selectQuery="SELECT id, field2 FROM " + DatabaseCreator.TEST_TABLE1;
    ResultSet result=statement.executeQuery(selectQuery);
    while (result.next()) {
    }
    result.close();
  }
 catch (  SQLException e) {
    fail("Unexpected exception" + e.getMessage());
  }
}

public static String extractIndentString(String line,int tabWidth,int indentWidth){
  if (tabWidth < 0 || indentWidth < 0 || line == null) {
    throw new IllegalArgumentException();
  }
  int size=line.length();
  int end=0;
  int spaceEquivs=0;
  int characters=0;
  for (int i=0; i < size; i++) {
    char c=line.charAt(i);
    if (c == '\t') {
      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);
      characters++;
    }
 else     if (isIndentChar(c)) {
      spaceEquivs++;
      characters++;
    }
 else {
      break;
    }
    if (spaceEquivs >= indentWidth) {
      end+=characters;
      characters=0;
      if (indentWidth == 0) {
        spaceEquivs=0;
      }
 else {
        spaceEquivs=spaceEquivs % indentWidth;
      }
    }
  }
  if (end == 0) {
    return Util.EMPTY_STRING;
  }
 else   if (end == size) {
    return line;
  }
 else {
    return line.substring(0,end);
  }
}

private static String doGetFullPath(String filename,boolean includeSeparator){
  if (filename == null) {
    return null;
  }
  int prefix=getPrefixLength(filename);
  if (prefix < 0) {
    return null;
  }
  if (prefix >= filename.length()) {
    if (includeSeparator) {
      return getPrefix(filename);
    }
 else {
      return filename;
    }
  }
  int index=indexOfLastSeparator(filename);
  if (index < 0) {
    return filename.substring(0,prefix);
  }
  int end=index + (includeSeparator ? 1 : 0);
  if (end == 0) {
    end++;
  }
  return filename.substring(0,end);
}

private void preInsert(MkMaxEntry q,MkMaxEntry nodeEntry,KNNHeap knns_q){
  if (LOG.isDebugging()) {
    LOG.debugFine("preInsert " + q + " - "+ nodeEntry+ "\n");
  }
  double knnDist_q=knns_q.getKNNDistance();
  MkMaxTreeNode<O> node=getNode(nodeEntry);
  double knnDist_node=0.;
  if (node.isLeaf()) {
    for (int i=0; i < node.getNumEntries(); i++) {
      MkMaxEntry p=node.getEntry(i);
      double dist_pq=distance(p.getRoutingObjectID(),q.getRoutingObjectID());
      if (dist_pq <= knnDist_q) {
        knns_q.insert(dist_pq,p.getRoutingObjectID());
        if (knns_q.size() >= getKmax()) {
          knnDist_q=knns_q.getKNNDistance();
          q.setKnnDistance(knnDist_q);
        }
      }
      if (dist_pq <= p.getKnnDistance()) {
        KNNList knns_p=knnq.getKNNForDBID(p.getRoutingObjectID(),getKmax() - 1);
        if (knns_p.size() + 1 < getKmax()) {
          p.setKnnDistance(Double.NaN);
        }
 else {
          double knnDist_p=Math.max(dist_pq,knns_p.getKNNDistance());
          p.setKnnDistance(knnDist_p);
        }
      }
      knnDist_node=Math.max(knnDist_node,p.getKnnDistance());
    }
  }
 else {
    List<DoubleIntPair> entries=getSortedEntries(node,q.getRoutingObjectID());
    for (    DoubleIntPair distEntry : entries) {
      MkMaxEntry dirEntry=node.getEntry(distEntry.second);
      double entry_knnDist=dirEntry.getKnnDistance();
      if (distEntry.second < entry_knnDist || distEntry.second < knnDist_q) {
        preInsert(q,dirEntry,knns_q);
        knnDist_q=knns_q.getKNNDistance();
      }
      knnDist_node=Math.max(knnDist_node,dirEntry.getKnnDistance());
    }
  }
  if (LOG.isDebugging()) {
    LOG.debugFine(nodeEntry + "set knn dist " + knnDist_node);
  }
  nodeEntry.setKnnDistance(knnDist_node);
}

private static boolean addIfMatches(List<String> container,String statusLine,char x,char y){
  if (matches(statusLine,x,y)) {
    final String filename=statusLine.substring(3);
    if (!container.contains(filename)) {
      container.add(filename);
    }
    return true;
  }
  return false;
}

public void testDivideRoundHalfDownNeg2(){
  String a="-37361671119238118911893939591735";
  int aScale=10;
  String b="74723342238476237823787879183470";
  int bScale=15;
  String c="0E+5";
  int resScale=-5;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",resScale,result.scale());
}

public static String encodeFromString(String plain,String charset) throws CoderException, UnsupportedEncodingException {
  return encode(plain.getBytes(charset));
}

public void slide(SLIDE slide){
  if (slide == SLIDE.UP) {
    if (!isPanelShown()) {
      int position=0;
      if (items != null) {
        position=items.size() / 2;
      }
      slideUp(position);
    }
  }
 else {
    hidePanelPickerUI();
  }
}

public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){
  if (this.mStickyDrawerItems == null) {
    this.mStickyDrawerItems=new ArrayList<>();
  }
  Collections.addAll(this.mStickyDrawerItems,IdDistributor.checkIds(stickyDrawerItems));
  return this;
}

public boolean isDebuggingFinest(){
  return logger.isLoggable(Level.FINEST);
}

private static void sort1(int[] x,int off,int len){
  if (len < 7) {
    for (int i=off; i < len + off; i++)     for (int j=i; j > off && x[j - 1] > x[j]; j--)     swap(x,j,j - 1);
    return;
  }
  int m=off + (len >> 1);
  if (len > 7) {
    int l=off;
    int n=off + len - 1;
    if (len > 40) {
      int s=len / 8;
      l=med3(x,l,l + s,l + 2 * s);
      m=med3(x,m - s,m,m + s);
      n=med3(x,n - 2 * s,n - s,n);
    }
    m=med3(x,l,m,n);
  }
  int v=x[m];
  int a=off, b=a, c=off + len - 1, d=c;
  while (true) {
    while (b <= c && x[b] <= v) {
      if (x[b] == v)       swap(x,a++,b);
      b++;
    }
    while (c >= b && x[c] >= v) {
      if (x[c] == v)       swap(x,c,d--);
      c--;
    }
    if (b > c)     break;
    swap(x,b++,c--);
  }
  int s, n=off + len;
  s=Math.min(a - off,b - a);
  vecswap(x,off,b - s,s);
  s=Math.min(d - c,n - d - 1);
  vecswap(x,b,n - s,s);
  if ((s=b - a) > 1)   sort1(x,off,s);
  if ((s=d - c) > 1)   sort1(x,n - s,s);
}

public void reset(){
  ns.removeAllElements();
  ks.setLength(0);
  cur=tt.root;
  run();
}

@LayoutlibDelegate static float sin(float angle){
  return (float)Math.sin(angle);
}

public static void renderFlattenedAnnotation(final PdfObject form,final DynamicVectorRenderer current,final int pageNumber,final int rotation){
  final BufferedImage image=AnnotationFactory.getIcon(form);
  if (image != null) {
    final GraphicsState gs=new GraphicsState();
    final int iconHeight=image.getHeight();
    final int iconWidth=image.getWidth();
    final float[] rect=form.getFloatArray(PdfDictionary.Rect);
    if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) {
      rect[2]=rect[0] + iconWidth;
      rect[1]=rect[3] - iconHeight;
      form.setFloatArray(PdfDictionary.Rect,rect);
    }
switch (rotation % 360) {
case 0:
      gs.CTM=new float[][]{{iconWidth,0,1},{0,iconHeight,1},{0,0,0}};
    gs.x=rect[0];
  gs.y=rect[3] - iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] - iconHeight;
break;
case 90:
gs.CTM=new float[][]{{0,iconWidth,1},{-iconHeight,0,1},{0,0,0}};
gs.x=rect[0] + iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] + iconHeight;
gs.CTM[2][1]=rect[3];
break;
case 180:
gs.CTM=new float[][]{{-iconWidth,0,1},{0,-iconHeight,1},{0,0,0}};
gs.x=rect[0];
gs.y=rect[3] + iconHeight;
gs.CTM[2][0]=rect[0];
gs.CTM[2][1]=rect[3] + iconHeight;
break;
case 270:
gs.CTM=new float[][]{{0,-iconWidth,1},{iconHeight,0,1},{0,0,0}};
gs.x=rect[0] - iconHeight;
gs.y=rect[3];
gs.CTM[2][0]=rect[0] - iconHeight;
gs.CTM[2][1]=rect[3];
break;
}
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Darken);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Darken);
}
current.drawImage(pageNumber,image,gs,false,form.getObjectRefAsString(),-1);
if (form.getParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Highlight) {
current.setGraphicsState(GraphicsState.STROKE,gs.getAlpha(GraphicsState.STROKE),PdfDictionary.Normal);
current.setGraphicsState(GraphicsState.FILL,gs.getAlpha(GraphicsState.FILL),PdfDictionary.Normal);
}
}
}

public byte[] extractData(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {
  return null;
}

public static String makeRelatedSessionID(String encryptedID,SessionID prototype) throws SessionException {
  prototype.parseSessionString();
  return makeSessionID(encryptedID,prototype.getExtension(),prototype.tail);
}

public static GeneralPath cardinalSpline(float pts[],int start,int npoints,float slack,boolean closed){
  GeneralPath path=new GeneralPath();
  path.moveTo(pts[start],pts[start + 1]);
  return cardinalSpline(path,pts,start,npoints,slack,closed,0f,0f);
}

public static Automaton determinize(Automaton a,int maxDeterminizedStates){
  if (a.isDeterministic()) {
    return a;
  }
  if (a.getNumStates() <= 1) {
    return a;
  }
  Automaton.Builder b=new Automaton.Builder();
  SortedIntSet.FrozenIntSet initialset=new SortedIntSet.FrozenIntSet(0,0);
  b.createState();
  LinkedList<SortedIntSet.FrozenIntSet> worklist=new LinkedList<>();
  Map<SortedIntSet.FrozenIntSet,Integer> newstate=new HashMap<>();
  worklist.add(initialset);
  b.setAccept(0,a.isAccept(0));
  newstate.put(initialset,0);
  final PointTransitionSet points=new PointTransitionSet();
  final SortedIntSet statesSet=new SortedIntSet(5);
  Transition t=new Transition();
  while (worklist.size() > 0) {
    SortedIntSet.FrozenIntSet s=worklist.removeFirst();
    for (int i=0; i < s.values.length; i++) {
      final int s0=s.values[i];
      int numTransitions=a.getNumTransitions(s0);
      a.initTransition(s0,t);
      for (int j=0; j < numTransitions; j++) {
        a.getNextTransition(t);
        points.add(t);
      }
    }
    if (points.count == 0) {
      continue;
    }
    points.sort();
    int lastPoint=-1;
    int accCount=0;
    final int r=s.state;
    for (int i=0; i < points.count; i++) {
      final int point=points.points[i].point;
      if (statesSet.upto > 0) {
        assert lastPoint != -1;
        statesSet.computeHash();
        Integer q=newstate.get(statesSet);
        if (q == null) {
          q=b.createState();
          if (q >= maxDeterminizedStates) {
            throw new TooComplexToDeterminizeException(a,maxDeterminizedStates);
          }
          final SortedIntSet.FrozenIntSet p=statesSet.freeze(q);
          worklist.add(p);
          b.setAccept(q,accCount > 0);
          newstate.put(p,q);
        }
 else {
          assert (accCount > 0 ? true : false) == b.isAccept(q) : "accCount=" + accCount + " vs existing accept="+ b.isAccept(q)+ " states="+ statesSet;
        }
        b.addTransition(r,q,lastPoint,point - 1);
      }
      int[] transitions=points.points[i].ends.transitions;
      int limit=points.points[i].ends.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.decr(dest);
        accCount-=a.isAccept(dest) ? 1 : 0;
      }
      points.points[i].ends.next=0;
      transitions=points.points[i].starts.transitions;
      limit=points.points[i].starts.next;
      for (int j=0; j < limit; j+=3) {
        int dest=transitions[j];
        statesSet.incr(dest);
        accCount+=a.isAccept(dest) ? 1 : 0;
      }
      lastPoint=point;
      points.points[i].starts.next=0;
    }
    points.reset();
    assert statesSet.upto == 0 : "upto=" + statesSet.upto;
  }
  Automaton result=b.finish();
  assert result.isDeterministic();
  return result;
}

public boolean matches(String seq){
  return queue.regionMatches(true,pos,seq,0,seq.length());
}

private boolean findRoot(final ODEStateInterpolator interpolator,final double ta,final double ga,final double tb,final double gb){
  check(ga == 0.0 || gb == 0.0 || (ga > 0.0 && gb < 0.0) || (ga < 0.0 && gb > 0.0));
  final UnivariateFunction f=null;
  double beforeRootT=Double.NaN, beforeRootG=Double.NaN;
  double afterRootT=ta, afterRootG=0.0;
  if (ta == tb) {
    beforeRootT=ta;
    beforeRootG=ga;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0 && gb == 0.0) {
    beforeRootT=tb;
    beforeRootG=gb;
    afterRootT=shiftedBy(beforeRootT,convergence);
    afterRootG=f.value(afterRootT);
  }
 else   if (ga != 0.0) {
    final double newGa=f.value(ta);
    if (ga > 0 != newGa > 0) {
      beforeRootT=ta;
      beforeRootG=newGa;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
  }
  double loopT=ta, loopG=ga;
  while ((afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) && strictlyAfter(afterRootT,tb)) {
    if (loopG == 0.0) {
      beforeRootT=loopT;
      beforeRootG=loopG;
      afterRootT=minTime(shiftedBy(beforeRootT,convergence),tb);
      afterRootG=f.value(afterRootT);
    }
 else {
      if (forward) {
        final Interval interval=solver.solveInterval(maxIterationCount,f,loopT,tb);
        beforeRootT=interval.getLeftAbscissa();
        beforeRootG=interval.getLeftValue();
        afterRootT=interval.getRightAbscissa();
        afterRootG=interval.getRightValue();
      }
 else {
        final Interval interval=solver.solveInterval(maxIterationCount,f,tb,loopT);
        beforeRootT=interval.getRightAbscissa();
        beforeRootG=interval.getRightValue();
        afterRootT=interval.getLeftAbscissa();
        afterRootG=interval.getLeftValue();
      }
    }
    if (beforeRootT == afterRootT) {
      afterRootT=nextAfter(afterRootT);
      afterRootG=f.value(afterRootT);
    }
    check((forward && afterRootT > beforeRootT) || (!forward && afterRootT < beforeRootT));
    loopT=afterRootT;
    loopG=afterRootG;
  }
  if (afterRootG == 0.0 || afterRootG > 0.0 == g0Positive) {
    return false;
  }
 else {
    check(!Double.isNaN(beforeRootT) && !Double.isNaN(beforeRootG));
    increasing=!g0Positive;
    pendingEventTime=beforeRootT;
    stopTime=beforeRootG == 0.0 ? beforeRootT : afterRootT;
    pendingEvent=true;
    afterEvent=afterRootT;
    afterG=afterRootG;
    check(afterG > 0 == increasing);
    check(increasing == gb >= ga);
    return true;
  }
}

public static int compare(Comparable c1,Comparable c2,boolean nullGreater){
  if (c1 == c2) {
    return 0;
  }
 else   if (c1 == null) {
    return (nullGreater ? 1 : -1);
  }
 else   if (c2 == null) {
    return (nullGreater ? -1 : 1);
  }
  return c1.compareTo(c2);
}

public boolean checkRootBySuperUserApk(){
  File suApk=new File(SU_APK);
  if (suApk != null && suApk.exists()) {
    return true;
  }
  return false;
}

int addExpression(Expression expression);

boolean trackMotionScroll(int deltaY,int incrementalDeltaY){
  final int childCount=getChildCount();
  if (childCount == 0) {
    return true;
  }
  final int firstTop=getScrollChildTop();
  final int lastBottom=getScrollChildBottom();
  final Rect listPadding=mListPadding;
  final int end=getHeight() - listPadding.bottom;
  final int spaceAbove=listPadding.top - getFillChildTop();
  final int spaceBelow=getFillChildBottom() - end;
  final int height=getHeight() - getPaddingBottom() - getPaddingTop();
  if (deltaY < 0) {
    deltaY=Math.max(-(height - 1),deltaY);
  }
 else {
    deltaY=Math.min(height - 1,deltaY);
  }
  if (incrementalDeltaY < 0) {
    incrementalDeltaY=Math.max(-(height - 1),incrementalDeltaY);
  }
 else {
    incrementalDeltaY=Math.min(height - 1,incrementalDeltaY);
  }
  final int firstPosition=mFirstPosition;
  if (firstPosition == 0 && firstTop >= listPadding.top && deltaY >= 0) {
    return true;
  }
  if (firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= 0) {
    return true;
  }
  final boolean down=incrementalDeltaY < 0;
  final int headerViewsCount=getHeaderViewsCount();
  final int footerViewsStart=mItemCount - getFooterViewsCount();
  int start=0;
  int count=0;
  if (down) {
    final int top=listPadding.top - incrementalDeltaY;
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      if (child.getBottom() >= top) {
        break;
      }
 else {
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycler.addScrapView(child);
          if (ViewDebug.TRACE_RECYCLER) {
            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);
          }
        }
      }
    }
  }
 else {
    final int bottom=getHeight() - listPadding.bottom - incrementalDeltaY;
    for (int i=childCount - 1; i >= 0; i--) {
      final View child=getChildAt(i);
      if (child.getTop() <= bottom) {
        break;
      }
 else {
        start=i;
        count++;
        int position=firstPosition + i;
        if (position >= headerViewsCount && position < footerViewsStart) {
          mRecycler.addScrapView(child);
          if (ViewDebug.TRACE_RECYCLER) {
            ViewDebug.trace(child,ViewDebug.RecyclerTraceType.MOVE_TO_SCRAP_HEAP,firstPosition + i,-1);
          }
        }
      }
    }
  }
  mMotionViewNewTop=mMotionViewOriginalTop + deltaY;
  mBlockLayoutRequests=true;
  if (count > 0) {
    detachViewsFromParent(start,count);
  }
  tryOffsetChildrenTopAndBottom(incrementalDeltaY);
  if (down) {
    mFirstPosition+=count;
  }
  invalidate();
  final int absIncrementalDeltaY=Math.abs(incrementalDeltaY);
  if (spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY) {
    fillGap(down);
  }
  mBlockLayoutRequests=false;
  invokeOnItemScrollListener();
  awakenScrollBars();
  return false;
}

public static <E>E syncRest(final Iterator<? extends Object> iterator,final Callable<E> task) throws Exception {
  if (iterator.hasNext()) {
synchronized (iterator.next()) {
      return syncRest(iterator,task);
    }
  }
 else {
    return task.call();
  }
}

private static Component findByName(Container root,String componentName){
  if (verbose) {
    log("findByName(" + root + ", "+ componentName+ ")");
  }
  int count=root.getComponentCount();
  for (int iter=0; iter < count; iter++) {
    Component c=root.getComponentAt(iter);
    String n=c.getName();
    if (n != null && n.equals(componentName)) {
      return c;
    }
    if (c instanceof Container) {
      c=findByName((Container)c,componentName);
      if (c != null) {
        return c;
      }
    }
  }
  return null;
}

public boolean isFingerprint(ClassTemplate classTemplate){
  return fingerprintClass.equals(classTemplate.getImplementingClass());
}

public void writeField(final String name,final float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}

private List extractColumnKeys(String line){
  List keys=new java.util.ArrayList();
  int fieldIndex=0;
  int start=0;
  for (int i=0; i < line.length(); i++) {
    if (line.charAt(i) == this.fieldDelimiter) {
      if (fieldIndex > 0) {
        String key=line.substring(start,i);
        keys.add(removeStringDelimiters(key));
      }
      start=i + 1;
      fieldIndex++;
    }
  }
  String key=line.substring(start,line.length());
  keys.add(removeStringDelimiters(key));
  return keys;
}

protected void drawRhombus(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  int halfWidth=w / 2;
  int halfHeight=h / 2;
  Polygon rhombus=new Polygon();
  rhombus.addPoint(x + halfWidth,y);
  rhombus.addPoint(x + w,y + halfHeight);
  rhombus.addPoint(x + halfWidth,y + h);
  rhombus.addPoint(x,y + halfHeight);
  drawPolygon(rhombus,fillColor,fillPaint,penColor,shadow);
}

private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){
  for (  ByteBuffer buffer : dictionaryValueBufferList) {
    int length=buffer.limit();
    byte[] value=new byte[length];
    buffer.get(value,0,value.length);
    dictionaryValues.add(value);
  }
}

static Object instantiate(Class<?> sibling,String className) throws InstantiationException, IllegalAccessException, ClassNotFoundException {
  ClassLoader cl=sibling.getClassLoader();
  Class<?> cls=ClassFinder.findClass(className,cl);
  return cls.newInstance();
}

private byte[] generateDerivedKey(int bytesNeeded){
  byte[] buf=new byte[digest.getDigestSize()];
  byte[] key=new byte[bytesNeeded];
  int offset=0;
  for (; ; ) {
    digest.update(password,0,password.length);
    digest.update(salt,0,salt.length);
    digest.doFinal(buf,0);
    int len=(bytesNeeded > buf.length) ? buf.length : bytesNeeded;
    System.arraycopy(buf,0,key,offset,len);
    offset+=len;
    bytesNeeded-=len;
    if (bytesNeeded == 0) {
      break;
    }
    digest.reset();
    digest.update(buf,0,buf.length);
  }
  return key;
}

public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty() throws Exception {
  AtomicInteger count=new AtomicInteger();
  AtomicBoolean keepGoing=new AtomicBoolean(true);
  createChainedFinalizer(count,keepGoing);
  while (count.get() == 0) {
    Thread.sleep(500);
    FinalizationTester.induceFinalization();
  }
  keepGoing.set(false);
  assertTrue(count.get() > 0);
}

public synchronized void show(Bundle options){
  if (DEBUG)   Log.d(TAG,"show(); mKeyguardView==" + mKeyguardView);
  boolean enableScreenRotation=shouldEnableScreenRotation();
  maybeCreateKeyguardLocked(enableScreenRotation,false,options);
  maybeEnableScreenRotation(enableScreenRotation);
  final int visFlags=View.STATUS_BAR_DISABLE_HOME;
  if (DEBUG)   Log.v(TAG,"show:setSystemUiVisibility(" + Integer.toHexString(visFlags) + ")");
  mKeyguardHost.setSystemUiVisibility(visFlags);
  mViewManager.updateViewLayout(mKeyguardHost,mWindowLayoutParams);
  mKeyguardHost.setVisibility(View.VISIBLE);
  mKeyguardView.show();
  mKeyguardView.requestFocus();
}

public static int computeStringWidth(FontMetrics fm,String str){
  return SwingUtilities2.stringWidth(null,fm,str);
}

private boolean passesSanityCheck(AccessibilityEvent event){
  final CharSequence afterText=getEventText(event);
  final CharSequence beforeText=event.getBeforeText();
  if ((event.getAddedCount() == 0) && (event.getRemovedCount() == beforeText.length())) {
    return true;
  }
  if (afterText == null || beforeText == null) {
    return false;
  }
  final int diff=(event.getAddedCount() - event.getRemovedCount());
  return ((beforeText.length() + diff) == afterText.length());
}

public void actionPerformed(ActionEvent ae){
  String command=ae.getActionCommand();
  if (command == DisplayPaletteCmd) {
    if (Debug.debugging("layer")) {
      Debug.output(getName() + " displaying palette");
    }
    showPalette();
  }
 else   if (command == HidePaletteCmd) {
    if (Debug.debugging("layer")) {
      Debug.output(getName() + " hiding palette");
    }
    hidePalette();
  }
 else   if (command == DisplayPropertiesCmd) {
    Inspector inspector=new Inspector();
    inspector.inspectPropertyConsumer(this);
  }
}

public static String toString(LocalDate data){
  return data == null ? "" : data.format(formatter("dd/MM/yyyy"));
}

@JsonCreator public DataSourceMetadata(@JsonProperty("name") String name,@JsonProperty("properties") Map<String,String> properties,@JsonProperty("segments") List<DataSegment> segments){
  this.name=name;
  this.properties=Collections.unmodifiableMap(properties);
  this.segments=Collections.unmodifiableList(segments);
}

public EMail createEMail(String value){
  EmailField emailImpl=new EmailField();
  try {
    emailImpl.setValue(value);
  }
 catch (  SdpException s) {
    s.printStackTrace();
  }
  return emailImpl;
}

public AddressLookup(String serverUrl,String serialNo,String password){
  this.serverUrl=serverUrl.trim();
  this.clientID=serialNo.trim();
  this.accessCode=password.trim();
}

public void addChangeListener(ChangeListener l){
  m_ChangeListeners.add(l);
}

public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){
  if (permission == null || permission.equals("")) {
    throw new IllegalArgumentException("Empty permission");
  }
  if (server != null && (server.equalsIgnoreCase("global") || server.equals(""))) {
    server=null;
  }
  if (world != null && world.equals("")) {
    world=null;
  }
  if (world != null && server == null) {
    server="global";
  }
  this.permission=permission;
  this.value=value;
  this.override=override;
  this.expireAt=expireAt;
  this.server=server;
  this.world=world;
  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();
}

public Cell(int rowspan,int colspan){
  this.rowspan=Math.max(rowspan,1);
  this.colspan=Math.max(colspan,1);
}

private void initializeLocalAndTargetInfo() throws Exception {
  targetSiteInfo=coordinator.getTargetInfo(SiteInfo.class);
  if (targetSiteInfo == null) {
    targetSiteInfo=new SiteInfo();
    try {
      coordinator.setTargetInfo(targetSiteInfo,false);
      log.info("Step1b: Target site info set to: {}",targetSiteInfo);
    }
 catch (    CoordinatorClientException e) {
      log.info("Step1b: Wait another control node to set target");
      retrySleep();
      throw e;
    }
  }
  localVdcPropInfo=localRepository.getVdcPropertyInfo();
  String localConfigVersion=localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION);
  coordinator.setNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion));
  targetVdcPropInfo=loadVdcConfig();
  if (isGeoUpgradeFromPreYoda()) {
    log.info("Detect vdc properties from preyoda. Keep local vdc config properties unchanged until all vdc configs are migrated to zk");
    localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
    localRepository.setVdcPropertyInfo(localVdcPropInfo);
  }
 else {
    if (localVdcPropInfo.getProperty(VdcConfigUtil.VDC_CONFIG_VERSION) == null) {
      localVdcPropInfo=new PropertyInfoExt(targetVdcPropInfo.getAllProperties());
      localVdcPropInfo.addProperty(VdcConfigUtil.VDC_CONFIG_VERSION,String.valueOf(targetSiteInfo.getVdcConfigVersion()));
      localRepository.setVdcPropertyInfo(localVdcPropInfo);
      String vdc_ids=targetVdcPropInfo.getProperty(VdcConfigUtil.VDC_IDS);
      String[] vdcIds=vdc_ids.split(",");
      if (vdcIds.length > 1) {
        log.info("More than one Vdc, rebooting");
        reboot();
      }
    }
  }
  targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
  if (targetPowerOffState == null) {
    try {
      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));
      targetPowerOffState=coordinator.getTargetInfo(PowerOffState.class);
      log.info("Step1b: Target poweroff state set to: {}",PowerOffState.State.NONE);
    }
 catch (    CoordinatorClientException e) {
      log.info("Step1b: Wait another control node to set target");
      retrySleep();
      throw e;
    }
  }
}

@Override public void openElement(String tagName){
  XMLElement newElement=new XMLElement();
  newElement.setName(tagName);
  current.addChild(newElement);
  stack.push(current);
  current=newElement;
}

public Format(String pFormatString){
  String formatVars[]=pFormatString.split("/");
  mId=Integer.parseInt(formatVars[0]);
}

public boolean equals(Object interval){
  if (intervals == null) {
    return false;
  }
  return intervals.contains(interval);
}

public static String relativeToAbsolute(String baseURL,String relativeURL){
  if (relativeURL.startsWith("/")) {
    return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ relativeURL;
  }
 else {
    return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL;
  }
}

public void start(){
  if (setState(EnumSet.of(TaskState.INITIAL,TaskState.QUEUED),TaskState.RUNNING)) {
    DHT.logDebug("Starting Task: " + toString());
    startTime=System.currentTimeMillis();
    try {
      serializedUpdate.run();
    }
 catch (    Exception e) {
      DHT.log(e,LogLevel.Error);
    }
  }
}

public JournalIndex(final IRawStore store,final Checkpoint checkpoint,final IndexMetadata metadata,final boolean readOnly){
  super(store,checkpoint,metadata,readOnly);
}

private void accesBreakpointInstruction(ArrayList<Instruction> instructions,int lineNumber,int op,BPINSTRUCTION_STATUS status){
  for (int i=0; i < instructions.size(); i++) {
    Instruction currInst=instructions.get(i);
    if (op == 0) {
      if (currInst instanceof MRJobInstruction) {
        MRJobInstruction currMRInst=(MRJobInstruction)currInst;
        if (currMRInst.findMRInstructions(lineNumber)) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof CPInstruction || currInst instanceof SPInstruction) {
        if (currInst.getLineNum() == lineNumber) {
          BreakPointInstruction breakpoint=new BreakPointInstruction();
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(instID++);
          breakpoint.setBPInstructionLocation(location);
          instructions.add(i,breakpoint);
          DMLBreakpointManager.insertBreakpoint(breakpoint,lineNumber);
          return;
        }
      }
 else       if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
        breakpoint.setBPInstructionStatus(BPINSTRUCTION_STATUS.ENABLED);
        breakpoint.setBPInstructionLocation(location);
        instructions.set(i,breakpoint);
        DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        return;
      }
    }
 else {
      if (currInst instanceof BreakPointInstruction && currInst.getLineNum() == lineNumber) {
        if (op == 1) {
          BreakPointInstruction breakpoint=(BreakPointInstruction)currInst;
          breakpoint.setLocation(currInst);
          breakpoint.setInstID(currInst.getInstID());
          breakpoint.setBPInstructionStatus(status);
          breakpoint.setBPInstructionLocation(location);
          instructions.set(i,breakpoint);
          DMLBreakpointManager.updateBreakpoint(lineNumber,status);
        }
 else {
          instructions.remove(i);
          DMLBreakpointManager.removeBreakpoint(lineNumber,status);
        }
        return;
      }
    }
  }
}

private void closeFile(){
  if (plogStream != null) {
    try {
      plogStream.close();
      logger.info("File " + plogFilename + " closed.");
    }
 catch (    IOException e) {
      logger.warn("Unable to close file cleanly: " + plogFilename);
    }
 finally {
      plogStream=null;
    }
  }
}

public void nextToken(){
  previousLine=line;
  previousColumn=column;
  while (pos < matcher.regionStart()) {
    if (text.charAt(pos) == '\n') {
      ++line;
      column=0;
    }
 else {
      ++column;
    }
    ++pos;
  }
  if (matcher.regionStart() == matcher.regionEnd()) {
    currentToken="";
  }
 else {
    matcher.usePattern(TOKEN);
    if (matcher.lookingAt()) {
      currentToken=matcher.group();
      matcher.region(matcher.end(),matcher.regionEnd());
    }
 else {
      currentToken=String.valueOf(text.charAt(pos));
      matcher.region(pos + 1,matcher.regionEnd());
    }
    skipWhitespace();
  }
}

private void parseFirstConsonant(){
  Iterator iter=alFirstConsonants.iterator();
  while (iter.hasNext()) {
    String strFirstCon=(String)iter.next();
    if (strSyllable.startsWith(strFirstCon,iCurPos)) {
      strFirstConsonant=strFirstCon;
      iCurPos+=strFirstCon.length();
      return;
    }
  }
  strFirstConsonant=ZERO;
}

private BuddyPanelController(){
  buddyPanel=new JPanel();
  buddyPanel.setLayout(new SBoxLayout(SBoxLayout.VERTICAL));
  model=new BuddyListModel();
  JList<Buddy> list=new BuddyPanel(model);
  buddyPanel.add(list,SLayout.EXPAND_X);
}

private void removeGapsWithEdgeConcentration(int nodesLevel[]){
  final int temp=m_nodes.size(), temp2=graphMatrix[0].length;
  int tempCnt=1;
  for (int n=0; n < temp; n++) {
    for (int i=0; i < temp2; i++) {
      if (graphMatrix[n][i] > 0) {
        if (nodesLevel[i] > nodesLevel[n] + 1) {
          int tempLevel=nodesLevel[n];
          boolean tempNodePresent=false;
          int k=temp;
          int tempnode=n;
          while (tempLevel < nodesLevel[i] - 1) {
            tempNodePresent=false;
            for (; k < graphMatrix.length; k++) {
              if (graphMatrix[tempnode][k] > 0) {
                tempNodePresent=true;
                break;
              }
            }
            if (tempNodePresent) {
              tempnode=k;
              k=k + 1;
              tempLevel++;
            }
 else {
              if (tempnode != n) {
                tempnode=k - 1;
              }
              break;
            }
          }
          if (m_nodes.get(tempnode).nodeType == SINGULAR_DUMMY) {
            m_nodes.get(tempnode).nodeType=PLURAL_DUMMY;
          }
          if (tempNodePresent) {
            graphMatrix[tempnode][i]=graphMatrix[n][i];
            graphMatrix[i][tempnode]=-graphMatrix[n][i];
            graphMatrix[n][i]=0;
            graphMatrix[i][n]=0;
            continue;
          }
          int len=graphMatrix.length;
          int tempMatrix[][]=new int[graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)][graphMatrix.length + (nodesLevel[i] - nodesLevel[tempnode] - 1)];
          int level=nodesLevel[tempnode] + 1;
          copyMatrix(graphMatrix,tempMatrix);
          String s1=new String("S" + tempCnt++);
          m_nodes.add(new GraphNode(s1,s1,SINGULAR_DUMMY));
          int temp3[]=new int[nodeLevels[level].length + 1];
          System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
          temp3[temp3.length - 1]=m_nodes.size() - 1;
          nodeLevels[level]=temp3;
          temp3=new int[m_nodes.size() + 1];
          System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
          temp3[m_nodes.size() - 1]=level;
          nodesLevel=temp3;
          level++;
          int m;
          for (m=len; m < len + nodesLevel[i] - nodesLevel[tempnode] - 1 - 1; m++) {
            String s2=new String("S" + tempCnt++);
            m_nodes.add(new GraphNode(s2,s2,SINGULAR_DUMMY));
            temp3=new int[nodeLevels[level].length + 1];
            System.arraycopy(nodeLevels[level],0,temp3,0,nodeLevels[level].length);
            temp3[temp3.length - 1]=m_nodes.size() - 1;
            nodeLevels[level]=temp3;
            temp3=new int[m_nodes.size() + 1];
            System.arraycopy(nodesLevel,0,temp3,0,nodesLevel.length);
            temp3[m_nodes.size() - 1]=level;
            nodesLevel=temp3;
            level++;
            tempMatrix[m][m + 1]=tempMatrix[n][i];
            if (m > len) {
              tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
            }
          }
          tempMatrix[m][i]=tempMatrix[n][i];
          tempMatrix[tempnode][len]=tempMatrix[n][i];
          tempMatrix[len][tempnode]=-1 * tempMatrix[n][i];
          tempMatrix[i][m]=-1 * tempMatrix[n][i];
          if (m > len) {
            tempMatrix[m][m - 1]=-1 * tempMatrix[n][i];
          }
          tempMatrix[n][i]=0;
          tempMatrix[i][n]=0;
          graphMatrix=tempMatrix;
        }
 else {
          graphMatrix[i][n]=-1 * graphMatrix[n][i];
        }
      }
    }
  }
}

public static byte[] asUnsignedByteArray(BigInteger value){
  byte[] bytes=value.toByteArray();
  if (bytes[0] == 0) {
    byte[] tmp=new byte[bytes.length - 1];
    System.arraycopy(bytes,1,tmp,0,tmp.length);
    return tmp;
  }
  return bytes;
}

public static TestResult execJavac(String toCompile,File dir,String jflexTestVersion){
  Project p=new Project();
  Javac javac=new Javac();
  Path path=new Path(p,dir.toString());
  javac.setProject(p);
  javac.setSrcdir(path);
  javac.setDestdir(dir);
  javac.setTarget(javaVersion);
  javac.setSource(javaVersion);
  javac.setSourcepath(new Path(p,""));
  javac.setIncludes(toCompile);
  Path classPath=javac.createClasspath();
  classPath.setPath(System.getProperty("user.home") + "/.m2/repository/de/jflex/jflex/" + jflexTestVersion+ "/jflex-"+ jflexTestVersion+ ".jar");
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream outSafe=System.err;
  System.setErr(new PrintStream(out));
  try {
    javac.execute();
    return new TestResult(out.toString(),true);
  }
 catch (  BuildException e) {
    return new TestResult(e + System.getProperty("line.separator") + out.toString(),false);
  }
 finally {
    System.setErr(outSafe);
  }
}

private final boolean parkAndCheckInterrupt(){
  LockSupport.park(this);
  return Thread.interrupted();
}

public static CLPlatform[] listGPUPoweredPlatforms(){
  CLPlatform[] platforms=listPlatforms();
  List<CLPlatform> out=new ArrayList<CLPlatform>(platforms.length);
  for (  CLPlatform platform : platforms) {
    if (platform.listGPUDevices(true).length > 0)     out.add(platform);
  }
  return out.toArray(new CLPlatform[out.size()]);
}

public ActionRequestHelper dependsOn(ActionRequestHelper dependency){
  mDependencies.add(dependency);
  return this;
}

static boolean isDate(Object obj){
  return obj instanceof Date && obj.getClass() == Date.class;
}

public static String toXml(final Config toConvert,Boolean prettyXml) throws JAXBException, IOException {
  String retVal="";
  try (StringWriter writer=new StringWriter()){
    toXml(toConvert,writer,prettyXml);
    retVal=writer.toString();
    return retVal;
  }
 }

private static List<Vector2D> buildQuadrilateral(final Vector2D... points){
  List<Vector2D> quadrilateral=new ArrayList<Vector2D>();
  for (  Vector2D p : points) {
    if (!quadrilateral.contains(p)) {
      quadrilateral.add(p);
    }
  }
  return quadrilateral;
}

private void heapifyUp(int twopos,Comparable<Object> cur){
  while (twopos > 0) {
    final int parent=(twopos - 1) >>> 1;
    Comparable<Object> par=twoheap[parent];
    if (cur.compareTo(par) <= 0) {
      break;
    }
    twoheap[twopos]=par;
    twopos=parent;
  }
  twoheap[twopos]=cur;
}

public void insert(String key,char val){
  int len=key.length() + 1;
  if (freenode + len > eq.length) {
    redimNodeArrays(eq.length + BLOCK_SIZE);
  }
  char strkey[]=new char[len--];
  key.getChars(0,len,strkey,0);
  strkey[len]=0;
  root=insert(root,strkey,0,val);
}

void fullyUnlock(){
  takeLock.unlock();
  putLock.unlock();
}

private static boolean isSubFormat(String filename){
  for (  String ext : SUB_EXTENSIONS) {
    if (filename.contains("." + ext)) {
      return true;
    }
  }
  return false;
}

void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {
  out.writeByte(CONSTANT_NAMEANDTYPE);
  out.writeShort(tab.index(name));
  out.writeShort(tab.index(type));
}

public static void initializeProperties(Properties properties,boolean reset,boolean withDefaults){
  Properties defaultProp=null;
  if (withDefaults) {
    SSOToken appToken=AccessController.doPrivileged(AdminTokenAction.getInstance());
    defaultProp=ServerConfiguration.getDefaults(appToken);
  }
  PropertiesHolder oldProps;
  PropertiesHolder newProps;
  do {
    oldProps=propertiesHolderRef.get();
    final Properties combined=new Properties();
    if (defaultProp != null) {
      combined.putAll(defaultProp);
    }
    if (!reset) {
      combined.putAll(oldProps.properties);
    }
    combined.putAll(properties);
    newProps=new PropertiesHolder(Maps.fromProperties(combined));
  }
 while (!propertiesHolderRef.compareAndSet(oldProps,newProps));
}

public void addNetworkListener(final NetworkListener listener){
  networkListeners.add(listener);
}

public static void appendContentPrefix(HttpServletRequest request,Appendable urlBuffer) throws IOException {
  appendContentPrefix(request,urlBuffer,null);
}

public void addErrorListener(final ErrorListener errorListener){
  if (errorListeners == null) {
    errorListeners=new ArrayList<ErrorListener>();
  }
  errorListeners.add(errorListener);
}

private void validateClassName(String className){
  String nvalue=className.trim();
  if (!nvalue.matches(CLASS_RE)) {
    throw PropertyException.illegalPropertyValueException(this,className);
  }
}

public static void importBaseTypes(final CConnection connection,final int rawModuleId,final int moduleId) throws SQLException {
  final String query="INSERT INTO " + CTableNames.BASE_TYPES_TABLE + " SELECT "+ moduleId+ ", id, name, size, pointer, signed "+ "FROM "+ String.format(CTableNames.RAW_BASE_TYPES,rawModuleId);
  connection.executeUpdate(query,true);
  final String updateSequence=String.format("SELECT setval('bn_base_types_id_seq', " + "COALESCE((SELECT MAX(id) + 1 FROM %s), 1), false) from %s",CTableNames.BASE_TYPES_TABLE,CTableNames.BASE_TYPES_TABLE);
  connection.executeQuery(updateSequence,true);
}

@SuppressWarnings("deprecation") public Object readMatrixOld(Element node) throws Exception {
  weka.core.Matrix matrix;
  weka.core.matrix.Matrix matrixNew;
  if (DEBUG) {
    trace(new Throwable(),node.getAttribute(ATT_NAME));
  }
  m_CurrentNode=node;
  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);
  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());
  return matrix;
}

public void recordFileSystemOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){
  try {
    boolean opStatus=(Operation.Status.ready == status) ? true : false;
    String evType;
    evType=opType.getEvType(opStatus);
    String evDesc=opType.getDescription();
    String opStage=AuditLogManager.AUDITOP_END;
    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);
    URI uri=(URI)extParam[0];
    recordBourneFileSystemEvent(dbClient,evType,status,evDesc,uri);
    auditFile(dbClient,opType,opStatus,opStage,uri.toString());
  }
 catch (  Exception e) {
    _logger.error("Failed to record filesystem operation {}, err:",opType.toString(),e);
  }
}

public CoreTokenException(int errorCode){
  this.errorCode=errorCode;
  this.message=getLocalizedMessage(Locale.getDefault());
}

public DExamineSsl(JFrame parent,KseFrame kseFrame){
  super(parent,res.getString("DExamineSsl.Title"),Dialog.ModalityType.DOCUMENT_MODAL);
  this.kseFrame=kseFrame;
  initComponents();
}

private static List<String> computeDynamicVMArgs(IJavaProject javaProject){
  ArrayList<String> out=new ArrayList<String>();
  String devJarPath=maybeGetDevJarPath(javaProject);
  if (devJarPath.length() > 0) {
    out.add("-Dgwt.devjar=\"" + devJarPath + '"');
  }
  return out;
}

static void normalize(StringBuilder number){
  String normalizedNumber=normalize(number.toString());
  number.replace(0,number.length(),normalizedNumber);
}

public double[] skipTo(final int index) throws MathIllegalArgumentException {
  if (index == 0) {
    Arrays.fill(x,0);
  }
 else {
    final int i=index - 1;
    final long grayCode=i ^ (i >> 1);
    for (int j=0; j < dimension; j++) {
      long result=0;
      for (int k=1; k <= BITS; k++) {
        final long shift=grayCode >> (k - 1);
        if (shift == 0) {
          break;
        }
        final long ik=shift & 1;
        result^=ik * direction[j][k];
      }
      x[j]=result;
    }
  }
  count=index;
  return nextVector();
}

public void removeOrganizationConfiguration(String orgName,String groupName,boolean checkLegacyMode) throws SMSException, SSOException {
  if ((groupName == null) || groupName.length() == 0) {
    groupName=SMSUtils.DEFAULT;
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  validateSCM();
  String odn=scm.constructServiceConfigDN(groupName,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,odn);
  if (cEntry.isNewEntry()) {
    return;
  }
  if (checkLegacyMode && ServiceManager.isCoexistenceMode() && groupName.equalsIgnoreCase(SMSUtils.DEFAULT)) {
    OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(orgdn),orgdn);
    amsdk.unassignService(serviceName);
  }
  if (!cEntry.isNewEntry()) {
    SMSEntry entry=cEntry.getClonedSMSEntry();
    entry.delete(token);
    cEntry.refresh(entry);
  }
}

public void removeGroupListener(final GroupListener listener){
  groupListeners.remove(listener);
}

public SetChangelogMapping(String source,String taskName,int changelogPartitionNumber){
  super(source);
  setType(TYPE);
  setKey(taskName);
  putMessageValue(CHANGELOG_VALUE_KEY,String.valueOf(changelogPartitionNumber));
}

@Override protected String extractKey(final String name){
  final String key=unescape(name.substring(0,name.length() - 4));
  return key.equals("\0") ? null : key;
}

private static float spacing(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return (float)Math.sqrt(x * x + y * y);
}

@SuppressWarnings("unchecked") public static <K,V>void transformStringMap(Map<String,String> original,Map<K,V> map,Class<K> keyClass,Class<V> valueClass) throws PreferenceException {
  Method parseKeyMethod=findParseMethod(keyClass);
  Method parseValueMethod=findParseMethod(valueClass);
  if ((null != parseKeyMethod) && (null != parseValueMethod)) {
    for (    Map.Entry<String,String> toTransformEntry : original.entrySet()) {
      try {
        Object transformedKey=parseKeyMethod.invoke(null,toTransformEntry.getKey());
        Object transformedValue=parseValueMethod.invoke(null,toTransformEntry.getValue());
        if (keyClass.isAssignableFrom(transformedKey.getClass()) && valueClass.isAssignableFrom(transformedValue.getClass())) {
          map.put((K)transformedKey,(V)transformedValue);
        }
      }
 catch (      Exception e) {
        throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">.",e);
      }
    }
  }
 else   if (null == parseKeyMethod) {
    throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ keyClass.getName()+ ".");
  }
 else {
    throw new PreferenceException("Error transforming Map<java.lang.String, java.lang.String> to Map<" + keyClass.getName() + ", "+ valueClass.getName()+ ">."+ "Parsing method can not be found in class "+ valueClass.getName()+ ".");
  }
}

public boolean grabInput(){
  if (grabLog.isLoggable(PlatformLogger.Level.FINE)) {
    grabLog.fine("Grab input on {0}",this);
  }
  XToolkit.awtLock();
  try {
    if (XAwtState.getGrabWindow() == this && XAwtState.isManualGrab()) {
      grabLog.fine("    Already Grabbed");
      return true;
    }
    XBaseWindow prevGrabWindow=XAwtState.getGrabWindow();
    final int eventMask=(int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask| XConstants.LeaveWindowMask| XConstants.PointerMotionMask| XConstants.ButtonMotionMask);
    final int ownerEvents=1;
    if (!XToolkit.getSunAwtDisableGrab()) {
      int ptrGrab=XlibWrapper.XGrabPointer(XToolkit.getDisplay(),getContentWindow(),ownerEvents,eventMask,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.None,(XWM.isMotif() ? XToolkit.arrowCursor : XConstants.None),XConstants.CurrentTime);
      if (ptrGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine("    Grab Failure - mouse");
        return false;
      }
      int keyGrab=XlibWrapper.XGrabKeyboard(XToolkit.getDisplay(),getContentWindow(),ownerEvents,XConstants.GrabModeAsync,XConstants.GrabModeAsync,XConstants.CurrentTime);
      if (keyGrab != XConstants.GrabSuccess) {
        XlibWrapper.XUngrabPointer(XToolkit.getDisplay(),XConstants.CurrentTime);
        XlibWrapper.XUngrabKeyboard(XToolkit.getDisplay(),XConstants.CurrentTime);
        XAwtState.setGrabWindow(null);
        grabLog.fine("    Grab Failure - keyboard");
        return false;
      }
    }
    if (prevGrabWindow != null) {
      prevGrabWindow.ungrabInputImpl();
    }
    XAwtState.setGrabWindow(this);
    grabLog.fine("    Grab - success");
    return true;
  }
  finally {
    XToolkit.awtUnlock();
  }
}

public ComponentManager(Collection<Sequence> generalSeeds){
  Set<Sequence> seedSet=new LinkedHashSet<>(generalSeeds.size());
  seedSet.addAll(generalSeeds);
  this.gralSeeds=Collections.unmodifiableSet(seedSet);
  gralComponents=new SequenceCollection(seedSet);
}

public synchronized void deleteObservers(){
  observers.clear();
}

public static byte[] unsynchronize(byte[] abySource){
  ByteArrayInputStream input=new ByteArrayInputStream(abySource);
  ByteArrayOutputStream output=new ByteArrayOutputStream(abySource.length);
  int count=0;
  while (input.available() > 0) {
    int firstByte=input.read();
    count++;
    output.write(firstByte);
    if ((firstByte & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) {
      if (input.available() > 0) {
        input.mark(1);
        int secondByte=input.read();
        if ((secondByte & MPEGFrameHeader.SYNC_BYTE2) == MPEGFrameHeader.SYNC_BYTE2) {
          if (logger.isLoggable(Level.FINEST)) {
            logger.finest("Writing unsynchronisation bit at:" + count);
          }
          output.write(0);
        }
 else         if (secondByte == 0) {
          if (logger.isLoggable(Level.FINEST)) {
            logger.finest("Inserting zero unsynchronisation bit at:" + count);
          }
          output.write(0);
        }
        input.reset();
      }
    }
  }
  if ((abySource[abySource.length - 1] & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) {
    logger.finest("Adding unsynchronisation bit at end of stream");
    output.write(0);
  }
  return output.toByteArray();
}

private byte[] calculateGeneralEncryptionKey(byte[] userPassword,byte[] firstDocIdValue,int keyBitLength,int revision,byte[] oValue,int pValue,boolean encryptMetadata) throws GeneralSecurityException {
  final byte[] paddedPassword=padPassword(userPassword);
  MessageDigest md5=createMD5Digest();
  md5.reset();
  md5.update(paddedPassword);
  md5.update(oValue);
  md5.update((byte)(pValue & 0xFF));
  md5.update((byte)((pValue >> 8) & 0xFF));
  md5.update((byte)((pValue >> 16) & 0xFF));
  md5.update((byte)(pValue >> 24));
  if (firstDocIdValue != null) {
    md5.update(firstDocIdValue);
  }
  if (revision >= 4 && !encryptMetadata) {
    for (int i=0; i < 4; ++i) {
      md5.update((byte)0xFF);
    }
  }
  byte[] hash=md5.digest();
  final int keyLen=revision == 2 ? 5 : (keyBitLength / 8);
  final byte[] key=new byte[keyLen];
  if (revision >= 3) {
    for (int i=0; i < 50; ++i) {
      md5.update(hash,0,key.length);
      digestTo(md5,hash);
    }
  }
  System.arraycopy(hash,0,key,0,key.length);
  return key;
}

public MessageCapture(final Logger logger,final boolean captureEntity){
  this(logger,captureEntity,false);
}

public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}

public static void insertIntoCombo(JComboBox combo,Object item){
  MutableComboBoxModel model=(MutableComboBoxModel)combo.getModel();
  if (model.getSize() == 0) {
    model.insertElementAt(item,0);
    return;
  }
  Object o=model.getElementAt(0);
  if (o.equals(item)) {
    return;
  }
  model.removeElement(item);
  model.insertElementAt(item,0);
  combo.setSelectedIndex(0);
}

public synchronized Object co_entry_pause(int thisCoroutine) throws java.lang.NoSuchMethodException {
  if (!m_activeIDs.get(thisCoroutine))   throw new java.lang.NoSuchMethodException();
  while (m_nextCoroutine != thisCoroutine) {
    try {
      wait();
    }
 catch (    java.lang.InterruptedException e) {
    }
  }
  return m_yield;
}

private boolean pythonErrorIn(String output){
  boolean isError=false;
  String[] outputMultiline=output.split("\n");
  Matcher errorMatcher;
  for (  String row : outputMultiline) {
    errorMatcher=errorInLastLine.matcher(row);
    if (errorMatcher.find() == true) {
      isError=true;
      break;
    }
  }
  return isError;
}

public static String numberToString(Number number) throws JSONException {
  if (number == null) {
    throw new JSONException("Number must be non-null");
  }
  double doubleValue=number.doubleValue();
  JSON.checkDouble(doubleValue);
  if (number.equals(NEGATIVE_ZERO)) {
    return "-0";
  }
  long longValue=number.longValue();
  if (doubleValue == (double)longValue) {
    return Long.toString(longValue);
  }
  return number.toString();
}

public static Map<String,String> strToMap(String str,String delim,boolean trim,String pairsSeparator){
  if (str == null)   return null;
  Map<String,String> decodedMap=new HashMap<String,String>();
  List<String> elements=split(str,delim);
  pairsSeparator=pairsSeparator == null ? "=" : pairsSeparator;
  for (  String s : elements) {
    List<String> e=split(s,pairsSeparator);
    if (e.size() != 2) {
      continue;
    }
    String name=e.get(0);
    String value=e.get(1);
    if (trim) {
      if (name != null) {
        name=name.trim();
      }
      if (value != null) {
        value=value.trim();
      }
    }
    try {
      decodedMap.put(URLDecoder.decode(name,"UTF-8"),URLDecoder.decode(value,"UTF-8"));
    }
 catch (    UnsupportedEncodingException e1) {
      Debug.logError(e1,module);
    }
  }
  return decodedMap;
}

public void doStressTest(TempTripleStore tmp,InferenceEngine inf,int ntrials,int D,int N){
  AbstractTripleStore store=inf.database;
  assertSameGraphs(tmp,store);
  for (int trial=0; trial < ntrials; trial++) {
    MDC.put("trial","trial=" + trial);
    retractAndAssert(inf,store,0,D,N);
    assertSameGraphs(tmp,store);
    MDC.remove("trial");
  }
}

public Set<T> keySet(){
  return Collections.unmodifiableSet(map.keySet());
}

public void onStart(){
  if (mAudioMirrorBuffer == null) {
    mAudioMirrorBuffer=new byte[262144];
  }
  if (mStreamer != null) {
    mStreamer.start();
  }
  if (mInsecureStreamer != null) {
    mInsecureStreamer.start();
  }
}

@SuppressWarnings("unchecked") public PropagationImp(Stack<CompositeTransaction> lineage,boolean serial,long timeout){
  serial_=serial;
  lineage_=(Stack<CompositeTransaction>)lineage.clone();
  timeout_=timeout;
}

public NativeRunner(File eclipsec){
  this.eclipsec=Objects.requireNonNull(eclipsec);
}

private static String indent(final int height){
  return CoreBaseBOp.indent(height);
}

public static Calendar reduceCalendar(Calendar calendar){
  calendar.set(Calendar.MILLISECOND,0);
  calendar.set(Calendar.SECOND,0);
  calendar.set(Calendar.MINUTE,0);
  calendar.set(Calendar.HOUR,0);
  calendar.set(Calendar.HOUR_OF_DAY,0);
  return calendar;
}

public static String surround(String string,String prefix,String suffix){
  if (string.startsWith(prefix) == false) {
    string=prefix + string;
  }
  if (string.endsWith(suffix) == false) {
    string+=suffix;
  }
  return string;
}

public static Coordinate ptNotInList(Coordinate[] testPts,Coordinate[] pts){
  for (int i=0; i < testPts.length; i++) {
    Coordinate testPt=testPts[i];
    if (!isInList(testPt,pts))     return testPt;
  }
  return null;
}

public static String trimOrPad(String str,int length,char padChar){
  String result;
  if (str == null) {
    result="";
  }
 else {
    result=str;
  }
  if (result.length() > length) {
    return result.substring(0,length);
  }
  while (result.length() < length) {
    result+=padChar;
  }
  return result;
}

void scheduleToTimerPool(){
  if (sessionPollerPool.isPollingEnabled()) {
    long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxIdleTime() * 60)) * 1000;
    if (sessionPollerPool.getCacheBasedPolling()) {
      timeoutTime=Math.min((session.getLatestRefreshTime() + (session.getMaxCachingTime() * 60)) * 1000,timeoutTime);
    }
    rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
  }
 else {
    if ((sessionPollerPool.isSessionCleanupEnabled()) && willExpire(session.getMaxSessionTime())) {
      long timeoutTime=(session.getLatestRefreshTime() + (session.getMaxSessionTime() * 60)) * 1000;
      rescheduleIfWillTimeOutBeforeExecution(timeoutTime);
    }
  }
}

public void resetPolicy(){
  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));
  setRetryUntil(DEFAULT_RETRY_UNTIL);
  setMaxRetries(DEFAULT_MAX_RETRIES);
  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));
  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);
  mPreferences.commit();
}

public CipherParameters decrypt(byte[] in,int keyLen){
  return decrypt(in,0,in.length,keyLen);
}

private static void logOsInfo(){
  Logger.appendLog("[Main][I]User Os is " + Cfg.getOs());
  Logger.appendLog("[Main][I]Os name : " + Os.getOsName());
  Logger.appendLog("[Main][I]User Platform is : " + Os.platform());
  Logger.appendLog("[Main][I]JAVA version : " + System.getProperty("java.version"));
  Logger.appendLog("[Main][I]Available cores (cpu) = " + HostInfo.availableCpus());
  Logger.appendLog("[Main][I]Max allocated memory = " + HostInfo.getMaxMemory() + " bytes");
}

private void beforeValue() throws JSONException {
  if (stack.isEmpty()) {
    return;
  }
  Scope context=peek();
  if (context == Scope.EMPTY_ARRAY) {
    replaceTop(Scope.NONEMPTY_ARRAY);
    newline();
  }
 else   if (context == Scope.NONEMPTY_ARRAY) {
    out.append(',');
    newline();
  }
 else   if (context == Scope.DANGLING_KEY) {
    out.append(indent == null ? ":" : ": ");
    replaceTop(Scope.NONEMPTY_OBJECT);
  }
 else   if (context != Scope.NULL) {
    throw new JSONException("Nesting problem");
  }
}

public static byte[] hash(String input){
  if (!TextUtils.isEmpty(input)) {
    try {
      byte[] inputBytes=input.getBytes("UTF-8");
      return hash(inputBytes);
    }
 catch (    UnsupportedEncodingException e) {
      Log.e(TAG,"problem hashing \"" + input + "\" "+ e.getMessage(),e);
    }
  }
  return null;
}

public static String generateTransportZoneNativeGuid(String transportType,String deviceType,String fabricId){
  return String.format("%s+%s+%s",transportType,_deviceTypeMap.get(deviceType),fabricId);
}

public void testAddServletWithNameAndJspFile() throws Exception {
  String xml=WEBAPP_TEST_HEADER + "" + "</web-app>";
  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());
  WebXmlUtils.addJspFile(webXml,"s1","s1.jsp");
  assertTrue(WebXmlUtils.hasServlet(webXml,"s1"));
}

@Override public boolean equalsValue(final Object other){
  return Objects.equals(this.value,other);
}

public static void error(String msg,Throwable t){
  debugInst.debug(IDebug.ERROR,msg,t);
}

public void removeEventListener(SIPTransactionEventListener oldListener){
  eventListeners.remove(oldListener);
}

public static ExecutionSystem newExecutionSystem(URI uri,Map<String,?> env) throws IOException {
  return newExecutionSystem(uri,env,null);
}

public static boolean isCommand(IElementType type){
  return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND;
}

public void send(XTraceReport report){
  outgoing.offer(report);
}

@Contract(pure=true) public static boolean startsWithConcatenation(@NotNull String string,@NotNull String... prefixes){
  int offset=0;
  for (  String prefix : prefixes) {
    int prefixLen=prefix.length();
    if (!string.regionMatches(offset,prefix,0,prefixLen)) {
      return false;
    }
    offset+=prefixLen;
  }
  return true;
}

private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){
  int count=0;
  int len=msg.length();
  int idx=startpos;
  if (idx < len) {
    char ch=msg.charAt(idx);
    while (isDigit(ch) && idx < len) {
      count++;
      idx++;
      if (idx < len) {
        ch=msg.charAt(idx);
      }
    }
  }
  return count;
}

public void testOrderedByDatatype() throws Exception {
  int lastType=Integer.MIN_VALUE;
  while (typeInfoRs.next()) {
    String name=typeInfoRs.getString("TYPE_NAME");
    int type=typeInfoRs.getInt("DATA_TYPE");
    assertTrue("type " + type + " ("+ name+ ") less than last type "+ lastType,type >= lastType);
    lastType=type;
  }
}

private int measureShort(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

public boolean fireMapMouseClicked(MouseEvent evt){
  if (DEBUG) {
    logger.fine("MapMouseSupport: fireMapMouseClicked");
  }
  clickHappened=true;
  boolean consumed=false;
  evt=new MapMouseEvent(getParentMode(),evt);
  if (priorityListener != null && evt.getClickCount() > 1) {
    priorityListener.mouseClicked(evt);
    consumed=true;
  }
  priorityListener=null;
  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > 0) {
    Iterator<MapMouseListener> it=iterator();
    while (it.hasNext() && !consumed) {
      MapMouseListener target=it.next();
      consumed=target.mouseClicked(evt) && consumeEvents;
      if (consumed) {
        priorityListener=target;
      }
    }
  }
  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == 0));
  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {
    proxy.mouseClicked(evt);
    consumed=true;
  }
  return consumed;
}

public static String formatSqlValues(String... values){
  StringBuilder builder=new StringBuilder("(");
  for (int i=0; i < values.length; i++) {
    if (i > 0) {
      builder.append(',');
    }
    builder.append('\'');
    builder.append(escapeSqlString(values[i]));
    builder.append('\'');
  }
  builder.append(")");
  return builder.toString();
}

private void emitClass(DocComment comment){
  String tagName=(comment.getType() == DocComment.CLASS) ? "classRec" : "interfaceRec";
  xml.append("\n<");
  xml.append(tagName);
  xml.append(" name='");
  xml.append(comment.getName());
  xml.append("' fullname='");
  xml.append(comment.getFullname());
  String sourcefile=comment.getSourceFile();
  if (sourcefile != null) {
    xml.append("' sourcefile='");
    xml.append(sourcefile);
  }
  xml.append("' namespace='");
  xml.append(comment.getNamespace());
  xml.append("' access='");
  xml.append(comment.getAccess());
  xml.append("' ");
  if (comment.getType() == DocComment.INTERFACE) {
    String[] baseClasses=comment.getBaseclasses();
    if (baseClasses != null) {
      xml.append("baseClasses='");
      for (int i=0; i < baseClasses.length; i++) {
        String baseclass=baseClasses[i];
        if (baseclass != null) {
          if (i != 0)           xml.append(";");
          xml.append(baseclass);
        }
      }
      xml.append("' ");
    }
  }
 else {
    xml.append("baseclass='");
    xml.append(comment.getBaseClass());
    xml.append("' ");
    String[] interfaces=comment.getInterfaces();
    if (interfaces != null) {
      xml.append("interfaces='");
      for (int i=0; i < interfaces.length; i++) {
        String inter=interfaces[i];
        if (inter != null) {
          if (i != 0)           xml.append(";");
          xml.append(inter);
        }
      }
      xml.append("' ");
    }
  }
  xml.append("isFinal='");
  xml.append(comment.isFinal());
  xml.append("' ");
  xml.append("isDynamic='");
  xml.append(comment.isDynamic());
  xml.append("' ");
  xml.append(">");
  String desc=comment.getDescription();
  if (desc != null)   appendTag("description",comment.getDescription());
  emitTags(comment.getAllTags());
  if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata());
  xml.append("\n</");
  xml.append(tagName);
  xml.append(">");
}

protected void paintContentBorderTopEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){
  if (isContentBorderPainted) {
    g.setColor(selectHighlight);
    g.fillRect(x,y,w - 1,1);
  }
}

public void analyzeAllItAndWriteResults(){
  RunResultsLoader runDir=new RunResultsLoader(runDirectory,null);
  PrintStream stream;
  try {
    stream=new PrintStream(new File(outputDir + "routesAndTTs.txt"));
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
    return;
  }
  String header="it\ttotal tt[s]\t#users up\t#users mid\t#users low\tavg tt[s] up\tavg tt[s] mid\tavg tt[s] low";
  stream.println(header);
  double totalTTIt;
  double[] avgRouteTTsIt;
  int[] routeUsersIt;
  for (int i=0; i <= lastIteration; i++) {
    log.info("Starting to analyze iteration " + i + " of "+ lastIteration+ " iterations.");
    String eventsFilename=runDir.getEventsFilename(i);
    EventsManager eventsManager=new EventsManagerImpl();
    TtAnalyzeBraess handler=new TtAnalyzeBraess();
    eventsManager.addHandler(handler);
    MatsimEventsReader reader=new MatsimEventsReader(eventsManager);
    reader.readFile(eventsFilename);
    totalTTIt=handler.getTotalTT();
    avgRouteTTsIt=handler.calculateAvgRouteTTs();
    routeUsersIt=handler.getRouteUsers();
    StringBuffer line=new StringBuffer();
    line.append(i + "\t" + totalTTIt);
    for (int j=0; j < 3; j++) {
      line.append("\t" + routeUsersIt[j]);
    }
    for (int j=0; j < 3; j++) {
      line.append("\t" + avgRouteTTsIt[j]);
    }
    stream.println(line.toString());
  }
  stream.close();
  log.info(lastIteration + " Iterations analyzed.");
}

public int executeUpdate(String sql) throws SQLException {
  return Util.truncateAndConvertToInt(executeLargeUpdate(sql));
}

@LayoutlibDelegate static long currentThreadTimeMillis(){
  return System.currentTimeMillis();
}

public static Entry makeEntry(List<String> ldifLines){
  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));
}

void clearParserHighlights(){
  for (int i=0; i < parserHighlights.size(); i++) {
    Object tag=parserHighlights.get(i);
    if (tag instanceof LayeredHighlightInfo) {
      LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;
      if (lhi.width > 0 && lhi.height > 0) {
        textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height);
      }
    }
 else {
      HighlightInfo info=(HighlightInfo)tag;
      TextUI ui=textArea.getUI();
      ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset());
    }
  }
  parserHighlights.clear();
}

@Override public final short readShort() throws IOException {
  dis.readFully(work,0,2);
  return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff));
}

public int format(int val,byte[] buf,int off,int len){
  if (val == Integer.MIN_VALUE) {
    if (len > ByteFormatter.NUMBER_BASE) {
      return format("-2147483648",buf,off,len);
    }
 else {
      truncationFiller(buf,off,len);
      return off + len;
    }
  }
  int pos=Math.abs(val);
  int ndig=1;
  int dmax=ByteFormatter.NUMBER_BASE;
  while (ndig < ByteFormatter.NUMBER_BASE && pos >= dmax) {
    ndig++;
    dmax*=ByteFormatter.NUMBER_BASE;
  }
  if (val < 0) {
    ndig++;
  }
  if (ndig > len || ndig > buf.length - off) {
    truncationFiller(buf,off,len);
    return off + len;
  }
  off+=ndig;
  int xoff=off - 1;
  do {
    buf[xoff]=ByteFormatter.DIGITS[pos % ByteFormatter.NUMBER_BASE];
    xoff--;
    pos/=ByteFormatter.NUMBER_BASE;
  }
 while (pos > 0);
  if (val < 0) {
    buf[xoff]=(byte)'-';
  }
  return off;
}

public void append(char c[]){
  int maxlength=buffer.length - pos;
  if (c.length < maxlength) {
    System.arraycopy(c,0,buffer,pos,c.length);
    pos+=c.length;
  }
 else {
    System.arraycopy(c,0,buffer,pos,maxlength);
    curr.next=new Entity(buffer);
    curr=curr.next;
    length+=buffer.length;
    buffer=new char[(buffer.length > c.length - maxlength) ? buffer.length : c.length - maxlength];
    if (c.length > maxlength) {
      System.arraycopy(c,maxlength,buffer,0,c.length - maxlength);
      pos=c.length - maxlength;
    }
 else {
      pos=0;
    }
  }
}

public static boolean hasPermission(Security security,GenericValue userLogin,GenericValue orderHeader){
  if (userLogin == null || orderHeader == null)   return false;
  if (security.hasEntityPermission("ORDERMGR","_VIEW",userLogin)) {
    return true;
  }
 else   if (security.hasEntityPermission("ORDERMGR","_ROLEVIEW",userLogin)) {
    List<GenericValue> orderRoles=null;
    try {
      orderRoles=orderHeader.getRelated("OrderRole",UtilMisc.toMap("partyId",userLogin.getString("partyId")),null,false);
    }
 catch (    GenericEntityException e) {
      Debug.logError(e,"Cannot get OrderRole from OrderHeader",module);
    }
    if (UtilValidate.isNotEmpty(orderRoles)) {
      return true;
    }
  }
  return false;
}

private boolean isAnnotation(){
  return implInterfaces.contains("java.lang.annotation.Annotation");
}

public final boolean isExceptionHandlerEquivalent(BasicBlock other){
  if (exceptionHandlers != other.exceptionHandlers) {
    Enumeration<BasicBlock> e1=getExceptionHandlers();
    Enumeration<BasicBlock> e2=other.getExceptionHandlers();
    while (e1.hasMoreElements()) {
      if (!e2.hasMoreElements())       return false;
      if (e1.nextElement() != e2.nextElement())       return false;
    }
    if (e2.hasMoreElements())     return false;
  }
  return true;
}

public int hashCode(){
  return name.hashCode();
}

public int checksum(){
  return calculateChecksum(compile_checksum.toString());
}

public boolean longLabel(){
  return fState.longLabel;
}

public SecretBlock(Mario player,Group parent,int stageZone,float xPos,float yPos,float yoloWidth,Image... hitState){
  super(BLOCK_COLLISION_DATA,xPos,yPos,0,0,(Image)null);
  this.hitState=hitState[0];
  yoloView=new ImageView(hitState[1]);
  yoloView.setFitWidth(yoloWidth);
  this.parent=parent;
  zone=stageZone;
}

private Socket openDataConnection(String cmd) throws sun.net.ftp.FtpProtocolException, IOException {
  Socket clientSocket;
  if (passiveMode) {
    try {
      return openPassiveDataConnection(cmd);
    }
 catch (    sun.net.ftp.FtpProtocolException e) {
      String errmsg=e.getMessage();
      if (!errmsg.startsWith("PASV") && !errmsg.startsWith("EPSV")) {
        throw e;
      }
    }
  }
  ServerSocket portSocket;
  InetAddress myAddress;
  String portCmd;
  if (proxy != null && proxy.type() == Proxy.Type.SOCKS) {
    throw new sun.net.ftp.FtpProtocolException("Passive mode failed");
  }
  portSocket=new ServerSocket(0,1,server.getLocalAddress());
  try {
    myAddress=portSocket.getInetAddress();
    if (myAddress.isAnyLocalAddress()) {
      myAddress=server.getLocalAddress();
    }
    portCmd="EPRT |" + ((myAddress instanceof Inet6Address) ? "2" : "1") + "|"+ myAddress.getHostAddress()+ "|"+ portSocket.getLocalPort()+ "|";
    if (!issueCommand(portCmd) || !issueCommand(cmd)) {
      portCmd="PORT ";
      byte[] addr=myAddress.getAddress();
      for (int i=0; i < addr.length; i++) {
        portCmd=portCmd + (addr[i] & 0xFF) + ",";
      }
      portCmd=portCmd + ((portSocket.getLocalPort() >>> 8) & 0xff) + ","+ (portSocket.getLocalPort() & 0xff);
      issueCommandCheck(portCmd);
      issueCommandCheck(cmd);
    }
    if (connectTimeout >= 0) {
      portSocket.setSoTimeout(connectTimeout);
    }
 else {
      if (defaultConnectTimeout > 0) {
        portSocket.setSoTimeout(defaultConnectTimeout);
      }
    }
    clientSocket=portSocket.accept();
    if (readTimeout >= 0) {
      clientSocket.setSoTimeout(readTimeout);
    }
 else {
      if (defaultSoTimeout > 0) {
        clientSocket.setSoTimeout(defaultSoTimeout);
      }
    }
  }
  finally {
    portSocket.close();
  }
  if (useCrypto) {
    try {
      clientSocket=sslFact.createSocket(clientSocket,serverAddr.getHostName(),serverAddr.getPort(),true);
    }
 catch (    Exception ex) {
      throw new IOException(ex.getLocalizedMessage());
    }
  }
  return clientSocket;
}

public static boolean installNormal(Context context,String filePath){
  Intent i=new Intent(Intent.ACTION_VIEW);
  File file=new File(filePath);
  if (!file.exists() || !file.isFile() || file.length() <= 0) {
    return false;
  }
  i.setDataAndType(Uri.parse("file://" + filePath),"application/vnd.android.package-archive");
  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(i);
  return true;
}

private void createInsertList(final IItem item,List<IItem> tempList,List<IItem> insertList,int depth,int removed){
  if (!tempList.contains(item)) {
    tempList.add(item);
    if (depth == 0) {
      insertList.add(item);
    }
    if (item.getItems() != null) {
      depth++;
      for (      IItem child : item.getItems()) {
        createInsertList(child,tempList,insertList,depth,removed);
      }
    }
  }
 else {
    insertList.remove(item);
    removed++;
  }
}

@SuppressWarnings("UnusedReturnValue") public int readOutlineFileMetadata(final PdfObject OutlinesObj,final PdfObjectReader currentPdfFile){
  final int count=OutlinesObj.getInt(PdfDictionary.Count);
  final PdfObject FirstObj=OutlinesObj.getDictionary(PdfDictionary.First);
  currentPdfFile.checkResolved(FirstObj);
  if (FirstObj != null) {
    final Element root=OutlineDataXML.createElement("root");
    OutlineDataXML.appendChild(root);
    final int level=0;
    readOutlineLevel(root,currentPdfFile,FirstObj,level,false);
  }
  return count;
}

private int decodeRunLength(int k){
  if ((k & 1) == 1) {
    return ((k >>> 1) & 63) ^ 63;
  }
 else {
    return Integer.numberOfLeadingZeros(k << p + (31 - sp)) + 1;
  }
}

private static byte[] streamToBytes(InputStream in,int length) throws IOException {
  byte[] bytes=new byte[length];
  int count;
  int pos=0;
  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {
    pos+=count;
  }
  if (pos != length) {
    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");
  }
  return bytes;
}

private boolean decodeHandshake(ByteBuffer socketBufferNew){
  ByteBuffer socketBuffer;
  if (tmpHandshakeBytes.capacity() == 0) {
    socketBuffer=socketBufferNew;
  }
 else {
    if (tmpHandshakeBytes.remaining() < socketBufferNew.remaining()) {
      ByteBuffer buf=ByteBuffer.allocate(tmpHandshakeBytes.capacity() + socketBufferNew.remaining());
      tmpHandshakeBytes.flip();
      buf.put(tmpHandshakeBytes);
      tmpHandshakeBytes=buf;
    }
    tmpHandshakeBytes.put(socketBufferNew);
    tmpHandshakeBytes.flip();
    socketBuffer=tmpHandshakeBytes;
  }
  socketBuffer.mark();
  try {
    if (draft == null) {
      HandshakeState isflashedgecase=isFlashEdgeCase(socketBuffer);
      if (isflashedgecase == HandshakeState.MATCHED) {
        try {
          write(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(wsl.getFlashPolicy(this))));
          close(CloseFrame.FLASHPOLICY,"");
        }
 catch (        InvalidDataException e) {
          close(CloseFrame.ABNORMAL_CLOSE,"remote peer closed connection before flashpolicy could be transmitted",true);
        }
        return false;
      }
    }
    HandshakeState handshakestate=null;
    try {
      if (role == Role.SERVER) {
        if (draft == null) {
          for (          Draft d : knownDrafts) {
            d=d.copyInstance();
            try {
              d.setParseMode(role);
              socketBuffer.reset();
              Handshakedata tmphandshake=d.translateHandshake(socketBuffer);
              if (tmphandshake instanceof ClientHandshake == false) {
                flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false);
                return false;
              }
              ClientHandshake handshake=(ClientHandshake)tmphandshake;
              handshakestate=d.acceptHandshakeAsServer(handshake);
              if (handshakestate == HandshakeState.MATCHED) {
                resourceDescriptor=handshake.getResourceDescriptor();
                ServerHandshakeBuilder response;
                try {
                  response=wsl.onWebsocketHandshakeReceivedAsServer(this,d,handshake);
                }
 catch (                InvalidDataException e) {
                  flushAndClose(e.getCloseCode(),e.getMessage(),false);
                  return false;
                }
catch (                RuntimeException e) {
                  wsl.onWebsocketError(this,e);
                  flushAndClose(CloseFrame.NEVER_CONNECTED,e.getMessage(),false);
                  return false;
                }
                write(d.createHandshake(d.postProcessHandshakeResponseAsServer(handshake,response),role));
                draft=d;
                open(handshake);
                return true;
              }
            }
 catch (            InvalidHandshakeException e) {
            }
          }
          if (draft == null) {
            close(CloseFrame.PROTOCOL_ERROR,"no draft matches");
          }
          return false;
        }
 else {
          Handshakedata tmphandshake=draft.translateHandshake(socketBuffer);
          if (tmphandshake instanceof ClientHandshake == false) {
            flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false);
            return false;
          }
          ClientHandshake handshake=(ClientHandshake)tmphandshake;
          handshakestate=draft.acceptHandshakeAsServer(handshake);
          if (handshakestate == HandshakeState.MATCHED) {
            open(handshake);
            return true;
          }
 else {
            close(CloseFrame.PROTOCOL_ERROR,"the handshake did finaly not match");
          }
          return false;
        }
      }
 else       if (role == Role.CLIENT) {
        draft.setParseMode(role);
        Handshakedata tmphandshake=draft.translateHandshake(socketBuffer);
        if (tmphandshake instanceof ServerHandshake == false) {
          flushAndClose(CloseFrame.PROTOCOL_ERROR,"wrong http function",false);
          return false;
        }
        ServerHandshake handshake=(ServerHandshake)tmphandshake;
        handshakestate=draft.acceptHandshakeAsClient(handshakerequest,handshake);
        if (handshakestate == HandshakeState.MATCHED) {
          try {
            wsl.onWebsocketHandshakeReceivedAsClient(this,handshakerequest,handshake);
          }
 catch (          InvalidDataException e) {
            flushAndClose(e.getCloseCode(),e.getMessage(),false);
            return false;
          }
catch (          RuntimeException e) {
            wsl.onWebsocketError(this,e);
            flushAndClose(CloseFrame.NEVER_CONNECTED,e.getMessage(),false);
            return false;
          }
          open(handshake);
          return true;
        }
 else {
          close(CloseFrame.PROTOCOL_ERROR,"draft " + draft + " refuses handshake");
        }
      }
    }
 catch (    InvalidHandshakeException e) {
      close(e);
    }
  }
 catch (  IncompleteHandshakeException e) {
    if (tmpHandshakeBytes.capacity() == 0) {
      socketBuffer.reset();
      int newsize=e.getPreferedSize();
      if (newsize == 0) {
        newsize=socketBuffer.capacity() + 16;
      }
 else {
        assert (e.getPreferedSize() >= socketBuffer.remaining());
      }
      tmpHandshakeBytes=ByteBuffer.allocate(newsize);
      tmpHandshakeBytes.put(socketBufferNew);
    }
 else {
      tmpHandshakeBytes.position(tmpHandshakeBytes.limit());
      tmpHandshakeBytes.limit(tmpHandshakeBytes.capacity());
    }
  }
  return false;
}

public NoDuplicateValueGlobalConstraint(AbstractParameter<?,?>... parameters){
  this.parameters=Arrays.asList(parameters);
}

@SuppressWarnings("unchecked") public RhythmOverlay inflateOverlay(String configString){
  List<String> configStrings=Arrays.asList(configString.split("\\r?\\n"));
  return inflateOverlayInternal(configStrings,Collections.EMPTY_MAP,0);
}

public static RevocationHash bruteForceHash(byte[] seed,byte[] target,int maxChildTries,int maxSiblingTries){
  for (int i=0; i < maxChildTries; i++) {
    for (int j=0; j < maxSiblingTries; j++) {
      RevocationHash test=HashDerivation.calculateRevocationHash(seed,0,j);
      if (Arrays.equals(test.getSecretHash(),target)) {
        return new RevocationHash(i,j,test.getSecret(),test.getSecretHash());
      }
    }
    seed=Tools.hashSecret(seed);
  }
  return null;
}

public FancyLoader(ClassLoader parent){
  super(parent);
  try {
    mDexClass=parent.loadClass("dalvik.system.DexFile");
  }
 catch (  ClassNotFoundException cnfe) {
  }
}

public boolean isSourceModified(Resource resource){
  boolean modified=true;
  String fileName=resource.getName();
  String path=(String)templatePaths.get(fileName);
  File currentFile=null;
  for (int i=0; currentFile == null && i < paths.size(); i++) {
    String testPath=(String)paths.get(i);
    File testFile=new File(testPath,fileName);
    if (testFile.canRead()) {
      currentFile=testFile;
    }
  }
  File file=new File(path,fileName);
  if (currentFile == null || !file.exists()) {
  }
 else   if (currentFile.equals(file) && file.canRead()) {
    modified=(file.lastModified() != resource.getLastModified());
  }
  return modified;
}

protected void flip(BufferCapabilities.FlipContents flipAction){
  if (peer != null) {
    Image backBuffer=getBackBuffer();
    if (backBuffer != null) {
      peer.flip(0,0,backBuffer.getWidth(null),backBuffer.getHeight(null),flipAction);
    }
  }
 else {
    throw new IllegalStateException("Component must have a valid peer");
  }
}

protected void loadValue(String sValue){
  try {
    value=Byte.parseByte(sValue.trim());
  }
 catch (  NumberFormatException nfe) {
    revertToDefault();
  }
}

public static Map<String,String> allNamespaces(SOAPElement ele){
  Map<String,String> nsList=new TreeMap<String,String>();
  log.trace("Starting Namespace Lookup in " + ele.getNodeName());
  allNamespaces(ele,nsList);
  log.trace("Namespace Lookup done: " + nsList);
  return nsList;
}

private void drawHook(Canvas canvas){
  Path hookPath=new Path();
  double sweepAngle=Math.PI / 180 * 180;
  float y=(float)Math.sin(sweepAngle) * (getBigCircleRadius()) + rectF.height() / 2;
  float x=(float)Math.cos(sweepAngle) * (getBigCircleRadius()) + rectF.width() / 2;
  float i=getBigCircleRadius() / 2;
  hookPath.addRoundRect(new RectF(i + i / 2,i + i / 2,i + i / 2 + 6,i + i + i / 2),3f,3f,Path.Direction.CCW);
  hookPath.addRoundRect(new RectF(i + i / 2,(i + i + i / 2) - 3f,i + i / 2 + i + i,i + i + i / 2 + 3f),3f,3f,Path.Direction.CCW);
  Matrix matrix=new Matrix();
  matrix.reset();
  int restoreCount=canvas.getSaveCount();
  hookPath.close();
  canvas.rotate(-45,rectF.centerX(),rectF.centerY());
  canvas.drawPath(hookPath,mHookPaint);
  canvas.restoreToCount(restoreCount);
}

public static byte[] toByteArray(Bitmap bitmap,Bitmap.CompressFormat format,int quality){
  ByteArrayOutputStream out=null;
  try {
    out=new ByteArrayOutputStream();
    bitmap.compress(format,quality,out);
    return out.toByteArray();
  }
  finally {
    CloseableUtils.close(out);
  }
}

public void continueButtonActionPerformed(java.awt.event.ActionEvent e){
  if (testRunning && testSuspended) {
    testSuspended=false;
    if (wrapTest) {
      statusText1.setText("Running Wraparound Test");
      statusText1.setVisible(true);
    }
  }
}

@HLEFunction(nid=0x9AC2EEAC,version=150) public int sceNetAdhocPtpFlush(@CheckArgument("checkPtpId") int id,int timeout,int nonblock){
  return 0;
}

public void reset(){
  displayCache.clear();
  cachedID.clear();
}

private void copyDirectory(File source,File dest) throws IOException {
  for (  File f : source.listFiles()) {
    File sourceFile=new File(source,f.getName());
    File destFile=new File(dest,f.getName());
    if (f.isDirectory()) {
      destFile.mkdirs();
      copyDirectory(sourceFile,destFile);
    }
 else     copyFile(sourceFile,destFile);
  }
}

private synchronized void rebuildJournal() throws IOException {
  if (mJournalWriter != null) {
    mJournalWriter.close();
  }
  Writer writer=new BufferedWriter(new FileWriter(mJournalFileTmp),IO_BUFFER_SIZE);
  writer.write(MAGIC);
  writer.write("\n");
  writer.write(VERSION_1);
  writer.write("\n");
  writer.write(Integer.toString(mAppVersion));
  writer.write("\n");
  writer.write("\n");
  for (  CacheEntry cacheEntry : mLruEntries.values()) {
    if (cacheEntry.isUnderEdit()) {
      writer.write(sACTION_LIST[ACTION_DIRTY] + ' ' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ '\n');
    }
 else {
      writer.write(sACTION_LIST[ACTION_CLEAN] + ' ' + cacheEntry.getKey()+ " "+ cacheEntry.getSize()+ '\n');
    }
  }
  writer.close();
  mJournalFileTmp.renameTo(mJournalFile);
  mJournalWriter=new BufferedWriter(new FileWriter(mJournalFile,true),IO_BUFFER_SIZE);
}

private void recordLogData(){
  try {
    int size=mRecordingData.size();
    if (size == 0) {
      return;
    }
    Vector<String> recordingData=new Vector<>(mRecordingData);
    File logDir=Constants.getRecordDir(this);
    logDir.mkdirs();
    File logFile=new File(logDir,mRecordingFilename);
    FileWriter logFileWriter=new FileWriter(logFile,true);
    for (int i=0; i < size; i++) {
      logFileWriter.append(recordingData.elementAt(i) + "\n");
      mRecordingData.removeElementAt(0);
    }
    recordingData.removeAllElements();
    logFileWriter.close();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,"recordLogData:Error writing the log to file. Exception: " + e.toString());
  }
}

private static List<Command> loadRewrites(String str){
  assert str != null;
  List<Command> commands=new ArrayList<>();
  for (  String line : str.split("\n")) {
    addLine(commands,line);
  }
  return commands;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(4);
  newVector.addElement(new Option("\tTabu list length","L",1,"-L <integer>"));
  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));
  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));
  newVector.addElement(new Option("\tUse arc reversal operation.\n\t(default false)","R",0,"-R"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

@Override public StateConnection onCloseRead(){
  ConnectionProtocol request=request();
  if (request != null) {
    request.onCloseRead();
  }
  _sequenceClose.set(_sequenceRead.get());
  if (_sequenceFlush.get() < _sequenceClose.get()) {
    _isClosePending.set(true);
    if (_sequenceFlush.get() < _sequenceClose.get()) {
      return StateConnection.CLOSE_READ_S;
    }
 else {
      _isClosePending.set(false);
      return StateConnection.CLOSE;
    }
  }
 else {
    return StateConnection.CLOSE;
  }
}

private Map<UUID,int[]> reducers(Collection<ClusterNode> top,Map<UUID,Collection<HadoopInputSplit>> mappers,int reducerCnt){
  int totalWeight=0;
  List<WeightedNode> nodes=new ArrayList<>(top.size());
  for (  ClusterNode node : top) {
    Collection<HadoopInputSplit> split=mappers.get(node.id());
    int weight=reducerNodeWeight(node,split != null ? split.size() : 0);
    nodes.add(new WeightedNode(node.id(),weight,weight));
    totalWeight+=weight;
  }
  int totalAdjustedWeight=0;
  for (  WeightedNode node : nodes) {
    node.floatWeight=((float)node.weight * reducerCnt) / totalWeight;
    node.weight=Math.round(node.floatWeight);
    totalAdjustedWeight+=node.weight;
  }
  Collections.sort(nodes);
  if (totalAdjustedWeight > reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(nodes.size() - 1);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasPrevious())       iter=nodes.listIterator(nodes.size() - 1);
      WeightedNode node=iter.previous();
      if (node.weight > 0) {
        node.weight-=1;
        totalAdjustedWeight--;
      }
    }
  }
 else   if (totalAdjustedWeight < reducerCnt) {
    ListIterator<WeightedNode> iter=nodes.listIterator(0);
    while (totalAdjustedWeight != reducerCnt) {
      if (!iter.hasNext())       iter=nodes.listIterator(0);
      WeightedNode node=iter.next();
      if (node.floatWeight > 0.0f) {
        node.weight+=1;
        totalAdjustedWeight++;
      }
    }
  }
  int idx=0;
  Map<UUID,int[]> reducers=new HashMap<>(nodes.size(),1.0f);
  for (  WeightedNode node : nodes) {
    if (node.weight > 0) {
      int[] arr=new int[node.weight];
      for (int i=0; i < arr.length; i++)       arr[i]=idx++;
      reducers.put(node.nodeId,arr);
    }
  }
  return reducers;
}

public void httpRequest(HttpRequestEvent e) throws java.io.IOException {
  String request=e.getRequest();
  if (Debug.debugging("shis")) {
    Debug.output("SHIS: Handling request - \"" + request + "\"");
  }
  if (request.charAt(0) == '/') {
    request=request.substring(0,request.length());
  }
  int index=0;
  index=request.indexOf('?');
  if (index != -1) {
    request=request.substring(index + 1,request.length());
    Debug.message("shis","SHIS: GET Request received");
  }
 else {
    Debug.message("shis","SHIS: Probably a POST Request received");
  }
  try {
    iServer.handleRequest(request,e.getOutputStream());
  }
 catch (  IOException ioe) {
    Debug.error("SHIS: caught IOException - \n" + ioe.getMessage());
  }
catch (  MapRequestFormatException exception) {
    String message="OpenMap SimpleHttpImageServer encountered an problem with your request:\n\n" + exception.getMessage() + "\n\n"+ ErrorMessage;
    HttpConnection.writeHttpResponse(e.getOutputStream(),HttpConnection.CONTENT_PLAIN,message);
  }
}

public void testConstructorBytesNegative2(){
  byte aBytes[]={-12,56,100};
  byte rBytes[]={-12,56,100};
  BigInteger aNumber=new BigInteger(aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,aNumber.signum());
}

public String format(double val){
  DecimalFormat df=getDoubleFormat();
  if (df != null) {
    return df.format(val);
  }
  return Double.toString(val);
}

public void removePositions(Collection<Integer> positions){
  ArrayList<Integer> positionsList=new ArrayList<Integer>(positions);
  Collections.sort(positionsList);
  Collections.reverse(positionsList);
  for (  int position : positionsList) {
    mItems.remove(position);
  }
  notifyDataSetChanged();
}

private void resetShapeBounds(){
  RoundRectangle2D.Double rrect=(RoundRectangle2D.Double)shape;
  rrect.setRoundRect(0,0,getBounds().width - 1,getBounds().height - 1,10,10);
}

public static Colour attemptToGetAsColour(String part){
  Colour col=null;
  try {
    col=Colour.valueOf(part.toUpperCase());
  }
 catch (  Exception e) {
  }
  return col;
}

public final ArrayList<Move> removeNonOptimal(Position pos,ArrayList<Move> moveList){
  ArrayList<Move> optimalMoves=new ArrayList<Move>();
  ArrayList<Move> unknownMoves=new ArrayList<Move>();
  final int MATE0=100000;
  int bestScore=-1000000;
  UndoInfo ui=new UndoInfo();
  for (  Move m : moveList) {
    pos.makeMove(m,ui);
    int pliesToDraw=Math.max(100 - pos.halfMoveClock,1);
    GtbProbeResult res=gtbProbe(pos);
    pos.unMakeMove(m,ui);
    if (res.result == GtbProbeResult.UNKNOWN) {
      unknownMoves.add(m);
    }
 else {
      int wScore;
      if (res.result == GtbProbeResult.WMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=MATE0 - res.pliesToMate;
 else         wScore=1;
      }
 else       if (res.result == GtbProbeResult.BMATE) {
        if (res.pliesToMate <= pliesToDraw)         wScore=-(MATE0 - res.pliesToMate);
 else         wScore=-1;
      }
 else {
        wScore=0;
      }
      int score=pos.whiteMove ? wScore : -wScore;
      if (score > bestScore) {
        optimalMoves.clear();
        optimalMoves.add(m);
        bestScore=score;
      }
 else       if (score == bestScore) {
        optimalMoves.add(m);
      }
 else {
      }
    }
  }
  for (  Move m : unknownMoves)   optimalMoves.add(m);
  return (optimalMoves.size() < moveList.size()) ? optimalMoves : null;
}

public int rank(){
  double eps=Math.pow(2.0,-52.0);
  double tol=Math.max(m,n) * s[0] * eps;
  int r=0;
  for (int i=0; i < s.length; i++) {
    if (s[i] > tol) {
      r++;
    }
  }
  return r;
}

protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollX=getScrollX();
    int paddingLeft=getPaddingLeft();
    int paddingRight=getPaddingRight();
    final int width=getWidth();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int hgrav=lp.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
      int childLeft=0;
switch (hgrav) {
default :
        childLeft=paddingLeft;
      break;
case Gravity.LEFT:
    childLeft=paddingLeft;
  paddingLeft+=child.getWidth();
break;
case Gravity.CENTER_HORIZONTAL:
childLeft=Math.max((width - child.getMeasuredWidth()) / 2,paddingLeft);
break;
case Gravity.RIGHT:
childLeft=width - paddingRight - child.getMeasuredWidth();
paddingRight+=child.getMeasuredWidth();
break;
}
childLeft+=scrollX;
final int childOffset=childLeft - child.getLeft();
if (childOffset != 0) {
child.offsetLeftAndRight(childOffset);
}
}
}
if (mOnPageChangeListener != null) {
mOnPageChangeListener.onPageScrolled(position,offset,offsetPixels);
}
if (mInternalPageChangeListener != null) {
mInternalPageChangeListener.onPageScrolled(position,offset,offsetPixels);
}
if (mPageTransformer != null) {
final int scrollX=getScrollX();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getLeft() - scrollX) / getClientWidth();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}

public static void executeRandomModifiableVariableModification(ModifiableVariableHolder object){
  Field field=object.getRandomModifiableVariableField();
  executeModifiableVariableModification(object,field);
}

public static boolean save(File file,String content){
  boolean result;
  BufferedWriter writer;
  writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(file));
    writer.write(content);
    writer.flush();
    result=true;
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=false;
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      Exception e) {
      }
    }
  }
  return result;
}

private void deleteOldTemp(File fileCfg){
  BufferedReader reader=null;
  try {
    int count=0;
    reader=new BufferedReader(new FileReader(fileCfg));
    String sLine;
    while ((sLine=reader.readLine()) != null) {
      File file=new File(sLine);
      if (!file.exists()) {
        continue;
      }
      if (file.delete()) {
        count++;
      }
 else {
        hsDeleteOnExit.add(file);
      }
    }
    logDebug(LogArea.CONFIG,"Deleted %d old temp files listed in %s",count,fileCfg.getAbsolutePath());
  }
 catch (  IOException e) {
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
  }
}

public void proposeTree() throws OperatorFailedException {
  NodeRef i;
  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;
  final int nodeCount=tree.getNodeCount();
  do {
    i=tree.getNode(MathUtils.nextInt(nodeCount));
  }
 while (tree.getRoot() == i);
  final NodeRef iP=tree.getParent(i);
  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));
  NodeRef k=tree.getParent(j);
  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {
    j=tree.getNode(MathUtils.nextInt(nodeCount));
    k=tree.getParent(j);
  }
  if (j == tree.getRoot() || iP == tree.getRoot()) {
    throw new OperatorFailedException("Root changes not allowed!");
  }
  if (k == iP || j == iP || k == i)   throw new OperatorFailedException("move failed");
  final NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));
  newRange=tree.getNodeHeight(k) - newMinAge;
  newAge=newMinAge + (MathUtils.nextDouble() * newRange);
  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));
  oldRange=tree.getNodeHeight(PiP) - oldMinAge;
  q=newRange / Math.abs(oldRange);
  tree.beginTreeEdit();
  if (j == tree.getRoot()) {
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(PiP,CiP);
    tree.setRoot(iP);
  }
 else   if (iP == tree.getRoot()) {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.setRoot(CiP);
  }
 else {
    tree.removeChild(k,j);
    tree.removeChild(iP,CiP);
    tree.removeChild(PiP,iP);
    tree.addChild(iP,j);
    tree.addChild(k,iP);
    tree.addChild(PiP,CiP);
  }
  tree.setNodeHeight(iP,newAge);
  tree.endTreeEdit();
  logq=Math.log(q);
}

public void flush(){
  final BigdataSailRepositoryConnection cxn=tlTx.get();
  if (cxn != null) {
    Code.wrapThrow(null);
  }
}

@Override public BufferedImage JPEGToRGBImage(final byte[] data,final int ww,final int hh,final int pX,final int pY){
  BufferedImage image=null;
  Raster ras=JPEGDecoder.getRasterFromJPEG(data,"JPEG");
  if (ras != null) {
    ras=cleanupRaster(ras,pX,pY,componentCount);
    final int w=ras.getWidth();
    final int h=ras.getHeight();
    final DataBufferByte rgb=(DataBufferByte)ras.getDataBuffer();
    image=createImage(w,h,rgb.getData());
  }
  return image;
}

public void despawn(VisibleObject object){
  despawn(object,true);
}

public String eventTopic(String eventId){
  if (eventId == null) {
    eventId="+";
  }
  return evtTopic.replace("{EVENTID}",eventId);
}

public MatchResult match(){
  if (!matchSuccessful) {
    throw new IllegalStateException();
  }
  return matcher.toMatchResult();
}

@SuppressWarnings("rawtypes") public static void createProjectConstraint(ZipFile zip,Project aProject,RepositoryService aRepository) throws IOException {
  for (Enumeration zipEnumerate=zip.entries(); zipEnumerate.hasMoreElements(); ) {
    ZipEntry entry=(ZipEntry)zipEnumerate.nextElement();
    String entryName=normalizeEntryName(entry);
    if (entryName.startsWith(CONSTRAINTS)) {
      String filename=FilenameUtils.getName(entry.getName());
      ConstraintSet constraintSet=new ConstraintSet();
      constraintSet.setProject(aProject);
      constraintSet.setName(filename);
      aRepository.createConstraintSet(constraintSet);
      aRepository.writeConstraintSet(constraintSet,zip.getInputStream(entry));
      LOG.info("Imported constraint [" + filename + "] for project ["+ aProject.getName()+ "] with id ["+ aProject.getId()+ "]");
    }
  }
}

static synchronized void computePRF_SSLv3(byte[] out,byte[] secret,byte[] seed){
  if (sha == null) {
    init();
  }
  int pos=0;
  int iteration=1;
  byte[] digest;
  while (pos < out.length) {
    byte[] pref=new byte[iteration];
    Arrays.fill(pref,(byte)(64 + iteration++));
    sha.update(pref);
    sha.update(secret);
    sha.update(seed);
    md5.update(secret);
    md5.update(sha.digest());
    digest=md5.digest();
    if (pos + 16 > out.length) {
      System.arraycopy(digest,0,out,pos,out.length - pos);
      pos=out.length;
    }
 else {
      System.arraycopy(digest,0,out,pos,16);
      pos+=16;
    }
  }
}

public String decode(String pString) throws DecoderException {
  if (pString == null) {
    return null;
  }
  try {
    return decode(pString,getDefaultCharset());
  }
 catch (  UnsupportedEncodingException e) {
    throw new DecoderException(e.getMessage());
  }
}

public Operation copyTo(Extent target){
  BlockTransformExtent extent=new BlockTransformExtent(original,transform,worldData.getBlockRegistry());
  ForwardExtentCopy copy=new ForwardExtentCopy(extent,original.getRegion(),original.getOrigin(),target,original.getOrigin());
  copy.setTransform(transform);
  return copy;
}

@CallerSensitive public Class<?> forClass(){
  if (cl == null) {
    return null;
  }
  requireInitialized();
  if (System.getSecurityManager() != null) {
    Class<?> caller=Reflection.getCallerClass();
    if (ReflectUtil.needsPackageAccessCheck(caller.getClassLoader(),cl.getClassLoader())) {
      ReflectUtil.checkPackageAccess(cl);
    }
  }
  return cl;
}

private void pathStyleHelper(String style,String offset){
  if (style == null) {
    return;
  }
  if (style.equals("none")) {
    strokePaint.setPathEffect(null);
    return;
  }
  StringTokenizer st=new StringTokenizer(style," ,");
  int count=st.countTokens();
  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];
  float max=0;
  float current=1f;
  int i=0;
  while (st.hasMoreTokens()) {
    intervals[i++]=current=toFloat(st.nextToken(),current);
    max+=current;
  }
  for (int start=0; i < intervals.length; i++, start++) {
    max+=intervals[i]=intervals[start];
  }
  float off=0f;
  if (offset != null) {
    try {
      off=Float.parseFloat(offset) % max;
    }
 catch (    NumberFormatException e) {
    }
  }
  strokePaint.setPathEffect(new DashPathEffect(intervals,off));
}

private float colorToAngle(int color){
  float[] colors=new float[3];
  Color.colorToHSV(color,colors);
  return (float)Math.toRadians(-colors[0]);
}

private Size parseOldBoundedSize(String token,boolean setMax){
  int semicolonIndex=token.indexOf(';');
  String sizeToken1=token.substring(4,semicolonIndex);
  String sizeToken2=token.substring(semicolonIndex + 1,token.length() - 1);
  Size size1=parseAtomicSize(sizeToken1);
  Size size2=parseAtomicSize(sizeToken2);
  if (isConstant(size1)) {
    if (size2 instanceof Sizes.ComponentSize) {
      return new BoundedSize(size2,setMax ? null : size1,setMax ? size1 : null);
    }
    throw new IllegalArgumentException("Bounded sizes must not be both constants.");
  }
  if (isConstant(size2)) {
    return new BoundedSize(size1,setMax ? null : size2,setMax ? size2 : null);
  }
  throw new IllegalArgumentException("Bounded sizes must not be both logical.");
}

Builder addEncodedQueryParameter(String encodedName,String encodedValue){
  if (encodedName == null)   throw new IllegalArgumentException("encodedName == null");
  if (encodedQueryNamesAndValues == null)   encodedQueryNamesAndValues=new ArrayList<>();
  encodedQueryNamesAndValues.add(canonicalize(encodedName,QUERY_COMPONENT_ENCODE_SET,true,true));
  encodedQueryNamesAndValues.add(encodedValue != null ? canonicalize(encodedValue,QUERY_COMPONENT_ENCODE_SET,true,true) : null);
  return this;
}

private static a createImageLink(String AD_Language,String name,String js_command,boolean enabled,boolean pressed){
  a img=new a("#",createImage(AD_Language,name));
  if (!pressed || !enabled)   img.setID("imgButtonLink");
 else   img.setID("imgButtonPressedLink");
  if (js_command == null)   js_command="'Submit'";
  if (js_command.length() > 0 && enabled) {
    if (js_command.startsWith("startPopup"))     img.setOnClick(js_command);
 else     img.setOnClick("SubmitForm('" + name + "', "+ js_command+ ",'toolbar');return false;");
  }
  img.setClass("ToolbarButton");
  img.setOnMouseOver("window.status='" + name + "';return true;");
  img.setOnMouseOut("window.status='';return true;");
  img.setOnBlur("this.hideFocus=false");
  return img;
}

public Namespace(PrincipalUser creator,String qualifier,PrincipalUser owner,Set<PrincipalUser> users){
  super(creator);
  setQualifier(qualifier);
  setOwner(owner);
  if (users != null && !users.isEmpty()) {
    setUsers(users);
  }
  addUser(owner);
}

public final int decrementAndGet(){
  return unsafe.getAndAddInt(this,valueOffset,-1) - 1;
}

public void update(long dt,float ratioY){
  double step=2 * Math.PI / POINTS_PER_CIRCLE;
  angle+=dt * BUBBLE_D_ANGLE;
  float fromX=startX + (float)(0.05f * Math.sin(angle));
  float toX=fromX + size;
  float fromY=this.fromY + dt * speed;
  float toY=fromY + size;
  centerY+=dt * virtualSpeed;
  getColor()[3]=(TOP_Y - centerY / TOP_Y);
  vertexBuffer.put(0,Utils.normalizeGl(0,fromX,toX));
  vertexBuffer.put(1,Utils.normalizeGl(centerY * ratioY,fromY,toY));
  for (int i=1; i <= POINTS_PER_CIRCLE; i++) {
    vertexBuffer.put(COORDS_PER_VERTEX * i,Utils.normalizeGl((float)Math.sin(-Math.PI + step * i),fromX,toX));
    vertexBuffer.put(COORDS_PER_VERTEX * i + 1,Utils.normalizeGl((float)Math.cos(-Math.PI + step * i) * ratioY,fromY,toY));
  }
  this.fromY=fromY;
}

public final void clear(){
  if (GWT.isScript()) {
    jsArray.clear();
  }
 else {
    javaArray.clear();
  }
}

void fullyLock(){
  putLock.lock();
  takeLock.lock();
}

@Override public synchronized void clear(){
  File[] files=mRootDirectory.listFiles();
  if (files != null) {
    for (    File file : files) {
      file.delete();
    }
  }
  mEntries.clear();
  VolleyLog.d("Cache cleared.");
}

private void updatePodcastPublicationDateAndLastMediaUrl(Episode episode,Podcast podcast){
  Date podcastPublicationDate=podcast.getPublicationDate();
  boolean episodePubDateIsMoreRecent=episode.getPublicationDate() != null && (podcastPublicationDate == null || podcastPublicationDate.before(episode.getPublicationDate()));
  if (episodePubDateIsMoreRecent) {
    podcast.setPublicationDate(episode.getPublicationDate());
    podcast.setLastEpisodeMediaUrl(episode.getMediaUrl());
  }
}

private void removeOurUIs(){
  for (  String uiName : UI_LIST) {
    uiDefaults.remove(uiName + "UI");
  }
}

public void makeImmutable(){
}

public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceQuery<O> dq,int k){
  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);
  if (knnq instanceof PreprocessorKNNQuery) {
    return knnq;
  }
  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);
  preproc.initialize();
  return preproc.getKNNQuery(dq,k);
}

public static SortedSet<Integer> adjustPosition(Set<Integer> positions,int startPosition,int endPosition,int adjustBy){
  SortedSet<Integer> newPositions=new TreeSet<>();
  for (  Integer entry : positions) {
    int position=entry;
    if (position < startPosition || position > endPosition) {
      newPositions.add(position);
    }
 else     if (adjustBy > 0) {
      newPositions.add(position + adjustBy);
    }
 else     if (adjustBy < 0) {
      if (position > startPosition + adjustBy && position <= startPosition) {
        ;
      }
 else {
        newPositions.add(position + adjustBy);
      }
    }
  }
  return newPositions;
}

private static void addId(final StringBuilder buf,final byte[] id){
  buf.append("\\Q");
  boolean backslash=false;
  for (  final byte b : id) {
    buf.append((char)(b & 0xFF));
    if (b == 'E' && backslash) {
      buf.append("\\\\E\\Q");
    }
 else {
      backslash=b == '\\';
    }
  }
  buf.append("\\E");
}

private ResolvedMigration createAvailableMigration(int version){
  ResolvedMigration migration=new ResolvedMigration();
  migration.setVersion(MigrationVersion.fromVersion(Integer.toString(version)));
  migration.setDescription("abc");
  migration.setScript("x");
  migration.setType(MigrationType.CQL);
  return migration;
}

public void comment(String data) throws SAXException {
  m_docIsEmpty=false;
  final int length=data.length();
  if (length > m_charsBuff.length) {
    m_charsBuff=new char[length * 2 + 1];
  }
  data.getChars(0,length,m_charsBuff,0);
  comment(m_charsBuff,0,length);
}

public boolean drawImage(Image img,AffineTransform xform,ImageObserver observer){
  if (img == null) {
    return true;
  }
  if (xform == null || xform.isIdentity()) {
    return drawImage(img,0,0,null,observer);
  }
  if (isHiDPIImage(img)) {
    final int w=img.getWidth(null);
    final int h=img.getHeight(null);
    final AffineTransform tx=new AffineTransform(transform);
    transform(xform);
    boolean result=drawHiDPIImage(img,0,0,w,h,0,0,w,h,null,observer);
    transform.setTransform(tx);
    invalidateTransform();
    return result;
  }
  try {
    return imagepipe.transformImage(this,img,xform,observer);
  }
 catch (  InvalidPipeException e) {
    try {
      revalidateAll();
      return imagepipe.transformImage(this,img,xform,observer);
    }
 catch (    InvalidPipeException e2) {
      return false;
    }
  }
 finally {
    surfaceData.markDirty();
  }
}

public void beginDisplay(DisplayEvent event) throws ModelControlException {
  super.beginDisplay(event,false);
  resetButtonState(TBL_BUTTON_DELETE);
  AgentsModel model=(AgentsModel)getModel();
  String agentType=getDisplayIDType();
  Object[] param={agentType};
  ptModel.setPageTitleText(model.getLocalizedString("agenttype." + agentType));
  ptModel.setPageTitleHelpMessage(model.getLocalizedString("agenttype." + agentType + ".help"));
  tblModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agents.title.name"),param));
  tblModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param));
  tblModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agents.summary"),param));
  tblGroupModel.setTitle(MessageFormat.format(model.getLocalizedString("table.agent.groups.title.name"),param));
  tblGroupModel.setTitleLabel(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param));
  tblGroupModel.setSummary(MessageFormat.format(model.getLocalizedString("table.agent.groups.summary"),param));
  getAgentNames();
  CCButton b=(CCButton)getChild(TBL_BUTTON_DELETE);
  b.setDisabled(true);
  b=(CCButton)getChild(TBL_BUTTON_DELETE_GROUP);
  b.setDisabled(true);
}

public void select_all(){
  Arrays.fill(sel_array,true);
}

public NvpBuilder addRaw(final String name,final String value){
  npv.put(name,value);
  return this;
}

@Override public int length(){
  return set.size();
}

public final long readUnsignedInt() throws IOException {
  mPosition+=4;
  d.readFully(w,0,4);
  return ((long)(w[3]) << 24 | (w[2] & 0xff) << 16 | (w[1] & 0xff) << 8 | (w[0] & 0xff)) & 0X00000000FFFFFFFFL;
}

public List<CountryRO> viewAddressCountryOptions(final ShoppingCart cart,final Shop shop,final String addressType){
  final List<Country> countries=addressBookFacade.getAllCountries(shop.getCode(),addressType);
  return map(countries,CountryRO.class,Country.class);
}

public void addPauseListener(AnimatorPauseListener listener){
  if (mPauseListeners == null) {
    mPauseListeners=new ArrayList<AnimatorPauseListener>();
  }
  mPauseListeners.add(listener);
}

@Override public void makeImmutable(){
  if (mutable) {
    if (attrs != null) {
      Iterator iter=attrs.iterator();
      while (iter.hasNext()) {
        Attribute attr=(Attribute)iter.next();
        attr.makeImmutable();
      }
      attrs=Collections.unmodifiableList(attrs);
    }
    if (encAttrs != null) {
      encAttrs=Collections.unmodifiableList(encAttrs);
    }
    mutable=false;
  }
}

@Override public boolean batchFinished() throws Exception {
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  Instances toFilter=getInputFormat();
  if (!isFirstBatchDone()) {
    Instances toFilterIgnoringAttributes=removeIgnored(toFilter);
    File file=getSerializedClustererFile();
    if (!file.isDirectory()) {
      ObjectInputStream ois=new ObjectInputStream(new FileInputStream(file));
      m_ActualClusterer=(Clusterer)ois.readObject();
      Instances header=null;
      try {
        header=(Instances)ois.readObject();
      }
 catch (      Exception e) {
      }
      ois.close();
      if ((header != null) && (!header.equalHeaders(toFilterIgnoringAttributes))) {
        throw new WekaException("Training header of clusterer and filter dataset don't match:\n" + header.equalHeadersMsg(toFilterIgnoringAttributes));
      }
    }
 else {
      m_ActualClusterer=AbstractClusterer.makeCopy(m_Clusterer);
      m_ActualClusterer.buildClusterer(toFilterIgnoringAttributes);
    }
    Instances filtered=new Instances(toFilter,0);
    ArrayList<String> nominal_values=new ArrayList<String>(m_ActualClusterer.numberOfClusters());
    for (int i=0; i < m_ActualClusterer.numberOfClusters(); i++) {
      nominal_values.add("cluster" + (i + 1));
    }
    filtered.insertAttributeAt(new Attribute("cluster",nominal_values),filtered.numAttributes());
    setOutputFormat(filtered);
  }
  for (int i=0; i < toFilter.numInstances(); i++) {
    convertInstance(toFilter.instance(i));
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}

public void addComponent(T component){
  components.add(component);
}

public static UiResult openUrl(URI uri){
  return openUrl(uri.toString());
}

public final void invalidateLine(int line){
  repaint(0,textArea.lineToY(line) + fm.getMaxDescent() + fm.getLeading(),getWidth(),fm.getHeight());
}

public ByteBandedRaster(SampleModel sampleModel,Point origin){
  this(sampleModel,sampleModel.createDataBuffer(),new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);
}

private void initialize(URI p_other){
  m_scheme=p_other.getScheme();
  m_userinfo=p_other.getUserinfo();
  m_host=p_other.getHost();
  m_port=p_other.getPort();
  m_path=p_other.getPath();
  m_queryString=p_other.getQueryString();
  m_fragment=p_other.getFragment();
}

public void playTogether(Collection<Animator> items){
  if (items != null && items.size() > 0) {
    mNeedsSort=true;
    Builder builder=null;
    for (    Animator anim : items) {
      if (builder == null) {
        builder=play(anim);
      }
 else {
        builder.with(anim);
      }
    }
  }
}

private E unlinkLast(){
  Node<E> l=last;
  if (l == null)   return null;
  Node<E> p=l.prev;
  E item=l.item;
  l.item=null;
  l.prev=l;
  last=p;
  if (p == null)   first=null;
 else   p.next=null;
  --count;
  notFull.signal();
  return item;
}

static boolean isRefreshNotificationRegistered(NotificationListener client,RefreshNotificationType type){
  boolean isRegistered=false;
  Map<RefreshNotificationType,Integer> notifications=null;
synchronized (refreshClients) {
    notifications=(Map<RefreshNotificationType,Integer>)refreshClients.get(client);
  }
  if (notifications != null) {
    Integer timerNotificationId=notifications.get(type);
    if (timerNotificationId != null) {
      isRegistered=true;
    }
  }
  return isRegistered;
}

private Collection<String> readProcessOutput(Process proc) throws IOException {
  BufferedReader rdr=new BufferedReader(new InputStreamReader(proc.getInputStream()));
  Collection<String> res=new ArrayList<>();
  String s;
  while ((s=rdr.readLine()) != null)   res.add(s);
  return res;
}

public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {
  fillHeader(request,response,dataModel);
  fillFooter(dataModel);
}

public void addOperand(ISpacePredicate operand){
  if (_operandsList == null)   _operandsList=new ArrayList<ISpacePredicate>();
  _operandsList.add(operand);
}

public static String decode(String s,Type t){
  if (s == null) {
    throw new IllegalArgumentException();
  }
  final int n=s.length();
  if (n == 0) {
    return s;
  }
  if (s.indexOf('%') < 0) {
    if (t == Type.QUERY_PARAM) {
      if (s.indexOf('+') < 0) {
        return s;
      }
    }
 else {
      return s;
    }
  }
 else {
    if (n < 2) {
      throw new IllegalArgumentException("Malformed percent-encoded octet at index 1");
    }
    if (s.charAt(n - 2) == '%') {
      throw new IllegalArgumentException("Malformed percent-encoded octet at index " + (n - 2));
    }
  }
  if (t == null) {
    return decode(s,n);
  }
switch (t) {
case HOST:
    return decodeHost(s,n);
case QUERY_PARAM:
  return decodeQueryParam(s,n);
default :
return decode(s,n);
}
}

public BigDecimal calculateTotalCollectedAmt(final BillReceiptInfo bri,final List<EgBillDetails> billDetList) throws InvalidAccountHeadException {
  return bri.getTotalAmount();
}

public void skip(int count) throws IOException {
  int skipCount=Math.min(limit - position,count);
  while (true) {
    position+=skipCount;
    count-=skipCount;
    if (count == 0)     break;
    skipCount=Math.min(count,capacity);
    require(skipCount);
  }
}

public void test_concurrent_modification_insert(){
  final BTree btree;
{
    IndexMetadata md=new IndexMetadata(UUID.randomUUID());
    md.setBranchingFactor(20);
    btree=BTree.create(new SimpleMemoryRawStore(),md);
    btree.insert(10,"Bryan");
    btree.insert(20,"Mike");
    btree.insert(30,"James");
  }
{
    ITupleCursor2<String> cursor=newCursor(btree);
    assertEquals(new TestTuple<String>(20,"Mike"),cursor.seek(20));
    assertEquals(new TestTuple<String>(20,"Mike"),cursor.tuple());
    btree.insert(15,"Paul");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,"Mike"),cursor.tuple());
    assertEquals(new TestTuple<String>(15,"Paul"),cursor.prior());
    assertEquals(new TestTuple<String>(15,"Paul"),cursor.tuple());
    btree.remove(15);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(15),cursor.currentKey());
    assertEquals(new TestTuple<String>(20,"Mike"),cursor.next());
    btree.remove(20);
    assertEquals(null,cursor.tuple());
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    btree.insert(25,"Allen");
    assertEquals(TestKeyBuilder.asSortKey(20),cursor.currentKey());
    assertEquals(null,cursor.tuple());
    assertEquals(new TestTuple<String>(25,"Allen"),cursor.next());
    assertEquals(new TestTuple<String>(25,"Allen"),cursor.tuple());
  }
}

public void removeAllIms(){
  ims.clear();
}

static String escapeStringForASCII(String s){
  String out="";
  char[] cArray=s.toCharArray();
  for (int i=0; i < cArray.length; i++) {
    char c=cArray[i];
    if (c > 127) {
      out+="\\U";
      String hex=Integer.toHexString(c);
      while (hex.length() < 4)       hex="0" + hex;
      out+=hex;
    }
 else     if (c == '\\') {
      out+="\\\\";
    }
 else     if (c == '\"') {
      out+="\\\"";
    }
 else     if (c == '\b') {
      out+="\\b";
    }
 else     if (c == '\n') {
      out+="\\n";
    }
 else     if (c == '\r') {
      out+="\\r";
    }
 else     if (c == '\t') {
      out+="\\t";
    }
 else {
      out+=c;
    }
  }
  return out;
}

public void copyReader(String encoding,Reader r) throws IOException {
  super.setContentEncoding(encoding);
  String s=readString(r);
  content=s.getBytes(encoding);
}

private void clearDictionaryCache(){
  Map<String,Dictionary> dictionaryCaches=surrogateKeyGen.getDictionaryCaches();
  List<Dictionary> reverseDictionaries=new ArrayList<>(dictionaryCaches.values());
  for (int i=0; i < reverseDictionaries.size(); i++) {
    Dictionary dictionary=reverseDictionaries.get(i);
    dictionary.clear();
  }
}

public static String toTypeString(Object[] arguments,int maxSize){
  if (arguments == null) {
    return "null";
  }
  StringBuilder argBuf=new StringBuilder();
  for (int i=0; i < arguments.length; i++) {
    if (maxSize != -1 && argBuf.length() > maxSize) {
      argBuf.append("...");
      break;
    }
 else {
      if (i > 0) {
        argBuf.append(", ");
      }
      argBuf.append(arguments[i] != null ? typeName(arguments[i]) : "null");
    }
  }
  return argBuf.toString();
}

public boolean renameFile(File oldFile,File newFile){
synchronized (fileCache) {
    if (oldFile.renameTo(newFile)) {
      validateFileCache();
      return true;
    }
    return false;
  }
}

public Future<?> execute(CameraCommand command){
  if (mClosed) {
    return Futures.immediateFuture(null);
  }
synchronized (mLock) {
    if (mExecutor == null) {
      mExecutor=mExecutorProvider.get();
    }
    checkNotNull(mExecutor);
    return mExecutor.submit(new CommandRunnable(command));
  }
}

public static EnumSet<KindName> kindNames(int kind){
  EnumSet<KindName> kinds=EnumSet.noneOf(KindName.class);
  if ((kind & VAL) != 0)   kinds.add(((kind & VAL) == VAR) ? KindName.VAR : KindName.VAL);
  if ((kind & MTH) != 0)   kinds.add(KindName.METHOD);
  if ((kind & TYP) != 0)   kinds.add(KindName.CLASS);
  if ((kind & PCK) != 0)   kinds.add(KindName.PACKAGE);
  return kinds;
}

public int length(){
  return text.length();
}

public static String serializeDigestResponse(Map<String,String> paramMap){
  StringBuilder sb=new StringBuilder("Digest ");
  boolean prefixComma=false;
  for (  Map.Entry<String,String> entry : paramMap.entrySet()) {
    if (!prefixComma) {
      prefixComma=true;
    }
 else {
      sb.append(", ");
    }
    sb.append(entry.getKey());
    sb.append("=");
    sb.append(entry.getValue());
  }
  return sb.toString();
}

public void populateCombos(Activity activity,final Listener listener){
  List<String> services=getServices(activity.getPackageManager());
  populateCombos(activity,services,listener);
}

protected JsonEncoding findEncoding(MediaType mediaType,MultivaluedMap<String,Object> httpHeaders){
  return JsonEncoding.UTF8;
}

static BufferedImage convertImage(BufferedImage image){
switch (image.getType()) {
case BufferedImage.TYPE_INT_ARGB_PRE:
    return image;
case BufferedImage.TYPE_4BYTE_ABGR:
  image.coerceData(true);
return image;
}
BufferedImage convertedImage=new BufferedImage(image.getWidth(),image.getHeight(),BufferedImage.TYPE_INT_ARGB_PRE);
Graphics2D g=convertedImage.createGraphics();
g.setColor(new java.awt.Color(0f,0f,0f,0f));
g.fillRect(0,0,image.getWidth(),image.getHeight());
g.drawImage(image,0,0,null);
g.dispose();
return convertedImage;
}

public long start(){
  startTime=System.currentTimeMillis();
  return startTime;
}

public void next(){
  if (iterator.hasNext()) {
    View currentView=iterator.next();
    if (isUsingDefaultListener())     currentView.setOnClickListener(null);
    if (iterator.nextIndex() < mViews.size()) {
      View nextView=mViews.get(iterator.nextIndex());
      if (isUsingDefaultListener())       nextView.setOnClickListener(listener);
      ControllerAnimator animator=getDefaultForwardAnimation();
      animator.setOldView(currentView);
      animator.setNewView(nextView);
      currentView.startAnimation(animator);
      if (iterator.nextIndex() == mViews.size() - 1)       if (hasControllerListener())       mListener.onEndReached();
    }
 else {
      if (mLoop) {
        iterator=mViews.listIterator();
        View nextView=mViews.get(0);
        if (mUseDefaultListener)         nextView.setOnClickListener(listener);
        ControllerAnimator animator=getDefaultForwardAnimation();
        animator.setOldView(currentView);
        animator.setNewView(nextView);
        currentView.startAnimation(animator);
      }
    }
  }
}

private boolean isHHSign(String str){
  boolean sign=true;
  try {
    char r=(char)Integer.parseInt(str,16);
  }
 catch (  NumberFormatException e) {
    sign=false;
  }
  return sign;
}

public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){
  String subSignature=method.getSubSignature();
  if (subSignature.equals("java.lang.Object allocateInstance(java.lang.Class)")) {
    sun_misc_Unsafe_allocateInstance(method,thisVar,returnVar,params);
    return;
  }
{
    defaultMethod(method,thisVar,returnVar,params);
    return;
  }
}

public void cacheResolvedMethod(Class clas,Class[] types,Method method){
  if (Interpreter.DEBUG)   Interpreter.debug("cacheResolvedMethod putting: " + clas + " "+ method);
  SignatureKey sk=new SignatureKey(clas,method.getName(),types);
  if (Modifier.isStatic(method.getModifiers()))   resolvedStaticMethods.put(sk,method);
 else   resolvedObjectMethods.put(sk,method);
}

public void testSetBitTopPositive(){
  byte aBytes[]={1,-128,56,100,-15,35,26};
  int aSign=1;
  int number=63;
  byte rBytes[]={0,-128,1,-128,56,100,-15,35,26};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.setBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

private void destroyBeans(Map<String,Object> viewMap,Map<String,ViewScopeContextObject> contextMap){
  ArrayList<String> removalNameList=new ArrayList<>();
  if (contextMap != null) {
    for (    Map.Entry<String,ViewScopeContextObject> entry : contextMap.entrySet()) {
      String passivationCapableId=entry.getKey();
      Contextual contextual=beanManager.getPassivationCapableBean(passivationCapableId);
      ViewScopeContextObject contextObject=entry.getValue();
      CreationalContext creationalContext=beanManager.createCreationalContext(contextual);
      contextual.destroy(viewMap.get(contextObject.getName()),creationalContext);
      removalNameList.add(contextObject.getName());
    }
    Iterator<String> removalNames=removalNameList.iterator();
    while (removalNames.hasNext()) {
      String name=removalNames.next();
      viewMap.remove(name);
    }
    contextMap.clear();
  }
}

public static void close(@CheckForNull OutputStream outputStream){
  if (outputStream == null) {
    return;
  }
  try {
    outputStream.close();
  }
 catch (  IOException e) {
  }
}

@Override public Node item(int index){
  return (nodes != null && index < nodes.size()) ? (Node)(nodes.get(index)) : null;
}

private int charToVisibleWidth(char c,@JdkConstants.FontStyle int fontType,int currentX){
  if (c == '\n') {
    return 0;
  }
  if (c == '\t') {
    return EditorUtil.nextTabStop(currentX,this) - currentX;
  }
  return EditorUtil.charWidth(c,fontType,this);
}

public static void createDir(File target) throws AdeUsageException {
  if (!target.exists() && !target.mkdir() && !target.exists()) {
    throw new AdeUsageException("Failed creating directory " + target.getPath());
  }
}

public GTSEncoder(long baseTimestamp){
  this.baseTimestamp=baseTimestamp;
  this.stream=new ByteArrayOutputStream();
  this.wrappingKey=null;
}

public static String encode(final Coordinate[] coords){
  long lastLat=0;
  long lastLng=0;
  final StringBuffer result=new StringBuffer();
  for (  final Coordinate point : coords) {
    long lat=Math.round(point.y * 1e5);
    long lng=Math.round(point.x * 1e5);
    long dLat=lat - lastLat;
    long dLng=lng - lastLng;
    encode(dLat,result);
    encode(dLng,result);
    lastLat=lat;
    lastLng=lng;
  }
  return result.toString();
}

private void extractWeightValues(List<Synapse> synapses){
  int exWeights=0;
  int inWeights=0;
  for (  Synapse s : synapses) {
    double w=s.getStrength();
    if (w > 0) {
      exWeights++;
    }
 else {
      inWeights++;
    }
  }
  weights[0]=new double[exWeights];
  weights[1]=new double[inWeights];
  exWeights=0;
  inWeights=0;
  if (weights[0].length != 0) {
    for (    Synapse s : synapses) {
      double w=s.getStrength();
      if (w > 0) {
        weights[0][exWeights++]=w;
      }
 else {
        weights[1][inWeights++]=w;
      }
    }
  }
}

@Override public void close(){
  try {
    flush();
  }
 catch (  AMLogException ale) {
    Debug.error(tableName + ":DBHandler:close/flush error: " + ale.getMessage());
  }
  if (conn != null) {
    try {
      conn.close();
    }
 catch (    SQLException ce) {
      Debug.error(tableName + ":DBHandler: Unable To Close Connection",ce);
    }
  }
  stopBufferTimer();
}

public boolean contains(List<Integer> hashes){
  Iterator<Integer> ni=hashes.iterator();
  for (int i=0; i < hashFunctions; ++i) {
    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {
      return false;
    }
  }
  return true;
}

private void ensureCapacity(int additionalData){
  if ((this.position + additionalData) > this.byteBuffer.length) {
    int newLength=(int)(this.byteBuffer.length * 1.25);
    if (newLength < (this.byteBuffer.length + additionalData)) {
      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);
    }
    if (newLength < this.byteBuffer.length) {
      newLength=this.byteBuffer.length + additionalData;
    }
    byte[] newBytes=new byte[newLength];
    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);
    this.byteBuffer=newBytes;
  }
}

public boolean isValidNumber(PhoneNumber number){
  String regionCode=getRegionCodeForNumber(number);
  return isValidNumberForRegion(number,regionCode);
}

private String trimUrl(String uri){
  if (uri == null)   return "";
  if (uri.endsWith("/"))   uri=uri.substring(0,uri.length() - 1);
  return uri;
}

public Pair<Integer,List<Long>> next(){
  try {
    classesProcessed++;
    Integer key=iterator.next();
    long pos=classificationBlockRMA2.getPos(key);
    int count=classificationBlockRMA2.getSum(key);
    classDumpReader.seek(pos);
    List<Long> list=new LinkedList<>();
    for (int i=0; i < count; i++)     list.add(classDumpReader.readLong());
    return new Pair<>(key,list);
  }
 catch (  Exception e) {
    Basic.caught(e);
    error=true;
    return null;
  }
}

public static String addAlpha(String originalColor,double alpha){
  long alphaFixed=Math.round(alpha * 255);
  String alphaHex=Long.toHexString(alphaFixed);
  if (alphaHex.length() == 1) {
    alphaHex="0" + alphaHex;
  }
  originalColor=originalColor.replace("#","#" + alphaHex);
  return originalColor;
}

public void stop(){
  server.stop(0);
}

protected DateTimeData parse(String str,int durationType) throws SchemaDateTimeException {
  int len=str.length();
  DateTimeData date=new DateTimeData(str,this);
  int start=0;
  char c=str.charAt(start++);
  if (c != 'P' && c != '-') {
    throw new SchemaDateTimeException();
  }
 else {
    date.utc=(c == '-') ? '-' : 0;
    if (c == '-' && str.charAt(start++) != 'P') {
      throw new SchemaDateTimeException();
    }
  }
  int negate=1;
  if (date.utc == '-') {
    negate=-1;
  }
  boolean designator=false;
  int endDate=indexOf(str,start,len,'T');
  if (endDate == -1) {
    endDate=len;
  }
 else   if (durationType == YEARMONTHDURATION_TYPE) {
    throw new SchemaDateTimeException();
  }
  int end=indexOf(str,start,endDate,'Y');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.year=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'M');
  if (end != -1) {
    if (durationType == DAYTIMEDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.month=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  end=indexOf(str,start,endDate,'D');
  if (end != -1) {
    if (durationType == YEARMONTHDURATION_TYPE) {
      throw new SchemaDateTimeException();
    }
    date.day=negate * parseInt(str,start,end);
    start=end + 1;
    designator=true;
  }
  if (len == endDate && start != len) {
    throw new SchemaDateTimeException();
  }
  if (len != endDate) {
    end=indexOf(str,++start,len,'H');
    if (end != -1) {
      date.hour=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'M');
    if (end != -1) {
      date.minute=negate * parseInt(str,start,end);
      start=end + 1;
      designator=true;
    }
    end=indexOf(str,start,len,'S');
    if (end != -1) {
      date.second=negate * parseSecond(str,start,end);
      start=end + 1;
      designator=true;
    }
    if (start != len || str.charAt(--start) == 'T') {
      throw new SchemaDateTimeException();
    }
  }
  if (!designator) {
    throw new SchemaDateTimeException();
  }
  return date;
}

final void copyIntoLocalState(Operand[] _localState){
  localState=new Operand[_localState.length];
  System.arraycopy(_localState,0,localState,0,_localState.length);
  setLocalKnown();
}

@SuppressWarnings("unchecked") private HashMap<String,DBObject> loadDBObjects(Class objectClass){
  HashMap<String,DBObject> objectMap=new HashMap<String,DBObject>();
  DBObject dbObject=new DBObject(this,objectClass);
  String objectToLoad=s_logger.localizeMessage("object");
  String objectsToLoad=s_logger.localizeMessage("objects");
  String sqlLoadHeaders=null;
  String sqlLoadContents=null;
  if (dbObject != null) {
    objectToLoad=dbObject.getObjectType();
    objectsToLoad=dbObject.getObjectTypes();
    sqlLoadHeaders=dbObject.getLoadHeaderSQL();
    sqlLoadContents=dbObject.getLoadContentSQL();
  }
  s_logger.log(Level.FINE,"loadDBObjects",new Object[]{objectsToLoad,getDirection()});
  PreparedStatementWrapper stmtLoadHeaders=setPreparedStatement(sqlLoadHeaders);
  PreparedStatementWrapper stmtLoadContents=setPreparedStatement(sqlLoadContents);
  int counter=0;
  if (dbObject != null) {
    String sql=dbObject.getLoadObjectSQL();
    Statement stmt=setStatement();
    ResultSet rs=executeQuery(stmt,sql);
    while (getResultSetNext(rs)) {
      String s=getResultSetString(rs,"OBJECT_NAME");
      if (!objectMap.containsKey(s)) {
        DBObject obj=new DBObject(this,objectClass,s);
        obj.populate(stmtLoadHeaders,stmtLoadContents);
        if (obj.isPopulated()) {
          objectMap.put(s.toUpperCase(),obj);
          counter++;
        }
      }
    }
    releaseResultSet(rs);
    releaseStatement(stmt);
  }
  releasePreparedStatement(stmtLoadHeaders);
  releasePreparedStatement(stmtLoadContents);
  if (counter == 1)   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectToLoad});
 else   s_logger.log(Level.FINE,"dbObjectsLoaded",new Object[]{Integer.toString(counter),objectsToLoad});
  s_logger.flush();
  return objectMap;
}

protected Object attemptReadResponse(Connection cnx) throws Exception {
  Message msg=createResponseMessage();
  if (msg != null) {
    msg.setComms(cnx.getSocket(),cnx.getInputStream(),cnx.getOutputStream(),cnx.getCommBuffer(),cnx.getStats());
    if (msg instanceof ChunkedMessage) {
      try {
        return processResponse(msg,cnx);
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
    }
 else {
      try {
        msg.recv();
      }
  finally {
        msg.unsetComms();
        processSecureBytes(cnx,msg);
      }
      return processResponse(msg,cnx);
    }
  }
 else {
    return null;
  }
}

public synchronized boolean add(E e,boolean hasNext){
  while (mInternalQueue.size() >= mMaxSize && !mClosed) {
    notifyAll();
    try {
      wait(TIMEOUT);
    }
 catch (    InterruptedException e1) {
      mClosed=true;
      ProgramState.checkAbort();
      throw new IllegalStateException("Interrupted but program not aborting?",e1);
    }
    ProgramState.checkAbort();
  }
  if (mClosed) {
    return true;
  }
  final boolean wasEmpty=mInternalQueue.isEmpty();
  mHasNext=hasNext;
  mInternalQueue.add(e);
  if (wasEmpty) {
    notifyAll();
  }
  return true;
}

public TranslatableComponent(){
}

public void addPart(int index,PduPart part){
  if (null == part) {
    throw new NullPointerException();
  }
  putPartToMaps(part);
  mParts.add(index,part);
}

public StrBuilder insert(int index,boolean value){
  validateIndex(index);
  if (value) {
    ensureCapacity(size + 4);
    System.arraycopy(buffer,index,buffer,index + 4,size - index);
    buffer[index++]='t';
    buffer[index++]='r';
    buffer[index++]='u';
    buffer[index]='e';
    size+=4;
  }
 else {
    ensureCapacity(size + 5);
    System.arraycopy(buffer,index,buffer,index + 5,size - index);
    buffer[index++]='f';
    buffer[index++]='a';
    buffer[index++]='l';
    buffer[index++]='s';
    buffer[index]='e';
    size+=5;
  }
  return this;
}

public boolean hasNatureAndWeapon(Nature nature,String weapon){
  return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.equals(this.weapon)));
}

public void dump(String infoMsg){
  storage.getOnlineMembers();
  storage.getOfflineMembers();
  storage.getOfflineAndEqualMembers();
  storage.getMyInitializingID();
  storage.getMyPersistentID();
  final StringBuilder buf=new StringBuilder(2000);
  if (infoMsg != null) {
    buf.append(infoMsg);
    buf.append(": ");
  }
  buf.append("\nMY PERSISTENT ID:\n");
  buf.append(storage.getMyPersistentID());
  buf.append("\nMY INITIALIZING ID:\n");
  buf.append(storage.getMyInitializingID());
  buf.append("\nONLINE MEMBERS:\n");
  for (  PersistentMemberID id : storage.getOnlineMembers()) {
    buf.append("\t");
    buf.append(id);
    buf.append("\n");
  }
  buf.append("\nOFFLINE MEMBERS:\n");
  for (  PersistentMemberID id : storage.getOfflineMembers()) {
    buf.append("\t");
    buf.append(id);
    buf.append("\n");
  }
  buf.append("\nOFFLINE AND EQUAL MEMBERS:\n");
  for (  PersistentMemberID id : storage.getOfflineAndEqualMembers()) {
    buf.append("\t");
    buf.append(id);
    buf.append("\n");
  }
  logger.debug(buf.toString());
}

private Node<K,V> findNode(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0)       return n;
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}

static Sort parseSort(long timestampSec,IndexState state,List<Object> fields,List<String> sortFieldNames,Map<String,FieldDef> dynamicFields){
  List<SortField> sortFields=new ArrayList<SortField>();
  for (  Object _sub : fields) {
    Request sub=(Request)_sub;
    String fieldName=sub.getString("field");
    SortField sf;
    if (sortFieldNames != null) {
      sortFieldNames.add(fieldName);
    }
    if (fieldName.equals("docid")) {
      sf=SortField.FIELD_DOC;
    }
 else     if (fieldName.equals("score")) {
      sf=SortField.FIELD_SCORE;
    }
 else {
      FieldDef fd;
      if (dynamicFields != null) {
        fd=dynamicFields.get(fieldName);
      }
 else {
        fd=null;
      }
      if (fd == null) {
        fd=state.getField(fieldName);
      }
      if (fd == null) {
        sub.fail("field","field \"" + fieldName + "\" was not registered and was not specified as a dynamicField");
        fd=null;
      }
      if (fd.valueSource != null) {
        sf=fd.valueSource.getSortField(sub.getBoolean("reverse"));
      }
 else       if (fd.valueType == FieldDef.FieldValueType.LAT_LON) {
        if (fd.fieldType.docValuesType() == DocValuesType.NONE) {
          sub.fail("field","field \"" + fieldName + "\" was not registered with sort=true");
        }
        Request sub2=sub.getStruct("origin");
        sf=LatLonDocValuesField.newDistanceSort(fieldName,sub2.getDouble("latitude"),sub2.getDouble("longitude"));
      }
 else {
        if ((fd.fieldType != null && fd.fieldType.docValuesType() == DocValuesType.NONE) || (fd.fieldType == null && fd.valueSource == null)) {
          sub.fail("field","field \"" + fieldName + "\" was not registered with sort=true");
        }
        if (fd.multiValued) {
          String selectorString=sub.getEnum("selector");
          if (fd.valueType == FieldDef.FieldValueType.ATOM) {
            SortedSetSelector.Type selector;
            if (selectorString.equals("min")) {
              selector=SortedSetSelector.Type.MIN;
            }
 else             if (selectorString.equals("max")) {
              selector=SortedSetSelector.Type.MAX;
            }
 else             if (selectorString.equals("middle_min")) {
              selector=SortedSetSelector.Type.MIDDLE_MIN;
            }
 else             if (selectorString.equals("middle_max")) {
              selector=SortedSetSelector.Type.MIDDLE_MAX;
            }
 else {
              assert false;
              selector=null;
            }
            sf=new SortedSetSortField(fieldName,sub.getBoolean("reverse"),selector);
          }
 else           if (fd.valueType == FieldDef.FieldValueType.INT) {
            sf=new SortedNumericSortField(fieldName,SortField.Type.INT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));
          }
 else           if (fd.valueType == FieldDef.FieldValueType.LONG) {
            sf=new SortedNumericSortField(fieldName,SortField.Type.LONG,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));
          }
 else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {
            sf=new SortedNumericSortField(fieldName,SortField.Type.FLOAT,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));
          }
 else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {
            sf=new SortedNumericSortField(fieldName,SortField.Type.DOUBLE,sub.getBoolean("reverse"),parseNumericSelector(sub,selectorString));
          }
 else {
            sub.fail("field","cannot sort by multiValued field \"" + fieldName + "\": type is "+ fd.valueType);
            assert false;
            sf=null;
          }
        }
 else {
          SortField.Type sortType;
          if (fd.valueType == FieldDef.FieldValueType.ATOM) {
            sortType=SortField.Type.STRING;
          }
 else           if (fd.valueType == FieldDef.FieldValueType.LONG || fd.valueType == FieldDef.FieldValueType.DATE_TIME) {
            sortType=SortField.Type.LONG;
          }
 else           if (fd.valueType == FieldDef.FieldValueType.INT) {
            sortType=SortField.Type.INT;
          }
 else           if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {
            sortType=SortField.Type.DOUBLE;
          }
 else           if (fd.valueType == FieldDef.FieldValueType.FLOAT) {
            sortType=SortField.Type.FLOAT;
          }
 else {
            sub.fail("field","cannot sort by field \"" + fieldName + "\": type is "+ fd.valueType);
            assert false;
            sortType=null;
          }
          sf=new SortField(fieldName,sortType,sub.getBoolean("reverse"));
        }
      }
      boolean hasMissingLast=sub.hasParam("missingLast");
      boolean missingLast=sub.getBoolean("missingLast");
      if (fd.valueType == FieldDef.FieldValueType.ATOM) {
        if (missingLast) {
          sf.setMissingValue(SortField.STRING_LAST);
        }
 else {
          sf.setMissingValue(SortField.STRING_FIRST);
        }
      }
 else       if (fd.valueType == FieldDef.FieldValueType.INT) {
        sf.setMissingValue(missingLast ? Integer.MAX_VALUE : Integer.MIN_VALUE);
      }
 else       if (fd.valueType == FieldDef.FieldValueType.LONG) {
        sf.setMissingValue(missingLast ? Long.MAX_VALUE : Long.MIN_VALUE);
      }
 else       if (fd.valueType == FieldDef.FieldValueType.FLOAT) {
        sf.setMissingValue(missingLast ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY);
      }
 else       if (fd.valueType == FieldDef.FieldValueType.DOUBLE) {
        sf.setMissingValue(missingLast ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
      }
 else       if (hasMissingLast) {
        sub.fail("missingLast","field=" + fieldName + ": can only specify missingLast for string and numeric field types: got SortField type "+ sf.getType());
      }
    }
    sortFields.add(sf);
  }
  return new Sort(sortFields.toArray(new SortField[sortFields.size()]));
}

public synchronized void open(){
}

@NotNull private Optional<TypeConversion> findConversionFromDbValue(@NotNull Type source,@NotNull Type target){
  if (isAssignable(target,source))   return Optional.of(TypeConversion.identity());
  Optional<TypeConversion> directConversion=typeConversionRegistry.findConversionFromDbValue(source,target);
  if (directConversion.isPresent())   return directConversion;
  Optional<TypeConversion> arrayConversion=findArrayConversion(source,target);
  if (arrayConversion.isPresent())   return arrayConversion;
  Optional<TypeConversion> optionalConversion=findOptionalConversion(source,target);
  if (optionalConversion.isPresent())   return optionalConversion;
  Optional<TypeConversion> enumConversion=findEnumConversion(target);
  if (enumConversion.isPresent())   return enumConversion;
  return Optional.empty();
}

private boolean advanceApiUpTo(TreeSet<AreaPanelInfo> sortedApiTree,AreaPanelInfo api,int time){
  AreaPanel ap=api.ap();
  TimeTree rootTt=ap.getTimeTree();
  TimeTree tt=rootTt.getEncompassigTimeTreeOrMaxTimeTreeBeforeTime(time,true);
  if (tt == null || tt.id == api.currTtId)   return false;
  sortedApiTree.remove(api);
  if (api.setTt(tt,Integer.MAX_VALUE))   sortedApiTree.add(api);
  return true;
}

@RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){
  RestWrapper restWrapper=null;
  if (bindingResult.hasErrors()) {
    BindingResultError bindingResultError=new BindingResultError();
    return bindingResultError.errorMessage(bindingResult);
  }
  try {
    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();
    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());
    jpaUserRoles.setRole(userRoles.getRole());
    Users users=new Users();
    users.setUsername(userRoles.getUsername());
    jpaUserRoles.setUsers(users);
    userRolesDAO.update(jpaUserRoles);
    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);
    LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " updated in UserRoles by User:"+ principal.getName()+ userRoles);
  }
 catch (  Exception e) {
    LOGGER.error(e);
    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);
  }
  return restWrapper;
}

private void sendRequestOption() throws IOException {
  String request="OPTIONS rtsp://" + mParameters.host + ":"+ mParameters.port+ mParameters.path+ " RTSP/1.0\r\n"+ addHeaders();
  Log.i(TAG,request.substring(0,request.indexOf("\r\n")));
  mOutputStream.write(request.getBytes("UTF-8"));
  Response.parseResponse(mBufferedReader);
}

@Override public Result doComparisonTest(final Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));
  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));
  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));
  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);
  return result;
}

public static void printThreadInfo(PrintWriter stream,String title){
  final int STACK_DEPTH=20;
  boolean contention=threadBean.isThreadContentionMonitoringEnabled();
  long[] threadIds=threadBean.getAllThreadIds();
  stream.println("Process Thread Dump: " + title);
  stream.println(threadIds.length + " active threads");
  for (  long tid : threadIds) {
    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);
    if (info == null) {
      stream.println("  Inactive");
      continue;
    }
    stream.println("Thread " + getTaskName(info.getThreadId(),info.getThreadName()) + ":");
    Thread.State state=info.getThreadState();
    stream.println("  State: " + state);
    stream.println("  Blocked count: " + info.getBlockedCount());
    stream.println("  Waited count: " + info.getWaitedCount());
    if (contention) {
      stream.println("  Blocked time: " + info.getBlockedTime());
      stream.println("  Waited time: " + info.getWaitedTime());
    }
    if (state == Thread.State.WAITING) {
      stream.println("  Waiting on " + info.getLockName());
    }
 else     if (state == Thread.State.BLOCKED) {
      stream.println("  Blocked on " + info.getLockName());
      stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));
    }
    stream.println("  Stack:");
    for (    StackTraceElement frame : info.getStackTrace()) {
      stream.println("    " + frame.toString());
    }
  }
  stream.flush();
}

public void addDelete(IResource delete){
  if (fDelete == null)   fDelete=new ArrayList<IResource>(2);
  fDelete.add(delete);
  if (fIgnoreCount == 0) {
    internalAdd(new DeleteDescription(delete));
  }
}

public static double max(final double a,final double b){
  if (a > b) {
    return a;
  }
  if (a < b) {
    return b;
  }
  if (a != b) {
    return Double.NaN;
  }
  long bits=Double.doubleToRawLongBits(a);
  if (bits == 0x8000000000000000L) {
    return b;
  }
  return a;
}

public void addContainer(ImageContainer container){
  mContainers.add(container);
}

@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeObject(approximation);
}

public void add(String methodName,List<Expression> parameters){
  chain.add(new DotExpressionItem(methodName,parameters,false));
}

public static Request request(){
  return threadLocal.get();
}

public static String createHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
  return createHash(password.toCharArray());
}

private void scheduleCommercial(int length){
  Long delay=commercialDelay.getSettingValue();
  if (delay == null) {
    setCommercialResult("Invalid delay specified.");
    clearCommercialButtonsSelection();
  }
 else {
    scheduledCommercialTime=System.currentTimeMillis() + delay * 1000;
    scheduledCommercialLength=length;
    update();
  }
}

public int hashCode(){
  long bits=Double.doubleToLongBits(m00);
  bits=bits * 31 + Double.doubleToLongBits(m01);
  bits=bits * 31 + Double.doubleToLongBits(m02);
  bits=bits * 31 + Double.doubleToLongBits(m10);
  bits=bits * 31 + Double.doubleToLongBits(m11);
  bits=bits * 31 + Double.doubleToLongBits(m12);
  return (((int)bits) ^ ((int)(bits >> 32)));
}

public void unsubscribe(AWSIotMessage message) throws AWSIotException {
  try {
    unsubscribeTopic(message);
  }
 catch (  AwsIotRetryableException e) {
    if (client.getMaxOfflineQueueSize() > 0 && unsubscribeQueue.size() < client.getMaxOfflineQueueSize()) {
      unsubscribeQueue.add(message);
    }
 else {
      LOGGER.info("Failed to unsubscribe to " + message.getTopic());
      throw new AWSIotException(e);
    }
  }
}

public static boolean isDigitalUnix(){
  return osName.indexOf("Digital Unix") > -1;
}

public void clientDisconnect(){
  try {
    OutHttpApp responseStream=_responseStream;
    if (responseStream != null) {
      responseStream.close();
    }
  }
 catch (  Exception e) {
    log.log(Level.FINER,e.toString(),e);
  }
  ConnectionTcp conn=connTcp();
  if (conn != null) {
    conn.clientDisconnect();
  }
  killKeepalive("client disconnect");
}

public boolean endsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.endsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}

private int calculateTotalHeight(float starSize,int numberOfStars,float starsSeparation,boolean padding){
  return Math.round(starSize) + (padding ? getPaddingTop() + getPaddingBottom() : 0);
}

@SuppressWarnings("purity") private static boolean isRegex(String s){
  try {
    Pattern.compile(s);
  }
 catch (  PatternSyntaxException e) {
    return false;
  }
  return true;
}

private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){
  try {
    PackageManager pm=context.getPackageManager();
    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);
    if (handlers == null || handlers.size() == 0) {
      return false;
    }
    for (    ResolveInfo resolveInfo : handlers) {
      IntentFilter filter=resolveInfo.filter;
      if (filter == null)       continue;
      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;
      if (resolveInfo.activityInfo == null)       continue;
      return true;
    }
  }
 catch (  RuntimeException e) {
    Log.e(TAG,"Runtime exception while getting specialized handlers");
  }
  return false;
}

public static void flush(){
  clearBuffer();
  try {
    out.flush();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}

private String attachFooterToText(String content) throws MessagingException, IOException {
  StringBuilder builder=new StringBuilder(content);
  ensureTrailingCarriageReturn(content,builder);
  builder.append(getFooterText());
  return builder.toString();
}

public static Sentence make(final Connective connective,final Sentence... children2){
  return make(connective,Arrays.asList(children2));
}

public final void testIsStatePreserved1(){
  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};
  EncodedKeySpec meks=new MyEncodedKeySpec(encodedKey);
  encodedKey[3]=(byte)5;
  byte[] ek=meks.getEncoded();
  assertTrue(ek[3] == (byte)4);
}

public synchronized void init(){
  init=true;
  for (  String mapName : store.getMapNames()) {
    if (mapName.startsWith("temp.")) {
      MVMap<Object,Integer> temp=openTempMap(mapName);
      store.removeMap(temp);
    }
  }
synchronized (undoLog) {
    if (undoLog.size() > 0) {
      for (      Long key : undoLog.keySet()) {
        int transactionId=getTransactionId(key);
        openTransactions.set(transactionId);
      }
    }
  }
}

public static TDoubleDoubleHashMap createCumulativeHistogram(TDoubleDoubleHashMap histogram){
  double[] keys=histogram.keys();
  Arrays.sort(keys);
  double sum=0;
  for (  double key : keys) {
    double val=histogram.get(key);
    sum+=val;
    histogram.put(key,sum);
  }
  return histogram;
}

public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){
  removeIconsForPkg(packageName,user);
  try {
    PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);
    long userSerial=mUserManager.getSerialNumberForUser(user);
    for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) {
      addIconToDBAndMemCache(app,info,userSerial);
    }
  }
 catch (  NameNotFoundException e) {
    Log.d(TAG,"Package not found",e);
    return;
  }
}

protected DateTimeData parse(String str) throws SchemaDateTimeException {
  DateTimeData date=new DateTimeData(str,this);
  int len=str.length();
  int end=indexOf(str,0,len,'T');
  int dateEnd=getDate(str,0,end,date);
  getTime(str,end + 1,len,date);
  if (dateEnd != end) {
    throw new RuntimeException(str + " is an invalid dateTime dataype value. " + "Invalid character(s) seprating date and time values.");
  }
  validateDateTime(date);
  saveUnnormalized(date);
  if (date.utc != 0 && date.utc != 'Z') {
    normalize(date);
  }
  return date;
}

void addAttributeValues(String attrName,Set values) throws SMSException {
  if (attrName != null && values != null && !values.isEmpty()) {
    Map attrs=getAttributes();
    Set origValues=(Set)attrs.get(attrName);
    Set newValues=new HashSet(values);
    if (origValues != null && !origValues.isEmpty()) {
      newValues.addAll(origValues);
    }
    Map newAttrs=new HashMap();
    newAttrs.put(attrName,newValues);
    setAttributes(newAttrs);
  }
}

public void test_parkUntil_3() throws Exception {
  CyclicBarrier barrier=new CyclicBarrier(1);
  Parker parker=new Parker(barrier,true,1000);
  Thread parkerThread=new Thread(parker);
  UNSAFE.unpark(parkerThread);
  parkerThread.start();
  parker.assertDurationIsInRange(0);
  parkerThread.join();
}

SegmentManager commitIndex(long commitIndex){
  this.commitIndex=Math.max(this.commitIndex,commitIndex);
  return this;
}

public void finishFragments(){
  for (  Fragment comment : closingFragments) {
    finishFragment(comment);
  }
  closingFragments.clear();
}

private final void _writeUTF8Segments(byte[] utf8,int offset,int totalLen) throws IOException, JsonGenerationException {
  do {
    int len=Math.min(_outputMaxContiguous,totalLen);
    _writeUTF8Segment(utf8,offset,len);
    offset+=len;
    totalLen-=len;
  }
 while (totalLen > 0);
}

public static String hexToStringNoException(final String data){
  try {
    return ConversionUtils.arrayToString(Hex.decodeHex(data.toCharArray()));
  }
 catch (  DecoderException e) {
    return "[invalid hex]";
  }
}

public Collection<Node> matchingScenariosAndExamples(final Feature feature){
  final List<ScenarioDefinition> allScenarios=feature.getScenarioDefinitions();
  final List<Node> matchingScenariosAndExamples=new LinkedList<Node>();
  for (  final ScenarioDefinition scenario : allScenarios) {
    final Set<Tag> allTagsForScenario=new HashSet<Tag>(scenario.getTags());
    allTagsForScenario.addAll(feature.getTags());
    if (scenario instanceof ScenarioOutline) {
      matchingScenariosAndExamples.addAll(matchingExamples((ScenarioOutline)scenario,allTagsForScenario));
    }
 else {
      if (matches(allTagsForScenario)) {
        matchingScenariosAndExamples.add(scenario);
      }
    }
  }
  return matchingScenariosAndExamples;
}

private boolean traverse(Tree tree,NodeRef node,int[] operatorNumber,boolean flip){
  boolean update=false;
  int nodeNum=node.getNumber();
  NodeRef parent=tree.getParent(node);
  if (operatorNumber != null) {
    operatorNumber[0]=-1;
  }
  if (parent != null && updateNode[nodeNum]) {
    final double branchRate=branchRateModel.getBranchRate(tree,node);
    final double branchTime=branchRate * (tree.getNodeHeight(parent) - tree.getNodeHeight(node));
    if (branchTime < 0.0) {
      throw new RuntimeException("Negative branch length: " + branchTime);
    }
    if (flip) {
      matrixBufferHelper.flipOffset(nodeNum);
    }
    final int eigenIndex=0;
    final int updateCount=branchUpdateCount[eigenIndex];
    matrixUpdateIndices[eigenIndex][updateCount]=matrixBufferHelper.getOffsetIndex(nodeNum);
    branchLengths[eigenIndex][updateCount]=branchTime;
    branchUpdateCount[eigenIndex]++;
    update=true;
  }
  if (!tree.isExternal(node)) {
    NodeRef child1=tree.getChild(node,0);
    final int[] op1={-1};
    final boolean update1=traverse(tree,child1,op1,flip);
    NodeRef child2=tree.getChild(node,1);
    final int[] op2={-1};
    final boolean update2=traverse(tree,child2,op2,flip);
    if (update1 || update2) {
      int x=operationCount[operationListCount] * Beagle.OPERATION_TUPLE_SIZE;
      if (flip) {
        partialBufferHelper.flipOffset(nodeNum);
      }
      final int[] operations=this.operations[operationListCount];
      operations[x]=partialBufferHelper.getOffsetIndex(nodeNum);
      if (useScaleFactors) {
        int n=nodeNum - tipCount;
        if (recomputeScaleFactors) {
          scaleBufferHelper.flipOffset(n);
          scaleBufferIndices[n]=scaleBufferHelper.getOffsetIndex(n);
          operations[x + 1]=scaleBufferIndices[n];
          operations[x + 2]=Beagle.NONE;
        }
 else {
          operations[x + 1]=Beagle.NONE;
          operations[x + 2]=scaleBufferIndices[n];
        }
      }
 else {
        if (useAutoScaling) {
          scaleBufferIndices[nodeNum - tipCount]=partialBufferHelper.getOffsetIndex(nodeNum);
        }
        operations[x + 1]=Beagle.NONE;
        operations[x + 2]=Beagle.NONE;
      }
      operations[x + 3]=partialBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 4]=matrixBufferHelper.getOffsetIndex(child1.getNumber());
      operations[x + 5]=partialBufferHelper.getOffsetIndex(child2.getNumber());
      operations[x + 6]=matrixBufferHelper.getOffsetIndex(child2.getNumber());
      operationCount[operationListCount]++;
      update=true;
    }
  }
  return update;
}

public static String rate2speed(double rate){
  return NUMBER_FORMAT0.format(rate) + " " + GENERAL_UNIT_KBPSEC;
}

public long next(){
  long result=-1l;
  if (cache < 0L && bufferElements > 0) {
    result=getNextFromBuffer();
    bufferElements--;
  }
 else {
    result=cache;
    cache=-1L;
  }
  if (!cs.isEmpty()) {
    long first=cs.first();
    if (result > first || result == -1L) {
      cs.remove(first);
      cache=result;
      result=first;
    }
  }
  if (result == -1L) {
    throw new NoSuchElementException();
  }
  Assert.check(previous < result,EC.GENERAL);
  previous=result;
  readElements++;
  return result;
}

public boolean isSetQueueSize(){
  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);
}

public void requestContactCapabilities(Set<ContactId> contacts) throws RcsServiceNotRegisteredException, RcsServiceNotAvailableException, RcsGenericException {
  if (mApi == null) {
    throw new RcsServiceNotAvailableException();
  }
  if (contacts == null || contacts.isEmpty()) {
    throw new RcsIllegalArgumentException("contacts must not be null or empty!");
  }
  try {
    mApi.requestContactCapabilities2(new ArrayList<>(contacts));
  }
 catch (  Exception e) {
    RcsIllegalArgumentException.assertException(e);
    RcsServiceNotRegisteredException.assertException(e);
    throw new RcsGenericException(e);
  }
}

private static String toString(double coeff){
  final String c=Double.toString(coeff);
  if (c.endsWith(".0")) {
    return c.substring(0,c.length() - 2);
  }
 else {
    return c;
  }
}

public static final IndexCreatedEvent createTestIndexCreationStatusWithBulkDataHit(){
  IndexCreatedEvent toReturn=new IndexCreatedEvent(UUID.randomUUID(),new Date(),new Date(),createTestIndexWithBulkDataHit(),1000,0);
  toReturn.calculateValues();
  return toReturn;
}

public boolean validate(String value,String rule){
  return (value.equalsIgnoreCase(rule));
}

public String findURIFromDoc(int owner){
  int n=m_sourceTree.size();
  for (int i=0; i < n; i++) {
    SourceTree sTree=(SourceTree)m_sourceTree.elementAt(i);
    if (owner == sTree.m_root)     return sTree.m_url;
  }
  return null;
}

static public final int random(int start,int end){
  return start + random.nextInt(end - start + 1);
}

private void pop(final String desc){
  char c=desc.charAt(0);
  if (c == '(') {
    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);
  }
 else   if (c == 'J' || c == 'D') {
    pop(2);
  }
 else {
    pop(1);
  }
}

public boolean offer(E event,int taskId) throws InterruptedException {
  assertNotDone();
  if (predicate.match(event)) {
    this.matched[taskId]=true;
    for (    boolean match : matched) {
      if (!match)       return true;
    }
    responseQueue.put(new EventHolder(event));
    done=true;
    return true;
  }
 else   return false;
}

private void push(final int type){
  if (outputStack == null) {
    outputStack=new int[10];
  }
  int n=outputStack.length;
  if (outputStackTop >= n) {
    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];
    System.arraycopy(outputStack,0,t,0,n);
    outputStack=t;
  }
  outputStack[outputStackTop++]=type;
  int top=owner.inputStackTop + outputStackTop;
  if (top > owner.outputStackMax) {
    owner.outputStackMax=top;
  }
}

private static AlgorithmParameterSpec algorithmParameterSpec(){
  final SecureRandom random=new SecureRandom();
  final byte[] bytes=new byte[CcAes.BLOCK];
  random.nextBytes(bytes);
  return new IvParameterSpec(bytes);
}

static ZoneOffsetTransitionRule readExternal(DataInput in) throws IOException {
  int data=in.readInt();
  Month month=Month.of(data >>> 28);
  int dom=((data & (63 << 22)) >>> 22) - 32;
  int dowByte=(data & (7 << 19)) >>> 19;
  DayOfWeek dow=dowByte == 0 ? null : DayOfWeek.of(dowByte);
  int timeByte=(data & (31 << 14)) >>> 14;
  TimeDefinition defn=TimeDefinition.values()[(data & (3 << 12)) >>> 12];
  int stdByte=(data & (255 << 4)) >>> 4;
  int beforeByte=(data & (3 << 2)) >>> 2;
  int afterByte=(data & 3);
  LocalTime time=(timeByte == 31 ? LocalTime.ofSecondOfDay(in.readInt()) : LocalTime.of(timeByte % 24,0));
  ZoneOffset std=(stdByte == 255 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds((stdByte - 128) * 900));
  ZoneOffset before=(beforeByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + beforeByte * 1800));
  ZoneOffset after=(afterByte == 3 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(std.getTotalSeconds() + afterByte * 1800));
  return ZoneOffsetTransitionRule.of(month,dom,dow,time,timeByte == 24,defn,std,before,after);
}

protected boolean isTokenChar(char ch){
  if (Character.isLetterOrDigit(ch))   return true;
  if (Character.isISOControl(ch))   return false;
  if (isHttpSeparator(ch))   return false;
  return true;
}

public void drawLinesAndPoints(Graphics2D g2d,ArrayList<ComparableLabel> orderedDateSet,HashMap<ComparableLabel,Integer> dataPoints,long yMaxMark){
  int sectionWidth=this.graphWidth / orderedDateSet.size();
  int xOffset=sectionWidth / 2;
  int yPrevValue;
  int yCurrentValue;
  float prevOffsetPerc;
  float currentOffsetPerc;
  g2d.setColor(this.lineColor);
  for (int i=0; i < orderedDateSet.size(); i++) {
    if (i != 0) {
      yPrevValue=dataPoints.get(orderedDateSet.get(i - 1));
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      prevOffsetPerc=yPrevValue / (float)yMaxMark;
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.drawLine(this.graphLeft + (i - 1) * sectionWidth + xOffset,this.graphBottom - Math.round(prevOffsetPerc * this.graphHeight),this.graphLeft + i * sectionWidth + xOffset,Math.round(this.graphBottom - currentOffsetPerc * this.graphHeight));
    }
 else {
      yCurrentValue=dataPoints.get(orderedDateSet.get(i));
      currentOffsetPerc=yCurrentValue / (float)yMaxMark;
      g2d.fillOval(this.graphLeft + (i) * sectionWidth + xOffset - this.pointRadius,this.graphBottom - Math.round(currentOffsetPerc * this.graphHeight) - this.pointRadius,this.pointRadius * 2,this.pointRadius * 2);
    }
  }
}

@SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){
  ElementType e=new ElementType(name,model,memberOf,flags,this);
  theElementTypes.put(name.toLowerCase(),e);
  if (memberOf == M_ROOT)   theRoot=e;
}

public static String makeLogTag(Class cls){
  return makeLogTag(cls.getSimpleName());
}

final public void println(String s){
  Writer out=this.out;
  if (out == null)   return;
  try {
    if (s == null)     out.write(_nullChars,0,_nullChars.length);
 else     out.write(s,0,s.length());
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

private static URI refragUri(URI uri,String frag) throws URISyntaxException {
  return new URI(uri.getScheme(),uri.getSchemeSpecificPart(),frag);
}

@Override public void paint(final PPaintContext ppc){
  final Paint paint=getPaint();
  if (paint != null) {
    final Graphics2D g2=ppc.getGraphics();
    final PBounds bounds=getUnionOfChildrenBounds(null);
    if (fillBackground) {
      g2.setPaint(backgroundColor);
      g2.fillRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding);
    }
    if (drawOutline) {
      g2.setPaint(lineColor);
      g2.drawRoundRect((int)bounds.getX() - outlinePadding,(int)bounds.getY() - outlinePadding,(int)bounds.getWidth() + 2 * outlinePadding,(int)bounds.getHeight() + 2 * outlinePadding,ROUNDING_WIDTH_HEIGHT,ROUNDING_WIDTH_HEIGHT);
    }
  }
}

public final synchronized byte[] toByteArray(){
  ByteArrayOutputStream baos=null;
  DataOutputStream dos=null;
  try {
    baos=new ByteArrayOutputStream(32768);
    dos=new DataOutputStream(baos);
    game.writeToStream(dos);
    dos.flush();
    return baos.toByteArray();
  }
 catch (  IOException e) {
    return null;
  }
 finally {
    if (dos != null)     try {
      dos.close();
    }
 catch (    IOException ex) {
    }
    if (baos != null)     try {
      baos.close();
    }
 catch (    IOException ex) {
    }
  }
}

public void addImport(@NotNull PsiElement importable,@NotNull PsiFile file,@Nullable PyImportElement importElement){
  myImports.add(new ImportCandidateHolder(importable,file,importElement,null));
}

protected final void drawArrowHead(Graphics2D g,int x,int y,int sgn){
  g.setStroke(Strokes.getStroke(StrokeType.SOLID,1));
  int size=diagram().arrowSize;
switch (headType) {
case CLOSED:
    Polygon p=new Polygon(new int[]{x,x + sgn * size,x + sgn * size,x},new int[]{y,y - size,y + size,y},4);
  g.fillPolygon(p);
break;
case OPEN:
g.drawLine(x,y,x + sgn * size,y - size);
g.drawLine(x,y,x + sgn * size,y + size);
break;
case ROUNDED:
int left=sgn == -1 ? x - 2 * size : x;
int top=y - size;
g.fillArc(left,top,size * 2,size * 2,90,sgn * 180);
}
}

public void classLoaderInit(DynamicClassLoader loader){
  EnvLoaderListener listener=_listenerRef.get();
  if (listener != null)   listener.classLoaderInit(loader);
}

private Object[] unmarshalParametersChecked(DeserializationChecker checker,Method method,MarshalInputStream in) throws IOException, ClassNotFoundException {
  int callID=methodCallIDCount.getAndIncrement();
  MyChecker myChecker=new MyChecker(checker,method,callID);
  in.setStreamChecker(myChecker);
  try {
    Class<?>[] types=method.getParameterTypes();
    Object[] values=new Object[types.length];
    for (int i=0; i < types.length; i++) {
      myChecker.setIndex(i);
      values[i]=unmarshalValue(types[i],in);
    }
    myChecker.end(callID);
    return values;
  }
  finally {
    in.setStreamChecker(null);
  }
}

private void loadDataFromService(){
  List<ExceptionSensorData> exData=null;
  if ((null != fromDate) && (null != toDate)) {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,fromDate,toDate,resultComparator);
  }
 else {
    exData=dataAccessService.getUngroupedExceptionOverview(template,limit,resultComparator);
  }
  exceptionSensorData.clear();
  if (null != exData) {
    exceptionSensorData.addAll(exData);
  }
}

public static String createResourceName(String resource,Locale locale,boolean removeExtension){
  String resourceName=resource;
  if (removeExtension) {
    if (resourceName.endsWith(".xml")) {
      resourceName=resourceName.replace(".xml","");
    }
 else     if (resourceName.endsWith(".properties")) {
      resourceName=resourceName.replace(".properties","");
    }
  }
  if (locale != null) {
    if (UtilValidate.isNotEmpty(locale.toString())) {
      resourceName=resourceName + "_" + locale;
    }
  }
  return resourceName;
}

public static String toString(Object[] objects,Displayable renderer){
  if (objects == null)   return "";
  StringBuffer buffer=new StringBuffer(10);
  for (int i=0; i < objects.length; i++) {
    if (i > 0)     buffer.append(", ");
    buffer.append(renderer.displayString(objects[i]));
  }
  return buffer.toString();
}

void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){
  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);
  int x=ax + gap;
  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());
  img.paintIcon(c,g,x,y);
}

public int syncQuery(String query){
  long start=System.currentTimeMillis();
  int modified=execute("update",UPDATE_COUNT_RESPONSE,query);
  log.debug("Update query took {} millis and modified {} statements",System.currentTimeMillis() - start,modified);
  return modified;
}

public static void fullReset(){
  resetRuntime();
synchronized (readProperties) {
    readProperties.clear();
  }
}

private BufferedImage toBufferedImage(final Image image){
  if (image instanceof BufferedImage) {
    return (BufferedImage)image;
  }
  if (image instanceof VolatileImage) {
    VolatileImage volatileImage=(VolatileImage)image;
    return volatileImage.getSnapshot();
  }
  GraphicsEnvironment graphicsEnvironment=GraphicsEnvironment.getLocalGraphicsEnvironment();
  GraphicsDevice graphicsDevice=graphicsEnvironment.getDefaultScreenDevice();
  GraphicsConfiguration graphicsConfiguration=graphicsDevice.getDefaultConfiguration();
  BufferedImage bufferedImage=graphicsConfiguration.createCompatibleImage(image.getWidth(null),image.getHeight(null));
  Graphics2D g=bufferedImage.createGraphics();
  g.drawImage(image,0,0,null);
  g.dispose();
  return bufferedImage;
}

public static void writeByteArrayToFile(File file,byte[] data,boolean append) throws IOException {
  OutputStream out=null;
  try {
    out=openOutputStream(file,append);
    out.write(data);
    out.close();
  }
  finally {
    IOUtils.closeQuietly(out);
  }
}

public final boolean isCancelled(){
  if (cancelled) {
    pass("cancelled",cancelled);
  }
 else {
    fail("cancelled");
  }
  return cancelled;
}

public void remove(DirectedEdge de){
  outEdges.remove(de);
}

@Override public boolean eventGeneratable(String eventName){
  if (m_listenee == null) {
    return false;
  }
  if (!eventName.equals("instance") && !eventName.equals("dataSet")) {
    return false;
  }
  if (m_listenee instanceof DataSource) {
    if (m_listenee instanceof EventConstraints) {
      EventConstraints ec=(EventConstraints)m_listenee;
      return ec.eventGeneratable(eventName);
    }
  }
  if (m_listenee instanceof TrainingSetProducer) {
    if (m_listenee instanceof EventConstraints) {
      EventConstraints ec=(EventConstraints)m_listenee;
      if (!eventName.equals("dataSet")) {
        return false;
      }
      if (!ec.eventGeneratable("trainingSet")) {
        return false;
      }
    }
  }
  if (m_listenee instanceof TestSetProducer) {
    if (m_listenee instanceof EventConstraints) {
      EventConstraints ec=(EventConstraints)m_listenee;
      if (!eventName.equals("dataSet")) {
        return false;
      }
      if (!ec.eventGeneratable("testSet")) {
        return false;
      }
    }
  }
  return true;
}

@Override protected void onMessageOnProducerThread(T msg){
  _lock.lock();
  try {
    if (_pending.isEmpty()) {
      _queue.schedule(_flushRunnable,_interval,_timeUnit);
    }
    _pending.add(msg);
  }
  finally {
    _lock.unlock();
  }
}

public Builder untilDate(Date date){
  untilDate=QUERY_DATE.format(date);
  return this;
}

private boolean isInThumbRange(float touchX,double normalizedThumbValue){
  return Math.abs(touchX - normalizedToScreen(normalizedThumbValue)) <= mThumbHalfWidth;
}

public static void cleanupAllFiles(FileSystem fileSystem,String BaseUri) throws IOException {
  try {
    if (fileSystem != null) {
      Path rootDir=new Path(BaseUri);
      FileStatus[] files=fileSystem.listStatus(rootDir);
      for (      FileStatus file : files) {
        fileSystem.delete(file.getPath(),false);
      }
    }
  }
 catch (  Exception e) {
    LOG.error("Error in deleting all files.");
  }
}

@Override public boolean canBeCollidedWith(){
  return true;
}

public void update(long duration,TimeUnit unit){
  update(unit.toNanos(duration));
}

public FileInputStream openRead() throws FileNotFoundException {
  if (mBackupName.exists()) {
    mBaseName.delete();
    mBackupName.renameTo(mBaseName);
  }
  return new FileInputStream(mBaseName);
}

public void submit(String queueName,DispatcherTask dispatcherTask){
synchronized (syncRoot) {
    DispatcherTaskRunner currentTaskRunner=currentTasksMap.get(queueName);
    if (currentTaskRunner == null) {
      currentTaskRunner=new DispatcherTaskRunner(queueName,dispatcherTask);
      currentTasksMap.put(queueName,currentTaskRunner);
      executorService.execute(currentTaskRunner);
    }
 else {
      enqueueNextTask(queueName,dispatcherTask);
    }
  }
}

public static Executor createTaskDistributor(){
  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));
}

public void dump(Writer writer){
  PrintWriter pw=new PrintWriter(new BufferedWriter(writer));
  pw.println("#========== Wave ==========");
  pw.println("#Type: NULL");
  pw.println("#Sample_Rate: " + (int)audioFormat.getSampleRate());
  pw.println("#Num_of_Samples: " + samples.length / 2);
  pw.println("#Num_of_Channels: " + audioFormat.getChannels());
  if (samples != null) {
    for (int i=0; i < samples.length; i+=2) {
      pw.println(WaveUtils.bytesToShort(samples[i],samples[i + 1]));
    }
  }
  pw.flush();
}

public void addFieldBuffered(VEditor editor,GridField mField){
  wrap=mField != null ? !mField.isSameLine() : false;
  if (prevEditor != null && prevField != null)   addField(prevEditor,prevField);
  prevEditor=editor;
  prevField=mField;
}

public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room(ShapeTile p_shape,int p_layer,ShapeTile p_contained_shape){
  ExpandRoomFreespaceIncomplete new_room=new ExpandRoomFreespaceIncomplete(p_shape,p_layer,p_contained_shape);
  incomplete_expansion_rooms.add(new_room);
  return new_room;
}

static double computeDesiredEllipsoidMagnitude(final PlanetModel planetModel,final double x,final double y,final double z){
  return 1.0 / Math.sqrt(x * x * planetModel.inverseAbSquared + y * y * planetModel.inverseAbSquared + z * z * planetModel.inverseCSquared);
}

public static String trim(CharSequence s){
  if (s == null) {
    return null;
  }
  Matcher m=sTrimPattern.matcher(s);
  return m.replaceAll("$1");
}

private void validateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param){
  ArgValidator.checkFieldValidIP(param.getSmisProviderIP(),"smis_provider_ip");
  ArgValidator.checkFieldNotNull(param.getSmisPortNumber(),"smis_port_number");
  ArgValidator.checkFieldRange(param.getSmisPortNumber(),1,65535,"smis_port_number");
  ArgValidator.checkFieldNotEmpty(param.getSmisUserName(),"smis_user_name");
  ArgValidator.checkFieldNotEmpty(param.getSmisPassword(),"smis_password");
}

private static NSObject parseObject(Node n) throws ParseException, IOException {
  String type=n.getNodeName();
  if (type.equals("dict")) {
    NSDictionary dict=new NSDictionary();
    List<Node> children=filterElementNodes(n.getChildNodes());
    for (int i=0; i < children.size(); i+=2) {
      Node key=children.get(i);
      Node val=children.get(i + 1);
      String keyString=getNodeTextContents(key);
      dict.put(keyString,parseObject(val));
    }
    return dict;
  }
 else   if (type.equals("array")) {
    List<Node> children=filterElementNodes(n.getChildNodes());
    NSArray array=new NSArray(children.size());
    for (int i=0; i < children.size(); i++) {
      array.setValue(i,parseObject(children.get(i)));
    }
    return array;
  }
 else   if (type.equals("true")) {
    return new NSNumber(true);
  }
 else   if (type.equals("false")) {
    return new NSNumber(false);
  }
 else   if (type.equals("integer")) {
    return new NSNumber(getNodeTextContents(n));
  }
 else   if (type.equals("real")) {
    return new NSNumber(getNodeTextContents(n));
  }
 else   if (type.equals("string")) {
    return new NSString(getNodeTextContents(n));
  }
 else   if (type.equals("data")) {
    return new NSData(getNodeTextContents(n));
  }
 else   if (type.equals("date")) {
    return new NSDate(getNodeTextContents(n));
  }
  return null;
}

public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges(final Office office,final String currencyCode,final Integer accountTypeToBeDebited,final Integer accountTypeToBeCredited,final Long loanProductId,final Long loanId,final String transactionId,final Date transactionDate,final BigDecimal totalAmount,final Boolean isReversal,final List<ChargePaymentDTO> chargePaymentDTOs){
  GLAccount receivableAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeDebited,null);
  final Map<GLAccount,BigDecimal> creditDetailsMap=new LinkedHashMap<>();
  for (  final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs) {
    final Long chargeId=chargePaymentDTO.getChargeId();
    final GLAccount chargeSpecificAccount=getLinkedGLAccountForLoanCharges(loanProductId,accountTypeToBeCredited,chargeId);
    BigDecimal chargeSpecificAmount=chargePaymentDTO.getAmount();
    if (creditDetailsMap.containsKey(chargeSpecificAccount)) {
      final BigDecimal existingAmount=creditDetailsMap.get(chargeSpecificAccount);
      chargeSpecificAmount=chargeSpecificAmount.add(existingAmount);
    }
    creditDetailsMap.put(chargeSpecificAccount,chargeSpecificAmount);
  }
  BigDecimal totalCreditedAmount=BigDecimal.ZERO;
  for (  final Map.Entry<GLAccount,BigDecimal> entry : creditDetailsMap.entrySet()) {
    final GLAccount account=entry.getKey();
    final BigDecimal amount=entry.getValue();
    totalCreditedAmount=totalCreditedAmount.add(amount);
    if (isReversal) {
      createDebitJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
    }
 else {
      createDebitJournalEntryForLoan(office,currencyCode,receivableAccount,loanId,transactionId,transactionDate,amount);
      createCreditJournalEntryForLoan(office,currencyCode,account,loanId,transactionId,transactionDate,amount);
    }
  }
  if (totalAmount.compareTo(totalCreditedAmount) != 0) {
    throw new PlatformDataIntegrityException("Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction","Meltdown in advanced accounting...sum of all charges is not equal to the fee charge for a transaction",totalCreditedAmount,totalAmount);
  }
}

private ArtLocateResult calculate_next_trace(boolean p_layer_changed,boolean p_at_fanout_end){
  Collection<PlaPointFloat> corner_list=new LinkedList<PlaPointFloat>();
  corner_list.add(current_from_point);
  if (!p_at_fanout_end) {
    PlaPointFloat adjusted_start_corner=adjust_start_corner();
    if (adjusted_start_corner != current_from_point) {
      PlaPointFloat add_corner=calculate_additional_corner(current_from_point,adjusted_start_corner,true,angle_restriction);
      corner_list.add(add_corner);
      corner_list.add(adjusted_start_corner);
      previous_from_point=current_from_point;
      current_from_point=adjusted_start_corner;
    }
  }
  PlaPointFloat prev_corner=current_from_point;
  for (int c_limit=0; c_limit < 1000; c_limit++) {
    Collection<PlaPointFloat> next_corners=calculate_next_trace_corners();
    if (next_corners.isEmpty())     break;
    for (    PlaPointFloat curr_next_corner : next_corners) {
      if (curr_next_corner == prev_corner)       continue;
      corner_list.add(curr_next_corner);
      previous_from_point=current_from_point;
      current_from_point=curr_next_corner;
      prev_corner=curr_next_corner;
    }
  }
  int next_layer=current_trace_layer;
  if (p_layer_changed) {
    current_from_door_index=current_target_door_index + 1;
    ExpandRoomComplete next_room=backtrack_array[current_from_door_index].next_room;
    if (next_room != null) {
      next_layer=next_room.get_layer();
    }
  }
  PlaPointIntAlist rounded_corner_list=new PlaPointIntAlist(corner_list.size());
  PlaPointInt prev_point=null;
  for (  PlaPointFloat a_float : corner_list) {
    PlaPointInt curr_point=a_float.round();
    if (curr_point.equals(prev_point))     continue;
    rounded_corner_list.add(curr_point);
    prev_point=curr_point;
  }
  ArtLocateResult result=new ArtLocateResult(rounded_corner_list,current_trace_layer);
  current_trace_layer=next_layer;
  return result;
}

public static <ValueT>ByteBuffer toByteBuffer(ValueT obj) throws IOException {
  byte[] bytes=null;
  ByteArrayOutputStream bos=null;
  ObjectOutputStream oos=null;
  try {
    bos=new ByteArrayOutputStream();
    oos=new ObjectOutputStream(bos);
    oos.writeObject(obj);
    oos.flush();
    bytes=bos.toByteArray();
  }
  finally {
    if (oos != null) {
      oos.close();
    }
    if (bos != null) {
      bos.close();
    }
  }
  return ByteBuffer.wrap(bytes);
}

void writeBytes(ChannelHandlerContext ctx,ByteBuf bytes);

@Override protected Sensor createNewSensor(String systemName,String userName){
  if (log.isDebugEnabled()) {
    log.debug("createNewSensor " + systemName + " "+ userName);
  }
  Sensor s;
  String sName=SerialAddress.normalizeSystemName(systemName);
  if (sName.equals("")) {
    log.error("Invalid Sensor system name - " + systemName);
    return null;
  }
  s=getBySystemName(sName);
  if (s != null) {
    log.error("Sensor with this name already exists - " + systemName);
    return null;
  }
  String altName=SerialAddress.convertSystemNameToAlternate(sName);
  s=getBySystemName(altName);
  if (s != null) {
    log.error("Sensor with name '" + systemName + "' already exists as '"+ altName+ "'");
    return null;
  }
  int bit=SerialAddress.getBitFromSystemName(sName);
  if ((bit <= 0) || (bit >= SENSORSPERNODE)) {
    log.error("Sensor bit number, " + Integer.toString(bit) + ", is outside the supported range, 1-"+ Integer.toString(SENSORSPERNODE - 1));
    return null;
  }
  if (userName == null) {
    s=new SerialSensor(sName);
  }
 else {
    s=new SerialSensor(sName,userName);
  }
  SerialNode node=SerialAddress.getNodeFromSystemName(sName);
  if (node == null) {
    log.warn("Sensor " + sName + " refers to an undefined Serial Node.");
    return s;
  }
  node.registerSensor(s,bit);
  if (log.isDebugEnabled()) {
    log.debug("register " + s.getSystemName() + " in node "+ node);
  }
  return s;
}

private double[] max(double[] distances1,double[] distances2){
  if (distances1.length != distances2.length) {
    throw new RuntimeException("different lengths!");
  }
  double[] result=new double[distances1.length];
  for (int i=0; i < distances1.length; i++) {
    result[i]=Math.max(distances1[i],distances2[i]);
  }
  return result;
}

public void fill_shape(PlaPointFloat[] p_points,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  Graphics2D g2=(Graphics2D)p_g;
  Polygon draw_polygon=new Polygon();
  for (int index=0; index < p_points.length; index++) {
    Point2D curr_corner=coordinate_transform.board_to_screen(p_points[index]);
    draw_polygon.addPoint((int)Math.round(curr_corner.getX()),(int)Math.round(curr_corner.getY()));
  }
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_polygon);
}

public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {
  if (jpegStream == null || exifOutStream == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=getExifWriterStream(exifOutStream);
  doExifStreamIO(jpegStream,s);
  s.flush();
}

private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {
  int codewordPosition=1 + bits.getByteOffset();
  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);
  int count;
  if (d1 == 0) {
    count=bits.available() / 8;
  }
 else   if (d1 < 250) {
    count=d1;
  }
 else {
    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);
  }
  if (count < 0) {
    throw FormatException.getFormatInstance();
  }
  byte[] bytes=new byte[count];
  for (int i=0; i < count; i++) {
    if (bits.available() < 8) {
      throw FormatException.getFormatInstance();
    }
    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);
  }
  byteSegments.add(bytes);
  try {
    result.append(new String(bytes,"ISO8859_1"));
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException("Platform does not support required encoding: " + uee);
  }
}

public void goToCurrentDay(){
  int monthDifference=FlexibleCalendarHelper.getMonthDifference(displayYear,displayMonth);
  Calendar cal=Calendar.getInstance();
  selectedDateItem.setDay(cal.get(Calendar.DAY_OF_MONTH));
  selectedDateItem.setMonth(cal.get(Calendar.MONTH));
  selectedDateItem.setYear(cal.get(Calendar.YEAR));
  if (disableAutoDateSelection) {
    this.userSelectedItem=selectedDateItem.clone();
  }
  if (monthDifference != 0) {
    resetAdapters=true;
    if (monthDifference < 0) {
      monthInfPagerAdapter.setFakeCount(lastPosition);
      monthInfPagerAdapter.notifyDataSetChanged();
    }
    shouldOverrideComputedDate=true;
    moveToPosition(monthDifference);
  }
 else {
    FlexibleCalendarGridAdapter currentlyVisibleAdapter=monthViewPagerAdapter.getMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER);
    currentlyVisibleAdapter.notifyDataSetChanged();
  }
}

public static byte[] toIPv4AddressBytes(int ipAddress){
  return new byte[]{(byte)(ipAddress >>> 24),(byte)(ipAddress >>> 16),(byte)(ipAddress >>> 8),(byte)ipAddress};
}

public boolean isValidTemplate(){
  return isValidTemplate(template);
}

public Object take() throws InterruptedException, ForceReattemptException {
  throw new UnsupportedOperationException();
}

@SuppressWarnings({"SuspiciousNameCombination"}) public static double normalCdf(double y){
  double f, h;
  int j;
  double dcphi, x, z, f1, f2, f3, f4, f5;
  x=y;
  if (Math.abs(x) > 15.) {
    dcphi=0.;
  }
 else {
    j=(int)Math.floor(Math.abs(x) * 16. + .5);
    z=j * .0625;
    h=Math.abs(x) - z;
    f=r[j];
    f1=f * z - 1;
    f2=f + z * f1;
    f3=f1 * 2. + z * f2;
    f4=f2 * 3 + z * f3;
    f5=f3 * 4 + z * f4;
    dcphi=f + h * (f1 * 120. + h * (f2 * 60. + h * (f3 * 20. + h * (f4 * 5. + h * f5)))) / 120.;
    dcphi=dcphi * .3989422804014326779 * Math.exp(x * -.5 * x);
  }
  if (x < 0.) {
    return dcphi;
  }
 else {
    return (1.0 - dcphi);
  }
}

private void destroy(){
  if (log.isLoggable(Level.FINEST)) {
    log.finest(this + " destroying connection");
  }
  try {
    _socket.forceShutdown();
  }
 catch (  Throwable e) {
  }
  try {
    closeConnection();
  }
 catch (  Throwable e) {
    log.log(Level.FINER,e.toString(),e);
  }
  _port.removeConnection(this);
}

int atom() throws RESyntaxException {
  int ret=node(RE.OP_ATOM,0);
  int lenAtom=0;
  atomLoop:   while (idx < len) {
    if ((idx + 1) < len) {
      char c=pattern.charAt(idx + 1);
      if (pattern.charAt(idx) == '\\') {
        int idxEscape=idx;
        escape();
        if (idx < len) {
          c=pattern.charAt(idx);
        }
        idx=idxEscape;
      }
switch (c) {
case '{':
case '?':
case '*':
case '+':
        if (lenAtom != 0) {
          break atomLoop;
        }
    }
  }
switch (pattern.charAt(idx)) {
case ']':
case '^':
case '$':
case '.':
case '[':
case '(':
case ')':
case '|':
    break atomLoop;
case '{':
case '?':
case '*':
case '+':
  if (lenAtom == 0) {
    syntaxError("Missing operand to closure");
  }
break atomLoop;
case '\\':
{
int idxBeforeEscape=idx;
int c=escape();
if ((c & ESC_MASK) == ESC_MASK) {
  idx=idxBeforeEscape;
  break atomLoop;
}
emit((char)c);
lenAtom++;
}
break;
default :
emit(pattern.charAt(idx++));
lenAtom++;
break;
}
}
if (lenAtom == 0) {
internalError();
}
instruction[ret + RE.offsetOpdata]=(char)lenAtom;
return ret;
}

@Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,int pass){
  int visibleRow=state.getVisibleSeriesIndex(row);
  if (visibleRow < 0) {
    return;
  }
  Number dataValue=dataset.getValue(row,column);
  if (dataValue == null) {
    return;
  }
  double value=dataValue.doubleValue();
  PlotOrientation orientation=plot.getOrientation();
  double barW0=calculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);
  RectangleEdge edge=plot.getRangeAxisEdge();
  double barL=rangeAxis.valueToJava2D(value,dataArea,edge);
  Line2D line;
  double x, y;
  if (orientation.isHorizontal()) {
    x=barL;
    y=barW0 + state.getBarWidth() / 2.0;
    line=new Line2D.Double(barL,barW0,barL,barW0 + state.getBarWidth());
  }
 else {
    x=barW0 + state.getBarWidth() / 2.0;
    y=barL;
    line=new Line2D.Double(barW0,barL,barW0 + state.getBarWidth(),barL);
  }
  if (state.getElementHinting()) {
    beginElementGroup(g2,dataset.getRowKey(row),dataset.getColumnKey(column));
  }
  Stroke itemStroke=getItemStroke(row,column);
  Paint itemPaint=getItemPaint(row,column);
  g2.setStroke(itemStroke);
  g2.setPaint(itemPaint);
  g2.draw(line);
  if (state.getElementHinting()) {
    endElementGroup(g2);
  }
  CategoryItemLabelGenerator generator=getItemLabelGenerator(row,column);
  if (generator != null && isItemLabelVisible(row,column)) {
    drawItemLabel(g2,orientation,dataset,row,column,x,y,(value < 0.0));
  }
  int datasetIndex=plot.indexOf(dataset);
  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL,orientation);
  EntityCollection entities=state.getEntityCollection();
  if (entities != null) {
    addItemEntity(entities,dataset,row,column,line.getBounds());
  }
}

public static <T>UnaryOperator<List<T>> from(Collection<String> commandLineUdids,Function<T,ICloud.MBSBackup> mbsBackup,Function<ICloud.MBSBackup,String> formatter,Printer out,InputStream in){
  return commandLineUdids.isEmpty() ? new User(mbsBackup,out,in,formatter) : new Udid(mbsBackup,out,in,new ArrayList<>(commandLineUdids));
}

public boolean isNetworkConnected(){
  ConnectivityManager connectivityManager=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo();
  return networkInfo != null && networkInfo.isConnectedOrConnecting();
}

@Override public void onTabClosing(long time,int id){
  reset();
  forceAnimationToFinish();
  TabModel model=mTabModelSelector.getModelForTabId(id);
  if (model != null) {
    mClosedTab=createLayoutTab(id,model.isIncognito(),NO_CLOSE_BUTTON,NO_TITLE);
    mClosedTab.setBorderAlpha(0.0f);
    mLayoutTabs=new LayoutTab[]{mClosedTab};
    updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id)));
  }
 else {
    mLayoutTabs=null;
    mClosedTab=null;
  }
  super.onTabClosing(time,id);
}

public void put(String name,String supported,String authScheme,String level,boolean isDefault){
  SAMLv2AuthContext c=new SAMLv2AuthContext();
  c.name=name;
  c.supported=supported;
  if (authScheme.length() != 0 && authScheme != null) {
    int index=authScheme.lastIndexOf("=");
    c.value=authScheme.substring(index + 1);
    c.key=authScheme.substring(0,index);
  }
 else {
    c.value="";
    c.key="";
  }
  c.level=level;
  c.isDefault=isDefault;
  collections.put(name,c);
}

public final void close(LsServerPacket closePacket,boolean forced){
synchronized (guard) {
    if (isWriteDisabled()) {
      return;
    }
    log.debug("sending packet: " + closePacket + " and closing connection after that.");
    pendingClose=true;
    isForcedClosing=forced;
    sendMsgQueue.clear();
    sendMsgQueue.addLast(closePacket);
    enableWriteInterest();
  }
}

private void replaceCollapsedEdges(){
  List newEdges=new ArrayList();
  for (Iterator it=edgeList.iterator(); it.hasNext(); ) {
    Edge e=(Edge)it.next();
    if (e.isCollapsed()) {
      it.remove();
      newEdges.add(e.getCollapsedEdge());
    }
  }
  edgeList.addAll(newEdges);
}

private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){
  int i;
  if (av == null) {
switch (b[v] & 0xFF) {
case 'e':
      return v + 5;
case '@':
    return readAnnotationValues(v + 3,buf,true,null);
case '[':
  return readAnnotationValues(v + 1,buf,false,null);
default :
return v + 3;
}
}
switch (b[v++] & 0xFF) {
case 'I':
case 'J':
case 'F':
case 'D':
av.visit(name,readConst(readUnsignedShort(v),buf));
v+=2;
break;
case 'B':
av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));
v+=2;
break;
case 'Z':
av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);
v+=2;
break;
case 'S':
av.visit(name,(short)readInt(items[readUnsignedShort(v)]));
v+=2;
break;
case 'C':
av.visit(name,(char)readInt(items[readUnsignedShort(v)]));
v+=2;
break;
case 's':
av.visit(name,readUTF8(v,buf));
v+=2;
break;
case 'e':
av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));
v+=4;
break;
case 'c':
av.visit(name,Type.getType(readUTF8(v,buf)));
v+=2;
break;
case '@':
v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));
break;
case '[':
int size=readUnsignedShort(v);
v+=2;
if (size == 0) {
return readAnnotationValues(v - 2,buf,false,av.visitArray(name));
}
switch (this.b[v++] & 0xFF) {
case 'B':
byte[] bv=new byte[size];
for (i=0; i < size; i++) {
bv[i]=(byte)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,bv);
--v;
break;
case 'Z':
boolean[] zv=new boolean[size];
for (i=0; i < size; i++) {
zv[i]=readInt(items[readUnsignedShort(v)]) != 0;
v+=3;
}
av.visit(name,zv);
--v;
break;
case 'S':
short[] sv=new short[size];
for (i=0; i < size; i++) {
sv[i]=(short)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,sv);
--v;
break;
case 'C':
char[] cv=new char[size];
for (i=0; i < size; i++) {
cv[i]=(char)readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,cv);
--v;
break;
case 'I':
int[] iv=new int[size];
for (i=0; i < size; i++) {
iv[i]=readInt(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,iv);
--v;
break;
case 'J':
long[] lv=new long[size];
for (i=0; i < size; i++) {
lv[i]=readLong(items[readUnsignedShort(v)]);
v+=3;
}
av.visit(name,lv);
--v;
break;
case 'F':
float[] fv=new float[size];
for (i=0; i < size; i++) {
fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));
v+=3;
}
av.visit(name,fv);
--v;
break;
case 'D':
double[] dv=new double[size];
for (i=0; i < size; i++) {
dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));
v+=3;
}
av.visit(name,dv);
--v;
break;
default :
v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));
}
}
return v;
}

public void timingEvent(float fraction){
  current.x=(int)(start.x + (end.x - start.x) * fraction);
  current.y=(int)(start.y + (end.y - start.y) * fraction);
  track.setCarPosition(current);
}

public SeaGlassTitlePane(JRootPane rootPane,SeaGlassRootPaneUI ui){
  this.rootPane=rootPane;
  this.rootPaneUI=ui;
  rootParent=(RootPaneContainer)rootPane.getParent();
  installTitlePane();
}

public String toString(){
  StringBuilder s=new StringBuilder();
  for (  Item item : this)   s.append(item + " ");
  return s.toString();
}

public void writeLong(long value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.writeLong(value);
}

static public URL findContainerXML(String _containerName){
  URL _containerNameURL=null;
  String _containerNameFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + _containerName+ ".xml";
  _containerNameURL=getResourceURL(_containerNameFilePath);
  if (_containerNameURL != null) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.info("Loaded the container xml file < " + _containerNameURL + " >.");
    }
  }
  return _containerNameURL;
}

public static List<String> expandWildcards(Iterable<File> dirs,List<String> names,Backend forBackend){
  List<String> result=new ArrayList<String>(names.size());
  for (  String name : names) {
    expandWildcard(result,dirs,name,forBackend);
  }
  return result;
}

public static Charset forName(String charsetName){
  return forName(charsetName,null);
}

public NSNumber(int i){
  doubleValue=longValue=i;
  type=INTEGER;
}

public static void dump(String message,StackTraceElement[] stackTrace){
  dump(message,Arrays.asList(stackTrace));
}

public void execQuery(String sql,ExecQueryCallbackFunctionIF aListener) throws GenericEntityException {
  if (_connection == null) {
    getConnection();
  }
  try {
    if (Debug.verboseOn())     Debug.logVerbose("[SQLProcessor.execQuery]: " + sql,module);
    executeQuery(sql);
    boolean keepGoing=true;
    while (keepGoing && _rs.next()) {
      keepGoing=aListener.processNextRow(_rs);
    }
    if (_manualTX) {
      _connection.commit();
    }
  }
 catch (  SQLException sqle) {
    Debug.logWarning("[SQLProcessor.execQuery]: SQL Exception while executing the following:\n" + sql + "\nError was:",module);
    Debug.logWarning(sqle.getMessage(),module);
    throw new GenericEntityException("SQL Exception while executing the following:" + _sql,sqle);
  }
 finally {
    close();
  }
}

private Name cacheName(String sig){
  StringBuilder buf=new StringBuilder();
  if (sig.startsWith("[")) {
    buf=buf.append("array");
    while (sig.startsWith("[")) {
      buf=buf.append(target.syntheticNameChar());
      sig=sig.substring(1);
    }
    if (sig.startsWith("L")) {
      sig=sig.substring(0,sig.length() - 1);
    }
  }
 else {
    buf=buf.append("class" + target.syntheticNameChar());
  }
  buf=buf.append(sig.replace('.',target.syntheticNameChar()));
  return names.fromString(buf.toString());
}

@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.CONDITIONAL_ROUTE__CONDITION:
    return CONDITION_EDEFAULT == null ? condition != null : !CONDITION_EDEFAULT.equals(condition);
case EipPackage.CONDITIONAL_ROUTE__CHANNEL:
  return channel != null;
}
return super.eIsSet(featureID);
}

public static native String mapLibraryName(String libname);

public Matcher next() throws IOException {
  readahead();
  if (matches == null) {
    throw new NoSuchElementException();
  }
  Matcher matcher=matches.next();
  if (discard) {
    Pattern pattern=matcher.pattern();
    for (int n=0; n < patterns.length; n++) {
      if (patterns[n] == pattern) {
        patterns[n]=null;
        break;
      }
    }
  }
  return matcher;
}

@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){
  Dimension dimension=dimensionSetting.get();
  updateLayerManager(dimension);
  processRecycleQueue();
  Fragment fragment;
  while ((fragment=loadingQueue.poll()) != null) {
    loadFragment(dimension,fragment);
    dimension=dimensionSetting.get();
    updateLayerManager(dimension);
    processRecycleQueue();
  }
  layerManager.clearInvalidatedLayers();
}

default FieldDeclaration addPrivateField(Class<?> typeClass,String name){
  return addField(typeClass,name,Modifier.PRIVATE);
}

void ReconstructPrivateSubrs(int Font,IndexBaseItem[] fdPrivateBase,OffsetItem[] fdSubrs){
  for (int i=0; i < fonts[Font].fdprivateLengths.length; i++) {
    if (fdSubrs[i] != null && fonts[Font].PrivateSubrsOffset[i] >= 0) {
      OutputList.addLast(new SubrMarkerItem(fdSubrs[i],fdPrivateBase[i]));
      if (NewLSubrsIndex[i] != null)       OutputList.addLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.createSource(NewLSubrsIndex[i])),0,NewLSubrsIndex[i].length));
    }
  }
}

public boolean matchChomp(String seq){
  if (matches(seq)) {
    pos+=seq.length();
    return true;
  }
 else {
    return false;
  }
}

public void initGL(){
  mEglCore=new EglCore(null,EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3);
  mWindowSurface=new WindowSurface(mEglCore,mSurfaceTexture);
  mWindowSurface.makeCurrent();
  mRecordSurface=new WindowSurface(mEglCore,mMediaRecorder.getSurface(),false);
  initGLComponents();
}

void clear(){
  if (mViewTypeCount == 1) {
    final ArrayList<View> scrap=mCurrentScrap;
    final int scrapCount=scrap.size();
    for (int i=0; i < scrapCount; i++) {
      removeDetachedView(scrap.remove(scrapCount - 1 - i),false);
    }
  }
 else {
    final int typeCount=mViewTypeCount;
    for (int i=0; i < typeCount; i++) {
      final ArrayList<View> scrap=mScrapViews[i];
      final int scrapCount=scrap.size();
      for (int j=0; j < scrapCount; j++) {
        removeDetachedView(scrap.remove(scrapCount - 1 - j),false);
      }
    }
  }
  if (mTransientStateViews != null) {
    mTransientStateViews.clear();
  }
}

protected void contributeTokenRequestParameters(final QueryString bodyParameters){
}

public int read(char cbuf[],int off,int len){
  int k;
  if (position >= document.getLength()) {
    return -1;
  }
  k=len;
  if ((position + k) >= document.getLength())   k=document.getLength() - (int)position;
  if (off + k >= cbuf.length)   k=cbuf.length - off;
  try {
    document.getText((int)position,k,segment);
    position+=k;
    System.arraycopy(segment.array,segment.offset,cbuf,off,k);
    return k;
  }
 catch (  BadLocationException ble) {
    return -1;
  }
}

Builder addLenient(String line){
  int index=line.indexOf(":",1);
  if (index != -1) {
    return addLenient(line.substring(0,index),line.substring(index + 1));
  }
 else   if (line.startsWith(":")) {
    return addLenient("",line.substring(1));
  }
 else {
    return addLenient("",line);
  }
}

public static void mergeNodeChildren(TreeNode node){
  DefaultMutableTreeNode masterNode=(DefaultMutableTreeNode)node;
  for (int i=0; i < masterNode.getChildCount(); i++) {
    DefaultMutableTreeNode child=(DefaultMutableTreeNode)masterNode.getChildAt(i);
    if (!child.isLeaf()) {
      MergeHelpUtilities.mergeNodeChildren(DEFAULT_MERGE_TYPE,child);
    }
  }
}

public void testNegateNegative(){
  String a="-92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=41;
  String c="92948782094488478231212478987482988429808779810457634781384756794987";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals("incorrect value",cNumber,aNumber.negate());
}

private static Object createAndBindItem(ParameterAccess parameters,Class<?> itemType){
  try {
    Object value=itemType.newInstance();
    bind(value,parameters);
    return value;
  }
 catch (  InstantiationException|IllegalAccessException e) {
    throw new BindingException("Failed to instantiate new instance of " + itemType,e);
  }
}

public SimpleSetupPanel(Experiment exp){
  this();
  setExperiment(exp);
}

public static void addListener(Listener listener){
  listeners.addLast(listener);
}

private static void processArgs(String[] args){
  for (int i=0; i < args.length; i++) {
    String arg=args[i];
    if (arg.equals("-o")) {
      outputDir=args[++i];
    }
 else     if (arg.equals("-spec")) {
      unicodeData=args[++i];
    }
 else     if (arg.equals("-language")) {
      language=args[++i];
    }
 else     if (arg.equals("-country")) {
      country=args[++i];
    }
 else     if (arg.equals("-valiant")) {
      valiant=args[++i];
    }
 else {
      usage();
    }
  }
  localeName=getLocaleName();
}

public static boolean isZoningRequired(DbClient dbClient,VirtualArray nh){
  if (nh.getAutoSanZoning() == false) {
    _log.info("SAN Zoning is not enabled for Neighborhood: " + nh.getLabel());
    return false;
  }
  return NetworkUtil.areNetworkSystemDiscovered(dbClient);
}

private void initXMLTree() throws Exception {
  updateFilteredTokens();
  ArrayList elements=getElements(getFilteredTokens());
  if (elements.size() > 1) {
    throw new Exception("More than one root elements encountered");
  }
  setRootElement((XMLElement)elements.get(0));
}

public boolean hasNameValue(String name){
  return nameValueMap.containsKey(name.toLowerCase());
}

public boolean startsWith(CharSeq prefix){
  return str.startsWith(prefix.str);
}

public boolean containsWindow(Class<?> windowClass){
  return (getWindow(windowClass) != null);
}

protected final void firePropertyChange(String propertyName,long oldValue,long newValue){
  firePropertyChange(propertyName,Long.valueOf(oldValue),Long.valueOf(newValue));
}

public void fadeToLayer(int index){
  mTransitionState=TRANSITION_STARTING;
  Arrays.fill(mIsLayerOn,false);
  mIsLayerOn[index]=true;
  invalidateSelf();
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

public static int hashCode(boolean[] field){
  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);
}

public AbstractSurfaceObject(AbstractSurfaceObject source){
  super(source);
  this.visible=source.visible;
  this.uniqueId=nextUniqueId();
  this.lastModifiedTime=System.currentTimeMillis();
  this.enableBatchPicking=source.enableBatchPicking;
}

public SootMethodAndClass parseSootMethodString(String parseString){
  if (!parseString.startsWith("<") || !parseString.endsWith(">")) {
    throw new IllegalArgumentException("Illegal format of " + parseString + " (should use soot method representation)");
  }
  String name="";
  String className="";
  String returnType="";
  Pattern pattern=Pattern.compile("<(.*?):");
  Matcher matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    className=matcher.group(1);
  }
  pattern=Pattern.compile(": (.*?) ");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    returnType=matcher.group(1);
    parseString=parseString.substring(matcher.end(1));
  }
  pattern=Pattern.compile(" (.*?)\\(");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    name=matcher.group(1);
  }
  List<String> paramList=new ArrayList<String>();
  pattern=Pattern.compile("\\((.*?)\\)");
  matcher=pattern.matcher(parseString);
  if (matcher.find()) {
    String params=matcher.group(1);
    for (    String param : params.split(","))     paramList.add(param.trim());
  }
  return new SootMethodAndClass(name,className,returnType,paramList);
}

private void createNewReviewTask(TaskRepository repository,TaskData taskData) throws CoreException {
  Repository repo=AppraisePluginUtils.getGitRepoForRepository(repository);
  AppraisePluginReviewClient client;
  try {
    client=new AppraisePluginReviewClient(repository);
  }
 catch (  GitClientException e1) {
    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to initialize git client"));
  }
  String currentBranch;
  try {
    currentBranch=repo.getFullBranch();
  }
 catch (  IOException e) {
    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Error retrieving current branch",e));
  }
  if (MASTER_REF.equals(currentBranch)) {
    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot create review on master branch"));
  }
  setAttributeValue(taskData,schema.REQUESTER,repository.getUserName());
  setAttributeValue(taskData,schema.TARGET_REF,MASTER_REF);
  setAttributeValue(taskData,schema.REVIEW_REF,currentBranch);
  RevCommit reviewCommit;
  try {
    reviewCommit=client.getReviewCommit(currentBranch,MASTER_REF);
  }
 catch (  GitClientException e) {
    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Cannot find a merge base",e));
  }
  if (reviewCommit == null) {
    throw new CoreException(new Status(IStatus.INFO,AppraiseConnectorPlugin.PLUGIN_ID,"No commits to review on " + currentBranch));
  }
  setAttributeValue(taskData,schema.DESCRIPTION,reviewCommit.getFullMessage());
  setAttributeValue(taskData,schema.REVIEW_COMMIT,reviewCommit.getName());
  try {
    List<DiffEntry> diffs=client.getReviewDiffs(currentBranch,MASTER_REF);
    populateDiffs(repository,diffs,taskData);
  }
 catch (  Exception e) {
    throw new CoreException(new Status(IStatus.ERROR,AppraiseConnectorPlugin.PLUGIN_ID,"Failed to load review diffs",e));
  }
}

public boolean isCritical(){
  return true;
}

@Override public void startup() throws Exception {
  Log.d(Mary.LOG,"Register UnitSelection voices:");
  List<String> voiceNames=MaryProperties.getList("unitselection.voices.list");
  for (  String voiceName : voiceNames) {
    long time=System.currentTimeMillis();
    Voice unitSelVoice=new UnitSelectionVoice(voiceName,this);
    Log.d(Mary.LOG,"Voice '" + unitSelVoice + "'");
    Voice.registerVoice(unitSelVoice);
    long newtime=System.currentTimeMillis() - time;
    Log.i(Mary.LOG,"Loading of voice " + voiceName + " took "+ newtime+ " milliseconds");
  }
  Log.i(Mary.LOG,"started.");
}

public int findStartOfColumn(int column){
  if (column == mColumns)   return getSpaceUsed();
  int currentColumn=0;
  int currentCharIndex=0;
  while (true) {
    int newCharIndex=currentCharIndex;
    char c=mText[newCharIndex++];
    boolean isHigh=Character.isHighSurrogate(c);
    int codePoint=isHigh ? Character.toCodePoint(c,mText[newCharIndex++]) : c;
    int wcwidth=WcWidth.width(codePoint);
    if (wcwidth > 0) {
      currentColumn+=wcwidth;
      if (currentColumn == column) {
        while (newCharIndex < mSpaceUsed) {
          if (Character.isHighSurrogate(mText[newCharIndex])) {
            if (WcWidth.width(Character.toCodePoint(mText[newCharIndex],mText[newCharIndex + 1])) <= 0) {
              newCharIndex+=2;
            }
 else {
              break;
            }
          }
 else           if (WcWidth.width(mText[newCharIndex]) <= 0) {
            newCharIndex++;
          }
 else {
            break;
          }
        }
        return newCharIndex;
      }
 else       if (currentColumn > column) {
        return currentCharIndex;
      }
    }
    currentCharIndex=newCharIndex;
  }
}

private TripSchedule rerouteTripSchedule(TripSchedule originalSchedule){
  TripSchedule schedule=originalSchedule.clone();
  schedule.arrivals=new int[newPatternLength];
  schedule.departures=new int[newPatternLength];
  int prevOutputDeparture=0;
  for (int ss=0, ts=0; ts < newPatternLength; ss++, ts++) {
    if ((ss == insertBeginIndex - 1) || (ss == 0 && insertBeginIndex == 0)) {
      int hopTime=originalSchedule.arrivals[ss];
      if (ss > 0)       hopTime-=originalSchedule.departures[ss - 1];
      schedule.arrivals[ts]=prevOutputDeparture + hopTime;
      schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[0];
      prevOutputDeparture=schedule.departures[ts];
      ts++;
      for (int hop=0, dwell=1; dwell < dwellTimes.length; hop++, dwell++) {
        schedule.arrivals[ts]=prevOutputDeparture + hopTimes[hop];
        schedule.departures[ts]=schedule.arrivals[ts] + dwellTimes[dwell];
        prevOutputDeparture=schedule.departures[ts];
        ts++;
      }
      ss=insertEndIndex + 1;
      if (ts == newPatternLength)       break;
    }
    int hopTime=originalSchedule.arrivals[ss];
    if (ss > 0)     hopTime-=originalSchedule.departures[ss - 1];
    schedule.arrivals[ts]=prevOutputDeparture + hopTime;
    int dwellTime=originalSchedule.departures[ss] - originalSchedule.arrivals[ss];
    schedule.departures[ts]=schedule.arrivals[ts] + dwellTime;
    prevOutputDeparture=schedule.departures[ts];
  }
  int timeShift=originalSchedule.arrivals[originalFixedPointStopIndex] - schedule.arrivals[newFixedPointStopIndex];
  for (int i=0; i < newPatternLength; i++) {
    schedule.arrivals[i]+=timeShift;
    schedule.departures[i]+=timeShift;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Original arrivals:   {}",originalSchedule.arrivals);
    LOG.debug("Original departures: {}",originalSchedule.departures);
    LOG.debug("Modified arrivals:   {}",schedule.arrivals);
    LOG.debug("Modified departures: {}",schedule.departures);
  }
  return schedule;
}

public static Color decode(String color,Color defaultColor){
  if (color == null) {
    return defaultColor;
  }
  Color c=getNamedColor(color);
  if (c == null) {
    try {
      c=Color.decode(color);
    }
 catch (    NumberFormatException ex) {
      return defaultColor;
    }
  }
  return c;
}

public static LinkedList<MaryModule> modulesRequiredForProcessing(MaryDataType sourceType,MaryDataType targetType,Locale locale,Voice voice){
  if (!registrationComplete)   throw new IllegalStateException("Cannot inquire about modules while registration is ongoing");
  if (sourceType == null)   throw new NullPointerException("Received null source type");
  if (targetType == null)   throw new NullPointerException("Received null target type");
  LinkedList<MaryDataType> seenTypes=new LinkedList<MaryDataType>();
  seenTypes.add(sourceType);
  return modulesRequiredForProcessing(sourceType,targetType,locale,voice,seenTypes);
}

public double distance(Vector o){
  return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
}

public static long calculateElapsedGC(){
  long timeMillis=0;
  for (  GarbageCollectorMXBean gcbean : gcbeans) {
    timeMillis+=gcbean.getCollectionTime();
  }
  return timeMillis;
}

public void close(){
}

public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){
  if (sourceList == null || isEmpty(entryList)) {
    return 0;
  }
  int sourceCount=sourceList.size();
  for (  V entry : entryList) {
    if (!sourceList.contains(entry)) {
      sourceList.add(entry);
    }
  }
  return sourceList.size() - sourceCount;
}

public void startObject(int numfields){
  notNested();
  if (vtable == null || vtable.length < numfields)   vtable=new int[numfields];
  vtable_in_use=numfields;
  Arrays.fill(vtable,0,vtable_in_use,0);
  nested=true;
  object_start=offset();
}

private Map<String,String> produceStream(String topic){
  List<ProducerRecord<String,String>> messages=new ArrayList<>(EVENT_CNT);
  Map<String,String> keyValMap=new HashMap<>();
  for (int evt=0; evt < EVENT_CNT; evt++) {
    long runtime=System.currentTimeMillis();
    String key=topic + "_" + String.valueOf(evt);
    String msg=runtime + String.valueOf(evt);
    messages.add(new ProducerRecord<>(topic,key,msg));
    keyValMap.put(key,msg);
  }
  kafkaBroker.sendMessages(messages);
  return keyValMap;
}

public static String stringOfChar(char ch,int count){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < count; i++) {
    buf.append(ch);
  }
  return buf.toString();
}

private void addConnectionView(Connection connection){
  PlatformImpl.runAndWait(null);
}

public static void trim(CharSequence aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  CharSequence data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}

public void addScriptFinishedListener(ScriptExecutionListener l){
  m_FinishedListeners.add(l);
}

public void onConsumeFinished(Purchase purchase,IabResult result);

public void test_getPutByteArray(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    r.nextBytes(expected);
    buf.put(pos,expected);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(0,expected.length,expected,pos,expected.length,buf.array()));
    final byte[] actual=new byte[expected.length];
    buf.get(pos,actual);
    assertTrue(BytesUtil.bytesEqual(expected,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}

public static double[] concatAllDouble(double[]... arrays){
  int totalLength=0;
  final int subArrayCount=arrays.length;
  for (int i=0; i < subArrayCount; ++i) {
    totalLength+=arrays[i].length;
  }
  double[] result=Arrays.copyOf(arrays[0],totalLength);
  int offset=arrays[0].length;
  for (int i=1; i < subArrayCount; ++i) {
    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);
    offset+=arrays[i].length;
  }
  return result;
}

private T[] ensureCapacity(int minCapacity){
  if (tmp.length < minCapacity) {
    int newSize=minCapacity;
    newSize|=newSize >> 1;
    newSize|=newSize >> 2;
    newSize|=newSize >> 4;
    newSize|=newSize >> 8;
    newSize|=newSize >> 16;
    newSize++;
    if (newSize < 0)     newSize=minCapacity;
 else     newSize=Math.min(newSize,a.length >>> 1);
    T[] newArray=(T[])new Object[newSize];
    tmp=newArray;
  }
  return tmp;
}

public synchronized void add(String category,double minValue,double maxValue){
  super.add(category,minValue);
  mMaxValues.add(maxValue);
}

public void CONT(int sessionNumber) throws Exception {
  this.maxSessionNumber=Math.max(this.maxSessionNumber,sessionNumber);
  testElements.add(new ContinuationElement(sessionNumber));
}

public static double calcRotationAngleInDegrees(PointF centerPt,PointF targetPt){
  double theta=Math.atan2(targetPt.y - centerPt.y,targetPt.x - centerPt.x);
  double angle=Math.toDegrees(theta);
  if (angle < 0) {
    angle+=360;
  }
  return angle;
}

public int countIn(CharSequence sequence){
  int count=0;
  for (int i=0; i < sequence.length(); i++) {
    if (matches(sequence.charAt(i))) {
      count++;
    }
  }
  return count;
}

public DeltaCRLIndicatorExtension(int crlNum) throws IOException {
  super(PKIXExtensions.DeltaCRLIndicator_Id,true,BigInteger.valueOf(crlNum),NAME,LABEL);
}

public static void v(String tag,String s,Object... args){
  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));
}

static private double calcLogProb(int numAppear,double mu){
  final double sigma=calcSigmaFromMu(mu);
  final double logNumAppear=Math.log(numAppear);
  final double overMu=Math.max(logNumAppear - mu,0.0);
  final double res=-(1.0 / 2) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.log(sigma);
  assert (res <= 0);
  return res;
}

@Override public SoftwarePIDController withTolerance(double tolerance){
  target=target.withTolerance(Math.abs(tolerance));
  return this;
}

protected final void dragDropFinished(final boolean success,final int operations,final int x,final int y){
  DragSourceEvent event=new DragSourceDropEvent(getDragSourceContext(),operations & sourceActions,success,x,y);
  EventDispatcher dispatcher=new EventDispatcher(DISPATCH_FINISH,event);
  SunToolkit.invokeLaterOnAppContext(SunToolkit.targetToAppContext(getComponent()),dispatcher);
  startSecondaryEventLoop();
  setNativeContext(0);
  dragImage=null;
  dragImageOffset=null;
}

@Override public byte[] write(InternalLog log) throws IOException {
  final byte[] rowkey=RowkeyBuilder.buildRowkey(log);
  final Put p=new Put(rowkey);
  populateColumnValues(p,log);
  tbl.put(p);
  final List<byte[]> indexRowkeys=log.getIndexRowkeys();
  if (indexRowkeys != null) {
    writeIndexes(rowkey,indexRowkeys);
  }
  return rowkey;
}

private void insertIntoDynamicTable(int index,Header entry){
  headerList.add(entry);
  int delta=entry.hpackSize;
  if (index != -1) {
    delta-=dynamicTable[dynamicTableIndex(index)].hpackSize;
  }
  if (delta > maxDynamicTableByteCount) {
    clearDynamicTable();
    return;
  }
  int bytesToRecover=(dynamicTableByteCount + delta) - maxDynamicTableByteCount;
  int entriesEvicted=evictToRecoverBytes(bytesToRecover);
  if (index == -1) {
    if (headerCount + 1 > dynamicTable.length) {
      Header[] doubled=new Header[dynamicTable.length * 2];
      System.arraycopy(dynamicTable,0,doubled,dynamicTable.length,dynamicTable.length);
      nextHeaderIndex=dynamicTable.length - 1;
      dynamicTable=doubled;
    }
    index=nextHeaderIndex--;
    dynamicTable[index]=entry;
    headerCount++;
  }
 else {
    index+=dynamicTableIndex(index) + entriesEvicted;
    dynamicTable[index]=entry;
  }
  dynamicTableByteCount+=delta;
}

protected static String extractSecretAccessKey(String s3uri){
  return s3uri.substring(s3uri.indexOf(':',s3uri.indexOf("://") + 1) + 1,s3uri.indexOf('@'));
}

private void dial(String contactInformation,boolean makeTheCall,boolean usePhoneSpeaker){
  if (contactInformation.equals("")) {
    String lastRecipient=RecipientCmd.getLastRecipientNumber();
    String lastRecipientName=RecipientCmd.getLastRecipientName();
    if (lastRecipient != null) {
      doDial(lastRecipientName,lastRecipient,makeTheCall,usePhoneSpeaker);
    }
 else {
      send("error: last recipient not set");
    }
  }
 else {
    ResolvedContact resolvedContact=mContactsResolver.resolveContact(contactInformation,ContactsResolver.TYPE_ALL);
    if (resolvedContact == null) {
      send(R.string.chat_no_match_for,contactInformation);
    }
 else     if (resolvedContact.isDistinct()) {
      doDial(resolvedContact.getName(),resolvedContact.getNumber(),makeTheCall,usePhoneSpeaker);
    }
 else {
      askForMoreDetails(resolvedContact.getCandidates());
    }
  }
}

public void addSafeClass(SootClass clz){
  safeClasses.add(clz.getName());
}

private boolean activeListHasRoom(){
  int maxDownloads=1;
  return mActiveList.size() < maxDownloads;
}

public static final double parseTime(final String time,final char separator){
  if (time == null || time.length() == 0 || time.equals("undefined")) {
    return Time.UNDEFINED_TIME;
  }
  boolean isNegative=(time.charAt(0) == '-');
  String[] strings=(isNegative ? StringUtils.explode(time.substring(1),separator) : StringUtils.explode(time,separator));
  double seconds=0;
  if (strings.length == 1) {
    seconds=Math.abs(Double.parseDouble(strings[0]));
  }
 else   if (strings.length == 2) {
    int h=Integer.parseInt(strings[0]);
    int m=Integer.parseInt(strings[1]);
    if ((m < 0) || (m > 59)) {
      throw new IllegalArgumentException("minutes are out of range in " + time);
    }
    seconds=Math.abs(h) * 3600 + m * 60;
  }
 else   if (strings.length == 3) {
    int h=Integer.parseInt(strings[0]);
    int m=Integer.parseInt(strings[1]);
    double s=Double.parseDouble(strings[2]);
    if ((m < 0) || (m > 59)) {
      throw new IllegalArgumentException("minutes are out of range in " + time);
    }
    if ((s < 0) || (s >= 60)) {
      throw new IllegalArgumentException("seconds are out of range in " + time);
    }
    seconds=Math.abs(h) * 3600 + m * 60 + s;
  }
 else {
    throw new IllegalArgumentException("time format is not valid in " + time);
  }
  if (isNegative) {
    seconds=-seconds;
  }
  return seconds;
}

public boolean isRunning(){
  return this.running;
}

protected static Map<String,Step> parse(Class<? extends RSLPStemmerBase> clazz,String resource){
  try {
    InputStream is=clazz.getResourceAsStream(resource);
    LineNumberReader r=new LineNumberReader(new InputStreamReader(is,StandardCharsets.UTF_8));
    Map<String,Step> steps=new HashMap<>();
    String step;
    while ((step=readLine(r)) != null) {
      Step s=parseStep(r,step);
      steps.put(s.name,s);
    }
    r.close();
    return steps;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public String betToString(){
  final StringBuilder sb=new StringBuilder();
  sb.append(amount);
  sb.append(" ");
  sb.append(itemName);
  sb.append(" on ");
  sb.append(target);
  return sb.toString();
}

public void test_nonEmptyJournal() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      if (!(src.getBufferStrategy() instanceof IHABufferStrategy)) {
        return;
      }
      src.write(getRandomData(128));
      src.commit();
      try {
        final ISnapshotFactory snapshotFactory=new MySnapshotFactory(getName(),false);
        final Future<ISnapshotResult> f=src.snapshot(snapshotFactory);
        final ISnapshotResult snapshotResult=f.get();
        final File snapshotFile=snapshotResult.getFile();
        try {
          final Journal tmp=openSnapshot(snapshotResult);
          assertEquals(src.getRootBlockView(),tmp.getRootBlockView());
          tmp.destroy();
        }
  finally {
          if (snapshotFile.exists()) {
            snapshotFile.delete();
          }
        }
      }
 catch (      IllegalArgumentException ex) {
        log.info("Ignoring expected exception: " + ex);
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}

private boolean checkMatchIp(Map<String,Object> rows){
  boolean matchEther=false;
  String val=(String)rows.get(StaticFlowEntryPusher.COLUMN_DL_TYPE);
  if (val != null) {
    int type=0;
    if (val.startsWith("0x")) {
      type=Integer.parseInt(val.substring(2),16);
    }
 else {
      try {
        type=Integer.parseInt(val);
      }
 catch (      NumberFormatException e) {
      }
    }
    if (type == 2048)     matchEther=true;
  }
  if ((rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO)|| rows.containsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && (matchEther == false))   return false;
  return true;
}

public static double powQuick(double value,double power){
  if (USE_JDK_MATH) {
    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);
  }
  return FastMath.exp(power * FastMath.logQuick(value));
}

private String classToEntryPath(Class<?> clazz){
  String name="";
  Class<?> parent;
  while ((parent=clazz.getEnclosingClass()) != null) {
    name="$" + clazz.getSimpleName() + name;
    clazz=parent;
  }
  return classNameToEntryPath(clazz.getCanonicalName() + name);
}

public static String write(POSMikheevCounter counter){
  return POSBaseLineCounter.write(counter);
}

private Map<String,AnnotationMirror> annosInPackage(PackageElement packageElement){
  return createImportedAnnotationsMap(ElementFilter.typesIn(packageElement.getEnclosedElements()));
}

public OsmElement pasteFrom(){
  List<Way> ways=storage.getWays();
  List<Node> nodes=storage.getNodes();
  if (mode == Mode.CUT) {
    reset();
    if (ways != null && ways.size() == 1) {
      Way w=ways.get(0);
      w.setState(savedState);
      for (      Node nd : w.getNodes()) {
        Log.d("PasteFrom","Restoring state for " + nd.getOsmId());
        nd.setState(savedNdState.get(nd));
      }
      return w;
    }
 else     if (nodes != null && nodes.size() == 1) {
      Node n=nodes.get(0);
      n.setState(savedState);
      return n;
    }
  }
 else {
    if (ways != null && ways.size() == 1) {
      return ways.get(0);
    }
 else     if (nodes != null && nodes.size() == 1) {
      return nodes.get(0);
    }
  }
  return null;
}

public final void updateCursor(){
  updatePending.set(false);
  updateCursorImpl();
}

public static boolean isMiddleMouseButton(MouseEvent anEvent){
  return ((anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON2);
}

public void addSuccessMessage(final String successMessage){
  successMessageList.add(successMessage);
}

private void startStoppedChanged(){
  clock.setStartStopped(startStoppedCheckBox.isSelected());
  changed=true;
}

public void close() throws IOException {
  try {
    Debug.message("binaryfile","StreamInputReader.close()");
    if (Debug.debugging("connection_problems")) {
      Thread.sleep(1000);
    }
    if (inputStream != null)     inputStream.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  inputStream=null;
}

public static Long nextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc){
  int lastAssignedLogSegmentIdx=-1;
  Long lastAssignedLogSegmentSeqNo=null;
  Long nextLogSegmentSeqNo=null;
  for (int i=0; i < segmentListDesc.size(); i++) {
    LogSegmentMetadata metadata=segmentListDesc.get(i);
    if (LogSegmentMetadata.supportsLogSegmentSequenceNo(metadata.getVersion())) {
      lastAssignedLogSegmentSeqNo=metadata.getLogSegmentSequenceNumber();
      lastAssignedLogSegmentIdx=i;
      break;
    }
  }
  if (null != lastAssignedLogSegmentSeqNo) {
    nextLogSegmentSeqNo=lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + 1;
  }
  return nextLogSegmentSeqNo;
}

private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i("StlPaser: Reading Binary");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w("STL contains bad normals of NaN or Infinite!");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}

public static void assertSpecificLang(String specificLang) throws XMPException {
  if (specificLang == null || specificLang.length() == 0) {
    throw new XMPException("Empty specific language",XMPError.BADPARAM);
  }
}

public int onBlockExploded(){
  return (int)(fuseTime / 2 + Math.random() * fuseTime / 4);
}

@Override public boolean hasQueuedReaderThreads(){
  return readerLock.hasQueuedThreads();
}

public long inactiveTimeMillis(){
  return System.currentTimeMillis() - lastTimeMillis;
}

public static void check(boolean cond,Object value){
  if (!cond)   error(String.valueOf(value));
}

public void addDefinition(ICOSDefinition cosDef) throws UMSException {
  if (!(cosDef instanceof DirectCOSDefinition)) {
    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);
    throw new UMSException(msg);
  }
  String[] cosAttributes=cosDef.getCOSAttributes();
  AbstractCollection aList=(AbstractCollection)Arrays.asList(ICOSDefinition.qualifiers);
  for (int i=0; i < cosAttributes.length; i++) {
    String cosAttribute=null;
    String qualifier=null;
    StringTokenizer st=new StringTokenizer(cosAttributes[i]);
    if (st.hasMoreTokens()) {
      cosAttribute=st.nextToken();
    }
    if (cosAttribute == null) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
    if (st.hasMoreTokens())     qualifier=st.nextToken();
    if (qualifier == null) {
      qualifier=ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT];
      cosDef.removeCOSAttribute(cosAttribute);
      cosDef.addCOSAttribute(cosAttribute,ICOSDefinition.DEFAULT);
    }
    if (!aList.contains(qualifier)) {
      String msg=i18n.getString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER);
      throw new UMSException(msg);
    }
  }
  PersistentObject po=(PersistentObject)cosDef;
  _parentObject.addChild(po);
}

public static SourceDataQuality fromXML(Element domElement){
  NodeList fields=domElement.getChildNodes();
  int fieldsCount=fields.getLength();
  String fieldName;
  String fieldValueString;
  Node fieldNode;
  SourceDataQuality result=new SourceDataQuality();
  for (int i=0; i != fieldsCount; i++) {
    fieldNode=fields.item(i);
    if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {
      fieldName=fieldNode.getNodeName();
      Node fieldValueNode=fieldNode.getFirstChild();
      if (fieldValueNode != null) {
        fieldValueString=fieldValueNode.getNodeValue();
      }
 else {
        fieldValueString="";
      }
      if (fieldName.equals(XML_ELEMENT_QUALITY_CODE)) {
        result.qualityCode=Short.parseShort(fieldValueString);
      }
 else       if (fieldName.equals(XML_ELEMENT_QUALITY_DESC)) {
        result.description=fieldValueString;
      }
    }
  }
  return result;
}

QName toQName(Class<?> outputClass){
  String localPart;
  String namespaceUri;
  if (outputClass.isAnnotationPresent(XmlRootElement.class)) {
    XmlRootElement annotation=outputClass.getAnnotation(XmlRootElement.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else   if (outputClass.isAnnotationPresent(XmlType.class)) {
    XmlType annotation=outputClass.getAnnotation(XmlType.class);
    localPart=annotation.name();
    namespaceUri=annotation.namespace();
  }
 else {
    throw new IllegalArgumentException("Outputclass [" + outputClass + "] is "+ "neither annotated with @XmlRootElement nor @XmlType");
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(localPart)) {
    localPart=ClassUtils.getShortNameAsProperty(outputClass);
  }
  if (JAXB_DEFAULT_ANNOTATION_VALUE.equals(namespaceUri)) {
    Package outputClassPackage=outputClass.getPackage();
    if (outputClassPackage != null && outputClassPackage.isAnnotationPresent(XmlSchema.class)) {
      XmlSchema annotation=outputClassPackage.getAnnotation(XmlSchema.class);
      namespaceUri=annotation.namespace();
    }
 else {
      namespaceUri=XMLConstants.NULL_NS_URI;
    }
  }
  return new QName(namespaceUri,localPart);
}

private void adjustBottom(RectF rect,float bottom,RectF bounds,int viewHeight,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){
  float newBottom=bottom;
  if (newBottom > viewHeight) {
    newBottom=viewHeight + (newBottom - viewHeight) / 1.05f;
    mTouchOffset.y-=(newBottom - viewHeight) / 1.1f;
  }
  if (newBottom > bounds.bottom) {
    mTouchOffset.y-=(newBottom - bounds.bottom) / 2f;
  }
  if (bounds.bottom - newBottom < snapMargin) {
    newBottom=bounds.bottom;
  }
  if (newBottom - rect.top < mMinCropHeight) {
    newBottom=rect.top + mMinCropHeight;
  }
  if (newBottom - rect.top > mMaxCropHeight) {
    newBottom=rect.top + mMaxCropHeight;
  }
  if (bounds.bottom - newBottom < snapMargin) {
    newBottom=bounds.bottom;
  }
  if (aspectRatio > 0) {
    float newWidth=(newBottom - rect.top) * aspectRatio;
    if (newWidth < mMinCropWidth) {
      newBottom=Math.min(bounds.bottom,rect.top + mMinCropWidth / aspectRatio);
      newWidth=(newBottom - rect.top) * aspectRatio;
    }
    if (newWidth > mMaxCropWidth) {
      newBottom=Math.min(bounds.bottom,rect.top + mMaxCropWidth / aspectRatio);
      newWidth=(newBottom - rect.top) * aspectRatio;
    }
    if (leftMoves && rightMoves) {
      newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + bounds.width() / aspectRatio));
    }
 else {
      if (leftMoves && rect.right - newWidth < bounds.left) {
        newBottom=Math.min(bounds.bottom,rect.top + (rect.right - bounds.left) / aspectRatio);
        newWidth=(newBottom - rect.top) * aspectRatio;
      }
      if (rightMoves && rect.left + newWidth > bounds.right) {
        newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + (bounds.right - rect.left) / aspectRatio));
      }
    }
  }
  rect.bottom=newBottom;
}

private static String generateJWT(String secret,String jwtID,String iss,Integer ttl,Map<String,String> claims) throws HmacException {
  try {
    return signJWT(secret,jwtID,ttl,iss,claims);
  }
 catch (  JOSEException e) {
    e.printStackTrace();
    throw new HmacException("Cannot generate JWT",e);
  }
}

public void exportSymbols(String[] exportNames,Symbol[] symbols){
  if (exportedSymbols == null) {
    exportedSymbols=new ArrayList();
  }
  for (int i=0; i < exportNames.length && i < symbols.length; i++) {
    exportedSymbols.add(new ExportedSymbol(symbols[i],exportNames[i]));
  }
}

static boolean isFulfilling(int m){
  return (m & FULFILLING) != 0;
}

@Override public synchronized void addDataSourceListener(DataSourceListener dsl){
  m_dataSourceListeners.addElement(dsl);
  if (m_format != null) {
    DataSetEvent e=new DataSetEvent(this,m_format);
    dsl.acceptDataSet(e);
  }
}

public static AnnotationMirror findEffectiveAnnotationInHierarchy(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch,final AnnotationMirror top){
  return findEffectiveAnnotationInHierarchy(qualifierHierarchy,toSearch,top,false);
}

public boolean toFail(){
  LifecycleState state;
synchronized (this) {
    state=_state;
    if (state.isAfterDestroying()) {
      return false;
    }
    _state=FAILED;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_level))   _log.log(_level,"fail " + _name);
  notifyListeners(state,FAILED);
  _failCount++;
  return true;
}

private static void read(InputStream in,byte[] buf,int pos,int n) throws IOException {
  int read=0;
  int res=0;
  while (read < n) {
    res=in.read(buf,read + pos,n - read);
    if (res > 0) {
      read+=res;
    }
 else {
      throw new IOException("Read failed, got " + read + " of "+ n);
    }
  }
}

public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}

void parseFinish(){
  mChildren=mCurrentGroup.getChildren();
}

void cancelIncludedOnly(){
  if (!_showAllInput) {
    _inputAllButton.doClick();
  }
  if (!_showAllOutput) {
    _outputAllButton.doClick();
  }
  if (!_showAllAlign) {
    _alignAllButton.doClick();
  }
}

List<Entry> killAll(boolean rootIncluded){
  List<Entry> killed=new ArrayList<>(rootIncluded ? entries.size() : entries.size() - 1);
  Entry entry;
  for (int i=entries.size() - 1; i > (rootIncluded ? -1 : 0); i--) {
    entry=entries.get(i);
    if (entry.dead)     continue;
    entry.dead=true;
    if (i != 0) {
      killed.add(entry);
    }
  }
  return killed;
}

public static void createErrorDialog(final String title,final String message){
  final Alert alert=new Alert(AlertType.ERROR);
  alert.setTitle(title);
  alert.setContentText(message);
  alert.setHeaderText(null);
  alert.showAndWait();
}

public static String checkIndexHeaderSuffix(DataInput in,String expectedSuffix) throws IOException {
  int suffixLength=in.readByte() & 0xFF;
  byte suffixBytes[]=new byte[suffixLength];
  in.readBytes(suffixBytes,0,suffixBytes.length);
  String suffix=new String(suffixBytes,0,suffixBytes.length,StandardCharsets.UTF_8);
  if (!suffix.equals(expectedSuffix)) {
    throw new CorruptIndexException("file mismatch, expected suffix=" + expectedSuffix + ", got="+ suffix,in);
  }
  return suffix;
}

protected void tag(String tag,ArrayList names,ArrayList values,int nattr,boolean close){
  spacing();
  m_out.print('<');
  m_out.print(tag);
  for (int i=0; i < nattr; ++i) {
    m_out.print(' ');
    m_out.print((String)names.get(i));
    m_out.print('=');
    m_out.print('\"');
    escapeString((String)values.get(i));
    m_out.print('\"');
  }
  if (close)   m_out.print('/');
  m_out.print('>');
  println();
  if (!close) {
    m_tagStack.add(tag);
  }
}

public static String parseDiskString(String input){
  String delims="[ ]+";
  String[] tokens=input.split(delims);
  return tokens[0];
}

protected void drawCloud(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){
  GeneralPath path=new GeneralPath();
  path.moveTo((float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.curveTo((float)(x + 0.05 * w),(float)(y + 0.25 * h),(float)x,(float)(y + 0.5 * h),(float)(x + 0.16 * w),(float)(y + 0.55 * h));
  path.curveTo((float)x,(float)(y + 0.66 * h),(float)(x + 0.18 * w),(float)(y + 0.9 * h),(float)(x + 0.31 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + 0.4 * w),(float)(y + h),(float)(x + 0.7 * w),(float)(y + h),(float)(x + 0.8 * w),(float)(y + 0.8 * h));
  path.curveTo((float)(x + w),(float)(y + 0.8 * h),(float)(x + w),(float)(y + 0.6 * h),(float)(x + 0.875 * w),(float)(y + 0.5 * h));
  path.curveTo((float)(x + w),(float)(y + 0.3 * h),(float)(x + 0.8 * w),(float)(y + 0.1 * h),(float)(x + 0.625 * w),(float)(y + 0.2 * h));
  path.curveTo((float)(x + 0.5 * w),(float)(y + 0.05 * h),(float)(x + 0.3 * w),(float)(y + 0.05 * h),(float)(x + 0.25 * w),(float)(y + 0.25 * h));
  path.closePath();
  drawPath(path,fillColor,fillPaint,penColor,shadow);
}

private static boolean isTrusted(Object obj,TrustVerifier.Context ctx) throws RemoteException {
  Object saved=state.get();
  try {
    state.set(obj);
    return ctx.isTrustedObject(obj);
  }
  finally {
    state.set(saved);
  }
}

public static PersistentSearchRequestControl newControl(final boolean isCritical,final boolean changesOnly,final boolean returnECs,final PersistentSearchChangeType... changeTypes){
  Reject.ifNull((Object)changeTypes);
  return newControl(isCritical,changesOnly,returnECs,Arrays.asList(changeTypes));
}

private void connectEqualized(SynapseGroup synapseGroup){
  currentOrderingIndices=new int[sourceNeurons.length];
  int numConnectsPerSrc;
  int expectedNumSyns;
  if (synapseGroup.isRecurrent() && !selfConnectionAllowed) {
    numConnectsPerSrc=(int)(connectionDensity * (sourceNeurons.length - 1));
  }
 else {
    numConnectsPerSrc=(int)(connectionDensity * targetNeurons.length);
  }
  expectedNumSyns=numConnectsPerSrc * sourceNeurons.length;
  synapseGroup.preAllocateSynapses(expectedNumSyns);
  for (int i=0, n=sourceNeurons.length; i < n; i++) {
    currentOrderingIndices[i]=numConnectsPerSrc;
    Neuron src=sourceNeurons[i];
    Neuron tar;
    for (int j=0; j < numConnectsPerSrc; j++) {
      tar=targetNeurons[sparseOrdering[i][j]];
      Synapse s=new Synapse(src,tar);
      synapseGroup.addNewSynapse(s);
    }
  }
}

public static Number multiply(Character left,Character right){
  return multiply(Integer.valueOf(left),right);
}

public static String normalize(final CharSequence self){
  final String s=self.toString();
  int nx=s.indexOf('\r');
  if (nx < 0) {
    return s;
  }
  final int len=s.length();
  final StringBuilder sb=new StringBuilder(len);
  int i=0;
  do {
    sb.append(s,i,nx);
    sb.append('\n');
    if ((i=nx + 1) >= len)     break;
    if (s.charAt(i) == '\n') {
      if (++i >= len)       break;
    }
    nx=s.indexOf('\r',i);
  }
 while (nx > 0);
  sb.append(s,i,len);
  return sb.toString();
}

public void addZoneChangeListener(ZoneChangeListener listener){
  zoneChangeListeners.add(listener);
}

public void write(final int b) throws IOException {
  if (m_store == null) {
    throw new IllegalStateException(ERR_NO_STORE);
  }
  if (m_isSaved) {
    throw new IllegalStateException(ERR_ALREADY_SAVED);
  }
  if (m_count == m_blobThreshold && !m_writingHdr) {
    if (m_blobHeader == null) {
      m_blobHeader=new ArrayList<Integer>();
    }
    final int curAddr=(int)m_store.alloc(m_buf,m_count,m_context);
    m_blobHeader.add(curAddr);
    m_count=0;
  }
  m_buf[m_count++]=(byte)b;
  m_bytesWritten++;
}

public StartListener(Object resource){
  _resource=resource;
}

public List<T> asFlatList(){
  List<T> list=new ArrayList<T>();
  for (int i=0; i < getRowCount(); i++) {
    for (int j=0; j < getColumnCount(); j++) {
      list.add(getLogicalValueAt(i,j));
    }
  }
  return list;
}

@Beta public void reset(){
  schedulersHook.set(null);
}

public static String hashKeyForDisk(String key){
  String cacheKey;
  try {
    final MessageDigest mDigest=MessageDigest.getInstance("MD5");
    mDigest.update(key.getBytes());
    cacheKey=bytesToHexString(mDigest.digest());
  }
 catch (  NoSuchAlgorithmException e) {
    cacheKey=String.valueOf(key.hashCode());
  }
  return cacheKey;
}

public void recordTimestamp(){
  long curTimestamp=System.currentTimeMillis();
  if (usedFields > 0) {
    long diff=curTimestamp - lastValue;
    if (usedFields == diffs.length) {
      long removedValue=diffs[curPosition];
      diffs[curPosition]=diff;
      calculateNewAverage(removedValue,diff,false);
      shiftEnd();
    }
 else {
      calculateNewAverage(0,diff,true);
      diffs[curPosition]=diff;
      shiftEnd();
    }
  }
 else   if (lastValue != -1) {
    long diff=curTimestamp - lastValue;
    currentAverage=0;
    diffs[curPosition]=diff;
    calculateNewAverage(0,diff,true);
    shiftEnd();
  }
  lastValue=curTimestamp;
}

@AfterMethod public void tearDown() throws Exception {
  Throwable t=threadFailure.getAndSet(null);
  if (t != null) {
    if (t instanceof Error)     throw (Error)t;
 else     if (t instanceof RuntimeException)     throw (RuntimeException)t;
 else     if (t instanceof Exception)     throw (Exception)t;
 else {
      AssertionFailedError afe=new AssertionFailedError(t.toString());
      afe.initCause(t);
      throw afe;
    }
  }
  if (Thread.interrupted())   tearDownFail("interrupt status set in main thread");
  checkForkJoinPoolThreadLeaks();
}

public void parse(String string){
  if (string == null) {
    throw new NullPointerException("string is null");
  }
  int bufferSize=Math.max(MIN_BUFFER_SIZE,Math.min(DEFAULT_BUFFER_SIZE,string.length()));
  try {
    parse(new StringReader(string),bufferSize);
  }
 catch (  IOException exception) {
    throw new RuntimeException(exception);
  }
}

protected double defaultMaxRadius(){
  return Math.sqrt(2.0);
}

public char[] toCharArray(){
  char[] newValue=new char[count];
  System.arraycopy(buf,0,newValue,0,count);
  return newValue;
}

@Override protected int sizePendingWorkers(){
  return _pendingWorkers.size();
}

public void insert(Component component,int index){
  if (index < 0) {
    throw new IllegalArgumentException("index less than zero.");
  }
  int nitems=getComponentCount();
  Vector<Component> tempItems=new Vector<Component>();
  for (int i=index; i < nitems; i++) {
    tempItems.addElement(getComponent(index));
    remove(index);
  }
  add(component);
  for (  Component tempItem : tempItems) {
    add(tempItem);
  }
}

public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter,int splitLimit){
  List<String> result=new LinkedList<>();
  StringBuilder b=new StringBuilder();
  boolean readEscape=false;
  int indexCount=-1;
  for (  char c : source.toCharArray()) {
    indexCount++;
    if (readEscape) {
      boolean found=false;
      if (c == splitCharacter) {
        found=true;
        b.append(c);
      }
 else       if (c == escapeChar) {
        found=true;
        b.append(c);
      }
 else {
        for (        char s : specialCharacters) {
          if (s == c) {
            found=true;
            b.append(c);
            break;
          }
        }
      }
      if (!found) {
        throw new IllegalArgumentException("String '" + source + "' contains illegal escaped character '"+ c+ "'.");
      }
      readEscape=false;
    }
 else     if (c == escapeChar) {
      readEscape=true;
    }
 else     if (c == splitCharacter) {
      readEscape=false;
      result.add(b.toString());
      if (splitLimit != -1) {
        if (result.size() == splitLimit - 1) {
          result.add(source.substring(indexCount + 1));
          return result;
        }
      }
      b=new StringBuilder();
    }
 else {
      readEscape=false;
      b.append(c);
    }
  }
  result.add(b.toString());
  return result;
}

protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Align.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(Color.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + "...";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}

@Override public String append(String path,InputStream is) throws MalformedURLException, IOException, AuthenticationException {
  String resp=null;
  ensureValidToken();
  String spec=MessageFormat.format("/webhdfs/v1/{0}?op=APPEND&user.name={1}",URLUtil.encodePath(path),this.principal);
  String redirectUrl=null;
  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),spec),token);
  conn.setRequestMethod("POST");
  conn.setInstanceFollowRedirects(false);
  conn.connect();
  logger.info("Location:" + conn.getHeaderField("Location"));
  resp=result(conn,true);
  if (conn.getResponseCode() == 307)   redirectUrl=conn.getHeaderField("Location");
  conn.disconnect();
  if (redirectUrl != null) {
    conn=authenticatedURL.openConnection(new URL(redirectUrl),token);
    conn.setRequestMethod("POST");
    conn.setDoOutput(true);
    conn.setDoInput(true);
    conn.setUseCaches(false);
    conn.setRequestProperty("Content-Type","application/octet-stream");
    final int _SIZE=is.available();
    conn.setRequestProperty("Content-Length","" + _SIZE);
    conn.setFixedLengthStreamingMode(_SIZE);
    conn.connect();
    OutputStream os=conn.getOutputStream();
    copy(is,os);
    is.close();
    os.close();
    resp=result(conn,true);
    conn.disconnect();
  }
  return resp;
}

public EconomyConcurrentHashMap(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){
  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);
  putAll(m);
}

void addRule(String[] selector,AttributeSet declaration,boolean isLinked){
  int n=selector.length;
  StringBuilder sb=new StringBuilder();
  sb.append(selector[0]);
  for (int counter=1; counter < n; counter++) {
    sb.append(' ');
    sb.append(selector[counter]);
  }
  String selectorName=sb.toString();
  Style rule=getStyle(selectorName);
  if (rule == null) {
    Style altRule=addStyle(selectorName,null);
synchronized (this) {
      SelectorMapping mapping=getRootSelectorMapping();
      for (int i=n - 1; i >= 0; i--) {
        mapping=mapping.getChildSelectorMapping(selector[i],true);
      }
      rule=mapping.getStyle();
      if (rule == null) {
        rule=altRule;
        mapping.setStyle(rule);
        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());
      }
    }
  }
  if (isLinked) {
    rule=getLinkedStyle(rule);
  }
  rule.addAttributes(declaration);
}

public Builder appendReadData(byte[] data){
  Assertions.checkState(data != null && data.length > 0);
  segments.add(new Segment(data,null));
  return this;
}

private boolean isLatestDssKeystore(TSLParserResult parseResult){
  List<String> englishSchemeInformationURIs=parseResult.getEnglishSchemeInformationURIs();
  return englishSchemeInformationURIs.contains(ojUrl);
}

private synchronized void initResourceBundle(String resourceBundleName){
  String current=this.resourceBundleName;
  if (current != null) {
    if (current.equals(resourceBundleName)) {
      return;
    }
 else {
      throw new IllegalArgumentException("Resource bundle name '" + resourceBundleName + "' is inconsistent with the existing '"+ current+ "'");
    }
  }
  if (resourceBundleName != null) {
    this.resourceBundle=loadResourceBundle(resourceBundleName);
    this.resourceBundleName=resourceBundleName;
  }
}

public LayerGraphicWarehouseSupport(){
  initDrawingAttributes();
  graphics=new OMGraphicList();
  graphics.setTraverseMode(OMGraphicList.LAST_ADDED_ON_TOP);
}

public boolean matchesNamingConvension(){
  return packageName.matches(JAVA_PACKAGE_CONVENSION);
}

void rememberFactory(String host,RMISocketFactory factory){
synchronized (successTable) {
    while (hostList.size() >= MaxRememberedHosts) {
      successTable.remove(hostList.elementAt(0));
      hostList.removeElementAt(0);
    }
    hostList.addElement(host);
    successTable.put(host,factory);
  }
}

public void put(String key,long value){
  if (key != null) {
    urlParams.put(key,String.valueOf(value));
  }
}

public char next(){
  return pos < in.length() ? in.charAt(pos++) : '\0';
}

private Map.Entry<K,V> doRemoveFirstEntry(){
  for (Node<K,V> b, n; ; ) {
    if ((n=(b=head.node).next) == null)     return null;
    Node<K,V> f=n.next;
    if (n != b.next)     continue;
    Object v=n.value;
    if (v == null) {
      n.helpDelete(b,f);
      continue;
    }
    if (!n.casValue(v,null))     continue;
    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();
    clearIndexToFirst();
    @SuppressWarnings("unchecked") V vv=(V)v;
    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,vv);
  }
}

public ComputeTaskCancelledException(Throwable cause){
  this(cause.getMessage(),cause);
}

public static int normalize(char[] src,int srcStart,int srcLimit,char[] dest,int destStart,int destLimit,Mode mode,int options){
  int length=mode.normalize(src,srcStart,srcLimit,dest,destStart,destLimit,options);
  if (length <= (destLimit - destStart)) {
    return length;
  }
 else {
    throw new IndexOutOfBoundsException(Integer.toString(length));
  }
}

private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){
  if (elementsToRemove.size() > 0) {
    names.removeAll(elementsToRemove);
    for (    String elementToRemove : elementsToRemove) {
      sharedElements.remove(elementToRemove);
    }
  }
}

public boolean isHighlightWithInvisibleEdge(){
  return highlightWithInvisibleEdge;
}

public void removeAction(NetworkUpdateAction action){
  actionList.remove(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionRemoved(action);
  }
}

public static double bufferDistanceError(int quadSegs){
  double alpha=Math.PI / 2.0 / quadSegs;
  return 1 - Math.cos(alpha / 2.0);
}

public Pair<String,String> next(){
  try {
    currentHeaderPosition=nextHeaderPosition;
    String readHeader=nextLine;
    nextHeaderPosition+=readHeader.length() + endOfLineBytes;
    readHeader=">" + readHeader.substring(1);
    String readSequence=r.readLine();
    nextHeaderPosition+=readSequence.length() + endOfLineBytes;
    String comments=r.readLine();
    nextHeaderPosition+=comments.length() + endOfLineBytes;
    if (comments.startsWith("+")) {
      String qualityValues=r.readLine();
      nextHeaderPosition+=qualityValues.length() + endOfLineBytes;
    }
    nextLine=r.readLine();
    return new Pair<>(readHeader,readSequence);
  }
 catch (  IOException e) {
    Basic.caught(e);
  }
  return null;
}

public void add(Character character){
  elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));
}

public static boolean isValidIfd(int ifdId){
  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;
}

public void removeChild(Group theGroup){
  mChildren.remove(theGroup);
}

protected StoragePort checkPortExistsInDB(String nativeGuid) throws IOException {
  StoragePort port=null;
  List<StoragePort> portInDB=CustomQueryUtility.getActiveStoragePortByNativeGuid(_dbClient,nativeGuid);
  if (portInDB != null && !portInDB.isEmpty()) {
    port=portInDB.get(0);
  }
  return port;
}

public void appendSplitElement(Fragment aSplit){
  splits.add(aSplit);
}

public Iterator enumerateLiteralResultAttributes(){
  return (null == m_avts) ? null : m_avts.iterator();
}

public OsmHandler(MapBuilder meConsumer){
  osmElementProcessor=new OsmElementProcessor(null,meConsumer);
}

public void close() throws IOException {
  flushBits();
  out.close();
}

public RespokeDirectConnection directConnection(){
  if (null != directConnectionReference) {
    return directConnectionReference.get();
  }
 else {
    return null;
  }
}

private String appendNationalNumber(String nationalNumber){
  int prefixBeforeNationalNumberLength=prefixBeforeNationalNumber.length();
  if (shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > 0 && prefixBeforeNationalNumber.charAt(prefixBeforeNationalNumberLength - 1) != SEPARATOR_BEFORE_NATIONAL_NUMBER) {
    return new String(prefixBeforeNationalNumber) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber;
  }
 else {
    return prefixBeforeNationalNumber + nationalNumber;
  }
}

public void cut(){
  copy();
  deleteSelectedObjects();
}

public void stop(){
  setLedOn(false);
  if (null != blinkFuture) {
    blinkFuture.cancel(true);
  }
  if (null != blinkService) {
    blinkService.shutdownNow();
  }
}

public synchronized void release(){
  index.clear();
}

public void configure(){
  if (cmdPrefix != null) {
    prefix=cmdPrefix.split(" ");
  }
}

protected void writeTransform(AffineTransform t) throws IOException {
  pageStream.matrix(t);
}

public void testSignumPositive(){
  String a="92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  assertEquals("incorrect value",1,aNumber.signum());
}

public PainterChain prependPainter(Painter p){
  Painter[] newChain=new Painter[chain.length + 1];
  System.arraycopy(chain,1,newChain,0,chain.length);
  newChain[0]=p;
  return new PainterChain(newChain);
}

@Nullable private Operator.Kind parseOperator(TokenStream tokens){
  if (tokens.has("=")) {
    tokens.next();
    tokens.expect("=");
    return Operator.Kind.EQUALS;
  }
  if (tokens.has("!")) {
    tokens.next();
    tokens.expect("=");
    return Operator.Kind.NOT_EQUALS;
  }
  if (tokens.has("<")) {
    tokens.next();
    if (tokens.has("=")) {
      tokens.next();
      return Operator.Kind.LESS_EQUAL;
    }
    return Operator.Kind.LESS;
  }
  if (tokens.has(">")) {
    tokens.next();
    if (tokens.has("=")) {
      tokens.next();
      return Operator.Kind.GREATER_EQUAL;
    }
    return Operator.Kind.GREATER;
  }
  return null;
}

@Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {
  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);
}

private void queueUpSyncs(final Cursor contactsCursor){
  ContactSyncEntry syncEntry=null;
  while (contactsCursor.moveToNext()) {
    if (syncEntry == null) {
      syncEntry=new ContactSyncEntry(UPLOAD_BATCH_SIZE);
    }
    final String number=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
    final String name=contactsCursor.getString(contactsCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
    if (!TextUtils.isEmpty(number)) {
      syncEntry.addNumber(numberToNational(number));
      syncEntry.addName(name);
      if (syncEntry.isFull()) {
        Logger.d(TAG,"Adding sync entry to queue");
        mSyncQueue.add(syncEntry);
        syncEntry=null;
      }
    }
  }
}

public synchronized void removeSeries(int index){
  mSeries.remove(index);
}

public static void addGlue(JComponent b,int layout){
  b.add(getAxis(b,layout) == BoxLayout.X_AXIS ? Box.createHorizontalGlue() : Box.createVerticalGlue());
}

public static void writeResultToFile(Result result,String fname) throws Exception {
  PrintWriter outer=new PrintWriter(new BufferedWriter(new FileWriter(fname)));
  outer.write(result.toString());
  outer.close();
}

private JMXProvider(){
}

protected void writeBlockletInfoToFile(List<BlockletInfoColumnar> infoList,FileChannel channel,String filePath) throws CarbonDataWriterException {
  try {
    long currentPosition=channel.size();
    CarbonFooterWriter writer=new CarbonFooterWriter(filePath);
    FileFooter convertFileMeta=CarbonMetadataUtil.convertFileFooter(infoList,localCardinality.length,localCardinality,thriftColumnSchemaList,segmentProperties);
    fillBlockIndexInfoDetails(infoList,convertFileMeta.getNum_rows(),filePath,currentPosition);
    writer.writeFooter(convertFileMeta,currentPosition);
  }
 catch (  IOException e) {
    throw new CarbonDataWriterException("Problem while writing the carbon file: ",e);
  }
}

private static void renderTree(Tree tree,int indent,boolean parentLabelNull,boolean firstSibling,boolean leftSiblingPreTerminal,boolean topLevel,StringBuilder sb){
  boolean suppressIndent=(parentLabelNull || (firstSibling && tree.isPreTerminal()) || (leftSiblingPreTerminal && tree.isPreTerminal()));
  if (suppressIndent) {
    sb.append(' ');
  }
 else {
    if (!topLevel) {
      sb.append('\n');
    }
    for (int i=0; i < indent; i++) {
      sb.append("  ");
    }
  }
  if (tree.isLeaf() || tree.isPreTerminal()) {
    renderFlat(tree,sb);
    return;
  }
  sb.append('(');
  sb.append(tree.getLabel());
  renderChildren(tree.getChildren(),indent + 1,false,sb);
  sb.append(')');
}

public static StringBuffer replaceRegex(StringBuffer original,String regex,String replace,boolean CASE_INSENSITIVE){
  int flags=0;
  if (CASE_INSENSITIVE)   flags=Pattern.CASE_INSENSITIVE;
  Pattern p=Pattern.compile(regex,flags);
  Matcher m=p.matcher(original);
  StringBuffer newSB=new StringBuffer();
  boolean result=m.find();
  while (result) {
    m.appendReplacement(newSB,replace);
    result=m.find();
  }
  m.appendTail(newSB);
  return newSB;
}

public boolean equalsChars(String a,int ai,String b,int bi,boolean ignoreCase){
  char ca=a.charAt(ai);
  char cb=b.charAt(bi);
  if (ignoreCase) {
    ca=Character.toUpperCase(ca);
    cb=Character.toUpperCase(cb);
  }
  return ca == cb;
}

private void adjustBackingFileLength(byte[] buffer,long index) throws IOException {
  if (buffer == null || buffer.length == 0) {
    throw new IOException("Buffer null or empty!");
  }
  long newsize=fHeader.headerSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE+ buffer.length+ CHUNK_TLEN;
  if (newsize > realLength()) {
    backingRandomAccessFile.setLength(newsize);
  }
}

private static Collection<Collection<DsnNetPin>> create_ordered_subnets(Collection<DsnNetPin> p_pin_list){
  Collection<Collection<DsnNetPin>> result=new LinkedList<Collection<DsnNetPin>>();
  if (p_pin_list.isEmpty()) {
    return result;
  }
  Iterator<DsnNetPin> it=p_pin_list.iterator();
  DsnNetPin prev_pin=it.next();
  while (it.hasNext()) {
    DsnNetPin next_pin=it.next();
    Set<DsnNetPin> curr_subnet_pin_list=new java.util.TreeSet<DsnNetPin>();
    curr_subnet_pin_list.add(prev_pin);
    curr_subnet_pin_list.add(next_pin);
    result.add(curr_subnet_pin_list);
    prev_pin=next_pin;
  }
  return result;
}

@Override public void run(int connID,String[] args){
  if (args.length == 1) {
    server.sendServerChat(connID,"Server Side nova command");
    server.sendServerChat(connID,"/nova print : will print all of your current nova networks and unlinked units.");
    server.sendServerChat(connID,"/nova print id : will print the network status for the Unit with ID id.");
    server.sendServerChat(connID,"/nova link id1 id2 : will link the units with ID id1 and id2.");
    server.sendServerChat(connID,"+++Will Disconnect them from all prior nets.");
    server.sendServerChat(connID,"/nova link id1 id2 id3 : will link the three units with ID id1 id2 and id3.");
    server.sendServerChat(connID,"+++Will Disconnect them from all prior nets.");
    server.sendServerChat(connID,"/nova unlink : will unlink all your novaCEWS units.");
    server.sendServerChat(connID,"/nova unlink id : will unlink unit with ID id from all nova networks.");
  }
  try {
    if (args.length > 1) {
      String cmd=args[1];
      if (cmd.equalsIgnoreCase("print")) {
        if (args.length > 2) {
          int id=Integer.parseInt(args[2]);
          server.sendServerChat(connID,strListNetwork(connID,id,true));
        }
 else {
          server.sendServerChat(connID,strListNetworks(connID,true));
        }
      }
 else       if (cmd.equalsIgnoreCase("printcurrent")) {
        if (args.length > 2) {
          int id=Integer.parseInt(args[2]);
          server.sendServerChat(connID,strListNetwork(connID,id,false));
        }
 else {
          server.sendServerChat(connID,strListNetworks(connID,false));
        }
      }
 else       if (cmd.equalsIgnoreCase("debug")) {
        debug(connID,server);
      }
 else       if (cmd.equalsIgnoreCase("link")) {
        if (args.length > 4) {
          int id1=Integer.parseInt(args[2]);
          int id2=Integer.parseInt(args[3]);
          int id3=Integer.parseInt(args[4]);
          server.sendServerChat(connID,strLink3(connID,id1,id2,id3));
        }
 else         if (args.length > 3) {
          int id1=Integer.parseInt(args[2]);
          int id2=Integer.parseInt(args[3]);
          server.sendServerChat(connID,strLink2(connID,id1,id2));
        }
      }
 else       if (cmd.equalsIgnoreCase("unlink")) {
        if (args.length > 2) {
          int id=Integer.parseInt(args[2]);
          server.sendServerChat(connID,strUnlinkID(connID,id));
        }
 else {
          server.sendServerChat(connID,strUnlinkAll(connID));
        }
      }
 else {
        String failstr=args[0];
        for (int i=1; i < args.length; i++) {
          failstr+=" " + args[i];
        }
        server.sendServerChat(connID,"I do not understand " + failstr + ". /nova for help.\n");
      }
    }
  }
 catch (  NumberFormatException nfe) {
    server.sendServerChat(connID,"Error parsing the command. NFE");
  }
catch (  NullPointerException npe) {
    server.sendServerChat(connID,"Error parsing the command. NPE");
  }
catch (  IndexOutOfBoundsException ioobe) {
    server.sendServerChat(connID,"Error parsing the command. IOOBE");
  }
}

private char[] parseEntityReference() throws IOException {
  int pos=strpos;
  if ((ch=readCh()) == '#') {
    int n=0;
    ch=readCh();
    if ((ch >= '0') && (ch <= '9') || ch == 'x' || ch == 'X') {
      if ((ch >= '0') && (ch <= '9')) {
        while ((ch >= '0') && (ch <= '9')) {
          n=(n * 10) + ch - '0';
          ch=readCh();
        }
      }
 else {
        ch=readCh();
        char lch=(char)Character.toLowerCase(ch);
        while ((lch >= '0') && (lch <= '9') || (lch >= 'a') && (lch <= 'f')) {
          if (lch >= '0' && lch <= '9') {
            n=(n * 16) + lch - '0';
          }
 else {
            n=(n * 16) + lch - 'a' + 10;
          }
          ch=readCh();
          lch=(char)Character.toLowerCase(ch);
        }
      }
switch (ch) {
case '\n':
        ln++;
      ch=readCh();
    lfCount++;
  break;
case '\r':
ln++;
if ((ch=readCh()) == '\n') {
ch=readCh();
crlfCount++;
}
 else {
crCount++;
}
break;
case ';':
ch=readCh();
break;
}
char data[]=mapNumericReference(n);
return data;
}
addString('#');
if (!parseIdentifier(false)) {
error("ident.expected");
strpos=pos;
char data[]={'&','#'};
return data;
}
}
 else if (!parseIdentifier(false)) {
char data[]={'&'};
return data;
}
boolean semicolon=false;
switch (ch) {
case '\n':
ln++;
ch=readCh();
lfCount++;
break;
case '\r':
ln++;
if ((ch=readCh()) == '\n') {
ch=readCh();
crlfCount++;
}
 else {
crCount++;
}
break;
case ';':
semicolon=true;
ch=readCh();
break;
}
String nm=getString(pos);
Entity ent=dtd.getEntity(nm);
if (!strict && (ent == null)) {
ent=dtd.getEntity(nm.toLowerCase());
}
if ((ent == null) || !ent.isGeneral()) {
if (nm.length() == 0) {
error("invalid.entref",nm);
return new char[0];
}
String str="&" + nm + (semicolon ? ";" : "");
char b[]=new char[str.length()];
str.getChars(0,b.length,b,0);
return b;
}
return ent.getData();
}

private static String createJsMethodInvocationExpression(String methodName,boolean isStatic,String... paramNames){
  StringBuilder sb=new StringBuilder();
  sb.append(isStatic ? WND : THIS);
  sb.append(".");
  sb.append(methodName);
  sb.append("(");
  for (int i=0; i < paramNames.length; i++) {
    if (i != 0) {
      sb.append(", ");
    }
    sb.append(paramNames[i]);
  }
  sb.append(");");
  return sb.toString();
}

public void doDoubleClickAction(){
  doDoubleClickAction(null);
}

public static Node serializableInstance(){
  return new GraphNode("X");
}

protected void dropTables(List<String> dropTableNames,SQLiteDatabase db){
  if (dropTableNames != null && !dropTableNames.isEmpty()) {
    String[] dropTableSQLS=new String[dropTableNames.size()];
    for (int i=0; i < dropTableSQLS.length; i++) {
      dropTableSQLS[i]=generateDropTableSQL(dropTableNames.get(i));
    }
    execute(dropTableSQLS,db);
  }
}

private Segment createDiskSegment(SegmentDescriptor descriptor){
  File segmentFile=SegmentFile.createSegmentFile(name,storage.directory(),descriptor.id(),descriptor.version());
  Buffer buffer=FileBuffer.allocate(segmentFile,Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxSegmentSize()),Integer.MAX_VALUE);
  descriptor.copyTo(buffer);
  Segment segment=new Segment(new SegmentFile(segmentFile),buffer.slice(),descriptor,createIndex(descriptor),new OffsetPredicate(),serializer.clone(),this);
  LOGGER.debug("Created segment: {}",segment);
  return segment;
}

public Boolean exists(String email){
  for (  Person person : people) {
    if (email.equals(person.getEmail())) {
      return true;
    }
  }
  return false;
}

public synchronized boolean removeAll(Collection c){
  Object[] elements=getArray();
  int len=elements.length;
  if (len != 0) {
    int newlen=0;
    Object[] temp=new Object[len];
    for (int i=0; i < len; ++i) {
      Object element=elements[i];
      if (!c.contains(element))       temp[newlen++]=element;
    }
    if (newlen != len) {
      setArray(copyOfRange(temp,0,newlen,Object[].class));
      return true;
    }
  }
  return false;
}

public long convertPolarStereographicToGeodetic(double Easting,double Northing){
  double dy=0, dx=0;
  double rho=0;
  double t;
  double PHI, sin_PHI;
  double tempPHI=0.0;
  double essin;
  double pow_es;
  double delta_radius;
  long Error_Code=POLAR_NO_ERROR;
  double min_easting=Polar_False_Easting - Polar_Delta_Easting;
  double max_easting=Polar_False_Easting + Polar_Delta_Easting;
  double min_northing=Polar_False_Northing - Polar_Delta_Northing;
  double max_northing=Polar_False_Northing + Polar_Delta_Northing;
  if (Easting > max_easting || Easting < min_easting) {
    Error_Code|=POLAR_EASTING_ERROR;
  }
  if (Northing > max_northing || Northing < min_northing) {
    Error_Code|=POLAR_NORTHING_ERROR;
  }
  if (Error_Code == POLAR_NO_ERROR) {
    dy=Northing - Polar_False_Northing;
    dx=Easting - Polar_False_Easting;
    rho=Math.sqrt(dx * dx + dy * dy);
    delta_radius=Math.sqrt(Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing);
    if (rho > delta_radius) {
      Error_Code|=POLAR_RADIUS_ERROR;
    }
  }
  if (Error_Code == POLAR_NO_ERROR) {
    if ((dy == 0.0) && (dx == 0.0)) {
      Latitude=PI_OVER_2;
      Longitude=Polar_Origin_Long;
    }
 else {
      if (Southern_Hemisphere != 0) {
        dy*=-1.0;
        dx*=-1.0;
      }
      if (Math.abs(Math.abs(Polar_Origin_Lat) - PI_OVER_2) > 1.0e-10)       t=rho * tc / (Polar_a_mc);
 else       t=rho * e4 / (two_Polar_a);
      PHI=PI_OVER_2 - 2.0 * Math.atan(t);
      while (Math.abs(PHI - tempPHI) > 1.0e-10) {
        tempPHI=PHI;
        sin_PHI=Math.sin(PHI);
        essin=es * sin_PHI;
        pow_es=Math.pow((1.0 - essin) / (1.0 + essin),es_OVER_2);
        PHI=PI_OVER_2 - 2.0 * Math.atan(t * pow_es);
      }
      Latitude=PHI;
      Longitude=Polar_Origin_Long + Math.atan2(dx,-dy);
      if (Longitude > PI)       Longitude-=TWO_PI;
 else       if (Longitude < -PI)       Longitude+=TWO_PI;
      if (Latitude > PI_OVER_2)       Latitude=PI_OVER_2;
 else       if (Latitude < -PI_OVER_2)       Latitude=-PI_OVER_2;
      if (Longitude > PI)       Longitude=PI;
 else       if (Longitude < -PI)       Longitude=-PI;
    }
    if (Southern_Hemisphere != 0) {
      Latitude*=-1.0;
      Longitude*=-1.0;
    }
  }
  return (Error_Code);
}

public void assertURIEquals(String assertID,String scheme,String path,String host,String file,String name,String query,String fragment,Boolean isAbsolute,String actual){
  assertNotNull(assertID,actual);
  String uri=actual;
  int lastPound=actual.lastIndexOf("#");
  String actualFragment="";
  if (lastPound != -1) {
    uri=actual.substring(0,lastPound);
    actualFragment=actual.substring(lastPound + 1);
  }
  if (fragment != null) {
    assertEquals(assertID,fragment,actualFragment);
  }
  int lastQuestion=uri.lastIndexOf("?");
  String actualQuery="";
  if (lastQuestion != -1) {
    uri=actual.substring(0,lastQuestion);
    actualQuery=actual.substring(lastQuestion + 1);
  }
  if (query != null) {
    assertEquals(assertID,query,actualQuery);
  }
  int firstColon=uri.indexOf(":");
  int firstSlash=uri.indexOf("/");
  String actualPath=uri;
  String actualScheme="";
  if (firstColon != -1 && firstColon < firstSlash) {
    actualScheme=uri.substring(0,firstColon);
    actualPath=uri.substring(firstColon + 1);
  }
  if (scheme != null) {
    assertEquals(assertID,scheme,actualScheme);
  }
  if (path != null) {
    assertEquals(assertID,path,actualPath);
  }
  if (host != null) {
    String actualHost="";
    if (actualPath.startsWith("//")) {
      int termSlash=actualPath.indexOf("/",2);
      actualHost=actualPath.substring(0,termSlash);
    }
    assertEquals(assertID,host,actualHost);
  }
  String actualFile=actualPath;
  if (file != null || name != null) {
    int finalSlash=actualPath.lastIndexOf("/");
    if (finalSlash != -1) {
      actualFile=actualPath.substring(finalSlash + 1);
    }
    if (file != null) {
      assertEquals(assertID,file,actualFile);
    }
  }
  if (name != null) {
    String actualName=actualFile;
    int finalPeriod=actualFile.lastIndexOf(".");
    if (finalPeriod != -1) {
      actualName=actualFile.substring(0,finalPeriod);
    }
    assertEquals(assertID,name,actualName);
  }
  if (isAbsolute != null) {
    assertEquals(assertID,isAbsolute.booleanValue(),actualPath.startsWith("/") || actualPath.startsWith("file:/"));
  }
}

private double maxIgnoreNaN(double a,double b){
  if (Double.isNaN(a)) {
    return b;
  }
  if (Double.isNaN(b)) {
    return a;
  }
 else {
    return Math.max(a,b);
  }
}

public void crabDownDirBlockForModification(BlockId blk){
  lockTbl.xLock(blk,txNum);
  writenIndexBlks.add(blk);
}

private static void removeReferenceToConnection(final HttpConnectionWithReference connection){
synchronized (REFERENCE_TO_CONNECTION_SOURCE) {
    REFERENCE_TO_CONNECTION_SOURCE.remove(connection.reference);
  }
}

public boolean matchesWord(){
  return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos));
}

public VacuumEnvironment(){
  Random r=new Random();
  envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty);
}

public void generate(BatchEnvironment env,ClassDefinition cdef,File destDir){
  RemoteClass remoteClass=RemoteClass.forClass(env,cdef);
  if (remoteClass == null)   return;
  RMIGenerator gen;
  try {
    gen=new RMIGenerator(env,cdef,destDir,remoteClass,version);
  }
 catch (  ClassNotFound e) {
    env.error(0,"rmic.class.not.found",e.name);
    return;
  }
  gen.generate();
}

public BaseViewHolder addOnLongClickListener(int viewId){
  itemChildLongClickViewIds.add(viewId);
  return this;
}

public void remove(final CreatureRespawnPoint point){
  respawnPoints.remove(point);
}

public Photo(File d,File f) throws IOException, NumberFormatException {
  ExtendedExifInterface exif=new ExtendedExifInterface(f.toString());
  String lonStr=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);
  if (lonStr == null) {
    throw new IOException("No EXIF tag");
  }
  float lonf=convertToDegree(lonStr);
  String lonRef=exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF);
  if (lonRef != null && !lonRef.equals("E")) {
    lonf=-lonf;
  }
  float latf=convertToDegree(exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE));
  String latRef=exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE_REF);
  if (latRef != null && !latRef.equals("N")) {
    latf=-latf;
  }
  lat=(int)(latf * 1E7d);
  lon=(int)(lonf * 1E7d);
  Log.d("Photo","lat: " + lat + " lon: "+ lon);
  ref=d.getAbsolutePath() + "/" + f.getName();
  String dir=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION);
  if (dir != null) {
    direction=(int)Double.parseDouble(dir);
    directionRef=exif.getAttribute(ExtendedExifInterface.TAG_GPS_IMG_DIRECTION_REF);
    Log.d("Photo","dir " + dir + " direction "+ direction+ " ref "+ directionRef);
  }
}

public static long bytesToLong(final byte[] bytes){
  final ByteBuffer buffer=ByteBuffer.allocate(8);
  buffer.put(bytes,0,8);
  buffer.flip();
  return buffer.getLong();
}

protected int unicodeEscapeLexer(int c) throws IOException {
  int ret=0;
  c=in.read();
  code.clear();
  try {
    for (int i=0; i < 4; i++) {
      c=in.read();
      if (isEndOfFile(c) || isEndOfLine(c)) {
        throw new NumberFormatException("number too short");
      }
      code.append((char)c);
    }
    ret=Integer.parseInt(code.toString(),16);
  }
 catch (  NumberFormatException e) {
    throw new IOException("(line " + getLineNumber() + ") Wrong unicode escape sequence found '"+ code.toString()+ "'"+ e.toString());
  }
  return ret;
}

@Override public void mouseEntered(MouseEvent evt){
  delegate.mouseMoved(evt);
}

public static String removeFormatting(String line){
  int length=line.length();
  StringBuilder buffer=new StringBuilder();
  for (int i=0; i < length; i++) {
    char ch=line.charAt(i);
    if (ch != '\u000f' && ch != '\u0002' && ch != '\u001f' && ch != '\u0016')     buffer.append(ch);
  }
  return buffer.toString();
}

public void testNegPosFirstShorter(){
  String numA="-293478573489347658763745839457637";
  String numB="2837462783428374767845648748973847593874837948575684767";
  String res="-2837462783428374767845615168483972194300564226167553532";
  BigInteger aNumber=new BigInteger(numA);
  BigInteger bNumber=new BigInteger(numB);
  BigInteger result=aNumber.xor(bNumber);
  assertTrue(res.equals(result.toString()));
}

public void print(){
  Object[] iterChargingTimes=chargingTimes.toArray();
  Arrays.sort(iterChargingTimes);
  for (int i=0; i < iterChargingTimes.length; i++) {
    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];
    curItem.print();
  }
}

public boolean isEmpty(){
  return rdns.isEmpty();
}

private void writeLocalCSV(MedtronicSensorRecord mostRecentData,Context context){
  try {
    if (mostRecentData == null || mostRecentData.bGValue == null)     log.debug("writeLocalCSV SAVING  EMPTY!!");
 else     log.debug("writeLocalCSV SAVING --> " + mostRecentData.bGValue);
    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(new File(context.getFilesDir(),"save.bin")));
    oos.writeObject(mostRecentData);
    oos.flush();
    oos.close();
  }
 catch (  Exception e) {
    Log.e(TAG,"write to OutputStream failed",e);
    log.error("write to OutputStream failed",e);
  }
}

public ServiceConfig createOrganizationConfig(String orgName,Map attrs) throws SMSException, SSOException {
  validateSSM();
  ServiceSchemaImpl ss=ssm.getSchema(SchemaType.ORGANIZATION);
  if (ss == null) {
    String[] args={serviceName};
    throw (new SMSException(IUMSConstants.UMS_BUNDLE_NAME,"sms-service-does-not-have-org-schema",args));
  }
  String orgdn=DNMapper.orgNameToDN(orgName);
  CreateServiceConfig.checkBaseNodesForOrg(token,orgdn,serviceName,version);
  String orgDN=scm.constructServiceConfigDN(SMSUtils.DEFAULT,CreateServiceConfig.ORG_CONFIG_NODE,orgdn);
  try {
    CachedSMSEntry cEntry=CachedSMSEntry.getInstance(token,orgDN);
    if (cEntry.isDirty()) {
      cEntry.refresh();
    }
    if (cEntry.isNewEntry()) {
      CreateServiceConfig.createSubConfigEntry(token,orgDN,ss,null,null,attrs,orgName);
      if (ServiceManager.isCoexistenceMode()) {
        String smsDN=DNMapper.orgNameToDN(orgName);
        OrgConfigViaAMSDK amsdk=new OrgConfigViaAMSDK(token,DNMapper.realmNameToAMSDKName(smsDN),smsDN);
        amsdk.assignService(serviceName);
      }
    }
 else     if (attrs != null && !attrs.isEmpty()) {
      ServiceConfig sc=getOrganizationConfig(orgName,null);
      sc.setAttributes(attrs);
    }
  }
 catch (  ServiceAlreadyExistsException slee) {
  }
  return (getOrganizationConfig(orgName,null));
}

public void deleteAuthenticationDomain(String realm,String cotName) throws AMConsoleException {
  String[] param={realm,cotName};
  logEvent("ATTEMPT_DELETE_AUTH_DOMAINS",param);
  try {
    CircleOfTrustManager manager=getCircleOfTrustManager();
    manager.deleteCircleOfTrust(realm,cotName);
    logEvent("SUCCEED_DELETE_AUTH_DOMAIN",param);
  }
 catch (  COTException e) {
    String strError=getErrorString(e);
    String[] paramsEx={realm,cotName,strError};
    logEvent("FEDERATION_EXCEPTION_DELETE_AUTH_DOMAIN",paramsEx);
    throw new AMConsoleException(strError);
  }
}

protected void addSourceCodeRemark(TestSolution testSolution,Element element,String messageCode,EvidenceElement evidenceElement){
  if (evidenceElement != null) {
    Collection<EvidenceElement> evidenceElementList=new ArrayList<>();
    evidenceElementList.add(evidenceElement);
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode,evidenceElementList);
  }
 else {
    processRemarkService.addSourceCodeRemarkOnElement(testSolution,element,messageCode);
  }
}

void eventPreModify(ActionType type,long position,boolean isSingle){
  if (type != currentActionType || !isSingle || System.currentTimeMillis() - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && actionExclusiveEnd() != position || type == ActionType.DELETE && actionPosition() != position && actionPosition() - 1L != position) {
    startAction(type,isSingle);
  }
 else {
    isBackspace=actionPosition() > position;
  }
  if (isSingle && type == ActionType.INSERT) {
    updateNewRange(position);
    previousTime=System.currentTimeMillis();
  }
}

private byte[] decodePEM(InputStream inStream,byte[] boundary_suffix) throws IOException {
  int ch;
  for (int i=1; i < PEM_BEGIN.length; ++i) {
    if (PEM_BEGIN[i] != (ch=inStream.read())) {
      throw new IOException("Incorrect PEM encoding: '-----BEGIN" + ((boundary_suffix == null) ? "" : new String(boundary_suffix)) + "' is expected as opening delimiter boundary.");
    }
  }
  if (boundary_suffix == null) {
    while ((ch=inStream.read()) != '\n') {
      if (ch == -1) {
        throw new IOException("Incorrect PEM encoding: EOF before content");
      }
    }
  }
 else {
    for (int i=0; i < boundary_suffix.length; i++) {
      if (boundary_suffix[i] != inStream.read()) {
        throw new IOException("Incorrect PEM encoding: '-----BEGIN" + new String(boundary_suffix) + "' is expected as opening delimiter boundary.");
      }
    }
    if ((ch=inStream.read()) == '\r') {
      ch=inStream.read();
    }
    if (ch != '\n') {
      throw new IOException("Incorrect PEM encoding: newline expected after " + "opening delimiter boundary");
    }
  }
  int size=1024;
  byte[] buff=new byte[size];
  int index=0;
  while ((ch=inStream.read()) != '-') {
    if (ch == -1) {
      throw new IOException("Incorrect Base64 encoding: EOF without closing delimiter");
    }
    buff[index++]=(byte)ch;
    if (index == size) {
      byte[] newbuff=new byte[size + 1024];
      System.arraycopy(buff,0,newbuff,0,size);
      buff=newbuff;
      size+=1024;
    }
  }
  if (buff[index - 1] != '\n') {
    throw new IOException("Incorrect Base64 encoding: newline expected before " + "closing boundary delimiter");
  }
  for (int i=1; i < PEM_END.length; ++i) {
    if (PEM_END[i] != inStream.read()) {
      throw badEnd(boundary_suffix);
    }
  }
  if (boundary_suffix == null) {
    while (((ch=inStream.read()) != -1) && (ch != '\n') && (ch != '\r')) {
    }
  }
 else {
    for (int i=0; i < boundary_suffix.length; i++) {
      if (boundary_suffix[i] != inStream.read()) {
        throw badEnd(boundary_suffix);
      }
    }
  }
  inStream.mark(1);
  while (((ch=inStream.read()) != -1) && (ch == '\n' || ch == '\r')) {
    inStream.mark(1);
  }
  inStream.reset();
  buff=Base64.decode(buff,index);
  if (buff == null) {
    throw new IOException("Incorrect Base64 encoding");
  }
  return buff;
}

void saveAsync(DocumentEntity entity,Consumer<DocumentEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;

public boolean markSupported(){
  return fInputStream.markSupported();
}

private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){
  StringBuilder tmp=new StringBuilder(count);
  int submode=initialSubmode;
  int idx=0;
  while (true) {
    char ch=msg.charAt(startpos + idx);
switch (submode) {
case SUBMODE_ALPHA:
      if (isAlphaUpper(ch)) {
        if (ch == ' ') {
          tmp.append((char)26);
        }
 else {
          tmp.append((char)(ch - 65));
        }
      }
 else {
        if (isAlphaLower(ch)) {
          submode=SUBMODE_LOWER;
          tmp.append((char)27);
          continue;
        }
 else         if (isMixed(ch)) {
          submode=SUBMODE_MIXED;
          tmp.append((char)28);
          continue;
        }
 else {
          tmp.append((char)29);
          tmp.append((char)PUNCTUATION[ch]);
          break;
        }
      }
    break;
case SUBMODE_LOWER:
  if (isAlphaLower(ch)) {
    if (ch == ' ') {
      tmp.append((char)26);
    }
 else {
      tmp.append((char)(ch - 97));
    }
  }
 else {
    if (isAlphaUpper(ch)) {
      tmp.append((char)27);
      tmp.append((char)(ch - 65));
      break;
    }
 else     if (isMixed(ch)) {
      submode=SUBMODE_MIXED;
      tmp.append((char)28);
      continue;
    }
 else {
      tmp.append((char)29);
      tmp.append((char)PUNCTUATION[ch]);
      break;
    }
  }
break;
case SUBMODE_MIXED:
if (isMixed(ch)) {
tmp.append((char)MIXED[ch]);
}
 else {
if (isAlphaUpper(ch)) {
  submode=SUBMODE_ALPHA;
  tmp.append((char)28);
  continue;
}
 else if (isAlphaLower(ch)) {
  submode=SUBMODE_LOWER;
  tmp.append((char)27);
  continue;
}
 else {
  if (startpos + idx + 1 < count) {
    char next=msg.charAt(startpos + idx + 1);
    if (isPunctuation(next)) {
      submode=SUBMODE_PUNCTUATION;
      tmp.append((char)25);
      continue;
    }
  }
  tmp.append((char)29);
  tmp.append((char)PUNCTUATION[ch]);
}
}
break;
default :
if (isPunctuation(ch)) {
tmp.append((char)PUNCTUATION[ch]);
}
 else {
submode=SUBMODE_ALPHA;
tmp.append((char)29);
continue;
}
}
idx++;
if (idx >= count) {
break;
}
}
char h=0;
int len=tmp.length();
for (int i=0; i < len; i++) {
boolean odd=(i % 2) != 0;
if (odd) {
h=(char)((h * 30) + tmp.charAt(i));
sb.append(h);
}
 else {
h=tmp.charAt(i);
}
}
if ((len % 2) != 0) {
sb.append((char)((h * 30) + 29));
}
return submode;
}

public String resolveParentRelationName(String parentName,Object parent,String childName,Object child){
  return parentName;
}

public ByteColumn(int nrows,int capacity,byte defaultValue){
  super(byte.class,new Byte(defaultValue));
  if (capacity < nrows) {
    throw new IllegalArgumentException("Capacity value can not be less than the row count.");
  }
  m_values=new byte[capacity];
  Arrays.fill(m_values,defaultValue);
  m_size=nrows;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public RelNode convertSelect(SqlSelect select,boolean top){
  final SqlValidatorScope selectScope=validator.getWhereScope(select);
  final Blackboard bb=createBlackboard(selectScope,null,top);
  convertSelectImpl(bb,select);
  return bb.root;
}

public static Object executeScript(String filePath,String functionName,Map<String,Object> context){
  return executeScript(filePath,functionName,context,new Object[]{context});
}

public XercesHTML2DocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {
  super(settings);
  try {
    ClassLoader classLoader=ClassLoader.getSystemClassLoader();
    Class htmlBuilderClass=classLoader.loadClass("org.apache.html2.dom.HTMLBuilder");
    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);
    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);
    Class htmlDOMImpl=classLoader.loadClass("org.apache.html2.dom.HTMLDOMImplementationImpl");
    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);
    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);
    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");
    factory=(SAXParserFactory)saxFactoryClass.newInstance();
  }
 catch (  InvocationTargetException ex) {
    throw new DOMTestIncompatibleException(ex.getTargetException(),null);
  }
catch (  Exception ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
  if (settings != null) {
    for (int i=0; i < settings.length; i++) {
    }
  }
  try {
    factory.newSAXParser();
  }
 catch (  ParserConfigurationException ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
catch (  SAXException ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
}

private static String formatSampleRate(int rate){
  return MHZ_FORMATTER.format((double)rate / 1E6d);
}

public final boolean isClosed(){
  return closed.get();
}

void start(){
  this.running=true;
  Thread thread=new Thread(this,"IceConnector@" + hashCode());
  thread.setDaemon(true);
  thread.start();
}

TypeSimplifier(Types typeUtils,String packageName,Set<TypeMirror> types,TypeMirror base){
  this.typeUtils=typeUtils;
  Set<TypeMirror> typesPlusBase=new TypeMirrorSet(types);
  if (base != null) {
    typesPlusBase.add(base);
  }
  Set<TypeMirror> referenced=referencedClassTypes(typeUtils,typesPlusBase);
  Set<TypeMirror> defined=nonPrivateDeclaredTypes(typeUtils,base);
  this.imports=findImports(typeUtils,packageName,referenced,defined);
}

public static byte[] escape(final byte[] bytes){
  final byte[] temp=new byte[2 * bytes.length];
  int currentPosition=0;
  for (  final byte b : bytes) {
    if (b == ESCAPE_CHAR) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=REPLACEMENT_CHAR;
    }
 else     if (b == DELIMITER) {
      temp[currentPosition++]=ESCAPE_CHAR;
      temp[currentPosition++]=ESCAPE_CHAR;
    }
 else {
      temp[currentPosition++]=b;
    }
  }
  final byte[] escaped=new byte[currentPosition];
  System.arraycopy(temp,0,escaped,0,currentPosition);
  return escaped;
}

public final native String name();

protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){
  if (points.size() > 1) {
    float previousPointX=points.get(0);
    float previousPointY=points.get(1);
    for (int k=0; k < points.size(); k+=2) {
      if (k == 2) {
        if (Math.abs(points.get(2) - points.get(0)) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(3) - points.get(1)) > renderer.getDisplayChartValuesDistance()) {
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex)),points.get(0),points.get(1) - renderer.getChartValuesSpacing(),paint,0);
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + 1)),points.get(2),points.get(3) - renderer.getChartValuesSpacing(),paint,0);
          previousPointX=points.get(2);
          previousPointY=points.get(3);
        }
      }
 else       if (k > 2) {
        if (Math.abs(points.get(k) - previousPointX) > renderer.getDisplayChartValuesDistance() || Math.abs(points.get(k + 1) - previousPointY) > renderer.getDisplayChartValuesDistance()) {
          drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0);
          previousPointX=points.get(k);
          previousPointY=points.get(k + 1);
        }
      }
    }
  }
 else {
    for (int k=0; k < points.size(); k+=2) {
      drawText(canvas,getLabel(renderer.getChartValuesFormat(),series.getY(startIndex + k / 2)),points.get(k),points.get(k + 1) - renderer.getChartValuesSpacing(),paint,0);
    }
  }
}

public static String toString(Document hostDoc) throws IOException {
  try {
    StringWriter out=new StringWriter();
    DOMSource domSource=new DOMSource(hostDoc);
    StreamResult streamResult=new StreamResult(out);
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer serializer=tf.newTransformer();
    serializer.setOutputProperty(OutputKeys.ENCODING,ENC.name());
    serializer.setOutputProperty(OutputKeys.METHOD,"html");
    serializer.setOutputProperty(OutputKeys.INDENT,"no");
    serializer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HtmlDomUtil.HTML_STRICT);
    serializer.transform(domSource,streamResult);
    return out.toString();
  }
 catch (  TransformerException e) {
    IOException r=new IOException("Error transforming page");
    r.initCause(e);
    throw r;
  }
}

public MongoClient clientForMembers(ServerAddress... seeds){
  List<ServerAddress> addresses=new ArrayList<>();
  for (  ServerAddress seedAddress : seeds) {
    if (seedAddress != null)     addresses.add(seedAddress);
  }
  return clientForMembers(addresses);
}

public static boolean stringToBooleanValue(String str) throws ExpressionException {
  str=StringUtil.toLowerCase(str.trim());
  if (str.equals("yes") || str.equals("true"))   return true;
 else   if (str.equals("no") || str.equals("false"))   return false;
  throw new CasterException("Can't cast String [" + str + "] to boolean");
}

public boolean hasMoreWork(){
  return !workList.isEmpty();
}

protected synchronized void engineSetSeed(byte[] seed){
  if (seed == null) {
    throw new NullPointerException("seed == null");
  }
  if (state == NEXT_BYTES) {
    System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET);
  }
  state=SET_SEED;
  if (seed.length != 0) {
    updateSeed(seed);
  }
}

public void generateClassFile(OutputStream os){
  ClassWriter cw=new SootASMClassWriter(ClassWriter.COMPUTE_FRAMES);
  cv=cw;
  generateByteCode();
  try {
    os.write(cw.toByteArray());
  }
 catch (  IOException e) {
    throw new RuntimeException("Could not write class file in the ASM-backend!",e);
  }
}

private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){
  String value=(String)args.get(EMBEDASCFF);
  boolean useCFF=true;
  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;
  if (value != null) {
    useCFF=Boolean.parseBoolean(value.trim());
  }
  return useCFF;
}

public static void main(String[] args){
  new GeneratorTester(args);
}

private String mosesize(String feature){
  if (joshuaConfiguration.moses) {
    if (feature.startsWith("tm_") || feature.startsWith("lm_"))     return feature.replace("_","-");
  }
  return feature;
}

public static int calcTextHeight(Paint paint,String demoText){
  Rect r=new Rect();
  paint.getTextBounds(demoText,0,demoText.length(),r);
  return r.height();
}

private void checkShutdown(){
synchronized (mux) {
    if (isBeingShutdown)     throw new RejectedExecutionException("Failed to execute command during executor shutdown.");
  }
}

public void clear(){
  oredCriteria.clear();
  orderByClause=null;
  distinct=false;
}

private static final void checkQueueForDependenciesAndExecuteUnblockedTasks(){
  List<ProgressThread> toRemove=new LinkedList<>();
synchronized (LOCK) {
    for (    ProgressThread pg : queuedThreads) {
      if (!pg.isBlockedByDependencies()) {
        if (!pg.isWaiting()) {
          toRemove.add(pg);
          EXECUTOR.execute(pg.makeWrapper());
        }
      }
    }
  }
  for (  ProgressThread pg : toRemove) {
synchronized (LOCK) {
      queuedThreads.remove(pg);
    }
  }
}

private static short CallShortMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {
  if (traceJNI)   VM.sysWrite("JNI called: CallShortMethodV  \n");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    Object obj=env.getJNIRef(objJREF);
    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Short,false);
    return Reflection.unwrapShort(returnObj);
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}

public static void drawVerticalMarginIndicator(Graphics2D g,String text,int x,int y1,int y2){
  if (y1 > y2) {
    int temp=y1;
    y1=y2;
    y2=temp;
  }
  if (text == null) {
    g.drawLine(x,y1,x,y2);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    return;
  }
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=4;
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int th=(int)bounds.getHeight();
  int offset=3 * CONNECTION_ARROW_SIZE;
  int h=((y2 - y1) - (th + 2 * padding)) / 2;
  if (h <= padding) {
    g.drawLine(x,y1,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2) + offset,y2 - h - padding);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y1,x + CONNECTION_ARROW_SIZE,y1);
    g.drawLine(x - CONNECTION_ARROW_SIZE,y2,x + CONNECTION_ARROW_SIZE,y2);
  }
 else {
    g.drawLine(x,y1,x,y1 + h);
    g.drawLine(x,y2 - h,x,y2);
    g.drawString(text,(int)(x - bounds.getWidth() / 2),y2 - h - padding);
    g.drawLine(x,y1,x - CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y1,x + CONNECTION_ARROW_SIZE,y1 + CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x - CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
    g.drawLine(x,y2,x + CONNECTION_ARROW_SIZE,y2 - CONNECTION_ARROW_SIZE);
  }
}

public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){
  if (oldValue != newValue) {
    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));
  }
}

protected void removeMarkers(){
  for (int i=markerImage.size(); i > 0; i--) {
    LocoIcon il=markerImage.get(i - 1);
    if ((il != null) && (il.isActive())) {
      markerImage.remove(i - 1);
      il.remove();
      il.dispose();
      setDirty(true);
    }
  }
  super.removeMarkers();
  repaint();
}

public IElementType captureString(){
  CharSequence buffer=getBuffer();
  int currentPosition=getTokenEnd();
  setTokenStart(currentPosition);
  int bufferEnd=getBufferEnd();
  char openQuote=buffer.charAt(currentPosition);
  char closeQuote=RegexBlock.getQuoteCloseChar(openQuote);
  boolean quotesDiffer=openQuote != closeQuote;
  boolean isEscaped=false;
  int quotesDepth=0;
  currentPosition++;
  while (currentPosition < bufferEnd) {
    char currentChar=buffer.charAt(currentPosition);
    if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) {
      break;
    }
    if (!isEscaped && quotesDiffer) {
      if (currentChar == openQuote) {
        quotesDepth++;
      }
 else       if (currentChar == closeQuote) {
        quotesDepth--;
      }
    }
    isEscaped=!isEscaped && currentChar == '\\';
    currentPosition++;
  }
  if (currentPosition < bufferEnd) {
    currentPosition++;
  }
  setTokenEnd(currentPosition);
  PerlStringLexer stringLexer=getStringLexer();
  popState();
  preparsedTokensList.addAll(lexCurrentToken(stringLexer));
  return getPreParsedToken();
}

public static String toLocalizedInteger(long value){
  return NUMBER_FORMAT0.format(value);
}

public void testParseClientHandshake() throws Exception {
  for (int splitPos=1; splitPos < 5; splitPos++) {
    log.info("Checking split position: " + splitPos);
    ByteBuffer tmp=clientHandshakePacket();
    ByteBuffer[] split=split(tmp,splitPos);
    GridNioSession ses=new MockNioSession();
    ses.addMeta(MARSHALLER.ordinal(),new GridClientOptimizedMarshaller());
    GridTcpRestParser parser=new GridTcpRestParser(false);
    Collection<GridClientMessage> lst=new ArrayList<>(1);
    for (    ByteBuffer buf : split) {
      GridClientMessage r;
      while (buf.hasRemaining() && (r=parser.decode(ses,buf)) != null)       lst.add(r);
      assertTrue("Parser has left unparsed bytes.",buf.remaining() == 0);
    }
    assertEquals(1,lst.size());
    GridClientHandshakeRequest req=(GridClientHandshakeRequest)F.first(lst);
    assertNotNull(req);
    assertEquals(U.bytesToShort(new byte[]{5,0},0),req.version());
  }
}

public void initialize(Context context,HapticFeedbackController hapticFeedbackController,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,"Time has already been initialized.");
    return;
  }
  mHapticFeedbackController=hapticFeedbackController;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() ? true : mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format("%02d",hours_24[i]) : String.format("%d",hours[i]);
    innerHoursTexts[i]=String.format("%d",hours[i]);
    minutesTexts[i]=String.format("%02d",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("staff",true);
  elementList=doc.getElementsByTagName("address");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.deleteData(4,50);
  childData=child.getData();
  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);
}

void checkFrameValue(final Object value){
  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {
    return;
  }
  if (value instanceof String) {
    checkInternalName((String)value,"Invalid stack frame value");
    return;
  }
  if (!(value instanceof Label)) {
    throw new IllegalArgumentException("Invalid stack frame value: " + value);
  }
 else {
    usedLabels.add((Label)value);
  }
}

protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}

public static Template create(String value){
  if (Settings.isFunction(value)) {
    return new FunctionalTemplate(value);
  }
  if (Graph.isRelational(value)) {
    try {
      return new RelationalTemplate(value);
    }
 catch (    Exception e) {
      log.warning("illegal relational structure: " + value + ")");
      return new StringTemplate(value);
    }
  }
 else   if (RegexTemplate.isPossibleRegex(value)) {
    try {
      if (ArithmeticTemplate.isArithmeticExpression(value)) {
        return new ArithmeticTemplate(value);
      }
      return new RegexTemplate(value);
    }
 catch (    PatternSyntaxException e) {
      log.warning("illegal pattern: " + value + ")");
      return new StringTemplate(value);
    }
  }
 else {
    return new StringTemplate(value);
  }
}

protected boolean customShouldTakeFocus(){
  if (customArea instanceof Label) {
    return false;
  }
  if (customArea instanceof CLabel) {
    return (customArea.getStyle() & SWT.NO_FOCUS) > 0;
  }
  return true;
}

public void init(PrivateKey key){
  try {
    if (signature != null) {
      signature.initSign(key);
    }
 else     if (cipher != null) {
      cipher.init(Cipher.ENCRYPT_MODE,key);
    }
  }
 catch (  InvalidKeyException e) {
    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid private key",e));
  }
}

private Map<String,List<Zone>> selectZonesForInitiatorsAndPorts(NetworkLite network,Map<String,List<Zone>> wwnToZones,Map<String,StoragePort> initiatorPortsMap){
  Map<String,List<Zone>> filteredMap=new HashMap<String,List<Zone>>();
  Zone zone=null;
  List<Zone> zones=null;
  for (  String initiatorWwn : wwnToZones.keySet()) {
    for (    String portWwn : initiatorPortsMap.keySet()) {
      zone=_networkScheduler.selectExistingZoneForInitiatorPort(network,initiatorWwn,portWwn,wwnToZones.get(initiatorWwn));
      if (zone != null) {
        zones=filteredMap.get(initiatorWwn);
        if (zones == null) {
          zones=new ArrayList<>();
          filteredMap.put(initiatorWwn,zones);
        }
        zones.add(zone);
      }
    }
  }
  return filteredMap;
}

public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null)   return false;
  if (extensions == null || extensions.isEmpty())   return indexOfExtension(filename) == -1;
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension))     return true;
  }
  return false;
}

private void writeJarPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute("className",JAR_RESOURCE_SET);
  postResourceEl.setAttribute("base",path.replace("&","&amp;"));
}

public void closeFile() throws IOException {
  file.close();
  file=null;
}

public TypedEventListener(EventListener<E> wrappedListener,Class<E> eventClass){
  this.eventClass=eventClass;
  this.wrappedListener=wrappedListener;
}

public static List<? extends Node> childNodeList(Node node){
  if (node == null)   return null;
  List<Node> nodes=new LinkedList<Node>();
  do {
    if (node.getNodeType() == Node.ELEMENT_NODE || node.getNodeType() == Node.COMMENT_NODE) {
      nodes.add(node);
    }
  }
 while ((node=node.getNextSibling()) != null);
  return nodes;
}

public static Corleone context(String jobContext){
  if (jobContext == null || jobContext.equals("")) {
    throw new IllegalArgumentException("Job context must not be null or empty.");
  }
  contexts.clear();
  contexts.add(jobContext);
  return getInstance();
}

protected final void init() throws NoGlyphException {
  char[] codes=chars.toCharArray();
  indices=new int[codes.length];
  advances=new int[codes.length];
  double maxAscent=0.0;
  double maxDescent=0.0;
  double scale=size * SWFConstants.TWIPS / 1024.0;
  for (int i=0; i < codes.length; i++) {
    int code=(int)codes[i];
    int[] index=new int[1];
    FontDefinition.Glyph glyph=getGlyph(code,index);
    indices[i]=index[0];
    if (glyph != null) {
      Shape shape=glyph.getShape();
      double[] outline=shape.getBoundingRectangle();
      double x1=outline[0] * scale;
      double y1=outline[1] * scale;
      double x2=outline[2] * scale;
      double y2=outline[3] * scale;
      if (maxAscent < -y1) {
        maxAscent=-y1;
      }
      if (maxDescent < y2) {
        maxDescent=y2;
      }
      double advance=glyph.getAdvance() * scale;
      if (advance == 0) {
        advance=x2 - x1;
      }
      if (i < codes.length - 1) {
        advance+=(fontDef.getKerningOffset(code,(int)codes[i + 1]) * scale);
      }
      totalAdvance+=advance;
      advances[i]=(int)(advance * SWFConstants.TWIPS);
      if (i == 0) {
        leftMargin=-y1;
      }
      if (i == codes.length - 1) {
        rightMargin=x2 - advance;
      }
    }
  }
  ascent=fontDef.getAscent() * scale;
  if (ascent == 0.0) {
    ascent=maxAscent;
  }
  descent=fontDef.getDescent() * scale;
  if (descent == 0.0) {
    descent=maxDescent;
  }
}

public static double info(int counts[]){
  int total=0;
  double x=0;
  for (  int count : counts) {
    x-=xlogx(count);
    total+=count;
  }
  return x + xlogx(total);
}

public void addMethod(SootMethod m){
  checkLevel(SIGNATURES);
  if (m.isDeclared())   throw new RuntimeException("already declared: " + m.getName());
  if (subSigToMethods.get(m.getNumberedSubSignature()) != null) {
    throw new RuntimeException("Attempting to add method " + m.getSubSignature() + " to class "+ this+ ", but the class already has a method with that signature.");
  }
  subSigToMethods.put(m.getNumberedSubSignature(),m);
  methodList.add(m);
  m.setDeclared(true);
  m.setDeclaringClass(this);
}

public void addSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<SwipeListener>();
  }
  mListeners.add(listener);
}

public void clear(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    for (Node<E> f=first; f != null; ) {
      f.item=null;
      Node<E> n=f.next;
      f.prev=null;
      f.next=null;
      f=n;
    }
    first=last=null;
    count=0;
    notFull.signalAll();
  }
  finally {
    lock.unlock();
  }
}

private void addReplicationFactor(Operation op){
  op.addRequestHeader(Operation.REPLICATION_QUORUM_HEADER,Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL);
}

private static Frame showInitialSplash(){
  Frame splashFrame=null;
  Image image=null;
  URL imageURL=getChosenSplashURL();
  if (imageURL != null) {
    try {
      image=ImageIO.read(imageURL);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    if (image != null) {
      splashFrame=AWTSplashWindow.splash(image);
    }
  }
  return splashFrame;
}

protected void decodeLineSuffix(PushbackInputStream inStream,OutputStream outStream) throws IOException {
  int c;
  while (true) {
    c=inStream.read();
    if (c == -1) {
      throw new CEStreamExhausted();
    }
    if (c == '\n') {
      break;
    }
    if (c == '\r') {
      c=inStream.read();
      if ((c != '\n') && (c != -1)) {
        inStream.unread(c);
      }
      break;
    }
  }
}

public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {
  if (isLoggingEnabled())   stackLogger.logDebug("added transaction " + serverTransaction);
  serverTransaction.map();
  addTransactionHash(serverTransaction);
}

private float spacing(MotionEvent event){
  float x=event.getX(0) - event.getX(1);
  float y=event.getY(0) - event.getY(1);
  return (float)Math.sqrt(x * x + y * y);
}

public boolean containsPoly(SootMethod method){
  return getMethod(method) != null;
}

public JKTagMapping(final String sourceQName,final String targetQName,final JKNamespace namespace){
  logger.info(String.format("creating TagMapping with sourceTag(%s) and (%s)",sourceQName,targetQName));
  this.sourceQName=sourceQName;
  this.targetQName=targetQName;
  this.namespace=namespace;
  this.auto=true;
}

private void selectAttributeSetInstance(){
  int m_warehouse_id=getM_Warehouse_ID();
  int m_product_id=getM_Product_ID();
  if (m_product_id <= 0)   return;
  MProduct product=MProduct.get(getCtx(),m_product_id);
  MWarehouse wh=MWarehouse.get(getCtx(),m_warehouse_id);
  String title=product.get_Translation(MProduct.COLUMNNAME_Name) + " - " + wh.get_Translation(MWarehouse.COLUMNNAME_Name);
  PAttributeInstance pai=new PAttributeInstance(m_frame,title,m_warehouse_id,0,m_product_id,0);
  if (pai.getM_AttributeSetInstance_ID() != -1) {
    fAttrSetInstance_ID.setText(pai.getM_AttributeSetInstanceName());
    fAttrSetInstance_ID.setValue(new Integer(pai.getM_AttributeSetInstance_ID()));
  }
 else {
    fAttrSetInstance_ID.setValue(Integer.valueOf(0));
  }
}

private void ensureFileOpen(){
  if (savingDisabled) {
    Log.e(TAG,"Saving disabled but tried to ensureFileOpen");
    return;
  }
  if (saveFileStream != null)   return;
  File saveFile=new File(ctx.getFilesDir(),SAVEFILE);
  try {
    FileOutputStream fileOutput=null;
    DataOutputStream out=null;
    if (saveFile.exists()) {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_APPEND);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
    }
 else {
      fileOutput=ctx.openFileOutput(SAVEFILE,Context.MODE_PRIVATE);
      out=new DataOutputStream(new BufferedOutputStream(fileOutput));
      out.writeInt(TrackPoint.FORMAT_VERSION);
      savedTrackPoints=0;
    }
    saveFileStream=out;
  }
 catch (  Exception e) {
    markSavingBroken("Failed to open track save file",e);
  }
}

public void test_canonicalizingCache(){
  final Properties properties=getProperties();
  properties.setProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE,"5000");
  final Journal journal=new Journal(properties);
  try {
    final long commitTime0=journal.commit();
    assertTrue(commitTime0 != 0L);
    final ICommitRecord commitRecord0=journal.getCommitRecord(commitTime0);
    assertEquals(commitRecord0,journal.getCommitRecord());
    journal.write(ByteBuffer.wrap(new byte[]{1,2,3}));
    final long commitTime1=journal.commit();
    assertTrue(commitTime1 != 0L);
    final ICommitRecord commitRecord1=journal.getCommitRecord(commitTime1);
    assertEquals(commitRecord1,journal.getCommitRecord());
    assertTrue(commitRecord0 == journal.getCommitRecord(commitTime1 - 1));
    assertTrue(commitRecord1 == journal.getCommitRecord(commitTime1 + 0));
    assertTrue(commitRecord1 == journal.getCommitRecord(commitTime1 + 1));
  }
  finally {
    journal.destroy();
  }
}

public static void print(Object x){
  out.print(x);
  out.flush();
}

@Override public void stop(Runnable arg0){
  stop();
  arg0.run();
}

protected int read(InputStream inputStream,byte[] buffer,char divider) throws IOException {
  int index=0;
  do {
    byte readByte=(byte)(0x000000FF & inputStream.read());
    if (readByte == -1 || readByte == (byte)divider) {
      return index;
    }
    buffer[index]=readByte;
    index++;
  }
 while (index < buffer.length);
  return index;
}

private static void generateGraphFile(TransMeta transMeta,String graphFile) throws GraphGeneratorException {
  DataOutputStream dos=null;
  try {
    String xml=transMeta.getXML();
    dos=new DataOutputStream(new FileOutputStream(new File(graphFile)));
    dos.write(xml.getBytes(CarbonCommonConstants.DEFAULT_CHARSET));
  }
 catch (  KettleException kettelException) {
    throw new GraphGeneratorException("Error while getting the graph XML",kettelException);
  }
catch (  FileNotFoundException e) {
    throw new GraphGeneratorException("Unable to find the graph fileL",e);
  }
catch (  UnsupportedEncodingException ue) {
    throw new GraphGeneratorException("Error while Converting the graph xml string to bytes",ue);
  }
catch (  IOException ioe) {
    throw new GraphGeneratorException("Error while writing the graph file",ioe);
  }
 finally {
    if (dos != null) {
      try {
        dos.close();
      }
 catch (      IOException e) {
        e.getMessage();
      }
    }
  }
}

public static void closeOutputStream(OutputStream stream,String tag){
  if (stream != null) {
    try {
      stream.close();
    }
 catch (    IOException e) {
      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);
    }
  }
}

private void testMultiStatement(){
  MVStore s=MVStore.open(null);
  TransactionStore ts=new TransactionStore(s);
  ts.init();
  Transaction tx;
  TransactionMap<String,String> m;
  long startUpdate;
  tx=ts.begin();
  startUpdate=tx.setSavepoint();
  m=tx.openMap("test");
  m.setSavepoint(startUpdate);
  startUpdate=tx.setSavepoint();
  m.setSavepoint(startUpdate);
  assertTrue(m.trySet("1","Hello",true));
  assertTrue(m.trySet("2","World",true));
  assertNull(m.get("1"));
  assertNull(m.get("2"));
  startUpdate=tx.setSavepoint();
  m.setSavepoint(startUpdate);
  assertEquals("Hello",m.get("1"));
  assertEquals("World",m.get("2"));
  assertEquals("Hello",m.get("1"));
  assertTrue(m.trySet("1",null,true));
  assertTrue(m.trySet("2","Hello",true));
  assertEquals("World",m.get("2"));
  assertTrue(m.trySet("2",null,true));
  assertTrue(m.trySet("3","World",true));
  assertEquals("Hello",m.get("1"));
  assertEquals("World",m.get("2"));
  assertNull(m.get("3"));
  startUpdate=tx.setSavepoint();
  m.setSavepoint(startUpdate);
  assertNull(m.get("1"));
  assertEquals("Hello",m.get("2"));
  assertEquals("World",m.get("3"));
  startUpdate=tx.setSavepoint();
  m.setSavepoint(startUpdate);
  assertTrue(m.trySet("2",null,true));
  assertTrue(m.trySet("1","Hello",true));
  assertTrue(m.trySet("3",null,true));
  assertFalse(m.trySet("1","World",true));
  tx.rollbackToSavepoint(startUpdate);
  startUpdate=tx.setSavepoint();
  m.setSavepoint(startUpdate);
  assertNull(m.get("1"));
  assertEquals("Hello",m.get("2"));
  assertEquals("World",m.get("3"));
  tx.commit();
  ts.close();
  s.close();
}

public void addPropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){
  beanContextChildSupport.addPropertyChangeListener(propertyName,in_pcl);
}

public void createEntityConfig(String realm,FederationConfigElement config) throws WSFederationMetaException {
  String federationId=config.getFederationID();
  if (federationId == null) {
    debug.error("WSFederationMetaManager.createEntityConfig: " + "entity ID is null");
    String[] data={realm};
    LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException("empty_entityid",null);
  }
  if (realm == null) {
    realm="/";
  }
  String[] objs={federationId,realm};
  try {
    Map attrs=WSFederationMetaUtils.convertJAXBToAttrMap(ATTR_ENTITY_CONFIG,config);
    Map oldAttrs=configInst.getConfiguration(realm,federationId);
    if (oldAttrs == null) {
      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG,objs,null);
      throw new WSFederationMetaException("entity_descriptor_not_exist",objs);
    }
    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);
    if (oldValues != null && !oldValues.isEmpty()) {
      LogUtil.error(Level.INFO,LogUtil.ENTITY_CONFIG_EXISTS,objs,null);
      throw new WSFederationMetaException("entity_config_exists",objs);
    }
    configInst.setConfiguration(realm,federationId,attrs);
    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_CREATED,objs,null);
    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);
    if (spconfig != null) {
      addToCircleOfTrust(spconfig,realm,federationId);
    }
    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);
    if (idpconfig != null) {
      addToCircleOfTrust(idpconfig,realm,federationId);
    }
  }
 catch (  ConfigurationException e) {
    debug.error("WSFederationMetaManager.createEntityConfig:",e);
    String[] data={e.getMessage(),federationId,realm};
    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_CREATE_ENTITY_CONFIG,data,null);
    throw new WSFederationMetaException(e);
  }
catch (  JAXBException jaxbe) {
    debug.error("WSFederationMetaManager.createEntityConfig:",jaxbe);
    LogUtil.error(Level.INFO,LogUtil.CREATE_INVALID_ENTITY_CONFIG,objs,null);
    throw new WSFederationMetaException("invalid_config",objs);
  }
}

public boolean isExpired(){
  return this.ttl < System.currentTimeMillis();
}

private void loadUserInfoIntoActionBar(){
  if (!TextUtils.isEmpty(mWithUserImage)) {
    Utils.loadCircularImage(getActivity(),mWithImageView,mWithUserImage,AvatarBitmapTransformation.AvatarSize.NORMAL);
  }
}

public static Direction directionForArrowKey(KeyEvent e){
  int index=Math.max(0,Math.min(e.getKeyCode(),KeyEvent.VK_DOWN) - KeyEvent.VK_LEFT);
  return Direction.values()[index];
}

public TraceGraph(Collection<Span> spans){
  this.spansByParent=new SpansByParent(spans);
  this.spansByTracerId=new SpansByTracerId(spans);
}

public boolean isPersistent(){
  return m_persist;
}

public static java.util.Date toDate(String monthStr,String dayStr,String yearStr,String hourStr,String minuteStr,String secondStr){
  int month, day, year, hour, minute, second;
  try {
    month=Integer.parseInt(monthStr);
    day=Integer.parseInt(dayStr);
    year=Integer.parseInt(yearStr);
    hour=Integer.parseInt(hourStr);
    minute=Integer.parseInt(minuteStr);
    second=Integer.parseInt(secondStr);
  }
 catch (  Exception e) {
    return null;
  }
  return toDate(month,day,year,hour,minute,second);
}

protected void handleMesosFailure(String taskId){
  int attempt=TaskUtils.getAttemptForTaskId(taskId);
  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));
  boolean hasAttemptsLeft=attempt < container.retries;
  if (hasAttemptsLeft) {
    LOG.warning(String.format("Retrying task: %s, attempt: %d",container.name,attempt + 1));
    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);
    scheduleNewTask(newTaskId);
  }
 else {
    LOG.severe("Would not restart the job since it is beyond retries: " + attempt);
  }
}

private void updateLtp(SingleChannelElement sce){
  IndividualChannelStream ics=sce.ics;
  float saved[]=sce.saved;
  float savedLtp[]=sce.coeffs;
  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;
  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;
  if (ics.windowSequence[0] == EIGHT_SHORT_SEQUENCE) {
    System.arraycopy(saved,0,savedLtp,0,512);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else   if (ics.windowSequence[0] == LONG_START_SEQUENCE) {
    System.arraycopy(ac.bufMdct,512,savedLtp,0,448);
    Arrays.fill(savedLtp,576,576 + 448,0f);
    FloatDSP.vectorFmulReverse(savedLtp,448,ac.bufMdct,960,swindow,64,64);
    for (int i=0; i < 64; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * swindow[63 - i];
    }
  }
 else {
    FloatDSP.vectorFmulReverse(savedLtp,0,ac.bufMdct,512,lwindow,512,512);
    for (int i=0; i < 512; i++) {
      savedLtp[i + 512]=ac.bufMdct[1023 - i] * lwindow[511 - i];
    }
  }
  System.arraycopy(sce.ltpState,1024,sce.ltpState,0,1024);
  System.arraycopy(sce.ret,0,sce.ltpState,1024,1024);
  System.arraycopy(savedLtp,0,sce.ltpState,2048,1024);
}

public static File findConfigInWorkingDirectory(){
  for (  final String suffix : SUFFIXES) {
    final File configFile=new File(System.getProperty("user.dir"),PREFIX + suffix);
    if (configFile.isFile()) {
      return configFile;
    }
  }
  return null;
}

@Override public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=rangeAxis.getRange();
    if (!range.contains(value)) {
      return;
    }
    double v=rangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());
    PlotOrientation orientation=plot.getOrientation();
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else {
      throw new IllegalStateException("Unrecognised orientation.");
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=rangeAxis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    double start2d=rangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());
    double end2d=rangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
    final Composite originalComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(originalComposite);
  }
}

protected boolean attemptToAddWord(Word word){
  double additionalLength=word.getWordWidth();
  additionalLength+=!words.isEmpty() ? spaceSize : 0;
  if (currentLineLength + additionalLength <= maxLength || maxLength == -1) {
    words.add(word);
    currentLineLength+=additionalLength;
    return true;
  }
 else {
    return false;
  }
}

@Override public boolean onPreferenceClick(Preference preference){
  if (preference == mPlayExample) {
    getSampleText();
    return true;
  }
  return false;
}

public void readWwwAuthenticateHeader(String header){
  if (header != null) {
    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);
    if (!mIsDigestAuthentication) {
      return;
    }
    String value=getValue(header,"realm");
    mDigest.setRealm(value);
    value=getValue(header,"opaque");
    mDigest.setOpaque(value);
    value=getValue(header,"qop");
    mDigest.setQop(value);
    value=getValue(header,"nonce");
    mDigest.setNextnonce(value);
  }
}

public static String valueOf(Boolean value){
  return value != null ? String.valueOf(value) : null;
}

public void testSendReceive() throws Exception {
  messages.clear();
  for (int i=0; i < data.length; i++) {
    Message message=session.createTextMessage(data[i]);
    message.setStringProperty("stringProperty",data[i]);
    message.setIntProperty("intProperty",i);
    if (verbose) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("About to send a message: " + message + " with text: "+ data[i]);
      }
    }
    sendToProducer(producer,producerDestination,message);
    messageSent();
  }
  assertMessagesAreReceived();
  LOG.info("" + data.length + " messages(s) received, closing down connections");
}

public void addLive(boolean live){
  query.append(" +live:" + live);
}

public static String toString(URI uri,Charset encoding) throws IOException {
  return toString(uri.toURL(),Charsets.toCharset(encoding));
}

public boolean exists(String key){
  return exists(key,false);
}

public AllocationSite(int line,int column){
synchronized (sites) {
    this.id=sites.size();
    sites.add(this);
  }
  this.line=line;
  this.column=column;
}

public boolean drawImage(Image img,AffineTransform xform,ImageObserver obs){
  return mGraphics.drawImage(img,xform,obs);
}

public final static int parseInt(char[] digitChars,int offset,int len){
  int num=digitChars[offset] - '0';
  len+=offset;
  if (++offset < len) {
    num=(num * 10) + (digitChars[offset] - '0');
    if (++offset < len) {
      num=(num * 10) + (digitChars[offset] - '0');
      if (++offset < len) {
        num=(num * 10) + (digitChars[offset] - '0');
        if (++offset < len) {
          num=(num * 10) + (digitChars[offset] - '0');
          if (++offset < len) {
            num=(num * 10) + (digitChars[offset] - '0');
            if (++offset < len) {
              num=(num * 10) + (digitChars[offset] - '0');
              if (++offset < len) {
                num=(num * 10) + (digitChars[offset] - '0');
                if (++offset < len) {
                  num=(num * 10) + (digitChars[offset] - '0');
                }
              }
            }
          }
        }
      }
    }
  }
  return num;
}

public ActivityMonitorSample(){
  initComponents();
  ownerARadio.setActionCommand("A");
  ownerBRadio.setActionCommand("B");
  ownerCRadio.setActionCommand("C");
  indicatorA.setActivityOwner("A");
  indicatorB.setActivityOwner("B");
  indicatorC.setActivityOwner("C");
  JActivityWindow.getInstance();
}

public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){
  if (location == null) {
    throw new IllegalArgumentException("Location Is Null");
  }
  if (azimuth == null) {
    throw new IllegalArgumentException("Azimuth Is Null");
  }
  double lat0=location.getLatitude().radians;
  double az=azimuth.radians;
  double tanDistance=-Math.tan(lat0) / Math.cos(az);
  double distance=Math.atan(tanDistance);
  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));
  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));
  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};
}

private void initCheckbox(CheckBoxPreference checkbox,boolean checked,boolean enabled){
  checkbox.setChecked(checked);
  checkbox.setEnabled(enabled);
}

private void paintCheckIconEnabledAndSelected(Graphics2D g,int width,int height){
  Shape s=shapeGenerator.createCheckMark(0,0,width,height);
  g.setPaint(iconEnabledSelected);
  g.fill(s);
}

public static int findURISplitIndex(String uri){
  int uriLength=uri.length();
  int idx=uriLength - 1;
  for (; idx >= 0; idx--) {
    if (!TurtleUtil.isNameChar(uri.charAt(idx))) {
      break;
    }
  }
  idx++;
  for (; idx < uriLength; idx++) {
    if (TurtleUtil.isNameStartChar(uri.charAt(idx))) {
      break;
    }
  }
  if (!TurtleUtil.isNameEndChar(uri.charAt(uriLength - 1))) {
    return -1;
  }
  if (idx > 0 && idx < uriLength) {
    return idx;
  }
  return -1;
}

private void writeLog(String cmd){
  try {
    if (m_writer == null) {
      File file=File.createTempFile("create",".log");
      m_writer=new PrintWriter(new FileWriter(file));
      log.info(file.toString());
    }
    m_writer.println(cmd);
    m_writer.flush();
  }
 catch (  Exception e) {
    log.severe(e.toString());
  }
}

public void reload(String why){
  mFullPhotoPaths=mRootDir.list(MediaScanner.JPG_FILENAME_FILTER);
  if ((mFullPhotoPaths != null) && (mFullPhotoPaths.length == 0)) {
    mFullPhotoPaths=null;
    Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ 0);
  }
 else   if (mFullPhotoPaths != null) {
    if (Global.debugEnabled) {
      Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ mFullPhotoPaths.length);
    }
    String parentDirString=mRootDir.getAbsolutePath();
    for (int i=0; i < mFullPhotoPaths.length; i++) {
      mFullPhotoPaths[i]=parentDirString + "/" + mFullPhotoPaths[i];
    }
  }
}

DNSRecord(String name,DNSRecordType type,DNSRecordClass recordClass,boolean unique,int ttl){
  super(name,type,recordClass,unique);
  this._ttl=ttl;
  this._created=System.currentTimeMillis();
}

public static String block(Stream<String> rows){
  return block(rows.collect(joining(nl())));
}

protected void addContentSpecToElement(XMLElementDecl elementDecl){
  if ((fDepth == 0 || (fDepth == 1 && elementDecl.type == XMLElementDecl.TYPE_MIXED)) && fNodeIndexStack != null) {
    if (elementDecl.type == XMLElementDecl.TYPE_MIXED) {
      int pcdata=addUniqueLeafNode(null);
      if (fNodeIndexStack[0] == -1) {
        fNodeIndexStack[0]=pcdata;
      }
 else {
        fNodeIndexStack[0]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE,pcdata,fNodeIndexStack[0]);
      }
    }
    setContentSpecIndex(fCurrentElementIndex,fNodeIndexStack[fDepth]);
  }
}

private void growSpine(){
  spine=new int[(spine.length << 1) + 1];
  threshold=(int)(spine.length * loadFactor);
  Arrays.fill(spine,-1);
  for (int i=0; i < size; i++) {
    insert(objs[i],i);
  }
}

public void reconnect(){
  if (opened && !allowConnectionRecovery) {
    return;
  }
  reconnectwait thread=new reconnectwait();
  thread.start();
  try {
    thread.join();
  }
 catch (  InterruptedException e) {
    log.error("Unable to join to the reconnection thread " + e.getMessage());
  }
  if (!opened) {
    log.error("Failed to re-establish connectivity");
  }
 else {
    log.info("Reconnected to " + getCurrentPortName());
    resetupConnection();
  }
}

public Collection<GridPortRecord> records(){
synchronized (recs) {
    return Collections.unmodifiableCollection(new ArrayList<>(recs));
  }
}

@Override public String toString(){
  return buf.toString();
}

public boolean hasChangeEvent(String name){
  if (var != null) {
    List<MetaData> mdList=var.getMetaData(StandardDefs.MD_CHANGEEVENT);
    if (mdList != null) {
      for (int i=0, size=mdList.size(); i < size; i++) {
        MetaData md=mdList.get(i);
        if (name.equals(md.getValue(0))) {
          return true;
        }
      }
    }
  }
  return false;
}

protected void resetXML11() throws XNIException {
  int count=fXML11Components.size();
  for (int i=0; i < count; i++) {
    XMLComponent c=(XMLComponent)fXML11Components.get(i);
    c.reset(this);
  }
}

public float distanceToOtherCircle(Circle circle){
  return (float)Math.abs(Math.sqrt(Math.pow(circle.center.x - center.x,2) + Math.pow(circle.center.y - center.y,2)));
}

public SimpleCommand(String commandName,String... args){
  this(commandName,(Argument)null);
  ArrayList<Argument> argList=new ArrayList<Argument>();
  for (  String arg : args)   argList.add(new Argument(arg));
  _arguments=argList.toArray(new Argument[0]);
}

private void grow(){
  m_allocatedSize*=2;
  boolean newVector[]=new boolean[m_allocatedSize];
  System.arraycopy(m_values,0,newVector,0,m_index + 1);
  m_values=newVector;
}

public String convertToLowerCase(String table){
  return table.toLowerCase();
}

public PickingGraphMousePlugin(int selectionModifiers,int addToSelectionModifiers){
  super(selectionModifiers);
  this.addToSelectionModifiers=addToSelectionModifiers;
  this.lensPaintable=new LensPaintable();
  this.cursor=Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
}

public int[] breadthFirstSearch(int intialValue,IBFSTraversable<N> traversable,int firstValue,IIntegerBfsNextValueIterator<N> nextValueIterator,List<Integer> sourcesIndex){
  int[] results=new int[nodes.length];
  Arrays.fill(results,intialValue);
  boolean[] alreadyScanned=new boolean[nodes.length];
  Arrays.fill(alreadyScanned,false);
  Set<Integer> currentNodesIndex=new HashSet<>(sourcesIndex);
  iterativeIntegerBreadthFirstSearch(results,alreadyScanned,currentNodesIndex,firstValue,0,traversable,nextValueIterator);
  return results;
}

public ViewRefRender(ViewRender<T> view,Class<T> type,int priority){
  Objects.requireNonNull(view);
  _view=view;
  _type=type;
  _priority=priority;
}

public void checkNumberArgs(int argNum) throws WrongNumberArgsException {
  if (argNum < 2)   reportWrongNumberArgs();
}

private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,"exception encoding multicast" + " announcement",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}

public DrawingAttributes(){
  propertyChangeSupport=new PropertyChangeSupport(this);
}

public void close(){
  scanner.close();
}

static void createPolicyTree(String configName,String configId,ServiceConfigManager scm,String org) throws NoPermissionException, PolicyException, SSOException {
  try {
    ServiceConfig pConfig=scm.getOrganizationConfig(org,null);
    if (pConfig == null) {
      scm.createOrganizationConfig(org,null);
      pConfig=scm.getOrganizationConfig(org,null);
    }
    pConfig.addSubConfig(configName,configId,0,null);
  }
 catch (  ServiceAlreadyExistsException se) {
    if (debug.messageEnabled()) {
      debug.message("PolicyManager->createPolicyTree: Name: " + configName + " ID: "+ configId+ " Policy service already exists under org->"+ org);
    }
  }
catch (  SMSException e) {
    String[] objs={org};
    if (e.getExceptionCode() == SMSException.STATUS_NO_PERMISSION) {
      throw (new NoPermissionException(ResBundleUtils.rbName,"insufficient_access_rights",null));
    }
 else {
      throw (new PolicyException(ResBundleUtils.rbName,"unable_to_create_policy_for_org",objs,e));
    }
  }
}

private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception {
  if (isDummyLunPathAdded) {
    log.info("Remove dummy path while doing roll back");
    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);
  }
  if (isSnapshotCreated) {
    log.info("Remove snapshot volume for roll back");
    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);
    String systemObjectID=HDSUtils.getSystemObjectID(storage);
    String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage);
    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel());
  }
}

public static int convertStringToTimeSeconds(String time){
  int result=0;
  if (time.endsWith("H")) {
    int hoursToAdd=Integer.valueOf(StringUtils.remove(time,'H'));
    result=(60 * 60) * hoursToAdd;
  }
 else   if (time.endsWith("M")) {
    int minsToAdd=Integer.valueOf(StringUtils.remove(time,'M'));
    result=60 * minsToAdd;
  }
 else   if (time.endsWith("S")) {
    int secsToAdd=Integer.valueOf(StringUtils.remove(time,'S'));
    result=secsToAdd;
  }
  return result;
}

public void detach(AppCompatActivity activity){
  attrViewMaps.remove(activity.hashCode());
}

public void readPrefs(SharedPreferences settings,ActionFactory factory){
  boolean visible=false;
  String actionId=settings.getString("button_action_" + name + "_0","");
  mainAction=factory.getAction(actionId);
  if (mainAction != null)   visible=true;
  menuActions.clear();
  for (int i=0; i < maxMenuActions; i++) {
    actionId=settings.getString("button_action_" + name + "_"+ (i + 1),"");
    UIAction a=factory.getAction(actionId);
    if (a != null)     visible=true;
    menuActions.add(a);
  }
  if (button != null)   button.setVisibility(visible ? View.VISIBLE : View.GONE);
}

public boolean addToActiveList(DownloadInfoRunnable downloadInfoRunnable){
  return activeListHasRoom() && mActiveList.add(downloadInfoRunnable);
}

private void addExprToTLA(TLAExpr expr){
  Vector sv=expr.toStringVector();
  Vector exprMapping=expr.toMappingVector();
  int indent=tlacodeNextLine.length();
  int nextLine=0;
  if (indent != 0) {
    MappingObject.shiftMappingVector(exprMapping,indent);
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
    nextLine=1;
    if (sv.size() > 1) {
      endCurrentLineOfTLA();
    }
  }
  if (sv.size() > 1) {
    String spaces=NSpaces(indent);
    while (nextLine < sv.size() - 1) {
      tlacode.addElement(spaces + ((String)sv.elementAt(nextLine)));
      mappingVector.addElement((Vector)exprMapping.elementAt(nextLine));
      nextLine++;
    }
    tlacodeNextLine=spaces + ((String)sv.elementAt(nextLine));
    mappingVectorNextLine=(Vector)exprMapping.elementAt(nextLine);
  }
 else   if (indent == 0) {
    tlacodeNextLine=tlacodeNextLine + ((String)sv.elementAt(0));
    mappingVectorNextLine.addAll((Vector)exprMapping.elementAt(0));
  }
}

private boolean isUpperCaseCamelCaseHunk(String hunk){
  if (hunk.length() < 2)   return false;
  for (int i=0; i < hunk.length(); i++) {
    if (!isLegalChar(hunk.charAt(i)))     return false;
  }
  return true;
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

public void type(String string){
  for (int i=0; i < string.length(); i++) {
    char c=string.charAt(i);
    type(c);
  }
}

public boolean providesIdentifier(){
  return false;
}

static void removeRedundantAffix(TranslatorUtils.IContain iContain,List<String> strList){
  if (strList.size() <= 1) {
    return;
  }
  int w=0;
  for (  String str : strList) {
    if (w == 0 || !iContain.containFunc(str,strList.get(w - 1))) {
      strList.set(w,str);
      w++;
    }
  }
  strList=strList.subList(0,w);
}

public static int nextInt(int n){
  Random random=getRandom();
  int value=random.nextInt(n);
  if (!_isTest)   _freeRandomList.free(random);
  return value;
}

protected void doResumeUpdates(){
  Calendar cal=Calendar.getInstance(Locale.getDefault());
  mFirstDayOfWeek=cal.getFirstDayOfWeek() - 1;
  mShowWeekNumber=false;
  updateHeader();
  goTo(mSelectedDay.toMillis(true),false,false,false);
  mAdapter.setSelectedDay(mSelectedDay);
  mTodayUpdater.run();
}

private void storeLastUsed(){
  put(LAST_USE,(int)(System.currentTimeMillis() / 1000));
}

private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){
  int childTypes=child.types;
  int contents=top.contents;
  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);
  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {
    if (containerIndex < 0) {
      contents|=transparencyAllowed;
      break;
    }
    ElementContainmentInfo container=openElements.get(containerIndex);
    contents|=transparencyAllowed & container.contents;
    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;
  }
  return (contents & childTypes) != 0;
}

public static int[] extractArcs(ASN1ObjectIdentifier oid) throws InvalidObjectIdException {
  String oidStr=oid.getId();
  StringTokenizer strTokCnt=new StringTokenizer(oidStr,".",false);
  int arcCount=strTokCnt.countTokens();
  StringTokenizer strTok=new StringTokenizer(oidStr,".",true);
  boolean expectDelimiter=false;
  int[] arcs=new int[arcCount];
  int i=0;
  while (strTok.hasMoreTokens()) {
    String token=strTok.nextToken();
    if (expectDelimiter && (!token.equals(".") || !strTok.hasMoreTokens())) {
      throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));
    }
 else     if (!expectDelimiter) {
      try {
        arcs[i]=Integer.parseInt(token);
        if (arcs[i] < 0) {
          throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));
        }
        i++;
      }
 catch (      NumberFormatException ex) {
        throw new InvalidObjectIdException(res.getString("InvalidOidNotNonNegativeIntSequence.exception.message"));
      }
    }
    expectDelimiter=!expectDelimiter;
  }
  return arcs;
}

public void testIsDuplicateString(){
  int count=10000;
  ActiveMQMessageAudit audit=new ActiveMQMessageAudit();
  IdGenerator idGen=new IdGenerator();
  List<String> list=new ArrayList<>();
  for (int i=0; i < count; i++) {
    String id=idGen.generateId();
    list.add(id);
    assertFalse(audit.isDuplicate(id));
  }
  List<String> windowList=list.subList(list.size() - 1 - audit.getAuditDepth(),list.size() - 1);
  for (  String id : windowList) {
    assertTrue("duplicate, id:" + id,audit.isDuplicate(id));
  }
}

protected void updateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier,Instance classMissing,double classValue) throws Exception {
  if (m_PriorEstimator == null) {
    setNumericPriorsFromBuffer();
  }
  m_SumSchemeEntropy-=classifier.logDensity(classMissing,classValue) * classMissing.weight() / Utils.log2;
  m_SumPriorEntropy-=m_PriorEstimator.logDensity(classValue) * classMissing.weight() / Utils.log2;
}

@Override public boolean accept(File f){
  if (f != null) {
    if (f.isDirectory()) {
      return true;
    }
    String extension=getExtension(f);
    if (extension != null && filters.get(getExtension(f)) != null) {
      return true;
    }
    ;
  }
  return false;
}

public void testCase3(){
  byte aBytes[]={3,4,5,6,7,8,9};
  byte bBytes[]={1,2,3,4,5,6,7};
  byte rBytes[]={2,2,2,2,2,2,2};
  int aSign=1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

@Override public PollResult startPoll(PollController conn){
  if (!_lifecycle.isActive()) {
    log.warning(this + " select disabled");
    return PollResult.CLOSED;
  }
  SocketBar socket=conn.getSocket();
  if (socket == null) {
    log.warning(this + " socket empty for " + conn);
    return PollResult.CLOSED;
  }
  SelectableChannel selChannel=socket.selectableChannel();
  if (selChannel == null) {
    log.warning(this + " no channel for " + socket);
    return PollResult.CLOSED;
  }
  _connectionCount.incrementAndGet();
  _activeCount.incrementAndGet();
  _registerQueue.offer(conn);
  return PollResult.START;
}

@Override public void incrementAccessCount(){
  accessCount.incrementAndGet();
}

public ClusterPolicy createClusterPolicy(String clusterMemberName) throws CreateException {
  long time1=System.currentTimeMillis();
  if (_clusterPolicies == null) {
    _clusterMemberNames=getClusterMemberNames();
    if (_clusterMemberNames != null && _clusterMemberNames.length > 0) {
      _clusterPolicies=new HashMap<String,ClusterPolicy>();
      ClusterPolicy[] tempPolicy=new ClusterPolicy[_clusterMemberNames.length];
      for (int i=0; i < _clusterMemberNames.length; i++)       tempPolicy[i]=createClusterPolicyInternal(_clusterMemberNames[i]);
      ArrayList<ReplicationPolicy> selectedReplPolicies=new ArrayList<ReplicationPolicy>(_clusterMemberNames.length);
      List<String> selectedReplGroupNames=new ArrayList<String>(_clusterMemberNames.length);
      for (int i=0; i < tempPolicy.length; i++)       if (tempPolicy[i].m_ReplicationPolicy != null && !selectedReplGroupNames.contains(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName)) {
        selectedReplPolicies.add(tempPolicy[i].m_ReplicationPolicy);
        selectedReplGroupNames.add(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName);
      }
      if (selectedReplPolicies.isEmpty())       selectedReplPolicies=null;
 else       selectedReplPolicies.trimToSize();
      for (int i=0; i < _clusterMemberNames.length; i++) {
        tempPolicy[i].m_ReplicationGroups=selectedReplPolicies;
        _clusterPolicies.put(_clusterMemberNames[i],tempPolicy[i]);
      }
    }
  }
  ClusterPolicy result=_clusterPolicies.get(clusterMemberName);
  if (result == null)   result=createClusterPolicyInternal(clusterMemberName);
  long time2=System.currentTimeMillis();
  if (_logger.isLoggable(Level.FINE)) {
    _logger.fine("Creation of ClusterPolicy instance for \"" + clusterMemberName + "\" cluster member took "+ (time2 - time1)+ " msec.");
  }
  return result;
}

public static boolean compareDoubles(double a,double b){
  if (Double.isNaN(a) && Double.isNaN(b))   return true;
  if (!Double.isInfinite(a) && !Double.isInfinite(b))   return Math.abs(a - b) <= EPSILON;
  return a == b;
}

public static byte[] bitmapToByte(Bitmap b){
  ByteArrayOutputStream o=new ByteArrayOutputStream();
  b.compress(Bitmap.CompressFormat.PNG,100,o);
  return o.toByteArray();
}

public ConfigureCoerceiveParsingDialog_NB(CoerciveParsing coerciveParsing){
  this.coerciveParsing=coerciveParsing;
  initComponents();
  final IterateModel numberOfTagsIterator=coerciveParsing.getNumberOfTagsIterator();
  configureIterateModel_NB2.setStartAt(String.valueOf(numberOfTagsIterator.getStartAt()));
  configureIterateModel_NB2.setStopAt(String.valueOf(numberOfTagsIterator.getStopAt()));
  configureIterateModel_NB2.setIncrement(String.valueOf(numberOfTagsIterator.getIncrement()));
  configureIterateModel_NB2.setIterateStrategie(numberOfTagsIterator.getIterateStrategie());
  List<String> tagNames=Arrays.asList(coerciveParsing.getTagNames());
  configureStringList_NB1.setStringList(tagNames);
}

public static double logOfBase(double number,int base){
  return Math.log(number) / Math.log(base);
}

public Entry editEntry(User user,String id,String note,String quotation,boolean isPublic,Long modTime,boolean isAdmin,Errors errors){
  if (modTime == null) {
    Errors.add(errors,errorMessages.errorModTimeIsNull());
    return null;
  }
  if (user == null) {
    Errors.add(errors,errorMessages.errorUserIsNull());
    return null;
  }
  if (id != null && !idGenerator.isIdWellFormed(id)) {
    Errors.add(errors,errorMessages.errorIdIsInvalid());
    return null;
  }
  final Entry entry=getEntryById(id);
  if (entry == null) {
    Errors.add(errors,errorMessages.errorTheEntryCouldNotBeFound());
    return null;
  }
  if (!canUserModifyEntry(user,entry,isAdmin)) {
    Errors.add(errors,errorMessages.errorTheUserIsNotEntitledToModifyTheEntry());
    return null;
  }
  if (note != null) {
    note=cleanUpText(note);
  }
  if (entry.isNotebook()) {
    entry.setNotebookTitle(note);
  }
 else   if (entry.isSource()) {
    entry.setSourceTitle(note);
  }
 else {
    entry.setNote(note);
  }
  entry.setModTime(modTime);
  entry.setIsPublic(isPublic);
  if (entry.getCreateTime() > modTime.longValue()) {
    modTime=entry.getCreateTime();
  }
  if (entry.isQuotation()) {
    if (quotation != null) {
      quotation=cleanUpText(quotation);
      entry.setQuotation(quotation);
    }
  }
  return entry;
}

public static void UF6(double[] x,double[] f,int nx){
  int count1=0;
  int count2=0;
  double sum1=0.0;
  double sum2=0.0;
  double prod1=1.0;
  double prod2=1.0;
  double yj;
  double hj;
  double pj;
  double N=2.0;
  double E=0.1;
  for (int j=2; j <= nx; j++) {
    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);
    pj=Math.cos(20.0 * yj * PI / Math.sqrt(j + 0.0));
    if (j % 2 == 0) {
      sum2+=yj * yj;
      prod2*=pj;
      count2++;
    }
 else {
      sum1+=yj * yj;
      prod1*=pj;
      count1++;
    }
  }
  hj=2.0 * (0.5 / N + E) * Math.sin(2.0 * N * PI* x[0]);
  if (hj < 0.0) {
    hj=0.0;
  }
  f[0]=x[0] + hj + 2.0 * (4.0 * sum1 - 2.0 * prod1 + 2.0) / (double)count1;
  f[1]=1.0 - x[0] + hj + 2.0 * (4.0 * sum2 - 2.0 * prod2 + 2.0) / (double)count2;
}

public FileSaverDescriptor(@NotNull String title,@NotNull String description,String... extensions){
  super(true,true,true,true,false,false);
  setTitle(title);
  setDescription(description);
  this.extensions=Arrays.asList(extensions);
}

protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,"Error Reading Block",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}

public void addRun(final Run run){
  runs.add(run);
  run.setId(runIdCounter++);
}

void copyInto(Converter[] converters){
  System.arraycopy(iConverters,0,converters,0,iConverters.length);
}

@Override public boolean addOutputSensor(String sensorName,int state){
  OutputSensor outputSensor=new OutputSensor(sensorName);
  if (!outputSensor.setState(state)) {
    return false;
  }
  _outputSensorList.add(outputSensor);
  return true;
}

public void init(SocketChannel channel){
  _channel=channel;
  _readBuffer.clear();
  _readBuffer.flip();
  _needsFlush=false;
}

public void reset(){
  Timber.i("resetting QueuedMediaPlayer...");
  mCurrentPlayer.reset();
  mNextPlayer.reset();
  mQueue=Collections.emptyList();
  mQueueIndex=0;
  mRequestedSeekPosition=0;
  mPlayWhenPrepared=false;
}

@Override public Expected<T> ifPresent(final Consumer<? super T> consumer){
  if (this.value != null)   consumer.accept(this.value);
  return this;
}

protected void sendIntensity(double intensity){
  if (log.isDebugEnabled()) {
    log.debug("sendIntensity(" + intensity + ")"+ " lastOutputStep: "+ lastOutputStep+ " maxDimStep: "+ maxDimStep);
  }
  int newStep=(int)Math.round(intensity * maxDimStep);
  if ((newStep < 0) || (newStep > maxDimStep)) {
    log.error("newStep wrong: " + newStep + " intensity: "+ intensity);
  }
  if (newStep == 0) {
    if (log.isDebugEnabled()) {
      log.debug("intensity " + intensity + " within current step, return");
    }
    return;
  }
  X10Sequence out=new X10Sequence();
  out.addExtData(housecode,devicecode,X10Sequence.EXTCMD_DIM,newStep);
  tc.sendX10Sequence(out,null);
  lastOutputStep=newStep;
  if (log.isDebugEnabled()) {
    log.debug("sendIntensity(" + intensity + ") house "+ X10Sequence.houseValueToText(housecode)+ " device "+ devicecode+ " newStep: "+ newStep);
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public static float readFloat(){
  return scanner.nextFloat();
}

public GlowScheduler(GlowServer server,WorldScheduler worlds){
  this.server=server;
  this.worlds=worlds;
  inTickTaskCondition=worlds.getAdvanceCondition();
  tickEndRun=null;
  primaryThread=Thread.currentThread();
}

public void test_fill$IIII(){
  int val=Integer.MAX_VALUE;
  int d[]=new int[1000];
  Arrays.fill(d,400,d.length,val);
  for (int i=0; i < 400; i++)   assertTrue("Filled elements not in range",!(d[i] == val));
  for (int i=400; i < d.length; i++)   assertTrue("Failed to fill int array correctly",d[i] == val);
  try {
    Arrays.fill(d,10,0,val);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Arrays.fill(d,-10,0,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    Arrays.fill(d,10,d.length + 1,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
}

private int calculateLayoutWidth(int widthSize,int mode){
  initResourcesIfNecessary();
  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  int width=itemsLayout.getMeasuredWidth();
  if (mode == MeasureSpec.EXACTLY) {
    width=widthSize;
  }
 else {
    width+=2 * PADDING;
    width=Math.max(width,getSuggestedMinimumWidth());
    if (mode == MeasureSpec.AT_MOST && widthSize < width) {
      width=widthSize;
    }
  }
  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  return width;
}

public void delete() throws IOException {
  close();
  Utils.deleteContents(directory);
}

@Override public boolean execute(@NotNull PsiElement pe,@NotNull ResolveState state){
  if (pe instanceof PsiVariable) {
    final PsiVariable pvar=(PsiVariable)pe;
    if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.hasModifierProperty(PsiModifier.STATIC)) {
      if (check(pvar,state)) {
        myResultList.add(pvar);
      }
    }
  }
  return true;
}

public void characters(char[] ch,int start,int length) throws SAXException {
  try {
    stopTerminator();
    if (w == null)     return;
    int end=start + length;
    for (int i=start; i < end; i++) {
      char c=ch[i];
switch (c) {
case '&':
        w.write("&amp;");
      break;
case '<':
    w.write("&lt;");
  break;
case '>':
w.write("&gt;");
break;
case '\n':
case '\r':
case '\t':
w.write(c);
break;
default :
if (canEncode(c)) {
w.write(c);
}
 else {
w.write("&#");
w.write(Integer.toString(c));
w.write(";");
}
break;
}
}
}
 catch (IOException e) {
throw new SAXException(e);
}
}

public static String toHumanReadableString(final String iso8601Duration){
  String str="";
  if (iso8601Duration.matches("P\\d+[YMD].+")) {
    str="inf.";
  }
 else {
    String hours=getHours(iso8601Duration), minutes=getMinutes(iso8601Duration), seconds=getSeconds(iso8601Duration);
    if (hours != null) {
      str=hours;
      if (minutes != null && minutes.length() == 1) {
        minutes="0" + minutes;
      }
    }
    if (str.isEmpty())     str=minutes;
 else     str+=":" + minutes;
    if (str.isEmpty())     str=seconds;
 else     str+=":" + seconds;
  }
  return str;
}

@Override public IChatMessage sendMessage(final String text) throws RemoteException {
  if (TextUtils.isEmpty(text)) {
    throw new ServerApiIllegalArgumentException("GroupChat message must not be null or empty!");
  }
  int messageLength=text.length();
  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();
  if (messageLength > maxMessageLength) {
    throw new ServerApiIllegalArgumentException("chat message length: " + messageLength + " exceeds max group chat message length: "+ maxMessageLength+ "!");
  }
  if (!isAllowedToSendMessage()) {
    throw new ServerApiPermissionDeniedException("Not allowed to send GroupChat message on the connected IMS server!");
  }
  try {
    mImService.removeGroupChatComposingStatus(mChatId);
    long timestamp=System.currentTimeMillis();
    final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp);
    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING);
    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);
    if (!mChatService.isGroupChatActive(mChatId)) {
      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);
    }
    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);
    return new ChatMessageImpl(persistedStorage);
  }
 catch (  ServerApiBaseException e) {
    if (!e.shouldNotBeLogged()) {
      sLogger.error(ExceptionUtil.getFullStackTrace(e));
    }
    throw e;
  }
catch (  Exception e) {
    sLogger.error(ExceptionUtil.getFullStackTrace(e));
    throw new ServerApiGenericException(e);
  }
}

public java.lang.String toString(){
  return toString(value);
}

void remove(TcpServerThread t){
  running.remove(t);
}

public DockNodeEventHandler(Node node){
  this.node=node;
}

private int readSourceToLog(Settings settings){
  String sourceToLog=settings.get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG,"1000");
  try {
    return Integer.parseInt(sourceToLog,10);
  }
 catch (  NumberFormatException e) {
    return Booleans.parseBoolean(sourceToLog,true) ? Integer.MAX_VALUE : 0;
  }
}

private void deleteCurrentLicenseFileOnDisk(){
  File licenseFile=new File(LicenseConstants.LICENSE_FILE_PATH);
  if (licenseFile.exists()) {
    licenseFile.delete();
  }
}

@Deprecated public static NetworkParameters testNet(){
  return TestNet3Params.get();
}

@Override public void run(){
synchronized (mSync) {
    mRequestStop=false;
    mRequestDrain=0;
    mSync.notify();
  }
  final boolean isRunning=true;
  boolean localRequestStop;
  boolean localRequestDrain;
  while (isRunning) {
synchronized (mSync) {
      localRequestStop=mRequestStop;
      localRequestDrain=(mRequestDrain > 0);
      if (localRequestDrain)       mRequestDrain--;
    }
    if (localRequestStop) {
      drain();
      signalEndOfInputStream();
      drain();
      release();
      break;
    }
    if (localRequestDrain) {
      drain();
    }
 else {
synchronized (mSync) {
        try {
          mSync.wait();
        }
 catch (        final InterruptedException e) {
          break;
        }
      }
    }
  }
  if (DEBUG)   Log.d(TAG,"Encoder thread exiting");
synchronized (mSync) {
    mRequestStop=true;
    mIsCapturing=false;
  }
}

public final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {
  event=dis.readUTF();
  site=dis.readUTF();
  date=dis.readUTF();
  round=dis.readUTF();
  white=dis.readUTF();
  black=dis.readUTF();
  startPos=TextIO.readFEN(dis.readUTF());
  currentPos=new Position(startPos);
  timeControl=dis.readUTF();
  if (version >= 2) {
    whiteTimeControl=dis.readUTF();
    blackTimeControl=dis.readUTF();
  }
 else {
    whiteTimeControl="?";
    blackTimeControl="?";
  }
  int nTags=dis.readInt();
  tagPairs.clear();
  for (int i=0; i < nTags; i++) {
    TagPair tp=new TagPair();
    tp.tagName=dis.readUTF();
    tp.tagValue=dis.readUTF();
    tagPairs.add(tp);
  }
  rootNode=new Node();
  Node.readFromStream(dis,rootNode);
  currentNode=rootNode;
  int pathLen=dis.readInt();
  for (int i=0; i < pathLen; i++)   goForward(dis.readInt());
  updateListener();
}

public Rect updateFastScrollerBounds(BaseRecyclerView rv,int lastTouchY){
  mInvalidateRect.set(mBgBounds);
  if (isVisible()) {
    int edgePadding=rv.getMaxScrollbarWidth();
    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;
    int bgHeight=mBgOriginalSize;
    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));
    if (Utilities.isRtl(mRes)) {
      mBgBounds.left=rv.getBackgroundPadding().left + (2 * rv.getMaxScrollbarWidth());
      mBgBounds.right=mBgBounds.left + bgWidth;
    }
 else {
      mBgBounds.right=rv.getWidth() - rv.getBackgroundPadding().right - (2 * rv.getMaxScrollbarWidth());
      mBgBounds.left=mBgBounds.right - bgWidth;
    }
    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);
    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,rv.getHeight() - edgePadding - bgHeight));
    mBgBounds.bottom=mBgBounds.top + bgHeight;
  }
 else {
    mBgBounds.setEmpty();
  }
  mInvalidateRect.union(mBgBounds);
  return mInvalidateRect;
}

public DNetscapeCaPolicyUrl(JDialog parent){
  super(parent);
  setTitle(res.getString("DNetscapeCaPolicyUrl.Title"));
  initComponents();
}

public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){
  if (!isFocused)   return false;
 else   if (GuiScreen.func_175278_g(p_146201_2_)) {
    setCursorPositionEnd();
    setSelectionPos(0);
    return true;
  }
 else   if (GuiScreen.func_175280_f(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    return true;
  }
 else   if (GuiScreen.func_175279_e(p_146201_2_)) {
    if (isEnabled)     writeText(GuiScreen.getClipboardString());
    return true;
  }
 else   if (GuiScreen.func_175277_d(p_146201_2_)) {
    GuiScreen.setClipboardString(getSelectedText());
    if (isEnabled)     writeText("");
    return true;
  }
 else switch (p_146201_2_) {
case 14:
    if (GuiScreen.isCtrlKeyDown()) {
      if (isEnabled)       deleteWords(-1);
    }
 else     if (isEnabled)     deleteFromCursor(-1);
  return true;
case 199:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(0);
 else setCursorPositionZero();
return true;
case 203:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(-1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() - 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(-1));
 else moveCursorBy(-1);
return true;
case 205:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(1,getSelectionEnd()));
 else setSelectionPos(getSelectionEnd() + 1);
}
 else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(1));
 else moveCursorBy(1);
return true;
case 207:
if (GuiScreen.isShiftKeyDown()) setSelectionPos(text.length());
 else setCursorPositionEnd();
return true;
case 211:
if (GuiScreen.isCtrlKeyDown()) {
if (isEnabled) deleteWords(1);
}
 else if (isEnabled) deleteFromCursor(1);
return true;
default :
if (EmailAllowedCharacters.isAllowedCharacter(p_146201_1_)) {
if (isEnabled) writeText(Character.toString(p_146201_1_));
return true;
}
 else return false;
}
}

protected int match_bitap(String text,String pattern,int loc){
  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";
  Map<Character,Integer> s=match_alphabet(pattern);
  double score_threshold=Match_Threshold;
  int best_loc=text.indexOf(pattern,loc);
  if (best_loc != -1) {
    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);
    best_loc=text.lastIndexOf(pattern,loc + pattern.length());
    if (best_loc != -1) {
      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);
    }
  }
  int matchmask=1 << (pattern.length() - 1);
  best_loc=-1;
  int bin_min, bin_mid;
  int bin_max=pattern.length() + text.length();
  int[] last_rd=new int[0];
  for (int d=0; d < pattern.length(); d++) {
    bin_min=0;
    bin_mid=bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {
        bin_min=bin_mid;
      }
 else {
        bin_max=bin_mid;
      }
      bin_mid=(bin_max - bin_min) / 2 + bin_min;
    }
    bin_max=bin_mid;
    int start=Math.max(1,loc - bin_mid + 1);
    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();
    int[] rd=new int[finish + 2];
    rd[finish + 1]=(1 << d) - 1;
    for (int j=finish; j >= start; j--) {
      int charMatch;
      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {
        charMatch=0;
      }
 else {
        charMatch=s.get(text.charAt(j - 1));
      }
      if (d == 0) {
        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;
      }
 else {
        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];
      }
      if ((rd[j] & matchmask) != 0) {
        double score=match_bitapScore(d,j - 1,loc,pattern);
        if (score <= score_threshold) {
          score_threshold=score;
          best_loc=j - 1;
          if (best_loc > loc) {
            start=Math.max(1,2 * loc - best_loc);
          }
 else {
            break;
          }
        }
      }
    }
    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {
      break;
    }
    last_rd=rd;
  }
  return best_loc;
}

public static Path createDirectory(final Path parent,final String folderName){
  final File file=new File(parent.toFile(),folderName);
  if (!file.exists()) {
    if (!file.mkdir()) {
      throw new RuntimeException("Error while trying to create folder at " + parent + " with "+ folderName+ ".");
    }
  }
  file.deleteOnExit();
  return file.toPath();
}

public static boolean isWindows8(){
  return osName.indexOf("Windows") > -1 && (osVersion.equals("6.2") || osVersion.equals("6.3"));
}

protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){
  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();
  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();
  for (  UnitInterface unit : units) {
    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);
    allFunctions.addAll(unitFunctions);
    for (    FunctionInterface unitFunction : unitFunctions) {
      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {
        usedFunctions.add(usedFunction);
      }
    }
  }
  allFunctions.removeAll(usedFunctions);
  return allFunctions;
}

private static void addItemsToList(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    values.add(new Integer(i));
  }
}

public static synchronized List<Proxy> noProxyList(){
  if (noProxyList == null) {
    ArrayList<Proxy> list=new ArrayList<Proxy>(1);
    list.add(Proxy.NO_PROXY);
    noProxyList=Collections.unmodifiableList(list);
  }
  return noProxyList;
}

public void addIncludes(String[] definitions){
  addStrings(INCLUDES,definitions);
  addStrings(linker_more,INCLUDES,definitions);
  newLinkerOptionsAfterCompile.add(INCLUDES);
}

protected void add(double value,int group){
  if ((group < 0) || (group >= numberOfGroups)) {
    throw new IllegalArgumentException();
  }
  data.add(new RankedObservation(value,group));
}

public void tallyVariant(VcfHeader header,VcfRecord rec){
  tallyVariant(rec,header.getSampleNames());
}

public int read(byte[] b,int off,int len) throws IOException {
  if (closed) {
    throw new IOException("Attempted read from closed stream.");
  }
  if (eof) {
    return -1;
  }
  if (pos >= chunkSize) {
    nextChunk();
    if (eof) {
      return -1;
    }
  }
  len=Math.min(len,chunkSize - pos);
  int count=in.read(b,off,len);
  pos+=count;
  return count;
}

public LDIFEntryReader(final String... ldifLines){
  super(Arrays.asList(ldifLines));
}

public void updatePresonInfo(){
  this.leftPerson=person2LeavingPersonInfo.get(this.personId);
  this.enteredPerson=person2EnteringPersonInfo.get(this.personId);
}

public MyMap remove(int position){
  MyMap mm=null;
  if (position >= 0 && position < getItemCount()) {
    mm=myMaps.remove(position);
    notifyItemRemoved(position);
  }
  return mm;
}

public void presentLicenses(boolean preAccept){
  LicenseSet licenses=licenseModule.getRequiredLicenses();
  if (preAccept) {
    licenses.acceptAll();
  }
 else {
    for (    License license : licenses) {
      if (license.isAccepted()) {
        continue;
      }
      user.show("");
      user.show(license.getLicenseText());
      String input=user.ask("prompt");
      if (input != null && YES.startsWith(input.toLowerCase())) {
        license.accept();
      }
 else {
        license.reject();
      }
    }
  }
}

public void addGeoKey(XTIFFField geoKey){
  geoKeyIndex.put(new Integer(geoKey.getTag()),geoKey);
  hasGeoKeys=true;
}

public static GeoTimeSerie detect(GeoTimeSerie gts,int alphabetSize,int wordLen,int windowLen,Collection<String> patterns,boolean standardizePAA) throws WarpScriptException {
  GeoTimeSerie gtsPatterns=GTSHelper.bSAX(gts,alphabetSize,wordLen,windowLen,standardizePAA);
  GTSHelper.sort(gtsPatterns);
  GeoTimeSerie detected=new GeoTimeSerie(gts.lastbucket,gts.bucketcount,gts.bucketspan,16);
  detected.setMetadata(gts.getMetadata());
  int lastidx=-1;
  for (int i=0; i < gtsPatterns.values; i++) {
    if (!patterns.contains(gtsPatterns.stringValues[i])) {
      continue;
    }
    for (int j=0; j < windowLen; j++) {
      if (i + j > lastidx) {
        lastidx=i + j;
        GTSHelper.setValue(detected,GTSHelper.tickAtIndex(gts,lastidx),GTSHelper.locationAtIndex(gts,lastidx),GTSHelper.elevationAtIndex(gts,lastidx),GTSHelper.valueAtIndex(gts,lastidx),false);
      }
    }
  }
  return detected;
}

private StringBuilder debugDumpCandidates(StringBuilder msg,List<? extends Itemset> candidates,VectorFieldTypeInformation<BitVector> meta){
  msg.append(':');
  for (  Itemset itemset : candidates) {
    msg.append(" [");
    itemset.appendTo(msg,meta);
    msg.append(']');
  }
  return msg;
}

public static final void writeBooleanArrayXml(boolean[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,"null");
    out.endTag(null,"null");
    return;
  }
  out.startTag(null,"boolean-array");
  if (name != null) {
    out.attribute(null,"name",name);
  }
  final int N=val.length;
  out.attribute(null,"num",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,"item");
    out.attribute(null,"value",Boolean.toString(val[i]));
    out.endTag(null,"item");
  }
  out.endTag(null,"boolean-array");
}

public void addOutboundRule(final OutboundRule outboundRule){
  outboundRule.setId(outboundRuleIdCounter++);
  outboundRules.add(outboundRule);
}

public Skype(String username,String password){
  this.username=username;
  this.password=password;
}

private void stopDrag(MotionEvent ev){
  mTouchMode=TOUCH_MODE_IDLE;
  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();
  final boolean oldState=isChecked();
  final boolean newState;
  if (commitChange) {
    mVelocityTracker.computeCurrentVelocity(1000);
    final float xvel=mVelocityTracker.getXVelocity();
    if (Math.abs(xvel) > mMinFlingVelocity) {
      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);
    }
 else {
      newState=getTargetCheckedState();
    }
  }
 else {
    newState=oldState;
  }
  if (newState != oldState) {
    playSoundEffect(SoundEffectConstants.CLICK);
  }
  setChecked(newState);
  cancelSuperTouch(ev);
}

private void addFlags(int newflags){
  flags=getLayoutFlags() | newflags;
}

public static String matchCertificate(KeyStore keyStore,X509Certificate cert) throws CryptoException {
  try {
    for (Enumeration aliases=keyStore.aliases(); aliases.hasMoreElements(); ) {
      String alias=(String)aliases.nextElement();
      if (keyStore.isCertificateEntry(alias)) {
        X509Certificate compCert=X509CertUtil.convertCertificate(keyStore.getCertificate(alias));
        if (cert.equals(compCert)) {
          return alias;
        }
      }
    }
    return null;
  }
 catch (  KeyStoreException ex) {
    throw new CryptoException(res.getString("NoMatchCertificate.exception.message"),ex);
  }
}

void purgeLastArticles(int amountToPurge){
  if (!isDBAvailable())   return;
  long time=System.currentTimeMillis();
  String query="_id IN ( SELECT _id FROM " + TABLE_ARTICLES + " WHERE isPublished=0 AND isStarred=0 ORDER BY updateDate DESC LIMIT -1 OFFSET "+ (Utils.ARTICLE_LIMIT - amountToPurge + ")");
  safelyDeleteArticles(query,null);
  Log.d(TAG,"purgeLastArticles took " + (System.currentTimeMillis() - time) + "ms");
}

public void reclaimViews(List<View> views){
  int childCount=getChildCount();
  RecyclerListener listener=mRecycler.mRecyclerListener;
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    TwoWayAbsListView.LayoutParams lp=(TwoWayAbsListView.LayoutParams)child.getLayoutParams();
    if (lp != null && mRecycler.shouldRecycleViewType(lp.viewType)) {
      views.add(child);
      if (listener != null) {
        listener.onMovedToScrapHeap(child);
      }
    }
  }
  mRecycler.reclaimScrapViews(views);
  removeAllViewsInLayout();
}

ProxyVerifier(TxnManager serverProxy,Uuid proxyID){
  if (!(serverProxy instanceof RemoteMethodControl)) {
    throw new UnsupportedOperationException("No verifier available for non-constrainable service");
  }
 else   if (!(serverProxy instanceof TrustEquivalence)) {
    throw new UnsupportedOperationException("Verifier requires service proxy to implement " + "TrustEquivalence");
  }
 else   if (proxyID == null) {
    throw new IllegalArgumentException("Proxy id cannot be null");
  }
  this.serverProxy=(RemoteMethodControl)serverProxy;
  this.proxyID=proxyID;
}

public void paint(Graphics g){
  g.translate(0,translateY);
  super.paint(g);
}

private void beforeKey() throws JSONException {
  Scope context=peek();
  if (context == Scope.NONEMPTY_OBJECT) {
    out.append(',');
  }
 else   if (context != Scope.EMPTY_OBJECT) {
    throw new JSONException("Nesting problem");
  }
  newline();
  replaceTop(Scope.DANGLING_KEY);
}

public static void transfer(InputStream in,OutputStream out,int bufferSize) throws IOException {
  byte[] buffer=new byte[bufferSize];
  int bytesRead;
  while ((bytesRead=in.read(buffer)) != -1) {
    out.write(buffer,0,bytesRead);
  }
}

public void testFileDirectory() throws Exception {
  Properties properties=loadProperties("test-file-directory/test-subfolder");
  assertEquals("@cargo.servlet.port@",properties.getProperty("cargo.servlet.port"));
}

private static long addAndCheck(long a,long b,Localizable pattern) throws MathRuntimeException {
  final long result=a + b;
  if (!((a ^ b) < 0 || (a ^ result) >= 0)) {
    throw new MathRuntimeException(pattern,a,b);
  }
  return result;
}

private void serializeCompactRDFGeneralQualifier(int indent,XMPNode node) throws IOException, XMPException {
  write(" rdf:parseType=\"Resource\">");
  writeNewline();
  serializeCanonicalRDFProperty(node,false,true,indent + 1);
  for (Iterator iq=node.iterateQualifier(); iq.hasNext(); ) {
    XMPNode qualifier=(XMPNode)iq.next();
    serializeCanonicalRDFProperty(qualifier,false,false,indent + 1);
  }
}

private JCheckBox addCheckbox(String text,Container container){
  JCheckBox checkbox=new JCheckBox(text);
  checkbox.setAlignmentX(Component.LEFT_ALIGNMENT);
  checkbox.setBorder(BorderFactory.createEmptyBorder(0,0,10,5));
  container.add(checkbox);
  return checkbox;
}

@Override public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){
  float x0=(float)dataArea.getX();
  float x1=x0 + (float)Math.abs(this.xOffset);
  float x3=(float)dataArea.getMaxX();
  float x2=x3 - (float)Math.abs(this.xOffset);
  float y0=(float)dataArea.getMaxY();
  float y1=y0 - (float)Math.abs(this.yOffset);
  float y3=(float)dataArea.getMinY();
  float y2=y3 + (float)Math.abs(this.yOffset);
  GeneralPath clip=new GeneralPath();
  clip.moveTo(x0,y0);
  clip.lineTo(x0,y2);
  clip.lineTo(x1,y3);
  clip.lineTo(x3,y3);
  clip.lineTo(x3,y1);
  clip.lineTo(x2,y0);
  clip.closePath();
  Composite originalComposite=g2.getComposite();
  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));
  Paint backgroundPaint=plot.getBackgroundPaint();
  if (backgroundPaint != null) {
    g2.setPaint(backgroundPaint);
    g2.fill(clip);
  }
  GeneralPath leftWall=new GeneralPath();
  leftWall.moveTo(x0,y0);
  leftWall.lineTo(x0,y2);
  leftWall.lineTo(x1,y3);
  leftWall.lineTo(x1,y1);
  leftWall.closePath();
  g2.setPaint(getWallPaint());
  g2.fill(leftWall);
  GeneralPath bottomWall=new GeneralPath();
  bottomWall.moveTo(x0,y0);
  bottomWall.lineTo(x1,y1);
  bottomWall.lineTo(x3,y1);
  bottomWall.lineTo(x2,y0);
  bottomWall.closePath();
  g2.setPaint(getWallPaint());
  g2.fill(bottomWall);
  g2.setPaint(Color.lightGray);
  Line2D corner=new Line2D.Double(x0,y0,x1,y1);
  g2.draw(corner);
  corner.setLine(x1,y1,x1,y3);
  g2.draw(corner);
  corner.setLine(x1,y1,x3,y1);
  g2.draw(corner);
  Image backgroundImage=plot.getBackgroundImage();
  if (backgroundImage != null) {
    Rectangle2D adjusted=new Rectangle2D.Double(dataArea.getX() + getXOffset(),dataArea.getY(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());
    plot.drawBackgroundImage(g2,adjusted);
  }
  g2.setComposite(originalComposite);
}

public void push(){
  state.cliprgn=g.getClipBounds();
  stack.push(state);
  state=(GraphicsState)state.clone();
}

public static void dropIndex(Connection conn,String schema,String table) throws SQLException {
  init(conn);
  PreparedStatement prep=conn.prepareStatement("SELECT ID FROM " + SCHEMA + ".INDEXES WHERE SCHEMA=? AND TABLE=?");
  prep.setString(1,schema);
  prep.setString(2,table);
  ResultSet rs=prep.executeQuery();
  if (!rs.next()) {
    return;
  }
  int indexId=rs.getInt(1);
  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".INDEXES WHERE ID=?");
  prep.setInt(1,indexId);
  prep.execute();
  createOrDropTrigger(conn,schema,table,false);
  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".ROWS WHERE INDEXID=? AND ROWNUM<10000");
  while (true) {
    prep.setInt(1,indexId);
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
  prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".MAP M "+ "WHERE NOT EXISTS (SELECT * FROM "+ SCHEMA+ ".ROWS R WHERE R.ID=M.ROWID) AND ROWID<10000");
  while (true) {
    int deleted=prep.executeUpdate();
    if (deleted == 0) {
      break;
    }
  }
}

public E peek(){
  if (isEmpty()) {
    return null;
  }
  return elements[0];
}

public synchronized int add(IAudioProcessor processor){
  processors.add(processor);
  buildFinalProcessor();
  return processors.indexOf(processor);
}

public ScriptBuilder data(int index,byte[] data){
  byte[] copy=Arrays.copyOf(data,data.length);
  int opcode;
  if (data.length == 0) {
    opcode=OP_0;
  }
 else   if (data.length == 1) {
    byte b=data[0];
    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b);
 else     opcode=1;
  }
 else   if (data.length < OP_PUSHDATA1) {
    opcode=data.length;
  }
 else   if (data.length < 256) {
    opcode=OP_PUSHDATA1;
  }
 else   if (data.length < 65536) {
    opcode=OP_PUSHDATA2;
  }
 else {
    throw new RuntimeException("Unimplemented");
  }
  return addChunk(index,new ScriptChunk(opcode,copy));
}

public void initialize(Map configParams){
  String delimiterConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER);
  if (delimiterConfig != null) {
    this.delimiter=delimiterConfig;
  }
  String caseConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE);
  if (caseConfig != null) {
    if (caseConfig.equals("true")) {
      this.caseSensitive=true;
    }
 else     if (caseConfig.equals("false")) {
      this.caseSensitive=false;
    }
 else {
      this.caseSensitive=true;
    }
  }
  String wildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD);
  if (wildcardConfig != null) {
    this.wildcard=wildcardConfig;
  }
  String oneLevelWildcardConfig=(String)configParams.get(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD);
  if (oneLevelWildcardConfig != null) {
    this.oneLevelWildcard=oneLevelWildcardConfig;
  }
  if (debug.messageEnabled()) {
    debug.message("PrefixResourceName:initialize():" + " delimiter = " + delimiter + " wildcard = "+ wildcard+ " oneLevelWildcard = "+ oneLevelWildcard+ " case = "+ caseConfig);
  }
  oneLevelWildcardLength=oneLevelWildcard.length();
  wildcardLength=wildcard.length();
  if (oneLevelWildcard.indexOf(wildcard) != -1) {
    wildcardEmbedded=true;
  }
 else {
    wildcardEmbedded=false;
  }
  if (wildcard.indexOf(oneLevelWildcard) != -1) {
    oneLevelWildcardEmbedded=true;
  }
 else {
    oneLevelWildcardEmbedded=false;
  }
  if (debug.messageEnabled()) {
    debug.message("wildcardEmbedded,oneLevelWildcardEmbedded" + wildcardEmbedded + ","+ oneLevelWildcardEmbedded);
  }
  return;
}

protected void deleteLeastUsedEntry(){
  try {
    poolLock.lock();
    BasicPoolEntry entry=freeConnections.remove();
    if (entry != null) {
      deleteEntry(entry);
    }
 else     if (log.isDebugEnabled()) {
      log.debug("No free connection to delete.");
    }
  }
  finally {
    poolLock.unlock();
  }
}

private String convertLessThanOneThousand(int number){
  String soFar;
  if (number % 100 < 20) {
    soFar=numNames[number % 100];
    number/=100;
  }
 else {
    soFar=numNames[number % 10];
    number/=10;
    String s=Integer.toString(number);
    if (s.endsWith("2") && !soFar.equals(""))     soFar=" VINT-I-" + soFar.trim();
 else     if (soFar.equals(""))     soFar=tensNames[number % 10] + soFar;
 else     soFar=tensNames[number % 10] + "-" + soFar;
    number/=10;
  }
  if (number == 0)   return tensNames[number % 10] + soFar;
  if (number > 1)   soFar="S" + soFar;
  if (number == 1 && !soFar.equals(""))   number=0;
  return numNames[number] + " CENT" + soFar;
}

public static boolean isEmbeddedBase64Image(String uri){
  return (uri != null && uri.startsWith("data:image/"));
}

void changeState(int newState){
  int oldState;
synchronized (stateLock) {
    if (state == newState)     return;
    oldState=state;
    state=newState;
    stateLock.notifyAll();
  }
  sendStateChangeNotification(oldState,newState);
}

private int parseLinkLabel(){
  String m=match(LINK_LABEL);
  return m == null ? 0 : m.length();
}

private static void insertCommentsInNode(Node node,List<Comment> commentsToAttribute){
  if (commentsToAttribute.size() == 0)   return;
  List<Node> children=node.getChildrenNodes();
  PositionUtils.sortByBeginPosition(children);
  for (  Node child : children) {
    List<Comment> commentsInsideChild=new LinkedList<Comment>();
    for (    Comment c : commentsToAttribute) {
      if (PositionUtils.nodeContains(child,c,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) {
        commentsInsideChild.add(c);
      }
    }
    commentsToAttribute.removeAll(commentsInsideChild);
    insertCommentsInNode(child,commentsInsideChild);
  }
  List<Comment> attributedComments=new LinkedList<Comment>();
  for (  Comment comment : commentsToAttribute) {
    if (comment.isLineComment()) {
      for (      Node child : children) {
        if (child.getEndLine() == comment.getBeginLine()) {
          if (attributeLineCommentToNodeOrChild(child,comment.asLineComment())) {
            attributedComments.add(comment);
          }
        }
      }
    }
  }
  Comment previousComment=null;
  attributedComments=new LinkedList<Comment>();
  List<Node> childrenAndComments=new LinkedList<Node>();
  childrenAndComments.addAll(children);
  childrenAndComments.addAll(commentsToAttribute);
  PositionUtils.sortByBeginPosition(childrenAndComments,_doNotConsiderAnnotationsAsNodeStartForCodeAttribution);
  for (  Node thing : childrenAndComments) {
    if (thing instanceof Comment) {
      previousComment=(Comment)thing;
      if (!previousComment.isOrphan()) {
        previousComment=null;
      }
    }
 else {
      if (previousComment != null && !thing.hasComment()) {
        if (!_doNotAssignCommentsPreceedingEmptyLines || !thereAreLinesBetween(previousComment,thing)) {
          thing.setComment(previousComment);
          attributedComments.add(previousComment);
          previousComment=null;
        }
      }
    }
  }
  commentsToAttribute.removeAll(attributedComments);
  for (  Comment c : commentsToAttribute) {
    if (c.isOrphan()) {
      node.addOrphanComment(c);
    }
  }
}

public static String readFileAsString(File file) throws FileNotFoundException {
  return readFileAsString(file.getAbsolutePath());
}

protected void onException(final WroRuntimeException e){
  throw e;
}

public synchronized void checkAccess(LicenseCheckerCallback callback){
  if (mPolicy.allowAccess()) {
    Log.i(TAG,"Using cached license response");
    callback.allow(Policy.LICENSED);
  }
 else {
    LicenseValidator validator=new LicenseValidator(mPolicy,new NullDeviceLimiter(),callback,generateNonce(),mPackageName,mVersionCode);
    if (mService == null) {
      Log.i(TAG,"Binding to licensing service.");
      try {
        boolean bindResult=mContext.bindService(new Intent(new String(Base64.decode("Y29tLmFuZHJvaWQudmVuZGluZy5saWNlbnNpbmcuSUxpY2Vuc2luZ1NlcnZpY2U="))),this,Context.BIND_AUTO_CREATE);
        if (bindResult) {
          mPendingChecks.offer(validator);
        }
 else {
          Log.e(TAG,"Could not bind to service.");
          handleServiceConnectionError(validator);
        }
      }
 catch (      SecurityException e) {
        callback.applicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION);
      }
catch (      Base64DecoderException e) {
        e.printStackTrace();
      }
    }
 else {
      mPendingChecks.offer(validator);
      runChecks();
    }
  }
}

public void close(){
  if (!isOpen)   return;
  Log.d(TAG,"Trying to close track");
  loadingLock.lock();
  try {
    save();
    if (saveFileStream != null) {
      SavingHelper.close(saveFileStream);
      saveFileStream=null;
    }
    savingDisabled=true;
    isOpen=false;
    Log.i(TAG,"Track closed");
  }
  finally {
    loadingLock.unlock();
  }
}

protected int selectOperator(){
  lastUpdate++;
  if ((lastUpdate >= UPDATE_WINDOW) || (probabilities == null)) {
    lastUpdate=0;
    probabilities=getOperatorProbabilities();
  }
  double rand=PRNG.nextDouble();
  double sum=0.0;
  for (int i=0; i < operators.size(); i++) {
    sum+=probabilities[i];
    if (sum > rand) {
      return i;
    }
  }
  throw new IllegalStateException();
}

@Override public List chunkString(String sToChunk){
  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());
  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);
  return Arrays.asList(sRes);
}

public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}

public ByteBuffer decodeBufferToByteBuffer(String inputString) throws IOException {
  return ByteBuffer.wrap(decodeBuffer(inputString));
}

public void clear(){
  m_Model.clear();
  setButtons(null);
}

public static int brighter(int c){
  int r=red(c), g=green(c), b=blue(c);
  int i=(int)(1.0 / (1.0 - scale));
  if (r == 0 && g == 0 && b == 0) {
    return rgba(i,i,i,alpha(c));
  }
  if (r > 0 && r < i)   r=i;
  if (g > 0 && g < i)   g=i;
  if (b > 0 && b < i)   b=i;
  return rgba(Math.min(255,(int)(r / scale)),Math.min(255,(int)(g / scale)),Math.min(255,(int)(b / scale)),alpha(c));
}

public void shutdown(){
  running=false;
  if (networkThreads != null) {
    for (    NetworkThread n : networkThreads) {
      n.stopped=true;
    }
  }
  networkThreads=null;
synchronized (LOCK) {
    LOCK.notifyAll();
  }
}

public SerialMessage(byte[] a){
  super(String.valueOf(a));
  setBinary(true);
}

@Override @SuppressWarnings("unchecked") public void completed(int bytesTransferred,boolean canInvokeDirect){
  if (bytesTransferred == 0) {
    bytesTransferred=-1;
  }
 else {
    updateBuffers(bytesTransferred);
  }
  releaseBuffers();
synchronized (result) {
    if (result.isDone())     return;
    enableReading();
    if (scatteringRead) {
      result.setResult((V)Long.valueOf(bytesTransferred));
    }
 else {
      result.setResult((V)Integer.valueOf(bytesTransferred));
    }
  }
  if (canInvokeDirect) {
    Invoker.invokeUnchecked(result);
  }
 else {
    Invoker.invoke(result);
  }
}

public void writeGolomb(int divisor,int value){
  int q=value / divisor;
  for (int i=0; i < q; i++) {
    writeBit(1);
  }
  writeBit(0);
  int r=value - q * divisor;
  int bit=31 - Integer.numberOfLeadingZeros(divisor - 1);
  if (r < ((2 << bit) - divisor)) {
    bit--;
  }
 else {
    r+=(2 << bit) - divisor;
  }
  for (; bit >= 0; bit--) {
    writeBit((r >>> bit) & 1);
  }
}

public void addForce(Force f){
  if (f.isItemForce()) {
    if (iforces.length == iflen) {
      Force[] newf=new Force[iflen + 10];
      System.arraycopy(iforces,0,newf,0,iforces.length);
      iforces=newf;
    }
    iforces[iflen++]=f;
  }
  if (f.isSpringForce()) {
    if (sforces.length == sflen) {
      Force[] newf=new Force[sflen + 10];
      System.arraycopy(sforces,0,newf,0,sforces.length);
      sforces=newf;
    }
    sforces[sflen++]=f;
  }
}

private static MetricValue number_to_metric_value_(Number elem){
  if (elem == null)   return MetricValue.EMPTY;
  final String num=elem.toString();
  try {
    return MetricValue.fromIntValue(Long.parseLong(num));
  }
 catch (  NumberFormatException ex) {
  }
  try {
    return MetricValue.fromDblValue(Double.parseDouble(num));
  }
 catch (  NumberFormatException ex) {
  }
  return MetricValue.fromStrValue(num);
}

public boolean overlaps(String sequence,int start,int end){
  if (start == MISSING || end == MISSING || end < start) {
    throw new IllegalArgumentException();
  }
  if (!mSequence.equals(sequence)) {
    return false;
  }
  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {
    return false;
  }
  return true;
}

public OkapiBM25(double k1,double b){
  if (Double.isNaN(k1) || Double.isInfinite(k1) || k1 < 0)   throw new IllegalArgumentException("coefficient k1 must be a non negative constant, not " + k1);
  this.k1=k1;
  if (Double.isNaN(b) || b < 0 || b > 1)   throw new IllegalArgumentException("coefficient b must be in the range [0,1], not " + b);
  this.b=b;
}

protected void prepare(){
  for (  ProcessInfoParameter para : getParameter()) {
    String name=para.getParameterName();
    if (para.getParameter() == null)     ;
 else     if (name.equals(PARAM_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt();
 else     log.log(Level.SEVERE,"Unknown Parameter: " + name);
  }
  p_C_Invoice_ID=getRecord_ID();
}

public boolean isConfigured(){
  LOG.debug("lookup url: " + url);
  return url != null && !url.isEmpty();
}

public static String[] commaDelimitedListToStringArray(String str){
  return delimitedListToStringArray(str,",");
}

@Override public byte[] readByteArray(String filePath,long offset,int length){
  FileChannel fileChannel=updateCache(filePath);
  ByteBuffer byteBffer=read(fileChannel,length,offset);
  return byteBffer.array();
}

private static void FatalError(JNIEnvironment env,Address messageAddress){
  if (traceJNI)   VM.sysWrite("JNI called: FatalError  \n");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    VM.sysWrite(JNIGenericHelpers.createStringFromC(messageAddress));
    System.exit(EXIT_STATUS_JNI_TROUBLE);
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    System.exit(EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN);
  }
}

public boolean makeBackupFile(String directory,File file){
  if (file == null) {
    log.info("No file to backup");
  }
 else   if (file.canWrite()) {
    String backupFullName=directory + File.separator + createFileNameWithDate(file.getName());
    if (log.isDebugEnabled()) {
      log.debug("new backup file: " + backupFullName);
    }
    File backupFile=findFile(backupFullName);
    if (backupFile != null) {
      if (backupFile.delete()) {
        if (log.isDebugEnabled()) {
          log.debug("deleted backup file " + backupFullName);
        }
      }
    }
 else {
      backupFile=new File(backupFullName);
    }
    File parentDir=backupFile.getParentFile();
    if (!parentDir.exists()) {
      if (log.isDebugEnabled()) {
        log.debug("creating backup directory: " + parentDir.getName());
      }
      if (!parentDir.mkdirs()) {
        log.error("backup directory not created");
        return false;
      }
    }
    if (file.renameTo(new File(backupFullName))) {
      if (log.isDebugEnabled()) {
        log.debug("created new backup file " + backupFullName);
      }
    }
 else {
      if (log.isDebugEnabled()) {
        log.debug("could not create backup file " + backupFullName);
      }
      return false;
    }
  }
  return true;
}

public final void pushPair(int v1,int v2){
  if (null == m_map) {
    m_map=new int[m_blocksize];
    m_mapSize=m_blocksize;
  }
 else {
    if ((m_firstFree + 2) >= m_mapSize) {
      m_mapSize+=m_blocksize;
      int newMap[]=new int[m_mapSize];
      System.arraycopy(m_map,0,newMap,0,m_firstFree);
      m_map=newMap;
    }
  }
  m_map[m_firstFree]=v1;
  m_map[m_firstFree + 1]=v2;
  m_firstFree+=2;
}

public void removeStorage() throws BackupException {
  logger.debug("Removing contents of storage directory: " + dataDirSpec.getAbsolutePath());
  processHelper.exec("Removing contents of storage directory",rmCmd);
}

private void appendContainerConfig(DockerSlaveTemplate slaveTemplate,CreateContainerCmd containerConfig){
  Map<String,String> labels=containerConfig.getLabels();
  if (labels == null) {
    labels=new HashMap<>();
  }
  labels.put(DOCKER_CLOUD_LABEL,getDisplayName());
  labels.put(DOCKER_TEMPLATE_LABEL,slaveTemplate.getId());
  containerConfig.withLabels(labels);
}

ReadOnlyGameSettings(){
}

public void deleteUsers(Set users) throws AMException, SSOException {
  Iterator iter=users.iterator();
  while (iter.hasNext()) {
    String userDN=(String)iter.next();
    AMUser user=new AMUserImpl(super.token,userDN);
    user.delete();
  }
}

@Override public boolean accept(File file){
  String name=file.getName();
  for (  String wildcard : wildcards) {
    if (FilenameUtils.wildcardMatch(name,wildcard,caseSensitivity)) {
      return true;
    }
  }
  return false;
}

public void removeRegion(Region r){
  regions.remove(r);
}

public static void silentCloseInputStream(InputStream is){
  try {
    if (is != null) {
      is.close();
    }
  }
 catch (  IOException e) {
    log.w(LOG_TAG,"Cannot close input stream",e);
  }
}

@Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {
  if (requestID == null && localName.equals("batchRequest")) {
    requestID=attributes.getValue("requestID");
  }
  super.startElement(uri,localName,qName,attributes);
}

public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null) {
      if (Thread.currentThread() != selectorthread) {
      }
      if (selectorthread != Thread.currentThread()) {
        if (socketsToClose.size() > 0)         selectorthread.join(timeout);
        selectorthread.interrupt();
        selectorthread.join();
      }
    }
  }
}

public Storage(){
  this(new File(getTemporaryStorageDirectoryString()));
}

protected void calculateItemWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){
  CategoryAxis domainAxis=getDomainAxis(plot,rendererIndex);
  CategoryDataset dataset=plot.getDataset(rendererIndex);
  if (dataset != null) {
    int columns=dataset.getColumnCount();
    int rows=state.getVisibleSeriesCount() >= 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();
    double space=0.0;
    PlotOrientation orientation=plot.getOrientation();
    if (orientation == PlotOrientation.HORIZONTAL) {
      space=dataArea.getHeight();
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      space=dataArea.getWidth();
    }
    double maxWidth=space * getMaximumItemWidth();
    double categoryMargin=0.0;
    double currentItemMargin=0.0;
    if (columns > 1) {
      categoryMargin=domainAxis.getCategoryMargin();
    }
    if (rows > 1) {
      currentItemMargin=getItemMargin();
    }
    double used=space * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);
    if ((rows * columns) > 0) {
      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));
    }
 else {
      state.setBarWidth(Math.min(used,maxWidth));
    }
  }
}

@RequiresPermission(Manifest.permission.CAMERA) public CameraSource start() throws IOException {
synchronized (mCameraLock) {
    if (mCamera != null) {
      return this;
    }
    mCamera=createCamera();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      mDummySurfaceTexture=new SurfaceTexture(DUMMY_TEXTURE_NAME);
      mCamera.setPreviewTexture(mDummySurfaceTexture);
    }
 else {
      mDummySurfaceView=new SurfaceView(mContext);
      mCamera.setPreviewDisplay(mDummySurfaceView.getHolder());
    }
    mCamera.startPreview();
    isSafeToTakePicture=true;
    mProcessingThread=new Thread(mFrameProcessor);
    mFrameProcessor.setActive(true);
    mProcessingThread.start();
  }
  return this;
}

public void addBreakpointListener(final BreakpointListener listener){
  breakpointListeners.add(listener);
}

public void update(Graphics g){
  if (isShowing()) {
    if (!(peer instanceof LightweightPeer)) {
      g.clearRect(0,0,width,height);
    }
    paint(g);
  }
}

private void releaseWaiters(int phase){
  QNode q;
  Thread t;
  AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;
  while ((q=head.get()) != null && q.phase != (int)(root.state >>> PHASE_SHIFT)) {
    if (head.compareAndSet(q,q.next) && (t=q.thread) != null) {
      q.thread=null;
      LockSupport.unpark(t);
    }
  }
}

public static DateFormat toDateTimeFormat(String dateTimeFormat,TimeZone tz,Locale locale){
  DateFormat df=null;
  if (UtilValidate.isEmpty(dateTimeFormat)) {
    df=DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.MEDIUM,locale);
  }
 else {
    df=new SimpleDateFormat(dateTimeFormat,locale == null ? Locale.getDefault() : locale);
  }
  df.setTimeZone(tz);
  return df;
}

public static void printStackTrace(Throwable e){
  try {
    Debug.printStackTrace(e);
  }
 catch (  Throwable f) {
    e.printStackTrace();
  }
}

@Override public Void visitType(TypeElement e,Void p){
  scan(e.getTypeParameters(),p);
  checkCamelCase(e,true);
  super.visitType(e,p);
  return null;
}

public Block(boolean multiPush){
  this(multiPush,"block",null,Arrays.asList("scrape-1","scrape-2"));
}

private double Poisson(double x){
  return Math.exp(-m_Lambda + (x * Math.log(m_Lambda)) - logFac(x));
}

protected Expression findExpression(String source){
  if (source != null && source.length() > 0) {
    source=source.trim();
    if (source.length() == 0) {
      return null;
    }
    String leftSide=source;
    String rightSide=null;
    Connector op=findOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    op=findMiniOp(leftSide);
    if (op != null) {
      rightSide=op.getRightSide(leftSide);
      leftSide=leftSide.substring(0,op.sourceLoc);
      Expression leftExpression=findExpression(leftSide);
      Expression rightExpression=findExpression(rightSide);
      if (leftExpression != null) {
        op.addExpr(leftExpression);
      }
      if (rightExpression != null) {
        op.addExpr(rightExpression);
      }
      return op;
    }
    if (logger.isLoggable(Level.FINER)) {
      logger.finer("need to break up: " + source);
    }
    return findMathOp(source);
  }
  return null;
}

void putChannel(final StoredClientChannel channel){
  putChannel(channel,true);
}

private void deleteFilesInDir(File dir){
  for (  File child : dir.listFiles()) {
    child.delete();
  }
}

@SuppressWarnings("ResultOfMethodCallIgnored") public static void pipeInputToOutputStream(InputStream in,File fileOut,boolean ignoreErrors) throws IOException {
  if (fileOut == null) {
    logger.error("The output filename doesn't exist or is invalid");
    if (!ignoreErrors) {
      throw new IOException("The output filename doesn't exist or is invalid");
    }
  }
 else {
    File parent=fileOut.getParentFile();
    if (parent != null && !parent.exists()) {
      parent.mkdirs();
    }
    OutputStream fileStream=null;
    try {
      fileStream=new FileOutputStream(fileOut);
      pipeInputToOutputStream(in,fileStream,true,ignoreErrors);
    }
 catch (    IOException e) {
      if (fileStream != null) {
        try {
          fileStream.close();
        }
 catch (        IOException ex) {
          logger.error("Cannot close stream - {}",ex.getMessage());
        }
      }
      if (!ignoreErrors) {
        throw e;
      }
    }
  }
}

@SuppressLint("Assert") void release(){
  assert (mProcessingThread.getState() == State.TERMINATED);
  mDetector.release();
  mDetector=null;
}

public static String trimLeadingCharacter(String str,char leadingCharacter){
  if (!hasLength(str)) {
    return str;
  }
  StringBuilder sb=new StringBuilder(str);
  while (sb.length() > 0 && sb.charAt(0) == leadingCharacter) {
    sb.deleteCharAt(0);
  }
  return sb.toString();
}

public E take() throws InterruptedException {
  final ReentrantLock lock=this.lock;
  lock.lockInterruptibly();
  long t=now();
  TenantQueue.Item item=null;
  try {
    for (; ; ) {
      TenantQueue q=nextQueue(t);
      if (q == null)       available.await();
 else {
        long delay=q.next - t;
        if (delay <= 0) {
          item=q.poll(t);
          return item == null ? null : item.element;
        }
 else         if (leader != null)         available.await();
 else {
          Thread thisThread=Thread.currentThread();
          leader=thisThread;
          try {
            available.awaitNanos(delay);
          }
  finally {
            if (leader == thisThread)             leader=null;
          }
        }
      }
      t=System.nanoTime();
    }
  }
  finally {
    if (leader == null && hasNext())     available.signal();
    lock.unlock();
    done(item,t);
  }
}

public boolean threadSafeTimeout(long delayTime,TimeUnit unit,Action0 action){
  boolean scheduled=true;
  Thread currentThread=Thread.currentThread();
  if (currentThread.equals(dutyThread)) {
    timerWheel.newTimeout(delayTime,unit,null);
  }
 else {
    scheduled=actions.offer(null);
  }
  return scheduled;
}

void submit(ProcessAndDisplayImageTask task){
  initExecutorsIfNeed();
  taskExecutorForCachedImages.execute(task);
}

void addAttributeSelection(String exp){
  int index=exp.indexOf('=');
  String value=null;
  int constraint=AttString.EQUALS;
  if (index != -1) {
    if (index == 0) {
      setTagId(TAG_CSS_ILLEGAL_SELECTOR);
      return;
    }
    int opIndex=index;
    char c=exp.charAt(index - 1);
    if (c == '~') {
      constraint=AttString.CONTAINS_WORD;
      opIndex--;
    }
 else     if (c == '|') {
      constraint=AttString.BEGINS_WITH;
      opIndex--;
    }
    value=exp.substring(index + 1);
    if (((value.startsWith("\"")) && (value.endsWith("\""))) || ((value.startsWith("'")) && (value.endsWith("'")))) {
      value=value.substring(1,value.length() - 1);
    }
    exp=exp.substring(0,opIndex);
  }
  if (attributeSelections == null) {
    attributeSelections=new Vector();
  }
  attributeSelections.addElement(new AttString(exp,constraint,value));
}

private void createLeftOver(){
  int lineLengthBytes=currentLastBytePos + 1;
  if (lineLengthBytes > 0) {
    leftOver=new byte[lineLengthBytes];
    System.arraycopy(data,0,leftOver,0,lineLengthBytes);
  }
 else {
    leftOver=null;
  }
  currentLastBytePos=-1;
}

public Value sample(){
  int index=sampler.nextInt(actionValues.size());
  if (actionValuesAsArray == null) {
    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);
  }
  return actionValuesAsArray[index];
}

@Override public void channelClosed(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {
  curr_conns.decrementAndGet();
  channelGroup.remove(channelHandlerContext.getChannel());
}

private static void configureHeadLessSimulation(){
  System.setProperty("java.awt.headless","true");
  GAMA.setHeadLessMode();
}

public static boolean isNextWindow(URI id){
  return id == null || NEXT.equals(id);
}

public static boolean isVisible(Class<?> clazz,ClassLoader classLoader){
  if (classLoader == null) {
    return true;
  }
  try {
    Class<?> actualClass=classLoader.loadClass(clazz.getName());
    return (clazz == actualClass);
  }
 catch (  ClassNotFoundException ex) {
    return false;
  }
}

public byte[] remove(QueueEvent event) throws KeeperException, InterruptedException {
  TimerContext time=stats.time(dir + "_remove_event");
  try {
    String path=event.getId();
    String responsePath=dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1);
    if (zookeeper.exists(responsePath,true)) {
      zookeeper.setData(responsePath,event.getBytes(),true);
    }
    byte[] data=zookeeper.getData(path,null,null,true);
    zookeeper.delete(path,-1,true);
    return data;
  }
  finally {
    time.stop();
  }
}

public PropertyXMLBuilder(ServiceSchema serviceSchema,AMModel model,Set attributeSchemas) throws SMSException, SSOException {
  this.model=model;
  this.serviceName=serviceSchema.getServiceName();
  getServiceResourceBundle(serviceSchema);
  if (serviceBundle != null) {
    mapTypeToAttributeSchema=new HashMap(attributeSchemas.size() * 2);
    mapTypeToAttributeSchema.put(NULL_TYPE,attributeSchemas);
  }
}

public boolean is(String arg,boolean allowAbbr){
  if (name.equalsIgnoreCase(arg)) {
    return true;
  }
  if (allowAbbr && arg.length() == 1) {
    if (arg.charAt(0) == c) {
      return true;
    }
  }
  return false;
}

static public void addAll(List<String> list,String[] array){
  for (  String item : array)   list.add(item);
}

void remove(SuperCardToast superCardToast){
  mList.remove(superCardToast);
}

public void test_vmstat_header_and_data_parse(){
  final Pattern pattern=VMStatCollector.pattern;
  final String header="  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st";
  final String data="  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0";
{
    final String[] fields=pattern.split(header.trim(),0);
    for (int i=0; i < fields.length; i++) {
      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");
    }
    assertField(header,fields,2,"swpd");
    assertField(header,fields,3,"free");
    assertField(header,fields,6,"si");
    assertField(header,fields,7,"so");
    assertField(header,fields,12,"us");
    assertField(header,fields,13,"sy");
    assertField(header,fields,14,"id");
    assertField(header,fields,15,"wa");
  }
{
    final String[] fields=pattern.split(data.trim(),0);
    assertField(data,fields,2,"96");
    assertField(data,fields,3,"178580");
    assertField(data,fields,6,"56");
    assertField(data,fields,7,"12");
    assertField(data,fields,12,"1");
    assertField(data,fields,13,"0");
    assertField(data,fields,14,"99");
    assertField(data,fields,15,"3");
  }
}

public static SecretKeys generateKeyFromPassword(String password,String salt) throws GeneralSecurityException {
  return generateKeyFromPassword(password,Base64.decode(salt,BASE64_FLAGS));
}

private String partiallyEscapeAssertionValue(String assertionValue){
  StringBuilder sb=new StringBuilder(assertionValue.length());
  for (int j=0; j < assertionValue.length(); j++) {
    char c=assertionValue.charAt(j);
    if (c == '*') {
      sb.append(c);
    }
 else {
      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));
    }
  }
  return sb.toString();
}

protected boolean filterLeftoverView(ViewGroup parent,int childIndex){
  parent.removeViewAt(childIndex);
  return true;
}

protected boolean declAlreadyDeclared(String prefix){
  int startDecls=m_contextIndexes.peek();
  java.util.Vector prefixMappings=m_prefixMappings;
  int nDecls=prefixMappings.size();
  for (int i=startDecls; i < nDecls; i+=2) {
    String prefixDecl=(String)prefixMappings.elementAt(i);
    if (prefixDecl == null)     continue;
    if (prefixDecl.equals(prefix))     return true;
  }
  return false;
}

@Override public void step(MessageLogger logger){
  try {
    addAgent();
    env.step();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

public static AttackStatus calculatePhysicalStatus(Creature attacker,Creature attacked,boolean isMainHand){
  return calculatePhysicalStatus(attacker,attacked,isMainHand,0,100,false,false);
}

public T vertexProcessor(final BiConsumer<Vertex,Map<String,Object>> vertexProcessor){
  this.vertexProcessor=Optional.ofNullable(vertexProcessor);
  return extendingClass.cast(this);
}

synchronized boolean release(){
  d("release()");
  if (state == BUSY) {
    state=IDLE;
    idleSince=System.currentTimeMillis();
    return true;
  }
 else {
    return false;
  }
}

private void validateReplicaAvailability(Slice slice,String shard,String collectionName,int count){
  if (slice != null) {
    Collection<Replica> allReplicasForShard=slice.getReplicas();
    if (allReplicasForShard == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"No replicas found  in shard/collection: " + shard + "/"+ collectionName);
    }
    if (allReplicasForShard.size() == 1) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There is only one replica available in shard/collection: " + shard + "/"+ collectionName+ ". Cannot delete that.");
    }
    if (allReplicasForShard.size() <= count) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"There are lesser num replicas requested to be deleted than are available in shard/collection : " + shard + "/"+ collectionName+ " Requested: "+ count+ " Available: "+ allReplicasForShard.size()+ ".");
    }
  }
}

default ClassDeclaration asClass(){
  throw new UnsupportedOperationException(String.format("%s is not a class",this));
}

private static String partitionSpecToName(Map<String,String> spec){
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<String,String> entry : spec.entrySet()) {
    if (sb.length() != 0) {
      sb.append("/");
    }
    sb.append(entry.getKey() + "=" + entry.getValue());
  }
  return sb.toString();
}

public static InputStream toInputStream(CharSequence input,Charset encoding){
  return toInputStream(input.toString(),encoding);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public void testHitEndAfterFind(){
  hitEndTest(true,"#01.0","r((ege)|(geg))x","regexx",false);
  hitEndTest(true,"#01.1","r((ege)|(geg))x","regex",false);
  hitEndTest(true,"#01.2","r((ege)|(geg))x","rege",true);
  hitEndTest(true,"#01.2","r((ege)|(geg))x","xregexx",false);
  hitEndTest(true,"#02.0","regex","rexreger",true);
  hitEndTest(true,"#02.1","regex","raxregexr",false);
  String floatRegex=getHexFloatRegex();
  hitEndTest(true,"#03.0",floatRegex,Double.toHexString(-1.234d),true);
  hitEndTest(true,"#03.1",floatRegex,"1 ABC" + Double.toHexString(Double.NaN) + "buhuhu",false);
  hitEndTest(true,"#03.2",floatRegex,Double.toHexString(-0.0) + "--",false);
  hitEndTest(true,"#03.3",floatRegex,"--" + Double.toHexString(Double.MIN_VALUE) + "--",false);
  hitEndTest(true,"#04.0","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","1 fish 2 fish red fish 5",true);
  hitEndTest(true,"#04.1","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","----1 fish 2 fish red fish 5----",false);
}

@Modifying @Transactional public void deleteCheque(@PathVariable Long chequeID){
  chequeRepository.delete(chequeID);
  photoRepository.deleteByChequeId(chequeID.toString());
}

public static synchronized double partialCorrelation(TetradMatrix submatrix){
  try {
    TetradMatrix inverse=submatrix.inverse();
    double a=-1.0 * inverse.get(0,1);
    double v0=inverse.get(0,0);
    double v1=inverse.get(1,1);
    double b=Math.sqrt(v0 * v1);
    return a / b;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Double.NaN;
  }
}

public void addColumn(String name,String expr){
  Expression ex=ExpressionParser.parse(expr);
  Throwable t=ExpressionParser.getError();
  if (t != null) {
    throw new RuntimeException(t);
  }
 else {
    addColumn(name,ex);
  }
}

public void addPutAndGetTimeNanos(long duration){
  putTimeNanos.addAndGet(duration);
  getTimeNanos.addAndGet(duration);
  if (delegate != null)   delegate.addPutAndGetTimeNanos(duration);
}

private float checkSaturationValid(final float val){
  float tempval=val;
  if (val > 1) {
    tempval=1;
  }
  if (val < 0) {
    tempval=0;
  }
  return tempval;
}

String parse(String cellStr,int layoutConstant){
  return cellStr.split(LayoutConstants.CELL_PTRN)[layoutConstant];
}

public void pseudoPropertyChange(String propName,Object old,Object n){
  if (log.isDebugEnabled()) {
    log.debug("pseudoPropertyChange: Block \"" + getSystemName() + " property \""+ propName+ "\" new value= "+ n.toString());
  }
  firePropertyChange(propName,old,n);
}

public static String runCmd(File directory,List<String> cmd,String errorMessage) throws Exception {
  ProcessBuilder pb=new ProcessBuilder(cmd);
  pb.directory(directory);
  pb.redirectErrorStream(true);
  Process p=pb.start();
  String s;
  StringBuilder sb=new StringBuilder();
  BufferedReader stdout=new BufferedReader(new InputStreamReader(p.getInputStream()));
  while ((s=stdout.readLine()) != null) {
    logger.info(s);
    sb.append(s);
    sb.append('\n');
  }
  String sbs=sb.toString();
  int exitValue=p.waitFor();
  if (exitValue != 0)   throw new Exception(errorMessage + " exit value " + exitValue+ "  "+ sbs);
  return sbs;
}

@Override public SelectableChannel selectableChannel(){
  return socketChannel;
}

public void test_ConstructorIIIIII(){
  Date d1=new Date(70,0,1,1,1,1);
  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000 + 1000);
  assertTrue("Created incorrect date",d1.equals(d2));
}

public static String fromTag(ByteArrayTag tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  byte value : tag.getValue()) {
    ByteTag b=new ByteTag(value);
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromTag(b));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}

@Override protected void addChooserFilters(JFileChooser chooser){
  javax.swing.filechooser.FileNameExtensionFilter filter=new javax.swing.filechooser.FileNameExtensionFilter(Bundle.getMessage("FileFilterLabel","*.dfm, *.hex"),"dmf","hex");
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Digitrax Mangled Firmware (*.dmf)","dmf"));
  chooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Intel Hex Format Firmware (*.hex)","hex"));
  chooser.addChoosableFileFilter(filter);
  chooser.setFileFilter(filter);
}

private static byte[] WindowsRegEnumValue1(int hKey,int valueIndex,int maxValueNameLength){
  byte[] result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
  if (result != null) {
    return result;
  }
 else {
    long sleepTime=INIT_SLEEP_TIME;
    for (int i=0; i < MAX_ATTEMPTS; i++) {
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        return result;
      }
      sleepTime*=2;
      result=WindowsRegEnumValue(hKey,valueIndex,maxValueNameLength);
      if (result != null) {
        return result;
      }
    }
  }
  return result;
}

public static DateTime parseRfc822(String str) throws ParseException {
  Date date;
synchronized (dateTimeFormat822) {
    try {
      date=dateTimeFormat822.parse(str);
    }
 catch (    java.text.ParseException e) {
      throw new ParseException(e);
    }
  }
  return new DateTime(date);
}

public void testEmptyIndex() throws Exception {
  IndexSearcher empty=newSearcher(new MultiReader());
  Query query=new TermQuery(new Term("contents","foo"));
  Sort sort=new Sort();
  TopDocs td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField("int",SortField.Type.INT),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField("string",SortField.Type.STRING,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField("string_val",SortField.Type.STRING_VAL,true),SortField.FIELD_DOC);
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
  sort.setSort(new SortField("float",SortField.Type.FLOAT),new SortField("string",SortField.Type.STRING));
  td=empty.search(query,10,sort,true,true);
  assertEquals(0,td.totalHits);
}

public Model validateModel(Dataset dataset,URI shapesGraphURI,Resource minSeverity,boolean validateShapes,Function<RDFNode,String> labelFunction,ProgressMonitor monitor) throws InterruptedException {
  if (dataset.getDefaultModel() == null) {
    throw new IllegalArgumentException("Dataset requires a default model");
  }
  Model shapesModel=dataset.getNamedModel(shapesGraphURI.toString());
  if (monitor != null) {
    monitor.subTask("Preparing execution plan");
  }
  List<Property> constraintProperties=SHACLUtil.getAllConstraintProperties(validateShapes);
  Map<Resource,List<SHConstraint>> map=buildShape2ConstraintsMap(shapesModel,dataset.getDefaultModel(),constraintProperties,validateShapes);
  if (monitor != null) {
    monitor.subTask("");
  }
  if (monitor != null) {
    monitor.beginTask("Validating constraints for " + map.size() + " shapes...",map.size());
  }
  Model results=JenaUtil.createMemoryModel();
  results.setNsPrefixes(dataset.getDefaultModel());
  for (  Resource shape : map.keySet()) {
    for (    SHConstraint constraint : map.get(shape)) {
      validateConstraintForShape(dataset,shapesGraphURI,minSeverity,constraint,shape,results,labelFunction,monitor);
      if (monitor != null) {
        monitor.worked(1);
        if (monitor.isCanceled()) {
          throw new InterruptedException();
        }
      }
    }
  }
  return results;
}

public PdfPage addAnnotation(PdfAnnotation annotation){
  return addAnnotation(-1,annotation,true);
}

public static String findPreferredIDP(String realm,HttpServletRequest request){
  if (request == null) {
    return null;
  }
  String succinctID=request.getParameter(IFSConstants.PROVIDER_ID_KEY);
  if ((succinctID == null) || succinctID.length() == 0) {
    debug.message("FSUtils.findPreferredIDP::Pref IDP not found.");
    return null;
  }
  succinctID=succinctID.trim();
  String preferredSuccinctId=null;
  StringTokenizer st=new StringTokenizer(succinctID," ");
  while (st.hasMoreTokens()) {
    preferredSuccinctId=st.nextToken();
    if ((preferredSuccinctId.length() < 28) && st.hasMoreTokens()) {
      preferredSuccinctId=preferredSuccinctId + "+" + st.nextToken();
    }
  }
  preferredSuccinctId=SAMLUtils.byteArrayToString(Base64.decode(preferredSuccinctId));
  return getProviderIDFromSuccinctID(realm,preferredSuccinctId);
}

private void checkAndCreateDirectory(final String directoryName){
  try {
    final File dir=new File(directoryName);
    if (!dir.exists() && dir.mkdirs()) {
      _logger.debug("Debug dump directory created successfully.");
    }
  }
 catch (  Exception ex) {
    _logger.error("Debug dump directory creation failed due to {}",ex.getMessage());
  }
}

@SafeVarargs public final AssertSubscriber<T> assertValuesWith(Consumer<T>... expectations){
  if (!valuesStorage) {
    throw new IllegalStateException("Using assertNoValues() requires enabling values storage");
  }
  final int expectedValueCount=expectations.length;
  if (expectedValueCount != values.size()) {
    throw new AssertionError("Different value count: expected = " + expectedValueCount + ", actual = "+ valueCount,null);
  }
  for (int i=0; i < expectedValueCount; i++) {
    Consumer<T> consumer=expectations[i];
    T actualValue=values.get(i);
    consumer.accept(actualValue);
  }
  return this;
}

private boolean journalRebuildRequired(){
  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;
  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();
}

public int findEventPositionNearestTime(Time time,long id){
  if (mRowInfo == null) {
    return 0;
  }
  long millis=time.toMillis(false);
  long minDistance=Integer.MAX_VALUE;
  long idFoundMinDistance=Integer.MAX_VALUE;
  int minIndex=0;
  int idFoundMinIndex=0;
  int eventInTimeIndex=-1;
  int allDayEventInTimeIndex=-1;
  int allDayEventDay=0;
  int minDay=0;
  boolean idFound=false;
  int len=mRowInfo.size();
  for (int index=0; index < len; index++) {
    RowInfo row=mRowInfo.get(index);
    if (row.mType == TYPE_DAY) {
      continue;
    }
    if (row.mEventId == id) {
      if (row.mEventStartTimeMilli == millis) {
        return index;
      }
      long distance=Math.abs(millis - row.mEventStartTimeMilli);
      if (distance < idFoundMinDistance) {
        idFoundMinDistance=distance;
        idFoundMinIndex=index;
      }
      idFound=true;
    }
    if (!idFound) {
      if (millis >= row.mEventStartTimeMilli && millis <= row.mEventEndTimeMilli) {
        if (row.mAllDay) {
          if (allDayEventInTimeIndex == -1) {
            allDayEventInTimeIndex=index;
            allDayEventDay=row.mDay;
          }
        }
 else         if (eventInTimeIndex == -1) {
          eventInTimeIndex=index;
        }
      }
 else       if (eventInTimeIndex == -1) {
        long distance=Math.abs(millis - row.mEventStartTimeMilli);
        if (distance < minDistance) {
          minDistance=distance;
          minIndex=index;
          minDay=row.mDay;
        }
      }
    }
  }
  if (idFound) {
    return idFoundMinIndex;
  }
  if (eventInTimeIndex != -1) {
    return eventInTimeIndex;
  }
 else   if (allDayEventInTimeIndex != -1 && minDay != allDayEventDay) {
    return allDayEventInTimeIndex;
  }
  return minIndex;
}

final public void println(float v){
  String s=String.valueOf(v);
  write(s,0,s.length());
  println();
}

private static TranslationResult extractRegister(final ITranslationEnvironment environment,final long offset,final String subRegister) throws InternalTranslationException {
  final ArrayList<ReilInstruction> instructions=new ArrayList<ReilInstruction>();
  final String parentRegister=getParentRegister(subRegister);
  final OperandSize archSize=environment.getArchitectureSize();
  if (isHigher8BitRegister(subRegister)) {
    final String maskResult=environment.getNextVariableString();
    final String shiftResult=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,OperandSize.WORD,"65280",OperandSize.WORD,maskResult));
    instructions.add(ReilHelpers.createBsh(offset + 1,OperandSize.WORD,maskResult,OperandSize.WORD,"-8",OperandSize.BYTE,shiftResult));
    return new TranslationResult(shiftResult,OperandSize.BYTE,TranslationResultType.REGISTER,null,instructions,offset);
  }
 else {
    final OperandSize subRegisterSize=getRegisterSize(subRegister);
    final String mask=String.valueOf(TranslationHelpers.getAllBitsMask(subRegisterSize));
    final String result=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,subRegisterSize,mask,subRegisterSize,result));
    return new TranslationResult(result,subRegisterSize,TranslationResultType.REGISTER,null,instructions,offset);
  }
}

public void onLoginFailure(Map requestParamsMap,HttpServletRequest req,HttpServletResponse res) throws AuthenticationException {
  debug.message("ReplayPasswd.onLoginFailure: called");
}

public Interceptor[] buildMethodInterceptors(Method method){
  Interceptors before=method.getAnnotation(Interceptors.class);
  return before != null ? createInterceptors(before) : NULL_INTERCEPTOR_ARRAY;
}

protected String buildQualifierRegex(String qualifierValue){
  StringBuilder sb=new StringBuilder();
  sb.append("^");
  sb.append(qualifierValue);
  sb.append("$");
  return sb.toString();
}

private static void lookForChanges(DataObject left,DataObject right,HashMap<String,Change> changes,Set<String> included,Set<String> excluded,Set<String> contained){
  Class refClass=left.getClass();
  Method[] methods=refClass.getMethods();
  for (  Method method : methods) {
    boolean contain=false;
    Name nameAnn=method.getAnnotation(Name.class);
    if (nameAnn == null) {
      continue;
    }
    String key=nameAnn.value();
    if (contained != null && contained.contains(key)) {
      contain=true;
    }
 else     if (included != null && !included.contains(key)) {
      continue;
    }
    if (excluded.contains(key)) {
      continue;
    }
    Class type=method.getReturnType();
    try {
      Object obja=method.invoke(left);
      Object objb=method.invoke(right);
      if (type == StringSet.class) {
        if (contain) {
          analyzeNewStringSetContainsOldStringSetValues((StringSet)obja,(StringSet)objb,key,changes);
        }
 else {
          analyzeStringSets((StringSet)obja,(StringSet)objb,key,changes);
        }
      }
 else       if (type == StringMap.class) {
        analyzeStringMaps((StringMap)obja,(StringMap)objb,key,changes);
      }
 else       if (type == StringSetMap.class) {
        analyzeStringSetMaps((StringSetMap)obja,(StringSetMap)objb,key,changes);
      }
 else {
        if (!isEqual(obja,objb)) {
          Change change=new Change(key,obja,objb,nameAnn.value());
          changes.put(key,change);
        }
      }
    }
 catch (    IllegalAccessException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
catch (    InvocationTargetException ex) {
      throw new ServiceCodeException(ServiceCode.UNFORSEEN_ERROR,ex,ex.getMessage(),new String[]{});
    }
  }
}

static void removeAllPhis(IR ir){
  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {
    nextInstr=s.nextInstructionInCodeOrder();
    if (Phi.conforms(s))     s.remove();
  }
}

protected int countToken(String token,String target){
  int tokenIndex=0;
  int count=0;
  while (tokenIndex != -1) {
    tokenIndex=target.indexOf(token,tokenIndex);
    if (tokenIndex > -1) {
      tokenIndex++;
      count++;
    }
  }
  return count;
}

private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){
  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();
  for (  TestCase test : tests) {
    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));
  }
  return testToGoals;
}

public Interceptor[] buildRouteInterceptors(Interceptor[] defaultInters,Interceptor[] resourceInters,Class<? extends Resource> resourceClass,Interceptor[] methodInters,Method method){
  List<Interceptor> allInters=new ArrayList<Interceptor>();
  for (  Interceptor defaultInter : defaultInters) {
    allInters.add(defaultInter);
  }
  for (  Interceptor resourceInter : resourceInters) {
    allInters.add(resourceInter);
  }
  for (  Interceptor methodInter : methodInters) {
    allInters.add(methodInter);
  }
  Class<? extends Interceptor>[] resourceClears=getResourceClears(resourceClass);
  Class<? extends Interceptor>[] methodClears=getMethodClears(method);
  if ((resourceClears != null && resourceClears.length > 0) || (methodClears != null && methodClears.length > 0)) {
    for (int i=0; i < allInters.size(); i++) {
      i=clearInterceptor(allInters,resourceClears,i);
      i=clearInterceptor(allInters,methodClears,i);
    }
  }
  return allInters.toArray(new Interceptor[allInters.size()]);
}

public static boolean checkGMLFootprint(String footprint){
  try {
    Configuration configuration=new GMLConfiguration();
    Parser parser=new Parser(configuration);
    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));
    if (!geom.isEmpty() && !geom.isValid()) {
      logger.error("Wrong footprint");
      return false;
    }
  }
 catch (  Exception e) {
    logger.error("Error in extracted footprint: " + e.getMessage());
    return false;
  }
  return true;
}

public static void main(String[] args){
  double preBuffer=Double.parseDouble(args[4]);
  double postBuffer=Double.parseDouble(args[5]);
  run(args[0],args[1],args[2],args[3],preBuffer,postBuffer);
}

public static double quantile(double p,double k,double theta,double shift){
  return Math.exp(GammaDistribution.quantile(p,k,theta)) + shift;
}

public static CipherParameters makePBEMacParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec){
  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {
    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");
  }
  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;
  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());
  byte[] key=pbeKey.getEncoded();
  CipherParameters param;
  if (pbeKey.shouldTryWrongPKCS12()) {
    key=new byte[2];
  }
  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());
  param=generator.generateDerivedMacParameters(pbeKey.getKeySize());
  for (int i=0; i != key.length; i++) {
    key[i]=0;
  }
  return param;
}

public OrionEditorInit(final TextEditorConfiguration configuration,final CodeAssistantFactory codeAssistantFactory,final QuickAssistAssistant quickAssist,final OrionEditorPresenter textEditor){
  this.configuration=configuration;
  this.codeAssistantFactory=codeAssistantFactory;
  this.quickAssist=quickAssist;
  this.textEditor=textEditor;
}

final void putByte(int offset,byte value){
  unsafe.putByte(offset + address,value);
}

public final void addValidationError(String error){
  validationErrors.add(error);
}

public static void parseOptionSettingTo(String optionSetting,Map<String,String> dst){
  int eqIndex=optionSetting.indexOf('=');
  if (eqIndex == -1) {
    throw new InternalError("Option setting has does not match the pattern <name>=<value>: " + optionSetting);
  }
  dst.put(optionSetting.substring(0,eqIndex),optionSetting.substring(eqIndex + 1));
}

public BigInteger generateClientCredentials(byte[] salt,byte[] identity,byte[] password){
  this.x=SRP6Util.calculateX(digest,N,salt,identity,password);
  this.a=selectPrivateValue();
  this.A=g.modPow(a,N);
  return A;
}

public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info("SolrSuggester.build(" + name + ")");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=getStoreFile();
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error("Store Lookup build failed");
    }
 else {
      LOG.info("Stored suggest data to: " + target.getAbsolutePath());
    }
  }
}

public void start(String json){
  guidedTourSteps.clear();
  GuidedTourConfiguration configuration=dtoFactory.createDtoFromJson(json,GuidedTourConfiguration.class);
  log.setDebugMode(configuration.getDebugMode());
  this.guidedTourSteps=configuration.getSteps();
  this.tourName=configuration.getName();
  if (this.tourName == null || tourName.isEmpty()) {
    tourName="unamed";
  }
  this.hasWelcomeStep=configuration.getHasWelcomeStep();
  startTour();
}

private void connect() throws IOException {
  JMXServiceURL jmxUrl=new JMXServiceURL(String.format(fmtUrl,host,port));
  Map<String,Object> env=new HashMap<String,Object>();
  if (username != null) {
    String[] creds={username,password};
    env.put(JMXConnector.CREDENTIALS,creds);
  }
  env.put("com.sun.jndi.rmi.factory.socket",getRMIClientSocketFactory());
  jmxc=JMXConnectorFactory.connect(jmxUrl,env);
  mbeanServerConn=jmxc.getMBeanServerConnection();
  try {
    ObjectName name=new ObjectName(ssObjName);
    ssProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageServiceMBean.class);
    name=new ObjectName(MessagingService.MBEAN_NAME);
    msProxy=JMX.newMBeanProxy(mbeanServerConn,name,MessagingServiceMBean.class);
    name=new ObjectName(StreamManagerMBean.OBJECT_NAME);
    streamProxy=JMX.newMBeanProxy(mbeanServerConn,name,StreamManagerMBean.class);
    name=new ObjectName(CompactionManager.MBEAN_OBJECT_NAME);
    compactionProxy=JMX.newMBeanProxy(mbeanServerConn,name,CompactionManagerMBean.class);
    name=new ObjectName(FailureDetector.MBEAN_NAME);
    fdProxy=JMX.newMBeanProxy(mbeanServerConn,name,FailureDetectorMBean.class);
    name=new ObjectName(CacheService.MBEAN_NAME);
    cacheService=JMX.newMBeanProxy(mbeanServerConn,name,CacheServiceMBean.class);
    name=new ObjectName(StorageProxy.MBEAN_NAME);
    spProxy=JMX.newMBeanProxy(mbeanServerConn,name,StorageProxyMBean.class);
    name=new ObjectName(HintedHandOffManager.MBEAN_NAME);
    hhProxy=JMX.newMBeanProxy(mbeanServerConn,name,HintedHandOffManagerMBean.class);
    name=new ObjectName(GCInspector.MBEAN_NAME);
    gcProxy=JMX.newMBeanProxy(mbeanServerConn,name,GCInspectorMXBean.class);
    name=new ObjectName(Gossiper.MBEAN_NAME);
    gossProxy=JMX.newMBeanProxy(mbeanServerConn,name,GossiperMBean.class);
  }
 catch (  MalformedObjectNameException e) {
    throw new RuntimeException("Invalid ObjectName? Please report this as a bug.",e);
  }
  memProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.MEMORY_MXBEAN_NAME,MemoryMXBean.class);
  runtimeProxy=ManagementFactory.newPlatformMXBeanProxy(mbeanServerConn,ManagementFactory.RUNTIME_MXBEAN_NAME,RuntimeMXBean.class);
}

private static void runRandomTest(final int wordLength,final int bytePadding,final int wordCount){
  final long seed=randomLong();
  final Random random=new Random(seed);
  final Random verificationRandom=new Random(seed);
  final long wordMask;
  if (wordLength == 64) {
    wordMask=~0L;
  }
 else {
    wordMask=(1L << wordLength) - 1L;
  }
  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);
  for (int i=0; i < wordCount; i++) {
    final long value=random.nextLong() & wordMask;
    serializer.writeWord(value);
  }
  final byte[] bytes=serializer.getBytes();
  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);
  assertEquals(deserializer.totalWordCount(),wordCount);
  for (int i=0; i < wordCount; i++) {
    assertEquals(deserializer.readWord(),(verificationRandom.nextLong() & wordMask));
  }
}

public void addListener(T listener){
  if (listener == null) {
    throw new NullPointerException();
  }
  listeners.add(listener);
}

public static MaildirMessageName createUniqueName(MaildirFolder parentFolder,long size){
  String timestamp=String.valueOf(System.currentTimeMillis());
  timestamp=timestamp.substring(0,timestamp.length() - 3);
  StringBuilder uniquePart=new StringBuilder();
  uniquePart.append(Integer.toHexString(random.nextInt()));
  uniquePart.append(timestamp.substring(timestamp.length() - 3));
  uniquePart.append(processName);
  uniquePart.append(getNextDeliveryNumber());
  String sizeString=",S=" + String.valueOf(size);
  String fullName=timestamp + "." + uniquePart.toString()+ "."+ currentHostname+ sizeString;
  MaildirMessageName uniqueName=new MaildirMessageName(parentFolder,fullName);
  uniqueName.timestamp=timestamp;
  uniqueName.uniqueString=uniquePart.toString();
  uniqueName.hostname=currentHostname;
  uniqueName.sizeString=sizeString;
  uniqueName.isSplit=true;
  uniqueName.size=size;
  return uniqueName;
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

@Override public void handleClick(int x,int y,PlotRenderingInfo info){
}

private void adjustBCIndex(Instruction barrier){
  NormalMethod source=barrier.position().method;
  if (source.isForOsrSpecialization()) {
    barrier.adjustBytecodeIndex(-source.getOsrPrologueLength());
  }
}

@Override public String toString(){
  StringBuilder risul=new StringBuilder(1000);
  risul.append("BoardPanel ");
  risul.append("available object: itera_board");
  return risul.toString();
}

public static long[] interpose(long[] vector,int vectorLen,int offset,int len){
  long[] updated=create(vectorLen + len);
  int idx=offset >> 6;
  System.arraycopy(vector,0,updated,0,idx);
  if (idx < vector.length) {
    int delta=offset & 63;
    updated[idx]|=vector[idx] & maskBelow(delta);
  }
  copy(vector,offset,updated,offset + len,vectorLen - offset);
  return updated;
}

public static File createTemporaryDirectory(String prefix){
  while (true) {
    String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt();
    File result=new File(System.getProperty("java.io.tmpdir"),candidateName);
    if (result.mkdir()) {
      return result;
    }
  }
}

Task<Void> synchronizeAllAuthDataAsync(){
  Map<String,Map<String,String>> authData;
synchronized (mutex) {
    if (!isCurrentUser()) {
      return Task.forResult(null);
    }
    authData=getAuthData();
  }
  List<Task<Void>> tasks=new ArrayList<>(authData.size());
  for (  String authType : authData.keySet()) {
    tasks.add(synchronizeAuthDataAsync(authType));
  }
  return Task.whenAll(tasks);
}

public static Element createElementInEncryptionSpace(Document doc,String elementName){
  if (doc == null) {
    throw new RuntimeException("Document is null");
  }
  if ((xencPrefix == null) || (xencPrefix.length() == 0)) {
    return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,elementName);
  }
  return doc.createElementNS(EncryptionConstants.EncryptionSpecNS,xencPrefix + ":" + elementName);
}

void scrapActiveViews(){
  final View[] activeViews=mActiveViews;
  final boolean multipleScraps=mViewTypeCount > 1;
  ArrayList<View> scrapViews=mCurrentScrap;
  final int count=activeViews.length;
  for (int i=count - 1; i >= 0; i--) {
    final View victim=activeViews[i];
    if (victim != null) {
      final LayoutParams lp=(LayoutParams)victim.getLayoutParams();
      activeViews[i]=null;
      final boolean scrapHasTransientState=ViewCompat.hasTransientState(victim);
      int viewType=lp.viewType;
      if (!shouldRecycleViewType(viewType) || scrapHasTransientState) {
        if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) {
          removeDetachedView(victim,false);
        }
        if (scrapHasTransientState) {
          if (mTransientStateViews == null) {
            mTransientStateViews=new SparseArrayCompat<View>();
          }
          mTransientStateViews.put(mFirstActivePosition + i,victim);
        }
        continue;
      }
      if (multipleScraps) {
        scrapViews=mScrapViews[viewType];
      }
      lp.position=mFirstActivePosition + i;
      scrapViews.add(victim);
    }
  }
  pruneScrapViews();
}

private void drawWind(Canvas canvas,float y,float xOffset){
  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);
  float time=mLoadingAnimationTime;
  if (mLastAnimationTime - mLoadingAnimationTime > 0) {
    mInverseDirection=true;
    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;
  }
 else {
    mNewWindSet=true;
    mInverseDirection=false;
  }
  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;
  float xEnd=x + mWindLineWidth;
  canvas.drawLine(x,y,xEnd,y,mWindPaint);
}

private boolean hasProxySettings(Properties settings){
  String proxyHost=settings.getProperty("org.gnome.system.proxy.http host",null);
  return proxyHost != null && proxyHost.length() > 0;
}

public boolean equalsDefault(){
  return (Double.doubleToLongBits(value) == 0);
}

public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){
  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);
}

@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  setupBounds(w,h);
  setupPaints();
  invalidate();
}

private void needNewBuffer(int newcount){
  if (currentBufferIndex < buffers.size() - 1) {
    filledBufferSum+=currentBuffer.length;
    currentBufferIndex++;
    currentBuffer=buffers.get(currentBufferIndex);
  }
 else {
    int newBufferSize;
    if (currentBuffer == null) {
      newBufferSize=newcount;
      filledBufferSum=0;
    }
 else {
      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);
      filledBufferSum+=currentBuffer.length;
    }
    currentBufferIndex++;
    currentBuffer=new byte[newBufferSize];
    buffers.add(currentBuffer);
  }
}

@Nullable public static WebsiteAddress create(String originOrHostOrPattern){
  if (originOrHostOrPattern == null || originOrHostOrPattern.isEmpty()) {
    return null;
  }
  if (originOrHostOrPattern.startsWith(ANY_SUBDOMAIN_PATTERN)) {
    String origin=null;
    String scheme=null;
    String host=originOrHostOrPattern.substring(ANY_SUBDOMAIN_PATTERN.length());
    boolean omitProtocolAndPort=true;
    return new WebsiteAddress(originOrHostOrPattern,origin,scheme,host,omitProtocolAndPort);
  }
  if (originOrHostOrPattern.indexOf(SCHEME_SUFFIX) != -1) {
    Uri uri=Uri.parse(originOrHostOrPattern);
    String origin=trimTrailingBackslash(originOrHostOrPattern);
    boolean omitProtocolAndPort=HTTP_SCHEME.equals(uri.getScheme()) && (uri.getPort() == -1 || uri.getPort() == 80);
    return new WebsiteAddress(originOrHostOrPattern,origin,uri.getScheme(),uri.getHost(),omitProtocolAndPort);
  }
  String origin=null;
  String scheme=null;
  boolean omitProtocolAndPort=true;
  return new WebsiteAddress(originOrHostOrPattern,origin,scheme,originOrHostOrPattern,omitProtocolAndPort);
}

public void test_filter_001() throws IOException {
  final File basefile=File.createTempFile(getName(),"-test");
  try {
    final String basename=basefile.toString();
    final NameAndExtensionFilter logFilter=new NameAndExtensionFilter(basename,".log");
    assertSameFiles(new File[]{},logFilter.getFiles());
  }
  finally {
    basefile.delete();
  }
}

public void resetTeleMissileAttacks(){
  pendingTeleMissileAttacks.removeAllElements();
}

public int addPadding(byte[] in,int inOff){
  byte code=(byte)(in.length - inOff);
  while (inOff < (in.length - 1)) {
    in[inOff]=(byte)random.nextInt();
    inOff++;
  }
  in[inOff]=code;
  return code;
}

public void addCommands(PDFPage page,Matrix extra){
synchronized (commands) {
    addPush();
    if (extra != null) {
      addXform(extra);
    }
    commands.addAll(page.getCommands());
    addPop();
  }
  updateImages();
}

public String toString(){
  StringBuffer sb=new StringBuffer();
  char[] separator={'[',' '};
  int n=rows.length;
  for (int i=0; i < n; i++) {
    separator[0]='{';
    for (int j=0; j <= i; j++) {
      sb.append(separator);
      sb.append(rows[i][j]);
      separator[0]=' ';
    }
    sb.append('}');
    sb.append('\n');
  }
  return sb.toString();
}

public void addLast(StatementSequence statements){
  if (statements != null) {
    sequence.addAll(statements.sequence);
  }
}

private void notifyActivityStateChanged(Bundle bundle){
  if (!mRecords.isEmpty()) {
    Log.d(TAG,"notifyActivityStatusChanged:clients = " + mRecords.size());
synchronized (mRecords) {
      Iterator<Record> iterator=mRecords.iterator();
      while (iterator.hasNext()) {
        Record record=(Record)iterator.next();
        FmRadioListener listener=record.mCallback;
        if (listener == null) {
          iterator.remove();
          return;
        }
        listener.onCallBack(bundle);
      }
    }
  }
}

public double elasticity(final double spot){
  final double val=value();
  final double del=delta(spot);
  if (val > Constants.QL_EPSILON)   return del / val * spot;
 else   if (Math.abs(del) < Constants.QL_EPSILON)   return 0.0;
 else   if (del > 0.0)   return Double.MAX_VALUE;
 else   return Double.MIN_VALUE;
}

private byte[] entityToBytes(HttpEntity entity,Request request) throws IOException, ServerError {
  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] buffer=null;
  try {
    InputStream in=entity.getContent();
    if (in == null) {
      throw new ServerError();
    }
    buffer=mPool.getBuf(1024);
    int progress=0;
    int count;
    while ((count=in.read(buffer)) != -1) {
      bytes.write(buffer,0,count);
      progress+=count;
      request.progressUpdate(progress);
    }
    return bytes.toByteArray();
  }
  finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VinciLog.d("Error occured when calling consumingContent");
    }
    mPool.returnBuf(buffer);
    bytes.close();
  }
}

@Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){
  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);
  if (!list.isEmpty()) {
    return list.get(0);
  }
  return null;
}

public static float roundDecimal(float value){
  return roundDecimal(value,Math.log10(INT_PRECISION));
}

@AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions,@NotNull @Assisted Scope environmentScope,@Nullable @Assisted String environmentName){
  this.runOptions=runOptions;
  this.ram=runOptions.getMemorySize();
  this.title=RUNNER_NAME + runnerCounter.getRunnerNumber() + (environmentName == null ? "" : " - " + getCorrectName(environmentName));
  this.activeTab=locale.runnerTabConsole();
  this.status=IN_QUEUE;
  this.scope=environmentScope;
  creationTime=System.currentTimeMillis();
  String environmentId=runOptions.getEnvironmentId();
  if (environmentId == null || environmentId.startsWith("project:/")) {
    this.type=util.getType();
  }
 else {
    this.type=util.getCorrectCategoryName(runOptions.getEnvironmentId());
  }
  if (environmentId != null) {
    runOptions.setEnvironmentId(environmentId);
  }
}

public String globalInfo(){
  return "Generates a single train/test split and calls the appropriate " + "SplitEvaluator to generate some results.";
}

public static boolean isWindowsMe(){
  return osName.indexOf("Windows") > -1 && osVersion.equals("4.9");
}

private String dateToString(Date input){
  if (input == null) {
    return null;
  }
 else {
    return input.toString();
  }
}

private static int componentSize(Component component,FormSpec formSpec,int cellSize,FormLayout.Measure minMeasure,FormLayout.Measure prefMeasure){
  if (formSpec == null) {
    return prefMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.MINIMUM) {
    return minMeasure.sizeOf(component);
  }
 else   if (formSpec.getSize() == Sizes.PREFERRED) {
    return prefMeasure.sizeOf(component);
  }
 else {
    return Math.min(cellSize,prefMeasure.sizeOf(component));
  }
}

protected synchronized void start(long curPrimaryGen) throws IOException {
  if (state.equals("init") == false) {
    throw new IllegalStateException("already started");
  }
  message("top: now start");
  try {
    String segmentsFileName=SegmentInfos.getLastCommitSegmentsFileName(dir);
    long maxPendingGen=-1;
    for (    String fileName : dir.listAll()) {
      if (fileName.startsWith(IndexFileNames.PENDING_SEGMENTS)) {
        long gen=Long.parseLong(fileName.substring(IndexFileNames.PENDING_SEGMENTS.length() + 1),Character.MAX_RADIX);
        if (gen > maxPendingGen) {
          maxPendingGen=gen;
        }
      }
    }
    SegmentInfos infos;
    if (segmentsFileName == null) {
      infos=new SegmentInfos();
      message("top: init: no segments in index");
    }
 else {
      message("top: init: read existing segments commit " + segmentsFileName);
      infos=SegmentInfos.readCommit(dir,segmentsFileName);
      message("top: init: segments: " + infos.toString() + " version="+ infos.getVersion());
      Collection<String> indexFiles=infos.files(false);
      lastCommitFiles.add(segmentsFileName);
      lastCommitFiles.addAll(indexFiles);
      deleter.incRef(lastCommitFiles);
      lastNRTFiles.addAll(indexFiles);
      deleter.incRef(lastNRTFiles);
      message("top: commitFiles=" + lastCommitFiles);
      message("top: nrtFiles=" + lastNRTFiles);
    }
    message("top: delete unknown files on init: all files=" + Arrays.toString(dir.listAll()));
    deleter.deleteUnknownFiles(segmentsFileName);
    message("top: done delete unknown files on init: all files=" + Arrays.toString(dir.listAll()));
    String s=infos.getUserData().get(PRIMARY_GEN_KEY);
    long myPrimaryGen;
    if (s == null) {
      assert infos.size() == 0;
      myPrimaryGen=-1;
    }
 else {
      myPrimaryGen=Long.parseLong(s);
    }
    message("top: myPrimaryGen=" + myPrimaryGen);
    boolean doCommit;
    if (infos.size() > 0 && myPrimaryGen != -1 && myPrimaryGen != curPrimaryGen) {
      assert myPrimaryGen < curPrimaryGen;
      final long initSyncStartNS=System.nanoTime();
      message("top: init: primary changed while we were down myPrimaryGen=" + myPrimaryGen + " vs curPrimaryGen="+ curPrimaryGen+ "; sync now before mgr init");
      CopyJob job=null;
      message("top: now delete starting commit point " + segmentsFileName);
      assert deleter.getRefCount(segmentsFileName) == 1;
      deleter.decRef(Collections.singleton(segmentsFileName));
      if (dir instanceof FSDirectory && ((FSDirectory)dir).checkPendingDeletions()) {
        throw new RuntimeException("replica cannot start: existing segments file=" + segmentsFileName + " must be removed in order to start, but the file delete failed");
      }
      boolean didRemove=lastCommitFiles.remove(segmentsFileName);
      assert didRemove;
      while (true) {
        job=newCopyJob("sync on startup replica=" + name() + " myVersion="+ infos.getVersion(),null,null,true,null);
        job.start();
        message("top: init: sync sis.version=" + job.getCopyState().version);
        try {
          job.runBlocking();
          job.finish();
          break;
        }
 catch (        IOException ioe) {
          job.cancel("startup failed",ioe);
          if (ioe.getMessage().contains("checksum mismatch after file copy")) {
            message("top: failed to copy: " + ioe + "; retrying");
          }
 else {
            throw ioe;
          }
        }
      }
      lastPrimaryGen=job.getCopyState().primaryGen;
      byte[] infosBytes=job.getCopyState().infosBytes;
      SegmentInfos syncInfos=SegmentInfos.readCommit(dir,new BufferedChecksumIndexInput(new ByteArrayIndexInput("SegmentInfos",job.getCopyState().infosBytes)),job.getCopyState().gen);
      syncInfos.updateGeneration(infos);
      infos=syncInfos;
      assert infos.getVersion() == job.getCopyState().version;
      message("  version=" + infos.getVersion() + " segments="+ infos.toString());
      message("top: init: incRef nrtFiles=" + job.getFileNames());
      deleter.incRef(job.getFileNames());
      message("top: init: decRef lastNRTFiles=" + lastNRTFiles);
      deleter.decRef(lastNRTFiles);
      lastNRTFiles.clear();
      lastNRTFiles.addAll(job.getFileNames());
      message("top: init: set lastNRTFiles=" + lastNRTFiles);
      lastFileMetaData=job.getCopyState().files;
      message(String.format(Locale.ROOT,"top: %d: start: done sync: took %.3fs for %s, opened NRT reader version=%d",id,(System.nanoTime() - initSyncStartNS) / 1000000000.0,bytesToString(job.getTotalBytesCopied()),job.getCopyState().version));
      doCommit=true;
    }
 else {
      doCommit=false;
      lastPrimaryGen=curPrimaryGen;
      message("top: same primary as before");
    }
    if (infos.getGeneration() < maxPendingGen) {
      message("top: move infos generation from " + infos.getGeneration() + " to "+ maxPendingGen);
      infos.setNextWriteGeneration(maxPendingGen);
    }
    sendNewReplica();
    mgr=new SegmentInfosSearcherManager(dir,this,infos,searcherFactory);
    IndexSearcher searcher=mgr.acquire();
    try {
      int hitCount=searcher.count(new TermQuery(new Term("marker","marker")));
      message("top: marker count=" + hitCount + " version="+ ((DirectoryReader)searcher.getIndexReader()).getVersion());
    }
  finally {
      mgr.release(searcher);
    }
    if (doCommit) {
      commit();
    }
    message("top: done start");
    state="idle";
  }
 catch (  Throwable t) {
    if (t.getMessage().startsWith("replica cannot start") == false) {
      message("exc on start:");
      t.printStackTrace(printStream);
    }
 else {
      dir.close();
    }
    IOUtils.reThrow(t);
  }
}

public static boolean isSameElementType(ASTNode node1,ASTNode node2){
  return node1 != null && node2 != null && node1.getElementType() == node1.getElementType();
}

@Override public LogMessage readNextLogMessage(){
  try {
    if (reader == null) {
      return null;
    }
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        close();
        if (currentLog != null && matchRegex(currentLog)) {
          incrementLogCount(currentLog);
          return currentLog;
        }
        return null;
      }
      fileLineNumber++;
      LogMessage nextLog=null;
      if (parser != null) {
        nextLog=parser.parseLine(line,request);
      }
 else {
        for (        LogParser parser : parserTable) {
          nextLog=parser.parseLine(line,request);
          if (!nextLog.isContinuation()) {
            this.parser=parser;
            break;
          }
        }
        if (nextLog == null || nextLog.isContinuation()) {
          status.appendInfo(this.filePath,fileLineNumber);
          continue;
        }
      }
      if (nextLog.isContinuation()) {
        if (currentLog != null) {
          currentLog.appendMessage(LogUtil.stringToBytes(line));
        }
      }
 else       if (nextLog.isRejected()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
      }
 else       if (nextLog.isRejectedLast()) {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=null;
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
        break;
      }
 else {
        if (currentLog != null) {
          LogMessage returnedLog=currentLog;
          currentLog=nextLog;
          if (returnedLog.isHeader() && currentLog.isHeader()) {
            continue;
          }
          if (matchRegex(returnedLog)) {
            incrementLogCount(returnedLog);
            return returnedLog;
          }
        }
 else {
          currentLog=nextLog;
        }
      }
    }
  }
 catch (  IOException e) {
    status.appendErrFileName(filePath);
  }
  return null;
}

public void appendDataTo(StringBuilder stringBuilder){
  stringBuilder.append(buffer);
}

private static boolean hasResponseBody(int requestMethod,int responseCode){
  return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED;
}

private void loadBinary(DataInputStream is) throws IOException {
  if (is.readInt() != MAGIC) {
    throw new Error("Bad magic in db");
  }
  if (is.readInt() != VERSION) {
    throw new Error("Bad VERSION in db");
  }
  continuityWeight=is.readInt();
  optimalCoupling=is.readInt();
  extendSelections=is.readInt();
  joinMethod=is.readInt();
  joinWeightShift=is.readInt();
  int weightLength=is.readInt();
  joinWeights=new int[weightLength];
  for (int i=0; i < joinWeights.length; i++) {
    joinWeights[i]=is.readInt();
  }
  int unitsLength=is.readInt();
  units=new DatabaseClusterUnit[unitsLength];
  for (int i=0; i < units.length; i++) {
    units[i]=new DatabaseClusterUnit(is);
  }
  int unitTypesLength=is.readInt();
  unitTypes=new UnitType[unitTypesLength];
  for (int i=0; i < unitTypes.length; i++) {
    unitTypes[i]=new UnitType(is);
  }
  sts=new SampleSet(is);
  mcep=new SampleSet(is);
  int numCarts=is.readInt();
  cartMap=new HashMap();
  for (int i=0; i < numCarts; i++) {
    String name=Utilities.getString(is);
    CART cart=CARTImpl.loadBinary(is);
    cartMap.put(name,cart);
    if (defaultCart == null) {
      defaultCart=cart;
    }
  }
}

public static String toString(long l){
  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {
    return Long.toString(l,10);
  }
  return NUMBERS[(int)l];
}

@Override public synchronized void reset(){
  pos=0;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public static int readSingleByte(InputStream in) throws IOException {
  byte[] buffer=new byte[1];
  int result=in.read(buffer,0,1);
  return (result != -1) ? buffer[0] & 0xff : -1;
}

public static void write(File file,CharSequence data) throws IOException {
  write(file,data,Charset.defaultCharset(),false);
}

protected boolean isIDPProxyEnabled(FSAuthnRequest authnRequest) throws FSException {
  if (authnRequest.getMinorVersion() != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {
    return false;
  }
  FSScoping scoping=authnRequest.getScoping();
  if (scoping != null && scoping.getProxyCount() == 0) {
    return false;
  }
  String enabledString=IDFFMetaUtils.getFirstAttributeValueFromConfig(spConfig,IFSConstants.ENABLE_IDP_PROXY);
  if (enabledString != null && enabledString.equalsIgnoreCase("true")) {
    return true;
  }
 else {
    return false;
  }
}

private void compileProlog(ObjectId prolog,File tempDir) throws IOException, CompileException {
  File tempRules=copyToTempFile(prolog,tempDir);
  try {
    Compiler comp=new Compiler();
    comp.prologToJavaSource(tempRules.getPath(),tempDir.getPath());
  }
  finally {
    tempRules.delete();
  }
}

public Spring removeAllListeners(){
  mListeners.clear();
  return this;
}

public SelectionInputDialog(Window owner,String key,boolean editable,T[] selectionValues,T initialSelectionValue,InputValidator<T> inputValidator,Object... keyArguments){
  this(owner,key,selectionValues,initialSelectionValue,inputValidator,keyArguments);
  comboBox.setEditable(editable);
}

public void build(SolrCore core,SolrIndexSearcher searcher) throws IOException {
  LOG.info("build()");
  dictionary=dictionaryFactory.create(core,searcher);
  lookup.build(dictionary);
  if (storeDir != null) {
    File target=new File(storeDir,factory.storeFileName());
    if (!lookup.store(new FileOutputStream(target))) {
      LOG.error("Store Lookup build failed");
    }
 else {
      LOG.info("Stored suggest data to: " + target.getAbsolutePath());
    }
  }
}

public static String convertClassNameToResourcePath(String className){
  Assert.notNull(className,"Class name must not be null");
  return className.replace('.','/');
}

public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {
  StringBuilder uri=new StringBuilder();
  if (scheme != null) {
    uri.append(scheme);
    uri.append(':');
  }
  if (schemeSpecificPart != null) {
    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);
  }
  if (fragment != null) {
    uri.append('#');
    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);
  }
  parseURI(uri.toString(),false);
}

private int addToPopulation(Solution solution){
  int id=nextFreeId();
  solutions.put(id,solution);
  return id;
}

public byte[] toByteArray(){
  return Arrays.copyOf(buf,cnt);
}

public void createDiskAsync(final String projectId,final DiskCreateSpec diskCreateSpec,final FutureCallback<Task> responseCallback) throws IOException {
  final String path=String.format("%s/%s/disks",getBasePath(),projectId);
  createObjectAsync(path,serializeObjectAsJson(diskCreateSpec),responseCallback);
}

@Override public boolean domainMatch(final String host,final String domain){
  return host.endsWith(domain);
}

public synchronized void disableAttribute(String name){
  enabledAttributes.removeElement(name);
}

public Criteria createCriteria(){
  Criteria criteria=createCriteriaInternal();
  if (oredCriteria.size() == 0) {
    oredCriteria.add(criteria);
  }
  return criteria;
}

public void push(final Handle handle){
  mv.visitLdcInsn(handle);
}

@Deprecated public static String encodePostBody(Bundle parameters,String boundary){
  if (parameters == null)   return "";
  StringBuilder sb=new StringBuilder();
  for (  String key : parameters.keySet()) {
    Object parameter=parameters.get(key);
    if (!(parameter instanceof String)) {
      continue;
    }
    sb.append("Content-Disposition: form-data; name=\"" + key + "\"\r\n\r\n"+ (String)parameter);
    sb.append("\r\n" + "--" + boundary + "\r\n");
  }
  return sb.toString();
}

public static IFitsHeader lookup(String key){
  int keyLength=key.length();
  if (keyLength > 0 && Character.isDigit(key.charAt(keyLength - 1))) {
    StringBuilder builder=new StringBuilder();
    for (int index=0; index < keyLength; index++) {
      char character=key.charAt(index);
      if (Character.isDigit(character)) {
        if (builder.charAt(builder.length() - 1) != 'n') {
          builder.append('n');
        }
      }
 else {
        builder.append(character);
      }
    }
    return STANDARD_KEYS.get(builder.toString());
  }
  return STANDARD_KEYS.get(key);
}

private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){
  String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents,lateEvents,anytimeEvents,actualEvents);
  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);
  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);
  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);
  for (  PortChangeEvent ev : early) {
    assertFalse("Test setup error. Early and late overlap",late.contains(ev));
    assertFalse("Test setup error. Early and anytime overlap",any.contains(ev));
  }
  for (  PortChangeEvent ev : late) {
    assertFalse("Test setup error. Late and early overlap",early.contains(ev));
    assertFalse("Test setup error. Late and any overlap",any.contains(ev));
  }
  for (  PortChangeEvent ev : any) {
    assertFalse("Test setup error. Anytime and early overlap",early.contains(ev));
    assertFalse("Test setup error. Anytime and late overlap",late.contains(ev));
  }
  for (  PortChangeEvent a : actualEvents) {
    if (early.remove(a)) {
      continue;
    }
    if (any.remove(a)) {
      continue;
    }
    if (late.remove(a)) {
      if (!early.isEmpty()) {
        fail(a + " is in late list, but haven't seen all required " + "early events. "+ inputDesc);
      }
 else {
        continue;
      }
    }
    fail(a + " was not expected. " + inputDesc);
  }
  if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc);
  if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc);
  if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc);
}

@Override public void write(Kryo kryo,Output output){
  int size=index.size();
  output.writeInt(size + 1,true);
  for (int i=0; i < size; ++i) {
    String s=index.get(i);
    if (s == null) {
      throw new RuntimeException("Cannot serialize null string at index " + Integer.toString(i));
    }
    output.writeString(s);
  }
}

public final ObjectProperty<Control> toggleNodeProperty(){
  return this.toggleNode;
}

private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){
  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {
    sb.append((char)bb.get(0));
    return i + 2;
  }
 else {
    CharBuffer cb=UTF_8_CHARSET.decode(bb);
    sb.append(cb.toString());
    return i + bb.limit() * 3 - 1;
  }
}

public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {
  MathUtils.checkNotNull(v1);
  MathUtils.checkNotNull(v2);
  field=v1.getField();
  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();
  data=MathArrays.buildArray(field,v1Data.length + v2.length);
  System.arraycopy(v1Data,0,data,0,v1Data.length);
  System.arraycopy(v2,0,data,v1Data.length,v2.length);
}

public void reverse(){
  final ArrayList<Animator> animators=mAnimatedVectorState.mAnimators;
  final int size=animators.size();
  for (int i=0; i < size; i++) {
    final Animator animator=animators.get(i);
    if (canReverse(animator)) {
      reverse(animator);
    }
 else {
      Log.w(LOG_TAG,"AnimatedVectorDrawable can't reverse()");
    }
  }
}

public void start(){
  if (sLogger.isActivated()) {
    sLogger.info("Start address book monitoring");
  }
  mCleanupExecutor=Executors.newSingleThreadExecutor();
  if (!mObserverIsRegistered) {
    mContactsContractObserver=new ContactsContractObserver(new Handler());
    mContactsContractCursor=mContentResolver.query(Phone.CONTENT_URI,null,null,null,null);
    CursorUtil.assertCursorIsNotNull(mContactsContractCursor,Phone.CONTENT_URI);
    mContactsContractCursor.registerContentObserver(mContactsContractObserver);
    mObserverIsRegistered=true;
  }
}

protected final void fireVetoableChange(String propertyName,double oldValue,double newValue) throws PropertyVetoException {
  fireVetoableChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue));
}

public void testLMDirichlet() throws IOException {
  float p=(FREQ + 2000.0f * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f)) / (DOC_LEN + 2000.0f);
  float a=2000.0f / (DOC_LEN + 2000.0f);
  float gold=(float)(Math.log(p / (a * (TOTAL_TERM_FREQ + 1) / (NUMBER_OF_FIELD_TOKENS + 1.0f))) + Math.log(a));
  correctnessTestCore(new LMDirichletSimilarity(),gold);
}

public void onSinksReceived(String sourceUrn,List<MediaSink> sinks){
  mSinks.put(sourceUrn,sinks);
  nativeOnSinksReceived(mNativeMediaRouterAndroid,sourceUrn,sinks.size());
}

public User toEntity(UserDTO dto){
  return toEntity(dto,1);
}

protected void writeExternalForeignKeyDropStmt(Table table,ForeignKey foreignKey,StringBuilder ddl){
  writeTableAlterStmt(table,ddl);
  ddl.append("DROP CONSTRAINT ");
  printIdentifier(getForeignKeyName(table,foreignKey),ddl);
  printEndOfStatement(ddl);
}

public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {
  Long quit_time=System.currentTimeMillis() + timeout_ms;
  if (fileLock != null && fileLock.isValid()) {
    return;
  }
  do {
    try {
      fileLock=fileToLock.tryLock();
      return;
    }
 catch (    OverlappingFileLockException e) {
      Thread.sleep(1000);
    }
  }
 while (System.currentTimeMillis() < quit_time);
  throw new TimeoutException();
}

@Deprecated public void pointToData(Data o) throws FitsException {
  o.fillHeader(this);
}

@NotNull protected VirtualFile[] collectAffectedFiles(@NotNull Project project,@NotNull VirtualFile[] files){
  List<VirtualFile> affectedFiles=new ArrayList<VirtualFile>(files.length);
  ProjectLevelVcsManager projectLevelVcsManager=ProjectLevelVcsManager.getInstance(project);
  for (  VirtualFile file : files) {
    if (!file.isDirectory() && projectLevelVcsManager.getVcsFor(file) instanceof GitVcs) {
      affectedFiles.add(file);
    }
 else     if (file.isDirectory() && isRecursive()) {
      addChildren(project,affectedFiles,file);
    }
  }
  return VfsUtilCore.toVirtualFileArray(affectedFiles);
}

public void updatePosition(Particle particle,long elapsedTime){
  Vector3f speed=particle.getSpeed();
  float delta=elapsedTime / 1000.0f;
  float dx=speed.x * delta;
  float dy=speed.y * delta;
  float dz=speed.z * delta;
  Vector3f pos=particle.getPosition();
  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);
}

protected void update(int length){
  tickLabelValues.clear();
  tickLabels.clear();
  tickLabelPositions.clear();
  if (scale.isLogScaleEnabled()) {
    updateTickLabelForLogScale(length);
  }
 else {
    updateTickLabelForLinearScale(length);
  }
  updateTickVisibility();
  updateTickLabelMaxLengthAndHeight();
}

private static boolean isWithinBounds(VisualPosition targetPosition,VisualPosition startPosition,VisualPosition endPosition){
  return targetPosition.line >= startPosition.line && targetPosition.line <= endPosition.line && targetPosition.column >= startPosition.column && targetPosition.column <= endPosition.column;
}

static public void assertStatementIndicesConsistent(final AbstractTripleStore db,final int maxerrors){
  if (log.isInfoEnabled())   log.info("Verifying statement indices");
  final AtomicInteger nerrs=new AtomicInteger(0);
  final int from, to;
  if (db.getSPOKeyArity() == 3) {
    from=SPOKeyOrder.FIRST_TRIPLE_INDEX;
    to=SPOKeyOrder.LAST_TRIPLE_INDEX;
  }
 else {
    from=SPOKeyOrder.FIRST_QUAD_INDEX;
    to=SPOKeyOrder.LAST_QUAD_INDEX;
  }
  for (int i=from; i <= to; i++) {
    for (int j=from; j <= to; j++) {
      if (i <= j) {
        continue;
      }
      assertSameStatements(db,SPOKeyOrder.valueOf(i),SPOKeyOrder.valueOf(j),nerrs,maxerrors);
    }
  }
  assertEquals(0,nerrs.get());
}

public void show(@IdRes final int itemId){
  map.add(itemId);
  navigation.invalidateBadge(itemId);
}

public Options put(String option,Integer value){
  if (value == null) {
    return remove(option);
  }
  options.put(option,value.toString());
  return this;
}

private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){
  int targetPage;
  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {
    if (virtualPos < 0) {
      targetPage=velocity > 0 ? currentPage : currentPage + 1;
    }
 else {
      targetPage=velocity > 0 ? currentPage + 1 : currentPage;
    }
  }
 else {
    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;
    targetPage=(int)(currentPage + pageOffset + truncator);
  }
  if (items.size() > 0) {
    final ItemInfo firstItem=items.get(0);
    final ItemInfo lastItem=items.get(items.size() - 1);
    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));
  }
  if (targetPage > currentPage && onCardChangeListener != null) {
    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);
  }
  return targetPage;
}

protected String form(ObjectMatrix1D matrix,int index,Former formatter){
  Object value=matrix.get(index);
  if (value == null)   return "";
  return String.valueOf(value);
}

public void clone(Vector3f source){
  System.arraycopy(source.points,0,points,0,3);
}

public void disable(BluetoothAdapter adapter){
  int mask=(BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG);
  long start=-1;
  BluetoothReceiver receiver=getBluetoothReceiver(mask);
  int state=adapter.getState();
switch (state) {
case BluetoothAdapter.STATE_OFF:
    assertFalse(adapter.isEnabled());
  removeReceiver(receiver);
return;
case BluetoothAdapter.STATE_TURNING_ON:
assertFalse(adapter.isEnabled());
start=System.currentTimeMillis();
break;
case BluetoothAdapter.STATE_ON:
assertTrue(adapter.isEnabled());
start=System.currentTimeMillis();
assertTrue(adapter.disable());
break;
case BluetoothAdapter.STATE_TURNING_OFF:
assertFalse(adapter.isEnabled());
mask=0;
break;
default :
removeReceiver(receiver);
fail(String.format("disable() invalid state: state=%d",state));
}
long s=System.currentTimeMillis();
while (System.currentTimeMillis() - s < ENABLE_DISABLE_TIMEOUT) {
state=adapter.getState();
if (state == BluetoothAdapter.STATE_OFF && (receiver.getFiredFlags() & mask) == mask) {
assertFalse(adapter.isEnabled());
long finish=receiver.getCompletedTime();
if (start != -1 && finish != -1) {
writeOutput(String.format("disable() completed in %d ms",(finish - start)));
}
 else {
writeOutput("disable() completed");
}
removeReceiver(receiver);
return;
}
sleep(POLL_TIME);
}
int firedFlags=receiver.getFiredFlags();
removeReceiver(receiver);
fail(String.format("disable() timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",state,BluetoothAdapter.STATE_OFF,firedFlags,mask));
}

public static String toRegex(String glob,String separator){
  checkNotNull(separator,"separator must be non-null");
  checkArgument(separator.length() == 1,"separator must be a single character: %s",separator);
  return toRegex(glob,separator.charAt(0));
}

protected void forceNoLoss(boolean value){
}

public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){
  int len=str.length();
  if (len == 0) {
    return new String[0];
  }
  List<String> list=new ArrayList<String>();
  int i=0;
  int start=0;
  boolean match=false;
  while (i < len) {
    if (str.charAt(i) == '\\') {
      match=true;
      i+=2;
    }
 else     if (str.charAt(i) == separatorChar) {
      if (retainEmpty || match) {
        list.add(str.substring(start,i));
        match=false;
      }
      start=++i;
    }
 else {
      match=true;
      i++;
    }
  }
  if (retainEmpty || match) {
    list.add(str.substring(start,i));
  }
  return list.toArray(new String[list.size()]);
}

private static HashMap<BasicBlockPair,HashSet<Register>> findSplitPoints(IR ir,LiveAnalysis live,LSTGraph lst){
  HashMap<BasicBlockPair,HashSet<Register>> result=new HashMap<BasicBlockPair,HashSet<Register>>(10);
  for (Enumeration<GraphNode> e=lst.enumerateNodes(); e.hasMoreElements(); ) {
    LSTNode node=(LSTNode)e.nextElement();
    BasicBlock header=node.getHeader();
    BitVector loop=node.getLoop();
    if (loop == null)     continue;
    for (Enumeration<BasicBlock> in=header.getIn(); in.hasMoreElements(); ) {
      BasicBlock bb=in.nextElement();
      if (loop.get(bb.getNumber()))       continue;
      HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,header);
      for (      Register r : liveRegisters) {
        if (r.isSymbolic()) {
          HashSet<Register> s=findOrCreateSplitSet(result,bb,header);
          s.add(r);
        }
      }
    }
    for (int i=0; i < loop.length(); i++) {
      if (loop.get(i)) {
        BasicBlock bb=ir.getBasicBlock(i);
        for (Enumeration<BasicBlock> out=bb.getNormalOut(); out.hasMoreElements(); ) {
          BasicBlock dest=out.nextElement();
          if (loop.get(dest.getNumber()))           continue;
          HashSet<Register> liveRegisters=live.getLiveRegistersOnEdge(bb,dest);
          for (          Register r : liveRegisters) {
            if (r.isSymbolic()) {
              HashSet<Register> s=findOrCreateSplitSet(result,bb,dest);
              s.add(r);
            }
          }
        }
      }
    }
  }
  addEntriesForInfrequentBlocks(ir,live,result);
  return result;
}

public void testSplitEscapedSemicolons(){
  Properties inner=PropertyUtils.splitPropertiesOnSemicolon(PropertyUtils.escapeBackSlashesIfNotNull("foo=bar;baz=blorple\\;zot;windows=c:\\test;glorg=gluux"));
  assertEquals(4,inner.size());
  assertEquals("bar",inner.getProperty("foo"));
  assertEquals("blorple;zot",inner.getProperty("baz"));
  assertEquals("gluux",inner.getProperty("glorg"));
  assertEquals("c:\\test",inner.getProperty("windows"));
}

public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,int offset){
  System.arraycopy(sourceArray,0,destinationArray,0,offset);
  System.arraycopy(sourceArray,offset + 1,destinationArray,offset,sourceArray.length - offset - 1);
}

@SuppressWarnings("unchecked") public DictionaryAdapter(Context context,File dbPath,String dbName,String defaultTable){
  mContext=context;
  mDbName=dbName;
  mDefaultTable=defaultTable;
  mDbPath=dbPath;
  mDbFile=new File(dbPath,mDbName);
  if (mDbFile.exists()) {
    open();
  }
}

public boolean isTabAssociatedWithNonDestroyedActivity(boolean isIncognito,int tabId){
  List<WeakReference<Activity>> activities=ApplicationStatus.getRunningActivities();
  for (  WeakReference<Activity> ref : activities) {
    Activity activity=ref.get();
    if (activity != null && isValidActivity(isIncognito,activity.getIntent()) && getTabIdFromIntent(activity.getIntent()) == tabId && !isActivityDestroyed(activity)) {
      return true;
    }
  }
  return false;
}

HttpStreamWrapper(HttpStream stream) throws IOException {
  _stream=stream;
}

public boolean handleFile(File file){
  if (DEBUG) {
    logger.fine("searching finds: " + file.getAbsolutePath());
  }
  filenames.add(file);
  return true;
}

public boolean looksLikeNumberComing(){
  if (n >= s.length())   return false;
  return Character.isDigit(s.charAt(n));
}

public PartialHull(IPoint first,IPoint second){
  points.add(first);
  points.add(second);
}

public void addSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<SwipeListener>();
  }
  mListeners.add(listener);
}

public short readShort() throws IOException {
  return primitiveTypes.readShort();
}

public void print(int inum){
  print(String.valueOf(inum));
}

public static <NodeType extends IViewNode<?>>ZyProximityNode<?> createProximityNode(final Graph2D graph,final ZyGraphNode<?> attachedNode,final int degree,final boolean isIncoming){
  Preconditions.checkNotNull(graph,"Graph argument can not be null");
  Preconditions.checkNotNull(attachedNode,"Target node argument can not be null");
  final ZyLabelContent labelcontent=new ZyLabelContent(null);
  labelcontent.addLineContent(new ZyLineContent(String.valueOf(degree),new Font("New Courier",Font.PLAIN,12),null));
  final ZyProximityNodeRealizer<NodeType> r=new ZyProximityNodeRealizer<NodeType>(labelcontent);
  final Node node=graph.createNode(r);
  @SuppressWarnings("unchecked") final ZyProximityNode<NodeType> infoNode=new ZyProximityNode<NodeType>(node,r,(ZyGraphNode<NodeType>)attachedNode,isIncoming);
  final ZyNodeData<ZyProximityNode<NodeType>> data=new ZyNodeData<ZyProximityNode<NodeType>>(infoNode);
  r.setUserData(data);
  return infoNode;
}

public static boolean isZoningRequired(DbClient dbClient,URI varrayUri){
  if (varrayUri != null) {
    VirtualArray nh=dbClient.queryObject(VirtualArray.class,varrayUri);
    if (nh != null) {
      return isZoningRequired(dbClient,nh);
    }
  }
  return false;
}

public void reply(List<String> responseHeaders,boolean out) throws IOException {
  assert (!Thread.holdsLock(SpdyStream.this));
  boolean outFinished=false;
synchronized (this) {
    if (responseHeaders == null) {
      throw new NullPointerException("responseHeaders == null");
    }
    if (isLocallyInitiated()) {
      throw new IllegalStateException("cannot reply to a locally initiated stream");
    }
    if (this.responseHeaders != null) {
      throw new IllegalStateException("reply already sent");
    }
    this.responseHeaders=responseHeaders;
    if (!out) {
      this.out.finished=true;
      outFinished=true;
    }
  }
  connection.writeSynReply(id,outFinished,responseHeaders);
}

protected CCAnimation(String name,float delay,ArrayList<CCSpriteFrame> frames){
  delay_=delay;
  name_=name;
  frames_=new ArrayList<CCSpriteFrame>();
  if (frames != null)   frames_.addAll(frames);
}

private void navigateToDump(){
  TreePath currentPath=tree.getSelectionPath();
  tree.setSelectionPath(currentPath.getParentPath());
  tree.scrollPathToVisible(currentPath.getParentPath());
}

public synchronized void addMessages(ArrayList<SmsMmsMessage> newMessages){
  if (newMessages != null) {
    messages.addAll(0,newMessages);
    UpdateMessageCount();
  }
}

public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){
  Random random=new Random();
  Cache.Entry entry=new Cache.Entry();
  if (data != null) {
    entry.data=data;
  }
 else {
    entry.data=new byte[random.nextInt(1024)];
  }
  entry.etag=String.valueOf(random.nextLong());
  entry.serverDate=random.nextLong();
  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;
  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;
  return entry;
}

public int swap(){
  if (!egl.eglSwapBuffers(eglDisplay,eglSurface)) {
    return egl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}

public static List<Window> windows(String words,int windowSize){
  StringTokenizer tokenizer=new StringTokenizer(words);
  List<String> list=new ArrayList<String>();
  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());
  return windows(list,windowSize);
}

protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    MPPointF center=mChart.getCenterCircleBox();
    MPPointF offset=mChart.getCenterTextOffset();
    float x=center.x + offset.x;
    float y=center.y + offset.y;
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=x - innerRadius;
    holeRect.top=y - innerRadius;
    holeRect.right=x + innerRadius;
    holeRect.bottom=y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=mDrawCenterTextPathBuffer;
      path.reset();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
    MPPointF.recycleInstance(center);
    MPPointF.recycleInstance(offset);
  }
}

public static String buildPath(JsonPath jsonPath){
  List<String> urlParts=new LinkedList<>();
  JsonPath currentJsonPath=jsonPath;
  String pathPart;
  do {
    if (currentJsonPath instanceof RelationshipsPath) {
      pathPart=RELATIONSHIP_MARK + SEPARATOR + currentJsonPath.getElementName();
    }
 else     if (currentJsonPath instanceof FieldPath) {
      pathPart=currentJsonPath.getElementName();
    }
 else {
      pathPart=currentJsonPath.getElementName();
      if (currentJsonPath.getIds() != null) {
        pathPart+=SEPARATOR + mergeIds(currentJsonPath.getIds());
      }
    }
    urlParts.add(pathPart);
    currentJsonPath=currentJsonPath.getParentResource();
  }
 while (currentJsonPath != null);
  Collections.reverse(urlParts);
  return SEPARATOR + StringUtils.join(SEPARATOR,urlParts) + SEPARATOR;
}

protected void groupFrames(Vector<Frame> frames,Vector<Group> groups,boolean isDchum) throws MakeTocException {
  Frame frame;
  Group group;
  int groupCount;
  int nFrames=frames.size();
  Debug.message("maketoc","MakeToc: *** grouping frames ***");
  for (int i=0; i < nFrames; i++) {
    Debug.message("maketocdetail","MakeToc: group addition, starting outer loop");
    frame=(Frame)frames.elementAt(i);
    if (!frame.marked) {
      groupCount=groups.size();
      group=new Group();
      group.left=maxSide / 2;
      group.right=group.left + 1;
      group.top=maxSide / 2;
      group.bottom=group.top + 1;
      group.horiz_pos[group.top]=frame.top;
      group.horiz_pos[group.bottom]=frame.bottom;
      group.vert_pos[group.left]=frame.left;
      group.vert_pos[group.right]=frame.right;
      group.h_interval=frame.h_interval;
      group.v_interval=frame.v_interval;
      group.h_resolution=frame.h_resolution;
      group.v_resolution=frame.v_resolution;
      group.scale=frame.scale;
      group.zone=frame.zone;
      group.cib=frame.cib;
      group.cdted=frame.cdted;
      frame.x=group.left;
      frame.y=group.top;
      frame.group=groupCount;
      frame.marked=true;
      Debug.message("maketocdetail","Maketoc.groupFrames: created group " + groupCount + " for frame "+ i+ ", - "+ frame.filename+ " checking other frames for neighbors");
      if (!isDchum) {
        for (int j=0; j < nFrames; j++) {
          if (i == j) {
            Debug.message("maketocdetail","Maketoc.groupFrames: inner loop, i = j = " + i + ", frame that created group added to group, expecting false return");
            continue;
          }
          Frame f=(Frame)frames.elementAt(j);
          if (addFrameToGroup(group,f,groupCount)) {
            Debug.message("maketocdetail","Maketoc.groupFrames: added frame " + j + " to group "+ groupCount);
            continue;
          }
        }
      }
      Debug.message("maketocdetail","Maketoc.groupFrames: adding another group - " + groupCount + " *******************\n\n");
      groups.add(group);
    }
    fireProgressUpdate(ProgressEvent.UPDATE,"Organizing frames",i,nFrames);
  }
  if (Debug.debugging("maketoc")) {
    Debug.output("MakeToc: Number of boundary rectangles (groups): " + groups.size());
  }
}

private static Object add(final Object array,final int index,final Object element,final Class<?> clss){
  if (array == null) {
    if (index != 0) {
      throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");
    }
    Object joinedArray=Array.newInstance(clss,1);
    Array.set(joinedArray,0,element);
    return joinedArray;
  }
  int length=Array.getLength(array);
  if (index > length || index < 0) {
    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);
  }
  Object result=Array.newInstance(clss,length + 1);
  System.arraycopy(array,0,result,0,index);
  Array.set(result,index,element);
  if (index < length) {
    System.arraycopy(array,index,result,index + 1,length - index);
  }
  return result;
}

public double doubleValue(){
  return d.doubleValue();
}

public String toMatlab(){
  StringBuffer result;
  int i;
  int n;
  result=new StringBuffer();
  result.append("[");
  for (i=0; i < getRowDimension(); i++) {
    if (i > 0) {
      result.append("; ");
    }
    for (n=0; n < getColumnDimension(); n++) {
      if (n > 0) {
        result.append(" ");
      }
      result.append(Double.toString(get(i,n)));
    }
  }
  result.append("]");
  return result.toString();
}

public FileInputReader(File f) throws IOException {
  if (Debug.debugging("binaryfile")) {
    Debug.output("FileInputReader created from " + f.getAbsolutePath());
  }
  name=f.getName();
  absolutePath=f.getAbsolutePath();
  inputFile=init(f);
}

public static ObjectOutputStream newObjectOutputStream(Path self) throws IOException {
  return new ObjectOutputStream(Files.newOutputStream(self));
}

@Override public Set<K> keySet(){
  HashSet<K> set=new HashSet<K>();
  for (  Segment<K,V> s : segments) {
    set.addAll(s.keySet());
  }
  return set;
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=imageView.getWidth();
  final float viewHeight=imageView.getHeight();
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public void add(final CertificateValidity certificateValidity){
  certificateValidityList.add(certificateValidity);
}

public void addPolicyListener(PolicyListener policyListener){
  policyCache.addPolicyListener(policyListener);
}

public static Result verify(String sid,String code){
  String id="//captcha/" + sid;
  Code c=(Code)Cache.get(id);
  if (c == null) {
    log.warn("no code in cache, sid=" + sid);
    return Result.badcode;
  }
 else   if (!X.isSame(code,c.code)) {
    log.warn("is not same, code.server=" + c.code + ", code.client="+ code);
    return Result.badcode;
  }
 else   if (c.expired < System.currentTimeMillis()) {
    log.warn("expired, expired=" + c.expired);
    return Result.expired;
  }
  return Result.ok;
}

private ScriptEngine newScriptEngine(File file) throws ScriptException {
  String filename=file.getName();
  int index=filename.lastIndexOf('.');
  if ((index < 0) || (index >= filename.length() - 1)) {
    throw new ScriptException("file has no extension");
  }
  String extension=filename.substring(index + 1);
  ScriptEngineManager manager=new ScriptEngineManager();
  ScriptEngine engine=manager.getEngineByExtension(extension);
  if (engine == null) {
    throw new ScriptException("no scripting engine for extension ." + extension);
  }
  return engine;
}

protected static INaviRawModule findRawModule(final int rawModuleId,final List<INaviRawModule> rawModules){
  Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be positive integer",rawModuleId);
  Preconditions.checkNotNull(rawModules,"IE02263: raw modules argument can not be null");
  for (  final INaviRawModule rawModule : rawModules) {
    if (rawModule.getId() == rawModuleId) {
      return rawModule;
    }
  }
  throw new IllegalStateException("IE00160: Could not find raw module");
}

public static Object extractTypeChecked(List<Object> args,int i,Class clazz,Function<List<Object>,Object> extractFunc){
  if (args.size() < i + 1) {
    return null;
  }
 else   if (clazz.isInstance(args.get(i))) {
    return extractFunc.apply(args);
  }
 else {
    return null;
  }
}

@Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){
  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));
}

private Pair<Entry,char[]> recoverEntry(KeyStore ks,String alias,char[] pstore,char[] pkey) throws Exception {
  if (ks.containsAlias(alias) == false) {
    MessageFormat form=new MessageFormat(rb.getString("Alias.alias.does.not.exist"));
    Object[] source={alias};
    throw new Exception(form.format(source));
  }
  PasswordProtection pp=null;
  Entry entry;
  try {
    entry=ks.getEntry(alias,pp);
    pkey=null;
  }
 catch (  UnrecoverableEntryException une) {
    if (P11KEYSTORE.equalsIgnoreCase(ks.getType()) || KeyStoreUtil.isWindowsKeyStore(ks.getType())) {
      throw une;
    }
    if (pkey != null) {
      pp=new PasswordProtection(pkey);
      entry=ks.getEntry(alias,pp);
    }
 else {
      try {
        pp=new PasswordProtection(pstore);
        entry=ks.getEntry(alias,pp);
        pkey=pstore;
      }
 catch (      UnrecoverableEntryException une2) {
        if (P12KEYSTORE.equalsIgnoreCase(ks.getType())) {
          throw une2;
        }
 else {
          pkey=getKeyPasswd(alias,null,null);
          pp=new PasswordProtection(pkey);
          entry=ks.getEntry(alias,pp);
        }
      }
    }
  }
  return Pair.of(entry,pkey);
}

URLClassLoader newLoader(URL base){
  return new URLClassLoader(new URL[]{base});
}

public void testMinUnequal1(){
  String a="92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=24;
  String b="92948782094488478231212478987482988429808779810457634781384756794987";
  int bScale=41;
  String c="92948782094488478231212478987482988429808779810457634781384756794987";
  int cScale=41;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);
  assertEquals("incorrect value",cNumber,aNumber.min(bNumber));
}

public Wiser(){
  this.server=new SMTPServer(new SimpleMessageListenerAdapter(this));
}

protected static int[] concat(@Nullable int[] arr,int... obj){
  int[] newArr;
  if (arr == null || arr.length == 0)   newArr=obj;
 else {
    newArr=Arrays.copyOf(arr,arr.length + obj.length);
    System.arraycopy(obj,0,newArr,arr.length,obj.length);
  }
  return newArr;
}

public void truckCamera(float size){
  moveToPosition(-(float)(targetXoff + (size * Math.sin(Math.toRadians(zrot - 90)))),-(float)(targetYoff + (size * Math.cos(Math.toRadians(zrot - 90)))));
}

public static byte[] decode2(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}

public void shutdown(){
  scheduledExecutorService.shutdownNow();
}

public Builder clear(){
  localeBuilder.clear();
  return this;
}

public static String deflate(String previous,String current){
  if (previous == null)   return current;
  StringBuilder buf=new StringBuilder();
  int start1=0;
  int start2=0;
  while (start1 < previous.length() && start2 < current.length()) {
    int end1=start1;
    int end2=start2;
    while (end1 <= previous.length() && end2 <= current.length()) {
      int c1=(end1 < previous.length() ? previous.charAt(end1) : '\t');
      int c2=(end2 < current.length() ? current.charAt(end2) : '\t');
      if (c1 == c2) {
        if (c1 == '\t') {
          buf.append("&");
          break;
        }
 else {
          end1++;
          end2++;
        }
      }
 else {
        while (end1 < previous.length() && previous.charAt(end1) != '\t') {
          end1++;
        }
        while (end2 < current.length() && current.charAt(end2) != '\t') {
          end2++;
        }
        for (int i=start2; i < end2; i++)         buf.append(current.charAt(i));
        break;
      }
    }
    start1=end1 + 1;
    start2=end2 + 1;
    if (start2 < current.length())     buf.append("\t");
  }
  return buf.toString();
}

protected int splitListIndex(List<Pair<Double,Integer>> S){
  return S.size() / 2;
}

public static void e(String tag,String msg,Object... args){
  if (sLevel > LEVEL_ERROR) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.e(tag,msg);
}

public static synchronized void addPropertyChangeListener(PropertyChangeListener l){
  if (!listeners.contains(l)) {
    listeners.add(l);
  }
}

private static void cleanDirectory(File path){
  if (path == null)   return;
  if (path.exists()) {
    for (    File f : path.listFiles()) {
      if (f.isDirectory())       cleanDirectory(f);
      f.delete();
    }
  }
}

private GridCacheVersion minVersion(Iterable<IgniteTxEntry> entries,GridCacheVersion min,IgniteInternalTx tx){
  for (  IgniteTxEntry txEntry : entries) {
    GridCacheEntryEx cached=txEntry.cached();
    assert txEntry.isRead() || !cached.obsolete(tx.xidVersion()) : "Invalid obsolete version for transaction [entry=" + cached + ", tx="+ tx+ ']';
    for (    GridCacheMvccCandidate cand : cached.remoteMvccSnapshot())     if (min == null || cand.version().isLess(min))     min=cand.version();
  }
  return min;
}

public DimensionedScalar(String fieldValue) throws IllegalArgumentException {
  super("","");
  Matcher matcher=PATTERN.matcher(fieldValue);
  if (matcher.find()) {
    String name=matcher.group(1);
    String dimensions=matcher.group(2);
    String value=matcher.group(3);
    setName(name);
    setValue(value);
    this.dimensions=new Dimensions(dimensions);
  }
 else {
    throw new DictionaryException("CANNOT PARSE:  >" + fieldValue + "<");
  }
}

public void characters(char ch[],int start,int length) throws SAXException {
  m_valueBuffer.append(ch,start,length);
}

protected double computeStdDev(Instance inst,Matrix k) throws Exception {
  double kappa=m_kernel.eval(-1,-1,inst) + m_deltaSquared;
  double s=0;
  int n=m_L.length;
  for (int i=0; i < n; i++) {
    double t=0;
    for (int j=0; j < n; j++) {
      t-=k.get(j,0) * (i > j ? m_L[i][j] : m_L[j][i]);
    }
    s+=t * k.get(i,0);
  }
  double sigma=m_delta;
  if (kappa > s) {
    sigma=Math.sqrt(kappa - s);
  }
  return sigma;
}

protected void initialize(Properties p){
}

public void add(int index,int element){
  checkRangeIncludingEndpoint(index);
  ensureCapacity(size + 1);
  int numtomove=size - index;
  System.arraycopy(array,index,array,index + 1,numtomove);
  array[index]=element;
  size++;
}

public MultiplexManager(DataStore... dataStores){
  this.dataStores=Arrays.asList(dataStores);
}

public boolean matchesRawNamePattern(Object item){
  String prefix=patternMatcher.getPattern();
  String text=getElementName(item);
  if (text == null)   return false;
  int textLength=text.length();
  int prefixLength=prefix.length();
  if (textLength < prefixLength) {
    return false;
  }
  for (int i=prefixLength - 1; i >= 0; i--) {
    if (Character.toLowerCase(prefix.charAt(i)) != Character.toLowerCase(text.charAt(i)))     return false;
  }
  return true;
}

public static @Nonnull <T>T valueOrDefault(@Nullable T value,@Nonnull T defaultValue){
  return value == null ? defaultValue : value;
}

protected abstract int compareToLastMsg(Pair<K,V> tupleKeyValue,Pair<byte[],byte[]> lastReceivedKeyValue);

public void paintComponent(Graphics g){
  g.drawImage(track,0,0,null);
  Graphics2D g2d=(Graphics2D)g.create();
  g2d.translate(carPosition.x,carPosition.y);
  g2d.rotate(Math.toRadians(carRotation));
  g2d.translate(-(carPosition.x),-(carPosition.y));
  g2d.drawImage(car,carPosition.x - carWHalf,carPosition.y - carHHalf,null);
}

public static java.sql.Time toSqlTime(String time){
  java.util.Date newDate=toDate("1/1/1970",time);
  if (newDate != null) {
    return new java.sql.Time(newDate.getTime());
  }
 else {
    return null;
  }
}

private void parseMenu(XmlPullParser parser,AttributeSet attrs,SublimeMenu menu) throws XmlPullParserException, IOException {
  MenuState menuState=new MenuState(menu);
  int eventType=parser.getEventType();
  String tagName;
  boolean lookingForEndOfUnknownTag=false;
  String unknownTagName=null;
  do {
    if (eventType == XmlPullParser.START_TAG) {
      tagName=parser.getName();
      if (tagName.equals(XML_MENU)) {
        eventType=parser.next();
        break;
      }
      throw new RuntimeException("Expecting menu, got " + tagName);
    }
    eventType=parser.next();
  }
 while (eventType != XmlPullParser.END_DOCUMENT);
  boolean reachedEndOfMenu=false;
  while (!reachedEndOfMenu) {
switch (eventType) {
case XmlPullParser.START_TAG:
      if (lookingForEndOfUnknownTag) {
        break;
      }
    tagName=parser.getName();
  if (tagName.equals(XML_GROUP)) {
    if (menuState.groupId != MenuState.defaultGroupId) {
      throw new RuntimeException("A 'Group' item cannot have " + "other 'Group' items as children.");
    }
    menuState.readGroup(attrs);
    menuState.addGroup();
  }
 else   if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_SEPARATOR)) {
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_GROUP_HEADER)) {
    if (menuState.groupId == MenuState.defaultGroupId) {
      throw new RuntimeException("'GroupHeader' item should " + "be placed inside a Group element.");
    }
    menuState.readMenuItem(attrs,tagName);
  }
 else   if (tagName.equals(XML_MENU)) {
    throw new RuntimeException("Sub-menus are not supported. " + "Similar functionality can be afforded " + "using the 'group' tag.");
  }
 else {
    lookingForEndOfUnknownTag=true;
    unknownTagName=tagName;
  }
break;
case XmlPullParser.END_TAG:
tagName=parser.getName();
if (lookingForEndOfUnknownTag && tagName.equals(unknownTagName)) {
lookingForEndOfUnknownTag=false;
unknownTagName=null;
}
 else if (tagName.equals(XML_GROUP)) {
if (menuState.isGroupCollapsible() && menuState.groupHeadersAdded != 1) {
if (menuState.groupHeadersAdded < 1) {
  throw new RuntimeException("A 'GroupHeader' is required " + "to create a 'collapsible' Group.");
}
 else {
  throw new RuntimeException("A 'collapsible' Group can only " + "have ONE 'GroupHeader'. You have provided: " + menuState.groupHeadersAdded + ".");
}
}
menuState.resetGroup();
}
 else if (tagName.equals(XML_TEXT) || tagName.equals(XML_TEXT_WITH_BADGE) || tagName.equals(XML_CHECKBOX)|| tagName.equals(XML_SWITCH)|| tagName.equals(XML_GROUP_HEADER)|| tagName.equals(XML_SEPARATOR)) {
if (!menuState.hasAddedItem()) {
menuState.addItem();
}
}
 else if (tagName.equals(XML_MENU)) {
reachedEndOfMenu=true;
}
break;
case XmlPullParser.END_DOCUMENT:
throw new RuntimeException("Unexpected end of document");
}
eventType=parser.next();
}
}

public static double crossTrackDistanceRad(double lat1,double lon1,double lat2,double lon2,double latQ,double lonQ){
  final double dlon12=lon2 - lon1;
  final double dlon1Q=lonQ - lon1;
  final double dlat1Q=latQ - lat1;
  final double clat1=Math.cos(lat1), slat1=MathUtil.cosToSin(lat1,clat1);
  final double clatQ=Math.cos(latQ), slatQ=MathUtil.cosToSin(latQ,clatQ);
  final double clat2=Math.cos(lat2), slat2=MathUtil.cosToSin(lat2,clat2);
  final double slat=Math.sin(dlat1Q * .5);
  final double slon=Math.sin(dlon1Q * .5);
  final double a=slat * slat + slon * slon * clat1* clatQ;
  final double angDist1Q=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));
  final double sdlon12=Math.sin(dlon12), cdlon12=MathUtil.sinToCos(dlon12,sdlon12);
  final double sdlon1Q=Math.sin(dlon1Q), cdlon1Q=MathUtil.sinToCos(dlon1Q,sdlon1Q);
  final double yE=sdlon12 * clat2;
  final double yQ=sdlon1Q * clatQ;
  final double xE=clat1 * slat2 - slat1 * clat2 * cdlon12;
  final double xQ=clat1 * slatQ - slat1 * clatQ * cdlon1Q;
  final double crs12=Math.atan2(yE,xE);
  final double crs1Q=Math.atan2(yQ,xQ);
  return Math.asin(Math.sin(angDist1Q) * Math.sin(crs1Q - crs12));
}

public String chooseServerAlias(String keyType,Principal[] issuers,Socket socket){
  return defaultX509KM.chooseServerAlias(keyType,issuers,socket);
}

public static double pdf(double x,double shape,double scale,double factor){
  if (x <= 0)   return 0.0;
  final double a=Math.exp(shape * Math.log(scale) - (shape + 1) * Math.log(x) - (scale / x) - GammaFunction.lnGamma(shape));
  return factor * a;
}

public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer C_Charge_ID=(Integer)value;
  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return "";
  String sql="SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?";
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,C_Charge_ID.intValue());
    rs=pstmt.executeQuery();
    if (rs.next()) {
      mTab.setValue("PriceEntered",rs.getBigDecimal(1));
    }
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
    return e.getLocalizedMessage();
  }
 finally {
    DB.close(rs,pstmt);
    rs=null;
    pstmt=null;
  }
  return tax(ctx,WindowNo,mTab,mField,value);
}

protected Array<Actor> parse(){
  actors=GdxArrays.newArray(Actor.class);
  invokePreListeners(actors);
  final StringBuilder builder=new StringBuilder();
  while (templateReader.hasNextCharacter()) {
    final char character=templateReader.nextCharacter();
    if (character == syntax.getArgumentOpening()) {
      processArgument();
    }
 else     if (character == syntax.getTagOpening()) {
      if (isNextCharacterCommentOpening()) {
        processComment();
        continue;
      }
      if (currentParentTag != null) {
        currentParentTag.handleDataBetweenTags(builder);
      }
      Strings.clearBuilder(builder);
      processTag(builder);
    }
 else {
      builder.append(character);
    }
  }
  if (currentParentTag != null) {
    throwError('"' + currentParentTag.getTagName() + "\" tag was never closed.");
  }
  invokePortListeners(actors);
  return actors;
}

public void testABandCBbrokerNetwork() throws Exception {
  bridgeBrokers("BrokerA","BrokerB");
  bridgeBrokers("BrokerC","BrokerB");
  startAllBrokers();
  Destination dest=createDestination("TEST.FOO",true);
  MessageConsumer clientA=createConsumer("BrokerA",dest);
  MessageConsumer clientB=createConsumer("BrokerB",dest);
  MessageConsumer clientC=createConsumer("BrokerC",dest);
  Thread.sleep(2000);
  sendMessages("BrokerA",dest,MESSAGE_COUNT);
  sendMessages("BrokerB",dest,MESSAGE_COUNT);
  sendMessages("BrokerC",dest,MESSAGE_COUNT);
  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);
  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);
  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);
  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);
  msgsC.waitForMessagesToArrive(MESSAGE_COUNT);
  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());
  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());
  assertEquals(MESSAGE_COUNT,msgsC.getMessageCount());
}

public void flush() throws IOException {
  WspUtil.writeUint8(os_,0x01);
  writePublicIdentifier(os_,publicID_);
  WspUtil.writeUintvar(os_,WapConstants.MIB_ENUM_UTF_8);
  writeStringTable(os_);
  wbxmlBody_.close();
  wbxmlBody_.writeTo(os_);
  os_.flush();
}

public static void discard(){
  current.remove();
}

private Token toASIToken(ILeafNode leaf){
  if (leaf.isHidden()) {
    return newSemicolonToken(leaf);
  }
 else {
    if (!leafNodes.hasNext()) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      int semicolonTokenType=tokenTypeMapper.getInternalTokenType(semicolon);
      if (tokenType == semicolonTokenType) {
        return new CommonToken(semicolonTokenType,leaf.getText());
      }
      if (leaf.getTotalEndOffset() == endOffset) {
        leafNodes=Iterators.emptyIterator();
        return new CommonToken(tokenType,leaf.getText());
      }
      next=new CommonToken(semicolonTokenType,leaf.getText());
      return new CommonToken(tokenType,leaf.getText());
    }
 else     if (leaf.getGrammarElement() == rightCurlyInBlock || leaf.getGrammarElement() == rightCurlyInArrowExpression) {
      int tokenType=tokenTypeMapper.getInternalTokenType(leaf);
      next=new CommonToken(tokenType);
      return new CommonToken(tokenTypeMapper.getInternalTokenType(semicolon),leaf.getText());
    }
 else {
      return newSemicolonToken(leaf);
    }
  }
}

@Override public PacketBuffer write(PacketBuffer buf){
  values.forEach(null);
  return buf;
}

public final void registerFileType(@NotNull FileType type,@NonNls @Nullable String... defaultAssociatedExtensions){
  List<FileNameMatcher> matchers=new ArrayList<FileNameMatcher>();
  if (defaultAssociatedExtensions != null) {
    for (    String extension : defaultAssociatedExtensions) {
      matchers.add(new ExtensionFileNameMatcher(extension));
    }
  }
  registerFileType(type,matchers);
}

public int parseInt(String localeFormattedInteger){
  return Integer.parseInt(localeFormattedInteger);
}

public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {
  Document doc=XMLUtils.toDOMDocument(xml,debug);
  Element root=doc.getDocumentElement();
  return new RequestSecurityTokenResponse(root);
}

@Override public void requestResources(SamzaResourceRequest resourceRequest){
  final int DEFAULT_PRIORITY=0;
  log.info("Requesting resources on  " + resourceRequest.getPreferredHost() + " for container "+ resourceRequest.getContainerID());
  int memoryMb=resourceRequest.getMemoryMB();
  int cpuCores=resourceRequest.getNumCores();
  String containerLabel=yarnConfig.getContainerLabel();
  String preferredHost=resourceRequest.getPreferredHost();
  Resource capability=Resource.newInstance(memoryMb,cpuCores);
  Priority priority=Priority.newInstance(DEFAULT_PRIORITY);
  AMRMClient.ContainerRequest issuedRequest;
  if (preferredHost.equals("ANY_HOST")) {
    log.info("Making a request for ANY_HOST " + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,null,null,priority,true,containerLabel);
  }
 else {
    log.info("Making a preferred host request on " + preferredHost);
    issuedRequest=new AMRMClient.ContainerRequest(capability,new String[]{preferredHost},null,priority,true,containerLabel);
  }
synchronized (lock) {
    requestsMap.put(resourceRequest,issuedRequest);
    amClient.addContainerRequest(issuedRequest);
  }
}

private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){
  int playerLevel=player.getLevel();
  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();
  for (  ExtractedItemsCollection collection : itemsCollections) {
    if (collection.getMinLevel() > playerLevel) {
      continue;
    }
    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {
      continue;
    }
    result.add(collection);
  }
  return result;
}

private String printDFormat(String sx){
  int nLeadingZeros=0;
  int nBlanks=0, n=0;
  int i=0;
  final int jFirst;
  final boolean neg=sx.charAt(0) == '-';
  if (sx.equals("0") && precisionSet && precision == 0) {
    sx="";
  }
  if (!neg) {
    if (precisionSet && sx.length() < precision) {
      nLeadingZeros=precision - sx.length();
    }
  }
 else {
    if (precisionSet && (sx.length() - 1) < precision) {
      nLeadingZeros=precision - sx.length() + 1;
    }
  }
  if (nLeadingZeros < 0) {
    nLeadingZeros=0;
  }
  if (fieldWidthSet) {
    nBlanks=fieldWidth - nLeadingZeros - sx.length();
    if (!neg && (leadingSign || leadingSpace)) {
      nBlanks--;
    }
  }
  if (nBlanks < 0) {
    nBlanks=0;
  }
  if (leadingSign) {
    n++;
  }
 else   if (leadingSpace) {
    n++;
  }
  n+=nBlanks;
  n+=nLeadingZeros;
  n+=sx.length();
  final char[] ca=new char[n];
  if (leftJustify) {
    if (neg) {
      ca[i++]='-';
    }
 else     if (leadingSign) {
      ca[i++]='+';
    }
 else     if (leadingSpace) {
      ca[i++]=' ';
    }
    final char[] csx=sx.toCharArray();
    jFirst=neg ? 1 : 0;
    for (int j=0; j < nLeadingZeros; i++, j++) {
      ca[i]='0';
    }
    for (int j=jFirst; j < csx.length; j++, i++) {
      ca[i]=csx[j];
    }
    for (int j=0; j < nBlanks; i++, j++) {
      ca[i]=' ';
    }
  }
 else {
    if (!leadingZeros) {
      for (i=0; i < nBlanks; i++) {
        ca[i]=' ';
      }
      if (neg) {
        ca[i++]='-';
      }
 else       if (leadingSign) {
        ca[i++]='+';
      }
 else       if (leadingSpace) {
        ca[i++]=' ';
      }
    }
 else {
      if (neg) {
        ca[i++]='-';
      }
 else       if (leadingSign) {
        ca[i++]='+';
      }
 else       if (leadingSpace) {
        ca[i++]=' ';
      }
      for (int j=0; j < nBlanks; j++, i++) {
        ca[i]='0';
      }
    }
    for (int j=0; j < nLeadingZeros; j++, i++) {
      ca[i]='0';
    }
    final char[] csx=sx.toCharArray();
    jFirst=neg ? 1 : 0;
    for (int j=jFirst; j < csx.length; j++, i++) {
      ca[i]=csx[j];
    }
  }
  return new String(ca);
}

private void drawHost(Graphics2D g2){
  Coord loc=node.getLocation();
  if (drawCoverage && node.isRadioActive()) {
    ArrayList<NetworkInterface> interfaces=new ArrayList<NetworkInterface>();
    interfaces.addAll(node.getInterfaces());
    for (    NetworkInterface ni : interfaces) {
      double range=ni.getTransmitRange();
      Ellipse2D.Double coverage;
      coverage=new Ellipse2D.Double(scale(loc.getX() - range),scale(loc.getY() - range),scale(range * 2),scale(range * 2));
      g2.setColor(rangeColor);
      g2.draw(coverage);
    }
  }
  if (drawConnections) {
    g2.setColor(conColor);
    Coord c1=node.getLocation();
    ArrayList<Connection> conList=new ArrayList<Connection>();
    conList.addAll(node.getConnections());
    for (    Connection c : conList) {
      DTNHost otherNode=c.getOtherNode(node);
      Coord c2;
      if (otherNode == null) {
        continue;
      }
      c2=otherNode.getLocation();
      g2.drawLine(scale(c1.getX()),scale(c1.getY()),scale(c2.getX()),scale(c2.getY()));
    }
  }
  g2.setColor(hostColor);
  g2.drawRect(scale(loc.getX() - 1),scale(loc.getY() - 1),scale(2),scale(2));
  if (isHighlighted()) {
    g2.setColor(highlightedNodeColor);
    g2.fillRect(scale(loc.getX()) - 3,scale(loc.getY()) - 3,6,6);
  }
  if (drawNodeName) {
    g2.setColor(hostNameColor);
    g2.drawString(node.toString(),scale(loc.getX()),scale(loc.getY()));
  }
}

public static int binarySearchFloor(long[] a,long key,boolean inclusive,boolean stayInBounds){
  int index=Arrays.binarySearch(a,key);
  index=index < 0 ? -(index + 2) : (inclusive ? index : (index - 1));
  return stayInBounds ? Math.max(0,index) : index;
}

public boolean add(symbol sym) throws internal_error {
  Object previous;
  not_null(sym);
  previous=_all.put(sym.name(),sym);
  return previous == null;
}

protected static final String addEscapes(String str){
  StringBuffer retval=new StringBuffer();
  char ch;
  for (int i=0; i < str.length(); i++) {
switch (str.charAt(i)) {
case 0:
      continue;
case '\b':
    retval.append("\\b");
  continue;
case '\t':
retval.append("\\t");
continue;
case '\n':
retval.append("\\n");
continue;
case '\f':
retval.append("\\f");
continue;
case '\r':
retval.append("\\r");
continue;
case '\"':
retval.append("\\\"");
continue;
case '\'':
retval.append("\\\'");
continue;
case '\\':
retval.append("\\\\");
continue;
default :
if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {
String s="0000" + Integer.toString(ch,16);
retval.append("\\u" + s.substring(s.length() - 4,s.length()));
}
 else {
retval.append(ch);
}
continue;
}
}
return retval.toString();
}

public final int size(){
  if (GWT.isScript()) {
    return jsArray.size();
  }
 else {
    return javaArray.size();
  }
}

public boolean intersects(final PlanetModel planetModel,final Plane q,final GeoPoint[] notablePoints,final GeoPoint[] moreNotablePoints,final Membership[] bounds,final Membership... moreBounds){
  if (isNumericallyIdentical(q)) {
    for (    GeoPoint p : notablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    for (    GeoPoint p : moreNotablePoints) {
      if (meetsAllBounds(p,bounds,moreBounds)) {
        return true;
      }
    }
    return false;
  }
  final double lineVectorX=y * q.z - z * q.y;
  final double lineVectorY=z * q.x - x * q.z;
  final double lineVectorZ=x * q.y - y * q.x;
  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {
    return false;
  }
  double x0;
  double y0;
  double z0;
  final double denomYZ=this.y * q.z - this.z * q.y;
  final double denomXZ=this.x * q.z - this.z * q.x;
  final double denomXY=this.x * q.y - this.y * q.x;
  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {
    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomYZ;
    x0=0.0;
    y0=(-this.D * q.z - this.z * -q.D) * denom;
    z0=(this.y * -q.D + this.D * q.y) * denom;
  }
 else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {
    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXZ;
    x0=(-this.D * q.z - this.z * -q.D) * denom;
    y0=0.0;
    z0=(this.x * -q.D + this.D * q.x) * denom;
  }
 else {
    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {
      return false;
    }
    final double denom=1.0 / denomXY;
    x0=(-this.D * q.y - this.y * -q.D) * denom;
    y0=(this.x * -q.D + this.D * q.x) * denom;
    z0=0.0;
  }
  final double A=lineVectorX * lineVectorX * planetModel.inverseAbSquared + lineVectorY * lineVectorY * planetModel.inverseAbSquared + lineVectorZ * lineVectorZ * planetModel.inverseCSquared;
  final double B=2.0 * (lineVectorX * x0 * planetModel.inverseAbSquared + lineVectorY * y0 * planetModel.inverseAbSquared + lineVectorZ * z0 * planetModel.inverseCSquared);
  final double C=x0 * x0 * planetModel.inverseAbSquared + y0 * y0 * planetModel.inverseAbSquared + z0 * z0 * planetModel.inverseCSquared - 1.0;
  final double BsquaredMinus=B * B - 4.0 * A * C;
  if (Math.abs(BsquaredMinus) < MINIMUM_RESOLUTION_SQUARED) {
    final double inverse2A=1.0 / (2.0 * A);
    final double t=-B * inverse2A;
    final double pointX=lineVectorX * t + x0;
    final double pointY=lineVectorY * t + y0;
    final double pointZ=lineVectorZ * t + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(pointX,pointY,pointZ)) {
        return false;
      }
    }
    return true;
  }
 else   if (BsquaredMinus > 0.0) {
    final double inverse2A=1.0 / (2.0 * A);
    final double sqrtTerm=Math.sqrt(BsquaredMinus);
    final double t1=(-B + sqrtTerm) * inverse2A;
    final double t2=(-B - sqrtTerm) * inverse2A;
    final double point1X=lineVectorX * t1 + x0;
    final double point1Y=lineVectorY * t1 + y0;
    final double point1Z=lineVectorZ * t1 + z0;
    boolean point1Valid=true;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point1X,point1Y,point1Z)) {
        point1Valid=false;
        break;
      }
    }
    if (point1Valid) {
      for (      final Membership bound : moreBounds) {
        if (!bound.isWithin(point1X,point1Y,point1Z)) {
          point1Valid=false;
          break;
        }
      }
    }
    if (point1Valid) {
      return true;
    }
    final double point2X=lineVectorX * t2 + x0;
    final double point2Y=lineVectorY * t2 + y0;
    final double point2Z=lineVectorZ * t2 + z0;
    for (    final Membership bound : bounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    for (    final Membership bound : moreBounds) {
      if (!bound.isWithin(point2X,point2Y,point2Z)) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}

public static long longFromBase64(String value){
  int pos=0;
  long longVal=base64Values[value.charAt(pos++)];
  int len=value.length();
  while (pos < len) {
    longVal<<=6;
    longVal|=base64Values[value.charAt(pos++)];
  }
  return longVal;
}

public List<LocalTime> bottom(int n){
  List<LocalTime> bottom=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values);
  for (int i=0; i < n && i < values.length; i++) {
    bottom.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return bottom;
}

public double SumOutlinkAuthorityScore(Page page){
  List<String> outLinks=page.getOutlinks();
  double authScore=0;
  for (int i=0; i < outLinks.size(); i++) {
    Page outLink=pTable.get(outLinks.get(i));
    if (outLink != null) {
      authScore+=outLink.authority;
    }
  }
  return authScore;
}

public synchronized void end(){
  graphicsToBeDrawn.close();
  if (currentGraphics != null) {
    graphicsDrawn.append(currentGraphics);
  }
  graphicsDrawn.closeWhenEmpty();
  if (printerJobThread != null && printerJobThread.isAlive()) {
    try {
      printerJobThread.join();
    }
 catch (    InterruptedException e) {
    }
  }
}

public List<FileStatus> browse(String filePath) throws Exception {
  LOG.info("HDFS File Path   :  " + filePath + "   and EndPoint  : "+ hdfsEndPoint);
  FileSystem hdfsFileSystem=null;
  FileStatus[] listStatus;
  try {
    Configuration config=createConfig();
    hdfsFileSystem=getFileSystem(config);
    Path path=new Path(filePath);
    listStatus=hdfsFileSystem.listStatus(path);
  }
 catch (  Exception ex) {
    LOG.error(" Exception when browsing files for the path " + filePath,ex.getMessage());
    throw new Exception(" Exception When browsing Files in HDFS .. Message :  " + ex.getMessage());
  }
 finally {
    if (hdfsFileSystem != null)     hdfsFileSystem.close();
  }
  return Arrays.asList(listStatus);
}

public void append(CharSequence s){
  text.append(s);
}

public EipModelWizardInitialObjectCreationPage(String pageId){
  super(pageId);
}

private void unwrapData() throws IgniteCheckedException, SSLException {
  if (log.isDebugEnabled())   log.debug("Unwrapping received data.");
  inNetBuf.flip();
  SSLEngineResult res=unwrap0();
  inNetBuf.compact();
  checkStatus(res);
  renegotiateIfNeeded(res);
}

public boolean isAttributeSpecified(int attributeHandle){
  int type=getNodeType(attributeHandle);
  if (DTM.ATTRIBUTE_NODE == type) {
    Attr attr=(Attr)getNode(attributeHandle);
    return attr.getSpecified();
  }
  return false;
}

private static void checkPermission() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission("CurrentTime.setProvider"));
  }
}

private void storePassword(String password){
  if (isStore && sharedState != null) {
    sharedState.put(getPwdKey(),password);
  }
}

public void or(Criteria criteria){
  oredCriteria.add(criteria);
}

void deleteChild(PolicyNode childNode){
  if (isImmutable) {
    throw new IllegalStateException("PolicyNode is immutable");
  }
  mChildren.remove(childNode);
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

public void testFloatValuePlusZero(){
  String a="123809648392384754573567356745735.63567890295784902768787678287E-400";
  BigDecimal aNumber=new BigDecimal(a);
  int zero=0;
  float result=aNumber.floatValue();
  assertTrue("incorrect value",Float.floatToIntBits(result) == zero);
}

public ExternalProcessResult awaitTerminationAndResult(int timeoutMs,boolean destroyOnError) throws InterruptedException, TimeoutException, OperationCancellation, IOException {
  awaitTermination(timeoutMs,destroyOnError);
  return new ExternalProcessResult(process.exitValue(),getStdOutBytes(),getStdErrBytes());
}

public void refreshInheritedMethods(Set modifiedSuperExpandos){
  for (Iterator i=modifiedSuperExpandos.iterator(); i.hasNext(); ) {
    ExpandoMetaClass superExpando=(ExpandoMetaClass)i.next();
    if (superExpando != this) {
      refreshInheritedMethods(superExpando);
    }
  }
}

public static List<Fragment> parsePlaceholder(String parseString) throws PlaceholderParseException {
  List<Fragment> result=new ArrayList<Fragment>();
  int currOutputIndex=0;
  int currSearchIndex=0;
  while (true) {
    if (currSearchIndex == parseString.length()) {
      break;
    }
    int startIndex=parseString.indexOf("${",currSearchIndex);
    if (startIndex == -1) {
      if (currOutputIndex < parseString.length()) {
        String endString=parseString.substring(currOutputIndex,parseString.length());
        TextFragment textFragment=new TextFragment(endString);
        result.add(textFragment);
      }
      break;
    }
    if (startIndex > 0) {
      String textSoFar=parseString.substring(currOutputIndex,startIndex);
      if (textSoFar.length() != 0) {
        result.add(new TextFragment(textSoFar));
      }
    }
    if ((startIndex > 0) && (parseString.charAt(startIndex - 1) == '$')) {
      currOutputIndex=startIndex + 1;
      currSearchIndex=startIndex + 1;
      continue;
    }
    int endIndex=parseString.indexOf('}',startIndex);
    if (endIndex == -1) {
      throw new PlaceholderParseException("Syntax error in property or variable: '" + parseString.substring(startIndex,parseString.length()) + "'");
    }
    String between=parseString.substring(startIndex + 2,endIndex);
    ParameterFragment parameterFragment=new ParameterFragment(between);
    result.add(parameterFragment);
    currOutputIndex=endIndex + 1;
    currSearchIndex=endIndex;
  }
  LinkedList<Fragment> fragments=new LinkedList<Fragment>();
  fragments.add(result.get(0));
  for (int i=1; i < result.size(); i++) {
    Fragment fragment=result.get(i);
    if (!(result.get(i) instanceof TextFragment)) {
      fragments.add(fragment);
      continue;
    }
    if (!(fragments.getLast() instanceof TextFragment)) {
      fragments.add(fragment);
      continue;
    }
    TextFragment textFragment=(TextFragment)fragments.getLast();
    fragments.removeLast();
    fragments.add(new TextFragment(textFragment.getValue() + fragment.getValue()));
  }
  return fragments;
}

@Override protected void failed(){
  relation.setCanceled(true);
  super.failed();
}

private void routeSingleGetRequest(RequestAndResponse requestAndResponse,String uri) throws IOException, ServletException {
  if (uri.startsWith("/notebooks/")) {
    handleHtmlShowNotebooks(requestAndResponse);
  }
 else   if (uri.startsWith("/quotations/")) {
    handleHtmlShowQuotations(requestAndResponse);
  }
 else   if (uri.startsWith("/sources/")) {
    handleHtmlShowSources(requestAndResponse);
  }
 else   if (uri.startsWith("/source/")) {
    handleHtmlShowSource(requestAndResponse);
  }
 else   if (uri.startsWith("/notebook/")) {
    handleHtmlShowNotebook(requestAndResponse);
  }
 else   if (uri.startsWith("/search/")) {
    handleHtmlSearch(requestAndResponse);
  }
 else   if (uri.equals("/help/")) {
    handleHtmlBasicHelp(requestAndResponse);
  }
 else   if (uri.equals("/advancedHelp/")) {
    handleHtmlAdvancedHelp(requestAndResponse);
  }
 else   if (uri.startsWith("/help/")) {
    handleHtmlHelp(requestAndResponse);
  }
 else   if (uri.equals("/backup/")) {
    handleHtmlUserBackupForm(requestAndResponse);
  }
 else   if (uri.equals("/restore/")) {
    handleHtmlUserRestoreForm(requestAndResponse);
  }
 else   if (uri.startsWith("/account/")) {
    handleHtmlShowAccount(requestAndResponse);
  }
 else   if (uri.startsWith("/accounts/")) {
    handleHtmlShowAccounts(requestAndResponse);
  }
 else   if (uri.equals("/shutdown/")) {
    handleHtmlShutdownForm(requestAndResponse);
  }
 else   if (uri.equals("/clear/")) {
    handleHtmlClearForm(requestAndResponse);
  }
 else   if (uri.equals("/onlineBackup/")) {
    handleHtmlOnlineBackupForm(requestAndResponse);
  }
 else   if (uri.equals("/checkForErrors/")) {
    handleHtmlCheckForErrorsForm(requestAndResponse);
  }
 else   if (uri.equals("/backups/")) {
    handleHtmlShowDBBackups(requestAndResponse);
  }
 else   if (uri.equals("/offlineBackup/")) {
    handleHtmlOfflineDbBackupForm(requestAndResponse);
  }
 else   if (uri.equals("/noteJson/")) {
    handleJsonShowEntry(requestAndResponse);
  }
 else   if (uri.equals("/noteParentJson/")) {
    handleJsonShowEntryParent(requestAndResponse);
  }
 else   if (uri.equals("/noteChildrenJson/")) {
    handleJsonShowEntryChildren(requestAndResponse);
  }
 else   if (uri.equals("/searchNotesJson/")) {
    handleJsonSearchNotes(requestAndResponse);
  }
 else   if (uri.equals("/newNotebook/")) {
    handleHtmlNewNotebookForm(requestAndResponse);
  }
 else   if (uri.equals("/nothing/")) {
    handleHtmlNothing(requestAndResponse);
  }
 else   if (uri.equals("/couldNotCreateNote/")) {
    handleHtmlCouldNotCreateNote(requestAndResponse);
  }
 else   if (uri.equals("/restoreBackupCommand/")) {
    handleHtmlShowRestoreDbBackupCommand(requestAndResponse);
  }
 else   if (uri.equals("/signedOut/")) {
    handleHtmlShowSignedOut(requestAndResponse);
  }
 else   if (uri.startsWith("/changePassword/")) {
    handleHtmlChangePassword(requestAndResponse);
  }
 else   if (uri.startsWith("/changeAccount/")) {
    handleHtmlChangeAccount(requestAndResponse);
  }
 else   if (uri.startsWith("/closeAccount/")) {
    handleHtmlCloseAccount(requestAndResponse);
  }
 else   if (uri.equals("/isSignedIn/")) {
    handleJsonIsSignedIn(requestAndResponse);
  }
 else   if (uri.equals("/restoreFrame/")) {
    handleHtmlUserRestoreFrame(requestAndResponse);
  }
 else {
    returnHtml404(requestAndResponse);
  }
}

private void changeAnnotationDocumentState(SourceDocument aSourceDocument,User aUser,AnnotationDocumentStateTransition aAnnotationDocumentStateTransition){
  AnnotationDocument annotationDocument=repository.getAnnotationDocument(aSourceDocument,aUser);
  annotationDocument.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTransition));
  try {
    repository.createAnnotationDocument(annotationDocument);
  }
 catch (  IOException e) {
    LOG.info("Unable to get the LOG file");
  }
}

boolean removeEdge(SparseEdge e){
  boolean removedEdge=edges.remove(e);
  boolean removedNeighbour=neighbours.remove(e.getOpposite(this));
  if (removedEdge && removedNeighbour)   return true;
 else   if (!removedEdge && !removedNeighbour)   return false;
 else   throw new RuntimeException("Graph connectivity appears to be inconsitent!");
}

protected void longKeyPress(int keyCode){
}

public boolean hasDescendant(Pattern pattern){
  Queue<BNode> nodesToProcess=new LinkedList<BNode>();
  nodesToProcess.add(this);
  while (!nodesToProcess.isEmpty()) {
    BNode currentNode=nodesToProcess.poll();
    for (    BNode descendantNode : currentNode.getOutputNodes()) {
      Matcher matcher=pattern.matcher(descendantNode.getId());
      if (matcher.matches()) {
        return true;
      }
      if (!nodesToProcess.contains(descendantNode)) {
        nodesToProcess.add(descendantNode);
      }
    }
  }
  return false;
}

public int fileWrite(long handle,byte[] buffer,int offset,int count){
  if ((offset | count) < 0 || offset > buffer.length || buffer.length - offset < count) {
    throw new ArrayIndexOutOfBoundsException("length=" + buffer.length + "; regionStart="+ offset+ "; regionLength="+ count);
  }
  if (count == 0) {
    return 0;
  }
  byte[] data=buffer;
  if (offset > 0) {
    data=new byte[count];
    System.arraycopy(buffer,offset,data,0,count);
  }
  IntOut bytesWrittenOut=new IntOut();
  try {
    checkResult(LibIMobileDevice.afc_file_write(getRef(),handle,data,count,bytesWrittenOut));
    int bytesWritten=bytesWrittenOut.getValue();
    return bytesWritten;
  }
  finally {
    bytesWrittenOut.delete();
  }
}

private static void generateFiles(){
  String[] classNames;
  ResourceBundle rules, info;
  info=ResourceBundle.getBundle("sun.text.resources.BreakIteratorInfo",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  classNames=info.getStringArray("BreakIteratorClasses");
  rules=ResourceBundle.getBundle("sun.text.resources.BreakIteratorRules",new Locale(language,country,valiant),BreakIteratorRBControl.INSTANCE);
  if (info.containsKey("CharacterData")) {
    generateDataFile(info.getString("CharacterData"),rules.getString("CharacterBreakRules"),classNames[0]);
  }
  if (info.containsKey("WordData")) {
    generateDataFile(info.getString("WordData"),rules.getString("WordBreakRules"),classNames[1]);
  }
  if (info.containsKey("LineData")) {
    generateDataFile(info.getString("LineData"),rules.getString("LineBreakRules"),classNames[2]);
  }
  if (info.containsKey("SentenceData")) {
    generateDataFile(info.getString("SentenceData"),rules.getString("SentenceBreakRules"),classNames[3]);
  }
}

public static boolean isCglibProxy(Object object){
  return ClassUtils.isCglibProxyClass(object.getClass());
}

private float[] calculateImageIndents(){
  mTempMatrix.reset();
  mTempMatrix.setRotate(-getCurrentAngle());
  float[] unrotatedImageCorners=Arrays.copyOf(mCurrentImageCorners,mCurrentImageCorners.length);
  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);
  mTempMatrix.mapPoints(unrotatedImageCorners);
  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);
  RectF unrotatedImageRect=RectUtils.trapToRect(unrotatedImageCorners);
  RectF unrotatedCropRect=RectUtils.trapToRect(unrotatedCropBoundsCorners);
  float deltaLeft=unrotatedImageRect.left - unrotatedCropRect.left;
  float deltaTop=unrotatedImageRect.top - unrotatedCropRect.top;
  float deltaRight=unrotatedImageRect.right - unrotatedCropRect.right;
  float deltaBottom=unrotatedImageRect.bottom - unrotatedCropRect.bottom;
  float indents[]=new float[4];
  indents[0]=(deltaLeft > 0) ? deltaLeft : 0;
  indents[1]=(deltaTop > 0) ? deltaTop : 0;
  indents[2]=(deltaRight < 0) ? deltaRight : 0;
  indents[3]=(deltaBottom < 0) ? deltaBottom : 0;
  mTempMatrix.reset();
  mTempMatrix.setRotate(getCurrentAngle());
  mTempMatrix.mapPoints(indents);
  return indents;
}

public void testBug10630() throws Exception {
  Connection conn2=null;
  Statement stmt2=null;
  try {
    conn2=getConnectionWithProps((Properties)null);
    stmt2=conn2.createStatement();
    conn2.close();
    stmt2.getWarnings();
    fail("Should've caught an exception here");
  }
 catch (  SQLException sqlEx) {
    assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());
  }
 finally {
    if (stmt2 != null) {
      stmt2.close();
    }
    if (conn2 != null) {
      conn2.close();
    }
  }
}

public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}

public void toFront(final WorkflowAnnotation anno){
  if (anno == null) {
    throw new IllegalArgumentException("anno must not be null!");
  }
synchronized (lock) {
    if (annotationsDrawOrder.remove(anno)) {
      annotationsDrawOrder.add(anno);
    }
    if (annotationsEventOrder.remove(anno)) {
      annotationsEventOrder.add(0,anno);
    }
  }
}

public synchronized void addFrame(final Image image,final long frameDuration){
  totalDuration+=frameDuration;
  frames.add(new AnimFrame(image,totalDuration));
}

public static String printCodePointAsString(int codePoint){
  StringBuilder builder=new StringBuilder(12);
  builder.append('"');
  try {
    printStringCodePoint(builder,codePoint);
  }
 catch (  IOException e) {
    throw new Error(e);
  }
  builder.append('"');
  return builder.toString();
}

private void cleanupMinidumpFile(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {
    Log.w(TAG,"Unable to mark " + mFileToUpload + " as uploaded.");
    if (!mFileToUpload.delete()) {
      Log.w(TAG,"Cannot delete " + mFileToUpload);
    }
  }
}

boolean closeOutbound() throws SSLException {
  if (sslEngine == null || sslEngine.isOutboundDone()) {
    return false;
  }
  sslEngine.closeOutbound();
  createOutNetBuffer(0);
  SSLEngineResult result;
  for (; ; ) {
    result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());
    if (result.getStatus() == SSLEngineResult.Status.BUFFER_OVERFLOW) {
      outNetBuffer.capacity(outNetBuffer.capacity() << 1);
      outNetBuffer.limit(outNetBuffer.capacity());
    }
 else {
      break;
    }
  }
  if (result.getStatus() != SSLEngineResult.Status.CLOSED) {
    throw new SSLException("Improper close state: " + result);
  }
  outNetBuffer.flip();
  return true;
}

@Nullable private static Bitmap extractThumbnail(Bitmap source,int width,int height){
  return extractThumbnail(source,width,height,OPTIONS_NONE);
}

private void writePkgInfo() throws BuildException {
  File pkgInfo=new File(mContentsDir,"PkgInfo");
  PrintWriter writer=null;
  try {
    writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo)));
    writer.print(bundleProperties.getCFBundlePackageType());
    writer.println(bundleProperties.getCFBundleSignature());
    writer.flush();
  }
 catch (  IOException ex) {
    throw new BuildException("Cannot create PkgInfo file: " + ex);
  }
 finally {
    mFileUtils.close(writer);
  }
}

public EventBean[] toArray(){
  if (firstEvent == null) {
    return new EventBean[0];
  }
  if (additionalEvents == null) {
    return new EventBean[]{firstEvent};
  }
  EventBean[] events=new EventBean[1 + additionalEvents.size()];
  events[0]=firstEvent;
  int count=1;
  for (  EventBean theEvent : additionalEvents) {
    events[count]=theEvent;
    count++;
  }
  return events;
}

private byte[] decode(DerInputStream in) throws IOException {
  DerValue val=in.getDerValue();
  byte[] derEncoding=val.toByteArray();
  derEncoding[0]=DerValue.tag_SetOf;
  DerInputStream derIn=new DerInputStream(derEncoding);
  DerValue[] derVals=derIn.getSet(3,true);
  PKCS9Attribute attrib;
  ObjectIdentifier oid;
  boolean reuseEncoding=true;
  for (int i=0; i < derVals.length; i++) {
    try {
      attrib=new PKCS9Attribute(derVals[i]);
    }
 catch (    ParsingException e) {
      if (ignoreUnsupportedAttributes) {
        reuseEncoding=false;
        continue;
      }
 else {
        throw e;
      }
    }
    oid=attrib.getOID();
    if (attributes.get(oid) != null)     throw new IOException("Duplicate PKCS9 attribute: " + oid);
    if (permittedAttributes != null && !permittedAttributes.containsKey(oid))     throw new IOException("Attribute " + oid + " not permitted in this attribute set");
    attributes.put(oid,attrib);
  }
  return reuseEncoding ? derEncoding : generateDerEncoding();
}

StringVector processPREFIX_LIST(StylesheetHandler handler,String uri,String name,String rawName,String value) throws org.xml.sax.SAXException {
  StringTokenizer tokenizer=new StringTokenizer(value," \t\n\r\f");
  int nStrings=tokenizer.countTokens();
  StringVector strings=new StringVector(nStrings);
  for (int i=0; i < nStrings; i++) {
    String prefix=tokenizer.nextToken();
    String url=handler.getNamespaceForPrefix(prefix);
    if (prefix.equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null)     strings.addElement(prefix);
 else     throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX,new Object[]{prefix}));
  }
  return strings;
}

@Override public CategoricalResults clone(){
  CategoricalResults copy=new CategoricalResults(n);
  copy.probabilities=Arrays.copyOf(probabilities,probabilities.length);
  return copy;
}

private static StringBuilder dump(StringBuilder _lbuffer,long value){
  for (int j=0; j < 8; j++) {
    _lbuffer.append(_hexcodes[(int)(value >> _shifts[j]) & 15]);
  }
  return _lbuffer;
}

private boolean typeSpecialChar(char c){
switch (c) {
case '\t':
    controller.keyPress(KeyEvent.VK_TAB);
  controller.keyRelease(KeyEvent.VK_TAB);
return true;
case '\n':
controller.keyPress(KeyEvent.VK_ENTER);
controller.keyRelease(KeyEvent.VK_ENTER);
return true;
default :
return false;
}
}

protected static boolean eq(Object o1,Object o2){
  return o1 == null ? o2 == null : o1.equals(o2);
}

public static boolean hasMimeType(String mimeType){
  if (mimeType == null || mimeType.isEmpty()) {
    return false;
  }
  return mimeTypeToExtensionMap.containsKey(mimeType);
}

public Iterable<Notification> skip(@Nonnull final Iterable<Notification> notifications,final long startId,final boolean inclusive,final int limitSize){
  Objects.requireNonNull(notifications);
  final int position=indexOf(notifications,startId);
  if (position == -1) {
    return Iterables.limit(notifications,limitSize);
  }
  if (inclusive) {
    return Iterables.limit(Iterables.skip(notifications,position),limitSize);
  }
  return Iterables.limit(Iterables.skip(notifications,position + 1),limitSize);
}

public boolean writeData(PdxWriter writer,Object obj){
  if (isRelevant(obj.getClass())) {
    writeData(writer,obj,getClassInfo(obj.getClass()));
    return true;
  }
  return false;
}

protected final void writeC(ByteBuffer buf,int value){
  buf.put((byte)value);
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public boolean isEmpty(){
  return priorityQueue.isEmpty();
}

public ViterbiPoint(Item item){
  this.item=item;
}

protected void paintContentBorderBottomEdge(Graphics g,int x,int y,int w,int h,boolean drawBroken,Rectangle selRect,boolean isContentBorderPainted){
  if (isContentBorderPainted) {
    g.setColor(darkShadow);
    g.fillRect(x,y + h - 1,w - 1,1);
  }
}

private void emitListAdd(Method method,String fieldName,StringBuilder builder){
  builder.append("    public void ");
  builder.append(getListAdderName(fieldName));
  builder.append("(");
  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));
  builder.append(" v) {\n      ");
  builder.append(getEnsureName(fieldName));
  builder.append("();\n      ");
  builder.append(fieldName);
  builder.append(".add(v);\n");
  builder.append("    }\n\n");
}

public RSAPublicKey parsePEMPublicKey(String pem) throws GeneralSecurityException {
  try {
    byte[] bs=decodeAsciiArmoredPEM(pem);
    ByteBuffer data=ByteBuffer.wrap(bs);
    final ASN1Object ob=asn1Parser.parseASN1(data);
    final List<ASN1Object> seq=asn1ObjectToSequence(ob,2);
    final BigInteger modulus=asn1ObjectToBigInt(seq.get(0));
    final BigInteger exponent=asn1ObjectToBigInt(seq.get(1));
    return createKeyFromModulusAndExponent(modulus,exponent);
  }
 catch (  IllegalArgumentException e) {
    throw new InvalidKeyException();
  }
}

public static <T>ParallelPublisher<T> from(Publisher<? extends T> source,boolean ordered,int parallelism){
  return from(source,ordered,parallelism,Px.bufferSize(),Px.defaultQueueSupplier(Px.bufferSize()));
}

public long next(long startTime,long fromTime,long currentCount){
  if (startTime == 0)   startTime=RecurrenceUtil.now();
  if (fromTime == 0)   fromTime=startTime;
  if (getEndTime() != 0 && getEndTime() <= RecurrenceUtil.now())   return 0;
  Debug.logVerbose("Rule NOT expired by end time.",module);
  if (getCount() != -1 && currentCount >= getCount())   return 0;
  Debug.logVerbose("Rule NOT expired by max count.",module);
  boolean isSeeking=true;
  long nextRuntime=0;
  long seekTime=fromTime;
  int loopProtection=0;
  int maxLoop=(10 * 10 * 10* 10* 10);
  while (isSeeking && loopProtection < maxLoop) {
    Date nextRun=getNextFreq(startTime,seekTime);
    seekTime=nextRun.getTime();
    if (validByRule(nextRun)) {
      isSeeking=false;
      nextRuntime=nextRun.getTime();
    }
    loopProtection++;
  }
  return nextRuntime;
}

public void addToQueue(Var var){
  addToQueue(Collections.singleton(var));
}

public String canonicalize(String simpleURL){
  String resultURL=simpleURL;
  if (simpleURL.startsWith("ftp.")) {
    resultURL="ftp://" + simpleURL;
  }
 else   if (simpleURL.startsWith("gopher.")) {
    resultURL="gopher://" + simpleURL;
  }
 else   if (simpleURL.startsWith("/")) {
    resultURL="file:" + simpleURL;
  }
 else   if (!hasProtocolName(simpleURL)) {
    if (isSimpleHostName(simpleURL)) {
      simpleURL="www." + simpleURL + ".com";
    }
    resultURL="http://" + simpleURL;
  }
  return resultURL;
}

public String read(String filename) throws IOException {
  return ProcFile.readFile(String.format("/proc/%d/%s",pid,filename));
}

private long calculateAnimationDuration(float initialVelocity,float displacement){
  return MathUtils.clamp(Math.round(Math.abs(2000 * displacement / initialVelocity)),MINIMUM_ANIMATION_DURATION_MS,MAXIMUM_ANIMATION_DURATION_MS);
}

@RequestProcessing(value="/member/{userName}/points",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHomePoints(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {
  final JSONObject user=(JSONObject)request.getAttribute(User.USER);
  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();
  context.setRenderer(renderer);
  renderer.setTemplateName("/home/points.ftl");
  final Map<String,Object> dataModel=renderer.getDataModel();
  filler.fillHeaderAndFooter(request,response,dataModel);
  String pageNumStr=request.getParameter("p");
  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {
    pageNumStr="1";
  }
  final int pageNum=Integer.valueOf(pageNumStr);
  final int pageSize=Symphonys.getInt("userHomePointsCnt");
  final int windowSize=Symphonys.getInt("userHomePointsWindowSize");
  fillHomeUser(dataModel,user);
  avatarQueryService.fillUserAvatarURL(user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  final JSONObject userPointsResult=pointtransferQueryService.getUserPoints(user.optString(Keys.OBJECT_ID),pageNum,pageSize);
  final List<JSONObject> userPoints=CollectionUtils.<JSONObject>jsonArrayToList(userPointsResult.optJSONArray(Keys.RESULTS));
  dataModel.put(Common.USER_HOME_POINTS,userPoints);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  if (isLoggedIn) {
    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,user.optString(Keys.OBJECT_ID));
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
  }
  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));
  final int pointsCnt=userPointsResult.optInt(Pagination.PAGINATION_RECORD_COUNT);
  final int pageCount=(int)Math.ceil((double)pointsCnt / (double)pageSize);
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
}

private static double norm(final double[] v){
  double agg=0;
  for (int i=0; i < v.length; i++) {
    agg+=(v[i] * v[i]);
  }
  return Math.sqrt(agg);
}

private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)((float)Math.ceil(result));
}

public void layout(Container container){
  Map<Location,Drawable> comps=getComponentsByLocation(container);
  Drawable north=comps.get(Location.NORTH);
  Drawable northEast=comps.get(Location.NORTH_EAST);
  Drawable east=comps.get(Location.EAST);
  Drawable southEast=comps.get(Location.SOUTH_EAST);
  Drawable south=comps.get(Location.SOUTH);
  Drawable southWest=comps.get(Location.SOUTH_WEST);
  Drawable west=comps.get(Location.WEST);
  Drawable northWest=comps.get(Location.NORTH_WEST);
  Drawable center=comps.get(Location.CENTER);
  double widthWest=getMaxWidth(northWest,west,southWest);
  double widthEast=getMaxWidth(northEast,east,southEast);
  double heightNorth=getMaxHeight(northWest,north,northEast);
  double heightSouth=getMaxHeight(southWest,south,southEast);
  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;
  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;
  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;
  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;
  Rectangle2D bounds=container.getBounds();
  Insets2D insets=container.getInsets();
  if (insets == null) {
    insets=new Insets2D.Double();
  }
  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;
  double xCenter=bounds.getMinX() + insets.getLeft();
  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;
  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;
  double yCenter=bounds.getMinY() + insets.getTop();
  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;
  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);
  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);
  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);
  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());
  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);
  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);
  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);
  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());
  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());
}

void fullyUnlock(){
  takeLock.unlock();
  putLock.unlock();
}

public void add(int i,int data){
  if (_length + 1 > _capacity)   ensureCapacity(_length + 1);
  System.arraycopy(_buffer,i,_buffer,i + 1,_length - i);
  _buffer[i]=(byte)data;
  _length+=1;
}

private double mean(double[] vec){
  double result=0;
  for (int i=0; i < vec.length; i++)   result+=vec[i];
  return result / vec.length;
}

private Sprite(float xPos,float yPos,float xVel,float yVel,Image... sprites){
  if (sprites != null)   spriteFrame=new ImageView(sprites[0]);
  playerStates.addAll(Arrays.asList(sprites));
  spriteFrame.setTranslateX(xPos);
  spriteFrame.setTranslateY(yPos);
  this.xPos=xPos;
  this.yPos=yPos;
  this.xVel=xVel;
  this.yVel=yVel;
}

public void close(){
  out.close();
}

protected static SyncToken createSyncToken(String dateString,@Nullable String uuid){
  try {
    return new SyncToken(DB_DATE_FORMAT.parse(dateString),uuid);
  }
 catch (  ParseException e) {
    throw new RuntimeException(e);
  }
}

private static boolean equalsHandlesNulls(Object a,Object b){
  return a == b || (a != null && a.equals(b));
}

public void init(String flagzDirectory) throws FlagException, EtcdFlagFieldUpdaterException {
  this.directoryPrefix=MoreObjects.firstNonNull(flagzDirectory,directoryFlag.get());
  client=new EtcdClient(uris.toArray(new URI[uris.size()]));
  client.setRetryHandler(retryPolicy);
  initialSetAllFlagz();
}

public static void closeEL(InputStream is){
  try {
    if (is != null)     is.close();
  }
 catch (  Throwable t) {
  }
}

public void testRandom(){
  ExtremityMonitor monitor=new ExtremityMonitor();
  Random random=new Random(42);
  for (int i=0; i < 1000; i++) {
    monitor.update(random.nextDouble());
  }
  assertTrue(monitor.getMin() < 0.1);
  assertTrue(monitor.getMax() < 1.0);
  assertTrue(monitor.getMin() >= 0.0);
  assertTrue(monitor.getMax() > 0.9);
}

public static String replace(String str,char oldChar,String newStr){
  StringBuffer buf=new StringBuffer();
  for (int i=0; i < str.length(); i++) {
    char ch=str.charAt(i);
    if (ch == oldChar) {
      buf.append(newStr);
    }
 else {
      buf.append(ch);
    }
  }
  return buf.toString();
}

@Action(value="/receipts/challan-newform") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){
  setLoginDept();
  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
  try {
    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));
  }
 catch (  ParseException e) {
    LOGGER.error(getText("Error parsing Cut Off Date") + e.getMessage());
  }
  return NEW;
}

public TypeDeclaration canonicalize(){
  List<Type> sts=getSatisfiedTypes();
  if (sts.isEmpty()) {
    return unit.getAnythingDeclaration();
  }
 else   if (sts.size() == 1) {
    Type st=sts.get(0);
    if (st.isExactlyNothing()) {
      return unit.getNothingDeclaration();
    }
  }
  for (  Type st : sts) {
    if (st.isUnion()) {
      List<Type> caseTypes=st.getCaseTypes();
      List<Type> ulist=new ArrayList<Type>(caseTypes.size());
      for (      Type ct : caseTypes) {
        List<Type> ilist=new ArrayList<Type>(sts.size());
        for (        Type pt : sts) {
          if (pt == st) {
            addToIntersection(ilist,ct,unit);
          }
 else {
            addToIntersection(ilist,pt,unit);
          }
        }
        Type it=canonicalIntersection(ilist,unit);
        addToUnion(ulist,it);
      }
      TypeDeclaration result=new UnionType(unit);
      result.setCaseTypes(ulist);
      return result;
    }
  }
  return this;
}

public static void openOtherUri(final String url,final Activity activity){
  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  activity.startActivity(intent);
}

public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader,int timeoutInMs){
  return waitForAllActiveAndLiveReplicas(zkStateReader,null,timeoutInMs);
}

public synchronized void addElement(E object){
  if (elementCount == elementData.length) {
    growByOne();
  }
  elementData[elementCount++]=object;
  modCount++;
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=getImageViewWidth(imageView);
  final float viewHeight=getImageViewHeight(imageView);
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
    if ((int)mBaseRotation % 180 != 0) {
      mTempSrc=new RectF(0,0,drawableHeight,drawableWidth);
    }
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public boolean checkForRp(){
  return NullColumnValueGetter.isNotNullValue(getRpCopyName());
}

ExternalProblem(Process process){
  this(process.getInputStream(),process.getOutputStream());
  RedirectStream.redirect(process.getErrorStream(),System.err);
}

public static List<String> splitPath(File file){
  List<String> output=new ArrayList<>();
  File current=file;
  while (current != null) {
    output.add(current.getName());
    current=current.getParentFile();
  }
  Collections.reverse(output);
  return output;
}

private static StsdData parseStsd(ParsableByteArray stsd,int trackId,long durationUs,int rotationDegrees,String language,boolean isQuickTime){
  stsd.setPosition(Atom.FULL_HEADER_SIZE);
  int numberOfEntries=stsd.readInt();
  StsdData out=new StsdData(numberOfEntries);
  for (int i=0; i < numberOfEntries; i++) {
    int childStartPosition=stsd.getPosition();
    int childAtomSize=stsd.readInt();
    Assertions.checkArgument(childAtomSize > 0,"childAtomSize should be positive");
    int childAtomType=stsd.readInt();
    if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) {
      parseVideoSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,rotationDegrees,out,i);
    }
 else     if (childAtomType == Atom.TYPE_mp4a || childAtomType == Atom.TYPE_enca || childAtomType == Atom.TYPE_ac_3 || childAtomType == Atom.TYPE_ec_3 || childAtomType == Atom.TYPE_dtsc || childAtomType == Atom.TYPE_dtse || childAtomType == Atom.TYPE_dtsh || childAtomType == Atom.TYPE_dtsl || childAtomType == Atom.TYPE_samr || childAtomType == Atom.TYPE_sawb || childAtomType == Atom.TYPE_lpcm || childAtomType == Atom.TYPE_sowt) {
      parseAudioSampleEntry(stsd,childAtomType,childStartPosition,childAtomSize,trackId,durationUs,language,isQuickTime,out,i);
    }
 else     if (childAtomType == Atom.TYPE_TTML) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_tx3g) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TX3G,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_wvtt) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_MP4VTT,MediaFormat.NO_VALUE,durationUs,language);
    }
 else     if (childAtomType == Atom.TYPE_stpp) {
      out.mediaFormat=MediaFormat.createTextFormat(Integer.toString(trackId),MimeTypes.APPLICATION_TTML,MediaFormat.NO_VALUE,durationUs,language,0);
    }
    stsd.setPosition(childStartPosition + childAtomSize);
  }
  return out;
}

protected boolean isCompatible(Taxa taxa,List<Taxon> availableTaxa){
  for (int i=0; i < taxa.getTaxonCount(); i++) {
    Taxon taxon=taxa.getTaxon(i);
    if (!availableTaxa.contains(taxon)) {
      return false;
    }
  }
  return true;
}

protected int drawLabelText(Object nativeGraphics,int textDecoration,boolean rtl,boolean isTickerRunning,boolean endsWith3Points,Object nativeFont,int txtW,int textSpaceW,int shiftText,String text,int x,int y,int fontHeight){
  if ((!isTickerRunning) || rtl) {
    if (txtW > textSpaceW && textSpaceW > 0) {
      if (rtl) {
        if ((!isTickerRunning) && endsWith3Points) {
          String points="...";
          int pointsW=stringWidth(nativeFont,points);
          drawString(nativeGraphics,nativeFont,points,shiftText + x,y,textDecoration,fontHeight);
          clipRect(nativeGraphics,pointsW + shiftText + x,y,textSpaceW - pointsW,fontHeight);
        }
        x=x - txtW + textSpaceW;
      }
 else       if (endsWith3Points) {
        String points="...";
        int index=1;
        int widest=charWidth(nativeFont,'W');
        int pointsW=stringWidth(nativeFont,points);
        int textLen=text.length();
        while (fastCharWidthCheck(text,index,textSpaceW - pointsW,widest,nativeFont) && index < textLen) {
          index++;
        }
        text=text.substring(0,Math.min(textLen,Math.max(1,index - 1))) + points;
        txtW=stringWidth(nativeFont,text);
      }
    }
  }
  drawString(nativeGraphics,nativeFont,text,shiftText + x,y,textDecoration,fontHeight);
  return Math.min(txtW,textSpaceW);
}

public boolean hasMapObjects(){
  return mapObjects != null && !mapObjects.isEmpty();
}

public void performActions() throws Throwable {
  for (  Throwing.Runnable action : actions) {
    action.run();
  }
}

public java.util.Collection<ObjectReference> dumpThreadRoots(int width){
  return Collections.emptyList();
}

protected void addFieldNameTranslation(EmbeddableMapping embeddableMapping,String overrideName,DatabaseField overrideField,MappingAccessor aggregatesAccessor){
  DatabaseMapping aggregatesMapping=aggregatesAccessor.getMapping();
  DatabaseField aggregatesMappingField=aggregatesMapping.getField();
  if (aggregatesAccessor.isId()) {
    updatePrimaryKeyField(aggregatesAccessor,overrideField);
  }
  if (overrideName.contains(".")) {
    embeddableMapping.addNestedFieldTranslation(overrideName,overrideField,aggregatesMappingField.getName());
  }
 else {
    embeddableMapping.addFieldTranslation(overrideField,aggregatesMappingField.getName());
  }
}

public Dimension minimumLayoutSize(Container target){
synchronized (target.getTreeLock()) {
    Dimension dim=new Dimension(0,0);
    if ((chart != null) && chart.isVisible()) {
      Dimension d=chart.getMinimumSize();
      dim.width=d.width;
      dim.height=d.height;
    }
    if ((xLabel != null) && xLabel.isVisible()) {
      Dimension d=xLabel.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    if ((yLabel != null) && yLabel.isVisible()) {
      Dimension d=yLabel.getMinimumSize();
      dim.width+=d.width + hgap;
      dim.height=Math.max(d.height,dim.height);
    }
    if ((title != null) && title.isVisible()) {
      Dimension d=title.getMinimumSize();
      dim.width=Math.max(d.width,dim.width);
      dim.height+=d.height + vgap;
    }
    Insets insets=target.getInsets();
    dim.width+=insets.left + insets.right;
    dim.height+=insets.top + insets.bottom;
    return dim;
  }
}

private void checkResourceChange(final Resource resource,final Group group,final Callback callback,final AtomicBoolean isChanged) throws Exception {
  if (isChanged(resource,group.getName())) {
    isChanged.compareAndSet(false,true);
    callback.onResourceChanged(resource);
    lifecycleCallback.onResourceChanged(resource);
  }
}

public javax2.sip.address.TelURL createTelURL(String uri) throws ParseException {
  if (uri == null)   throw new NullPointerException("null url");
  String telUrl="tel:" + uri;
  try {
    StringMsgParser smp=new StringMsgParser();
    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);
    return (TelURL)timp;
  }
 catch (  ParseException ex) {
    throw new ParseException(ex.getMessage(),0);
  }
}

public EvoSVMModel(ExampleSet exampleSet,List<SupportVector> supportVectors,Kernel kernel,double bias){
  super(exampleSet,ExampleSetUtilities.SetsCompareOption.ALLOW_SUPERSET,ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS);
  this.supportVectors=supportVectors;
  if (supportVectors == null || supportVectors.size() == 0) {
    throw new IllegalArgumentException("Null or empty support vector collection: not possible to predict values!");
  }
  this.kernel=kernel;
  this.bias=bias;
  if (this.kernel instanceof DotKernel) {
    this.weights=new double[getNumberOfAttributes()];
    for (int i=0; i < getNumberOfSupportVectors(); i++) {
      SupportVector sv=getSupportVector(i);
      if (sv != null) {
        double[] x=sv.getX();
        double alpha=sv.getAlpha();
        double y=sv.getY();
        for (int j=0; j < weights.length; j++) {
          weights[j]+=y * alpha * x[j];
        }
      }
 else {
        this.weights=null;
        break;
      }
    }
  }
}

private synchronized boolean _restart() throws ServletException {
  if (singelton != null)   singelton.reset();
  initEngine();
  System.gc();
  return true;
}

public Sorter(){
  useDefaultVisual();
  setLayout(new BorderLayout());
  add(m_visual,BorderLayout.CENTER);
  m_env=Environment.getSystemWide();
  m_stopRequested=new AtomicBoolean(false);
}

public String toString(){
  return Character.toString(getValue());
}

public static double logpdf(double x,double mu,double shape){
  if (!(x > 0) || x == Double.POSITIVE_INFINITY) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=(x - mu) / mu;
  return v < Double.MAX_VALUE ? 0.5 * Math.log(shape / (MathUtil.TWOPI * x * x* x)) - shape * v * v / (2. * x) : Double.NEGATIVE_INFINITY;
}

@Override public final short readShort() throws IOException {
  dis.readFully(work,0,2);
  return (short)((work[1] & 0xff) << 8 | (work[0] & 0xff));
}

public static Format generateFormat(String codec){
  return (Format)SUPPORTED_CODECS.get(codec.toLowerCase());
}

public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {
  int start_old=start;
  if (m_inEntityRef)   return;
  if (m_elemContext.m_startTagOpen) {
    closeStartTag();
    m_elemContext.m_startTagOpen=false;
  }
 else   if (m_needToCallStartDocument) {
    startDocumentInternal();
    m_needToCallStartDocument=false;
  }
  try {
    final int limit=start + length;
    boolean wasDash=false;
    if (m_cdataTagOpen)     closeCDATA();
    if (shouldIndent())     indent();
    final java.io.Writer writer=m_writer;
    writer.write(COMMENT_BEGIN);
    for (int i=start; i < limit; i++) {
      if (wasDash && ch[i] == '-') {
        writer.write(ch,start,i - start);
        writer.write(" -");
        start=i + 1;
      }
      wasDash=(ch[i] == '-');
    }
    if (length > 0) {
      final int remainingChars=(limit - start);
      if (remainingChars > 0)       writer.write(ch,start,remainingChars);
      if (ch[limit - 1] == '-')       writer.write(' ');
    }
    writer.write(COMMENT_END);
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
  m_startNewLine=true;
  if (m_tracer != null)   super.fireCommentEvent(ch,start_old,length);
}

public OptionalInt maxByInt(IntUnaryOperator keyExtractor){
  int[] result=collect(null,null,null);
  return result[2] == 1 ? OptionalInt.of(result[0]) : OptionalInt.empty();
}

public T findByCommitCounter(final long commitCounter){
  if (commitCounter < 0L)   throw new IllegalArgumentException();
  final Lock lock=readLock();
  lock.lock();
  try {
    @SuppressWarnings("unchecked") final ITupleIterator<T> itr=rangeIterator(null,null,0,IRangeQuery.DEFAULT | IRangeQuery.REVERSE,null);
    while (itr.hasNext()) {
      final ITuple<T> t=itr.next();
      final T r=t.getObject();
      final IRootBlockView rb=r.getRootBlock();
      if (rb.getCommitCounter() <= commitCounter) {
        return r;
      }
    }
    return null;
  }
  finally {
    lock.unlock();
  }
}

private void startAnimation(){
  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);
  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();
  mPendingAnimations.clear();
  int propertyMask=0;
  int propertyCount=nameValueList.size();
  for (int i=0; i < propertyCount; ++i) {
    NameValuesHolder nameValuesHolder=nameValueList.get(i);
    propertyMask|=nameValuesHolder.mNameConstant;
  }
  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));
  animator.addUpdateListener(mAnimatorEventListener);
  animator.addListener(mAnimatorEventListener);
  if (mStartDelaySet) {
    animator.setStartDelay(mStartDelay);
  }
  if (mDurationSet) {
    animator.setDuration(mDuration);
  }
  if (mInterpolatorSet) {
    animator.setInterpolator(mInterpolator);
  }
  animator.start();
}

public static String traceExcetion(Throwable ex){
  final Writer result=new StringWriter();
  final PrintWriter printWriter=new PrintWriter(result);
  ex.printStackTrace(printWriter);
  String stacktrace=result.toString();
  Log.e(TAG,"ERROR ---> " + stacktrace);
  return stacktrace;
}

public static Pair<String,String> split(String varName){
  int splitIndex=varName.indexOf('.');
  if (splitIndex < 0) {
    return null;
  }
  String left=varName.substring(0,splitIndex);
  String right=varName.substring(splitIndex + 1);
  if (left == null || left.length() == 0 || right == null || right.length() == 0) {
    return null;
  }
  return Pair.of(left,right);
}

public void onChildThreadResumeEnd(){
  _threadCount.getAndDecrement();
  wake();
}

public static void registerTransportMBean(String containerName){
  MBeanServer mBeanServer=getMBeanServer(containerName);
  if (mBeanServer == null)   return;
  TransportProtocolMonitorMBean transportConnectionsInfoMBean=new TransportProtocolMonitor();
  ObjectName objName=TransportConstants.createTransportMBeanObjectName(containerName);
  if (!mBeanServer.isRegistered(objName)) {
    try {
      mBeanServer.registerMBean(transportConnectionsInfoMBean,objName);
    }
 catch (    InstanceAlreadyExistsException e) {
      if (_logger.isLoggable(Level.CONFIG)) {
        _logger.config(alreadyRegistredTransportMBeanMessage + containerName + ">");
      }
    }
catch (    NotCompliantMBeanException e) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e);
      }
    }
catch (    MBeanRegistrationException e) {
      if (_logger.isLoggable(Level.SEVERE)) {
        _logger.log(Level.SEVERE,failedTransportMBeanRegistrationMessagePrefix + containerName + ">",e);
      }
    }
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(successfulTransportMBeanRegistrationMessage + containerName + ">");
    }
  }
 else {
    if (_logger.isLoggable(Level.CONFIG)) {
      _logger.config(alreadyRegistredTransportMBeanMessage);
    }
  }
}

public static int update(String where,Object[] args,V sets,Class<? extends Bean> t){
  Table mapping=(Table)t.getAnnotation(Table.class);
  if (mapping == null) {
    if (log.isErrorEnabled())     log.error("mapping missed in [" + t + "] declaretion");
    return -1;
  }
  if (!X.isEmpty(mapping.name())) {
    return updateTable(mapping.name(),where,args,sets);
  }
  return -1;
}

private void stopVideoFadingEdgesScreenTimer(){
  if (null != mVideoFadingEdgesTimer) {
    mVideoFadingEdgesTimer.cancel();
    mVideoFadingEdgesTimer=null;
    mVideoFadingEdgesTimerTask=null;
  }
}

public void removeListener(final TimeoutEventListener listener){
  listeners.remove(listener);
}

protected static void processGenericPropertiesCreatorProps(File propsFile){
  try {
    Properties expProps=new Properties();
    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));
    expProps.load(bi);
    bi.close();
    bi=null;
    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();
    Set<Object> keys=expProps.keySet();
    Iterator<Object> keysI=keys.iterator();
    while (keysI.hasNext()) {
      String key=(String)keysI.next();
      String existingVal=GPCInputProps.getProperty(key,"");
      if (existingVal.length() > 0) {
        String newVal=expProps.getProperty(key);
        if (existingVal.indexOf(newVal) < 0) {
          newVal=existingVal + "," + newVal;
          GPCInputProps.put(key,newVal);
        }
      }
 else {
        String newVal=expProps.getProperty(key);
        GPCInputProps.put(key,newVal);
      }
    }
  }
 catch (  Exception ex) {
  }
}

private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){
  if (null == tableLockMap.get(absoluteTableIdentifier)) {
    tableLockMap.put(absoluteTableIdentifier,new Object());
  }
}

private static String randomElement(ArrayList<String> list){
  int index=random.nextInt(list.size());
  return list.get(index);
}

public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){
  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();
  if (!map.containsKey(key)) {
    result.addAll(newQual);
  }
 else {
    result.addAll(map.get(key));
    result.addAll(newQual);
  }
  map.put(key,Collections.unmodifiableSet(result));
}

public static void join(final AsyncInvocation<?> async,final long timeoutMilliseconds){
  join(async.getThread(),timeoutMilliseconds);
}

void define(MemberDefinition field,int slot,int from,int to){
  if (from >= to) {
    return;
  }
  for (int i=0; i < len; i++) {
    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {
      locals[i].from=Math.min(locals[i].from,from);
      locals[i].to=Math.max(locals[i].to,to);
      return;
    }
  }
  if (len == locals.length) {
    LocalVariable newlocals[]=new LocalVariable[len * 2];
    System.arraycopy(locals,0,newlocals,0,len);
    locals=newlocals;
  }
  locals[len++]=new LocalVariable(field,slot,from,to);
}

protected Connection openConnection(boolean autocommit) throws SQLException {
  Connection conn=dataSrc.getConnection();
  conn.setAutoCommit(autocommit);
  return conn;
}

public void error(XPathContext xctxt,String msg,Object[] args) throws javax.xml.transform.TransformerException {
  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);
  if (null != xctxt) {
    ErrorListener eh=xctxt.getErrorListener();
    TransformerException te=new TransformerException(fmsg,this);
    eh.fatalError(te);
  }
}

public void mousePressed(MouseEvent e){
  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);
  if (SwingUtilities.isLeftMouseButton(e)) {
    if (e.isConsumed()) {
      shouldHandleRelease=true;
    }
 else {
      shouldHandleRelease=false;
      adjustCaretAndFocus(e);
      if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {
        selectWord(e);
      }
    }
  }
}

public static byte[] decode(String str,int flags){
  return decode(str.getBytes(),flags);
}

public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector paramNames,Vector arguments) throws BSFException {
  Object object=eval(source,lineNo,columnNo,funcBody);
  if (object instanceof Closure) {
    Closure closure=(Closure)object;
    return closure.call(arguments.toArray());
  }
  return object;
}

public Set keySet(){
  return totalKeySet();
}

public void output(List list,Writer out) throws IOException {
  printContentRange(out,list,0,list.size(),0,createNamespaceStack());
  out.flush();
}

public boolean consumeEncumbranceBudget(final Map<String,Object> detailsMap){
  if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError("required input is null","required input is null")));
  detailsMap.put(Constants.CONSUMEORRELEASE,true);
  final BigDecimal bd=getDetails(detailsMap);
  return bd.intValue() == 1;
}

private int[] mod(int[] a,int[] f){
  int df=computeDegree(f);
  if (df == -1) {
    throw new ArithmeticException("Division by zero");
  }
  int[] result=new int[a.length];
  int hc=headCoefficient(f);
  hc=field.inverse(hc);
  System.arraycopy(a,0,result,0,result.length);
  while (df <= computeDegree(result)) {
    int[] q;
    int coeff=field.mult(headCoefficient(result),hc);
    q=multWithMonomial(f,computeDegree(result) - df);
    q=multWithElement(q,coeff);
    result=add(q,result);
  }
  return result;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=enumToVector(super.listOptions());
  result.addElement(new Option("\tThe number of clusters (default " + defaultNumClusters() + ")","k",1,"-k <num>"));
  result.addElement(new Option("\tSet pattern to grid (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","G",0,"-G"));
  result.addElement(new Option("\tSet pattern to sine (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","I",0,"-I"));
  result.addElement(new Option("\tThe range of number of instances per cluster (default " + defaultMinInstNum() + ".."+ defaultMaxInstNum()+ ").\n"+ "\tLower number must be between 0 and 2500,\n"+ "\tupper number must be between 50 and 2500.","N",1,"-N <num>..<num>"));
  result.addElement(new Option("\tThe range of radius per cluster (default " + defaultMinRadius() + ".."+ defaultMaxRadius()+ ").\n"+ "\tLower number must be between 0 and SQRT(2), \n"+ "\tupper number must be between SQRT(2) and SQRT(32).","R",1,"-R <num>..<num>"));
  result.addElement(new Option("\tThe distance multiplier (default " + defaultDistMult() + ").","M",1,"-M <num>"));
  result.addElement(new Option("\tThe number of cycles (default " + defaultNumCycles() + ").","C",1,"-C <num>"));
  result.addElement(new Option("\tFlag for input order is ORDERED. If flag is not set then \n" + "\tinput order is RANDOMIZED. RANDOMIZED is currently not \n" + "\timplemented, therefore is the input order always ORDERED.","O",0,"-O"));
  result.addElement(new Option("\tThe noise rate in percent (default " + defaultNoiseRate() + ").\n"+ "\tCan be between 0% and 30%. (Remark: The original \n"+ "\talgorithm only allows noise up to 10%.)","P",1,"-P <num>"));
  return result.elements();
}

public static void appendHexJavaScriptRepresentation(StringBuilder sb,char c){
  sb.append("\\u");
  String val=Integer.toHexString(c);
  for (int j=val.length(); j < 4; j++) {
    sb.append('0');
  }
  sb.append(val);
}

private void printBootstrapMap(){
  LOG.info("Bootstrap map:");
  for (  Integer i : chainMap.keySet()) {
    LOG.info(String.format("  %6d: %d",i,chainMap.get(i)));
  }
}

public Vector<Option> enumToVector(Enumeration<Option> enu){
  Vector<Option> options=new Vector<Option>();
  options.addAll(Collections.list(enu));
  return options;
}

private void addToken(int token){
  try {
    fTokens[fTokenCount]=token;
  }
 catch (  ArrayIndexOutOfBoundsException ex) {
    int[] oldList=fTokens;
    fTokens=new int[fTokenCount << 1];
    System.arraycopy(oldList,0,fTokens,0,fTokenCount);
    fTokens[fTokenCount]=token;
  }
  fTokenCount++;
}

private P filterLargeValueSets(FilterSpec fs,MetaDataObject rootMeta,F root,boolean forceEntityBased,JoinType defaultPredicateJoinType){
  ArrayList<FilterSpec> specs=new ArrayList<>();
  List<?> list=new ArrayList<>((Collection<?>)fs.getValue());
  for (int i=0; i < list.size(); i+=ORACLE_PARAM_LIMIT) {
    int nextOffset=i + Math.min(list.size() - i,ORACLE_PARAM_LIMIT);
    List<?> batchList=list.subList(i,nextOffset);
    specs.add(new FilterSpec(fs.getAttributePath(),fs.getOperator(),batchList));
  }
  FilterSpec orSpec=FilterSpec.or(specs);
  return filterSpecListToPredicate(rootMeta,root,orSpec,forceEntityBased,defaultPredicateJoinType);
}

protected void addTags(E data,Builder builder){
  PlatformIdent platformIdent=cachedDataService.getPlatformIdentForId(data.getPlatformIdent());
  builder.tag(Series.TAG_AGENT_ID,String.valueOf(data.getPlatformIdent()));
  if (null != platformIdent) {
    builder.tag(Series.TAG_AGENT_NAME,platformIdent.getAgentName());
  }
}

public int compare(String s1,String s2){
  final Matcher match1=MATCH_ID_PATTERN.matcher(s1);
  final Matcher match2=MATCH_ID_PATTERN.matcher(s2);
  final boolean match1matches=match1.matches();
  final boolean match2matches=match2.matches();
  if (match1matches ^ match2matches) {
    return (match1matches) ? 1 : -1;
  }
 else   if (match1matches && match2matches) {
    int signature1=Integer.parseInt(match1.group(1));
    int signature2=Integer.parseInt(match2.group(1));
    int comparison=(signature1 < signature2) ? -1 : (signature1 > signature2) ? 1 : 0;
    if (comparison == 0) {
      int start1=Integer.parseInt(match1.group(2));
      int start2=Integer.parseInt(match2.group(2));
      comparison=(start1 < start2) ? -1 : (start1 > start2) ? 1 : 0;
    }
    if (comparison == 0) {
      int end1=Integer.parseInt(match1.group(3));
      int end2=Integer.parseInt(match2.group(3));
      comparison=(end1 < end2) ? -1 : (end1 > end2) ? 1 : 0;
    }
    return comparison;
  }
 else {
    int seqLength1=s1.length(), n2=s2.length();
    for (int i1=0, i2=0; i1 < seqLength1 && i2 < n2; i1++, i2++) {
      char c1=s1.charAt(i1);
      char c2=s2.charAt(i2);
      if (c1 != c2) {
        c1=Character.toUpperCase(c1);
        c2=Character.toUpperCase(c2);
        if (c1 != c2) {
          c1=Character.toLowerCase(c1);
          c2=Character.toLowerCase(c2);
          if (c1 != c2) {
            return c1 - c2;
          }
        }
      }
    }
    return seqLength1 - n2;
  }
}

private static int loadBuildNumber(Context context,PackageManager packageManager){
  try {
    ApplicationInfo appInfo=packageManager.getApplicationInfo(context.getPackageName(),PackageManager.GET_META_DATA);
    Bundle metaData=appInfo.metaData;
    if (metaData != null) {
      return metaData.getInt(BUNDLE_BUILD_NUMBER,0);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    L.e("Exception thrown when accessing the application info:");
    e.printStackTrace();
  }
  return 0;
}

public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph(int leftSize,int rightSize,int leftDegree,Random random){
  LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment=new LeftRegularBipartiteGraphSegment(leftSize / 2,leftDegree,rightSize / 2,leftSize / 2,2.0,Integer.MAX_VALUE,new IdentityEdgeTypeMask(),new NullStatsReceiver());
  LongSet addedIds=new LongOpenHashSet(leftDegree);
  for (int i=0; i < leftSize; i++) {
    addedIds.clear();
    for (int j=0; j < leftDegree; j++) {
      long idToAdd;
      do {
        idToAdd=random.nextInt(rightSize);
      }
 while (addedIds.contains(idToAdd));
      addedIds.add(idToAdd);
      leftRegularBipartiteGraphSegment.addEdge(i,idToAdd,(byte)0);
    }
  }
  return leftRegularBipartiteGraphSegment;
}

@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  final int focusableCount=views.size();
  final int descendantFocusability=getDescendantFocusability();
  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {
    for (int i=0; i < getChildCount(); i++) {
      final View child=getChildAt(i);
      if (child.getVisibility() == VISIBLE) {
        ItemInfo ii=infoForChild(child);
        if (ii != null && ii.position == mCurItem) {
          child.addFocusables(views,direction,focusableMode);
        }
      }
    }
  }
  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {
    if (!isFocusable()) {
      return;
    }
    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
      return;
    }
    if (views != null) {
      views.add(this);
    }
  }
}

protected HttpURLConnection configureRequest(final HttpURLConnection request){
  if (credentials != null)   request.setRequestProperty(HEADER_AUTHORIZATION,credentials);
  request.setRequestProperty(HEADER_USER_AGENT,userAgent);
  request.setRequestProperty(HEADER_ACCEPT,getHeaderAccept());
  return request;
}

public static String convertToTitle(int n){
  if (n <= 0)   return "";
  StringBuilder title=new StringBuilder();
  while (n > 0) {
    n--;
    int r=n % 26;
    title.insert(0,(char)('A' + r));
    n=n / 26;
  }
  return title.toString();
}

private char readEscapeCharacter() throws JSONException {
  char escaped=in.charAt(pos++);
switch (escaped) {
case 'u':
    if (pos + 4 > in.length()) {
      throw syntaxError("Unterminated escape sequence");
    }
  String hex=in.substring(pos,pos + 4);
pos+=4;
return (char)Integer.parseInt(hex,16);
case 't':
return '\t';
case 'b':
return '\b';
case 'n':
return '\n';
case 'r':
return '\r';
case 'f':
return '\f';
case '\'':
case '"':
case '\\':
default :
return escaped;
}
}

static public void process(String input,String output,String packFileName){
  process(new Settings(),input,output,packFileName);
}

private ReplicatorRuntimeConf(String serviceName){
  replicatorHomeDir=locateReplicatorHomeDir();
  replicatorLogDir=locateReplicatorLogDir();
  replicatorConfDir=locateReplicatorConfDir();
  replicatorProperties=new File(locateReplicatorConfDir(),"static-" + serviceName + ".properties");
  if (!replicatorProperties.isFile() || !replicatorProperties.canRead()) {
    throw new ServerRuntimeException("Replicator static properties does not exist or is invalid: " + replicatorProperties);
  }
  replicatorDynamicProperties=new File(replicatorConfDir,"dynamic-" + serviceName + ".properties");
  replicatorDynamicRole=new File(replicatorConfDir,"dynamic-" + serviceName + ".role");
  this.clearDynamicProperties=Boolean.parseBoolean(System.getProperty(CLEAR_DYNAMIC_PROPERTIES));
}

private String toLocalNumber(double n){
  return mDecimalFormat.format(n);
}

public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){
  String subSignature=method.getSubSignature();
  if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction)")) {
    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);
    return;
  }
 else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)")) {
    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);
    return;
  }
 else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)")) {
    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);
    return;
  }
 else   if (subSignature.equals("java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)")) {
    java_security_AccessController_doPrivileged(method,thisVar,returnVar,params);
    return;
  }
 else   if (subSignature.equals("java.security.AccessControlContext getStackAccessControlContext()")) {
    java_security_AccessController_getStackAccessControlContext(method,thisVar,returnVar,params);
    return;
  }
 else   if (subSignature.equals("java.security.AccessControlContext getInheritedAccessControlContext()")) {
    java_security_AccessController_getInheritedAccessControlContext(method,thisVar,returnVar,params);
    return;
  }
 else {
    defaultMethod(method,thisVar,returnVar,params);
    return;
  }
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

public static long[] asLongArray(final List<Long> l){
  final long[] a=new long[l.size()];
  for (int i=0; i < a.length; i++) {
    a[i]=l.get(i);
  }
  return a;
}

private void updateMenuState(){
  m_appendAnd.setEnabled(m_criteriumNode.allowAppend(CAndCriterium.class));
  m_appendOr.setEnabled(m_criteriumNode.allowAppend(COrCriterium.class));
  m_appendNot.setEnabled(m_criteriumNode.allowAppend(CNotCriterium.class));
  m_insertAnd.setEnabled(m_criteriumNode.allowInsert(CAndCriterium.class));
  m_insertOr.setEnabled(m_criteriumNode.allowInsert(COrCriterium.class));
  m_insertNot.setEnabled(m_criteriumNode.allowInsert(CNotCriterium.class));
  m_conditionSubmenu.setEnabled(m_criteriumNode.allowAppend(CConditionCriterium.class));
  m_remove.setEnabled(!m_criteriumNode.isRoot());
  m_removeAll.setEnabled(m_criteriumNode.getChildCount() != 0);
}

public void testPutGetRemove() throws Exception {
  initStore(2);
  Set<Integer> exp;
  try {
    exp=runPutGetRemoveMultithreaded(10,10);
  }
  finally {
    shutdownStore();
  }
  Map<Integer,String> map=delegate.getMap();
  Collection<Integer> extra=new HashSet<>(map.keySet());
  extra.removeAll(exp);
  assertTrue("The underlying store contains extra keys: " + extra,extra.isEmpty());
  Collection<Integer> missing=new HashSet<>(exp);
  missing.removeAll(map.keySet());
  assertTrue("Missing keys in the underlying store: " + missing,missing.isEmpty());
  for (  Integer key : exp)   assertEquals("Invalid value for key " + key,"val" + key,map.get(key));
}

public static String formatListToString(List<String> list){
  String result="";
  for (  String s : list)   result+=s + "\t\t";
  result=result.trim();
  return result.toUpperCase();
}

@Override public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"removeNotificationListener","Removing listener " + listener);
  }
  notifBroadcaster.removeNotificationListener(listener);
}

public static boolean isNewer(long ts1,long size1,long ts2,long size2){
  return ts1 > ts2 || (ts1 == ts2 && size1 < size2);
}

private static void d_ucumm(double[] a,double[] agg,double[] c,int m,int n,int rl,int ru){
  double[] cprods=(agg != null) ? agg : new double[n];
  if (agg == null)   Arrays.fill(cprods,1);
  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n) {
    productAgg(a,cprods,aix,0,n);
    System.arraycopy(cprods,0,c,aix,n);
  }
}

public static List<ModuleSpec> expandSpecWildcards(File dir,List<ModuleSpec> modules,Backend forBackend){
  List<File> dirs=new ArrayList<File>();
  dirs.add(dir);
  return expandSpecWildcards(dirs,modules,forBackend);
}

private void $$$setupUI$$$(){
  myContentPanel=new JPanel();
  myContentPanel.setLayout(new GridLayoutManager(6,1,new Insets(0,0,0,0),-1,-1));
  myYoursRadioButton=new JRadioButton();
  myYoursRadioButton.setSelected(true);
  myYoursRadioButton.setText("Keep local");
  myYoursRadioButton.setMnemonic('K');
  myYoursRadioButton.setDisplayedMnemonicIndex(0);
  myContentPanel.add(myYoursRadioButton,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myTheirsRadioButton=new JRadioButton();
  myTheirsRadioButton.setText("Accept server");
  myTheirsRadioButton.setMnemonic('A');
  myTheirsRadioButton.setDisplayedMnemonicIndex(0);
  myContentPanel.add(myTheirsRadioButton,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myUseCustomRadioButton=new JRadioButton();
  myUseCustomRadioButton.setText("Use specified:");
  myUseCustomRadioButton.setMnemonic('U');
  myUseCustomRadioButton.setDisplayedMnemonicIndex(0);
  myContentPanel.add(myUseCustomRadioButton,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  myCustomPathTextField=new JTextField();
  myCustomPathTextField.setEnabled(false);
  myContentPanel.add(myCustomPathTextField,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(100,-1),null,2,false));
  final Spacer spacer1=new Spacer();
  myContentPanel.add(spacer1,new GridConstraints(5,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_VERTICAL,1,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0,false));
  myErrorLabel=new JLabel();
  myErrorLabel.setForeground(new Color(-65536));
  myErrorLabel.setText("");
  myContentPanel.add(myErrorLabel,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));
  ButtonGroup buttonGroup;
  buttonGroup=new ButtonGroup();
  buttonGroup.add(myYoursRadioButton);
  buttonGroup.add(myTheirsRadioButton);
  buttonGroup.add(myUseCustomRadioButton);
}

private static String reportListContents(Collection<ProcessErrorStateInfo> errList){
  if (errList == null)   return null;
  StringBuilder builder=new StringBuilder();
  Iterator<ProcessErrorStateInfo> iter=errList.iterator();
  while (iter.hasNext()) {
    ProcessErrorStateInfo entry=iter.next();
    String condition;
switch (entry.condition) {
case ActivityManager.ProcessErrorStateInfo.CRASHED:
      condition="a CRASH";
    break;
case ActivityManager.ProcessErrorStateInfo.NOT_RESPONDING:
  condition="an ANR";
break;
default :
condition="an unknown error";
break;
}
builder.append(String.format("Process %s encountered %s (%s)",entry.processName,condition,entry.shortMsg));
if (entry.condition == ActivityManager.ProcessErrorStateInfo.CRASHED) {
builder.append(String.format(" with stack trace:\n%s\n",entry.stackTrace));
}
builder.append("\n");
}
return builder.toString();
}

public void parseArguments(final String[] rawArguments,Properties argumentProperties) throws ArgumentException {
  boolean inTrailingArgs=false;
  final int numArguments=rawArguments.length;
  for (int i=0; i < numArguments; i++) {
    final String arg=rawArguments[i];
    if (inTrailingArgs) {
      trailingArguments.add(arg);
      if (maxTrailingArguments > 0 && trailingArguments.size() > maxTrailingArguments) {
        final LocalizableMessage message=ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS.get(maxTrailingArguments);
        throw new ArgumentException(message);
      }
      continue;
    }
    if (arg.equals("--")) {
      inTrailingArgs=true;
    }
 else     if (arg.startsWith("--")) {
      String argName=arg.substring(2);
      String argValue=null;
      final int equalPos=argName.indexOf('=');
      if (equalPos == 0) {
        throw new ArgumentException(ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME.get(arg));
      }
 else       if (equalPos > 0) {
        argValue=argName.substring(equalPos + 1);
        argName=argName.substring(0,equalPos);
      }
      final String origArgName=argName;
      argName=formatLongIdentifier(argName);
      final Argument a=longIDMap.get(argName);
      if (a == null) {
        if (OPTION_LONG_HELP.equals(argName)) {
          writeToUsageOutputStream(getUsage());
          return;
        }
 else         if (OPTION_LONG_PRODUCT_VERSION.equals(argName)) {
          printVersion();
          return;
        }
 else {
          throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID.get(origArgName));
        }
      }
 else {
        a.setPresent(true);
        if (isUsageArgument(a)) {
          writeToUsageOutputStream(getUsage());
          return;
        }
      }
      if (a.needsValue()) {
        if (argValue == null) {
          if ((i + 1) == numArguments) {
            throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID.get(origArgName));
          }
          argValue=rawArguments[++i];
        }
        final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();
        if (!a.valueIsAcceptable(argValue,invalidReason)) {
          throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID.get(argValue,origArgName,invalidReason));
        }
        if (a.hasValue() && !a.isMultiValued()) {
          throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID.get(origArgName));
        }
        a.addValue(argValue);
      }
 else       if (argValue != null) {
        throw new ArgumentException(ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE.get(origArgName));
      }
    }
 else     if (arg.startsWith("-")) {
      if (arg.equals("-")) {
        throw new ArgumentException(ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT.get());
      }
      final char argCharacter=arg.charAt(1);
      String argValue;
      if (arg.length() > 2) {
        argValue=arg.substring(2);
      }
 else {
        argValue=null;
      }
      final Argument a=shortIDMap.get(argCharacter);
      if (a == null) {
        if (argCharacter == '?') {
          writeToUsageOutputStream(getUsage());
          return;
        }
 else         if (versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && !shortIDMap.containsKey(OPTION_SHORT_PRODUCT_VERSION)) {
          printVersion();
          return;
        }
 else {
          throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter));
        }
      }
 else {
        a.setPresent(true);
        if (isUsageArgument(a)) {
          writeToUsageOutputStream(getUsage());
          return;
        }
      }
      if (a.needsValue()) {
        if (argValue == null) {
          if ((i + 1) == numArguments) {
            throw new ArgumentException(ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID.get(argCharacter));
          }
          argValue=rawArguments[++i];
        }
        final LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();
        if (!a.valueIsAcceptable(argValue,invalidReason)) {
          throw new ArgumentException(ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID.get(argValue,argCharacter,invalidReason));
        }
        if (a.hasValue() && !a.isMultiValued()) {
          throw new ArgumentException(ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID.get(argCharacter));
        }
        a.addValue(argValue);
      }
 else       if (argValue != null) {
        final int valueLength=argValue.length();
        for (int j=0; j < valueLength; j++) {
          final char c=argValue.charAt(j);
          final Argument b=shortIDMap.get(c);
          if (b == null) {
            throw new ArgumentException(ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID.get(argCharacter));
          }
 else           if (b.needsValue()) {
            throw new ArgumentException(ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES.get(argCharacter,argValue,c));
          }
 else {
            b.setPresent(true);
            if (isUsageArgument(b)) {
              writeToUsageOutputStream(getUsage());
              return;
            }
          }
        }
      }
    }
 else     if (allowsTrailingArguments) {
      inTrailingArgs=true;
      trailingArguments.add(arg);
    }
 else {
      throw new ArgumentException(ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT.get(arg));
    }
  }
  if (allowsTrailingArguments && minTrailingArguments > 0 && trailingArguments.size() < minTrailingArguments) {
    throw new ArgumentException(ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS.get(minTrailingArguments));
  }
  if (argumentProperties == null) {
    argumentProperties=checkExternalProperties();
  }
  normalizeArguments(argumentProperties,argumentList);
}

public void testGetIssuerNames(){
  X509CRLSelector selector=new X509CRLSelector();
  byte[] iss1=new byte[]{48,21,49,19,48,17,6,3,85,4,10,19,10,70,105,114,115,116,32,79,114,103,46};
  byte[] iss2=new byte[]{48,22,49,20,48,18,6,3,85,4,10,19,11,83,101,99,111,110,100,32,79,114,103,46};
  assertNull("The collection should be null.",selector.getIssuerNames());
  try {
    selector.addIssuerName(iss1);
    selector.addIssuerName(iss2);
  }
 catch (  IOException e) {
    e.printStackTrace();
    fail("Unexpected IOException was thrown.");
  }
  Collection<Object> result=selector.getIssuerNames();
  assertEquals("The collection should contain all of the specified DNs.",2,result.size());
}

@Override public boolean start() throws IOException {
  LOG.info("Starting reader using {}",initialCheckpointGenerator);
  try {
    KinesisReaderCheckpoint initialCheckpoint=initialCheckpointGenerator.generate(kinesis);
    List<ShardRecordsIterator> iterators=newArrayList();
    for (    ShardCheckpoint checkpoint : initialCheckpoint) {
      iterators.add(checkpoint.getShardRecordsIterator(kinesis));
    }
    shardIterators=new RoundRobin<>(iterators);
  }
 catch (  TransientKinesisException e) {
    throw new IOException(e);
  }
  return advance();
}

@Override public XADataSource createXADataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}

public static double toDegrees(double x){
  if (Double.isInfinite(x) || x == 0.0) {
    return x;
  }
  final double facta=57.2957763671875;
  final double factb=3.145894820876798E-6;
  double xa=doubleHighPart(x);
  double xb=x - xa;
  return xb * factb + xb * facta + xa * factb + xa * facta;
}

public void addHeaderView(View v){
  addHeaderView(v,null,true);
}

public static boolean isAbsolutePath(String systemId){
  if (systemId == null)   return false;
  final File file=new File(systemId);
  return file.isAbsolute();
}

void initDemandAndCollectionMap(final List<String> prepareFieldNames,final Map<String,BigDecimal> demand,final Map<String,BigDecimal> collection,final Map<String,BigDecimal> rebates){
  if (prepareFieldNames != null && !prepareFieldNames.isEmpty())   for (  final String fieldName : prepareFieldNames) {
    demand.put(fieldName,BigDecimal.ZERO);
    collection.put(fieldName,BigDecimal.ZERO);
    rebates.put(fieldName,BigDecimal.ZERO);
  }
}

protected Instance specifier(int i){
  return m_Specifiers.get(i);
}

public ShapedCraftingRecipe(Item nominalOutput,RecipeFunction recipeFunction,String format,boolean mirrored,ItemIngredient... ingredients){
  this.nominalOutput=nominalOutput;
  String[] formatLines=format.split("\\-");
  int numIngredients=0;
  int width=0;
  for (  String formatLine : formatLines) {
    width=Math.max(width,formatLine.length());
    for (    char c : formatLine.toCharArray()) {
      if (c == ' ') {
        continue;
      }
 else       if (c >= 'A' && c <= 'Z') {
        numIngredients++;
      }
 else {
        throw new IllegalArgumentException("Invalid character in format string " + format + ": "+ c);
      }
    }
  }
  this.width=width;
  this.height=formatLines.length;
  this.posx=new int[numIngredients];
  this.posy=new int[numIngredients];
  this.ingredients=new ItemIngredient[numIngredients];
  this.mirrored=mirrored;
  int ingredientIndex=0;
  for (int y=0; y < this.height; y++) {
    String formatLine=formatLines[y];
    for (int x=0; x < formatLine.length(); x++) {
      char c=formatLine.charAt(x);
      if (c == ' ') {
        continue;
      }
      this.posx[ingredientIndex]=x;
      this.posy[ingredientIndex]=y;
      this.ingredients[ingredientIndex]=ingredients[c - 'A'];
      ingredientIndex++;
    }
  }
  this.recipeFunction=recipeFunction;
  this.lastIngredientIndexOnFirstLine=getLastIngredientIndexOnFirstLine();
}

public void writeTag(String tag,Font value){
  startTag(tag);
  writeTag("name",value.getName());
  int style=value.getStyle();
  if ((style & Font.BOLD) != 0 && (style & Font.ITALIC) != 0) {
    writeTag(STYLE,"BOLDITALIC");
  }
 else   if ((style & Font.BOLD) != 0) {
    writeTag(STYLE,"BOLD");
  }
 else   if ((style & Font.ITALIC) != 0) {
    writeTag(STYLE,"ITALIC");
  }
 else {
    writeTag(STYLE,"PLAIN");
  }
  writeTag("size",value.getSize());
  closeTag();
}

private void internalWrite(byte[] b,int off,int len,boolean finish) throws IOException {
  coder.output=embiggen(coder.output,coder.maxOutputSize(len));
  if (!coder.process(b,off,len,finish)) {
    throw new Base64DataException("bad base-64");
  }
  out.write(coder.output,0,coder.op);
}

private Socket connect(String host,String portString) throws IOException {
  int port=0;
  Socket sock=null;
  boolean DEBUG=Debug.debugging("netmap");
  try {
    port=Integer.parseInt(portString,10);
  }
 catch (  NumberFormatException e) {
    if (DEBUG)     Debug.output("Illegal name " + host + ":"+ portString);
    throw new IOException("Illegal port: " + portString);
  }
  if (DEBUG)   Debug.output("Connecting to server " + host + ":"+ port);
  try {
    sock=new Socket(host,port);
  }
 catch (  IOException e) {
    if (sock != null)     sock.close();
    if (DEBUG) {
      Debug.output("Can't connect to " + host + ":"+ port+ "\n   "+ e);
    }
    throw e;
  }
  return sock;
}

@Override public boolean batchFinished(){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  Instances toFilter=getInputFormat();
  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);
  if (m_Inverse) {
    for (int i=0; i < cutOff; i++) {
      push(toFilter.instance(i));
    }
  }
 else {
    for (int i=cutOff; i < toFilter.numInstances(); i++) {
      push(toFilter.instance(i));
    }
  }
  flushInput();
  m_NewBatch=true;
  m_FirstBatchDone=true;
  return (numPendingOutput() != 0);
}

public void computeParameters(){
  if (ellps == null) {
    ellps=Ellipsoid.WGS_84;
  }
  if (mode == MODE_BELGIUM) {
    alpha=0.00014204d;
  }
 else {
    alpha=0d;
  }
  double phi1=ProjMath.degToRad(lambert_sp_one);
  double phi2=ProjMath.degToRad(lambert_sp_two);
  double phif=ProjMath.degToRad(referenceLatitude);
  double e=ellps.ecc;
  double sinphi;
  sinphi=Math.sin(phi1);
  double m1=lambMsfn(sinphi,Math.cos(phi1),e);
  double t1=lambTsfn(phi1,sinphi,e);
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    n=sinphi;
  }
 else {
    sinphi=Math.sin(phi2);
    double m2=lambMsfn(sinphi,Math.cos(phi2),e);
    double t2=lambTsfn(phi2,sinphi,e);
    n=Math.log(m1 / m2) / Math.log(t1 / t2);
  }
  F=m1 / (n * Math.pow(t1,n));
  if (MoreMath.approximately_equal(phi1,phi2,EPS10)) {
    rf=0.0d;
  }
 else {
    rf=ellps.radius * F * Math.pow(lambTsfn(phif,Math.sin(phif),e),n);
  }
  lamdaf=ProjMath.degToRad(centralMeridian);
  locationCenterXPixel=((double)getWidth() / 2d);
  locationCenterYPixel=((double)getHeight() / 2d);
  locationPixelsPerLambert=(double)getPPM() / getScale();
  LatLonPoint origin=new LatLonPoint.Double(referenceLatitude,centralMeridian);
  Point2D lp=LLToWorld(origin.getY(),origin.getX(),new Point2D.Double());
  locationOriginX=lp.getX();
  locationOriginY=lp.getY();
  LatLonPoint center=getCenter();
  lp=LLToWorld(center.getY(),center.getX(),lp);
  locationCenterXLambert=lp.getX();
  locationCenterYLambert=lp.getY();
  locationOriginXfPixel=locationCenterXPixel + (locationOriginX - locationCenterXLambert) * locationPixelsPerLambert;
  locationOriginYfPixel=locationCenterYPixel - (locationOriginY - locationCenterYLambert) * locationPixelsPerLambert;
  if (Debug.debugging("Lambert")) {
    Debug.output("Creating LambertConformal: center x = " + locationCenterXLambert + ", center y = "+ locationCenterYLambert);
    Debug.output("Creating LambertConformal: origin x = " + locationOriginX + ", origin y = "+ locationOriginY);
  }
}

protected OkHttpClient configureHttpClient(){
  final OkHttpClient.Builder builder=new OkHttpClient.Builder();
  final CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.connectTimeout(60,TimeUnit.SECONDS);
  builder.writeTimeout(60,TimeUnit.SECONDS);
  builder.readTimeout(90,TimeUnit.SECONDS);
  return builder.build();
}

public String parseFile(File file){
  log.config(file.getAbsolutePath());
  String line=null;
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(file),Ini.getCharset()),10240);
    String errMsg="";
    int lineNo=1;
    while ((line=in.readLine()) != null && errMsg.length() == 0) {
      errMsg=parseLine(line,lineNo);
      lineNo++;
    }
    line=null;
    in.close();
    if (errMsg.length() != 0)     return errMsg;
  }
 catch (  Exception ioe) {
    String s=ioe.getLocalizedMessage();
    if (s == null || s.length() == 0)     s=ioe.toString();
    return "Parse Error: Line=" + line + " - "+ s;
  }
  return "";
}

public static Test suite() throws Exception {
  return suite(true);
}

public void load(Element element,Object o){
  log.error("load(Element, Object) called unexpectedly");
}

public OMRaster(double lt,double ln,int offset_x1,int offset_y1,ImageIcon ii){
  this(lt,ln,offset_x1,offset_y1,ii.getImage());
}

private synchronized boolean startDequeue(){
  int threads=Math.min(queue.size(),maxThreads);
  for (int i=0; i < threads; i++) {
    ResourceThread t=(ResourceThread)queue.firstElement();
    queue.removeElementAt(0);
    running.addElement(t);
    threadCount++;
  }
  for (Enumeration e=running.elements(); e.hasMoreElements(); ) {
    ResourceThread t=(ResourceThread)e.nextElement();
    t.go();
  }
  return (threads > 0);
}

public void propertyChange(PropertyChangeEvent evt){
  String name=evt.getPropertyName();
  if (name == "width" || name == "preferredWidth") {
    invalidateWidthCache();
    fireColumnMarginChanged();
  }
}

static WorkQueue commonSubmitterQueue(){
  ForkJoinPool p;
  WorkQueue[] ws;
  int m;
  Submitter z;
  return ((z=submitters.get()) != null && (p=commonPool) != null && (ws=p.workQueues) != null && (m=ws.length - 1) >= 0) ? ws[m & z.seed & SQMASK] : null;
}

public static void assertEquals(Object object1,Object object2){
  checkAssertion(object1.equals(object2),null);
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

public static String flagNames(long flags){
  StringBuilder sbuf=new StringBuilder();
  int i=0;
  long f=flags & StandardFlags;
  while (f != 0) {
    if ((f & 1) != 0) {
      sbuf.append(" ");
      sbuf.append(flagName[i]);
    }
    f=f >> 1;
    i++;
  }
  return sbuf.toString();
}

public String formatSQL(Object obj,Object expr){
  String sql=null;
  if (expr instanceof String) {
    sql=(String)expr;
    if (log.isLoggable(Level.FINEST)) {
      log.finest("SQL retrieved from state = " + sql);
    }
  }
 else   if (obj != null) {
    sql=toString(obj);
    if (sql != null) {
      if (sql.startsWith("prep")) {
        sql=sql.replaceFirst("prep[0-9]*: ","");
      }
      sql=sql.replaceAll("X'.*'",BINARY_SQL_MARKER);
    }
    if (log.isLoggable(Level.FINEST)) {
      log.finest("SQL derived from context = " + sql);
    }
  }
  return sql;
}

public void indent(){
  indent.append("  ");
}

public void addFakeView(View childView){
  childView.layout(0,0,getWidth(),childView.getMeasuredHeight());
  views.add(childView);
}

public void compileProjects(List<File> projects,IssueAcceptor issueAcceptor) throws N4JSCompileException {
  compileProjects(Arrays.asList(new File(".")),projects,Collections.emptyList(),issueAcceptor);
}

protected final void print_contact_info(ObjectInfoPanel p_window,java.util.Locale p_locale){
  Collection<BrdItem> contacts=get_normal_contacts();
  if (contacts.isEmpty())   return;
  GuiResources resources=r_board.newGuiResources("board.resources.ObjectInfoPanel");
  p_window.append(", " + resources.getString("contacts") + " ");
  Integer contact_count=contacts.size();
  p_window.append_items(contact_count.toString(),resources.getString("contact_info"),contacts);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

@SuppressWarnings("unchecked") public Promise<Result,Progress> resolve(Result result){
  List<DoneCallback<Result>> doneCallbacks;
  List<AlwaysCallback> alwaysCallbacks;
synchronized (this) {
    validateInPendingState();
    mState=STATE_RESOLVED;
    printStateChanged("RESOLVED");
    mResult=result;
    doneCallbacks=mCallbacks.cloneDoneCallbacks();
    alwaysCallbacks=mCallbacks.cloneAlwaysCallbacks();
    clearCallbacks();
  }
  if (doneCallbacks.size() > 0 || alwaysCallbacks.size() > 0) {
    triggerAllDones(doneCallbacks);
    triggerAllAlways(alwaysCallbacks);
  }
  return this;
}

private void adjustNameAndPosition(Node node,int deltaX,int deltaY){
  String originalName=node.getName();
  String uniqueName=nextUniqueName(originalName);
  if (!uniqueName.equals(originalName)) {
    node.setName(uniqueName);
    node.setCenterX(node.getCenterX() + deltaX);
    node.setCenterY(node.getCenterY() + deltaY);
  }
}

private void createSnapshot(BlockSnapshot snapshot,Snap unitySnap,StorageSystem storage,DbClient dbClient){
  snapshot.setNativeId(unitySnap.getId());
  snapshot.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(storage,snapshot));
  snapshot.setDeviceLabel(unitySnap.getName());
  snapshot.setIsSyncActive(true);
  snapshot.setInactive(false);
  snapshot.setCreationTime(Calendar.getInstance());
  snapshot.setWWN(unitySnap.getAttachedWWN());
  snapshot.setAllocatedCapacity(unitySnap.getSize());
  snapshot.setProvisionedCapacity(unitySnap.getSize());
  dbClient.createObject(snapshot);
}

public void save() throws IOException {
  if (!props.isEmpty()) {
    ConfigurationUtil.saveConfigurationProperties(props,propsFile,false);
  }
  ConfigurationUtil.saveConfigurationProperties(props,new File(propsFile.getParentFile(),propsFile.getName() + ".default"),true);
}

public static int len(String list,String delimiter,boolean ignoreEmpty){
  if (delimiter.length() == 1)   return len(list,delimiter.charAt(0),ignoreEmpty);
  char[] del=delimiter.toCharArray();
  int len=StringUtil.length(list);
  if (len == 0)   return 0;
  int count=0;
  int last=0;
  char c;
  for (int i=0; i < len; i++) {
    c=list.charAt(i);
    for (int y=0; y < del.length; y++) {
      if (c == del[y]) {
        if (!ignoreEmpty || last < i)         count++;
        last=i + 1;
        break;
      }
    }
  }
  if (!ignoreEmpty || last < len)   count++;
  return count;
}

public synchronized void flush() throws IOException {
  checkNotClosed();
  trimToSize();
  journalWriter.flush();
}

public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < identifierCount; i++) {
    builder.append(urlPieces[i]);
    if (identifiers[i] == REPRESENTATION_ID) {
      builder.append(representationId);
    }
 else     if (identifiers[i] == NUMBER_ID) {
      builder.append(String.format(Locale.US,identifierFormatTags[i],segmentNumber));
    }
 else     if (identifiers[i] == BANDWIDTH_ID) {
      builder.append(String.format(Locale.US,identifierFormatTags[i],bandwidth));
    }
 else     if (identifiers[i] == TIME_ID) {
      builder.append(String.format(Locale.US,identifierFormatTags[i],time));
    }
  }
  builder.append(urlPieces[identifierCount]);
  return builder.toString();
}

static void dispose(long pData,long pConfigInfo){
  OGLRenderQueue rq=OGLRenderQueue.getInstance();
  rq.lock();
  try {
    OGLContext.setScratchSurface(pConfigInfo);
    RenderBuffer buf=rq.getBuffer();
    rq.ensureCapacityAndAlignment(12,4);
    buf.putInt(DISPOSE_SURFACE);
    buf.putLong(pData);
    rq.flushNow();
  }
  finally {
    rq.unlock();
  }
}

private void writeKanjiResourceFile(File file) throws IOException {
  FileOutputStream output=null;
  KanjiEscapeOutputStream kanji=null;
  OutputStreamWriter writer=null;
  BufferedWriter w=null;
  try {
    output=new FileOutputStream(file);
    kanji=new KanjiEscapeOutputStream(output);
    writer=new OutputStreamWriter(kanji);
    w=new BufferedWriter(writer);
    w.write(_sb.toString());
  }
  finally {
    Util.close(w);
    Util.close(writer);
    Util.close(kanji);
    Util.close(output);
  }
}

public ScannerException(File file,ErrorMessages message){
  this(file,ErrorMessages.get(message),message,-1,-1);
}

void renderNormal(){
  glEnable(GL_DEPTH_TEST);
  glUseProgram(this.normalProgram);
  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));
  glUniformMatrix4fv(projMatrixUniform,false,projMatrix.get(matrixBuffer));
  glUniformMatrix3fv(normalMatrixUniform,false,normalMatrix.get(matrixBuffer));
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,fbo);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glBindBuffer(GL_ARRAY_BUFFER,this.cubeVbo);
  glEnableVertexAttribArray(0);
  glVertexAttribPointer(0,3,GL_FLOAT,false,0,0L);
  glEnableVertexAttribArray(1);
  glVertexAttribPointer(1,3,GL_FLOAT,false,0,normalsOffset);
  glDrawArrays(GL_TRIANGLES,0,numVertices);
  glDisableVertexAttribArray(0);
  glDisableVertexAttribArray(1);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT,0);
  glUseProgram(0);
}

private <T extends CWLResource>List<T> lookForResources(CWLResourceType type,Class<T> clazz){
  List<T> resources=getRequirements(type,clazz);
  if (resources == null || resources.size() == 0) {
    resources=getHints(type,clazz);
  }
  return resources;
}

private void calcYValueSum(){
  mYValueSum=0;
  for (int i=0; i < mYVals.size(); i++) {
    Entry e=mYVals.get(i);
    if (e != null)     mYValueSum+=Math.abs(e.getVal());
  }
}

@Override public boolean release(int decrement){
  if (isEmpty) {
    return false;
  }
  if (decrement < 1) {
    throw new IllegalStateException(String.format("release(%d) argument is not positive. Buffer Info: %s",decrement,toVerboseString()));
  }
  final int refCnt=ledger.decrement(decrement);
  if (BaseAllocator.DEBUG) {
    historicalLog.recordEvent("release(%d). original value: %d",decrement,refCnt + decrement);
  }
  if (refCnt < 0) {
    throw new IllegalStateException(String.format("ArrowBuf[%d] refCnt has gone negative. Buffer Info: %s",id,toVerboseString()));
  }
  return refCnt == 0;
}

public static void checkArgument(boolean expression,Object errorMessage){
  if (!expression) {
    throw new IllegalArgumentException(String.valueOf(errorMessage));
  }
}

int listSize(){
  int result=memSize();
  for (Iterator it=iterator(); it.hasNext(); ) {
    ASTNode child=(ASTNode)it.next();
    result+=child.treeSize();
  }
  return result;
}

public ConnectionTcp findConnectionByThreadId(long threadId){
  for (  PortTcp listener : getPorts()) {
    ConnectionTcp conn=listener.findConnectionByThreadId(threadId);
    if (conn != null)     return conn;
  }
  return null;
}

public UniformDistribution estimate(double min,double max,final int count){
  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;
  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));
}

public static RepositoryMetaData readFrom(StreamInput in) throws IOException {
  String name=in.readString();
  String type=in.readString();
  Settings settings=Settings.readSettingsFromStream(in);
  return new RepositoryMetaData(name,type,settings);
}

public static boolean isPrimitiveDatatype(IRI datatype){
  return datatype.equals(XMLSchema.DURATION) || datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.DATE)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GDAY)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.STRING)|| datatype.equals(XMLSchema.BOOLEAN)|| datatype.equals(XMLSchema.BASE64BINARY)|| datatype.equals(XMLSchema.HEXBINARY)|| datatype.equals(XMLSchema.FLOAT)|| datatype.equals(XMLSchema.DECIMAL)|| datatype.equals(XMLSchema.DOUBLE)|| datatype.equals(XMLSchema.ANYURI)|| datatype.equals(XMLSchema.QNAME)|| datatype.equals(XMLSchema.NOTATION);
}

protected void appendLine(JComponent c){
  c.setAlignmentX(0.f);
  contents.add(c);
}

private void addLinks(final SpannableString string,final long accountId,final long extraId,final int type,final boolean sensitive,final OnLinkClickListener listener,final int highlightOption){
switch (type) {
case LINK_TYPE_MENTION:
{
      addMentionOrListLinks(string,accountId,extraId,highlightOption,listener);
      break;
    }
case LINK_TYPE_HASHTAG:
{
    addHashtagLinks(string,accountId,extraId,listener,highlightOption);
    break;
  }
case LINK_TYPE_LINK:
{
  final URLSpan[] spans=string.getSpans(0,string.length(),URLSpan.class);
  for (  final URLSpan span : spans) {
    final int start=string.getSpanStart(span);
    final int end=string.getSpanEnd(span);
    if (start < 0 || end > string.length() || start > end) {
      continue;
    }
    string.removeSpan(span);
    applyLink(span.getURL(),start,end,string,accountId,extraId,LINK_TYPE_LINK,sensitive,highlightOption,listener);
  }
  final List<Extractor.Entity> urls=mExtractor.extractURLsWithIndices(ParseUtils.parseString(string));
  for (  final Extractor.Entity entity : urls) {
    final int start=entity.getStart(), end=entity.getEnd();
    if (entity.getType() != Extractor.Entity.Type.URL || string.getSpans(start,end,URLSpan.class).length > 0) {
      continue;
    }
    applyLink(entity.getValue(),start,end,string,accountId,extraId,LINK_TYPE_LINK,sensitive,highlightOption,listener);
  }
  break;
}
case LINK_TYPE_STATUS:
{
final URLSpan[] spans=string.getSpans(0,string.length(),URLSpan.class);
for (final URLSpan span : spans) {
  final Matcher matcher=PATTERN_TWITTER_STATUS.matcher(span.getURL());
  if (matcher.matches()) {
    final int start=string.getSpanStart(span);
    final int end=string.getSpanEnd(span);
    final String url=matcherGroup(matcher,GROUP_ID_TWITTER_STATUS_STATUS_ID);
    string.removeSpan(span);
    applyLink(url,start,end,string,accountId,extraId,LINK_TYPE_STATUS,sensitive,highlightOption,listener);
  }
}
break;
}
case LINK_TYPE_CASHTAG:
{
addCashtagLinks(string,accountId,extraId,listener,highlightOption);
break;
}
default :
{
return;
}
}
}

public void postProcess(){
  if (foreignColumnName != null) {
    foreignAutoRefresh=true;
  }
  if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) {
    maxForeignAutoRefreshLevel=DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL;
  }
}

public boolean contains(Node s){
  runTo(-1);
  if (null == m_map)   return false;
  for (int i=0; i < m_firstFree; i++) {
    Node node=m_map[i];
    if ((null != node) && node.equals(s))     return true;
  }
  return false;
}

private void persistNewTemp(File fileCfg){
  if (hsDeleteOnExit.size() == 0) {
    logDebug(LogArea.CONFIG,"No temp file names to persist on exit.");
    fileCfg.delete();
    return;
  }
  logDebug(LogArea.CONFIG,"Persisting %d temp file names into %s",hsDeleteOnExit.size(),fileCfg.getAbsolutePath());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new FileWriter(fileCfg));
    for (    File file : hsDeleteOnExit) {
      if (!file.delete()) {
        String f=file.getCanonicalPath();
        writer.write(f);
        writer.newLine();
        logWarn(LogArea.JAR,"JVM failed to release %s",f);
      }
    }
  }
 catch (  IOException e) {
  }
 finally {
    if (writer != null) {
      try {
        writer.close();
      }
 catch (      IOException e) {
      }
    }
  }
}

public static double clamp(double value,double low,double high){
  return Math.min(Math.max(value,low),high);
}

public void addWritten(byte[] value){
  writeSetLock.lock();
  writeSet.add(new TimestampValuePair(ets,value));
  writeSetLock.unlock();
}

public void load(Entity unit) throws IllegalArgumentException {
  if (!canLoad(unit)) {
    throw new IllegalArgumentException("Can not load " + unit.getShortName() + " into this bay.");
  }
  currentSpace-=1;
  troops.addElement(unit.getId());
}

private void processWorkerExit(Worker w,boolean completedAbruptly){
  if (completedAbruptly)   decrementWorkerCount();
  final ReentrantLock mainLock=this.mainLock;
  mainLock.lock();
  try {
    completedTaskCount+=w.completedTasks;
    workers.remove(w);
  }
  finally {
    mainLock.unlock();
  }
  tryTerminate();
  int c=ctl.get();
  if (runStateLessThan(c,STOP)) {
    if (!completedAbruptly) {
      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;
      if (min == 0 && !workQueue.isEmpty())       min=1;
      if (workerCountOf(c) >= min)       return;
    }
    addWorker(null,false);
  }
}

public void finish() throws IOException {
  if (!def.finished()) {
    def.finish();
    while (!def.finished()) {
      int len=def.deflate(buf,0,buf.length);
      if (def.finished() && len <= buf.length - TRAILER_SIZE) {
        writeTrailer(buf,len);
        len=len + TRAILER_SIZE;
        out.write(buf,0,len);
        return;
      }
      if (len > 0)       out.write(buf,0,len);
    }
    byte[] trailer=new byte[TRAILER_SIZE];
    writeTrailer(trailer,0);
    out.write(trailer);
  }
}

public boolean free(T obj){
  AtomicInteger topRef=_top;
  while (true) {
    final int top=topRef.get();
    if (_capacity <= top) {
      return false;
    }
    boolean isFree=_freeStack.compareAndSet(top,null,obj);
    topRef.compareAndSet(top,top + 1);
    if (isFree) {
      return true;
    }
  }
}

public static boolean hasBinding(Injector injector,Key<?> key){
  Binding<?> binding=getBinding(injector,key);
  return binding != null;
}

private OpenReplicatorManagerMBean createInternalService(String serviceName) throws ReplicatorException {
  logger.info("Starting replication service: name=" + serviceName);
  try {
    OpenReplicatorManager orm=new OpenReplicatorManager(serviceName);
    orm.setRmiHost(managerRMIHost);
    orm.setRmiPort(managerRMIPort);
    orm.setHostTimeZone(hostTimeZone);
    orm.setReplicatorTimeZone(replicatorTimeZone);
    orm.advertiseInternal();
    orm.setSecurityInfo(this.securityInfo);
    return (OpenReplicatorManagerMBean)orm;
  }
 catch (  Exception e) {
    throw new ReplicatorException(String.format("Unable to instantiate replication service '%s'",serviceName),e);
  }
}

public static CheckIndex.Status checkIndex(Directory dir) throws IOException {
  return checkIndex(dir,true);
}

static void policyChanged(String serviceTypeName,PolicyEvent pe){
  if (DEBUG.messageEnabled()) {
    DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName);
  }
  resourceNamesMap.remove(serviceTypeName);
  Cache resourceNamesCache=(Cache)resourceNamesMap.get(serviceTypeName);
  if ((resourceNamesCache == null) || (resourceNamesCache.isEmpty())) {
    return;
  }
  try {
    DEBUG.error("PolicyEvaluator.policyChanged: enterred try block");
    ServiceTypeManager stm=ServiceTypeManager.getServiceTypeManager();
    ServiceType serviceType=stm.getServiceType(serviceTypeName);
    Set resourceNamesToRemove=new HashSet();
synchronized (resourceNamesCache) {
      Enumeration resourceNames=resourceNamesCache.keys();
      while (resourceNames.hasMoreElements()) {
        String resourceName=(String)resourceNames.nextElement();
        if (resourceNamesToRemove.contains(resourceName)) {
          continue;
        }
        Set affectedResourceNames=pe.getResourceNames();
        Iterator iter=affectedResourceNames.iterator();
        while (iter.hasNext()) {
          String affectedResourceName=(String)iter.next();
          if (serviceType.compare(resourceName,affectedResourceName) != ResourceMatch.NO_MATCH) {
            resourceNamesToRemove.add(resourceName);
          }
        }
      }
      Iterator iter1=resourceNamesToRemove.iterator();
      while (iter1.hasNext()) {
        String resourceNameToRemove=(String)iter1.next();
        resourceNamesCache.remove(resourceNameToRemove);
      }
    }
  }
 catch (  SSOException e) {
    DEBUG.error("PolicyEvaluator.policyChanged:",e);
  }
catch (  PolicyException pex) {
    DEBUG.error("PolicyEvaluator.policyChanged:",pex);
  }
  if (DEBUG.messageEnabled()) {
    DEBUG.message("PolicyEvaulator.policyChanged():serviceTypeName=" + serviceTypeName + ", new cached resoruceNames="+ resourceNamesMap.get(serviceTypeName));
  }
}

private void startHideAnimations(){
  animationPlaying=true;
  lightAnimationLayout();
  if (buttonType.equals(ButtonType.CIRCLE)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(dots[i],circleButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(dots[count],circleButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
 else   if (buttonType.equals(ButtonType.HAM)) {
    if (hideOrderType.equals(OrderType.DEFAULT)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],i);
      }
    }
 else     if (hideOrderType.equals(OrderType.REVERSE)) {
      for (int i=0; i < buttonNum; i++) {
        setHideAnimation(bars[i],hamButtons[i],endLocations[i],startLocations[i],buttonNum - i - 1);
      }
    }
 else     if (hideOrderType.equals(OrderType.RANDOM)) {
      Random random=new Random();
      boolean[] used=new boolean[buttonNum];
      for (int i=0; i < buttonNum; i++)       used[i]=false;
      int count=0;
      while (true) {
        int i=random.nextInt(buttonNum);
        if (!used[i]) {
          used[i]=true;
          setHideAnimation(bars[count],hamButtons[count],endLocations[count],startLocations[count],i);
          count++;
          if (count == buttonNum)           break;
        }
      }
    }
  }
}

public TaggedOutputStream(OutputStream proxy){
  super(proxy);
}

public List<MType> build(){
  isClean=true;
  if (!isMessagesListMutable && builders == null) {
    return messages;
  }
  boolean allMessagesInSync=true;
  if (!isMessagesListMutable) {
    for (int i=0; i < messages.size(); i++) {
      Message message=messages.get(i);
      SingleFieldBuilder<MType,BType,IType> builder=builders.get(i);
      if (builder != null) {
        if (builder.build() != message) {
          allMessagesInSync=false;
          break;
        }
      }
    }
    if (allMessagesInSync) {
      return messages;
    }
  }
  ensureMutableMessageList();
  for (int i=0; i < messages.size(); i++) {
    messages.set(i,getMessage(i,true));
  }
  messages=Collections.unmodifiableList(messages);
  isMessagesListMutable=false;
  return messages;
}

public static void putShort(long addr,short val){
  if (UNALIGNED)   UNSAFE.putShort(addr,val);
 else   putShortByByte(addr,val,BIG_ENDIAN);
}

public static byte[] hashTwice(byte[] input,int offset,int length){
  MessageDigest digest=newDigest();
  digest.update(input,offset,length);
  return digest.digest(digest.digest());
}

public PronounceableFSM(URL url,boolean scanFromFront) throws IOException {
  this.scanFromFront=scanFromFront;
  InputStream is=Utilities.getInputStream(url);
  loadText(is);
  is.close();
}

private char[] applyFloatPadding(final char[] ca4,final boolean noDigits){
  char[] ca5=ca4;
  if (fieldWidthSet) {
    int i;
    int j;
    final int nBlanks;
    if (leftJustify) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < ca4.length; i++) {
          ca5[i]=ca4[i];
        }
        for (j=0; j < nBlanks; j++, i++) {
          ca5[i]=' ';
        }
      }
    }
 else     if (!leadingZeros || noDigits) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        for (i=0; i < nBlanks; i++) {
          ca5[i]=' ';
        }
        for (j=0; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
 else     if (leadingZeros) {
      nBlanks=fieldWidth - ca4.length;
      if (nBlanks > 0) {
        ca5=new char[ca4.length + nBlanks];
        i=0;
        j=0;
        if (ca4[0] == '-') {
          ca5[0]='-';
          i++;
          j++;
        }
        for (int k=0; k < nBlanks; i++, k++) {
          ca5[i]='0';
        }
        for (; j < ca4.length; i++, j++) {
          ca5[i]=ca4[j];
        }
      }
    }
  }
  return ca5;
}

public Object put(String key,Object value){
  final int len=key.length();
  if (len > m_charBuffer.length) {
    m_charBuffer=new char[len];
  }
  Node node=m_Root;
  for (int i=0; i < len; i++) {
    Node nextNode=node.m_nextChar[Character.toLowerCase(key.charAt(i))];
    if (nextNode != null) {
      node=nextNode;
    }
 else {
      for (; i < len; i++) {
        Node newNode=new Node();
        if (m_lowerCaseOnly) {
          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;
        }
 else {
          node.m_nextChar[Character.toUpperCase(key.charAt(i))]=newNode;
          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;
        }
        node=newNode;
      }
      break;
    }
  }
  Object ret=node.m_Value;
  node.m_Value=value;
  return ret;
}

@Override public void makeImmutable(){
  if (isMutable) {
    if (authnStatements != null) {
      int length=authnStatements.size();
      for (int i=0; i < length; i++) {
        AuthnStatement authn=(AuthnStatement)authnStatements.get(i);
        authn.makeImmutable();
      }
      authnStatements=Collections.unmodifiableList(authnStatements);
    }
    if (authzDecisionStatements != null) {
      int length=authzDecisionStatements.size();
      for (int i=0; i < length; i++) {
        AuthzDecisionStatement authz=(AuthzDecisionStatement)authzDecisionStatements.get(i);
        authz.makeImmutable();
      }
      authzDecisionStatements=Collections.unmodifiableList(authzDecisionStatements);
    }
    if (attributeStatements != null) {
      int length=attributeStatements.size();
      for (int i=0; i < length; i++) {
        AttributeStatement attr=(AttributeStatement)attributeStatements.get(i);
        attr.makeImmutable();
      }
      attributeStatements=Collections.unmodifiableList(attributeStatements);
    }
    if (statements != null) {
      statements=Collections.unmodifiableList(statements);
    }
    if (conditions != null) {
      conditions.makeImmutable();
    }
    if (issuer != null) {
      issuer.makeImmutable();
    }
    if (subject != null) {
      subject.makeImmutable();
    }
    if (advice != null) {
      advice.makeImmutable();
    }
    isMutable=false;
  }
}

@Override public String findLibrary(String name){
  String systemName=System.mapLibraryName(name);
  ArrayList<Loader> loaders=getLoaders();
  for (int i=0; i < loaders.size(); i++) {
    Loader loader=loaders.get(i);
    Path path=loader.getPath(systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
    path=loader.getPath("native/" + systemName);
    if (path != null && path.canRead()) {
      return path.getNativePath();
    }
  }
  for (int i=0; i < _nativePath.size(); i++) {
    Path path=_nativePath.get(i);
    if (path.canRead())     return path.getNativePath();
  }
  return super.findLibrary(name);
}

public void removeComponentListener(final ComponentUpdateListener listener){
  componentListeners.remove(listener);
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return APPKEY;
case 2:
  return SEND_TIME;
case 3:
return LOAD_INFO;
case 4:
return STATUS;
default :
return null;
}
}

public static boolean isEmpty(CharSequence text){
  return text == null || text.length() == 0;
}

protected byte[] assertEncodeDecode(final IGangliaMetadataMessage decl,final IGangliaMessage expected){
  if (expected == null)   throw new IllegalArgumentException();
  final XDROutputBuffer xdr=new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE);
  final GangliaMessageEncoder31 messageEncoder=new GangliaMessageEncoder31();
  final GangliaMessageDecoder31 messageDecoder=new GangliaMessageDecoder31();
  if (expected.isMetricRequest()) {
    messageEncoder.writeRequest(xdr,(IGangliaRequestMessage)expected);
  }
 else   if (expected.isMetricMetadata()) {
    messageEncoder.writeMetadata(xdr,(IGangliaMetadataMessage)expected);
  }
 else   if (expected.isMetricValue()) {
    if (decl == null)     throw new IllegalArgumentException("Declaration required for metric value record");
    messageEncoder.writeMetric(xdr,decl,(IGangliaMetricMessage)expected);
  }
 else {
    throw new AssertionError();
  }
  final IGangliaMessage actual=messageDecoder.decode(xdr.getBuffer(),0,xdr.getLength());
  assertEquals("messages not equal()",expected,actual);
  final byte[] actualData=new byte[xdr.getLength()];
  System.arraycopy(xdr.getBuffer(),0,actualData,0,actualData.length);
  return actualData;
}

private boolean isIndexable(String term){
  return (term.length() < 30) && (term.length() > 2);
}

private void sendResponse(String status,String mime,Properties header,InputStream data){
  try {
    if (status == null)     throw new Error("sendResponse(): Status can't be null.");
    OutputStream out=mySocket.getOutputStream();
    PrintWriter pw=new PrintWriter(out);
    pw.print("HTTP/1.0 " + status + " \r\n");
    if (mime != null)     pw.print("Content-Type: " + mime + "\r\n");
    if (header == null || header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");
    if (header != null) {
      Enumeration e=header.keys();
      while (e.hasMoreElements()) {
        String key=(String)e.nextElement();
        String value=header.getProperty(key);
        pw.print(key + ": " + value+ "\r\n");
      }
    }
    pw.print("\r\n");
    pw.flush();
    if (data != null) {
      byte[] buff=new byte[2048];
      while (true) {
        int read=data.read(buff,0,2048);
        if (read <= 0)         break;
        out.write(buff,0,read);
      }
    }
    out.flush();
    out.close();
    if (data != null)     data.close();
  }
 catch (  IOException ioe) {
    try {
      mySocket.close();
    }
 catch (    Throwable t) {
    }
  }
}

public static String decode(String encoded,AMEncryption encr){
  if (checkCaller()) {
    try {
      ISSecurityPermission isp=new ISSecurityPermission("access","adminpassword");
      if (securityManager != null) {
        securityManager.checkPermission(isp);
      }
    }
 catch (    SecurityException e) {
      Debug debug=Debug.getInstance("amSDK");
      debug.error("Security Alert: Unauthorized access to " + "Encoding/Decoding password utility: Returning NULL",e);
      return null;
    }
  }
  if (encoded == null || encoded.length() == 0) {
    return (null);
  }
  byte[] encData=null;
  encData=Base64.decode(encoded.trim());
  if (encData == null) {
    return null;
  }
  byte[] rawData=encr.decrypt(encData);
  if (rawData == null) {
    return (null);
  }
  String answer=null;
  try {
    answer=new String(rawData,"utf-8");
  }
 catch (  UnsupportedEncodingException uue) {
    Debug debug=Debug.getInstance("amSDK");
    debug.error("Crypt:: Unsupported encoding UTF-8",uue);
    answer=new String(rawData);
  }
  return (answer);
}

protected void waitForShutdownSignal() throws InterruptedException {
  if (mutexWaiting == null)   mutexWaiting=new Object();
  try {
synchronized (mutexWaiting) {
      mutexWaiting.wait();
    }
  }
 catch (  InterruptedException e) {
    if (!shutdown)     throw e;
  }
}

public void addConnection(Connection connection){
  if (connection == null)   throw new IllegalArgumentException("connection cannot be null.");
synchronized (connectionsLock) {
    Connection[] newConnections=new Connection[connections.length + 1];
    newConnections[0]=connection;
    System.arraycopy(connections,0,newConnections,1,connections.length);
    connections=newConnections;
  }
  connection.addListener(invokeListener);
  if (TRACE)   trace("kryonet","Added connection to ObjectSpace: " + connection);
}

public double distance(Point2D pt){
  final double x_distance=(pt.getX() - x) * (pt.getX() - x);
  final double y_distance=(pt.getY() - y) * (pt.getY() - y);
  return Math.sqrt(x_distance + y_distance);
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

private static int convertToInt(String value,int defaultValue){
  String trim=value.trim();
  if (trim.length() == 0) {
    return defaultValue;
  }
  return Integer.parseInt(trim);
}

public ChainIterable<T> addItem(@NotNull T item){
  return (ChainIterable<T>)super.add(Collections.<T>singleton(item));
}

private void updateStateView(int itCount,Collection<Individual<Double>> gen){
  Platform.runLater(null);
  simPaneCtrl.waitAfterStep();
}

@Override public void run(){
  try {
    for (; ; ) {
      int n=portGetn(port,bufferAddress,MAX_EVENT_COUNT);
      assert n > 0;
      long address=bufferAddress;
      for (int i=0; i < n; i++) {
        boolean shutdown=processEvent(address);
        if (shutdown)         return;
        address+=SIZEOF_PORT_EVENT;
      }
    }
  }
 catch (  UnixException x) {
    x.printStackTrace();
  }
}

@Override public List<String> allKeys(){
  List<String> nameFiles=new ArrayList<>();
  File[] files=cacheDirectory.listFiles();
  if (files == null)   return nameFiles;
  for (  File file : files) {
    if (file.isFile()) {
      nameFiles.add(file.getName());
    }
  }
  return nameFiles;
}

public DialogueRecorder(DialogueSystem system){
  this.settings=system.getSettings();
}

private String generateUniqueFutureId(){
  return String.valueOf(mIdCounter.getAndIncrement());
}

private static final void rescheduleMissedAlarms(ContentResolver cr,Context context,AlarmManagerInterface manager){
  long now=System.currentTimeMillis();
  long ancient=now - DateUtils.DAY_IN_MILLIS;
  String[] projection=new String[]{CalendarContract.CalendarAlerts.ALARM_TIME};
  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {
    Log.d(TAG,"Manifest.permission.READ_CALENDAR is not granted");
    return;
  }
  Cursor cursor=cr.query(CalendarAlerts.CONTENT_URI,projection,WHERE_RESCHEDULE_MISSED_ALARMS,(new String[]{Long.toString(now),Long.toString(ancient),Long.toString(now)}),SORT_ORDER_ALARMTIME_ASC);
  if (cursor == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,"missed alarms found: " + cursor.getCount());
  }
  try {
    long alarmTime=-1;
    while (cursor.moveToNext()) {
      long newAlarmTime=cursor.getLong(0);
      if (alarmTime != newAlarmTime) {
        if (DEBUG) {
          Log.w(TAG,"rescheduling missed alarm. alarmTime: " + newAlarmTime);
        }
        AlertUtils.scheduleAlarm(context,manager,newAlarmTime);
        alarmTime=newAlarmTime;
      }
    }
  }
  finally {
    cursor.close();
  }
}

public void addName(String name){
  m_names.add(name);
}

@Override default CompletableFuture<OptionalDouble> minDouble(final ToDoubleFunction<? super T> fn){
  return CompletableFuture.supplyAsync(null,getExec());
}

private boolean toState(LifecycleState newState){
  LifecycleState state;
synchronized (this) {
    state=_state;
    _state=newState;
    _lastChangeTime=CurrentTime.currentTime();
  }
  if (_log != null && _log.isLoggable(_lowLevel)) {
    _log.log(_lowLevel,newState + " " + _name);
  }
  notifyListeners(state,newState);
  return true;
}

public boolean initDialog(){
  log.config("");
  gbc.anchor=GridBagConstraints.NORTHWEST;
  gbc.weightx=0;
  gbc.weighty=0;
  gbc.gridy=m_line++;
  gbc.gridx=0;
  gbc.gridwidth=1;
  gbc.insets=nullInset;
  gbc.fill=GridBagConstraints.HORIZONTAL;
  centerPanel.add(Box.createVerticalStrut(10),gbc);
  MClient client=MClient.get(Env.getCtx());
  String ASPFilter="";
  if (client.isUseASP())   ASPFilter="   AND (   p.AD_Process_Para_ID IN ( " + "              SELECT pp.AD_Process_Para_ID " + "                FROM ASP_Process_Para pp, ASP_Process p, ASP_Level l, ASP_ClientLevel cl "+ "               WHERE p.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND cl.AD_Client_ID = " + client.getAD_Client_ID() + "                 AND cl.ASP_Level_ID = l.ASP_Level_ID "+ "                 AND pp.ASP_Process_ID = p.ASP_Process_ID "+ "                 AND pp.IsActive = 'Y' "+ "                 AND p.IsActive = 'Y' "+ "                 AND l.IsActive = 'Y' "+ "                 AND cl.IsActive = 'Y' "+ "                 AND pp.ASP_Status = 'S') "+ "        OR p.AD_Process_Para_ID IN ( "+ "              SELECT AD_Process_Para_ID "+ "                FROM ASP_ClientException ce "+ "               WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "                 AND ce.IsActive = 'Y' "+ "                 AND ce.AD_Process_Para_ID IS NOT NULL "+ "                 AND ce.AD_Tab_ID IS NULL "+ "                 AND ce.AD_Field_ID IS NULL "+ "                 AND ce.ASP_Status = 'S') "+ "       ) "+ "   AND p.AD_Process_Para_ID NOT IN ( "+ "          SELECT AD_Process_Para_ID "+ "            FROM ASP_ClientException ce "+ "           WHERE ce.AD_Client_ID = "+ client.getAD_Client_ID()+ "             AND ce.IsActive = 'Y' "+ "             AND ce.AD_Process_Para_ID IS NOT NULL "+ "             AND ce.AD_Tab_ID IS NULL "+ "             AND ce.AD_Field_ID IS NULL "+ "             AND ce.ASP_Status = 'H')";
  String sql=null;
  if (Env.isBaseLanguage(Env.getCtx(),"AD_Process_Para"))   sql="SELECT p.Name, p.Description, p.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND p.IsActive='Y' " + ASPFilter + " ORDER BY SeqNo";
 else   sql="SELECT t.Name, t.Description, t.Help, " + "p.AD_Reference_ID, p.AD_Process_Para_ID, " + "p.FieldLength, p.IsMandatory, p.IsRange, p.ColumnName, p.ReadOnlyLogic, p.DisplayLogic, "+ "p.DefaultValue, p.DefaultValue2, p.VFormat, p.ValueMin, p.ValueMax, "+ "p.SeqNo, p.AD_Reference_Value_ID, vr.Code AS ValidationCode "+ "FROM AD_Process_Para p"+ " INNER JOIN AD_Process_Para_Trl t ON (p.AD_Process_Para_ID=t.AD_Process_Para_ID)"+ " LEFT OUTER JOIN AD_Val_Rule vr ON (p.AD_Val_Rule_ID=vr.AD_Val_Rule_ID) "+ "WHERE p.AD_Process_ID=?"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND p.IsActive='Y' "+ ASPFilter+ " ORDER BY SeqNo";
  boolean hasFields=false;
  try {
    PreparedStatement pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,m_processInfo.getAD_Process_ID());
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      hasFields=true;
      createField(rs);
    }
    rs.close();
    pstmt.close();
  }
 catch (  SQLException e) {
    log.log(Level.SEVERE,sql,e);
  }
  if (m_mFields.size() != m_mFields2.size() || m_mFields.size() != m_vEditors.size() || m_mFields2.size() != m_vEditors2.size())   log.log(Level.SEVERE,"View & Model vector size is different");
  if (hasFields) {
    gbc.gridy=m_line++;
    centerPanel.add(Box.createVerticalStrut(10),gbc);
    gbc.gridx=3;
    centerPanel.add(Box.createHorizontalStrut(12),gbc);
    AEnv.positionCenterWindow(m_frame,this);
  }
 else   dispose();
  return hasFields;
}

@Override protected String dateToString(DateTimeData date){
  StringBuffer message=new StringBuffer(5);
  message.append('-');
  message.append('-');
  append(message,date.month,2);
  append(message,(char)date.utc,0);
  return message.toString();
}

private void addTest(Test newTest){
  if (m_RuleList == null) {
    m_RuleList=new ArrayList<Test>();
  }
  m_RuleList.add(newTest);
}

public double nextDouble(double alpha,double lambda){
  double a=alpha;
  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;
  double gds, p, q, t, sign_u, u, v, w, x;
  double v1, v2, v12;
  if (a <= 0.0)   throw new IllegalArgumentException();
  if (lambda <= 0.0)   new IllegalArgumentException();
  if (a < 1.0) {
    b=1.0 + 0.36788794412 * a;
    for (; ; ) {
      p=b * randomGenerator.raw();
      if (p <= 1.0) {
        gds=Math.exp(Math.log(p) / a);
        if (Math.log(randomGenerator.raw()) <= -gds)         return (gds / lambda);
      }
 else {
        gds=-Math.log((b - p) / a);
        if (Math.log(randomGenerator.raw()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);
      }
    }
  }
 else {
    if (a != aa) {
      aa=a;
      ss=a - 0.5;
      s=Math.sqrt(ss);
      d=5.656854249 - 12.0 * s;
    }
    do {
      v1=2.0 * randomGenerator.raw() - 1.0;
      v2=2.0 * randomGenerator.raw() - 1.0;
      v12=v1 * v1 + v2 * v2;
    }
 while (v12 > 1.0);
    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);
    x=s + 0.5 * t;
    gds=x * x;
    if (t >= 0.0)     return (gds / lambda);
    u=randomGenerator.raw();
    if (d * u <= t * t * t)     return (gds / lambda);
    if (a != aaa) {
      aaa=a;
      r=1.0 / a;
      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;
      if (a > 3.686) {
        if (a > 13.022) {
          b=1.77;
          si=0.75;
          c=0.1515 / s;
        }
 else {
          b=1.654 + 0.0076 * ss;
          si=1.68 / s + 0.275;
          c=0.062 / s + 0.024;
        }
      }
 else {
        b=0.463 + s - 0.178 * ss;
        si=1.235;
        c=0.195 / s - 0.079 + 0.016 * s;
      }
    }
    if (x > 0.0) {
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (Math.log(1.0 - u) <= q)       return (gds / lambda);
    }
    for (; ; ) {
      do {
        e=-Math.log(randomGenerator.raw());
        u=randomGenerator.raw();
        u=u + u - 1.0;
        sign_u=(u > 0) ? 1.0 : -1.0;
        t=b + (e * si) * sign_u;
      }
 while (t <= -0.71874483771719);
      v=t / (s + s);
      if (Math.abs(v) > 0.25) {
        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);
      }
 else {
        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;
      }
      if (q <= 0.0)       continue;
      if (q > 0.5) {
        w=Math.exp(q) - 1.0;
      }
 else {
        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;
      }
      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
        x=s + 0.5 * t;
        return (x * x / lambda);
      }
    }
  }
}

public void swap(int i,int j){
  x.assertTrue(i < list.size());
  x.assertTrue(j < list.size());
  list.set(i,list.set(j,list.get(i)));
}

private List<NameValuePair> buildIPTParameters(Ipt ipt,String organisationKey){
  List<NameValuePair> data=new ArrayList<NameValuePair>();
  if (ipt != null && organisationKey != null) {
    data.add(new BasicNameValuePair("organisationKey",StringUtils.trimToEmpty(organisationKey)));
    data.add(new BasicNameValuePair("name",StringUtils.trimToEmpty(ipt.getName())));
    data.add(new BasicNameValuePair("description",StringUtils.trimToEmpty(ipt.getDescription())));
    data.add(new BasicNameValuePair("primaryContactType",StringUtils.trimToEmpty(ipt.getPrimaryContactType())));
    data.add(new BasicNameValuePair("primaryContactName",StringUtils.trimToEmpty(ipt.getPrimaryContactName())));
    data.add(new BasicNameValuePair("primaryContactEmail",StringUtils.trimToEmpty(ipt.getPrimaryContactEmail())));
    data.add(new BasicNameValuePair("serviceTypes",SERVICE_TYPE_RSS));
    data.add(new BasicNameValuePair("serviceURLs",getRssFeedURL()));
  }
 else {
    log.debug("One or both of IPT and Organisation key were null. Params needed for ws will be empty");
  }
  return data;
}

public static <T,U extends Closeable>T withCloseable(U self,@ClosureParams(value=FirstParam.class) Closure<T> action) throws IOException {
  try {
    T result=action.call(self);
    Closeable temp=self;
    self=null;
    temp.close();
    return result;
  }
  finally {
    DefaultGroovyMethodsSupport.closeWithWarning(self);
  }
}

public static boolean isMatch(String actualString,LinkedList patterns,char wildCard){
  boolean matched=false;
  for (ListIterator iter=patterns.listIterator(0); iter.hasNext(); ) {
    if (isMatch(actualString,(String)iter.next(),wildCard)) {
      matched=true;
      break;
    }
  }
  return matched;
}

public synchronized void addServer(ServerLocation location,String[] groups,ServerLoad initialLoad,long loadPollInterval){
  serverGroupMap.put(location,groups);
  LoadHolder connectionLoad=new LoadHolder(location,initialLoad.getConnectionLoad(),initialLoad.getLoadPerConnection(),loadPollInterval);
  addGroups(connectionLoadMap,groups,connectionLoad);
  LoadHolder queueLoad=new LoadHolder(location,initialLoad.getSubscriptionConnectionLoad(),initialLoad.getLoadPerSubscriptionConnection(),loadPollInterval);
  addGroups(queueLoadMap,groups,queueLoad);
  updateLoad(location,initialLoad);
}

public void addLeaf(CatalogTreeLeaf leaf){
  _leaves.add(leaf);
}

private static String stampToString(long tstamp,String formatMask){
  StringBuilder sb=new StringBuilder(30);
  Formatter fmt=new Formatter(sb,Locale.US);
  int[] pieces=new int[NUMIDX];
  ComponentTime.unpackBits(tstamp,pieces);
  fmt.format(formatMask,pieces[YIDX],pieces[MIDX],pieces[DIDX],pieces[HIDX],pieces[IIDX],pieces[SIDX],pieces[UIDX]);
  fmt.close();
  return (sb.toString());
}

public HttpRequest contentLength(final String value){
  return contentLength(Integer.parseInt(value));
}

public boolean draw(Canvas canvas){
  update();
  final float centerX=mBounds.centerX();
  final float centerY=mBounds.height() - mRadius;
  canvas.scale(1.f,Math.min(mGlowScaleY,1.f) * mBaseGlowScale,centerX,0);
  final float displacement=Math.max(0,Math.min(mDisplacement,1.f)) - 0.5f;
  float translateX=mBounds.width() * displacement / 2;
  mPaint.setAlpha((int)(0xff * mGlowAlpha));
  canvas.drawCircle(centerX + translateX,centerY,mRadius,mPaint);
  boolean oneLastFrame=false;
  if (mState == STATE_RECEDE && mGlowScaleY == 0) {
    mState=STATE_IDLE;
    oneLastFrame=true;
  }
  return mState != STATE_IDLE || oneLastFrame;
}

public VNXeCommandJob modifyLunAsync(LunModifyParam param,String resourceId){
  StringBuilder urlBld=new StringBuilder(URL_RESOURCE);
  urlBld.append(resourceId);
  urlBld.append(URL_LUN_MODIFY_ACTION);
  _url=urlBld.toString();
  return postRequestAsync(param);
}

public String replace(CharSequence target,CharSequence replacement){
  if (target == null) {
    throw new NullPointerException("target should not be null");
  }
  if (replacement == null) {
    throw new NullPointerException("replacement should not be null");
  }
  String ts=target.toString();
  int index=indexOf(ts,0);
  if (index == -1)   return this;
  String rs=replacement.toString();
  StringBuilder buffer=new StringBuilder(count);
  int tl=target.length();
  int tail=0;
  do {
    buffer.append(value,offset + tail,index - tail);
    buffer.append(rs);
    tail=index + tl;
  }
 while ((index=indexOf(ts,tail)) != -1);
  buffer.append(value,offset + tail,count - tail);
  return buffer.toString();
}

public void delete() throws IOException {
  close();
  deleteContents(directory);
}

public boolean similarTo(Object o){
  if (o == null) {
    return false;
  }
  if (!(o instanceof SemanticConcept)) {
    return false;
  }
  SemanticConcept otherConcept=(SemanticConcept)o;
  HashSet<Integer> synset_intersection=new HashSet<Integer>(this.synsets);
  synset_intersection.retainAll(otherConcept.synsets);
  if (!synset_intersection.isEmpty()) {
    return true;
  }
  HashSet<String> concept_intersection=new HashSet<String>(this.concepts);
  concept_intersection.retainAll(otherConcept.concepts);
  return !concept_intersection.isEmpty();
}

public void jGoogleAnalyticsTracker(final String eventType,final String version,final String trackerId){
  final JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker("vdi_calculator",version,trackerId);
  final FocusPoint focusPoint=new FocusPoint(eventType.toLowerCase());
  tracker.trackAsynchronously(focusPoint);
}

protected final Tuple addInternal(Tuple t){
  if (m_tuples.add(t)) {
    return t;
  }
 else {
    return null;
  }
}

public void put(Song song){
  if (!mSongs.contains(song)) {
    mSongs.add(song);
  }
}

@NotNull public PsiQuery childrenNamed(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){
  final List<PsiElement> result=new ArrayList<PsiElement>();
  for (  final PsiElement element : myPsiElements) {
    for (    final PsiNamedElement child : PsiTreeUtil.findChildrenOfType(element,clazz)) {
      if (name.equals(child.getName())) {
        result.add(child);
      }
    }
  }
  return new PsiQuery(result.toArray(new PsiElement[result.size()]));
}

private void emitMapPut(Method method,String fieldName,StringBuilder builder){
  builder.append("    public void ");
  builder.append(getMapPutterName(fieldName));
  builder.append("(String k, ");
  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),1));
  builder.append(" v) {\n      ");
  builder.append(getEnsureName(fieldName));
  builder.append("();\n      ");
  builder.append(fieldName);
  builder.append(".put(k, v);\n");
  builder.append("    }\n\n");
}

@Override public boolean equals(Object o){
  return o.hashCode() == hashCode();
}

@Override public String toString(){
  if (getUserObject() instanceof TvShow) {
    TvShow tvShow=(TvShow)getUserObject();
    return tvShow.getTitle();
  }
  return super.toString();
}

private ArrayList<String> parseJson(String text){
  text=text.substring(text.indexOf("\\nEvents\\n") + SIZE_OF_EVENTS,text.indexOf("\\n\\n\\nBirths"));
  ArrayList<String> events=new ArrayList<String>();
  if (text.isEmpty()) {
    return events;
  }
  int startIndex=0, endIndex=0;
  while (endIndex != -1) {
    endIndex=text.indexOf("\\n",startIndex + DELIMITER_SIZE);
    String eventText=(endIndex == -1 ? text.substring(startIndex) : text.substring(startIndex,endIndex));
    Pattern pattern=Pattern.compile("\\\\u2013\\s*");
    Matcher matcher=pattern.matcher(eventText);
    eventText=matcher.replaceAll("");
    pattern=Pattern.compile("(^\\d+)");
    matcher=pattern.matcher(eventText);
    if (matcher.find()) {
      eventText=matcher.replaceFirst(matcher.group(1) + ",");
    }
    eventText="In " + eventText;
    startIndex=endIndex + 2;
    events.add(eventText);
  }
  Collections.reverse(events);
  return events;
}

@Override public void removeTableModelListener(TableModelListener l){
  m_Listeners.remove(l);
}

public StrBuilder replace(int startIndex,int endIndex,String replaceStr){
  endIndex=validateRange(startIndex,endIndex);
  int insertLen=(replaceStr == null ? 0 : replaceStr.length());
  replaceImpl(startIndex,endIndex,endIndex - startIndex,replaceStr,insertLen);
  return this;
}

public static void addPermissionRecursive(Path path,PosixFilePermission permission) throws IOException {
  changePermissionsRecursive(path,PermissionChange.ADD,Collections.singleton(permission));
}

private void runTimeoutTask(){
  while (isActive()) {
    reapTimeouts();
    try {
      Thread.sleep(_timeoutReapInterval);
    }
 catch (    Exception e) {
    }
  }
}

public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  VlanVid v;
  IPv4Address i;
  DatapathId d;
  OFPort p;
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  if (vlan == null) {
    v=VlanVid.ofVlan(-1);
  }
 else {
    v=VlanVid.ofVlan(vlan);
  }
  if (ipv4Address == null) {
    i=IPv4Address.NONE;
  }
 else {
    i=IPv4Address.of(ipv4Address);
  }
  if (switchDPID == null) {
    d=DatapathId.of(0);
  }
 else {
    d=DatapathId.of(switchDPID.longValue());
  }
  if (switchPort == null) {
    p=OFPort.ZERO;
  }
 else {
    p=OFPort.of(switchPort);
  }
  IDevice res=learnDeviceByEntity(new Entity(MacAddress.of(macAddress),v,i,d,p,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener("device",listener);
    }
  }
  return res;
}

public static boolean isValidTypeSignature(String sig,boolean allowVoid){
  int len=sig.length();
  return checkTypeSignature(sig,0,len,allowVoid) == len;
}

public void testCase19(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public static boolean hasVisibleChildren(ActionGroup group,PresentationFactory factory,ActionManager actionManager,PerspectiveManager perspectiveManager){
  ActionEvent event=new ActionEvent(factory.getPresentation(group),actionManager,perspectiveManager);
  for (  Action anAction : group.getChildren(event)) {
    if (anAction == null) {
      Log.error(Utils.class,"Null action found in group " + group + ", "+ factory.getPresentation(group));
      continue;
    }
    if (anAction instanceof Separator) {
      continue;
    }
    final Presentation presentation=factory.getPresentation(anAction);
    anAction.update(new ActionEvent(presentation,actionManager,perspectiveManager));
    if (anAction instanceof ActionGroup) {
      ActionGroup childGroup=(ActionGroup)anAction;
      if (childGroup.isPopup()) {
        if (!presentation.isVisible()) {
          continue;
        }
      }
      if (hasVisibleChildren(childGroup,factory,actionManager,perspectiveManager)) {
        return true;
      }
    }
 else     if (presentation.isVisible()) {
      return true;
    }
  }
  return false;
}

private static void checkArgReferences(String typeSnippet,int numberOfArgs){
  Matcher argRefMatcher=ARG_REF_PATTERN.matcher(typeSnippet);
  while (argRefMatcher.find()) {
    int index=Integer.parseInt(argRefMatcher.group(1),10) - 1;
    Preconditions.checkArgument(index >= 0,"%s not allowed, indices start at 1",argRefMatcher.group(0));
    Preconditions.checkArgument(index < numberOfArgs,"%s too large for number of provided type mirrors",argRefMatcher.group(0));
  }
}

public void randomize(){
  randomizeIncomingWeights();
  normalizeIncomingWeights();
}

public static void saveAsImage(int x,int y,int width,int height,String path,CompressFormat compressFormat,int quality) throws FileNotFoundException {
  Bitmap bmp=getPixelsFromBuffer(x,y,width,height);
  try {
    File file=new File(path);
    try {
      file.createNewFile();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    FileOutputStream fos=new FileOutputStream(file);
    bmp.compress(compressFormat,quality,fos);
    try {
      fos.flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      fos.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e) {
    throw (e);
  }
}

private boolean isFileValid(File file,String methodName){
  if (file == null) {
    Log.printConcatLine(name,".",methodName,": Warning - the given file is null.");
    return false;
  }
  String fileName=file.getName();
  if (fileName == null || fileName.length() == 0) {
    Log.printConcatLine(name,"." + methodName,": Warning - invalid file name.");
    return false;
  }
  return true;
}

public void removeSrcClass(SootClass clz){
  srcClasses.remove(clz.getName());
}

private void updateRange(double value){
  mMinValue=Math.min(mMinValue,value);
  mMaxValue=Math.max(mMaxValue,value);
}

JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {
  Scope context=peek();
  if (context != nonempty && context != empty) {
    throw new JSONException("Nesting problem");
  }
  stack.remove(stack.size() - 1);
  if (context == nonempty) {
    newline();
  }
  out.append(closeBracket);
  return this;
}

public void append(byte[] bytes){
  append(bytes,0,bytes.length);
}

public static boolean enoughSpaceOnPhone(long updateSize){
  return getRealSizeOnPhone() > updateSize;
}

public void cancelButtonActionPerformed(){
  editMode=false;
  curNode=null;
  addButton.setVisible(true);
  editButton.setVisible(true);
  deleteButton.setVisible(true);
  doneButton.setVisible(true);
  updateButton.setVisible(false);
  cancelButton.setVisible(false);
  nodeAddrField.setVisible(true);
  nodeAddrStatic.setVisible(false);
  statusText1.setText(stdStatus1);
  statusText2.setText(stdStatus2);
  statusText3.setText(stdStatus3);
}

public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){
  if (attribute == null) {
    throw new NullPointerException("attribute == null");
  }
  if (text.isEmpty()) {
    throw new IllegalArgumentException("text is empty");
  }
  List<Range> ranges=attributeMap.get(attribute);
  if (ranges == null) {
    ranges=new ArrayList<Range>(1);
    attributeMap.put(attribute,ranges);
  }
 else {
    ranges.clear();
  }
  ranges.add(new Range(0,text.length(),value));
}

private Object stringToValue(Object oldValue,String newValue) throws ReplicatorException {
  if (oldValue instanceof String) {
    return newValue;
  }
 else   if (oldValue instanceof Integer) {
    return Integer.valueOf(newValue);
  }
 else   if (oldValue instanceof SerialBlob) {
    try {
      return DatabaseHelper.getSafeBlob(newValue.getBytes());
    }
 catch (    SQLException e) {
      throw new ReplicatorException("Unable to convert back from String to SerialBlob: " + e,e);
    }
  }
 else {
    return newValue;
  }
}

public void addNodesInDocOrder(DTMIterator iterator,XPathContext support){
  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));
  int node;
  while (DTM.NULL != (node=iterator.nextNode())) {
    addNodeInDocOrder(node,support);
  }
}

public String toZString(){
  StringBuilder buffer=new StringBuilder(32);
  try {
    printZ(buffer);
  }
 catch (  IOException e) {
    throw new RuntimeException("Exception printing to StringBuilder",e);
  }
  return buffer.toString();
}

public TrieDictionary<T> build(int baseId){
  byte[] trieBytes=buildTrieBytes(baseId);
  TrieDictionary<T> r=new TrieDictionary<T>(trieBytes);
  return r;
}

public void recordState(DialogueState state,String name){
  states.put(name,state);
  if (!listModel.contains(name)) {
    int position=name.contains(CURRENT) ? 0 : Math.min(2,listModel.size());
    listModel.add(position,name);
  }
}

public int writeUTF8(final CharSequence chars,int off,int len){
  if (len > remaining()) {
    return writeUTF8Slow(chars,off,len);
  }
  final Block block=current;
  int limit=block.limit;
  char ch='\0';
  int octets=0;
  while (len > 0) {
    ch=chars.charAt(off);
    if (ch >= UTF8_2_OCTET_MIN_VALUE) {
      break;
    }
    block.data[limit++]=(byte)ch;
    octets++;
    off++;
    len--;
  }
  block.limit=limit;
  if (len > 0) {
    if (ch < UTF8_3_OCTET_MIN_VALUE) {
      return octets + writeUTF8UpTo2Byte(chars,off,len);
    }
    if (ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST) {
      throw new IllegalArgumentException("Unpaired low surrogate: " + ch);
    }
    if (ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST) {
      return octets + writeUTF8Slow(chars,off,len);
    }
    return octets + writeUTF8UpTo3Byte(chars,off,len);
  }
  return octets;
}

public GeoServerWPSClient(GeoServerConnection connection){
  this.connection=connection;
}

protected ConnectionStateSSLv3(SSLSessionImpl session){
  try {
    CipherSuite cipherSuite=session.cipherSuite;
    boolean is_exportabe=cipherSuite.isExportable();
    hash_size=cipherSuite.getMACLength();
    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;
    int iv_size=cipherSuite.ivSize;
    block_size=cipherSuite.getBlockSize();
    String algName=cipherSuite.getBulkEncryptionAlgorithm();
    String hashName=cipherSuite.getHashName();
    if (logger != null) {
      logger.println("ConnectionStateSSLv3.create:");
      logger.println("  cipher suite name: " + session.getCipherSuite());
      logger.println("  encryption alg name: " + algName);
      logger.println("  hash alg name: " + hashName);
      logger.println("  hash size: " + hash_size);
      logger.println("  block size: " + block_size);
      logger.println("  IV size:" + iv_size);
      logger.println("  key size: " + key_size);
    }
    byte[] clientRandom=session.clientRandom;
    byte[] serverRandom=session.serverRandom;
    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];
    byte[] seed=new byte[clientRandom.length + serverRandom.length];
    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);
    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);
    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);
    byte[] client_mac_secret=new byte[hash_size];
    byte[] server_mac_secret=new byte[hash_size];
    byte[] client_key=new byte[key_size];
    byte[] server_key=new byte[key_size];
    boolean is_client=!session.isServer;
    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);
    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);
    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);
    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);
    IvParameterSpec clientIV=null;
    IvParameterSpec serverIV=null;
    if (is_exportabe) {
      if (logger != null) {
        logger.println("ConnectionStateSSLv3: is_exportable");
      }
      MessageDigest md5=MessageDigest.getInstance("MD5");
      md5.update(client_key);
      md5.update(clientRandom);
      md5.update(serverRandom);
      client_key=md5.digest();
      md5.update(server_key);
      md5.update(serverRandom);
      md5.update(clientRandom);
      server_key=md5.digest();
      key_size=cipherSuite.expandedKeyMaterial;
      if (block_size != 0) {
        md5.update(clientRandom);
        md5.update(serverRandom);
        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);
        md5.update(serverRandom);
        md5.update(clientRandom);
        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);
      }
    }
 else     if (block_size != 0) {
      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);
      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);
    }
    if (logger != null) {
      logger.println("is exportable: " + is_exportabe);
      logger.println("master_secret");
      logger.print(session.master_secret);
      logger.println("client_random");
      logger.print(clientRandom);
      logger.println("server_random");
      logger.print(serverRandom);
      logger.println("client_mac_secret");
      logger.print(client_mac_secret);
      logger.println("server_mac_secret");
      logger.print(server_mac_secret);
      logger.println("client_key");
      logger.print(client_key,0,key_size);
      logger.println("server_key");
      logger.print(server_key,0,key_size);
      if (clientIV != null) {
        logger.println("client_iv");
        logger.print(clientIV.getIV());
        logger.println("server_iv");
        logger.print(serverIV.getIV());
      }
 else {
        logger.println("no IV.");
      }
    }
    if (algName == null) {
      encCipher=new NullCipher();
      decCipher=new NullCipher();
    }
 else {
      encCipher=Cipher.getInstance(algName);
      decCipher=Cipher.getInstance(algName);
      if (is_client) {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
      }
 else {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
      }
    }
    messageDigest=MessageDigest.getInstance(hashName);
    if (is_client) {
      mac_write_secret=client_mac_secret;
      mac_read_secret=server_mac_secret;
    }
 else {
      mac_write_secret=server_mac_secret;
      mac_read_secret=client_mac_secret;
    }
    if (hashName.equals("MD5")) {
      pad_1=SSLv3Constants.MD5pad1;
      pad_2=SSLv3Constants.MD5pad2;
    }
 else {
      pad_1=SSLv3Constants.SHApad1;
      pad_2=SSLv3Constants.SHApad2;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));
  }
}

static boolean verifyZipFile(File file){
  try {
    ZipFile zipFile=new ZipFile(file);
    try {
      zipFile.close();
      return true;
    }
 catch (    IOException e) {
      Log.w(TAG,"Failed to close zip file: " + file.getAbsolutePath());
    }
  }
 catch (  ZipException ex) {
    Log.w(TAG,"File " + file.getAbsolutePath() + " is not a valid zip file.",ex);
  }
catch (  IOException ex) {
    Log.w(TAG,"Got an IOException trying to open zip file: " + file.getAbsolutePath(),ex);
  }
  return false;
}

long cleanup(long now){
  int inUseConnectionCount=0;
  int idleConnectionCount=0;
  RealConnection longestIdleConnection=null;
  long longestIdleDurationNs=Long.MIN_VALUE;
synchronized (this) {
    for (Iterator<RealConnection> i=connections.iterator(); i.hasNext(); ) {
      RealConnection connection=i.next();
      if (pruneAndGetAllocationCount(connection,now) > 0) {
        inUseConnectionCount++;
        continue;
      }
      idleConnectionCount++;
      long idleDurationNs=now - connection.idleAtNanos;
      if (idleDurationNs > longestIdleDurationNs) {
        longestIdleDurationNs=idleDurationNs;
        longestIdleConnection=connection;
      }
    }
    if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) {
      connections.remove(longestIdleConnection);
    }
 else     if (idleConnectionCount > 0) {
      return keepAliveDurationNs - longestIdleDurationNs;
    }
 else     if (inUseConnectionCount > 0) {
      return keepAliveDurationNs;
    }
 else {
      cleanupRunning=false;
      return -1;
    }
  }
  closeQuietly(longestIdleConnection.socket());
  return 0;
}

public StateInfo(){
}

public boolean compare(Object expected,Object current){
  if (current != null) {
    equal=current.equals(expected);
  }
 else   if (expected != null) {
    equal=expected.equals(1.0);
  }
  return equal;
}

private static byte[] generateSeed(){
  try {
    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();
    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);
    seedBufferOut.writeLong(System.currentTimeMillis());
    seedBufferOut.writeLong(System.nanoTime());
    seedBufferOut.writeInt(Process.myPid());
    seedBufferOut.writeInt(Process.myUid());
    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);
    seedBufferOut.close();
    return seedBuffer.toByteArray();
  }
 catch (  IOException e) {
    throw new SecurityException("Failed to generate seed",e);
  }
}

boolean needToCheckExclude(){
  return false;
}

public static byte[] decode(String hexa) throws CoderException {
  if (hexa == null) {
    throw new CoderException("can't decode empty String");
  }
  if ((hexa.length() % 2) != 0) {
    throw new CoderException("invalid hexadicimal String");
  }
  int tamArray=hexa.length() / 2;
  byte[] retorno=new byte[tamArray];
  for (int i=0; i < tamArray; i++) {
    retorno[i]=hexToByte(hexa.substring(i * 2,i * 2 + 2));
  }
  return retorno;
}

private List<UserNamespaceAuthorization> createUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities){
  List<UserNamespaceAuthorization> userNamespaceAuthorizations=new ArrayList<>();
  for (  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities) {
    userNamespaceAuthorizations.add(createUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity));
  }
  return userNamespaceAuthorizations;
}

private void readHeader() throws OpenStegoException {
  this.dataHeader=new DCTDataHeader(this,this.config);
}

@Override public synchronized void reset(){
  pos=0;
}

protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {
  BigInteger p, q, g, x, y;
  if (key != null) {
    if (keySpec == null) {
      throw new NullPointerException("keySpec == null");
    }
    if (key instanceof DSAPrivateKey) {
      DSAPrivateKey privateKey=(DSAPrivateKey)key;
      if (keySpec.equals(DSAPrivateKeySpec.class)) {
        x=privateKey.getX();
        DSAParams params=privateKey.getParams();
        p=params.getP();
        q=params.getQ();
        g=params.getG();
        return (T)(new DSAPrivateKeySpec(x,p,q,g));
      }
      if (keySpec.equals(PKCS8EncodedKeySpec.class)) {
        return (T)(new PKCS8EncodedKeySpec(key.getEncoded()));
      }
      throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");
    }
    if (key instanceof DSAPublicKey) {
      DSAPublicKey publicKey=(DSAPublicKey)key;
      if (keySpec.equals(DSAPublicKeySpec.class)) {
        y=publicKey.getY();
        DSAParams params=publicKey.getParams();
        p=params.getP();
        q=params.getQ();
        g=params.getG();
        return (T)(new DSAPublicKeySpec(y,p,q,g));
      }
      if (keySpec.equals(X509EncodedKeySpec.class)) {
        return (T)(new X509EncodedKeySpec(key.getEncoded()));
      }
      throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");
    }
  }
  throw new InvalidKeySpecException("'key' is neither DSAPublicKey nor DSAPrivateKey");
}

protected void drawText(String text1,String text2,int x,int y,Canvas c){
  if (textPaint == null) {
    Paint p=new Paint();
    p.setTypeface(RobotoLightTypeface.getInstance(context));
    p.setColor(textColor);
    p.setTextSize(14 * pixelDensity);
    this.textPaint=p;
  }
  float w=textPaint.measureText(text1,0,text1.length());
  int offset=(int)w / 2;
  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);
  w=textPaint.measureText(text2,0,text2.length());
  offset=(int)w / 2;
  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);
}

public boolean isLessThenOrEqualTo(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) <= 0);
}

public Object clone() throws CloneNotSupportedException {
  PredicatedNodeTest clone=(PredicatedNodeTest)super.clone();
  if ((null != this.m_proximityPositions) && (this.m_proximityPositions == clone.m_proximityPositions)) {
    clone.m_proximityPositions=new int[this.m_proximityPositions.length];
    System.arraycopy(this.m_proximityPositions,0,clone.m_proximityPositions,0,this.m_proximityPositions.length);
  }
  if (clone.m_lpi == this)   clone.m_lpi=(LocPathIterator)clone;
  return clone;
}

public static boolean pointOutsidePrefSize(JTable table,int row,int column,Point p){
  if (table.convertColumnIndexToModel(column) != 0 || row == -1) {
    return true;
  }
  TableCellRenderer tcr=table.getCellRenderer(row,column);
  Object value=table.getValueAt(row,column);
  Component cell=tcr.getTableCellRendererComponent(table,value,false,false,row,column);
  Dimension itemSize=cell.getPreferredSize();
  Rectangle cellBounds=table.getCellRect(row,column,false);
  cellBounds.width=itemSize.width;
  cellBounds.height=itemSize.height;
  assert (p.x >= cellBounds.x && p.y >= cellBounds.y);
  return p.x > cellBounds.x + cellBounds.width || p.y > cellBounds.y + cellBounds.height;
}

public Builder addSourceFolder(@NonNull File folder){
  foldersToScan.add(folder);
  return this;
}

public Method suspendSRDFGroupMethod(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes){
  return new Workflow.Method(SUSPEND_SRDF_GROUP_METHOD,systemURI,group,sourceVolumes,targetVolumes);
}

private void fieldGoalAtt(Team offense,Team defense){
  double fgDistRatio=Math.pow((110 - gameYardLine) / 50,2);
  double fgAccRatio=Math.pow((110 - gameYardLine) / 50,1.25);
  double fgDistChance=(getHFadv() + offense.getK(0).ratKickPow - fgDistRatio * 80);
  double fgAccChance=(getHFadv() + offense.getK(0).ratKickAcc - fgAccRatio * 80);
  if (fgDistChance > 20 && fgAccChance * Math.random() > 15) {
    if (gamePoss) {
      homeScore+=3;
      HomeKStats[3]++;
      HomeKStats[2]++;
    }
 else {
      awayScore+=3;
      AwayKStats[3]++;
      AwayKStats[2]++;
    }
    gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " made the "+ (110 - gameYardLine)+ " yard FG.";
    addPointsQuarter(3);
    offense.getK(0).statsFGMade++;
    offense.getK(0).statsFGAtt++;
    if (!playingOT)     kickOff(offense);
 else     resetForOT();
  }
 else {
    gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " missed the "+ (110 - gameYardLine)+ " yard FG.";
    offense.getK(0).statsFGAtt++;
    if (!playingOT) {
      gameYardLine=Math.max(100 - gameYardLine,20);
      gameDown=1;
      gameYardsNeed=10;
      if (gamePoss) {
        HomeKStats[3]++;
      }
 else {
        AwayKStats[3]++;
      }
      gamePoss=!gamePoss;
    }
 else     resetForOT();
  }
  gameTime-=20;
}

public static final byte[] unzip(byte[] in) throws IOException {
  ByteArrayOutputStream outStream=new ByteArrayOutputStream(EXPECTED_COMPRESSION_RATIO * in.length);
  GZIPInputStream inStream=new GZIPInputStream(new ByteArrayInputStream(in));
  byte[] buf=new byte[BUF_SIZE];
  while (true) {
    int size=inStream.read(buf);
    if (size <= 0)     break;
    outStream.write(buf,0,size);
  }
  outStream.close();
  return outStream.toByteArray();
}

@Override public double calculateM(double delta,double epsilon){
  double i=1;
  while (conf(i,delta) > epsilon / 2.0d) {
    i=i + 10000;
  }
  if (i > 1) {
    i=i - 10000;
  }
  while (conf(i,delta) > (epsilon / 2.0d)) {
    i++;
  }
  return Math.ceil(i);
}

public static ServerSocket createServerSocket(int port,InetAddress bindAddress) throws IOException {
  ServerSocket socket=null;
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    removeAnonFromLegacyAlgorithms();
  }
  setKeystore();
  ServerSocketFactory f=SSLServerSocketFactory.getDefault();
  SSLServerSocket secureSocket;
  if (bindAddress == null) {
    secureSocket=(SSLServerSocket)f.createServerSocket(port);
  }
 else {
    secureSocket=(SSLServerSocket)f.createServerSocket(port,0,bindAddress);
  }
  secureSocket.setEnabledProtocols(disableSSL(secureSocket.getEnabledProtocols()));
  if (SysProperties.ENABLE_ANONYMOUS_TLS) {
    String[] list=enableAnonymous(secureSocket.getEnabledCipherSuites(),secureSocket.getSupportedCipherSuites());
    secureSocket.setEnabledCipherSuites(list);
  }
  socket=secureSocket;
  return socket;
}

public void printBytes(byte[] data,int offset,int length) throws IOException {
  int i;
  for (; length >= 3; length-=3) {
    int chunk=(((data[offset] & 0xff) << 16) + ((data[offset + 1] & 0xff) << 8) + (data[offset + 2] & 0xff));
    os.write(base64encode(chunk >> 18));
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    offset+=3;
  }
  if (length == 2) {
    int chunk=((data[offset] & 0xff) << 8) + (data[offset + 1] & 0xff);
    os.write(base64encode(chunk >> 12));
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
  }
 else   if (length == 1) {
    int chunk=data[offset] & 0xff;
    os.write(base64encode(chunk >> 6));
    os.write(base64encode(chunk));
    os.write('=');
    os.write('=');
  }
}

public void deleteVVset(String nativeId) throws Exception {
  _log.info("3PARDriver: deleteVVset enter");
  ClientResponse clientResp=null;
  final String path=MessageFormat.format(URI_DELETE_CG,nativeId);
  _log.info("3PARDriver:deleteVVset running delete VV Set " + path);
  try {
    clientResp=delete(path);
    if (clientResp == null) {
      _log.error("3PARDriver:deleteVVset There is no response from 3PAR");
      throw new HP3PARException("There is no response from 3PAR");
    }
 else     if (clientResp.getStatus() != 200) {
      String errResp=getResponseDetails(clientResp);
      throw new HP3PARException(errResp);
    }
 else {
      _log.info("3PARDriver: deleteVVset success");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    if (clientResp != null) {
      clientResp.close();
    }
    _log.info("3PARDriver:deleteVVset leave");
  }
}

public void accept(final AnnotationVisitor av){
  if (av != null) {
    if (values != null) {
      for (int i=0; i < values.size(); i+=2) {
        String name=(String)values.get(i);
        Object value=values.get(i + 1);
        accept(av,name,value);
      }
    }
    av.visitEnd();
  }
}

private int findKeyCommentIndex(String keyName){
  for (int i=0; i < keyValComments.size(); i++) {
    String t=keyValComments.get(i);
    String targetedKey="! " + keyName + ": ";
    if (t.startsWith(targetedKey)) {
      return i;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("Did not find key " + keyName);
  }
  return -1;
}

public boolean isExpired(){
  return (cookieExpiryDate != null && cookieExpiryDate.getTime() <= System.currentTimeMillis());
}

public static void closeQuietly(Closeable closeable){
  if (closeable != null) {
    try {
      closeable.close();
    }
 catch (    RuntimeException rethrown) {
      throw rethrown;
    }
catch (    Exception ignored) {
    }
  }
}

public static boolean isAddToHomeIntentSupported(Context context){
  PackageManager pm=context.getPackageManager();
  Intent i=new Intent(INSTALL_SHORTCUT);
  List<ResolveInfo> receivers=pm.queryBroadcastReceivers(i,PackageManager.GET_INTENT_FILTERS);
  return !receivers.isEmpty();
}

public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){
  mIconWidthPx=iconWidthPx;
  mIconHeightPx=iconHeightPx;
  mCornerRadiusPx=cornerRadiusPx;
  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);
  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBackgroundPaint.setColor(backgroundColor);
  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  mTextPaint.setColor(Color.WHITE);
  mTextPaint.setFakeBoldText(true);
  mTextPaint.setTextSize(textSizePx);
  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();
  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);
  mTextYOffset=-textFontMetrics.top;
}

InMemoryEntryStore(){
  entries=Maps.newHashMap();
  topLevelEntries=Sets.newHashSet();
  children=HashMultimap.create();
}

public void persistConnection(Connection connection) throws PersistenceException {
  MqttConnectOptions conOpts=connection.getConnectionOptions();
  MqttMessage lastWill=conOpts.getWillMessage();
  SQLiteDatabase db=getWritableDatabase();
  ContentValues values=new ContentValues();
  values.put(COLUMN_HOST,connection.getHostName());
  values.put(COLUMN_port,connection.getPort());
  values.put(COLUMN_client_ID,connection.getId());
  values.put(COLUMN_ssl,connection.isSSL());
  values.put(COLUMN_KEEP_ALIVE,conOpts.getKeepAliveInterval());
  values.put(COLUMN_TIME_OUT,conOpts.getConnectionTimeout());
  values.put(COLUMN_USER_NAME,conOpts.getUserName());
  values.put(COLUMN_TOPIC,conOpts.getWillDestination());
  char[] password=conOpts.getPassword();
  values.put(COLUMN_CLEAN_SESSION,conOpts.isCleanSession() ? 1 : 0);
  values.put(COLUMN_PASSWORD,password != null ? String.valueOf(password) : null);
  values.put(COLUMN_MESSAGE,lastWill != null ? new String(lastWill.getPayload()) : null);
  values.put(COLUMN_QOS,lastWill != null ? lastWill.getQos() : 0);
  if (lastWill == null) {
    values.put(COLUMN_RETAINED,0);
  }
 else {
    values.put(COLUMN_RETAINED,lastWill.isRetained() ? 1 : 0);
  }
  long newRowId=db.insert(TABLE_CONNECTIONS,null,values);
  db.close();
  if (newRowId == -1) {
    throw new PersistenceException("Failed to persist connection: " + connection.handle());
  }
 else {
    connection.assignPersistenceId(newRowId);
  }
}

public ClassAnnotator(URL[] codebase,Properties props){
  if (props != null)   properties.putAll(props);
  setAnnotationURLs(codebase);
}

public int next(){
  return mix(gen.getAndIncrement());
}

public CholeskyDecomposition(Matrix Arg){
  double[][] A=Arg.getArray();
  n=Arg.getRowDimension();
  L=new double[n][n];
  isspd=(Arg.getColumnDimension() == n);
  for (int j=0; j < n; j++) {
    double[] Lrowj=L[j];
    double d=0.0;
    for (int k=0; k < j; k++) {
      double[] Lrowk=L[k];
      double s=0.0;
      for (int i=0; i < k; i++) {
        s+=Lrowk[i] * Lrowj[i];
      }
      Lrowj[k]=s=(A[j][k] - s) / L[k][k];
      d=d + s * s;
      isspd=isspd & (A[k][j] == A[j][k]);
    }
    d=A[j][j] - d;
    isspd=isspd & (d > 0.0);
    L[j][j]=Math.sqrt(Math.max(d,0.0));
    for (int k=j + 1; k < n; k++) {
      L[j][k]=0.0;
    }
  }
}

public InputStream put(final URLConnection connection,final boolean flushCacheOnClose){
  final String key=getKey(connection);
  if (key == null)   return null;
  if (!isCacheable((HttpURLConnection)connection))   try {
    cache.remove(key);
    return null;
  }
 catch (  IOException e) {
    return null;
  }
  String etag=connection.getHeaderField(HEADER_ETAG);
  if (etag == null || etag.length() == 0)   return null;
  Editor editor;
  try {
    editor=cache.edit(key);
  }
 catch (  IOException e) {
    return null;
  }
  if (editor == null)   return null;
  try {
    editor.set(ETAG,etag);
  }
 catch (  IOException e) {
    try {
      editor.abort();
    }
 catch (    IOException ignored) {
    }
    return null;
  }
  InputStream input;
  try {
    input=connection.getInputStream();
    if (!(input instanceof InflaterInputStream) && ENCODING_GZIP.equals(connection.getHeaderField(HEADER_CONTENT_ENCODING)))     input=new GZIPInputStream(input);
  }
 catch (  IOException e) {
    return null;
  }
  OutputStream output;
  try {
    output=editor.newOutputStream(BODY);
  }
 catch (  IOException e) {
    return null;
  }
  if (output != null)   return new CacheStream(input,output,editor,this,flushCacheOnClose);
 else   return null;
}

public static String[] parseTitle(String title){
  String v[]={"",""};
  if (title == null)   return v;
  Pattern p=Pattern.compile("(.*)\\s+\\(?([0-9]{4})\\)?",Pattern.CASE_INSENSITIVE);
  Matcher m=p.matcher(title);
  if (m.find()) {
    v[0]=m.group(1);
    v[1]=m.group(2);
  }
 else {
    v[0]=title;
  }
  return v;
}

public String sel(){
  return mSelection.toString();
}

public double calculateExcitatoryRatio(){
  excitatoryRatio=exSynapseSet.size() / (double)size();
  if (Double.isNaN(excitatoryRatio)) {
    return 0;
  }
  return excitatoryRatio;
}

public void rootRemoved(ISVNRepositoryLocation root){
  Iterator it=listeners.iterator();
  while (it.hasNext()) {
    IRepositoryListener listener=(IRepositoryListener)it.next();
    listener.repositoryRemoved(root);
  }
}

public synchronized void insert(double _priority,Object _data){
  numElements++;
  if (numElements == queue.length) {
    PriorityQueueNode[] tmp=new PriorityQueueNode[(int)(queue.length * 1.5)];
    System.arraycopy(queue,0,tmp,0,queue.length);
    for (int i=queue.length; i < tmp.length; i++) {
      tmp[i]=new PriorityQueueNode();
    }
    queue=tmp;
  }
  queue[numElements].data=_data;
  queue[numElements].priority=_priority;
  reheapify(numElements);
}

protected Message(){
}

protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {
  String setGroup="export GROUP_NAME=`(getent group " + getGid() + " || (groupadd -g "+ getGid()+ " user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`";
  String setUser="export USER_NAME=`(getent passwd " + getUid() + " || (useradd -u "+ getUid()+ " -g ${GROUP_NAME} user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`";
  String chownCommand="chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true";
  return setGroup + " && " + setUser+ " && "+ chownCommand+ " && "+ command+ " && "+ chownCommand;
}

public AbstractDMLQuery parseSqlQuery(SQLQuery sqlQuery,ISpaceProxy space) throws SQLException {
  AbstractDMLQuery query=(AbstractDMLQuery)getQueryFromCache(getUniqueKey(sqlQuery));
  try {
    if (query == null) {
      if (_logger.isLoggable(Level.FINE)) {
        _logger.fine("Query wasn't in cache, will be parsed");
      }
      SqlParser parser=initParser(sqlQuery.getQuery());
      query=parse(parser);
      query.setTableName(sqlQuery.getTypeName());
      query.validateQuery(space);
      if (!query.isPrepared() && !query.containsSubQueries())       query.build();
      addQueryToCache(getUniqueKey(sqlQuery),query);
      if (!query.isPrepared())       return query;
    }
    query=query.clone();
    return query;
  }
 catch (  SQLException sqlEx) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,"Error executing statement [" + sqlQuery.getQuery() + "]",sqlEx);
    }
    throw sqlEx;
  }
catch (  Throwable t) {
    if (_logger.isLoggable(Level.FINE)) {
      _logger.log(Level.FINE,"Couldn't parse given statement [" + sqlQuery.getQuery() + "]",t);
    }
    SQLException sqlEx=new SQLException("Error in statement [" + sqlQuery.getQuery() + "]; Cause: "+ t,"GSP",-201);
    sqlEx.initCause(t);
    throw sqlEx;
  }
}

private int indexOfElementInLevel(int element,int level[]) throws Exception {
  for (int i=0; i < level.length; i++) {
    if (level[i] == element) {
      return i;
    }
  }
  throw new Exception("Error. Didn't find element " + m_nodes.get(element).ID + " in level. Inspect code for "+ "weka.gui.graphvisualizer.HierarchicalBCEngine");
}

public int size(){
  return _attrs.size();
}

public String consumeTagName(){
  int start=pos;
  while (!isEmpty() && (matchesWord() || matchesAny(':','_','-')))   pos++;
  return queue.substring(start,pos);
}

public void deepSort(int[] setFeatureSequence){
  featureSequence=setFeatureSequence;
  numberOfLeaves=0;
  tree=new MaryNode(0,featureVectors.length);
  sortNode(0,tree);
}

public void removeListeners(){
  listeners.clear();
}

public String decrypt(String sCipherText){
  int nLen=(sCipherText.length() >> 1) & ~7;
  if (nLen < BlowfishECB.BLOCKSIZE)   return null;
  byte[] cbciv=new byte[BlowfishECB.BLOCKSIZE];
  int nNumOfBytes=BinConverter.binHexToBytes(sCipherText,cbciv,0,0,BlowfishECB.BLOCKSIZE);
  if (nNumOfBytes < BlowfishECB.BLOCKSIZE)   return null;
  m_bfish.setCBCIV(cbciv);
  nLen-=BlowfishECB.BLOCKSIZE;
  if (nLen == 0)   return "";
  byte[] buf=new byte[nLen];
  nNumOfBytes=BinConverter.binHexToBytes(sCipherText,buf,BlowfishECB.BLOCKSIZE * 2,0,nLen);
  if (nNumOfBytes < nLen)   return null;
  m_bfish.decrypt(buf);
  int nPadByte=buf[buf.length - 1] & 0x0ff;
  if ((nPadByte > 8) || (nPadByte < 0))   nPadByte=0;
  nNumOfBytes-=nPadByte;
  if (nNumOfBytes < 0)   return "";
  return BinConverter.byteArrayToUNCString(buf,0,nNumOfBytes);
}

public static double L_RankLoss(int y[],int r[]){
  int L=y.length;
  ArrayList<Integer> tI=new ArrayList<Integer>();
  ArrayList<Integer> fI=new ArrayList<Integer>();
  for (int j=0; j < L; j++) {
    if (y[j] == 1) {
      tI.add(j);
    }
 else {
      fI.add(j);
    }
  }
  if (!tI.isEmpty() && !fI.isEmpty()) {
    int c=0;
    for (    int k : tI) {
      for (      int l : fI) {
        if (position(k,r) < position(l,r)) {
          c++;
        }
      }
    }
    return (double)c / (double)(tI.size() * fI.size());
  }
 else {
    return 0.0;
  }
}

private double addRecursively(ArrayList<double[]> hull,Hierarchy<Cluster<Model>> hier,Cluster<Model> clus){
  final DBIDs ids=clus.getIDs();
  double weight=ids.size();
  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {
    double[] projP=proj.fastProjectDataToRenderSpace(rel.get(iter));
    if (projP[0] != projP[0] || projP[1] != projP[1]) {
      continue;
    }
    hull.add(projP);
  }
  for (Iter<Cluster<Model>> iter=hier.iterChildren(clus); iter.valid(); iter.advance()) {
    weight+=.5 * addRecursively(hull,hier,iter.get());
  }
  return weight;
}

public void attributeUpdate(PrintServiceAttributeEvent psae){
  log.fine("attributeUpdate - " + psae);
}

public static boolean decodeToFile(String dataToDecode,String filename){
  boolean success=false;
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
    success=true;
  }
 catch (  java.io.IOException e) {
    success=false;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
  return success;
}

public void evict() throws Exception {
  assertOpen();
  boolean isEmpty;
synchronized (this) {
    isEmpty=pool.isEmpty();
  }
  if (!isEmpty) {
    if (softMinEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle() - getMinIdle();
      evict(System.currentTimeMillis() - softMinEvictableIdleTimeMillis,numToEvict);
    }
    if (minEvictableIdleTimeMillis > 0) {
      int numToEvict=getNumIdle();
      evict(System.currentTimeMillis() - minEvictableIdleTimeMillis,numToEvict);
    }
  }
}

protected void generateRandomPopulation(int population_size){
  logger.debug("Creating random population");
  for (int i=0; i < population_size; i++) {
    T individual=chromosomeFactory.getChromosome();
    for (    FitnessFunction<?> fitnessFunction : this.fitnessFunctions) {
      individual.addFitness(fitnessFunction);
    }
    population.add(individual);
    if (isFinished())     break;
  }
  logger.debug("Created " + population.size() + " individuals");
}

public Session(){
  long uptime=System.currentTimeMillis();
  mMainHandler=new Handler(Looper.getMainLooper());
  mTimestamp=(uptime / 1000) << 32 & (((uptime - ((uptime / 1000) * 1000)) >> 32) / 1000);
  mOrigin="127.0.0.1";
  try {
    sSignal.await();
  }
 catch (  InterruptedException e) {
  }
}

public List<Visitante> listar(){
  List<Visitante> dados=new ArrayList<>();
  try {
    String sql="SELECT tb_visitantes.* FROM tb_visitantes ";
    stm=conector.prepareStatement(sql);
    rs=stm.executeQuery(sql);
    while (rs.next()) {
      dados.add(new Visitante(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),Tempo.toDate(rs.getTimestamp(7)),rs.getString(8),rs.getString(9)));
    }
    stm.close();
    rs.close();
  }
 catch (  SQLException ex) {
    Mensagem.erro("Erro ao consultar visitantes na base de dados! \n" + ex);
  }
  return dados;
}

private void assertAllFromTbl1(Statement stmt,String[] ones,short[] twos) throws SQLException {
  ResultSet rs=stmt.executeQuery("select * from tbl1");
  int i=0;
  for (; rs.next(); i++) {
    assertTrue(i < ones.length);
    assertEquals(ones[i],rs.getString("one"));
    assertEquals(twos[i],rs.getShort("two"));
  }
  assertTrue(i == ones.length);
}

@Override public Writer append(char value){
  builder.append(value);
  return this;
}

private void insertBefore(Instruction[] list,Instruction s){
  for (  Instruction x : list) {
    s.insertBefore(x);
  }
}

public static Builder newBuilder(){
  return new Builder();
}

public int countArray(String[] array){
  return array.length;
}

private void processUnprocessed(){
  boolean clean_processings=Boolean.getBoolean("Archive.processings.clean");
  logger.info("Archives processing clean instead of recovery " + "(Archive.processings.clean) requested by user (" + clean_processings + ")");
  productService.processUnprocessed(!clean_processings);
}

public double[] popy(double x_[]){
  return popY(new double[][]{x_})[0];
}

public void gotoFrame(int frameNumber) throws IOException {
  print("gotoFrame",new String[]{Integer.toString(frameNumber)});
}

private void pop(final String desc){
  char c=desc.charAt(0);
  if (c == '(') {
    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);
  }
 else   if (c == 'J' || c == 'D') {
    pop(2);
  }
 else {
    pop(1);
  }
}

public void delete(String name) throws IOException {
  if (name.equalsIgnoreCase(SUBJECT_NAME)) {
    names=null;
  }
 else {
    throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectAlternativeName.");
  }
  encodeThis();
}

public void pushElemAttributeSet(ElemAttributeSet attrSet){
  m_attrSetStack.push(attrSet);
}

private void finishScrollStacks(){
  cancelAnimation(this,Property.STACK_SNAP);
  final int currentModelIndex=getTabStackIndex();
  float delta=Math.abs(currentModelIndex + mRenderedScrollOffset);
  float target=-currentModelIndex;
  if (delta != 0) {
    long duration=FLING_MIN_DURATION + (long)Math.abs(delta * getFullScrollDistance() / mFlingSpeed);
    addToAnimation(this,Property.STACK_SNAP,mRenderedScrollOffset,target,duration,0);
  }
 else {
    setProperty(Property.STACK_SNAP,target);
    if (mTemporarySelectedStack != null) {
      mTabModelSelector.selectModel(mTemporarySelectedStack);
      mTemporarySelectedStack=null;
    }
  }
}

public GeoDistanceBuilder addUnboundedFrom(String key,double from){
  ranges.add(new Range(key,from,null));
  return this;
}

private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException {
  SOAPMessage reply=messageFactory.createMessage();
  SOAPHeader header=reply.getSOAPHeader();
  header.detachNode();
  SOAPBody replyBody=reply.getSOAPBody();
  res.setHeader("Content-Type",contentType);
  replyBody.addDocument(doc);
  reply.saveChanges();
  OutputStream os=res.getOutputStream();
  reply.writeTo(os);
  os.flush();
}

public static String replaceChars(String str,String oldchars,char newchar){
  int pos=indexOfChars(str,oldchars);
  if (pos == -1) {
    return str;
  }
  StringBuilder buf=new StringBuilder(str);
  do {
    buf.setCharAt(pos,newchar);
    pos=indexOfChars(str,oldchars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}

public final CharSequence yytext(){
  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);
}

public static String canonicalizePath(String path,boolean discardRelativePrefix){
  int segmentStart=0;
  int deletableSegments=0;
  for (int i=0; i <= path.length(); ) {
    int nextSegmentStart;
    if (i == path.length()) {
      nextSegmentStart=i;
    }
 else     if (path.charAt(i) == '/') {
      nextSegmentStart=i + 1;
    }
 else {
      i++;
      continue;
    }
    if (i == segmentStart + 1 && path.regionMatches(segmentStart,".",0,1)) {
      path=path.substring(0,segmentStart) + path.substring(nextSegmentStart);
      i=segmentStart;
    }
 else     if (i == segmentStart + 2 && path.regionMatches(segmentStart,"..",0,2)) {
      if (deletableSegments > 0 || discardRelativePrefix) {
        deletableSegments--;
        int prevSegmentStart=path.lastIndexOf('/',segmentStart - 2) + 1;
        path=path.substring(0,prevSegmentStart) + path.substring(nextSegmentStart);
        i=segmentStart=prevSegmentStart;
      }
 else {
        i++;
        segmentStart=i;
      }
    }
 else {
      if (i > 0) {
        deletableSegments++;
      }
      i++;
      segmentStart=i;
    }
  }
  return path;
}

public InMemoryMessageExchangeStore(final NetworkConfig config,TokenProvider tokenProvider){
  if (config == null) {
    throw new NullPointerException("Configuration must not be null");
  }
  if (tokenProvider == null) {
    throw new NullPointerException("TokenProvider must not be null");
  }
  this.tokenProvider=tokenProvider;
  this.config=config;
}

public static void next(){
  try {
    if (musicPlaybackService != null) {
      musicPlaybackService.next();
    }
  }
 catch (  final RemoteException ignored) {
  }
}

public long startstack(){
  return Long.parseLong(fields[27]);
}

private void drawBitmapWithStroke(Canvas canvas,Bitmap bitmap,int centerX,int centerY,float radius,Paint drawPaint){
  drawPaint.setStyle(Paint.Style.FILL);
  float strokeRadius=radius + mRadiusStrokeWidth;
  drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  canvas.drawCircle(centerX,centerY,strokeRadius,drawPaint);
  drawPaint.setXfermode(null);
  final int halfBitmapWidth=bitmap.getWidth() / 2;
  final int halfBitmapHeight=bitmap.getHeight() / 2;
  BitmapShader bitmapShader=new BitmapShader(bitmap,Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
  Matrix shaderMatrix=new Matrix();
  float minSize=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();
  float scale=radius * 2 / minSize;
  shaderMatrix.setScale(scale,scale);
  shaderMatrix.postTranslate(centerX - (halfBitmapWidth * scale),centerY - (halfBitmapHeight * scale));
  bitmapShader.setLocalMatrix(shaderMatrix);
  drawPaint.setShader(bitmapShader);
  canvas.drawCircle(centerX,centerY,radius,drawPaint);
  drawPaint.setShader(null);
}

SNode awaitFulfill(SNode s,boolean timed,long nanos){
  final long deadline=timed ? System.nanoTime() + nanos : 0L;
  Thread w=Thread.currentThread();
  int spins=(shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0);
  for (; ; ) {
    if (w.isInterrupted())     s.tryCancel();
    SNode m=s.match;
    if (m != null)     return m;
    if (timed) {
      nanos=deadline - System.nanoTime();
      if (nanos <= 0L) {
        s.tryCancel();
        continue;
      }
    }
    if (spins > 0)     spins=shouldSpin(s) ? (spins - 1) : 0;
 else     if (s.waiter == null)     s.waiter=w;
 else     if (!timed)     LockSupport.park(this);
 else     if (nanos > spinForTimeoutThreshold)     LockSupport.parkNanos(this,nanos);
  }
}

public MqttDevice mqttDevice(){
  return mqttDevice;
}

public AbbaLockingDetector startCollecting(){
  thread=new Thread(this,"AbbaLockingDetector");
  thread.setDaemon(true);
  thread.start();
  return this;
}

public void addSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<SwipeListener>();
  }
  mListeners.add(listener);
}

protected Object readObjectOverride() throws OptionalDataException, ClassNotFoundException, IOException {
  if (input == null) {
    return null;
  }
  throw new IOException();
}

public float toMeters(double pixels){
  return (float)(pixels * METERS_PER_PIXELS);
}

public static String searchRemoveFromCategory(HttpServletRequest request,HttpServletResponse response){
  Delegator delegator=(Delegator)request.getAttribute("delegator");
  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");
  String errMsg=null;
  try {
    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);
    try {
      EntityListIterator eli=getProductSearchResults(request);
      if (eli == null) {
        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));
        request.setAttribute("_ERROR_MESSAGE_",errMsg);
        return "error";
      }
      int numRemoved=0;
      GenericValue searchResultView=null;
      while ((searchResultView=eli.next()) != null) {
        String productId=searchResultView.getString("mainProductId");
        numRemoved+=delegator.removeByAnd("ProductCategoryMember",UtilMisc.toMap("productCategoryId",productCategoryId,"productId",productId));
      }
      eli.close();
      Map<String,String> messageMap=UtilMisc.toMap("numRemoved",Integer.toString(numRemoved));
      errMsg=UtilProperties.getMessage(resource,"productsearchevents.removed_x_items",messageMap,UtilHttp.getLocale(request));
      request.setAttribute("_EVENT_MESSAGE_",errMsg);
    }
 catch (    GenericEntityException e) {
      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());
      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));
      Debug.logError(e,errMsg,module);
      request.setAttribute("_ERROR_MESSAGE_",errMsg);
      TransactionUtil.rollback(beganTransaction,errMsg,e);
      return "error";
    }
 finally {
      TransactionUtil.commit(beganTransaction);
    }
  }
 catch (  GenericTransactionException e) {
    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());
    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));
    Debug.logError(e,errMsg,module);
    request.setAttribute("_ERROR_MESSAGE_",errMsg);
    return "error";
  }
  return "success";
}

boolean addToBuffer(char c) throws IOException {
  int len=sb.length();
  if (len == 0 && c != CHAR_LT)   return false;
  sb.append(c);
  if (++len >= minTagLen) {
    boolean isClosingTag=(len >= 2 && sb.charAt(1) == CHAR_SL);
    String substr;
    if (isClosingTag)     substr=sb.substring(2);
 else     substr=sb.substring(1);
    for (int i=0; i < EXCLUDE_TAGS.length; i++) {
      if (substr.equalsIgnoreCase(EXCLUDE_TAGS[i])) {
        if (isClosingTag) {
          depthDec(i);
          printBuffer();
          lastChar=0;
        }
 else {
          depthInc(i);
        }
      }
    }
  }
  return true;
}

public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}

public static <T>T jsonToObject(String jsonString,Class<T> klass){
  T objectFromJson=null;
  try {
    GfJsonObject jsonObject=new GfJsonObject(jsonString);
    objectFromJson=klass.newInstance();
    Method[] declaredMethods=klass.getDeclaredMethods();
    Map<String,Method> methodsMap=new HashMap<String,Method>();
    for (    Method method : declaredMethods) {
      methodsMap.put(method.getName(),method);
    }
    int noOfFields=jsonObject.size();
    Iterator<String> keys=jsonObject.keys();
    while (keys.hasNext()) {
      String key=keys.next();
      Method method=methodsMap.get("set" + capitalize(key));
      if (method != null) {
        Class<?>[] parameterTypes=method.getParameterTypes();
        if (parameterTypes.length == 1) {
          Class<?> parameterType=parameterTypes[0];
          Object value=jsonObject.get(key);
          if (isPrimitiveOrWrapper(parameterType)) {
            value=getPrimitiveOrWrapperValue(parameterType,value);
          }
 else           if (isArray(parameterType)) {
            value=toArray(value,parameterType);
          }
 else           if (isList(parameterType)) {
            value=toList(value,parameterType);
          }
 else           if (isMap(parameterType)) {
            value=toMap(value,parameterType);
          }
 else           if (isSet(parameterType)) {
            value=toSet(value,parameterType);
          }
 else {
            value=jsonToObject(value.toString(),parameterType);
          }
          method.invoke(objectFromJson,new Object[]{value});
          noOfFields--;
        }
      }
    }
    if (noOfFields != 0) {
      throw new IllegalArgumentException("Not enough setter methods for fields in given JSON String : " + jsonString + " in class : "+ klass);
    }
  }
 catch (  InstantiationException e) {
    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);
  }
catch (  IllegalAccessException e) {
    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);
  }
catch (  GfJsonException e) {
    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);
  }
catch (  IllegalArgumentException e) {
    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);
  }
catch (  InvocationTargetException e) {
    throw new IllegalArgumentException("Couldn't convert JSON to Object of type " + klass,e);
  }
  return objectFromJson;
}

private Cache createCache() throws CacheException {
  final Properties props=new Properties();
  props.setProperty(LOCATORS,"");
  props.setProperty(MCAST_PORT,"0");
  return CacheFactory.create(DistributedSystem.connect(props));
}

public AttributeListPanel(){
  m_Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  m_Table.setColumnSelectionAllowed(false);
  m_Table.setPreferredScrollableViewportSize(new Dimension(250,150));
  setLayout(new BorderLayout());
  add(new JScrollPane(m_Table),BorderLayout.CENTER);
}

protected String[][] toArray(){
  int i;
  int n;
  int ii;
  int nn;
  int x;
  int y;
  String[][] result;
  String[][] tmpResult;
  int cols;
  int rows;
  boolean valueExists;
  rows=getVisibleRowCount();
  if (getShowAverage()) {
    rows++;
  }
  cols=getVisibleColCount();
  if (getShowStdDev()) {
    cols=cols * 3;
  }
 else {
    cols=cols * 2;
  }
  result=new String[rows + 2][cols + 1];
  result[0][0]=trimString("Dataset",getRowNameWidth());
  x=1;
  for (ii=0; ii < getColCount(); ii++) {
    i=getDisplayCol(ii);
    if (getColHidden(i)) {
      continue;
    }
    result[0][x]=trimString(removeFilterName(getColName(i)),getColNameWidth());
    x++;
    if (getShowStdDev()) {
      result[0][x]="";
      x++;
    }
    result[0][x]="";
    x++;
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (!getRowHidden(i)) {
      result[y][0]=trimString(removeFilterName(getRowName(i)),getRowNameWidth());
      y++;
    }
  }
  y=1;
  for (ii=0; ii < getRowCount(); ii++) {
    i=getDisplayRow(ii);
    if (getRowHidden(i)) {
      continue;
    }
    x=1;
    for (nn=0; nn < getColCount(); nn++) {
      n=getDisplayCol(nn);
      if (getColHidden(n)) {
        continue;
      }
      valueExists=(!Double.isNaN(getMean(n,i)));
      if (!valueExists) {
        result[y][x]="";
      }
 else {
        result[y][x]=doubleToString(getMean(n,i),getMeanPrec());
      }
      x++;
      if (getShowStdDev()) {
        if (!valueExists) {
          result[y][x]="";
        }
 else         if (Double.isInfinite(getStdDev(n,i))) {
          result[y][x]="Inf";
        }
 else {
          result[y][x]=doubleToString(getStdDev(n,i),getStdDevPrec());
        }
        x++;
      }
      if (!valueExists) {
        result[y][x]="";
      }
 else {
switch (getSignificance(n,i)) {
case SIGNIFICANCE_TIE:
          result[y][x]=TIE_STRING;
        break;
case SIGNIFICANCE_WIN:
      result[y][x]=WIN_STRING;
    break;
case SIGNIFICANCE_LOSS:
  result[y][x]=LOSS_STRING;
break;
}
}
x++;
}
y++;
}
if (getShowAverage()) {
y=result.length - 2;
x=0;
result[y][0]="Average";
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]=doubleToString(getAverage(i),getMeanPrec());
x++;
if (getShowStdDev()) {
result[y][x]="";
x++;
}
result[y][x]="";
x++;
}
}
y=result.length - 1;
x=0;
result[y][0]=LEFT_PARENTHESES + WIN_STRING + "/"+ TIE_STRING+ "/"+ LOSS_STRING+ RIGHT_PARENTHESES;
x++;
for (ii=0; ii < getColCount(); ii++) {
i=getDisplayCol(ii);
if (getColHidden(i)) {
continue;
}
result[y][x]="";
x++;
if (getShowStdDev()) {
result[y][x]="";
x++;
}
result[y][x]=LEFT_PARENTHESES + getSignificanceCount(i,SIGNIFICANCE_WIN) + "/"+ getSignificanceCount(i,SIGNIFICANCE_TIE)+ "/"+ getSignificanceCount(i,SIGNIFICANCE_LOSS)+ RIGHT_PARENTHESES;
x++;
}
tmpResult=new String[result.length][result[0].length - 1];
x=0;
for (i=0; i < result[0].length; i++) {
if (((i == 3) && (getShowStdDev())) || ((i == 2) && (!getShowStdDev()))) {
continue;
}
for (n=0; n < result.length; n++) {
tmpResult[n][x]=result[n][i];
}
x++;
}
result=tmpResult;
return result;
}

private Environment(){
  throw ContractUtils.unreachable();
}

public void removePhoto(PhotoEntity photo){
  photos.remove(photo);
}

public static int binarySearch(double[] array,int startIndex,int endIndex,double value){
  checkIndexForBinarySearch(array.length,startIndex,endIndex);
  long longBits=Double.doubleToLongBits(value);
  int low=startIndex, mid=-1, high=endIndex - 1;
  while (low <= high) {
    mid=(low + high) >>> 1;
    if (lessThan(array[mid],value)) {
      low=mid + 1;
    }
 else     if (longBits == Double.doubleToLongBits(array[mid])) {
      return mid;
    }
 else {
      high=mid - 1;
    }
  }
  if (mid < 0) {
    int insertPoint=endIndex;
    for (int index=startIndex; index < endIndex; index++) {
      if (value < array[index]) {
        insertPoint=index;
      }
    }
    return -insertPoint - 1;
  }
  return -mid - (lessThan(value,array[mid]) ? 1 : 2);
}

public static void compute(double minScore,double topPercent,double maxExpected,float minPercentIdentity,IReadBlock readBlock,String classificationName,BitSet activeMatchesForClassification){
  activeMatchesForClassification.clear();
  for (int i=0; i < readBlock.getNumberOfAvailableMatchBlocks(); i++) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    if (!matchBlock.isIgnore() && matchBlock.getBitScore() >= minScore && matchBlock.getExpected() <= maxExpected && matchBlock.getPercentIdentity() >= minPercentIdentity) {
      if (matchBlock.getId(classificationName) > 0)       activeMatchesForClassification.set(i);
    }
  }
  float bestScore=0;
  for (int i=activeMatchesForClassification.nextSetBit(0); i != -1; i=activeMatchesForClassification.nextSetBit(i + 1)) {
    final IMatchBlock matchBlock=readBlock.getMatchBlock(i);
    float score=matchBlock.getBitScore();
    if (score > bestScore)     bestScore=score;
  }
  applyTopPercentFilter(topPercent,bestScore,minPercentIdentity,readBlock,activeMatchesForClassification);
}

public E[] toArray(E[] a){
  if (a.length != array.length()) {
    throw new ElasticsearchGenerationException("AtomicArrays can only be copied to arrays of the same size");
  }
  for (int i=0; i < array.length(); i++) {
    a[i]=array.get(i);
  }
  return a;
}

synchronized public void failOn(Failure fail){
  if (failures == null) {
    failures=new ArrayList<>();
  }
  failures.add(fail);
}

public void dump_stack(){
  if (stack == null) {
    debug_message("# Stack dump requested, but stack is null");
    return;
  }
  debug_message("============ Parse Stack Dump ============");
  for (int i=0; i < stack.size(); i++) {
    debug_message("Symbol: " + ((symbol)stack.elementAt(i)).sym + " State: "+ ((symbol)stack.elementAt(i)).parse_state);
  }
  debug_message("==========================================");
}

private static Set<String> createCategoriesSet(Set<String> categories){
  Set<String> result=new HashSet<>();
  for (  String cat : categories) {
    result.add(StringUtil.toLowerCase(cat));
  }
  return result;
}

public void loadListener(String serverKey) throws GenericServiceException {
  Server server=servers.get(serverKey);
  if (server == null)   throw new GenericServiceException("No listener found with that serverKey.");
  loadListener(serverKey,server);
}

public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    upload(file.getName(),inputStream,restartAt,restartAt,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}

public SSLSocket createSSLSocket(Socket socket) throws IOException {
  SSLSocketFactory sf=((SSLSocketFactory)SSLSocketFactory.getDefault());
  InetSocketAddress remoteAddress=(InetSocketAddress)socket.getRemoteSocketAddress();
  SSLSocket s=(SSLSocket)(sf.createSocket(socket,remoteAddress.getHostName(),socket.getPort(),true));
  s.setUseClientMode(false);
  s.setEnabledCipherSuites(s.getSupportedCipherSuites());
  return s;
}

private String formatNode(RightThreadedBinaryNode<T> node){
  RightThreadedBinaryNode<T> n;
  StringBuilder response=new StringBuilder("(");
  if ((n=node.getLeftSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(node.toString());
  if ((n=node.getRightSon()) != null) {
    response.append(formatNode(n));
  }
  response.append(")");
  return response.toString();
}

public static void unregisterMBean(Class<?> mbeanInterface){
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  try {
    ObjectName name=generateMBeanObjectName(mbeanInterface);
    if (mbs.isRegistered(name)) {
      logger.info("Unregistering mbean: " + name.toString());
      mbs.unregisterMBean(name);
    }
 else {
      logger.warn("Ignoring attempt to unregister unknown mbean: " + name.toString());
    }
  }
 catch (  Exception e) {
    throw new ServerRuntimeException("Unable to unregister mbean: interface=" + mbeanInterface,e);
  }
}

public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {
  if (jpegStream == null || exifOutFileName == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=null;
  try {
    s=getExifWriterStream(exifOutFileName);
    doExifStreamIO(jpegStream,s);
    s.flush();
  }
 catch (  IOException e) {
    closeSilently(s);
    throw e;
  }
  s.close();
}

public void sort(Comparator<? super T> comparator){
synchronized (mLock) {
    if (mOriginalValues != null) {
      Collections.sort(mOriginalValues,comparator);
    }
 else {
      Collections.sort(mObjects,comparator);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}

static boolean causedByRDE(DiskAccessException dae){
  boolean result=false;
  if (dae != null) {
    Throwable cause=dae.getCause();
    while (cause != null) {
      if (cause instanceof RegionDestroyedException) {
        result=true;
        break;
      }
      cause=cause.getCause();
    }
  }
  return result;
}

public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}

public MagicVariablesArgumentsBundle(@NonNull Map<String,String> arguments,@NonNull Map<String,String> variables,String layerName,@NonNull DisplayMetrics metrics){
  super(arguments,metrics);
  mVariables=variables;
  mLayerNamePrefix='@' + layerName.replace('-','_') + '_';
}

@HLEUnimplemented @HLEFunction(nid=0xCFE9E999,version=271) public int sceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam,TPointer workArea,int workAreaSize){
  this.workArea=workArea.getAddress();
  this.workAreaSize=workAreaSize;
  resolution=convertResolutionExToResolution(usbCamSetupVideoExParam.resolution);
  frameRate=usbCamSetupVideoExParam.framerate;
  whiteBalance=usbCamSetupVideoExParam.wb;
  saturation=usbCamSetupVideoExParam.saturation;
  brightness=usbCamSetupVideoExParam.brightness;
  contrast=usbCamSetupVideoExParam.contrast;
  sharpness=usbCamSetupVideoExParam.sharpness;
  imageEffectMode=usbCamSetupVideoExParam.effectmode;
  frameSize=usbCamSetupVideoExParam.framesize;
  evLevel=usbCamSetupVideoExParam.evlevel;
  if (!setupVideo()) {
    log.warn(String.format("Cannot find webcam"));
    return SceKernelErrors.ERROR_USBCAM_NOT_READY;
  }
  return 0;
}

public List<User> loadAllDeepFromCursor(Cursor cursor){
  int count=cursor.getCount();
  List<User> list=new ArrayList<User>(count);
  if (cursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(count);
    }
    try {
      do {
        list.add(loadCurrentDeep(cursor,false));
      }
 while (cursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return list;
}

public static Date convertISO8601toDate(String dateString) throws ParseException {
  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
  Date date=dateFormat.parse(dateString);
  return date;
}

public static Document createDOM(InputStream is) throws ParserConfigurationException, SAXException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  dbf.setValidating(false);
  dbf.setIgnoringComments(false);
  dbf.setIgnoringElementContentWhitespace(true);
  dbf.setNamespaceAware(true);
  dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);
  dbf.setFeature(DISALLOW_DOCTYPE_DECL,true);
  dbf.setFeature(EXTERNAL_GENERAL_ENTITIES,false);
  dbf.setFeature(EXTERNAL_PARAMETER_ENTITIES,false);
  dbf.setFeature(LOAD_EXTERNAL_DTD,false);
  DocumentBuilder db=null;
  db=dbf.newDocumentBuilder();
  db.setEntityResolver(new NullResolver());
  db.setErrorHandler(new SamlParserErrorHandler());
  return db.parse(is);
}

public String toString(){
  return Double.toString(getValue());
}

public void resetCount(){
  msgCnt.set(0);
}

public void scheduleAtFixedRate(TimerTask task,Date when,long period){
  if (period <= 0 || when.getTime() < 0) {
    throw new IllegalArgumentException();
  }
  long delay=when.getTime() - System.currentTimeMillis();
  scheduleImpl(task,delay,period,true);
}

void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {
  realm=new byte[length];
  System.arraycopy(attributeValue,offset,realm,0,length);
}

public static void copyAssets(Context context,String assetsFilename,File file,String mode) throws IOException, InterruptedException {
  String abi=Build.CPU_ABI;
  String libraryName;
  if (abi.equalsIgnoreCase("armeabi")) {
    libraryName="armeabi";
  }
 else   if (abi.equalsIgnoreCase("x86")) {
    libraryName="x86";
  }
 else   if (abi.contains("armeabi-v7")) {
    libraryName="armeabi-v7a";
  }
 else {
    return;
  }
  AssetManager manager=context.getAssets();
  final InputStream is=manager.open(libraryName + "/" + assetsFilename);
  copyFile(file,is,mode);
}

public boolean is_same(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  HouseNumber other=(HouseNumber)obj;
  if (number == null) {
    if (name == null) {
      if (other.name != null)       return false;
    }
 else     if (!name.equals(other.name))     return false;
  }
 else   if (!number.equals(other.number))   return false;
  if (street == null) {
    if (other.street != null)     return false;
  }
 else   if (!street.equals(other.street))   return false;
  return true;
}

public static double nextUp(double d){
  if (d == Double.POSITIVE_INFINITY)   return d;
 else {
    d+=0.0d;
    return Double.longBitsToDouble(Double.doubleToRawLongBits(d) + ((d >= 0.0d) ? +1L : -1L));
  }
}

public int threeWayDistance(Key k1,Key k2){
  byte[] h0=hash;
  byte[] h1=k1.hash;
  byte[] h2=k2.hash;
  int mmi=mismatch(h1,h2);
  if (mmi == -1)   return 0;
  int h=Byte.toUnsignedInt(h0[mmi]);
  int a=Byte.toUnsignedInt(h1[mmi]);
  int b=Byte.toUnsignedInt(h2[mmi]);
  return Integer.compareUnsigned(a ^ h,b ^ h);
}

static byte[] discardWhitespace(byte[] data){
  byte groomedData[]=new byte[data.length];
  int bytesCopied=0;
  for (int i=0; i < data.length; i++) {
switch (data[i]) {
case (byte)' ':
case (byte)'\n':
case (byte)'\r':
case (byte)'\t':
      break;
default :
    groomedData[bytesCopied++]=data[i];
}
}
byte packedData[]=new byte[bytesCopied];
System.arraycopy(groomedData,0,packedData,0,bytesCopied);
return packedData;
}

public AsyncSelector() throws IOException {
  this(Selector.open());
}

public void removeChildAt(int index){
  if ((index < 0) || (children == null) || (index >= children.size())) {
    throw new ArrayIndexOutOfBoundsException();
  }
  Element child=(Element)children.get(index);
  child.setParent(null);
  children.remove(index);
}

private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){
  String text1a=text1.substring(0,x);
  String text2a=text2.substring(0,y);
  String text1b=text1.substring(x);
  String text2b=text2.substring(y);
  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);
  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);
  diffs.addAll(diffsb);
  return diffs;
}

private void paint(Painter p,SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){
  if (p != null) {
    if (g instanceof Graphics2D) {
      Graphics2D gfx=(Graphics2D)g;
      if (transform != null) {
        gfx.transform(transform);
      }
      gfx.translate(x,y);
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.translate(-x,-y);
      if (transform != null) {
        try {
          gfx.transform(transform.createInverse());
        }
 catch (        NoninvertibleTransformException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);
      Graphics2D gfx=img.createGraphics();
      if (transform != null) {
        gfx.transform(transform);
      }
      p.paint(gfx,ctx.getComponent(),w,h);
      gfx.dispose();
      g.drawImage(img,x,y,null);
      img=null;
    }
  }
}

static void loadDirectory(File file,ModuleCandidate candidate) throws IOException {
  File[] files=file.listFiles();
  if (files != null)   for (  File f : files)   loadSubDirectory(file,f,candidate);
}

public static boolean hasSuppressed(@Nullable Throwable t,@Nullable Class<? extends Throwable> cls){
  if (t == null || cls == null)   return false;
  if (t.getSuppressed() != null) {
    for (    Throwable th : t.getSuppressed()) {
      if (cls.isAssignableFrom(th.getClass()))       return true;
      if (hasSuppressed(th,cls))       return true;
    }
  }
  return false;
}

static int writeVarLong(OutputStream out,long x) throws IOException {
  int len=0;
  while ((x & ~0x7f) != 0) {
    out.write((byte)(0x80 | (x & 0x7f)));
    x>>>=7;
    len++;
  }
  out.write((byte)x);
  return ++len;
}

protected void engineUpdate(byte b) throws SignatureException {
  messageDigest.update(b);
  needsReset=true;
}

private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    s.defaultWriteObject();
    for (Node<E> p=first; p != null; p=p.next)     s.writeObject(p.item);
    s.writeObject(null);
  }
  finally {
    lock.unlock();
  }
}

private boolean checkIfInitiatorForRPBeforeMigration(Initiator initiator){
  if (initiator == null) {
    return false;
  }
  boolean isRP=true;
  if (NullColumnValueGetter.isNullValue(initiator.getHostName()) || !NullColumnValueGetter.isNullURI(initiator.getHost())) {
    isRP=false;
  }
  log.debug("RP initiator? " + (isRP ? "Yes!" : "No!"));
  return isRP;
}

@Override public Collection<SerialMessage> initialize(boolean refresh){
  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();
  if (isSupportRequestSupported == true && (refresh == true || initialiseDone == false) && getVersion() > 1) {
    result.add(getSupportedMessage());
  }
  return result;
}

public static Object[] sortCopy(Object[] objects,Comparer comparer){
  int len=objects.length;
  Object[] copy=new Object[len];
  System.arraycopy(objects,0,copy,0,len);
  sort(copy,comparer);
  return copy;
}

public static DMLConfig readConfigurationFile(String configPath) throws ParseException, FileNotFoundException {
  DMLConfig config=new DMLConfig();
  if (configPath != null) {
    try {
      config=new DMLConfig(configPath,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.error("Custom config file " + configPath + " not found.");
      throw fnfe;
    }
catch (    ParseException e) {
      throw e;
    }
  }
 else {
    try {
      config=new DMLConfig(DEFAULT_SYSTEMML_CONFIG_FILEPATH,false);
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info("Using internal default configuration settings.  If you wish to " + "customize any settings, please supply a `SystemML-config.xml` file.");
      config=new DMLConfig();
    }
catch (    ParseException e) {
      throw e;
    }
  }
  return config;
}

default B withDefault(String key,int value){
  return withDefault(key,Integer.toString(value));
}

private String[] combineResultsFromMultipleReads(String[] buffer,String[] lastRead){
  String[] t=new String[buffer.length + lastRead.length];
  System.arraycopy(buffer,0,t,0,buffer.length);
  System.arraycopy(lastRead,0,t,buffer.length,lastRead.length);
  return t;
}

private static boolean isRetina(){
  if (SystemInfo.isAppleJvm) {
    return hasAppleRetinaDevice();
  }
  if (SystemInfo.isMac) {
    GraphicsEnvironment e=GraphicsEnvironment.getLocalGraphicsEnvironment();
    GraphicsDevice[] devices=e.getScreenDevices();
    for (    GraphicsDevice device : devices) {
      if (isOracleMacRetinaDevice(device)) {
        return true;
      }
    }
  }
  return false;
}

protected void scanCompilationUnits(final List<ICompilationUnit> us) throws IllegalArgumentException, CoreException {
  progressMonitor.beginTask("Iterating over laconizeable compilation units...",us.size());
  for (  final ICompilationUnit ¢ : us)   scanCompilationUnit(¢,newSubMonitor(progressMonitor));
  progressMonitor.done();
}

public void pOln(Object o) throws IOException {
  pO(o.toString());
  pln();
}

private void drawCombat(final Graphics2D g2d,final int x,final int y,final int width,final int height){
  Rectangle2D wrect=entity.getArea();
  final Rectangle srect=new Rectangle((int)(wrect.getX() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getY() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getWidth() * IGameScreen.SIZE_UNIT_PIXELS),(int)(wrect.getHeight() * IGameScreen.SIZE_UNIT_PIXELS));
  int circleHeight=(int)((srect.height - 2) / SQRT2);
  circleHeight=Math.max(circleHeight,srect.height - IGameScreen.SIZE_UNIT_PIXELS / 2);
  if (entity.isAttacking(User.get())) {
    g2d.setColor(RING_COLOR_ORANGE);
    g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
    drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_ORANGE,true,false);
  }
  if (entity.isBeingAttacked()) {
    Color lineColor;
    g2d.setColor(RING_COLOR_RED);
    if (entity.isAttacking(User.get())) {
      lineColor=RING_COLOR_RED;
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_RED,false,true);
    }
 else {
      lineColor=RING_COLOR_DARK_RED;
      g2d.drawOval(srect.x - 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      g2d.drawOval(srect.x + 1,srect.y + srect.height - circleHeight,srect.width,circleHeight);
      drawShadedOval(g2d,srect.x + 1,srect.y + srect.height - circleHeight + 1,srect.width - 2,circleHeight - 2,RING_COLOR_RED,true,false);
      drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
    }
    EnumSet<Direction> directions=EnumSet.noneOf(Direction.class);
    for (    Entity attacker : entity.getAttackers()) {
      directions.add(Direction.getAreaDirectionTowardsArea(entity.getArea(),attacker.getArea()));
    }
    drawArrows(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,directions,lineColor);
  }
 else   if (entity.isAttacking(User.get())) {
    drawShadedOval(g2d,srect.x - 1,srect.y + srect.height - circleHeight - 1,srect.width + 2,circleHeight + 2,RING_COLOR_ORANGE,false,false);
  }
  drawAttack(g2d,x,y,width,height);
  if (entity.isDefending()) {
    final int sx=srect.x + srect.width - ICON_OFFSET;
    final int sy=y + height - 2 * ICON_OFFSET;
switch (entity.getResolution()) {
case BLOCKED:
      blockedSprite.draw(g2d,sx,sy);
    break;
case MISSED:
  missedSprite.draw(g2d,sx,sy);
break;
case HIT:
hitSprite.draw(g2d,sx,sy);
break;
default :
}
}
}

public ActivityResolveInfo(ResolveInfo resolveInfo){
  this.resolveInfo=resolveInfo;
}

private static Pair<String,String> postIndexedLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,registerNodeValue1,dw,address));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + immediateNodeValue,qw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,registerNodeValue1));
  return new Pair<String,String>(address,registerNodeValue1);
}

private void endFormals(){
  if (hasFormals) {
    hasFormals=false;
    buf.append('>');
  }
}

public boolean nextIsSep(){
  if (Character.isLetterOrDigit(str.charAt(currentPosition)))   return false;
 else   return true;
}

private String extractProjectNameFromUri(@NotNull String uri){
  int indexFinishProjectName=uri.lastIndexOf(".");
  int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1);
  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {
    return uri.substring(indexStartProjectName,indexFinishProjectName);
  }
  if (indexStartProjectName != 0) {
    return uri.substring(indexStartProjectName);
  }
  return "";
}

public final void addReference(Object ref){
  refSet.add(ref);
}

private void resetNotes2(){
  if (errorInStatus2) {
    if (editMode) {
      statusText1.setText(editStatus2);
    }
 else {
      statusText2.setText(stdStatus2);
    }
    errorInStatus2=false;
  }
}

public RequirementsBuilder addRequireProperty(String name,RequirementsBuilder builder){
  addProperty(name,builder);
  requiredProperties.add(name);
  return this;
}

private Cell detectAndAddHit(float x,float y){
  final Cell cell=checkForNewHit(x,y);
  if (cell != null) {
    Cell fillInGapCell=null;
    final ArrayList<Cell> pattern=mPattern;
    if (!pattern.isEmpty()) {
      final Cell lastCell=pattern.get(pattern.size() - 1);
      int dRow=cell.row - lastCell.row;
      int dColumn=cell.column - lastCell.column;
      int fillInRow=lastCell.row;
      int fillInColumn=lastCell.column;
      if (Math.abs(dRow) == 2 && Math.abs(dColumn) != 1) {
        fillInRow=lastCell.row + ((dRow > 0) ? 1 : -1);
      }
      if (Math.abs(dColumn) == 2 && Math.abs(dRow) != 1) {
        fillInColumn=lastCell.column + ((dColumn > 0) ? 1 : -1);
      }
      fillInGapCell=Cell.of(fillInRow,fillInColumn);
    }
    if (fillInGapCell != null && !mPatternDrawLookup[fillInGapCell.row][fillInGapCell.column]) {
      addCellToPattern(fillInGapCell);
    }
    addCellToPattern(cell);
    if (mEnableHapticFeedback) {
      performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
    }
    return cell;
  }
  return null;
}

public HeadRule(String dir,String rule){
  String[] tmp=P_TAGSETS.split(rule);
  int i, size=tmp.length;
  b_r2l=dir.equals(DIR_RIGHT_TO_LEFT);
  a_tagSets=new HeadTagSet[size];
  for (i=0; i < size; i++)   a_tagSets[i]=new HeadTagSet(tmp[i]);
}

public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

@Override public <T>Future<T> submit(Callable<T> task){
synchronized (this) {
    active.incrementAndGet();
    long timeout=0;
    while (queue.remainingCapacity() == 0) {
      try {
        if (timeout <= giveupTime) {
          Thread.sleep(DEFAULT_SLEEP);
          timeout+=DEFAULT_SLEEP;
        }
 else {
          throw new RuntimeException("Timed out because TPE is too busy...");
        }
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return super.submit(task);
  }
}

public void testSubtractMathContextDiffScalePosNeg(){
  String a="1231212478987482988429808779810457634781384756794987";
  int aScale=15;
  String b="747233429293018787918347987234564568";
  int bScale=-10;
  String c="-7.4723342916989754E+45";
  int cScale=-29;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  MathContext mc=new MathContext(17,RoundingMode.DOWN);
  BigDecimal result=aNumber.subtract(bNumber,mc);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",cScale,result.scale());
}

protected XSQLDA allocateXSqlDa(RowDescriptor rowDescriptor){
  if (rowDescriptor == null || rowDescriptor.getCount() == 0) {
    final XSQLDA xSqlDa=new XSQLDA(1);
    xSqlDa.sqld=xSqlDa.sqln=0;
    return xSqlDa;
  }
  final XSQLDA xSqlDa=new XSQLDA(rowDescriptor.getCount());
  for (int idx=0; idx < rowDescriptor.getCount(); idx++) {
    final FieldDescriptor fieldDescriptor=rowDescriptor.getFieldDescriptor(idx);
    final XSQLVAR xSqlVar=xSqlDa.sqlvar[idx];
    xSqlVar.sqltype=(short)(fieldDescriptor.getType() | 1);
    xSqlVar.sqlsubtype=(short)fieldDescriptor.getSubType();
    xSqlVar.sqlscale=(short)fieldDescriptor.getScale();
    xSqlVar.sqllen=(short)fieldDescriptor.getLength();
    xSqlVar.sqlind=new ShortByReference();
    final int requiredDataSize=fieldDescriptor.isVarying() ? fieldDescriptor.getLength() + 3 : fieldDescriptor.getLength() + 1;
    xSqlVar.sqldata=new Memory(requiredDataSize);
  }
  return xSqlDa;
}

public static void overwrite(long[] vector,long val,int offset,int len){
  int idx=offset >> 6;
  int bitIdx=offset & 63;
  int truncatedValLen=Math.min(len,64 - bitIdx);
  vector[idx]&=~(maskBelow(truncatedValLen) << bitIdx);
  vector[idx]|=val << bitIdx;
  if (len != truncatedValLen) {
    long mask=maskBelow(len - truncatedValLen);
    vector[idx + 1]&=~mask;
    vector[idx + 1]|=(val >>> truncatedValLen);
  }
}

public static boolean isEmpty(String string){
  if (null == string)   return true;
  return string.equals(EMPTY);
}

public void addScrollViewListener(WXScrollViewListener scrollViewListener){
  if (!mScrollViewListeners.contains(scrollViewListener)) {
    mScrollViewListeners.add(scrollViewListener);
  }
}

static boolean checkStandardUPCEANChecksum(CharSequence s) throws FormatException {
  int length=s.length();
  if (length == 0) {
    return false;
  }
  int sum=0;
  for (int i=length - 2; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  sum*=3;
  for (int i=length - 1; i >= 0; i-=2) {
    int digit=(int)s.charAt(i) - (int)'0';
    if (digit < 0 || digit > 9) {
      throw FormatException.getFormatInstance();
    }
    sum+=digit;
  }
  return sum % 10 == 0;
}

Callbacks tryGetCallbacks(Callbacks oldCallbacks){
synchronized (mLock) {
    if (mStopped) {
      return null;
    }
    if (mCallbacks == null) {
      return null;
    }
    final Callbacks callbacks=mCallbacks.get();
    if (callbacks != oldCallbacks) {
      return null;
    }
    if (callbacks == null) {
      Log.w(TAG,"no mCallbacks");
      return null;
    }
    return callbacks;
  }
}

public void beginUpdateMemoryUsed(long bytesUsed,boolean willSendEvent);

@Override public Point translateJava2DToScreen(Point2D java2DPoint){
  Insets insets=getInsets();
  int x=(int)(java2DPoint.getX() * this.scaleX + insets.left);
  int y=(int)(java2DPoint.getY() * this.scaleY + insets.top);
  return new Point(x,y);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

protected FastMap<String> readDeclaredProperties(WidgetCreatorContext context){
  FastMap<String> declaredProperties=new FastMap<String>();
  String backColor=context.readWidgetProperty("backColor");
  if (backColor != null && backColor.length() > 0) {
    declaredProperties.put("backColor",backColor);
  }
  String fontName=context.readWidgetProperty("fontName");
  if (fontName != null && fontName.length() > 0) {
    declaredProperties.put("fontName",fontName);
  }
  String fontSize=context.readWidgetProperty("fontSize");
  if (fontSize != null && fontSize.length() > 0) {
    declaredProperties.put("fontSize",fontSize);
  }
  String foreColor=context.readWidgetProperty("foreColor");
  if (foreColor != null && foreColor.length() > 0) {
    declaredProperties.put("foreColor",foreColor);
  }
  String justification=context.readWidgetProperty("justification");
  if (justification != null && justification.length() > 0) {
    declaredProperties.put("justification",justification);
  }
  String bold=context.readWidgetProperty("bold");
  if (bold != null && bold.length() > 0) {
    declaredProperties.put("bold",bold);
  }
  String italic=context.readWidgetProperty("italic");
  if (italic != null && italic.length() > 0) {
    declaredProperties.put("italic",italic);
  }
  String subscript=context.readWidgetProperty("subscript");
  if (subscript != null && subscript.length() > 0) {
    declaredProperties.put("subscript",subscript);
  }
  String superscript=context.readWidgetProperty("superscript");
  if (superscript != null && superscript.length() > 0) {
    declaredProperties.put("superscript",superscript);
  }
  String underline=context.readWidgetProperty("underline");
  if (underline != null && underline.length() > 0) {
    declaredProperties.put("underline",underline);
  }
  String strikethrough=context.readWidgetProperty("strikethrough");
  if (strikethrough != null && strikethrough.length() > 0) {
    declaredProperties.put("strikethrough",strikethrough);
  }
  return declaredProperties;
}

private void updateTrafficProjections(){
  List<AirMapTraffic> updated=new ArrayList<>();
  for (  AirMapTraffic traffic : allTraffic) {
    if (traffic.getGroundSpeedKt() > -1 && traffic.getTrueHeading() > -1) {
      allTraffic.remove(traffic);
      Coordinate projected=projectedCoordinate(traffic);
      traffic.setCoordinate(projected);
      traffic.setShowAlert(false);
      allTraffic.add(traffic);
      updated.add(traffic);
    }
  }
  notifyUpdated(updated);
}

public static void logStackTrace(Level level,Throwable throwable){
  logStackTrace(level,throwable,null);
}

public static float computeContrastBetweenColors(int bg,int fg){
  float bgR=Color.red(bg) / 255f;
  float bgG=Color.green(bg) / 255f;
  float bgB=Color.blue(bg) / 255f;
  bgR=(bgR < 0.03928f) ? bgR / 12.92f : (float)Math.pow((bgR + 0.055f) / 1.055f,2.4f);
  bgG=(bgG < 0.03928f) ? bgG / 12.92f : (float)Math.pow((bgG + 0.055f) / 1.055f,2.4f);
  bgB=(bgB < 0.03928f) ? bgB / 12.92f : (float)Math.pow((bgB + 0.055f) / 1.055f,2.4f);
  float bgL=0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
  float fgR=Color.red(fg) / 255f;
  float fgG=Color.green(fg) / 255f;
  float fgB=Color.blue(fg) / 255f;
  fgR=(fgR < 0.03928f) ? fgR / 12.92f : (float)Math.pow((fgR + 0.055f) / 1.055f,2.4f);
  fgG=(fgG < 0.03928f) ? fgG / 12.92f : (float)Math.pow((fgG + 0.055f) / 1.055f,2.4f);
  fgB=(fgB < 0.03928f) ? fgB / 12.92f : (float)Math.pow((fgB + 0.055f) / 1.055f,2.4f);
  float fgL=0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;
  return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
}

@Override public int read() throws IOException {
  int ch=super.read();
  if (ch != -1) {
    branch.write(ch);
  }
  return ch;
}

private SublimeBaseMenuItem addInternal(int group,int id,CharSequence title,CharSequence hint,SublimeBaseMenuItem.ItemType itemType,boolean valueProvidedAsync,CharSequence badgeText,boolean showsIconSpace,boolean addedByUser){
  SublimeBaseMenuItem item;
  boolean isGroupHeader=false;
switch (itemType) {
case SEPARATOR:
    item=new SublimeSeparatorMenuItem(this,group,id);
  break;
case BADGE:
item=new SublimeTextWithBadgeMenuItem(this,group,id,title,hint,valueProvidedAsync,badgeText,showsIconSpace);
break;
case SWITCH:
item=new SublimeSwitchMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case CHECKBOX:
item=new SublimeCheckboxMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
case GROUP_HEADER:
isGroupHeader=true;
item=new SublimeGroupHeaderMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
default :
item=new SublimeTextMenuItem(this,group,id,title,hint,valueProvidedAsync,showsIconSpace);
break;
}
checkExistenceOfGroup(group);
if (isGroupHeader) {
checkIfGroupHeaderAlreadyExistsForGroup(group);
int index=findGroupIndex(group);
if (index >= 0) {
mItems.add(index,item);
}
 else {
mItems.add(item);
}
}
 else if (addedByUser) {
if (group != NO_GROUP_ID) {
int lastGroupIndex=findLastGroupIndex(group);
mItems.add(lastGroupIndex == mItems.size() ? lastGroupIndex : lastGroupIndex + 1,item);
}
 else {
mItems.add(item);
}
}
 else {
mItems.add(item);
}
onItemsChanged();
return item;
}

public static String decodeBCD(final short bcd){
  return String.format("%x.%02x",(bcd & 0xFF00) >> 8,bcd & 0x00FF);
}

public void drawBackground(Graphics g){
  g.fillRect(0,0,getWidth(),getHeight());
}

public void put(int key,int value){
  int i=binarySearch(mKeys,0,mSize,key);
  if (i >= 0) {
    mValues[i]=value;
  }
 else {
    i=~i;
    if (mSize >= mKeys.length) {
      int n=Math.max(mSize + 1,mKeys.length * 2);
      int[] nkeys=new int[n];
      int[] nvalues=new int[n];
      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
      System.arraycopy(mValues,0,nvalues,0,mValues.length);
      mKeys=nkeys;
      mValues=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);
      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);
    }
    mKeys[i]=key;
    mValues[i]=value;
    mSize++;
  }
}

public void addLayoutEditor(LayoutEditor panel){
  if (panels.size() > 0) {
    for (int i=0; i < panels.size(); i++) {
      LayoutEditor ed=panels.get(i);
      if (ed == panel) {
        return;
      }
    }
  }
  panels.add(panel);
}

void triggerWildcardExpander(final Collection<File> allFiles,final WildcardContext wildcardContext) throws IOException {
  LOG.debug("wildcard resources: {}",allFiles);
  if (allFiles.isEmpty()) {
    final String message=String.format("No resource found for wildcard: %s",wildcardContext.getWildcard());
    LOG.warn(message);
    throw new IOException(message);
  }
  if (wildcardExpanderHandler != null) {
    try {
      wildcardExpanderHandler.apply(allFiles);
    }
 catch (    final IOException e) {
      throw e;
    }
catch (    final Exception e) {
      LOG.debug("wildcard expanding error. Reporting original exception",e);
      throw new IOException("Exception during expanding wildcard: " + e.getMessage());
    }
  }
}

@POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/ip-interfaces") public IpInterfaceRestRep createIpInterface(@PathParam("id") URI id,IpInterfaceCreateParam createParam) throws DatabaseException {
  Host host=queryObject(Host.class,id,true);
  validateIpInterfaceData(createParam,null);
  IpInterface ipInterface=new IpInterface();
  ipInterface.setHost(host.getId());
  ipInterface.setId(URIUtil.createId(IpInterface.class));
  populateIpInterface(createParam,ipInterface);
  _dbClient.createObject(ipInterface);
  auditOp(OperationTypeEnum.CREATE_HOST_IPINTERFACE,true,null,ipInterface.auditParameters());
  return map(ipInterface);
}

protected List<IEditProposal> collectEditProposals(){
  List<IEditProposal> proposals=new ArrayList<IEditProposal>();
  View selectedView=getSelectedView();
  if (selectedView != null) {
    if (proposalProviders != null) {
      for (      IEditProposalProvider provider : proposalProviders) {
        for (        IEditProposal editProposal : provider.getProposals(selectedView)) {
          if (editProposal.isApplicable())           proposals.add(editProposal);
        }
      }
    }
  }
  return proposals;
}

public ExtensionQuery(String pluginId,String extensionPointName,String attributeName){
  this.pluginId=extensionPointName.contains(".") ? null : pluginId;
  this.extensionPointName=extensionPointName;
  this.attributeName=attributeName;
}

private void ensureNamespaceExists(Result result){
  DockerImage image=DockerImage.fromImageName(result.name);
  if (image.getNamespace() == null) {
    result.name=String.format("%s/%s",DEFAULT_NAMESPACE,image.getRepository());
  }
}

public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5){
  Map map=of();
  map.put(k1,v1);
  map.put(k2,v2);
  map.put(k3,v3);
  map.put(k4,v4);
  map.put(k5,v5);
  return map;
}

public void testFilteredClassifier(){
  Instances data;
  int i;
  if (m_FilteredClassifier == null) {
    return;
  }
  try {
    data=getFilteredClassifierData();
    m_FilteredClassifier.buildClassifier(data);
    for (i=0; i < data.numInstances(); i++) {
      m_FilteredClassifier.classifyInstance(data.instance(i));
    }
  }
 catch (  Exception e) {
    fail("Problem with FilteredClassifier: " + e.toString());
  }
}

public static String upperFirstChar(String string){
  if (string == null)   return null;
  if (string.length() <= 1)   return string.toLowerCase();
  StringBuilder sb=new StringBuilder(string);
  sb.setCharAt(0,Character.toUpperCase(sb.charAt(0)));
  return sb.toString();
}

protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){
  double probSum;
  double val;
  int index;
  double sum;
  probSum=Utils.sum(proportionArray);
  val=random.nextDouble() * probSum;
  index=0;
  sum=0.0;
  while ((sum <= val) && (index < proportionArray.length)) {
    sum+=proportionArray[index++];
  }
  return index - 1;
}

private void checkWidth(final int[] rect){
  final int x1=rect[0];
  final int y2=rect[1];
  final int y1=y2 + rect[3];
  final int x2=x1 + rect[2];
  if (x1 < pageX1) {
    pageX1=x1;
  }
  if (x2 > pageX2) {
    pageX2=x2;
  }
  if (y1 > pageY1) {
    pageY1=y1;
  }
  if (y2 < pageY2) {
    pageY2=y2;
  }
}

@NotNull public static Map<RadComponent,List<RadComponent>> groupSiblings(@NotNull List<? extends RadComponent> components){
  Map<RadComponent,List<RadComponent>> siblingLists=new HashMap<RadComponent,List<RadComponent>>();
  if (components.isEmpty()) {
    return siblingLists;
  }
  if (components.size() == 1) {
    RadComponent component=components.get(0);
    siblingLists.put(component.getParent(),Collections.singletonList(component));
    return siblingLists;
  }
  for (  RadComponent component : components) {
    RadComponent parent=component.getParent();
    List<RadComponent> children=siblingLists.get(parent);
    if (children == null) {
      children=new ArrayList<RadComponent>();
      siblingLists.put(parent,children);
    }
    children.add(component);
  }
  return siblingLists;
}

private int countNonNewline(String str,int off,int len){
  for (int cnt=0; cnt < len; cnt++) {
    final int pos=off + cnt;
    if (str.charAt(pos) == UNIX_NEWLINE) {
      return cnt;
    }
    if (str.charAt(pos) == CARRIAGE_RETURN) {
      return cnt;
    }
  }
  return len;
}

private static int convertSpanToSparseGrid(int curIx,int span,TreeSet<Integer> indexes){
  int lastIx=curIx + span;
  int retSpan=1;
  for (  Integer ix : indexes) {
    if (ix <= curIx)     continue;
    if (ix >= lastIx)     break;
    retSpan++;
  }
  return retSpan;
}

@Override public boolean equals(Object otherRules){
  if (this == otherRules) {
    return true;
  }
  if (otherRules instanceof ZoneRules) {
    ZoneRules other=(ZoneRules)otherRules;
    return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules);
  }
  return false;
}

public String description(){
  StringBuilder sb=new StringBuilder();
  if (isCombo()) {
    int i=0;
    for (    NewComboLeg leg : m_comboLegs) {
      if (i++ > 0) {
        sb.append("/");
      }
      sb.append(leg.toString());
    }
  }
 else {
    sb.append(m_symbol);
    app(sb,m_secType);
    app(sb,m_exchange);
    if (m_exchange != null && m_exchange.equals("SMART") && m_primaryExch != null) {
      app(sb,m_primaryExch);
    }
    app(sb,m_expiry);
    if (m_strike != 0) {
      app(sb,m_strike);
    }
    if (m_right != Right.None) {
      app(sb,m_right);
    }
  }
  return sb.toString();
}

public void addClaimedSignerRole(final String claimedSignerRole){
  if ((claimedSignerRole == null) || (claimedSignerRole.length() == 0)) {
    throw new NullPointerException("claimedSignerRole");
  }
  if (claimedSignerRoles == null) {
    claimedSignerRoles=new ArrayList<String>();
  }
  claimedSignerRoles.add(claimedSignerRole);
}

@SuppressWarnings("nullness") @GwtIncompatible("java.io.ObjectOutputStream") public static <K extends Object,V extends Object>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {
  stream.writeInt(map.size());
  for (  Map.Entry<K,V> entry : map.entrySet()) {
    stream.writeObject(entry.getKey());
    stream.writeObject(entry.getValue());
  }
}

protected void sleep(int sleepMillis,int sleepNanos) throws InterruptedException {
  Thread.sleep(sleepMillis,sleepNanos);
}

public static void restorePreviousOutAndErrStream(){
  if (!alreadyMuted) {
    return;
  }
  System.setOut(latestOut);
  System.setErr(latestErr);
  alreadyMuted=false;
}

public static BigInteger CRT(List<BigInteger> congs,List<BigInteger> moduli){
  BigInteger[] cs=ArrayConverter.convertListToArray(congs);
  BigInteger[] ms=ArrayConverter.convertListToArray(moduli);
  return CRT(cs,ms);
}

private int measureHeight(int measureSpec){
  int result=0;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  mAscent=(int)mTextPaint.ascent();
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(-mAscent + mTextPaint.descent()) + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

public ByteVector putByteArray(final byte[] b,final int off,final int len){
  if (length + len > data.length) {
    enlarge(len);
  }
  if (b != null) {
    System.arraycopy(b,off,data,length,len);
  }
  length+=len;
  return this;
}

public void testCase17(){
  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};
  byte bBytes[]={27,-15,65,39,100};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={12,-21,73,56,27};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

protected <T extends TaskServiceDocument<E>,E extends Enum<E>>T waitForTaskCompletion(String documentSelfLink,Class<T> type) throws Throwable {
  return waitForPropertyValue(documentSelfLink,type,TaskServiceDocument.FIELD_NAME_TASK_STAGE,Arrays.asList(TaskStage.FINISHED,TaskStage.FAILED,TaskStage.CANCELLED),true,waitForStageChangeCountLonger());
}

public Action(String content,int priority){
  this.content=content.trim();
  this.priority=priority;
}

private List<EndIsland> findSurroundingIslands(int chunkX,int chunkY,int chunksPerFragmentX,int chunksPerFragmentY){
  List<EndIsland> result=new LinkedList<EndIsland>();
  for (int y=-SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {
    for (int x=-SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {
      EndIsland island=tryCreateEndIsland(chunkX + x,chunkY + y);
      if (island != null) {
        result.add(island);
      }
    }
  }
  return result;
}

void insertFunction2(ByteBuffer bb){
  int baseSec=(int)(windowId >> 32);
  bb.putInt(baseSec);
  Integer operId=operatorId;
  for (int i=0; i < 3; i++) {
    byte num=(byte)(operId >> 8 * (2 - i));
    bb.put(num);
  }
  bb.putShort((short)(windowId & 0xffff));
  for (int i=0; i < 3; i++) {
    byte num=(byte)(tupleId >> 8 * (2 - i));
    bb.put(num);
  }
}

private static boolean calculateGap(Rectangle a,Rectangle b,Rectangle gap){
  if (a.intersects(b)) {
    gap.width=0;
    return false;
  }
  int ax1=a.x;
  int ax2=a.x + a.width;
  int ay1=a.y;
  int ay2=a.y + a.height;
  int bx1=b.x;
  int bx2=b.x + b.width;
  int by1=b.y;
  int by2=b.y + b.height;
  int xOverlap=Math.min(ax2,bx2) - Math.max(ax1,bx1);
  int yOverlap=Math.min(ay2,by2) - Math.max(ay1,by1);
  if (xOverlap <= 0 && yOverlap <= 0) {
    gap.width=0;
    return false;
  }
  if (xOverlap > 0) {
    gap.x=Math.max(ax1,bx1);
    gap.y=(ay1 > by1) ? by2 : ay2;
    gap.width=xOverlap;
    gap.height=-yOverlap;
  }
  if (yOverlap > 0) {
    gap.x=(ax1 > bx1) ? bx2 : ax2;
    gap.y=Math.max(ay1,by1);
    gap.width=-xOverlap;
    gap.height=yOverlap;
  }
  return true;
}

public boolean nextTile() throws ModelControlException {
  boolean movedToRow=super.nextTile();
  if (movedToRow) {
    curTile=getTileIndex();
    setDisplayFieldValue(TXT_PARENT_INDEX,parentIdx);
    setDisplayFieldValue(TXT_CHOICE,choices[curTile]);
    setDisplayFieldValue(TXT_INDEX,Integer.toString(curTile));
  }
  return movedToRow;
}

private boolean journalRebuildRequired(){
  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;
  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();
}

public boolean hasMyomerBooster(){
  for (  Mounted mEquip : getMisc()) {
    MiscType mtype=(MiscType)mEquip.getType();
    if (mtype.hasFlag(MiscType.F_MASC) && !mEquip.isInoperable()) {
      return true;
    }
  }
  return false;
}

public static boolean isIntentAvailable(Context context,String action){
  final PackageManager packageManager=context.getPackageManager();
  final Intent intent=new Intent(action);
  Log.d(MP_TAG,"Looking for intent " + action);
  List<ResolveInfo> list=packageManager.queryIntentServices(intent,PackageManager.MATCH_DEFAULT_ONLY);
  return list.size() > 0;
}

@KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_wrap_02() throws SSLException {
  String host="new host";
  int port=8080;
  ByteBuffer bb=ByteBuffer.allocate(10);
  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};
  SSLEngine sse=getEngine(host,port);
  sse.setUseClientMode(true);
  try {
    sse.wrap(bbA,-1,3,bb);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.wrap(bbA,0,-3,bb);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.wrap(bbA,bbA.length + 1,bbA.length,bb);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.wrap(bbA,0,bbA.length + 1,bb);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
}

private void sendCONNECTRequest() throws IOException {
  int port=url.getPort();
  requests.set(0,HTTP_CONNECT + " " + connectRequestURI(url)+ " "+ httpVersion,null);
  requests.setIfNotSet("User-Agent",userAgent);
  String host=url.getHost();
  if (port != -1 && port != url.getDefaultPort()) {
    host+=":" + String.valueOf(port);
  }
  requests.setIfNotSet("Host",host);
  requests.setIfNotSet("Accept",acceptString);
  if (http.getHttpKeepAliveSet()) {
    requests.setIfNotSet("Proxy-Connection","keep-alive");
  }
  setPreemptiveProxyAuthentication(requests);
  if (logger.isLoggable(PlatformLogger.Level.FINE)) {
    logger.fine(requests.toString());
  }
  http.writeRequests(requests,null);
}

private boolean isSelfSigned(X509Certificate cert){
  return signedBy(cert,cert);
}

@RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("userroles") @Valid UserRoles userRoles,BindingResult bindingResult,Principal principal){
  RestWrapper restWrapper=null;
  if (bindingResult.hasErrors()) {
    BindingResultError bindingResultError=new BindingResultError();
    return bindingResultError.errorMessage(bindingResult);
  }
  try {
    com.wipro.ats.bdre.md.dao.jpa.UserRoles jpaUserRoles=new com.wipro.ats.bdre.md.dao.jpa.UserRoles();
    jpaUserRoles.setUserRoleId(userRoles.getUserRoleId());
    jpaUserRoles.setRole(userRoles.getRole());
    Users users=new Users();
    users.setUsername(userRoles.getUsername());
    jpaUserRoles.setUsers(users);
    Integer userRolesId=userRolesDAO.insert(jpaUserRoles);
    userRoles.setUserRoleId(userRolesId);
    restWrapper=new RestWrapper(userRoles,RestWrapper.OK);
    LOGGER.info("Record with ID:" + userRoles.getUserRoleId() + " inserted in UserRoles by User:"+ principal.getName()+ userRoles);
  }
 catch (  Exception e) {
    LOGGER.error(e);
    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);
  }
  return restWrapper;
}

public Set<WordToken> nearestWords(final int distance,final WordToken... start){
  return nearestWords(distance,null,Arrays.asList(start));
}

public DERUTCTime(Date time){
  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");
  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));
  this.time=Strings.toByteArray(dateF.format(time));
}

public void add(String category,String[] titles,double[] values){
  mCategories.add(category);
  mTitles.add(titles);
  mValues.add(values);
}

public void rewind(){
synchronized (used) {
    for (    ParameterPair pair : used) {
      current.addParameter(pair.option,pair.value);
    }
    used.clear();
  }
}

public List<Interval> merge(List<Interval> intervals){
  List<Interval> res=new ArrayList<>();
  if (intervals == null || intervals.size() == 0) {
    return res;
  }
  Collections.sort(intervals,null);
  Interval prev=null;
  for (  Interval i : intervals) {
    if (prev == null || prev.end < i.start) {
      res.add(i);
      prev=i;
    }
 else     if (i.end > prev.end) {
      prev.end=i.end;
    }
  }
  return res;
}

private String formatType(Object typeRep){
  StringTokenizer tokenizer=new StringTokenizer(typeRep.toString(),"()<>[], ",true);
  StringBuilder sb=new StringBuilder();
  while (tokenizer.hasMoreTokens()) {
    String token=tokenizer.nextToken();
    if (token.length() == 1 || token.lastIndexOf('.') == -1)     sb.append(token);
 else {
      int index=token.lastIndexOf('.');
      sb.append(token.substring(index + 1));
    }
  }
  return sb.toString();
}

@NotNull public static String sha1(@NotNull File keyStoreFile) throws Exception {
  return sha1(keyStoreFile,null,null);
}

@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  setupBounds(w,h);
  setupPaints();
  invalidate();
}

@Override public void panDomainAxes(double panRange,PlotRenderingInfo info,Point2D source){
  XYPlot subplot=findSubplot(info,source);
  if (subplot == null) {
    return;
  }
  if (!subplot.isDomainPannable()) {
    return;
  }
  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));
  if (subplotInfo == null) {
    return;
  }
  for (int i=0; i < subplot.getDomainAxisCount(); i++) {
    ValueAxis domainAxis=subplot.getDomainAxis(i);
    if (domainAxis != null) {
      domainAxis.pan(panRange);
    }
  }
}

private void init(){
  startController=new PourStartController();
  startController.setCheckView(this);
  waveController=new WaveController();
  waveController.setCheckView(this);
  PourFinishController finishController=new PourFinishController();
  finishController.setCheckView(this);
  TickController tickController=new TickController();
  tickController.setCheckView(this);
  List<BaseController> finishControllers=new ArrayList<>();
  finishControllers.add(finishController);
  finishControllers.add(tickController);
  this.finishControllers=finishControllers;
}

private JLabel createIconLabel(JCheckBox checkBox){
  checkBox.setOpaque(false);
  checkBox.setSize(checkBox.getMinimumSize());
  Image image=new BufferedImage(checkBox.getWidth(),checkBox.getHeight(),Transparency.TRANSLUCENT);
  Graphics g=image.getGraphics();
  checkBox.paint(g);
  g.dispose();
  return new JLabel(new ImageIcon(image));
}

public void closeWindow(){
  WindowEvent ev=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
  frame.dispatchEvent(ev);
}

private void populateHostData(Host host,HostParam param){
  if (param.getName() != null) {
    host.setLabel(param.getName());
  }
  if (param.getHostName() != null) {
    host.setHostName(param.getHostName());
  }
  if (param.getCluster() != null) {
    host.setCluster(param.getCluster());
  }
  if (param.getOsVersion() != null) {
    host.setOsVersion(param.getOsVersion());
  }
  if (param.getUserName() != null) {
    host.setUsername(param.getUserName());
  }
  if (param.getPassword() != null) {
    host.setPassword(param.getPassword());
  }
  if (param.getPortNumber() != null) {
    host.setPortNumber(param.getPortNumber());
  }
  if (param.getUseSsl() != null) {
    host.setUseSSL(param.getUseSsl());
  }
  if (param.getType() != null) {
    host.setType(param.getType());
  }
  if (param.getDiscoverable() != null) {
    host.setDiscoverable(param.getDiscoverable());
  }
  if (param.getVcenterDataCenter() != null) {
    host.setVcenterDataCenter(NullColumnValueGetter.isNullURI(param.getVcenterDataCenter()) ? NullColumnValueGetter.getNullURI() : param.getVcenterDataCenter());
  }
  Cluster cluster=null;
  if (!NullColumnValueGetter.isNullURI(param.getCluster())) {
    cluster=queryObject(Cluster.class,param.getCluster(),true);
    if (!NullColumnValueGetter.isNullURI(cluster.getVcenterDataCenter())) {
      host.setVcenterDataCenter(cluster.getVcenterDataCenter());
    }
    if (!NullColumnValueGetter.isNullURI(cluster.getProject())) {
      host.setProject(cluster.getProject());
    }
  }
  if (param.getBootVolume() != null) {
    host.setBootVolumeId(NullColumnValueGetter.isNullURI(param.getBootVolume()) ? NullColumnValueGetter.getNullURI() : param.getBootVolume());
  }
}

@Nullable public AvdInfo createOrUpdateAvd(@Nullable AvdInfo currentInfo,@NotNull String avdName,@NotNull Device device,@NotNull SystemImageDescription systemImageDescription,@NotNull ScreenOrientation orientation,boolean isCircular,@Nullable String sdCard,@Nullable File skinFolder,@NotNull Map<String,String> hardwareProperties,boolean createSnapshot){
  if (!initIfNecessary()) {
    return null;
  }
  File avdFolder;
  try {
    if (currentInfo != null) {
      avdFolder=new File(currentInfo.getDataFolderPath());
    }
 else {
      avdFolder=AvdInfo.getDefaultAvdFolder(myAvdManager,avdName,myFileOp,true);
    }
  }
 catch (  AndroidLocation.AndroidLocationException e) {
    IJ_LOG.error("Could not create AVD " + avdName,e);
    return null;
  }
  Dimension resolution=device.getScreenSize(orientation);
  assert resolution != null;
  String skinName=null;
  if (skinFolder == null && isCircular) {
    skinFolder=getRoundSkin(systemImageDescription);
  }
  if (FileUtil.filesEqual(skinFolder,AvdWizardUtils.NO_SKIN)) {
    skinFolder=null;
  }
  if (skinFolder == null) {
    skinName=String.format("%dx%d",Math.round(resolution.getWidth()),Math.round(resolution.getHeight()));
  }
  if (orientation == ScreenOrientation.LANDSCAPE) {
    hardwareProperties.put(HardwareProperties.HW_INITIAL_ORIENTATION,ScreenOrientation.LANDSCAPE.getShortDisplayValue().toLowerCase(Locale.ROOT));
  }
  if (currentInfo != null && !avdName.equals(currentInfo.getName())) {
    boolean success=myAvdManager.moveAvd(currentInfo,avdName,currentInfo.getDataFolderPath(),SDK_LOG);
    if (!success) {
      return null;
    }
  }
  return myAvdManager.createAvd(avdFolder,avdName,systemImageDescription.getSystemImage(),skinFolder,skinName,sdCard,hardwareProperties,device.getBootProps(),createSnapshot,false,currentInfo != null,SDK_LOG);
}

public void engineDeleteEntry(String alias) throws KeyStoreException {
synchronized (entries) {
    entries.remove(alias.toLowerCase(Locale.ENGLISH));
  }
}

public DisjointSets(int numElements){
  array=new int[numElements];
  Arrays.fill(array,-1);
}

public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {
  if (m_finalClusters == null) {
    updateClusters(clusterData,matIndexToMsgInternalId);
  }
  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {
    final String n=entry.getKey();
    final Collection<Integer> c=entry.getValue();
    out.printf("%s\t",n);
    for (    int m : c) {
      out.printf("%d\t",matIndexToMsgInternalId[m]);
    }
    out.println();
  }
}

protected void addToGUI(JPanel gui,JTextField b,String cmd){
  b.setActionCommand(cmd);
  b.addActionListener(this);
  gui.add(b);
}

public synchronized void remove(int index){
  mCategories.remove(index);
  mValues.remove(index);
}

static TokenStream wrap(String fieldName,Analyzer indexAnalyzer,String content,char splitChar) throws IOException {
  if (indexAnalyzer.getOffsetGap(fieldName) != 1) {
    throw new IllegalArgumentException("offset gap of the provided analyzer should be 1 (field " + fieldName + ")");
  }
  int splitCharIdx=content.indexOf(splitChar);
  if (splitCharIdx == -1) {
    return indexAnalyzer.tokenStream(fieldName,content);
  }
  TokenStream subTokenStream=indexAnalyzer.tokenStream(fieldName,content.substring(0,splitCharIdx));
  return new MultiValueTokenStream(subTokenStream,fieldName,indexAnalyzer,content,splitChar,splitCharIdx);
}

public final boolean check_trace(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_clearance_class_no,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_max_spring_over_recursion_depth){
  AwtreeShapeSearch search_tree=search_tree_manager.get_default_tree();
  int compensated_half_width=p_half_width + search_tree.get_clearance_compensation(p_clearance_class_no,p_layer);
  ArrayList<ShapeTile> trace_shapes=p_polyline.offset_shapes(compensated_half_width,0,p_polyline.corner_count());
  for (int index=0; index < trace_shapes.size(); ++index) {
    ShapeTile curr_trace_shape=trace_shapes.get(index);
    BrdFromSide from_side=new BrdFromSide(p_polyline,index + 1,curr_trace_shape);
    boolean check_shove_ok=shove_trace_algo.shove_trace_check(curr_trace_shape,from_side,null,p_layer,p_net_no_arr,p_clearance_class_no,p_max_recursion_depth,p_max_via_recursion_depth,p_max_spring_over_recursion_depth,null);
    if (!check_shove_ok)     return false;
  }
  return true;
}

public static void delete(File fileOrFolder) throws IOException {
  if (fileOrFolder != null)   delete(fileOrFolder.toPath());
}

public static double[] expandArrayD(int bufferSize,double[] currentArray){
  if (currentArray == null) {
    return new double[bufferSize * 3];
  }
  int length=currentArray.length;
  double[] ret=new double[length + bufferSize * 3];
  System.arraycopy(currentArray,0,ret,0,length);
  return ret;
}

@SuppressWarnings("unchecked") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){
  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {
    BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);
    MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues();
    if (mappingResources != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue("mappingResources");
      if (propertyValue == null) {
        propertyValue=new PropertyValue("mappingResources",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(mappingResources);
    }
    if (annotatedClasses != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue("annotatedClasses");
      if (propertyValue == null) {
        propertyValue=new PropertyValue("annotatedClasses",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingMappingResources=(List)propertyValue.getValue();
      existingMappingResources.addAll(annotatedClasses);
    }
    if (configLocations != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue("configLocations");
      if (propertyValue == null) {
        propertyValue=new PropertyValue("configLocations",new ArrayList());
        propertyValues.addPropertyValue(propertyValue);
      }
      List existingConfigLocations=(List)propertyValue.getValue();
      existingConfigLocations.addAll(configLocations);
    }
    if (hibernateProperties != null) {
      PropertyValue propertyValue=propertyValues.getPropertyValue("hibernateProperties");
      if (propertyValue == null) {
        propertyValue=new PropertyValue("hibernateProperties",new Properties());
        propertyValues.addPropertyValue(propertyValue);
      }
      Properties existingHibernateProperties=(Properties)propertyValue.getValue();
      existingHibernateProperties.putAll(hibernateProperties);
    }
  }
 else {
    throw new NoSuchBeanDefinitionException("No bean named [" + sessionFactoryBeanName + "] exists within the bean factory. "+ "Cannot post process session factory to add Hibernate resource definitions.");
  }
}

protected int encode(double value,double lower,double upper,int nbits){
  if (value < lower)   return 0;
  int maxval=(int)(Math.pow(2,nbits) - 1);
  if (value >= upper)   return maxval;
  return (int)((value - lower) * ((maxval - 0) / (upper - lower)));
}

public long skipBytes(long n) throws IOException {
  long count=0;
  long gotsofar=0;
  if (inputStream == null) {
    reopen();
    if (inputStream == null) {
      reopen();
      throw new IOException("Stream closed, can't be reopened");
    }
  }
  while (count < n) {
    gotsofar=inputStream.skip(n - count);
    if (gotsofar == 0) {
      Debug.error("StreamInputReader can't skip " + n + " bytes as instructed");
      break;
    }
    count+=gotsofar;
  }
  count((int)count);
  return count;
}

private void createLock() throws IOException {
synchronized (LockableFileWriter.class) {
    if (!lockFile.createNewFile()) {
      throw new IOException("Can't write file, lock " + lockFile.getAbsolutePath() + " exists");
    }
    lockFile.deleteOnExit();
  }
}

public void handleTblDSAttributeMapListHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {
  try {
    Map values=getValues();
    onBeforeSaveProfile(values);
    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);
    WSPPServiceDSAttributeMapListEditViewBean vb=(WSPPServiceDSAttributeMapListEditViewBean)getViewBean(WSPPServiceDSAttributeMapListEditViewBean.class);
    unlockPageTrail();
    passPgSessionMap(vb);
    vb.populateValues((String)getDisplayFieldValue("tblDSAttributeMapListHrefAction"));
    vb.forwardTo(getRequestContext());
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());
    forwardTo();
  }
}

private V doGet(Object key){
  if (key == null)   throw new NullPointerException();
  Comparator<? super K> cmp=comparator;
  outer:   for (; ; ) {
    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {
      Object v;
      int c;
      if (n == null)       break outer;
      Node<K,V> f=n.next;
      if (n != b.next)       break;
      if ((v=n.value) == null) {
        n.helpDelete(b,f);
        break;
      }
      if (b.value == null || v == n)       break;
      if ((c=cpr(cmp,key,n.key)) == 0) {
        @SuppressWarnings("unchecked") V vv=(V)v;
        return vv;
      }
      if (c < 0)       break outer;
      b=n;
      n=f;
    }
  }
  return null;
}

void handleSwfLoadedEvent(SwfLoadedEvent e){
  dumpSwfLoadedLine(e);
}

private void quickReply(){
  quickReplySmsMessage=smsPopupPager.getActiveMessage();
  quickReply(quickReplySmsMessage.getReplyText());
}

@Override protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException("Write failed, file " + getPath() + " not mapped for I/O");
  }
}

public boolean hasChanged(){
  return System.identityHashCode(config) != initialHash;
}

void fixCompatibility(View root){
  Queue<View> queue=new LinkedList<View>();
  queue.add(root);
  View view=null;
  while ((view=queue.poll()) != null) {
    if (view instanceof ViewGroup) {
      ViewGroup group=(ViewGroup)view;
      for (int i=0; i < group.getChildCount(); i++) {
        queue.add(group.getChildAt(i));
      }
    }
  }
}

protected abstract Set<SocketAddress> bindInternal(List<? extends SocketAddress> localAddresses) throws Exception ;

public void substituteHeader(int state,String header) throws AuthLoginException {
  if (debug.messageEnabled()) {
    debug.message("substituteHeader : state=" + state + ", header="+ header);
  }
  if (state > stateLength) {
    throw new AuthLoginException(bundleName,"invalidState",new Object[]{new Integer(state)});
  }
  Callback[] ext=getCallback(state);
  if (ext.length <= 0) {
    throw new AuthLoginException(bundleName,"invalidCallbackIndex",null);
  }
  if ((header != null) && (header.length() != 0)) {
    PagePropertiesCallback pc=(PagePropertiesCallback)((Callback[])internal.get(state - 1))[0];
    pc.setHeader(header);
  }
}

public static Service createService(PatternTimetable timetable){
  Calendar calendar=new Calendar();
  calendar.monday=timetable.monday ? 1 : 0;
  calendar.tuesday=timetable.tuesday ? 1 : 0;
  calendar.wednesday=timetable.wednesday ? 1 : 0;
  calendar.thursday=timetable.thursday ? 1 : 0;
  calendar.friday=timetable.friday ? 1 : 0;
  calendar.saturday=timetable.saturday ? 1 : 0;
  calendar.sunday=timetable.sunday ? 1 : 0;
  StringBuilder nameBuilder=new StringBuilder("MOD-");
  nameBuilder.append(timetable.monday ? 'M' : 'x');
  nameBuilder.append(timetable.monday ? 'T' : 'x');
  nameBuilder.append(timetable.monday ? 'W' : 'x');
  nameBuilder.append(timetable.monday ? 'T' : 'x');
  nameBuilder.append(timetable.monday ? 'F' : 'x');
  nameBuilder.append(timetable.monday ? 'S' : 'x');
  nameBuilder.append(timetable.monday ? 'S' : 'x');
  Service service=new Service(nameBuilder.toString());
  calendar.start_date=18500101;
  calendar.end_date=22000101;
  service.calendar=calendar;
  return service;
}

public boolean remove(ImageInfo object){
  final int location=getLocation(object);
  final boolean removed=data.remove(object);
  notifyItemRemoved(location);
  return removed;
}

public T allowedUsers(User... users){
  List<User> usersList=Arrays.asList(users);
  this.userPredicate=null;
  return instance();
}

VPlexDistributedDeviceInfo findDistributedDevice(String deviceName) throws VPlexApiException {
  return findDistributedDevice(deviceName,false);
}

@SuppressWarnings("unchecked") public static <T extends Packet>void registerOutListener(final Class<T> type,Player player,Predicate<T> listener){
  NetworkManagerWrapper wrapper=wrapNetworkManager(player);
  wrapper.registerOutgoingListener(type,listener);
}

static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}

public void notifyTasks(){
  if (tracker.shouldInterruptTask()) {
    for (    Thread t : threadMap.values()) {
      t.interrupt();
    }
  }
}

public RequestParams(Object... keysAndValues){
  int len=keysAndValues.length;
  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");
  for (int i=0; i < len; i+=2) {
    String key=String.valueOf(keysAndValues[i]);
    String val=String.valueOf(keysAndValues[i + 1]);
    put(key,val);
  }
}

public boolean confirmOverwrite(final File file){
  String message="The file \"" + file.getName() + "\" already exists. Overwrite?";
  Object[] options={"OK","Cancel"};
  return JOptionPane.YES_OPTION == JOptionPane.showOptionDialog(null,message,"Warning",JOptionPane.DEFAULT_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);
}

public TvShowUpdateDatasourceTask(String datasource){
  super(BUNDLE.getString("update.datasource") + " (" + datasource+ ")");
  tvShowList=TvShowList.getInstance();
  dataSources=new ArrayList<>(1);
  dataSources.add(datasource);
}

public int findLine(int offset){
  int line=lineStarts.length - 1;
  while ((lineStarts[line] > offset) && (line > 0)) {
    line--;
  }
  return line;
}

public void clear(){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  selection.clear();
  if (!oldSelection.isEmpty()) {
    fireSelectionChanged(oldSelection,selection);
  }
}

public Object newNonMovableArray(Class<?> componentType,int length){
  return Array.newInstance(componentType,length);
}

private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {
  ThriftFileElement element=null;
  File dir=null;
  File file=findFirstExisting(path,null);
  if (file != null) {
    file=file.getCanonicalFile();
    if (loadedFiles.containsKey(file.getAbsolutePath())) {
      return;
    }
    dir=file.getParentFile();
    element=loadSingleFile(file.getParentFile(),file.getName());
  }
  if (element == null) {
    throw new FileNotFoundException("Failed to locate " + path + " in "+ includePaths);
  }
  loadedFiles.put(file.getAbsolutePath(),element);
  ImmutableList<IncludeElement> includes=element.includes();
  if (includes.size() > 0) {
    includePaths.addFirst(dir);
    for (    IncludeElement include : includes) {
      if (!include.isCpp()) {
        loadFileRecursively(include.path(),loadedFiles);
      }
    }
    includePaths.removeFirst();
  }
}

public void assureProxyOk(){
  if (socket.isClosed()) {
    restart();
  }
}

@Override public boolean add(IMessage message){
  return add(message,false);
}

public Key(byte[] hash){
  if (hash.length != SHA1_HASH_LENGTH) {
    throw new IllegalArgumentException("Invalid Hash must be 20bytes, was: " + hash.length);
  }
  System.arraycopy(hash,0,this.hash,0,SHA1_HASH_LENGTH);
}

public static int[] concatAllInt(int[]... arrays){
  int totalLength=0;
  final int subArrayCount=arrays.length;
  for (int i=0; i < subArrayCount; ++i) {
    totalLength+=arrays[i].length;
  }
  int[] result=Arrays.copyOf(arrays[0],totalLength);
  int offset=arrays[0].length;
  for (int i=1; i < subArrayCount; ++i) {
    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);
    offset+=arrays[i].length;
  }
  return result;
}

private static RoadPermission roadFlagComparision(Way iosmWay,String newTag,String newValue,EnumSet<EdgeStore.EdgeFlag> forwardExpected,EnumSet<EdgeStore.EdgeFlag> backwardExpected){
  Way osmWay=new Way();
  StringJoiner stringJoiner=new StringJoiner(";");
  for (  OSMEntity.Tag tag : iosmWay.tags) {
    osmWay.addTag(tag.key,tag.value);
    stringJoiner.add(tag.key + "=" + tag.value);
  }
  if (newTag != null && newValue != null) {
    osmWay.addTag(newTag,newValue);
    stringJoiner.add(newTag + "=" + newValue);
  }
  Set<EdgeStore.EdgeFlag> forwardFiltered;
  Set<EdgeStore.EdgeFlag> backwardFiltered;
  RoadPermission roadPermission=traversalPermissionLabeler.getPermissions(osmWay);
  forwardFiltered=filterFlags(roadPermission.forward);
  backwardFiltered=filterFlags(roadPermission.backward);
  String tags="Tags: " + stringJoiner.toString();
  assertEquals(tags,forwardExpected,forwardFiltered);
  assertEquals(tags,backwardExpected,backwardFiltered);
  return roadPermission;
}

public void beginDisplay(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.beginDisplay(event);
  if (!canModify) {
    Map mapValues=getDefaultValues();
    if ((mapValues != null) && !mapValues.isEmpty()) {
      Set values=(Set)mapValues.get(AMIdentityMembershipCondition.AM_IDENTITY_NAME);
      Set identityNames=helper.getAMIdentityNames(model.getUserSSOToken(),values);
      propertySheetModel.setValue(VALUES_MULTIPLE_CHOICE_VALUE,AMAdminUtils.getString(identityNames,",",false));
    }
  }
 else {
    CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
    Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
    OptionList entityTypes=createOptionList(supportedEntityTypes);
    entityTypes.add(0,"policy.subject.select.identity.type","");
    menu.setOptions(entityTypes);
    menu.setValue("");
    CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
    child.restoreStateData();
    if (!submitCycle) {
      helper.setSelectedIdentities(child,model.getUserSSOToken(),model.getUserLocale(),this,getDefaultValues());
    }
 else {
      OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
      OptionList selected=addRemoveModel.getSelectedOptionList();
      List selectedIds=AMAdminUtils.toList(selected);
      child.resetStateData();
      addRemoveModel.setAvailableOptionList(possible);
      addRemoveModel.setSelectedOptionList(helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,selectedIds));
    }
  }
}

public byte[] readBytes() throws IOException {
  int len=readInt();
  if (len == -1) {
    return null;
  }
  byte[] b=DataUtils.newBytes(len);
  in.readFully(b);
  return b;
}

protected int chunkSize(int n){
  int power=(n == 0 || n == 1) ? initialChunkPower : Math.min(initialChunkPower + n - 1,AbstractSpinedBuffer.MAX_CHUNK_POWER);
  return 1 << power;
}

public String useRelativePathTipText(){
  return "Use relative rather than absolute paths";
}

public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){
  return join(clazz,alias,new ArrayList<URI>(Arrays.asList(ids)));
}

public void closeFile(){
  closeFile(true);
}

public List<Interface> showInterface() throws NetworkDeviceControllerException {
  List<Interface> interfaces=new ArrayList<Interface>();
  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showInterface.cmd"),60000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString("MDSDialog.showInterface.interfacename.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portdescription.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortWWN.match"),MDSDialogProperties.getString("MDSDialog.showInterface.PortmodeFCID.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portvsan.match"),MDSDialogProperties.getString("MDSDialog.showInterface.Portmode.match")};
  String[] groups=new String[10];
  Interface intf=null;
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      intf=new Interface(groups[0]);
    intf.setStatus(groups[1]);
  interfaces.add(intf);
break;
case 1:
intf.setDescription(groups[0]);
break;
case 2:
intf.setWwpn(groups[0]);
break;
case 3:
intf.setMode(groups[0]);
intf.setFcid(groups[1]);
break;
case 4:
intf.setVsan(groups[0]);
break;
case 5:
intf.setMode(groups[0]);
break;
}
}
return interfaces;
}

protected void clearDataLists(int obdService){
switch (obdService) {
case OBD_SVC_DATA:
case OBD_SVC_FREEZEFRAME:
    pidSupported.clear();
  PidPvs.clear();
break;
case OBD_SVC_READ_CODES:
case OBD_SVC_PENDINGCODES:
case OBD_SVC_PERMACODES:
tCodes.clear();
break;
case OBD_SVC_VEH_INFO:
pidSupported.clear();
VidPvs.clear();
break;
}
}

public QuadEdge makeEdge(Vertex o,Vertex d){
  QuadEdge q=QuadEdge.makeEdge(o,d);
  quadEdges.add(q);
  return q;
}

public static void sortSeqs(List<String> seqs){
  Collections.sort(seqs,null);
}

default B with(String key,long value){
  return with(key,Long.toString(value));
}

private void listDirectory(File directory,RelativeDirectory subdirectory,Set<JavaFileObject.Kind> fileKinds,boolean recurse,ListBuffer<JavaFileObject> resultList){
  File d=subdirectory.getFile(directory);
  if (!caseMapCheck(d,subdirectory))   return;
  File[] files=d.listFiles();
  if (files == null)   return;
  if (sortFiles != null)   Arrays.sort(files,sortFiles);
  for (  File f : files) {
    String fname=f.getName();
    if (f.isDirectory()) {
      if (recurse && SourceVersion.isIdentifier(fname)) {
        listDirectory(directory,new RelativeDirectory(subdirectory,fname),fileKinds,recurse,resultList);
      }
    }
 else {
      if (isValidFile(fname,fileKinds)) {
        JavaFileObject fe=new RegularFileObject(this,fname,new File(d,fname));
        resultList.append(fe);
      }
    }
  }
}

private Shape decodeEdge(int width,int height){
  path.reset();
  path.moveTo(width - 2,0);
  path.lineTo(width - 2,height - 4);
  path.lineTo(width - 4,height - 2);
  path.lineTo(3,height - 2);
  return path;
}

public void dispose() throws IabAsyncInProgressException {
synchronized (mAsyncInProgressLock) {
    if (mAsyncInProgress) {
      throw new IabAsyncInProgressException("Can't dispose because an async operation " + "(" + mAsyncOperation + ") is in progress.");
    }
  }
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
  }
  mDisposed=true;
  mContext=null;
  mServiceConn=null;
  mService=null;
  mPurchaseListener=null;
}

private void testScenario(String aConfiguration,boolean anExpectingAnException,List<Method> aMethodsToCall) throws Exception {
  if (aMethodsToCall.isEmpty()) {
    testScenario(aConfiguration,anExpectingAnException,(Method)null);
  }
 else {
    for (    Method myMethod : aMethodsToCall) {
      testScenario(aConfiguration,anExpectingAnException,myMethod);
    }
  }
}

private static File createReserveDiskCacheDir(Context context){
  File cacheDir=StorageUtils.getCacheDirectory(context,false);
  File individualDir=new File(cacheDir,"uil-images");
  if (individualDir.exists() || individualDir.mkdir()) {
    cacheDir=individualDir;
  }
  return cacheDir;
}

public boolean hasBeenCalled(String resourceName){
  return uris.contains(resourceName);
}

@Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
  super.readExternal(in);
  isLeaf=in.readBoolean();
  numEntries=in.readInt();
}

public ObjIdMap(){
  this(11,0.75f);
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public static ConnectionFactory newFailoverConnectionPool(Set<LDAPURL> servers,String username,char[] password,int maxSize,int heartBeatInterval,String heartBeatTimeUnit,Options ldapOptions){
  List<ConnectionFactory> factories=new ArrayList<ConnectionFactory>(servers.size());
  for (  LDAPURL ldapurl : servers) {
    ConnectionFactory cf=Connections.newFixedConnectionPool(newConnectionFactory(ldapurl,username,password,heartBeatInterval,heartBeatTimeUnit,ldapOptions),maxSize);
    factories.add(cf);
  }
  return loadBalanceFactories(factories);
}

public boolean isCritical(){
  return true;
}

public PrintfFormat(final String fmtArg) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtArg);
}

public static void initCause(Throwable throwable,Throwable cause){
  if (INIT_CAUSE_METHOD != null) {
    try {
      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});
    }
 catch (    Exception e) {
    }
  }
}

public MessagePropertyKey(String description,Integer ordinal){
  this.description=description;
  this.ordinal=ordinal;
}

private Node addWaiter(Node mode){
  Node node=new Node(Thread.currentThread(),mode);
  Node pred=tail;
  if (pred != null) {
    node.prev=pred;
    if (compareAndSetTail(pred,node)) {
      pred.next=node;
      return node;
    }
  }
  enq(node);
  return node;
}

private void assertBounded(SortedSet<String> deserialized,boolean bounded){
  if (bounded) {
    try {
      deserialized.add("e");
      fail();
    }
 catch (    IllegalArgumentException expected) {
    }
  }
 else {
    assertTrue(deserialized.add("e"));
    assertTrue(deserialized.remove("e"));
  }
}

public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;
  if (g instanceof Graphics2D) {
    Graphics2D g2=(Graphics2D)g;
    g2.translate(x,y);
    paint(g2,comp,width,height);
    g2.translate(-x,-y);
  }
 else {
    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2=(Graphics2D)img.getGraphics();
    paint(g2,comp,width,height);
    g2.dispose();
    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);
  }
}

@SuppressWarnings({"unchecked","rawtypes"}) public static LineByLineFileInputOperator restoreCheckPoint(LineByLineFileInputOperator checkPointOper,ByteArrayOutputStream bos) throws Exception {
  Kryo kryo=new Kryo();
  Input lInput=new Input(bos.toByteArray());
  LineByLineFileInputOperator oper=kryo.readObject(lInput,checkPointOper.getClass());
  lInput.close();
  return oper;
}

private static byte[] readClass(final InputStream is,boolean close) throws IOException {
  if (is == null) {
    throw new IOException("Class not found");
  }
  try {
    byte[] b=new byte[is.available()];
    int len=0;
    while (true) {
      int n=is.read(b,len,b.length - len);
      if (n == -1) {
        if (len < b.length) {
          byte[] c=new byte[len];
          System.arraycopy(b,0,c,0,len);
          b=c;
        }
        return b;
      }
      len+=n;
      if (len == b.length) {
        int last=is.read();
        if (last < 0) {
          return b;
        }
        byte[] c=new byte[b.length + 1000];
        System.arraycopy(b,0,c,0,len);
        c[len++]=(byte)last;
        b=c;
      }
    }
  }
  finally {
    if (close) {
      is.close();
    }
  }
}

private static synchronized boolean isSupportedImpl(HttpCallerInfo hci){
  if (supported == null) {
    supported=new HashMap<String,Boolean>();
    cache=new HashMap<String,Negotiator>();
  }
  String hostname=hci.host;
  hostname=hostname.toLowerCase();
  if (supported.containsKey(hostname)) {
    return supported.get(hostname);
  }
  Negotiator neg=Negotiator.getNegotiator(hci);
  if (neg != null) {
    supported.put(hostname,true);
    cache.put(hostname,neg);
    return true;
  }
 else {
    supported.put(hostname,false);
    return false;
  }
}

public CProjectConfiguration(final INaviProject project,final ListenerProvider<IProjectListener> listeners,final SQLProvider provider,final int projectId,final String name,final String description,final Date creationDate,final Date modificationDate,final List<DebuggerTemplate> assignedDebuggers){
  m_project=project;
  m_listeners=listeners;
  m_provider=provider;
  m_id=projectId;
  m_name=name;
  m_description=description;
  m_creationDate=new Date(creationDate.getTime());
  m_modificationDate=new Date(modificationDate.getTime());
  m_assignedDebuggers=new ArrayList<DebuggerTemplate>(assignedDebuggers);
}

public Shape chartToScreenShape(Shape s){
  GeneralPath p=new GeneralPath();
  Transform inverse=Transform.makeTranslation(getAbsoluteX(),getAbsoluteY());
  if (currentTransform != null) {
    inverse.concatenate(currentTransform);
  }
  p.append(s.getPathIterator(inverse),false);
  return p;
}

@Override public void addShutdownWindow(final Window window){
  if (m_isShutDown) {
    closeWindow(window);
    return;
  }
synchronized (this) {
    if (m_isShutDown) {
      closeWindow(window);
      return;
    }
    m_windowsToCloseOnShutdown.add(window);
  }
}

public PerformanceLogger(){
  time1=System.currentTimeMillis();
}

public AuthRequest authenticate(List discoveries,String returnToUrl) throws ConsumerException, MessageException {
  return authenticate(discoveries,returnToUrl,returnToUrl);
}

public Hash(String hex){
  if (hex.length() != 64) {
    throw new IllegalArgumentException("Digest length must be 64 hex characters for Hash");
  }
  this.bytes=ByteUtils.reverse(ByteUtils.fromHex(hex));
}

private String[] diff_halfMatchI(String longtext,String shorttext,int i){
  String seed=longtext.substring(i,i + longtext.length() / 4);
  int j=-1;
  String best_common="";
  String best_longtext_a="", best_longtext_b="";
  String best_shorttext_a="", best_shorttext_b="";
  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {
    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));
    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));
    if (best_common.length() < suffixLength + prefixLength) {
      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);
      best_longtext_a=longtext.substring(0,i - suffixLength);
      best_longtext_b=longtext.substring(i + prefixLength);
      best_shorttext_a=shorttext.substring(0,j - suffixLength);
      best_shorttext_b=shorttext.substring(j + prefixLength);
    }
  }
  if (best_common.length() * 2 >= longtext.length()) {
    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};
  }
 else {
    return null;
  }
}

public boolean isNumericalRun(String pin){
  final int len=pin.length();
  int prevDigit=Character.digit(pin.charAt(0),10);
  int prevDiff=Integer.MAX_VALUE;
  boolean isRun=true;
  for (int i=1; isRun && i < len; i++) {
    final int digit=Character.digit(pin.charAt(i),10);
    final int diff=digit - prevDigit;
    if (prevDiff != Integer.MAX_VALUE && diff != prevDiff) {
      isRun=false;
    }
    prevDiff=diff;
    prevDigit=digit;
  }
  return isRun;
}

@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  setupBounds(w,h);
  setupPaints();
  invalidate();
}

public static int uriType(String uri){
  if (uri.indexOf(':') != -1) {
    return ABS_URI;
  }
 else   if (uri.startsWith("/")) {
    return ROOT_REL_URI;
  }
 else {
    return NOROOT_REL_URI;
  }
}

public Map<String,Object> convertDataToObjects(Map<String,String> data){
  Map<String,Object> results=new HashMap<>();
  if (data != null) {
    for (    String key : data.keySet()) {
      results.put(key,data.get(key));
    }
  }
  return results;
}

public static void addGlue(JComponent b,boolean horiz){
  b.add(horiz ? Box.createHorizontalGlue() : Box.createVerticalGlue());
}

public static boolean isResourceReference(String str){
  return str.startsWith(BIG_QUOTE_LEFT) && str.endsWith(BIG_QUOTE_RIGHT) && str.charAt(1) == AT.charAt(0);
}

public boolean leave() throws KeeperException, InterruptedException {
  zooKeeper.delete(rootPath + "/" + name,0);
  while (true) {
synchronized (mutex) {
      List<String> list=zooKeeper.getChildren(rootPath,true);
      if (list.size() > 0) {
        mutex.wait();
      }
 else {
        return true;
      }
    }
  }
}

public Enumeration<? extends Principal> members(){
  Vector<Principal> v=new Vector<Principal>(1);
  v.addElement(this);
  return v.elements();
}

public SelectClause addWithAsProvidedName(String propertyName,String asName){
  selectList.add(new SelectClauseExpression(new PropertyValueExpression(propertyName),asName));
  return this;
}

public void addInterface(String interfaceName){
  short interfaceIndex=itsConstantPool.addClass(interfaceName);
  itsInterfaces.add(Short.valueOf(interfaceIndex));
}

public static String cutFromIndexOf(String string,String substring){
  int i=string.indexOf(substring);
  if (i != -1) {
    string=string.substring(i);
  }
  return string;
}

private Response requestHttpGetFromRegistry(String url) throws RegistryException {
  try {
    Response resp=http.get(url);
    if (resp != null && resp.content != null) {
      return resp;
    }
 else {
      throw new RegistryException(TYPE.BAD_RESPONSE,"Response content is null");
    }
  }
 catch (  ClassCastException e) {
    throw new RegistryException(TYPE.BAD_RESPONSE,e);
  }
catch (  ConnectException e) {
    throw new RegistryException(TYPE.PROXY,e);
  }
catch (  UnknownHostException e) {
    try {
      http.get("http://www.google.com");
    }
 catch (    Exception e1) {
      throw new RegistryException(TYPE.NO_INTERNET,e1);
    }
    throw new RegistryException(TYPE.SITE_DOWN,e);
  }
catch (  IOException e) {
    throw new RegistryException(TYPE.IO_ERROR,e);
  }
catch (  URISyntaxException e) {
    throw new RegistryException(TYPE.BAD_REQUEST,"Please check the request URL: " + ((url != null) ? url : "empty URL used!"));
  }
}

public void testIterator() throws InterruptedException {
  LinkedBlockingQueue q=populatedQueue(SIZE);
  Iterator it=q.iterator();
  while (it.hasNext()) {
    assertEquals(it.next(),q.take());
  }
}

public static Builder newBuilder(){
  return new Builder();
}

public void init(RemoteAuthenticatedUser currentUser){
  this.currentUser=currentUser;
}

public static void invokeFinalize(Object o) throws Throwable {
  o.finalize();
}

private void removeTvShow(TvShow tvShow){
synchronized (root) {
    TvShowTreeNode child=(TvShowTreeNode)nodeMap.get(tvShow);
    DefaultMutableTreeNode parent=root;
    if (child != null) {
      int index=getIndexOfChild(parent,child);
      nodeMap.remove(tvShow);
      for (      TvShowEpisode episode : new ArrayList<>(tvShow.getEpisodes())) {
        nodeMap.remove(episode);
        episode.removePropertyChangeListener(propertyChangeListener);
      }
      tvShow.removePropertyChangeListener(propertyChangeListener);
      child.removeAllChildren();
      child.removeFromParent();
      if (index > -1) {
        TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});
        for (        TreeModelListener listener : listeners) {
          try {
            listener.treeNodesRemoved(event);
          }
 catch (          NullPointerException|ArrayIndexOutOfBoundsException npe) {
          }
        }
      }
    }
  }
}

private ComplianceFeature checkEncryptPolicy(org.wso2.emm.agent.beans.Operation operation){
  boolean encryptStatus=(devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_UNSUPPORTED && devicePolicyManager.getStorageEncryptionStatus() != devicePolicyManager.ENCRYPTION_STATUS_INACTIVE);
  if ((operation.isEnabled() && encryptStatus) || (!operation.isEnabled() && !encryptStatus)) {
    policy.setCompliance(true);
  }
 else {
    policy.setCompliance(false);
    policy.setMessage(resources.getString(R.string.error_encrypt_policy));
  }
  return policy;
}

public static int instanceOf(Object o,Class<?> c){
  if (o == null)   return FALSE;
  return c.isAssignableFrom(o.getClass()) ? TRUE : FALSE;
}

@Override public void add(int location,E object){
  insertElementAt(object,location);
}

private long cacheResponseAge(){
  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;
  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;
  long responseDuration=receivedResponseMillis - sentRequestMillis;
  long residentDuration=nowMillis - receivedResponseMillis;
  return receivedAge + responseDuration + residentDuration;
}

@Override public Void call() throws Exception {
  MulticastSocket datagramSocket=null;
  ExecutorService service=null;
  try {
    datagramSocket=new MulticastSocket(port);
    datagramSocket.joinGroup(group);
    service=Executors.newSingleThreadScheduledExecutor(new DaemonThreadFactory("GangliaListener"));
    final byte[] buffer=new byte[BUFFER_SIZE];
    final DatagramPacket packet=new DatagramPacket(buffer,0,buffer.length);
    listening=true;
    while (true) {
      try {
        datagramSocket.receive(packet);
        if (Thread.interrupted()) {
          break;
        }
        final IGangliaMessage msg=decodeRecord(packet.getData(),packet.getOffset(),packet.getLength());
        if (msg != null) {
          service.submit(new DispatchTask(handler,msg));
        }
      }
 catch (      Throwable t) {
        log.warn(t,t);
      }
    }
    return (Void)null;
  }
  finally {
    if (service != null) {
      service.shutdown();
    }
    if (datagramSocket != null) {
      datagramSocket.close();
    }
    listening=false;
  }
}

private static int arrayIndex(int i){
  return (i >> SHIFT_PER_WORD);
}

protected static void invalidateSwitchPoints(){
  if (LOG_ENABLED) {
    LOG.info("invalidating switch point");
  }
synchronized (IndyInterface.class) {
    SwitchPoint old=switchPoint;
    switchPoint=new SwitchPoint();
    SwitchPoint.invalidateAll(new SwitchPoint[]{old});
  }
}

public VdcConfig toConfigParam(Properties vdcInfo){
  log.info("copy {} to the sync config param",vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  VdcConfig vdcConfig=new VdcConfig();
  vdcConfig.setId(URIUtil.uri(vdcInfo.getProperty(GeoServiceJob.OPERATED_VDC_ID)));
  vdcConfig.setShortId(vdcInfo.getProperty(GeoServiceJob.VDC_SHORT_ID));
  vdcConfig.setSecretKey(vdcInfo.getProperty(GeoServiceJob.VDC_SECRETE_KEY));
  String name=vdcInfo.getProperty(GeoServiceJob.VDC_NAME);
  if ((name != null) && (!name.isEmpty())) {
    vdcConfig.setName(name);
  }
  String description=vdcInfo.getProperty(GeoServiceJob.VDC_DESCRIPTION);
  if ((description != null) && (!description.isEmpty())) {
    vdcConfig.setDescription(description);
  }
  String endPnt=vdcInfo.getProperty(GeoServiceJob.VDC_API_ENDPOINT);
  if (endPnt != null) {
    vdcConfig.setApiEndpoint(endPnt);
  }
  vdcConfig.setGeoCommandEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEOCOMMAND_ENDPOINT));
  vdcConfig.setGeoDataEndpoint(vdcInfo.getProperty(GeoServiceJob.VDC_GEODATA_ENDPOINT));
  return vdcConfig;
}

protected OSXAdapter(String proxySignature,Object target,Method handler){
  this.proxySignature=proxySignature;
  this.targetObject=target;
  this.targetMethod=handler;
}

private double prediction(Instance inst){
  double[] normalizedInstance=normalizedInstance(inst);
  double normalizedPrediction=prediction(normalizedInstance);
  return denormalizedPrediction(normalizedPrediction);
}

protected Object finish(Map settings) throws WizardException {
  return provider.finish(settings);
}

public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){
  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;
  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;
  return true;
}

protected void fireClusterChange(long timestamp,String type,String message){
  if (listeners != null && !listeners.isEmpty()) {
    ClusterEvent event=new ClusterEvent(this,timestamp,type,message);
    Vector targets;
synchronized (this) {
      targets=(Vector)listeners.clone();
    }
    Enumeration e=targets.elements();
    while (e.hasMoreElements()) {
      ClusterEventListener l=(ClusterEventListener)e.nextElement();
      l.changeCluster(event);
    }
  }
}

public BatchedImageRequest(Request<?> request,ImageContainer container){
  mRequest=request;
  mContainers.add(container);
}

public void delete() throws IOException {
  close();
  deleteContents(directory);
}

public int rgbFor(int pixel){
  return surfaceType.rgbFor(pixel,colorModel);
}

private boolean checkForCarry(final char[] ca1,final int icarry){
  boolean carry=false;
  if (icarry < ca1.length) {
    if (ca1[icarry] == '6' || ca1[icarry] == '7' || ca1[icarry] == '8' || ca1[icarry] == '9') {
      carry=true;
    }
 else     if (ca1[icarry] == '5') {
      int ii=icarry + 1;
      for (; ii < ca1.length; ii++) {
        if (ca1[ii] != '0') {
          break;
        }
      }
      carry=ii < ca1.length;
      if (!carry && icarry > 0) {
        carry=(ca1[icarry - 1] == '1' || ca1[icarry - 1] == '3' || ca1[icarry - 1] == '5' || ca1[icarry - 1] == '7' || ca1[icarry - 1] == '9');
      }
    }
  }
  return carry;
}

protected void addBottomComponent(Component bottomComponent){
  c.weighty=2;
  layout.setConstraints(bottomComponent,c);
  contentPanel.add(bottomComponent);
}

public static boolean deleteDirectoryFiles(Set<String> inputFilePathsAndNames){
  if ((inputFilePathsAndNames == null)) {
    return false;
  }
  boolean didSuccessfullyDeleteAllFiles=true;
  try {
    for (    String filePathAndName : inputFilePathsAndNames) {
      File file=new File(filePathAndName);
      if (!file.isDirectory()) {
        boolean deleteSuccess=deleteFile(filePathAndName);
        if (!deleteSuccess) {
          logger.debug("Warning - " + filePathAndName + " failed to delete");
          didSuccessfullyDeleteAllFiles=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyDeleteAllFiles;
}

public static File createTempDir(File dir,boolean cleanup) throws IOException {
  if (!dir.mkdirs() && !dir.exists()) {
    throw new IOException(String.format("Failed to create directory structure '%s'",dir.toString()));
  }
  if (cleanup) {
    addCleanupHook(dir.toPath());
  }
  return dir;
}

public void emitInit(){
  out.append("  private static final int [] ");
  out.append(constName());
  out.append(" = zzUnpack");
  out.append(name);
  out.append("();");
  nl();
  nextChunk();
}

public static String readCookieIgnoreSpecialCharacters(HttpServletRequest request,String cookieName){
  String cs=request.getHeader("cookie");
  if (cs == null)   return null;
  int start=cs.indexOf(cookieName);
  if (start < 0)   return null;
  cs=cs.substring(start + 1 + cookieName.length());
  int end=cs.indexOf(';');
  if (end > 0) {
    cs=cs.substring(0,end);
  }
  return cs;
}

protected final void merge(@NotNull Set<LocalResourceRepository> visited,@NotNull ResourceType type,@NotNull SetMultimap<String,String> seenQualifiers,@NotNull ListMultimap<String,ResourceItem> result){
  if (visited.contains(this)) {
    return;
  }
  visited.add(this);
  doMerge(visited,type,seenQualifiers,result);
}

private byte[] translateTransferableString(String str,long format) throws IOException {
  Long lFormat=Long.valueOf(format);
  String charset=getBestCharsetForTextFormat(lFormat,null);
  String eoln=(String)nativeEOLNs.get(lFormat);
  if (eoln != null) {
    int length=str.length();
    StringBuffer buffer=new StringBuffer(length * 2);
    for (int i=0; i < length; i++) {
      if (str.startsWith(eoln,i)) {
        buffer.append(eoln);
        i+=eoln.length() - 1;
        continue;
      }
      char c=str.charAt(i);
      if (c == '\n') {
        buffer.append(eoln);
      }
 else {
        buffer.append(c);
      }
    }
    str=buffer.toString();
  }
  byte[] bytes=str.getBytes(charset);
  Integer terminators=(Integer)nativeTerminators.get(lFormat);
  if (terminators != null) {
    int numTerminators=terminators.intValue();
    byte[] terminatedBytes=new byte[bytes.length + numTerminators];
    System.arraycopy(bytes,0,terminatedBytes,0,bytes.length);
    for (int i=bytes.length; i < terminatedBytes.length; i++) {
      terminatedBytes[i]=0x0;
    }
    bytes=terminatedBytes;
  }
  return bytes;
}

private byte[] createPreviewBuffer(Size previewSize){
  int bitsPerPixel=ImageFormat.getBitsPerPixel(ImageFormat.NV21);
  long sizeInBits=previewSize.getHeight() * previewSize.getWidth() * bitsPerPixel;
  int bufferSize=(int)Math.ceil(sizeInBits / 8.0d) + 1;
  byte[] byteArray=new byte[bufferSize];
  ByteBuffer buffer=ByteBuffer.wrap(byteArray);
  if (!buffer.hasArray() || (buffer.array() != byteArray)) {
    throw new IllegalStateException("Failed to create valid buffer for camera source.");
  }
  mBytesToByteBuffer.put(byteArray,buffer);
  return byteArray;
}

public void add(int pos,Box b){
  children.add(pos,b);
  b.parent=this;
  b.elderParent=elderParent;
}

public Position createPosition(int offset) throws BadLocationException {
  while (queue.poll() != null) {
    unusedMarks++;
  }
  if (unusedMarks > Math.max(5,(marks.size() / 10))) {
    removeUnusedMarks();
  }
  int g0=getGapStart();
  int g1=getGapEnd();
  int index=(offset < g0) ? offset : offset + (g1 - g0);
  search.index=index;
  int sortIndex=findSortIndex(search);
  MarkData m;
  StickyPosition position;
  if (sortIndex < marks.size() && (m=marks.elementAt(sortIndex)).index == index && (position=m.getPosition()) != null) {
  }
 else {
    position=new StickyPosition();
    m=new MarkData(index,position,queue);
    position.setMark(m);
    marks.insertElementAt(m,sortIndex);
  }
  return position;
}

public static String pad(String string,int n,String padding,boolean right){
  if (n < 0) {
    n=0;
  }
  if (n < string.length()) {
    return string.substring(0,n);
  }
 else   if (n == string.length()) {
    return string;
  }
  char paddingChar;
  if (padding == null || padding.length() == 0) {
    paddingChar=' ';
  }
 else {
    paddingChar=padding.charAt(0);
  }
  StringBuilder buff=new StringBuilder(n);
  n-=string.length();
  if (right) {
    buff.append(string);
  }
  for (int i=0; i < n; i++) {
    buff.append(paddingChar);
  }
  if (!right) {
    buff.append(string);
  }
  return buff.toString();
}

private final void resetDTX(AffineTransform at){
  fsref=null;
  dtx=at;
  invdtx=null;
  if (!dtx.isIdentity()) {
    try {
      invdtx=dtx.createInverse();
    }
 catch (    NoninvertibleTransformException e) {
    }
  }
  if (gti != null) {
    gti.strikesRef=null;
  }
}

public static void addActivityListener(ActivityListener listener){
  if (listener != null) {
    startTracking();
    listeners.add(listener);
  }
}

public void addMutedUsername(final String username,final Date muteTill){
  if (isUsernameMuted(username)) {
    removeMutedUsername(username);
  }
  Timestamp muteTillTs=null;
  if (muteTill != null) {
    muteTillTs=new Timestamp(muteTill.getTime());
  }
  s_logger.fine("Muting username:" + username);
  final Connection con=Database.getConnection();
  try {
    final PreparedStatement ps=con.prepareStatement("insert into muted_usernames (username, mute_till) values (?, ?)");
    ps.setString(1,username);
    ps.setTimestamp(2,muteTillTs);
    ps.execute();
    ps.close();
    con.commit();
  }
 catch (  final SQLException sqle) {
    if (sqle.getErrorCode() == 30000) {
      s_logger.info("Tried to create duplicate muted username:" + username + " error:"+ sqle.getMessage());
      return;
    }
    s_logger.log(Level.SEVERE,"Error inserting muted username:" + username,sqle);
    throw new IllegalStateException(sqle.getMessage());
  }
 finally {
    DbUtil.closeConnection(con);
  }
}

private Response<Bitmap> doParse(NetworkResponse response){
  byte[] data=response.data;
  Log.d("Checksum","Decode");
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  Log.d("Checksum","Decodess");
  decodeOptions.inJustDecodeBounds=true;
  BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  int actualWidth=decodeOptions.outWidth;
  int actualHeight=decodeOptions.outHeight;
  int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
  int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
  decodeOptions.inJustDecodeBounds=false;
  decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
  Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
    bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
    tempBitmap.recycle();
  }
 else {
    bitmap=tempBitmap;
  }
  if (bitmap == null) {
    return Response.error(new ParseError(response));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));
  }
}

public void applyComponentOrientation(ComponentOrientation o){
  possiblyFixCursor(o.isLeftToRight());
  super.applyComponentOrientation(o);
}

public boolean isEmpty(){
  return mSelectedWidgets.isEmpty();
}

public void close() throws IOException {
  if (!closed) {
    try {
      finish();
    }
  finally {
      out.close();
      closed=true;
    }
  }
}

protected abstract C newParcelableAdapterInstance(List<Object> items);

public static void nextBytes(byte[] bytes){
  wasAccessed=true;
  for (int i=0; i < bytes.length; )   for (int rnd=nextInt(), n=Math.min(bytes.length - i,4); n-- > 0; rnd>>=8)   bytes[i++]=(byte)rnd;
}

protected void drawLowFarOut(double aRadius,Graphics2D g2,double xx,double m){
  double side=aRadius * 2;
  g2.draw(new Line2D.Double(xx - side,m - side,xx + side,m - side));
  g2.draw(new Line2D.Double(xx - side,m - side,xx,m));
  g2.draw(new Line2D.Double(xx + side,m - side,xx,m));
}

public boolean isJavaLibraryClass(){
  if (name.startsWith("java.") || name.startsWith("sun.") || name.startsWith("javax.")|| name.startsWith("com.sun.")|| name.startsWith("org.omg.")|| name.startsWith("org.xml."))   return true;
  return false;
}

private Set<ObjectName> objectNamesFromFilteredNamedObjects(Set<NamedObject> list,QueryExp query){
  Set<ObjectName> result=new HashSet<ObjectName>();
  if (query == null) {
    for (    NamedObject no : list) {
      result.add(no.getName());
    }
  }
 else {
    final MBeanServer oldServer=QueryEval.getMBeanServer();
    query.setMBeanServer(server);
    try {
      for (      NamedObject no : list) {
        boolean res;
        try {
          res=query.apply(no.getName());
        }
 catch (        Exception e) {
          res=false;
        }
        if (res) {
          result.add(no.getName());
        }
      }
    }
  finally {
      query.setMBeanServer(oldServer);
    }
  }
  return result;
}

private boolean checkTouchSlop(View child,float dx,float dy){
  if (child == null) {
    return false;
  }
  final boolean checkHorizontal=mCallback.getViewHorizontalDragRange(child) > 0;
  final boolean checkVertical=mCallback.getViewVerticalDragRange(child) > 0;
  if (checkHorizontal && checkVertical) {
    return dx * dx + dy * dy > mTouchSlop * mTouchSlop;
  }
 else   if (checkHorizontal) {
    return Math.abs(dx) > mTouchSlop;
  }
 else   if (checkVertical) {
    return Math.abs(dy) > mTouchSlop;
  }
  return false;
}

private Element createEndPoint(String name,String attrBinding,String attrLocation,String attrResponseLocation) throws DOMException {
  if (name == null) {
    throw new IllegalArgumentException("Null name");
  }
  if (attrBinding == null) {
    throw new IllegalArgumentException("Null binding");
  }
  if (attrLocation == null) {
    throw new IllegalArgumentException("Null location");
  }
  Element endPt=doc.createElement(name);
  endPt.setAttribute(SAMLNames.BINDING,attrBinding);
  endPt.setAttribute(SAMLNames.LOCATION,attrLocation);
  if (attrResponseLocation != null) {
    endPt.setAttribute(SAMLNames.RESPLOC,attrResponseLocation);
  }
  return endPt;
}

void putFile(String relativePath,Codebase codebase){
  try {
    File dest=new File(rootDirectory.getAbsolutePath(),relativePath);
    File src=codebase.getFile(relativePath);
    boolean srcExists=filesystem.exists(src);
    boolean destExists=filesystem.exists(dest);
    boolean srcExecutable=filesystem.isExecutable(src);
    boolean destExecutable=filesystem.isExecutable(dest);
    if (!srcExists && !destExists) {
      throw new MoeProblem("Neither src nor dests exists. Unreachable code:%n%s%n%s%n%s",relativePath,src,dest);
    }
    if (!srcExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"rm",relativePath);
      return;
    }
    try {
      filesystem.makeDirsForFile(dest);
      filesystem.copyFile(src,dest);
    }
 catch (    IOException e) {
      throw new MoeProblem(e.getMessage());
    }
    if (!destExists) {
      util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"add","--parents",relativePath);
    }
    String mimeType=guessMimeType(relativePath);
    if (mimeType != null) {
      try {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:mime-type",mimeType,relativePath);
      }
 catch (      CommandRunner.CommandException e) {
        ui.message("Error setting mime-type for %s",relativePath);
      }
    }
    if (destExecutable != srcExecutable) {
      if (srcExecutable) {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propset","svn:executable","*",relativePath);
      }
 else {
        util.runSvnCommandWithWorkingDirectory(rootDirectory.getAbsolutePath(),"propdel","svn:executable",relativePath);
      }
    }
  }
 catch (  CommandRunner.CommandException e) {
    throw new MoeProblem("problem occurred while running svn: " + e.stderr);
  }
}

public String toString(){
  StringBuffer buffer=new StringBuffer();
  buffer.append(toString(getClass()));
  buffer.append("[UseDefault=");
  buffer.append(isUseDefault());
  buffer.append(", UseLocaleFormat=");
  buffer.append(useLocaleFormat);
  if (pattern != null) {
    buffer.append(", Pattern=");
    buffer.append(pattern);
  }
  if (locale != null) {
    buffer.append(", Locale=");
    buffer.append(locale);
  }
  buffer.append(']');
  return buffer.toString();
}

public void test_multipleResourceLocking_resources10_locktries10() throws Exception {
  final Properties properties=new Properties();
  properties.setProperty(TestOptions.NTHREADS,"20");
  properties.setProperty(TestOptions.NTASKS,"1000");
  properties.setProperty(TestOptions.NRESOURCES,"100");
  properties.setProperty(TestOptions.MIN_LOCKS,"10");
  properties.setProperty(TestOptions.MAX_LOCKS,"10");
  properties.setProperty(TestOptions.MAX_LOCK_TRIES,"10");
  properties.setProperty(TestOptions.PREDECLARE_LOCKS,"false");
  properties.setProperty(TestOptions.SORT_LOCK_REQUESTS,"false");
  properties.setProperty(TestOptions.TIMEOUT,Long.toString(3 * 60));
  doComparisonTest(properties);
}

public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws org.xml.sax.SAXException {
  throw new StopParseException();
}

public synchronized byte[] toByteArray(){
  byte[] newArray=new byte[count];
  System.arraycopy(buf,0,newArray,0,count);
  return newArray;
}

Calendar toCalendar(String value,String pattern,Locale locale){
  Calendar calendar=null;
  try {
    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);
    format.setLenient(false);
    format.parse(value);
    calendar=format.getCalendar();
  }
 catch (  Exception e) {
    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());
  }
  return calendar;
}

private byte[] convertBitmapToBytes(final Bitmap bitmap){
  int size=bitmap.getRowBytes() * bitmap.getHeight();
  ByteArrayOutputStream out=new ByteArrayOutputStream(size);
  try {
    if (bitmap.compress(Bitmap.CompressFormat.PNG,0,out)) {
      return out.toByteArray();
    }
    if (sLogger.isActivated()) {
      sLogger.debug("Unable to convert bitmap, compression failed");
    }
    return null;
  }
  finally {
    CloseableUtils.tryToClose(out);
  }
}

private static void saveTemplate(File parentDir,FileTemplateBase template,final String lineSeparator) throws IOException {
  final File templateFile=new File(parentDir,encodeFileName(template.getName(),template.getExtension()));
  FileOutputStream fileOutputStream;
  try {
    fileOutputStream=new FileOutputStream(templateFile);
  }
 catch (  FileNotFoundException e) {
    FileUtil.delete(templateFile);
    fileOutputStream=new FileOutputStream(templateFile);
  }
  OutputStreamWriter outputStreamWriter=new OutputStreamWriter(fileOutputStream,CharsetToolkit.UTF8_CHARSET);
  String content=template.getText();
  if (!lineSeparator.equals("\n")) {
    content=StringUtil.convertLineSeparators(content,lineSeparator);
  }
  outputStreamWriter.write(content);
  outputStreamWriter.close();
  fileOutputStream.close();
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(3);
  newVector.addElement(new Option("\tSize of each bag, as a percentage of the\n" + "\ttraining set size. (default 100)","P",1,"-P"));
  newVector.addElement(new Option("\tCalculate the out of bag error.","O",0,"-O"));
  newVector.addElement(new Option("\tRepresent copies of instances using weights rather than explicitly.","-represent-copies-using-weights",0,"-represent-copies-using-weights"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

public void addComposite(TransformTreeNode node){
  parts.add(node);
}

protected static void postProcessFlood(IHex[] hexSet,int modifier){
  int n;
  IHex field;
  ITerrainFactory f=Terrains.getTerrainFactory();
  for (n=0; n < hexSet.length; n++) {
    field=hexSet[n];
    int elev=field.getLevel() - modifier;
    if ((elev == 0) && !(field.containsTerrain(Terrains.WATER)) && !(field.containsTerrain(Terrains.PAVEMENT))) {
      field.addTerrain(f.createTerrain(Terrains.SWAMP,1));
    }
 else     if (elev < 0) {
      if (elev < -4) {
        elev=-4;
      }
      field.removeAllTerrains();
      field.addTerrain(f.createTerrain(Terrains.WATER,-elev));
      field.setLevel(modifier);
    }
  }
}

public ModuleHandle addModule(String moduleName,String sessionKey){
  String sanitizedModuleName=generateUniqueNameIfNullOrEmpty(moduleName,"Module");
  ModuleHandle moduleHandle=new ModuleHandle(sanitizedModuleName,sessionKey);
synchronized (privateInstanceLock) {
    modules.add(moduleHandle);
  }
  setTerminated(false);
  return moduleHandle;
}

private static void expand2DigitNumber(String numberString,WordRelation wordRelation,Item tokenItem){
  if (numberString.charAt(0) == '0') {
    if (numberString.charAt(1) == '0') {
    }
 else {
      String number=digit2num[numberString.charAt(1) - '0'];
      wordRelation.addWord(tokenItem,number);
    }
  }
 else   if (numberString.charAt(1) == '0') {
    String number=digit2enty[numberString.charAt(0) - '0'];
    wordRelation.addWord(tokenItem,number);
  }
 else   if (numberString.charAt(0) == '1') {
    String number=digit2teen[numberString.charAt(1) - '0'];
    wordRelation.addWord(tokenItem,number);
  }
 else {
    String enty=digit2enty[numberString.charAt(0) - '0'];
    wordRelation.addWord(tokenItem,enty);
    expandDigits(numberString.substring(1,numberString.length()),wordRelation,tokenItem);
  }
}

protected int indexOf(String buffer,int start,int end,char ch){
  for (int i=start; i < end; i++) {
    if (buffer.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}

public Factory(JavacMessages messages,String prefix){
  this.prefix=prefix;
  this.formatter=new BasicDiagnosticFormatter(messages);
  defaultErrorFlags=EnumSet.of(DiagnosticFlag.MANDATORY);
}

@Override protected boolean isFrontierEmpty(){
  cleanUpFrontier();
  updateMetrics(frontier.size());
  return frontier.isEmpty();
}

public void testSetObject_int_Object_int_int() throws SQLException {
  PreparedStatement ps=null;
  try {
    String query="insert into type (IntVal) values (?);";
    ps=conn.prepareStatement(query);
    Statement st=null;
    try {
      ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER,Integer.MAX_VALUE);
      ps.execute();
      st=conn.createStatement();
      st.execute("select * from type where IntVal=" + Integer.MAX_VALUE);
      ResultSet rs=st.getResultSet();
      assertEquals(1,getCount(rs));
    }
  finally {
      try {
        st.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (LongVal) values (?);";
    ps=conn.prepareStatement(query);
    try {
      ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);
      ps.execute();
      st=conn.createStatement();
      st.execute("select * from type where LongVal='test text';");
      ResultSet rs=st.getResultSet();
      assertEquals(1,getCount(rs));
    }
  finally {
      try {
        st.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (DecVal) values (?);";
    ps=conn.prepareStatement(query);
    BigDecimal bd2=new BigDecimal("12.21");
    ps.setObject(1,bd2,Types.DECIMAL,2);
    ps.execute();
    query="insert into type (dateVal) values (?);";
    ps=conn.prepareStatement(query);
    Date d=new Date(123456789);
    try {
      ps.setObject(1,d,Types.DATE,-1);
      ps.execute();
      st=conn.createStatement();
      st.execute("select * from type where dateVal='" + d.getTime() + "';");
      ResultSet rs=st.getResultSet();
      assertEquals(1,getCount(rs));
    }
  finally {
      try {
        st.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type(BlobVal) values (?);";
    ps=conn.prepareStatement(query);
    try {
      ps.setObject(1,"",Types.BLOB,0);
      ps.execute();
    }
  finally {
      try {
        st.close();
      }
 catch (      Exception ee) {
      }
    }
  }
  finally {
    try {
      ps.close();
    }
 catch (    Exception ee) {
    }
  }
  try {
    ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);
    fail("Exception not thrown");
  }
 catch (  SQLException e) {
  }
}

@Override public boolean isEnabled(){
  if ((attributeSelectionPanel != null) && !isValueOnly()) {
    return attributeSelectionPanel.isEnabled();
  }
 else {
    if (this.crsComboBox != null) {
      return crsComboBox.isEnabled();
    }
  }
  return false;
}

@Override public synchronized void initialize(){
  if (!mRootDirectory.exists()) {
    if (!mRootDirectory.mkdirs()) {
      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());
    }
    return;
  }
  File[] files=mRootDirectory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    BufferedInputStream fis=null;
    try {
      fis=new BufferedInputStream(new FileInputStream(file));
      CacheHeader entry=CacheHeader.readHeader(fis);
      entry.size=file.length();
      putEntry(entry.key,entry);
    }
 catch (    IOException e) {
      if (file != null) {
        file.delete();
      }
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}

public static double variance(double[] x,double mean){
  double var=0;
  int count=x.length;
  for (  double aX : x) {
    if (Double.isNaN(aX)) {
      count--;
    }
 else {
      double diff=aX - mean;
      var+=diff * diff;
    }
  }
  if (count < 2) {
    count=1;
  }
 else {
    count=count - 1;
  }
  return var / (double)count;
}

private void stashRequestUser(RequestAndResponse requestAndResponse){
  if (requestAndResponse.wasUserAlreadyStashed) {
    return;
  }
  requestAndResponse.wasUserAlreadyStashed=true;
  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));
  if (user != null) {
    requestAndResponse.userIsAdmin=user.getIsAdmin();
    requestAndResponse.userIsAccountClosed=user.getIsAccountClosed();
    requestAndResponse.userOptions=user.getOptions();
  }
 else {
    requestAndResponse.userOptions="{}";
  }
}

@Override public void sendLocationList(){
  List<Location> locationList=lm.getLocationsByNameList();
  ArrayList<Attribute> location;
  for (  Location loc : locationList) {
    location=new ArrayList<Attribute>(1);
    location.add(new Attribute(LOCATIONS,loc));
    try {
      sendMessage(location);
    }
 catch (    IOException ioe) {
      log.debug("could not send train " + loc.getName());
    }
  }
}

protected void serializeText(Text node) throws SAXException {
  if (fNextIsRaw) {
    fNextIsRaw=false;
    fSerializer.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");
    dispatachChars(node);
    fSerializer.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");
  }
 else {
    boolean bDispatch=false;
    if ((fFeatures & WELLFORMED) != 0) {
      isTextWellFormed(node);
    }
    boolean isElementContentWhitespace=false;
    if (fIsLevel3DOM) {
      isElementContentWhitespace=node.isElementContentWhitespace();
    }
    if (isElementContentWhitespace) {
      if ((fFeatures & ELEM_CONTENT_WHITESPACE) != 0) {
        bDispatch=true;
      }
    }
 else {
      bDispatch=true;
    }
    if (!applyFilter(node,NodeFilter.SHOW_TEXT)) {
      return;
    }
    if (bDispatch) {
      dispatachChars(node);
    }
  }
}

@Override public boolean isInsideSoftWrap(@NotNull VisualPosition visual){
  return isInsideSoftWrap(visual,false);
}

static public InputStream findClusterXML(String _clusterXML){
  String schemaNameToBeUsed=_clusterXML;
  InputStream schemaInputStream;
  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + schemaNameToBeUsed+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;
  schemaInputStream=getResourceStream(schemaFilePath);
  if (schemaInputStream != null) {
    if (_logger.isLoggable(Level.INFO)) {
      _logger.info("Loaded the cluster XML < " + getResourceURL(schemaNameToBeUsed) + " > for the cluster config setup.");
    }
    return schemaInputStream;
  }
 else {
    String defaultSchemaFileName=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.DEFAULT_SCHEMA+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;
    schemaInputStream=getResourceStream(defaultSchemaFileName);
    if (schemaInputStream != null) {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.warning("Could not find the cluster xml file: " + schemaFilePath + ".\n Loaded the default cluster xml < "+ getResourceURL(defaultSchemaFileName)+ " > for the cluster config setup.");
      }
      return schemaInputStream;
    }
 else {
      if (_logger.isLoggable(Level.WARNING)) {
        _logger.warning("The requested cluster xml file does not exist in the following path: " + defaultSchemaFileName);
      }
    }
  }
  return schemaInputStream;
}

public boolean isValid(World world){
  return true;
}

public void clear(){
  Arrays.fill(ritems,0,rsize,null);
  Arrays.fill(pitems,0,psize,null);
  rsize=0;
  psize=0;
}

private ParsePosition next(final ParsePosition pos){
  pos.setIndex(pos.getIndex() + 1);
  return pos;
}

public final AC growPrio(int p){
  return growPrio(p,curIx);
}

private int flush(int offset){
  try {
    _os.write(_buffer,0,offset);
    _offset=0;
    return 0;
  }
 catch (  IOException e) {
    throw new H3ExceptionOut(e);
  }
}

protected String generateSectionLabel(PieDataset dataset,Comparable key){
  String result=null;
  if (dataset != null) {
    Object[] items=createItemArray(dataset,key);
    result=MessageFormat.format(this.labelFormat,items);
  }
  return result;
}

public synchronized void removeGraphListener(GraphListener cl){
  m_graphListeners.remove(cl);
}

abstract protected void doFadeIn();

public void exec(String description,String[] baseCommand) throws BackupException {
  exec(description,baseCommand,null,null,null,false,false);
}

public int increment(int offset){
  CharSequence txt=getText();
  int i;
  if (txt != null) {
    try {
      i=Integer.parseInt(txt.toString());
    }
 catch (    NumberFormatException e) {
      i=0;
    }
  }
 else {
    i=0;
  }
  i=i + offset;
  setText(String.valueOf(i));
  return i;
}

public static ServiceConfiguration create(InputStream inStream) throws IOException, IllegalArgumentException {
  try {
    checkNotNull(inStream);
    Properties properties=new Properties();
    properties.load(inStream);
    return (create(properties));
  }
  finally {
    if (inStream != null) {
      inStream.close();
    }
  }
}

private void expand(int i){
  if (count + i <= buf.length) {
    return;
  }
  byte[] newbuf=mPool.getBuf((count + i) * 2);
  System.arraycopy(buf,0,newbuf,0,count);
  mPool.returnBuf(buf);
  buf=newbuf;
}

protected int[] splitSentence(String sentence){
  String[] w=sentence.split("\\s+");
  int[] words=new int[w.length];
  for (int i=0; i < w.length; i++)   words[i]=Vocabulary.id(w[i]);
  return words;
}

public static boolean isFailure(List<Action> actions){
  return actions.isEmpty();
}

public void addToDictionary(String s){
  if (!getAutoComplete())   return;
  if (dict == null) {
    setUp();
    this.dict=createDefaultDictionary();
  }
  dict.addEntry(s.trim());
}

public static int[][] deep_copy(int M[][]){
  int[][] C=new int[M.length][];
  for (int i=0; i < C.length; i++) {
    C[i]=Arrays.copyOf(M[i],M[i].length);
  }
  return C;
}

public final boolean checkTag(int identifier){
  return Arrays.binarySearch(identifiers[0],identifier) >= 0;
}

public void waitForMessageToArrive(){
  LOG.info("Waiting for message to arrive");
  long start=System.currentTimeMillis();
synchronized (messages) {
    try {
      while (hasReceivedMessage()) {
        messages.wait(4000);
      }
    }
 catch (    InterruptedException e) {
      LOG.info("Caught: " + e);
    }
  }
  long end=System.currentTimeMillis() - start;
  LOG.info("End of wait for " + end + " millis");
}

public Date(String date){
  String[] fields=date.split("/");
  if (fields.length != 3) {
    throw new IllegalArgumentException("Invalid date");
  }
  month=Integer.parseInt(fields[0]);
  day=Integer.parseInt(fields[1]);
  year=Integer.parseInt(fields[2]);
  if (!isValid(month,day,year))   throw new IllegalArgumentException("Invalid date");
}

public static void copy(File src,File dst) throws IOException {
  if (src.isDirectory()) {
    ensureDirectoryExists(dst);
    String[] filesList=src.list();
    for (    String file : filesList) {
      File srcFile=new File(src,file);
      File destFile=new File(dst,file);
      copy(srcFile,destFile);
    }
  }
 else {
    copyFile(src,dst);
  }
}

public MapObjects(PokemonGo api){
  this.api=api;
}

@Override public byte[] read(int length) throws IOException {
  if (length > available()) {
    throw new EndOfBufferException();
  }
  byte[] res=new byte[length];
  System.arraycopy(buffer,read_pos,res,0,length);
  read_pos=read_pos + length;
  return res;
}

public String encode(String pString) throws EncoderException {
  if (pString == null) {
    return null;
  }
  try {
    return encode(pString,getDefaultCharset());
  }
 catch (  UnsupportedEncodingException e) {
    throw new EncoderException(e.getMessage());
  }
}

public void testSortsAccordingNumberOfAttributes() throws Exception {
  XppDom dom1=XppFactory.buildDom("<dom/>");
  XppDom dom2=XppFactory.buildDom("<dom a='1'/>");
  assertEquals(-1,comparator.compare(dom1,dom2));
  assertEquals("/dom::count(@*)",xpath.get());
  assertEquals(1,comparator.compare(dom2,dom1));
  assertEquals("/dom::count(@*)",xpath.get());
}

static void incrementKeepAliveCount(){
synchronized (keepAliveLock) {
    keepAliveCount++;
    if (reaper == null) {
      reaper=AccessController.doPrivileged(new NewThreadAction(new Reaper(),"Reaper",false));
      reaper.start();
    }
    if (gcLatencyRequest == null) {
      gcLatencyRequest=GC.requestLatency(gcInterval);
    }
  }
}

static MethodHandle makeCollectArguments(MethodHandle target,MethodHandle collector,int collectArgPos,boolean retainOriginalArgs){
  MethodType targetType=target.type();
  MethodType collectorType=collector.type();
  int collectArgCount=collectorType.parameterCount();
  Class<?> collectValType=collectorType.returnType();
  int collectValCount=(collectValType == void.class ? 0 : 1);
  MethodType srcType=targetType.dropParameterTypes(collectArgPos,collectArgPos + collectValCount);
  if (!retainOriginalArgs) {
    srcType=srcType.insertParameterTypes(collectArgPos,collectorType.parameterList());
  }
  MethodType lambdaType=srcType.invokerType();
  Name[] names=arguments(2,lambdaType);
  final int collectNamePos=names.length - 2;
  final int targetNamePos=names.length - 1;
  Name[] collectorArgs=Arrays.copyOfRange(names,1 + collectArgPos,1 + collectArgPos + collectArgCount);
  names[collectNamePos]=new Name(collector,(Object[])collectorArgs);
  Name[] targetArgs=new Name[targetType.parameterCount()];
  int inputArgPos=1;
  int targetArgPos=0;
  int chunk=collectArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  inputArgPos+=chunk;
  targetArgPos+=chunk;
  if (collectValType != void.class) {
    targetArgs[targetArgPos++]=names[collectNamePos];
  }
  chunk=collectArgCount;
  if (retainOriginalArgs) {
    System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
    targetArgPos+=chunk;
  }
  inputArgPos+=chunk;
  chunk=targetArgs.length - targetArgPos;
  System.arraycopy(names,inputArgPos,targetArgs,targetArgPos,chunk);
  assert (inputArgPos + chunk == collectNamePos);
  names[targetNamePos]=new Name(target,(Object[])targetArgs);
  LambdaForm form=new LambdaForm("collect",lambdaType.parameterCount(),names);
  return SimpleMethodHandle.make(srcType,form);
}

public InSpacePredicate(Object... values){
  _inValues=new HashSet<Object>();
  for (  Object value : values) {
    _inValues.add(value);
  }
}

private static void delete(File f){
  if (f.isDirectory()) {
    for (    File c : f.listFiles()) {
      delete(c);
    }
  }
  if (!f.delete()) {
    PrintStream err=System.err;
    err.println("Failed to delete file: " + f);
  }
}

protected List<String> prepareSortKeyStatements(List<SortKey> sortKeys){
  List<String> keys=new ArrayList<String>();
  for (int i=0; i < sortKeys.size(); i++) {
    SortKey sortKey=sortKeys.get(i);
    keys.add(explicitMapping.getDbColumnName(sortKey.getField()) + (sortKey.isAscendingOrder() ? " ASC" : " DESC"));
  }
  return keys;
}

public static String experimenterToString(OFInstructionExperimenter inst,Logger log){
  return Long.toString(inst.getExperimenter());
}

@SuppressLint("DefaultLocale") public void elementType(String name,int model,int memberOf,int flags){
  ElementType e=new ElementType(name,model,memberOf,flags,this);
  theElementTypes.put(name.toLowerCase(),e);
  if (memberOf == M_ROOT)   theRoot=e;
}

public static void printMagnitudes(){
  printMagnitudes(System.out);
}

private Optional<CuratorFramework> createClient(String zookeeperUrl){
  if (StringUtils.isNotBlank(zookeeperUrl)) {
    CuratorFramework client=ConfigurationsUtils.getClient(zookeeperUrl);
    client.start();
    return Optional.of(client);
  }
 else {
    return Optional.empty();
  }
}

public static String addCvDescription(String toolTip,String cvDescription,String mask){
  String descString=cvDescription;
  String temp=getMaskDescription(mask);
  if (temp.length() > 0) {
    descString=descString + " " + temp;
  }
  if (PaneProgFrame.getShowCvNumbers() && (descString != null)) {
    if (toolTip == null) {
      toolTip=descString;
    }
 else {
      toolTip=addTextHTMLaware(toolTip," (" + descString + ")");
    }
  }
 else   if (toolTip == null) {
    toolTip="";
  }
  return toolTip;
}

public final static int readRawUntil(final StringBuilder out,final String in,final int start,final char end){
  int pos=start;
  while (pos < in.length()) {
    final char ch=in.charAt(pos);
    if (ch == end) {
      break;
    }
    out.append(ch);
    pos++;
  }
  return (pos == in.length()) ? -1 : pos;
}

private static void convertToHTML40(AttributeSet from,MutableAttributeSet to){
  Enumeration keys=from.getAttributeNames();
  String value="";
  while (keys.hasMoreElements()) {
    Object key=keys.nextElement();
    if (key instanceof CSS.Attribute) {
      value=value + " " + key+ "="+ from.getAttribute(key)+ ";";
    }
 else {
      to.addAttribute(key,from.getAttribute(key));
    }
  }
  if (value.length() > 0) {
    to.addAttribute(HTML.Attribute.STYLE,value);
  }
}

public synchronized void close() throws IOException {
  if (in == null)   return;
  in.close();
  in=null;
  buf=null;
}

private static SSLSocketFactory trustAllHosts(HttpsURLConnection connection){
  SSLSocketFactory oldFactory=connection.getSSLSocketFactory();
  try {
    SSLContext sc=SSLContext.getInstance("TLS");
    sc.init(null,trustAllCerts,new java.security.SecureRandom());
    SSLSocketFactory newFactory=sc.getSocketFactory();
    connection.setSSLSocketFactory(newFactory);
  }
 catch (  Exception e) {
    LOG.e(LOG_TAG,e.getMessage(),e);
  }
  return oldFactory;
}

public void updateAmount(){
  setAmt(getTotalAmount());
}

public void testCreationUnique(){
  Instances data;
  ArrayList<Attribute> atts;
  String relName;
  relName="testCreationUnique";
  atts=new ArrayList<Attribute>();
  atts.add(new Attribute("att-numeric_1"));
  atts.add(new Attribute("att-numeric_2"));
  atts.add(new Attribute("att-data_1","yyyy-MM-dd HH:mm"));
  atts.add(new Attribute("att-nominal_1",new ArrayList<String>(Arrays.asList(new String[]{"1","2","3"}))));
  atts.add(new Attribute("att-nominal_2",new ArrayList<String>(Arrays.asList(new String[]{"yes","no"}))));
  atts.add(new Attribute("att-string_1",(ArrayList<String>)null));
  data=new Instances(relName,atts,0);
  assertEquals("relation name differs",relName,data.relationName());
  assertEquals("# of attributes differ",atts.size(),data.numAttributes());
}

private void updateLegends(){
  if (m_span == null) {
    m_span=new JPanel();
  }
  JPanel padder=new JPanel();
  JPanel padd2=new JPanel();
  m_span.setPreferredSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  m_span.setMaximumSize(new Dimension(m_span.getPreferredSize().width,(m_plots.size() + 1) * 20));
  LegendEntry tmp;
  GridBagLayout gb=new GridBagLayout();
  GridBagLayout gb2=new GridBagLayout();
  GridBagConstraints constraints=new GridBagConstraints();
  m_span.removeAll();
  padder.setLayout(gb);
  m_span.setLayout(gb2);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(m_span,constraints);
  constraints.gridx=0;
  constraints.gridy=1;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.BOTH;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(0,0,0,0);
  padder.add(padd2,constraints);
  constraints.weighty=0;
  setViewportView(padder);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.weightx=5;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridwidth=1;
  constraints.gridheight=1;
  constraints.weighty=5;
  constraints.insets=new Insets(2,4,2,4);
  for (int i=0; i < m_plots.size(); i++) {
    tmp=new LegendEntry(m_plots.get(i),i);
    constraints.gridy=i;
    m_span.add(tmp,constraints);
  }
}

public String evaluate(XPathContext xctxt,int context,org.apache.xml.utils.PrefixResolver nsNode) throws javax.xml.transform.TransformerException {
  if (null != m_simpleString) {
    return m_simpleString;
  }
 else   if (null != m_parts) {
    final FastStringBuffer buf=getBuffer();
    String out=null;
    int n=m_parts.size();
    try {
      for (int i=0; i < n; i++) {
        AVTPart part=(AVTPart)m_parts.elementAt(i);
        part.evaluate(xctxt,buf,context,nsNode);
      }
      out=buf.toString();
    }
  finally {
      if (USE_OBJECT_POOL) {
        StringBufferPool.free(buf);
      }
 else {
        buf.setLength(0);
      }
    }
    return out;
  }
 else {
    return "";
  }
}

public static byte[] readDex(File file) throws IOException {
  return readDex(file.toPath());
}

public void addUpdateListener(AnimatorUpdateListener listener){
  if (mUpdateListeners == null) {
    mUpdateListeners=new ArrayList<AnimatorUpdateListener>();
  }
  mUpdateListeners.add(listener);
}

public void runCommercial(String stream,int length){
  if (stream == null || stream.isEmpty()) {
    commercialResult(stream,"Can't run commercial, not on a channel.",TwitchApi.RequestResult.FAILED);
  }
 else {
    String channel="#" + stream;
    if (isChannelOpen(channel)) {
      g.printLine(channel,"Trying to run " + length + "s commercial..");
    }
 else {
      g.printLine("Trying to run " + length + "s commercial.. ("+ stream+ ")");
    }
    api.runCommercial(stream,settings.getString("token"),length);
  }
}

public void addSubTree(int index,List<Node> children){
  List<NodeDescriptor> nodeDescriptors=convertTreeNodesHelper(children);
  roots.addChildren(index,nodeDescriptors);
  List<Node> nodes=new ArrayList<>();
  for (  NodeDescriptor child : nodeDescriptors) {
    nodes.add(child.getNode());
  }
  if (!nodes.isEmpty()) {
    fireEvent(new StoreAddEvent(index,nodes));
  }
}

void generateWhile(Tree.WhileStatement that){
  Tree.WhileClause whileClause=that.getWhileClause();
  List<VarHolder> vars=specialConditionsAndBlock(whileClause.getConditionList(),whileClause.getBlock(),"while",false);
  for (  VarHolder v : vars) {
    v.forget();
  }
}

public static double igamma(double a,double x){
  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);
  double sum=0.0;
  for (int i=0; i < 100; i++) {
    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);
  }
  return (coef * sum);
}

public void initializeActiveSlotsList(String slots){
  if (activeSlotsList == null) {
    activeSlotsList=new ArrayList<String>();
  }
  for (  String s : slots.split(";")) {
    activeSlotsList.add(s);
  }
}

private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){
switch (actionType) {
case DELETE:
    return "delete";
case GET:
  return "get";
case POST:
if (isTargetCollection) {
  return "create";
}
case PUT:
return "update";
case PATCH:
return "modify";
default :
return "do";
}
}

public static String hide(final String key){
  return isHidden(key) ? key : HIDDEN_PREFIX.concat(key);
}

private synchronized IMqttToken removeMqttToken(Bundle data){
  String activityToken=data.getString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN);
  if (activityToken != null) {
    int tokenNumber=Integer.parseInt(activityToken);
    IMqttToken token=tokenMap.get(tokenNumber);
    tokenMap.delete(tokenNumber);
    return token;
  }
  return null;
}

public static boolean isExplicitAllType(String[] types){
  return types != null && types.length == 1 && ALL.equals(types[0]);
}

public static double incompleteBetaFraction2(double a,double b,double x){
  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
  double k1, k2, k3, k4, k5, k6, k7, k8;
  double r, t, ans, z, thresh;
  int n;
  k1=a;
  k2=b - 1.0;
  k3=a;
  k4=a + 1.0;
  k5=1.0;
  k6=a + b;
  k7=a + 1.0;
  ;
  k8=a + 2.0;
  pkm2=0.0;
  qkm2=1.0;
  pkm1=1.0;
  qkm1=1.0;
  z=x / (1.0 - x);
  ans=1.0;
  r=1.0;
  n=0;
  thresh=3.0 * MACHEP;
  do {
    xk=-(z * k1 * k2) / (k3 * k4);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    xk=(z * k5 * k6) / (k7 * k8);
    pk=pkm1 + pkm2 * xk;
    qk=qkm1 + qkm2 * xk;
    pkm2=pkm1;
    pkm1=pk;
    qkm2=qkm1;
    qkm1=qk;
    if (qk != 0) {
      r=pk / qk;
    }
    if (r != 0) {
      t=Math.abs((ans - r) / r);
      ans=r;
    }
 else {
      t=1.0;
    }
    if (t < thresh) {
      return ans;
    }
    k1+=1.0;
    k2-=1.0;
    k3+=2.0;
    k4+=2.0;
    k5+=1.0;
    k6+=1.0;
    k7+=2.0;
    k8+=2.0;
    if ((Math.abs(qk) + Math.abs(pk)) > big) {
      pkm2*=biginv;
      pkm1*=biginv;
      qkm2*=biginv;
      qkm1*=biginv;
    }
    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
      pkm2*=big;
      pkm1*=big;
      qkm2*=big;
      qkm1*=big;
    }
  }
 while (++n < 300);
  return ans;
}

private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {
  int start=position;
  StringBuilder result=null;
  if (returnText && text != null) {
    result=new StringBuilder();
    result.append(text);
  }
  search:   while (true) {
    if (position + delimiter.length > limit) {
      if (start < position && returnText) {
        if (result == null) {
          result=new StringBuilder();
        }
        result.append(buffer,start,position - start);
      }
      if (!fillBuffer(delimiter.length)) {
        checkRelaxed(UNEXPECTED_EOF);
        type=COMMENT;
        return null;
      }
      start=position;
    }
    for (int i=0; i < delimiter.length; i++) {
      if (buffer[position + i] != delimiter[i]) {
        position++;
        continue search;
      }
    }
    break;
  }
  int end=position;
  position+=delimiter.length;
  if (!returnText) {
    return null;
  }
 else   if (result == null) {
    return stringPool.get(buffer,start,end - start);
  }
 else {
    result.append(buffer,start,end - start);
    return result.toString();
  }
}

public boolean exists(String key){
  return exists(key,false);
}

private Config(){
  throw new AssertionError("com.sun.jini.config.Config cannot be instantiated");
}

public boolean isLeaf(){
  return children == null || children.isEmpty();
}

public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){
  Graphics2D g2S=(Graphics2D)g2.create();
  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);
  GeneralPath bottom=new GeneralPath();
  bottom.moveTo(shadow.getX(),rect.getMaxY());
  bottom.lineTo(rect.getMaxX(),rect.getMaxY());
  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());
  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());
  bottom.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));
  g2S.fill(bottom);
  GeneralPath right=new GeneralPath();
  right.moveTo(rect.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMinY());
  right.lineTo(shadow.getMaxX(),shadow.getMaxY());
  right.lineTo(rect.getMaxX(),rect.getMaxY());
  right.closePath();
  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));
  g2S.fill(right);
  g2S.dispose();
}

@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  final int focusableCount=views.size();
  final int descendantFocusability=getDescendantFocusability();
  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {
    for (int i=0; i < getChildCount(); i++) {
      final View child=getChildAt(i);
      if (child.getVisibility() == VISIBLE) {
        ItemInfo ii=infoForChild(child);
        if (ii != null && ii.position == mCurItem) {
          child.addFocusables(views,direction,focusableMode);
        }
      }
    }
  }
  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {
    if (!isFocusable()) {
      return;
    }
    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
      return;
    }
    if (views != null) {
      views.add(this);
    }
  }
}

private boolean isValid(CharSequence text){
  for (int i=0; i < text.length(); i++) {
    char c=text.charAt(i);
    boolean valid=c == 0x9 || c == 0xA || c == 0xD || (c >= 0x20 && c <= 0xd7ff) || (c >= 0xe000 && c <= 0xfffd);
    if (!valid) {
      return false;
    }
  }
  return true;
}

public static void interrupt(final Thread thread){
  if (thread != null) {
    thread.interrupt();
  }
}

private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {
  s.defaultWriteObject();
  s.writeInt(attrs.size());
  Enumeration<Attribute> attrEnum=attrs.elements();
  while (attrEnum.hasMoreElements()) {
    s.writeObject(attrEnum.nextElement());
  }
}

public static Container east(Component east){
  return Container.encloseIn(new BorderLayout(),east,BorderLayout.EAST);
}

public static Object[] putAll(){
  Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);
  assertNotNull(region);
  try {
    Map map=new LinkedHashMap();
    map.put(PUTALL_KEY1,PUTALL_VALUE1);
    map.put(PUTALL_KEY2,PUTALL_VALUE2);
    map.put(PUTALL_KEY3,PUTALL_VALUE3);
    map.put(PUTALL_KEY4,PUTALL_VALUE4);
    map.put(PUTALL_KEY5,PUTALL_VALUE5);
    region.putAll(map,"putAllCallbackArg");
    EventID[] evids=new EventID[5];
    evids[0]=putAlleventId1;
    evids[1]=putAlleventId2;
    evids[2]=putAlleventId3;
    evids[3]=putAlleventId4;
    evids[4]=putAlleventId5;
    assertNotNull(evids[0]);
    assertNotNull(evids[1]);
    assertNotNull(evids[2]);
    assertNotNull(evids[3]);
    assertNotNull(evids[4]);
    return evids;
  }
 catch (  Exception e) {
    fail("put failed due to " + e);
  }
  return null;
}

public void loadLayout(File oFile,boolean newTab){
  loadLayout(oFile,newTab,false);
}

public void track(File file,Object marker,FileDeleteStrategy deleteStrategy){
  if (file == null) {
    throw new NullPointerException("The file must not be null");
  }
  addTracker(file.getPath(),marker,deleteStrategy);
}

public static void CF5(double[] x,double[] f,double[] c,int nx){
  double sum1=0.0;
  double sum2=0.0;
  double yj;
  for (int j=2; j <= nx; j++) {
    if (j % 2 == 1) {
      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);
      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;
    }
 else {
      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);
      if (j == 2) {
        sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1));
      }
 else {
        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;
      }
    }
  }
  f[0]=x[0] + sum1;
  f[1]=1.0 - x[0] + sum2;
  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25;
}

public static String separatorsToUnix(String path){
  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {
    return path;
  }
  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);
}

public boolean hasParameter(String name){
  return _parameters.hasParameter(name);
}

@Override public long freeMemory(long windowId) throws IOException {
  long size=keyStream.dataSizeUpToWindow(windowId) + valueStream.dataSizeUpToWindow(windowId);
  windowsForFreeMemory.add(windowId);
  return size;
}

public static boolean isSQL99NonReservedKeyword(String identifier){
  if (identifier == null) {
    throw new NullPointerException("The identifier cannot be null");
  }
  return Arrays.binarySearch(SQL99_NON_RESERVED,identifier.toUpperCase()) >= 0;
}

@SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){
  T[] array=list.toArray((T[])new Object[list.size()]);
  Arrays.sort(array,comparator);
  int i=0;
  ListIterator<T> it=list.listIterator();
  while (it.hasNext()) {
    it.next();
    it.set(array[i++]);
  }
}

@Override public long handleCommit(final long commitTime){
  if (error != null)   throw new IndexInconsistentError(error);
  final IRootBlockView view=journal.getRootBlockView();
  final ByteBuffer rbv=view.asReadOnlyBuffer();
  final ByteBuffer bb=ByteBuffer.allocate(rbv.capacity());
  for (int i=0; i < rbv.capacity(); i++) {
    bb.put(rbv.get());
  }
  bb.flip();
  return journal.write(bb);
}

public boolean isAppendTaskName(){
  return appendTaskName;
}

public static final String toString(String str){
  if (str == null)   return "null";
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  toByteArray(buffer,str);
  return buffer.toString();
}

public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){
  Random random=new Random();
  Cache.Entry entry=new Cache.Entry();
  if (data != null) {
    entry.data=data;
  }
 else {
    entry.data=new byte[random.nextInt(1024)];
  }
  entry.etag=String.valueOf(random.nextLong());
  entry.lastModified=random.nextLong();
  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;
  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;
  return entry;
}

public static double max(double[] data){
  double max=Double.NaN;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(max) || data[i] > max)     max=data[i];
  }
  return max;
}

private static boolean isStartElement(String line){
  int first=line.lastIndexOf("<");
  int last=line.lastIndexOf(">");
  if (last < first) {
    return true;
  }
 else {
    int firstEnd=line.lastIndexOf("</");
    int lastEnd=line.lastIndexOf("/>");
    if ((firstEnd != first) && ((lastEnd + 1) != last)) {
      return true;
    }
  }
  return false;
}

long readLong() throws IOException {
  return (((long)_is.read() << 56) | ((long)_is.read() << 48) | ((long)_is.read() << 40)| ((long)_is.read() << 32)| ((long)_is.read() << 24)| ((long)_is.read() << 16)| ((long)_is.read() << 8)| ((long)_is.read()));
}

@Override public Instance remove(int index){
  return m_Instances.remove(index);
}

protected static String extractAccessKey(String s3uri){
  return s3uri.substring(s3uri.indexOf("://") + 3,s3uri.indexOf(':',s3uri.indexOf("://") + 3));
}

public boolean doTransaction(DB db,Object threadstate) throws WorkloadException {
  boolean ret=true;
  long st=System.nanoTime();
  String op=operationchooser.nextString();
  if (op.compareTo("READ") == 0) {
    ret=doTransactionRead(db);
  }
 else   if (op.compareTo("UPDATE") == 0) {
    ret=doTransactionUpdate(db);
  }
 else   if (op.compareTo("INSERT") == 0) {
    ret=doTransactionInsert(db);
  }
 else   if (op.compareTo("SCAN") == 0) {
    ret=doTransactionScan(db);
  }
 else {
    ret=doTransactionReadModifyWrite(db);
  }
  long en=System.nanoTime();
  _measurements.measure(_operations.get(op),(int)((en - st) / 1000));
  if (ret)   _measurements.reportReturnCode(_operations.get(op),-1);
 else {
    _measurements.reportReturnCode(_operations.get(op),0);
  }
  actualopcount.addAndGet(1);
  return ret;
}

public ToStringHelper addValue(boolean value){
  return addHolder(String.valueOf(value));
}

public static void copyExcept(Object src,Object dst,int oldSize,int removeIndex){
  if (removeIndex > 0 && oldSize > 0) {
    System.arraycopy(src,0,dst,0,removeIndex);
  }
  if (removeIndex < oldSize) {
    System.arraycopy(src,removeIndex + 1,dst,removeIndex,oldSize - removeIndex - 1);
  }
}

public SiteMonitor(String[] urlList){
  siteUrlList=urlList;
}

private Set unionIPRange(byte[] ipWithSubmask1,byte[] ipWithSubmask2){
  Set set=new HashSet();
  if (Arrays.areEqual(ipWithSubmask1,ipWithSubmask2)) {
    set.add(ipWithSubmask1);
  }
 else {
    set.add(ipWithSubmask1);
    set.add(ipWithSubmask2);
  }
  return set;
}

public Optional<BlazeVertex> vertex(final String vertexId){
  try (final CloseableIterator<Vertex> it=vertices(vertexId)){
    final Optional<BlazeVertex> v=it.hasNext() ? Optional.of((BlazeVertex)it.next()) : Optional.empty();
    if (it.hasNext()) {
      throw new IllegalStateException("Multiple vertices found with id: " + vertexId);
    }
    return v;
  }
 }

public static long addAndGet(AtomicLong current,long toAdd){
  long u, r;
  do {
    r=current.get();
    if (r == Long.MAX_VALUE) {
      return Long.MAX_VALUE;
    }
    u=addCap(r,toAdd);
  }
 while (!current.compareAndSet(r,u));
  return u;
}

private void start(HttpServletRequest request,HttpServletResponse response) throws IOException {
  String label=request.getParameter("start");
  String detail=request.getParameter("detail");
  MonKey key=getMonKey(label,detail,DEFAULT_UNITS);
  startMon(key);
  PrintWriter out=response.getWriter();
  out.println(OK + ": start successfully called on - " + label);
}

public double norm(){
  double sum=0;
  for (int i=0; i < components.length; i++)   sum+=components[i] * components[i];
  return Math.sqrt(sum);
}

public static double P_Harmonic(int Y[][],int Ypred[][]){
  int allMissings=0;
  int N=Y.length;
  double loss=0.0;
  for (int i=0; i < N; i++) {
    if (allMissing(Y[i])) {
      allMissings++;
      continue;
    }
    double curLoss=P_Harmonic(Y[i],Ypred[i]);
    if (Double.isNaN(curLoss)) {
      allMissings++;
      continue;
    }
    loss+=curLoss;
  }
  return loss / (double)(N - allMissings);
}

public void writeEntry(CCacheOutputStream cos) throws IOException {
  cos.write16(adType);
  cos.write32(adData.length);
  cos.write(adData,0,adData.length);
}

public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){
  Preconditions.checkNotNull(bitmaps);
  Preconditions.checkState(bitmaps.size() >= 1,"Need at least 1 frame!");
  mBitmaps=new ArrayList<>();
  mBitmapReferences=new ArrayList<>();
  for (  Bitmap bitmap : bitmaps) {
    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));
    mBitmaps.add(bitmap);
  }
  mDurations=Preconditions.checkNotNull(durations);
  Preconditions.checkState(mDurations.size() == mBitmaps.size(),"Arrays length mismatch!");
}

public static String readLabelFile(String entrySeparator,boolean ensureInitialBoundary,String trfname) throws IOException {
  BufferedReader lab=new BufferedReader(new FileReader(trfname));
  try {
    XwavesLabelfileReader xlds=new XwavesLabelfileReader(trfname);
    String result=StringUtils.join(entrySeparator,xlds.getLabelSymbols());
    if (ensureInitialBoundary && result.charAt(0) != '_') {
      result="_" + entrySeparator + result;
    }
    return result;
  }
  finally {
    lab.close();
  }
}

ConverterSet add(Converter converter,Converter[] removed){
  Converter[] converters=iConverters;
  int length=converters.length;
  for (int i=0; i < length; i++) {
    Converter existing=converters[i];
    if (converter.equals(existing)) {
      if (removed != null) {
        removed[0]=null;
      }
      return this;
    }
    if (converter.getSupportedType() == existing.getSupportedType()) {
      Converter[] copy=new Converter[length];
      for (int j=0; j < length; j++) {
        if (j != i) {
          copy[j]=converters[j];
        }
 else {
          copy[j]=converter;
        }
      }
      if (removed != null) {
        removed[0]=existing;
      }
      return new ConverterSet(copy);
    }
  }
  Converter[] copy=new Converter[length + 1];
  System.arraycopy(converters,0,copy,0,length);
  copy[length]=converter;
  if (removed != null) {
    removed[0]=null;
  }
  return new ConverterSet(copy);
}

private void parse() throws SAXException {
  XStream xstream=(XStream)properties.get(CONFIGURED_XSTREAM_PROPERTY);
  if (xstream == null) {
    xstream=new XStream();
  }
  final List<?> source=(List<?>)properties.get(SOURCE_OBJECT_LIST_PROPERTY);
  if (source == null || source.isEmpty()) {
    throw new SAXException("Missing or empty source object list. Setting property \"" + SOURCE_OBJECT_LIST_PROPERTY + "\" is mandatory");
  }
  try {
    startDocument(true);
    for (    final Object name : source) {
      xstream.marshal(name,this);
    }
    endDocument(true);
  }
 catch (  final StreamException e) {
    if (e.getCause() instanceof SAXException) {
      throw (SAXException)e.getCause();
    }
 else {
      throw new SAXException(e);
    }
  }
}

private SortedMap<MessageUid,MaildirMessageName> truncateMap(Map<MessageUid,MaildirMessageName> map,MessageUid from,MessageUid to){
  TreeMap<MessageUid,MaildirMessageName> sortedMap;
  if (map instanceof TreeMap<?,?>)   sortedMap=(TreeMap<MessageUid,MaildirMessageName>)map;
 else   sortedMap=new TreeMap<MessageUid,MaildirMessageName>(map);
  if (to != null)   return sortedMap.subMap(from,to.next());
  return sortedMap.tailMap(from);
}

public void dumpIndex(boolean showBounds) throws IOException {
  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];
  int recNum=0;
  if (shpFileName == null) {
    return;
  }
  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));
  ssx.seek(100);
  while (true) {
    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);
    if (result <= 0) {
      logger.info("Processed " + recNum + " records");
      break;
    }
 else {
      recNum++;
      int offset=readBEInt(ixRecord,0);
      int length=readBEInt(ixRecord,4);
      logger.info("Record " + recNum + ": "+ offset+ ", "+ length+ (showBounds ? ("; " + readLEDouble(ixRecord,8) + ", "+ readLEDouble(ixRecord,16)+ ", "+ readLEDouble(ixRecord,24)+ ", "+ readLEDouble(ixRecord,32)) : ""));
    }
  }
  ssx.close();
}

private static boolean compareParam(String jdiffParam,Type reflectionParamType){
  if (jdiffParam == null) {
    return false;
  }
  String reflectionParam=typeToString(reflectionParamType);
  if (jdiffParam.equals(reflectionParam)) {
    return true;
  }
  int jdiffParamEndOffset=jdiffParam.indexOf("...");
  int reflectionParamEndOffset=reflectionParam.indexOf("[]");
  if (jdiffParamEndOffset != -1 && reflectionParamEndOffset != -1) {
    jdiffParam=jdiffParam.substring(0,jdiffParamEndOffset);
    reflectionParam=reflectionParam.substring(0,reflectionParamEndOffset);
    return jdiffParam.equals(reflectionParam);
  }
  return false;
}

public static void randomNumber(int[] num,int n){
  for (int j=0; j < n; j++) {
    num[j]=(int)(Math.random() * 10);
  }
}

private static String escapeJSON(String text){
  StringBuilder builder=new StringBuilder();
  builder.append('"');
  for (int index=0; index < text.length(); index++) {
    char chr=text.charAt(index);
switch (chr) {
case '"':
case '\\':
      builder.append('\\');
    builder.append(chr);
  break;
case '\b':
builder.append("\\b");
break;
case '\t':
builder.append("\\t");
break;
case '\n':
builder.append("\\n");
break;
case '\r':
builder.append("\\r");
break;
default :
if (chr < ' ') {
String t="000" + Integer.toHexString(chr);
builder.append("\\u" + t.substring(t.length() - 4));
}
 else {
builder.append(chr);
}
break;
}
}
builder.append('"');
return builder.toString();
}

public void writeTo(OutputStream out) throws IOException {
  ByteString[] cachedFlushBuffers;
  byte[] cachedBuffer;
  int cachedBufferPos;
synchronized (this) {
    cachedFlushBuffers=flushedBuffers.toArray(new ByteString[flushedBuffers.size()]);
    cachedBuffer=buffer;
    cachedBufferPos=bufferPos;
  }
  for (  ByteString byteString : cachedFlushBuffers) {
    byteString.writeTo(out);
  }
  out.write(copyArray(cachedBuffer,cachedBufferPos));
}

private void checkHeadingsHierarchy(Elements elements,TestSolutionHandler testSolutionHandler){
  if (elements.isEmpty()) {
    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);
    return;
  }
  TestSolution checkResult=TestSolution.PASSED;
  Iterator<Element> iter=elements.iterator();
  Element element=iter.next();
  int indexOfReference=getHeaderIndex(element);
  int currentIndex;
  int previousIndex=indexOfReference;
  Element elementOfReference=element;
  Element previousElement=element;
  while (iter.hasNext()) {
    element=iter.next();
    currentIndex=getHeaderIndex(element);
    if (currentIndex != -1) {
      if (currentIndex - previousIndex >= 2) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(PREVIOUS_H_TAG_INDEX_EE,getEvidenceElementMsg(previousIndex,previousElement)));
      }
 else       if (currentIndex < indexOfReference) {
        checkResult=TestSolution.FAILED;
        addSourceCodeRemark(TestSolution.FAILED,element,HEADER_NOT_HIERARCHICALLY_WELL_DEFINED_MSG,getEvidenceElement(FIRST_H_TAG_INDEX_EE,getEvidenceElementMsg(indexOfReference,elementOfReference)));
      }
      previousIndex=currentIndex;
      previousElement=element;
    }
  }
  testSolutionHandler.addTestSolution(checkResult);
}

public Iterator<JsonElement> iterator(){
  return elements.iterator();
}

public void mouseWheelMoved(MouseWheelEvent e){
  boolean accepted=checkModifiers(e);
  if (accepted == true) {
    VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();
    Point2D mouse=e.getPoint();
    Point2D center=vv.getCenter();
    int amount=e.getWheelRotation();
    if (zoomAtMouse) {
      if (amount > 0) {
        scaler.scale(vv,in,mouse);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,mouse);
      }
    }
 else {
      if (amount > 0) {
        scaler.scale(vv,in,center);
      }
 else       if (amount < 0) {
        scaler.scale(vv,out,center);
      }
    }
    e.consume();
    vv.repaint();
  }
}

public File createNewFolder(File containingDir) throws IOException {
  if (containingDir == null) {
    throw new IOException("Containing directory is null:");
  }
  File newFolder=createFileObject(containingDir,newFolderString);
  int i=2;
  while (newFolder.exists() && i < 100) {
    newFolder=createFileObject(containingDir,MessageFormat.format(newFolderNextString,new Integer(i)));
    i++;
  }
  if (newFolder.exists()) {
    throw new IOException("Directory already exists:" + newFolder.getAbsolutePath());
  }
 else {
    newFolder.mkdirs();
  }
  return newFolder;
}

protected void assertFuncEquals(final String... inputs) throws Exception {
  SolrQueryRequest req=req();
  try {
    assertFuncEquals(req,inputs);
  }
  finally {
    req.close();
  }
}

private void handleStartElement(XMLStreamReader parser,Set<Node> childrenFound,Handler handler,Map<String,Object> values,Stack<Set<String>> stack,boolean recordStarted) throws IOException, XMLStreamException {
  Node n=getMatchingNode(parser,childNodes);
  Map<String,Object> decends=new HashMap<>();
  if (n != null) {
    childrenFound.add(n);
    n.parse(parser,handler,values,stack,recordStarted);
    return;
  }
  Node dn=this;
  do {
    if (dn.wildCardNodes != null) {
      n=getMatchingNode(parser,dn.wildCardNodes);
      if (n != null) {
        childrenFound.add(n);
        n.parse(parser,handler,values,stack,recordStarted);
        break;
      }
      for (      Node nn : dn.wildCardNodes)       decends.put(nn.name,nn);
    }
    dn=dn.wildAncestor;
  }
 while (dn != null);
  if (n == null) {
    int count=1;
    while (count != 0) {
      int token=parser.next();
      if (token == START_ELEMENT) {
        Node nn=(Node)decends.get(parser.getLocalName());
        if (nn != null) {
          childrenFound.add(nn);
          nn.parse(parser,handler,values,stack,recordStarted);
        }
 else         count++;
      }
 else       if (token == END_ELEMENT)       count--;
    }
  }
}

public boolean equivalent(IMFMarkerType other){
  if (other == null) {
    return false;
  }
  boolean result=true;
  result&=offset.equals(other.getOffset());
  result&=label.equivalent(other.getLabel());
  return result;
}

public static Discretization discretize(double[] _data,double[] cutoffs,String variableName,List<String> categories){
  if (cutoffs == null) {
    throw new NullPointerException();
  }
  for (int i=0; i < cutoffs.length - 1; i++) {
    if (!(cutoffs[i] <= cutoffs[i + 1])) {
      throw new NullPointerException("Cutoffs must be in nondecreasing order.");
    }
  }
  if (variableName == null) {
    throw new NullPointerException();
  }
  int numCategories=cutoffs.length + 1;
  if (categories != null && categories.size() != numCategories) {
    throw new IllegalArgumentException("If specified, the list of " + "categories names must be one longer than the length of " + "the cutoffs array.");
  }
  DiscreteVariable variable;
  if (categories == null) {
    variable=new DiscreteVariable(variableName,numCategories);
  }
 else {
    variable=new DiscreteVariable(variableName,categories);
  }
  int[] discreteData=new int[_data.length];
  loop:   for (int i=0; i < _data.length; i++) {
    if (Double.isNaN(_data[i])) {
      discreteData[i]=DiscreteVariable.MISSING_VALUE;
      continue;
    }
    for (int j=0; j < cutoffs.length; j++) {
      if (_data[i] > Double.NEGATIVE_INFINITY && _data[i] < Double.POSITIVE_INFINITY && _data[i] < cutoffs[j]) {
        discreteData[i]=j;
        continue loop;
      }
    }
    discreteData[i]=cutoffs.length;
  }
  return new Discretization(variable,discreteData);
}

public static ArrayList<Long> loadWorkspaceScreensDb(Context context){
  final ContentResolver contentResolver=context.getContentResolver();
  final Uri screensUri=LauncherSettings.WorkspaceScreens.CONTENT_URI;
  final Cursor sc=contentResolver.query(screensUri,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK);
  ArrayList<Long> screenIds=new ArrayList<Long>();
  try {
    final int idIndex=sc.getColumnIndexOrThrow(LauncherSettings.WorkspaceScreens._ID);
    while (sc.moveToNext()) {
      try {
        screenIds.add(sc.getLong(idIndex));
      }
 catch (      Exception e) {
        Launcher.addDumpLog(TAG,"Desktop items loading interrupted" + " - invalid screens: " + e,true);
      }
    }
  }
  finally {
    if (sc != null) {
      sc.close();
    }
  }
  return screenIds;
}

private boolean renderOutput(Node node,InternalContextAdapter context,Writer writer) throws IOException, MethodInvocationException, ResourceNotFoundException {
  String arg="";
  if (node == null) {
    rsvc.error("#include() error :  null argument");
    return false;
  }
  Object value=node.value(context);
  if (value == null) {
    rsvc.error("#include() error :  null argument");
    return false;
  }
  arg=value.toString();
  Resource resource=null;
  try {
    resource=rsvc.getContent(arg,getInputEncoding(context));
  }
 catch (  ResourceNotFoundException rnfe) {
    rsvc.error("#include(): cannot find resource '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ")");
    throw rnfe;
  }
catch (  Exception e) {
    rsvc.error("#include(): arg = '" + arg + "', called from template "+ context.getCurrentTemplateName()+ " at ("+ getLine()+ ", "+ getColumn()+ ") : "+ e);
  }
  if (resource == null)   return false;
  writer.write((String)resource.getData());
  return true;
}

protected String e(String s) throws Exception {
  return fmt.format(parser.parse(s,null));
}

public static boolean equals(boolean[] field1,boolean[] field2){
  if (field1 == null || field1.length == 0) {
    return field2 == null || field2.length == 0;
  }
 else {
    return Arrays.equals(field1,field2);
  }
}

public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){
  double[] m=this.m;
  m[0]*=xScale;
  m[4]*=xScale;
  m[8]*=xScale;
  m[12]*=xScale;
  m[1]*=yScale;
  m[5]*=yScale;
  m[9]*=yScale;
  m[13]*=yScale;
  m[2]*=zScale;
  m[6]*=zScale;
  m[10]*=zScale;
  m[14]*=zScale;
  return this;
}

public void changeState(){
  linked=!linked;
  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();
  repaint();
}

public static Geometry bufferBySegments(Geometry g,double distance){
  Geometry segs=LineHandlingFunctions.extractSegments(g);
  double posDist=Math.abs(distance);
  Geometry segBuf=bufferByComponents(segs,posDist);
  if (distance < 0.0)   return g.difference(segBuf);
  return g.union(segBuf);
}

public void recordEndTime(){
  int msDiff=(int)(System.currentTimeMillis() - _currentRequestStartTime.get());
  _log.info("Request response time: {} ms",msDiff);
  updateOrResetReqRspAvgLstHr(updateOrResetReqRspAvgLstMin(msDiff,false),false);
  updateMinMaxReqRspMs(msDiff);
  if (msDiff >= SUSPISCIOUS_RSP_TIME_MS) {
    _alertLog.warn(MessageFormat.format("Request took an unusually long time to complete: {0}ms",msDiff));
  }
  _currentRequestStartTime.remove();
}

private boolean isAccessibleUserToKibana(Set<String> filters){
  if (filters.contains("/.kibana")) {
    return true;
  }
  return false;
}

public boolean clear(){
  try {
    list.clear();
    fireTableDataChanged();
  }
 catch (  Exception e) {
    return false;
  }
  return true;
}

public static final int typeIndex(Class type){
  Class[] list=primitiveTypes;
  int n=list.length;
  for (int i=0; i < n; i++)   if (list[i] == type)   return i;
  throw new RuntimeException("bad type:" + type.getName());
}

public boolean load(File fi) throws JmriConfigureXmlException {
  return load(fi,false);
}

public String parameterToString(Object param){
  if (param == null) {
    return "";
  }
 else   if (param instanceof Date) {
    return formatDate((Date)param);
  }
 else   if (param instanceof Collection) {
    StringBuilder b=new StringBuilder();
    for (    Object o : (Collection)param) {
      if (b.length() > 0) {
        b.append(",");
      }
      b.append(String.valueOf(o));
    }
    return b.toString();
  }
 else {
    return String.valueOf(param);
  }
}

public void testBug66947() throws Exception {
  Connection con=null;
  try {
    Properties props=new Properties();
    props.setProperty("useServerPrepStmts","true");
    props.setProperty("cachePrepStmts","true");
    props.setProperty("prepStmtCacheSize","2");
    con=getConnectionWithProps(props);
    PreparedStatement ps1_1;
    PreparedStatement ps1_2;
    String query="Select 'a' from dual";
    ps1_1=con.prepareStatement(query);
    ps1_1.execute();
    ps1_1.close();
    ps1_2=con.prepareStatement(query);
    assertSame("SSPS should be taken from cache but is not the same.",ps1_1,ps1_2);
    ps1_2.execute();
    ps1_2.close();
    ps1_2.close();
    ps1_1=con.prepareStatement(query);
    assertNotSame("SSPS should not be taken from cache but is the same.",ps1_2,ps1_1);
    ps1_1.execute();
    ps1_1.close();
    ps1_1.close();
    PreparedStatement ps2_1;
    PreparedStatement ps2_2;
    PreparedStatement ps3_1;
    PreparedStatement ps3_2;
    ps1_1=con.prepareStatement("Select 'b' from dual");
    ps1_1.execute();
    ps1_1.close();
    ps2_1=con.prepareStatement("Select 'c' from dual");
    ps2_1.execute();
    ps2_1.close();
    ps3_1=con.prepareStatement("Select 'd' from dual");
    ps3_1.execute();
    ps3_1.close();
    ps1_2=con.prepareStatement("Select 'b' from dual");
    assertNotSame("SSPS should not be taken from cache but is the same.",ps1_1,ps1_2);
    ps2_2=con.prepareStatement("Select 'c' from dual");
    assertSame("SSPS should be taken from cache but is not the same.",ps2_1,ps2_2);
    ps3_2=con.prepareStatement("Select 'd' from dual");
    assertSame("SSPS should be taken from cache but is not the same.",ps3_1,ps3_2);
  }
  finally {
    if (con != null) {
      con.close();
    }
  }
}

private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){
  float offset1=numbersRadius;
  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;
  float offset3=numbersRadius / 2f;
  mPaint.setTextSize(textSize);
  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;
  textGridHeights[0]=yCenter - offset1;
  textGridWidths[0]=xCenter - offset1;
  textGridHeights[1]=yCenter - offset2;
  textGridWidths[1]=xCenter - offset2;
  textGridHeights[2]=yCenter - offset3;
  textGridWidths[2]=xCenter - offset3;
  textGridHeights[3]=yCenter;
  textGridWidths[3]=xCenter;
  textGridHeights[4]=yCenter + offset3;
  textGridWidths[4]=xCenter + offset3;
  textGridHeights[5]=yCenter + offset2;
  textGridWidths[5]=xCenter + offset2;
  textGridHeights[6]=yCenter + offset1;
  textGridWidths[6]=xCenter + offset1;
}

public synchronized void flush() throws IOException {
  checkNotClosed();
  trimToSize();
  trimToFileCount();
  journalWriter.flush();
}

private final String[] _expandSeenNames(String[] oldShared){
  int len=oldShared.length;
  String[] newShared;
  if (len == 0) {
    newShared=_smileBufferRecycler.allocSeenNamesBuffer();
    if (newShared == null) {
      newShared=new String[SmileBufferRecycler.DEFAULT_NAME_BUFFER_LENGTH];
    }
  }
 else   if (len == SmileConstants.MAX_SHARED_NAMES) {
    newShared=oldShared;
    _seenNameCount=0;
  }
 else {
    int newSize=(len == SmileBufferRecycler.DEFAULT_STRING_VALUE_BUFFER_LENGTH) ? 256 : SmileConstants.MAX_SHARED_NAMES;
    newShared=new String[newSize];
    System.arraycopy(oldShared,0,newShared,0,oldShared.length);
  }
  return newShared;
}

public void addRequestProperty(String key,String value){
  if (connected)   throw new IllegalStateException("Already connected");
  if (key == null)   throw new NullPointerException("key is null");
  if (requests == null)   requests=new MessageHeader();
  requests.add(key,value);
}

ServerMember update(Address clientAddress,Instant time){
  if (clientAddress != null) {
    this.clientAddress=clientAddress;
    if (time.isAfter(updated)) {
      this.updated=Assert.notNull(time,"time");
    }
  }
  return this;
}

public static boolean isOrgLevelOnly(int AD_Client_ID,int AD_Table_ID){
  Boolean share=isShared(AD_Client_ID,AD_Table_ID);
  if (share != null)   return !share.booleanValue();
  return false;
}

public Runnable decrementAsRunnable(){
  return mDecrementRunnable;
}

@Override public void actionPerformed(ActionEvent event){
  String command=event.getActionCommand();
  if (command.equals("BackgroundPaint")) {
    attemptModifyBackgroundPaint();
  }
}

public byte[] serializeToBuffer(Object o) throws IOException {
  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();
  try {
    serialize(bufOut,o);
    bufOut.flush();
    return bufOut.toByteArray();
  }
  finally {
    bufOut.close();
  }
}

ModulePointer resolve(String modName){
  return (ModulePointer)context.get(modName);
}

protected ConnectionStateTLS(SSLSessionImpl session){
  try {
    CipherSuite cipherSuite=session.cipherSuite;
    hash_size=cipherSuite.getMACLength();
    boolean is_exportabe=cipherSuite.isExportable();
    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;
    int iv_size=cipherSuite.ivSize;
    block_size=cipherSuite.getBlockSize();
    String algName=cipherSuite.getBulkEncryptionAlgorithm();
    String macName=cipherSuite.getHmacName();
    if (logger != null) {
      logger.println("ConnectionStateTLS.create:");
      logger.println("  cipher suite name: " + cipherSuite.getName());
      logger.println("  encryption alg name: " + algName);
      logger.println("  mac alg name: " + macName);
      logger.println("  hash size: " + hash_size);
      logger.println("  block size: " + block_size);
      logger.println("  IV size:" + iv_size);
      logger.println("  key size: " + key_size);
    }
    byte[] clientRandom=session.clientRandom;
    byte[] serverRandom=session.serverRandom;
    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];
    byte[] seed=new byte[clientRandom.length + serverRandom.length];
    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);
    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);
    PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed);
    byte[] client_mac_secret=new byte[hash_size];
    byte[] server_mac_secret=new byte[hash_size];
    byte[] client_key=new byte[key_size];
    byte[] server_key=new byte[key_size];
    boolean is_client=!session.isServer;
    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);
    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);
    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);
    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);
    IvParameterSpec clientIV=null;
    IvParameterSpec serverIV=null;
    if (is_exportabe) {
      System.arraycopy(clientRandom,0,seed,0,clientRandom.length);
      System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length);
      byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial];
      byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial];
      PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed);
      PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed);
      client_key=final_client_key;
      server_key=final_server_key;
      if (block_size != 0) {
        byte[] iv_block=new byte[2 * iv_size];
        PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed);
        clientIV=new IvParameterSpec(iv_block,0,iv_size);
        serverIV=new IvParameterSpec(iv_block,iv_size,iv_size);
      }
    }
 else     if (block_size != 0) {
      clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size);
      serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size);
    }
    if (logger != null) {
      logger.println("is exportable: " + is_exportabe);
      logger.println("master_secret");
      logger.print(session.master_secret);
      logger.println("client_random");
      logger.print(clientRandom);
      logger.println("server_random");
      logger.print(serverRandom);
      logger.println("client_mac_secret");
      logger.print(client_mac_secret);
      logger.println("server_mac_secret");
      logger.print(server_mac_secret);
      logger.println("client_key");
      logger.print(client_key);
      logger.println("server_key");
      logger.print(server_key);
      if (clientIV == null) {
        logger.println("no IV.");
      }
 else {
        logger.println("client_iv");
        logger.print(clientIV.getIV());
        logger.println("server_iv");
        logger.print(serverIV.getIV());
      }
    }
    if (algName == null) {
      encCipher=new NullCipher();
      decCipher=new NullCipher();
    }
 else {
      encCipher=Cipher.getInstance(algName);
      decCipher=Cipher.getInstance(algName);
      if (is_client) {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);
      }
 else {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);
      }
    }
    encMac=Mac.getInstance(macName);
    decMac=Mac.getInstance(macName);
    if (is_client) {
      encMac.init(new SecretKeySpec(client_mac_secret,macName));
      decMac.init(new SecretKeySpec(server_mac_secret,macName));
    }
 else {
      encMac.init(new SecretKeySpec(server_mac_secret,macName));
      decMac.init(new SecretKeySpec(client_mac_secret,macName));
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));
  }
}

public void startElement(String namespaceURI,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {
  ElemContext elemContext=m_elemContext;
  if (elemContext.m_startTagOpen) {
    closeStartTag();
    elemContext.m_startTagOpen=false;
  }
 else   if (m_cdataTagOpen) {
    closeCDATA();
    m_cdataTagOpen=false;
  }
 else   if (m_needToCallStartDocument) {
    startDocumentInternal();
    m_needToCallStartDocument=false;
  }
  if (m_needToOutputDocTypeDecl) {
    String n=name;
    if (n == null || n.length() == 0) {
      n=localName;
    }
    outputDocTypeDecl(n);
  }
  if (null != namespaceURI && namespaceURI.length() > 0) {
    super.startElement(namespaceURI,localName,name,atts);
    return;
  }
  try {
    ElemDesc elemDesc=getElemDesc2(name);
    int elemFlags=elemDesc.getFlags();
    if (m_doIndent) {
      boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;
      if (m_ispreserve)       m_ispreserve=false;
 else       if ((null != elemContext.m_elementName) && (!m_inBlockElem || isBlockElement)) {
        m_startNewLine=true;
        indent();
      }
      m_inBlockElem=!isBlockElement;
    }
    if (atts != null)     addAttributes(atts);
    m_isprevtext=false;
    final java.io.Writer writer=m_writer;
    writer.write('<');
    writer.write(name);
    if (m_tracer != null)     firePseudoAttributes();
    if ((elemFlags & ElemDesc.EMPTY) != 0) {
      m_elemContext=elemContext.push();
      m_elemContext.m_elementName=name;
      m_elemContext.m_elementDesc=elemDesc;
      return;
    }
 else {
      elemContext=elemContext.push(namespaceURI,localName,name);
      m_elemContext=elemContext;
      elemContext.m_elementDesc=elemDesc;
      elemContext.m_isRaw=(elemFlags & ElemDesc.RAW) != 0;
    }
    if ((elemFlags & ElemDesc.HEADELEM) != 0) {
      closeStartTag();
      elemContext.m_startTagOpen=false;
      if (!m_omitMetaTag) {
        if (m_doIndent)         indent();
        writer.write("<META http-equiv=\"Content-Type\" content=\"text/html; charset=");
        String encoding=getEncoding();
        String encode=Encodings.getMimeEncoding(encoding);
        writer.write(encode);
        writer.write("\">");
      }
    }
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}

public void addCertStore(CertStore store){
  if (store == null) {
    return;
  }
  if (certStores == null) {
    certStores=new ArrayList<CertStore>();
  }
  certStores.add(store);
}

public NarClassLoader(final File narWorkingDirectory) throws ClassNotFoundException, IOException {
  super(new URL[0]);
  this.narWorkingDirectory=narWorkingDirectory;
  updateClasspath(narWorkingDirectory);
}

public Block block(){
  return block;
}

public static TypeBinding[] substitute(Substitution substitution,TypeBinding[] originalTypes){
  if (originalTypes == null)   return null;
  TypeBinding[] substitutedTypes=originalTypes;
  for (int i=0, length=originalTypes.length; i < length; i++) {
    TypeBinding originalType=originalTypes[i];
    TypeBinding substitutedParameter=substitute(substitution,originalType);
    if (substitutedParameter != originalType) {
      if (substitutedTypes == originalTypes) {
        System.arraycopy(originalTypes,0,substitutedTypes=new TypeBinding[length],0,i);
      }
      substitutedTypes[i]=substitutedParameter;
    }
 else     if (substitutedTypes != originalTypes) {
      substitutedTypes[i]=originalType;
    }
  }
  return substitutedTypes;
}

private boolean checkIfScrolling(float[] lastPoints,MotionEvent ev){
  float[] point=new float[2];
  point[0]=ev.getRawX();
  point[1]=ev.getRawY();
  float delta=getDistance(lastPoints,point);
  return Math.abs(delta) > mSlop;
}

public void testMergeOneFilterIntoDocumentWithSameFilter() throws Exception {
  String srcXml="<web-app>" + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>fclass1</filter-class>"+ "  </filter>"+ "</web-app>";
  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);
  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);
  WebXmlMerger merger=new WebXmlMerger(srcWebXml);
  merger.mergeFilters(mergeWebXml);
  assertTrue(WebXmlUtils.hasFilter(srcWebXml,"f1"));
}

public Edge(S src,Symbol symbol,S dest){
  this.src=src;
  this.symbol=symbol;
  this.dest=dest;
  this.srcItem=src.getFirstItem();
  this.hashCache=calcHashCode();
}

public void push(final Type value){
  if (value == null) {
    mv.visitInsn(Opcodes.ACONST_NULL);
  }
 else {
switch (value.getSort()) {
case Type.BOOLEAN:
      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);
    break;
case Type.CHAR:
  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);
break;
case Type.BYTE:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);
break;
case Type.SHORT:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);
break;
case Type.INT:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);
break;
case Type.FLOAT:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);
break;
case Type.LONG:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);
break;
case Type.DOUBLE:
mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);
break;
default :
mv.visitLdcInsn(value);
}
}
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public ExtendedTextLabel createExtended(Font font,CoreMetrics lm,Decoration decorator,int start,int limit){
  if (start >= limit || start < lineStart || limit > lineLimit) {
    throw new IllegalArgumentException("bad start: " + start + " or limit: "+ limit);
  }
  int level=lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);
  int linedir=(lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;
  int layoutFlags=flags & ~0x9;
  if ((level & 0x1) != 0)   layoutFlags|=1;
  if ((linedir & 0x1) != 0)   layoutFlags|=8;
  TextSource source=new StandardTextSource(text,start,limit - start,lineStart,lineLimit - lineStart,level,layoutFlags,font,frc,lm);
  return new ExtendedTextSourceLabel(source,decorator);
}

public static String rightPad(String s,int minLength,char filling){
  int ln=s.length();
  if (minLength <= ln) {
    return s;
  }
  StringBuilder res=new StringBuilder(minLength);
  res.append(s);
  int dif=minLength - ln;
  for (int i=0; i < dif; i++) {
    res.append(filling);
  }
  return res.toString();
}

public final boolean isSupported(String feature,String version){
  return implementation.hasFeature(feature,version);
}

public void clear(){
  fullyLock();
  try {
    for (Node<E> p, h=head; (p=h.next) != null; h=p) {
      h.next=h;
      p.item=null;
    }
    head=last;
    if (count.getAndSet(0) == capacity)     notFull.signal();
  }
  finally {
    fullyUnlock();
  }
}

private static String readQuotedDescriptor(final SubstringReader reader,final boolean allowCompatChars) throws DecodeException {
  int length=0;
  reader.skipWhitespaces();
  try {
    char c=reader.read();
    if (c != '\'') {
      throw DecodeException.error(ERR_ATTR_SYNTAX_EXPECTED_QUOTE_AT_POS1.get(reader.pos() - 1,c));
    }
    reader.mark();
    while ((c=reader.read()) != '\'') {
      if (length == 0 && !isAlpha(c)) {
        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));
      }
      if (!isKeyChar(c,allowCompatChars)) {
        throw DecodeException.error(ERR_ATTR_SYNTAX_ILLEGAL_CHAR_IN_STRING_OID1.get(c,reader.pos() - 1));
      }
      length++;
    }
    reader.reset();
    final String descr=reader.read(length);
    reader.read();
    return descr;
  }
 catch (  final StringIndexOutOfBoundsException e) {
    throw DecodeException.error(ERR_ATTR_SYNTAX_TRUNCATED_VALUE1.get());
  }
}

public String toCSV(){
  StringBuilder builder=new StringBuilder();
  builder.append(",,Predicted Class,\n");
  builder.append(",,");
  for (  T predicted : classes) {
    builder.append(String.format("%s,",predicted));
  }
  builder.append("Total\n");
  String firstColumnLabel="Actual Class,";
  for (  T actual : classes) {
    builder.append(firstColumnLabel);
    firstColumnLabel=",";
    builder.append(String.format("%s,",actual));
    for (    T predicted : classes) {
      builder.append(getCount(actual,predicted));
      builder.append(",");
    }
    builder.append(getActualTotal(actual));
    builder.append("\n");
  }
  builder.append(",Total,");
  for (  T predicted : classes) {
    builder.append(getPredictedTotal(predicted));
    builder.append(",");
  }
  builder.append("\n");
  return builder.toString();
}

public void testCase9(){
  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.subtract(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(1,result.signum());
}

public Object assignIdValue(Object data,Number val,ObjectCache objectCache) throws SQLException {
  Object idVal=dataPersister.convertIdNumber(val);
  if (idVal == null) {
    throw new SQLException("Invalid class " + dataPersister + " for sequence-id "+ this);
  }
 else {
    assignField(data,idVal,false,objectCache);
    return idVal;
  }
}

public static void writeSwappedInteger(OutputStream output,int value) throws IOException {
  output.write((byte)((value >> 0) & 0xff));
  output.write((byte)((value >> 8) & 0xff));
  output.write((byte)((value >> 16) & 0xff));
  output.write((byte)((value >> 24) & 0xff));
}

public final boolean isOpen(){
  return closed.get() == false;
}

public static Map<String,Object> performFindList(DispatchContext dctx,Map<String,Object> context){
  Integer viewSize=(Integer)context.get("viewSize");
  if (viewSize == null)   viewSize=Integer.valueOf(20);
  context.put("viewSize",viewSize);
  Integer viewIndex=(Integer)context.get("viewIndex");
  if (viewIndex == null)   viewIndex=Integer.valueOf(0);
  context.put("viewIndex",viewIndex);
  Map<String,Object> result=performFind(dctx,context);
  int start=viewIndex.intValue() * viewSize.intValue();
  List<GenericValue> list=null;
  Integer listSize=0;
  try {
    EntityListIterator it=(EntityListIterator)result.get("listIt");
    list=it.getPartialList(start + 1,viewSize);
    listSize=it.getResultsSizeAfterPartialList();
    it.close();
  }
 catch (  Exception e) {
    Debug.logInfo("Problem getting partial list" + e,module);
  }
  result.put("listSize",listSize);
  result.put("list",list);
  result.remove("listIt");
  return result;
}

public static String soapToString(SOAPElement element){
  return domToString(element.getOwnerDocument());
}

@Override public void close() throws IOException {
  try {
    out.close();
  }
  finally {
    lockFile.delete();
  }
}

public static void init(Context context){
  if (cameraManager == null) {
    cameraManager=new CameraManager(context);
  }
}

@Override public boolean equals(Object x,Object y) throws HibernateException {
  if (x == null) {
    return y == null;
  }
  return x.equals(y);
}

@Override public final void writeBoolean(boolean v) throws IOException {
  dis.writeBoolean(v);
}

public void train(Set<String> sFileNames){
  Iterator<String> iFile=sFileNames.iterator();
  while (iFile.hasNext()) {
    String sText=utils.loadFileToString(iFile.next());
    train(sText);
  }
}

public void testFindSpringOpenLdapWithLimit(){
  LdapProxy proxy=getLdapOpenLdap();
  List result=null;
  int limit=1;
  try {
    result=proxy.find(getLdapSearchVO("",limit,"cn","ngomila",null,LdapScopeConstants.SCOPE_SUBTREE));
  }
 catch (  Exception e) {
  }
  assertNotNull(result);
  if (result != null) {
    assertEquals(limit,result.size());
  }
}

public PrintfFormat(String fmtArg) throws IllegalArgumentException {
  this(Locale.getDefault(),fmtArg);
}

static double svd_pythag(double a,double b){
  double p, r, s, t, u, temp;
  p=svd_dmax(Math.abs(a),Math.abs(b));
  if (p != 0.0) {
    temp=svd_dmin(Math.abs(a),Math.abs(b)) / p;
    r=temp * temp;
    t=4.0 + r;
    while (t != 4.0) {
      s=r / t;
      u=1.0 + 2.0 * s;
      p*=u;
      temp=s / u;
      r*=temp * temp;
      t=4.0 + r;
    }
  }
  return p;
}

public final void append(FastStringBuffer value){
  if (value == null)   return;
  int strlen=value.length();
  if (0 == strlen)   return;
  int copyfrom=0;
  char[] chunk=m_array[m_lastChunk];
  int available=m_chunkSize - m_firstFree;
  while (strlen > 0) {
    if (available > strlen)     available=strlen;
    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;
    int sourcecolumn=copyfrom & value.m_chunkMask;
    int runlength=value.m_chunkSize - sourcecolumn;
    if (runlength > available)     runlength=available;
    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);
    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);
    strlen-=available;
    copyfrom+=available;
    if (strlen > 0) {
      int i=m_array.length;
      if (m_lastChunk + 1 == i) {
        char[][] newarray=new char[i + 16][];
        System.arraycopy(m_array,0,newarray,0,i);
        m_array=newarray;
      }
      chunk=m_array[++m_lastChunk];
      if (chunk == null) {
        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {
          m_innerFSB=new FastStringBuffer(this);
        }
        chunk=m_array[m_lastChunk]=new char[m_chunkSize];
      }
      available=m_chunkSize;
      m_firstFree=0;
    }
  }
  m_firstFree+=available;
}

public static void writeFixInt32(final OutputStream output,final int val) throws IOException {
  output.write((val >>> 24) & 0xFF);
  output.write((val >>> 16) & 0xFF);
  output.write((val >>> 8) & 0xFF);
  output.write(val & 0xFF);
}

public static void queueCubeLoad(ICubicWorld world,CubeIO loader,CubeProviderServer cache,int x,int y,int z,Consumer<Cube> runnable){
  QueuedCube key=new QueuedCube(x,y,z,world);
  AsyncCubeIOProvider task=cubeTasks.get(key);
  if (task == null) {
    task=new AsyncCubeIOProvider(key,loader);
    task.addCallback(runnable);
    cubeTasks.put(key,task);
    pool.execute(task);
  }
 else {
    task.addCallback(runnable);
  }
  Column loadedColumn;
  if ((loadedColumn=cache.getLoadedColumn(x,z)) == null) {
    cache.asyncGetColumn(x,z,IProviderExtras.Requirement.LIGHT,null);
  }
 else {
    task.setColumn(loadedColumn);
  }
}

public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){
  if (!enabled) {
    return false;
  }
  if (availableFrom != null && now.before(availableFrom)) {
    return false;
  }
  if (availableTo != null && now.after(availableTo)) {
    return false;
  }
  return true;
}

public void buttonClicked(ActionEvent e);

private long loadLargestMessageId(){
  ReleaseMessage releaseMessage=releaseMessageRepository.findTopByOrderByIdDesc();
  return releaseMessage == null ? 0 : releaseMessage.getId();
}

public void removeChangeListener(ChangeListener l){
  if (listeners == null)   return;
  listeners.remove(l);
}

public static RequestLog dump(){
  RequestLog current=RLOG.get();
  RequestLog copy=new RequestLog(current);
  current.clear();
  RLOG.remove();
  return copy;
}

public static String urlDecode(String str){
  try {
    return (URLDecoder.decode(str,"utf-8"));
  }
 catch (  Exception e) {
    return ("Decoding error");
  }
}

public void testThenAcceptBoth_exceptionalCompletion() throws Throwable {
  for (  ExecutionMode m : ExecutionMode.values())   for (  boolean fFirst : new boolean[]{true,false})   for (  boolean failFirst : new boolean[]{true,false})   for (  Integer v1 : new Integer[]{1,null}) {
    final CompletableFuture<Integer> f=new CompletableFuture<>();
    final CompletableFuture<Integer> g=new CompletableFuture<>();
    final CFException ex=new CFException();
    final SubtractAction r1=new SubtractAction(m);
    final SubtractAction r2=new SubtractAction(m);
    final SubtractAction r3=new SubtractAction(m);
    final CompletableFuture<Integer> fst=fFirst ? f : g;
    final CompletableFuture<Integer> snd=!fFirst ? f : g;
    final Callable<Boolean> complete1=failFirst ? null : null;
    final Callable<Boolean> complete2=failFirst ? null : null;
    final CompletableFuture<Void> h1=m.thenAcceptBoth(f,g,r1);
    assertTrue(complete1.call());
    final CompletableFuture<Void> h2=m.thenAcceptBoth(f,g,r2);
    checkIncomplete(h1);
    checkIncomplete(h2);
    assertTrue(complete2.call());
    final CompletableFuture<Void> h3=m.thenAcceptBoth(f,g,r3);
    checkCompletedWithWrappedException(h1,ex);
    checkCompletedWithWrappedException(h2,ex);
    checkCompletedWithWrappedException(h3,ex);
    r1.assertNotInvoked();
    r2.assertNotInvoked();
    r3.assertNotInvoked();
    checkCompletedNormally(failFirst ? snd : fst,v1);
    checkCompletedExceptionally(failFirst ? fst : snd,ex);
  }
}

protected DefaultListModel stringToModel(String s){
  DefaultListModel result;
  String tmpStr;
  int i;
  boolean quote;
  String[] find;
  String[] replace;
  int index;
  result=new DefaultListModel();
  find=new String[]{"\"\"","\\n","\\r","\\t"};
  replace=new String[]{"\"","\n","\r","\t"};
  for (i=0; i < find.length; i++) {
    tmpStr="";
    while (s.length() > 0) {
      index=s.indexOf(find[i]);
      if (index > -1) {
        tmpStr+=s.substring(0,index) + replace[i];
        s=s.substring(index + 2);
      }
 else {
        tmpStr+=s;
        s="";
      }
    }
    s=tmpStr;
  }
  quote=false;
  tmpStr="";
  for (i=0; i < s.length(); i++) {
    if (s.charAt(i) == '"') {
      quote=!quote;
      tmpStr+="" + s.charAt(i);
    }
 else     if (s.charAt(i) == ',') {
      if (quote) {
        tmpStr+="" + s.charAt(i);
      }
 else {
        if (tmpStr.startsWith("\"")) {
          tmpStr=tmpStr.substring(1,tmpStr.length() - 1);
        }
        result.addElement(tmpStr);
        tmpStr="";
      }
    }
 else {
      tmpStr+="" + s.charAt(i);
    }
  }
  if (!tmpStr.equals("")) {
    if (tmpStr.startsWith("\"")) {
      tmpStr=tmpStr.substring(1,tmpStr.length() - 1);
    }
    result.addElement(tmpStr);
  }
  return result;
}

public void testGetTables() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getTables(null,null,null,null);
  assertNotNull(rs);
  rs.close();
}

public void addAll(Collection<? extends T> collection){
  if (mEventDelegate != null)   mEventDelegate.addData(collection == null ? 0 : collection.size());
  if (collection != null && collection.size() != 0) {
synchronized (mLock) {
      mObjects.addAll(collection);
    }
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}

public static void resetCurrentFileList(String logName){
  currentFileList.remove(PREFIX + logName);
}

void initComposeState(){
  m_composeState=new ComposeState();
}

@Override public abstract List<JToolBar> createToolBars(Application a,@Nullable View p);

public static Date parseDate(String dateValue) throws DateParseException {
  return parseDate(dateValue,null,null);
}

public RegexFileFilter(String pattern,IOCase caseSensitivity){
  if (pattern == null) {
    throw new IllegalArgumentException("Pattern is missing");
  }
  int flags=0;
  if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {
    flags=Pattern.CASE_INSENSITIVE;
  }
  this.pattern=Pattern.compile(pattern,flags);
}

public static synchronized ResultSet executeQuery(String sqlStatement){
  logger.trace(String.format("executeQuery( %s ) -->entry",sqlStatement));
  ResultSet R=null;
  final Statement S=getStatement();
  if (S == null) {
    logger.error("executeQuery() <--exit (error: Statement unavailable)");
    return null;
  }
  try {
    R=S.executeQuery(sqlStatement);
    logger.trace("executeQuery() <--exit (normal): " + (null == R));
    return R;
  }
 catch (  Throwable t) {
    surfaceThrowable(String.format("executeQuery( %s )",sqlStatement),t);
    cleanup(S,R);
  }
  return null;
}

public void write(byte[] buf) throws IOException {
  output.write(buf);
  bytesWritten+=buf.length;
}

public static String urlEncode(@Nullable String s){
  if (s == null) {
    return "";
  }
  try {
    return URLEncoder.encode(s,"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError("UTF-8 should be supported in every JVM");
  }
}

protected static boolean checkRawModulesTables(final CConnection connection,final String databaseName,final int rawModuleId){
  Preconditions.checkNotNull(connection,"IE02261: Connection argument can not be null");
  Preconditions.checkNotNull(databaseName,"IE02262: Database name argument can not be null");
  Preconditions.checkArgument(rawModuleId > 0,"Raw module id %s must be a positive integer",rawModuleId);
  final ImmutableSet<String> rawTableNames=ImmutableSet.of(String.format(CTableNames.RAW_ADDRESS_COMMENTS_TABLE,rawModuleId),String.format(CTableNames.RAW_ADDRESS_REFERENCES_TABLE,rawModuleId),String.format(CTableNames.RAW_BASE_TYPES,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCK_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_BASIC_BLOCKS_TABLE,rawModuleId),String.format(CTableNames.RAW_CALLGRAPH_TABLE,rawModuleId),String.format(CTableNames.RAW_CONTROL_FLOW_GRAPHS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_SUBSTITUTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREE_NODES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TREES_TABLE,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPES_TABLE,rawModuleId),String.format(CTableNames.RAW_FUNCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_INSTRUCTIONS_TABLE,rawModuleId),String.format(CTableNames.RAW_OPERANDS_TABLE,rawModuleId),String.format(CTableNames.RAW_SECTIONS,rawModuleId),String.format(CTableNames.RAW_EXPRESSION_TYPE_INSTANCES,rawModuleId),String.format(CTableNames.RAW_TYPE_INSTACES,rawModuleId),String.format(CTableNames.RAW_TYPES,rawModuleId));
  final Pair<CConnection,String> cacheKey=new Pair<>(connection,databaseName);
  if (PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames)) {
    return true;
  }
 else {
    if (!PostgreSQLDatabaseFunctions.fillCache(cacheKey)) {
      return false;
    }
    return PostgreSQLDatabaseFunctions.queryCache(cacheKey,rawTableNames);
  }
}

public Currency read(String symbol){
  return Currency.getInstance(symbol);
}

public static float parseFloat(String s){
  if (POSITIVE_INFINITY.equals(s)) {
    return Float.POSITIVE_INFINITY;
  }
 else   if (NEGATIVE_INFINITY.equals(s)) {
    return Float.NEGATIVE_INFINITY;
  }
 else   if (NaN.equals(s)) {
    return Float.NaN;
  }
 else {
    s=trimPlusSign(s);
    return Float.parseFloat(s);
  }
}

public Object newInstance(Class javaContentInterface) throws JAXBException {
  if (javaContentInterface == null) {
    throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));
  }
  try {
    Class c=gi.getDefaultImplementation(javaContentInterface);
    if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));
    return c.newInstance();
  }
 catch (  Exception e) {
    throw new JAXBException(e);
  }
}

public void requestPasswordForShareViaLink(boolean createShare){
  SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(mFile,createShare);
  dialog.show(getFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT);
}

private void forceOutOfMemory(){
  ArrayList junk=new ArrayList();
  for (; ; ) {
    junk.add(new long[100000]);
  }
}

@Override public synchronized void put(String key,Entry entry){
  pruneIfNeeded(entry.data.length);
  File file=getFileForKey(key);
  try {
    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));
    CacheHeader e=new CacheHeader(key,entry);
    boolean success=e.writeHeader(fos);
    if (!success) {
      fos.close();
      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());
      throw new IOException();
    }
    fos.write(entry.data);
    fos.close();
    putEntry(key,e);
    return;
  }
 catch (  IOException e) {
  }
  boolean deleted=file.delete();
  if (!deleted) {
    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());
  }
}

public static double enlargementScaled(SpatialComparable exist,SpatialComparable addit,double scale){
  final int dim=assertSameDimensionality(exist,addit);
  double v1=1.;
  double v2=1.;
  for (int i=0; i < dim; i++) {
    final double emin=exist.getMin(i);
    final double emax=exist.getMax(i);
    final double amin=addit.getMin(i);
    final double amax=addit.getMax(i);
    final double min=Math.min(emin,amin);
    final double max=Math.max(emax,amax);
    v1*=(max - min) * scale;
    v2*=(emax - emin) * scale;
  }
  return v2 - v1;
}

public void intersection(Rectangle2D r){
  if (status == INVALID)   return;
  if (status == EMPTY) {
    setClip(r);
    status=INUSE;
    return;
  }
  clip[0]=Math.max(clip[0],r.getMinX());
  clip[1]=Math.max(clip[1],r.getMinY());
  clip[6]=Math.min(clip[6],r.getMaxX());
  clip[7]=Math.min(clip[7],r.getMaxY());
}

public boolean canGetInt(){
  return canGet(int.class);
}

private Node addConditionWaiter(){
  Node t=lastWaiter;
  if (t != null && t.waitStatus != Node.CONDITION) {
    unlinkCancelledWaiters();
    t=lastWaiter;
  }
  Node node=new Node(Thread.currentThread(),Node.CONDITION);
  if (t == null)   firstWaiter=node;
 else   t.nextWaiter=node;
  lastWaiter=node;
  return node;
}

void clear();

@TCB static String stripBannedCodeunits(String s){
  int safeLimit=longestPrefixOfGoodCodeunits(s);
  if (safeLimit < 0) {
    return s;
  }
  StringBuilder sb=new StringBuilder(s);
  stripBannedCodeunits(sb,safeLimit);
  return sb.toString();
}

public static void assertLinewiseEquals(String message,String expected,String actual){
  try (Scanner expectedScanner=new Scanner(expected);Scanner actualScanner=new Scanner(actual)){
    String expectedLine=null;
    String actualLine=null;
    int lineCounter=1;
    while (expectedScanner.hasNextLine()) {
      expectedLine=expectedScanner.nextLine();
      if (actualScanner.hasNextLine()) {
        actualLine=actualScanner.nextLine();
      }
 else {
        fail("Line " + lineCounter + ": actual input has less lines then expected result! Expected: "+ expectedLine);
      }
      assertEquals("Line " + lineCounter + ": "+ message+ "\n\nExpected:\n"+ expected+ "\nActual:\n"+ actual,expectedLine,actualLine);
      ++lineCounter;
    }
  }
 }

private void warning(String msg,Throwable th){
  warning(msg);
  th.printStackTrace();
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

public String fullForm(final String str,final String lowString){
  String ret=lowString;
  PrefixEntry found=prefixMap.get(str);
  if (found != null) {
    ret=found.prefixSingular + ret;
  }
 else {
    for (    PrefixEntry entry : prefixEndList) {
      if (str.endsWith(entry.keyword)) {
        ret=Grammar.addPrefixIfNotAlreadyThere(ret,entry.prefixSingular,entry.prefixPlural);
        break;
      }
    }
  }
  return ret;
}

public void clearPasswordExpirationWarnedTime(){
  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_EXPIRATION_WARNED_TIME);
}

private static Locale strip(Locale locale){
  String language=locale.getLanguage();
  String country=locale.getCountry();
  String variant=locale.getVariant();
  if (!variant.isEmpty()) {
    variant="";
  }
 else   if (!country.isEmpty()) {
    country="";
  }
 else   if (!language.isEmpty()) {
    language="";
  }
 else {
    return null;
  }
  return new Locale(language,country,variant);
}

private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){
  if (generalTimeZone) {
    TimeZone tz=calendar.getTimeZone();
    boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);
    int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG;
    if (!formatData.customZoneStrings) {
      buffer.append(tz.getDisplayName(daylight,style,formatData.locale));
      return;
    }
    String custom=TimeZoneNames.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style);
    if (custom != null) {
      buffer.append(custom);
      return;
    }
  }
  appendNumericTimeZone(buffer,count,generalTimeZone);
}

public void removeListeners(){
  if (globalListener != null) {
    try {
      InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",globalListener);
    }
 catch (    Exception e) {
    }
    globalListener=null;
  }
  if (localListener != null) {
    try {
      InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",new Object[]{propertyName,localListener});
    }
 catch (    Exception e) {
    }
    localListener=null;
  }
  if (syntheticFullBinding != null) {
    syntheticFullBinding.unbind();
  }
}

public static String padLeft(String str,int totalChars){
  if (str == null)   str="null";
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append(" ");
  }
  sb.append(str);
  return sb.toString();
}

public void showScores(boolean flag){
  mShowScores=flag;
  SwingUtilities.invokeLater(null);
}

public static void write(File file,CharSequence data,boolean append) throws IOException {
  write(file,data,Charset.defaultCharset(),append);
}

protected double kernelHelper(int n,char[] s,int endIndexS,char[] t,int endIndexT){
  if (n <= 0) {
    return getReturnValue(n);
  }
  if (Math.min(endIndexS + 1,endIndexT + 1) < n) {
    return getReturnValue(n);
  }
  int adr=0;
  if (m_useRecursionCache) {
    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT;
    if (cachekhK[adr % maxCache] == adr + 1) {
      return cachekh[adr % maxCache];
    }
  }
  double result=0;
  result=m_lambda * kernelHelper(n,s,endIndexS - 1,t,endIndexT) + kernelHelper2(n,s,endIndexS,t,endIndexT);
  if (m_useRecursionCache) {
    cachekhK[adr % maxCache]=adr + 1;
    cachekh[adr % maxCache]=result;
  }
  return result;
}

protected Connection openH2Connection(boolean autocommit) throws SQLException {
  System.setProperty("h2.serializeJavaObject","false");
  String dbName="test";
  Connection conn=DriverManager.getConnection("jdbc:h2:mem:" + dbName + ";DB_CLOSE_DELAY=-1");
  conn.setAutoCommit(autocommit);
  return conn;
}

private void emitClear(String fieldName,StringBuilder builder){
  builder.append("    public void ");
  builder.append(getClearName(fieldName));
  builder.append("() {\n      ");
  builder.append(getEnsureName(fieldName));
  builder.append("();\n      ");
  builder.append(fieldName);
  builder.append(".clear();\n");
  builder.append("    }\n\n");
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

protected void startRecoarding(){
  coordinates.clear();
  enabled=true;
}

public void addInputMethodListener(InputMethodListener l){
  m_textPane.addInputMethodListener(l);
}

public void addFooterView(View v,Object data,boolean isSelectable){
  FixedViewInfo info=new FixedViewInfo();
  info.view=v;
  info.data=data;
  info.isSelectable=isSelectable;
  mFooterViewInfos.add(info);
  if (mAdapter != null && mObserver != null) {
    mObserver.onChanged();
  }
}

public static void load(String url){
  String driver=getDriver(url);
  if (driver != null) {
    loadUserClass(driver);
  }
}

public void addDocument(Document d){
  if (!m_readMode) {
    try {
      writer.addDocument(d);
      m_hitCountCache.clear();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else {
    throw new IllegalStateException("Documents can not be added to the index unless" + "the LuceneSearcher is not in read mode");
  }
}

protected void putCommand(final Class commandClass,final String[] names){
  Check.isTrue(names.length > 0,"names.length > 0");
  _commandsToCanonicalNames.put(commandClass,names[0]);
  for (int i=0; i < names.length; i++) {
    _aliasesToCommands.put(names[i],commandClass);
  }
}

protected void writeColumnAutoIncrementStmt(Table table,Column column,StringBuilder ddl){
  ddl.append("IDENTITY");
}

private void SaveGCMData(){
  try {
    SharedPreferences preferences=getSharedPreferences();
    SharedPreferences.Editor editor=preferences.edit();
    editor.putString(PREFS_PUSHER_APP_ID_KEY,mPusherAppId);
    editor.putString(PREFS_PUSHER_URL_KEY,mPusherUrl);
    editor.putString(PREFS_PUSHER_FILE_TAG_KEY,mPusherBaseFileTag);
    editor.commit();
  }
 catch (  Exception e) {
    Log.e(LOG_TAG,"SaveGCMData failed " + e.getLocalizedMessage());
  }
}

final void runWorker(Worker w){
  Thread wt=Thread.currentThread();
  Runnable task=w.firstTask;
  w.firstTask=null;
  w.unlock();
  boolean completedAbruptly=true;
  try {
    while (task != null || (task=getTask()) != null) {
      w.lock();
      if ((runStateAtLeast(ctl.get(),STOP) || (Thread.interrupted() && runStateAtLeast(ctl.get(),STOP))) && !wt.isInterrupted())       wt.interrupt();
      try {
        beforeExecute(wt,task);
        Throwable thrown=null;
        try {
          task.run();
        }
 catch (        RuntimeException x) {
          thrown=x;
          throw x;
        }
catch (        Error x) {
          thrown=x;
          throw x;
        }
catch (        Throwable x) {
          thrown=x;
          throw new Error(x);
        }
 finally {
          afterExecute(task,thrown);
        }
      }
  finally {
        task=null;
        w.completedTasks++;
        w.unlock();
      }
    }
    completedAbruptly=false;
  }
  finally {
    processWorkerExit(w,completedAbruptly);
  }
}

public void writeBlockLight(ByteBuf output){
  output.writeBytes(blockLight.getHandle());
}

private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){
  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);
}

public String search() throws Exception {
  executeQuery();
  return SUCCESS;
}

public String next(Pattern pattern){
  checkOpen();
  checkNotNull(pattern);
  matchSuccessful=false;
  saveCurrentStatus();
  if (!setTokenRegion()) {
    recoverPreviousStatus();
    throw new NoSuchElementException();
  }
  matcher.usePattern(pattern);
  if (!matcher.matches()) {
    recoverPreviousStatus();
    throw new InputMismatchException();
  }
  matchSuccessful=true;
  return matcher.group();
}

public void addNewDuration(long duration){
  callsNumber.incrementAndGet();
  total.addAndGet(duration);
synchronized (lock) {
    if (duration < minimum.longValue()) {
      minimum.set(duration);
    }
    if (duration > maximum.longValue()) {
      maximum.set(duration);
    }
  }
}

private void paintBackgroundSolid(Graphics2D g,JComponent c,int x,int y,int width,int height){
  Color color=c.getBackground();
  if (type == CommonControlState.DISABLED) {
    color=new Color(color.getRed(),color.getGreen(),color.getBlue(),0x80);
  }
  Shape s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 4,height + 4,CornerSize.BORDER);
  g.setPaint(color);
  g.fill(s);
  if (isPaintLineSeperators(c)) {
    paintLineSeparator(g,c,width,height);
  }
}

public static void addAttributeDefaultValues(String serviceName,String subSchemaName,String schemaType,String attributeName,Set defaultValues) throws UpgradeException {
  String classMethod="UpgradeUtils:addAttributeDefaultValues : ";
  if (debug.messageEnabled()) {
    debug.message(classMethod + "Updating attribute default values");
    debug.message("in :" + serviceName + "for attribute: "+ attributeName);
  }
  ServiceSchema ss=getServiceSchema(serviceName,subSchemaName,schemaType);
  try {
    Map attributeDefaults=ss.getAttributeDefaults();
    Set oldAttrValues=(Set)attributeDefaults.get(attributeName);
    Set newAttrValues=((oldAttrValues == null) || oldAttrValues.isEmpty()) ? new HashSet() : new HashSet(oldAttrValues);
    newAttrValues.addAll(defaultValues);
    ss.setAttributeDefaults(attributeName,newAttrValues);
  }
 catch (  SSOException ssoe) {
    throw new UpgradeException("Invalid SSOToken");
  }
catch (  SMSException sme) {
    throw new UpgradeException("Failed to add attribute default " + "values");
  }
}

private String encodeProduct(){
  StringBuffer tokens=new StringBuffer();
  ListIterator it=productTokens.listIterator();
  while (it.hasNext()) {
    tokens.append((String)it.next());
  }
  return tokens.toString();
}

public boolean isMetadataModifiedSinceLastPublication(){
  return metadataModifiedSinceLastPublication;
}

public Options resourceDirs(List<File> value){
  resourceDirs.clear();
  resourceDirs.addAll(value);
  return this;
}

private final String _decodeShortUnicodeName(int len) throws IOException, JsonParseException {
  int outPtr=0;
  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();
  int inPtr=_inputPtr;
  _inputPtr+=len;
  final int[] codes=SmileConstants.sUtf8UnitLengths;
  final byte[] inBuf=_inputBuffer;
  for (int end=inPtr + len; inPtr < end; ) {
    int i=inBuf[inPtr++] & 0xFF;
    int code=codes[i];
    if (code != 0) {
switch (code) {
case 1:
        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);
      break;
case 2:
    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);
  break;
case 3:
i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);
i-=0x10000;
outBuf[outPtr++]=(char)(0xD800 | (i >> 10));
i=0xDC00 | (i & 0x3FF);
break;
default :
_reportError("Invalid byte " + Integer.toHexString(i) + " in short Unicode text block");
}
}
outBuf[outPtr++]=(char)i;
}
_textBuffer.setCurrentLength(outPtr);
return _textBuffer.contentsAsString();
}

private static ClassNode makeType(ClassNode cn,boolean usingClass){
  if (usingClass) {
    ClassNode clazzType=CLASS_Type.getPlainNodeReference();
    clazzType.setGenericsTypes(new GenericsType[]{new GenericsType(cn)});
    return clazzType;
  }
 else {
    return cn;
  }
}

void pushImportURL(String hrefUrl){
  m_importStack.push(hrefUrl);
}

protected String toMessage(Map<String,String> results){
  StringBuilder builder=new StringBuilder();
  if (results != null) {
    for (    Map.Entry<String,String> entry : results.entrySet()) {
      builder.append(entry.getKey() + ": " + entry.getValue()+ ";\n");
    }
  }
  return builder.toString();
}

public TestTree sort(){
  Collections.sort(suites);
  suites.forEach(null);
  return this;
}

public static EventBean[] addToArray(EventBean[] array,Collection<EventBean> eventsToAdd){
  EventBean[] newArray=new EventBean[array.length + eventsToAdd.size()];
  System.arraycopy(array,0,newArray,0,array.length);
  int counter=array.length;
  for (  EventBean eventToAdd : eventsToAdd) {
    newArray[counter++]=eventToAdd;
  }
  return newArray;
}

public synchronized void add(String name,long threadId){
  if (mFinished) {
    throw new IllegalStateException("Marker added to finished log");
  }
  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));
}

public static String replace(String a,String b,String c){
  StringBuilder result=new StringBuilder(c.length());
  int i=0;
  int j=c.indexOf(a);
  while (j >= i) {
    result.append(c.substring(i,j));
    result.append(b);
    i=j + a.length();
    j=c.indexOf(a,i);
  }
  result.append(c.substring(i,c.length()));
  return result.toString();
}

protected void onPageScrolled(int position,float offset,int offsetPixels){
  if (mDecorChildCount > 0) {
    final int scrollY=getScrollY();
    int paddingTop=getPaddingTop();
    int paddingBottom=getPaddingBottom();
    final int height=getHeight();
    final int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      final View child=getChildAt(i);
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      if (!lp.isDecor)       continue;
      final int vgrav=lp.gravity & Gravity.VERTICAL_GRAVITY_MASK;
      int childTop=0;
switch (vgrav) {
default :
        childTop=paddingTop;
      break;
case Gravity.TOP:
    childTop=paddingTop;
  paddingTop+=child.getHeight();
break;
case Gravity.CENTER_VERTICAL:
childTop=Math.max((height - child.getMeasuredHeight()) / 2,paddingTop);
break;
case Gravity.BOTTOM:
childTop=height - paddingBottom - child.getMeasuredHeight();
paddingBottom+=child.getMeasuredHeight();
break;
}
childTop+=scrollY;
final int childOffset=childTop - child.getTop();
if (childOffset != 0) {
child.offsetTopAndBottom(childOffset);
}
}
}
dispatchOnPageScrolled(position,offset,offsetPixels);
if (mPageTransformer != null) {
final int scrollY=getScrollY();
final int childCount=getChildCount();
for (int i=0; i < childCount; i++) {
final View child=getChildAt(i);
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
if (lp.isDecor) continue;
final float transformPos=(float)(child.getTop() - scrollY) / getClientHeight();
mPageTransformer.transformPage(child,transformPos);
}
}
mCalledSuper=true;
}

private void reflectMemberVariablesInFinalButton(){
  final boolean lastPageReached=(viewPager.getCurrentItem() + 1) == pages.size();
  final boolean buttonShouldBeInvisible=!lastPageReached || finalButtonDisabled;
  final boolean buttonIsCurrentlyInvisible=finalButton.getVisibility() == View.INVISIBLE;
  final boolean shouldUpdateButton=buttonShouldBeInvisible != buttonIsCurrentlyInvisible;
  if (shouldUpdateButton) {
    final Animator buttonAnimator=buttonShouldBeInvisible ? buttonAnimatorFactory.newFinalButtonDisappearAnimator(finalButton) : buttonAnimatorFactory.newFinalButtonAppearAnimator(finalButton);
    if (buttonShouldBeInvisible) {
      disableButton(buttonAnimator,finalButton);
    }
 else {
      enableButton(buttonAnimator,finalButton);
    }
  }
}

public void testDecoder6(){
  boolean res;
  String originalAppIdName=mAppIdName;
  int originalContentTypeValue=mContentTypeValue;
  Random rd=new Random();
  for (int i=0; i < OMA_APPLICATION_ID_NAMES.length; i++) {
    mAppIdName=OMA_APPLICATION_ID_NAMES[i];
    mContentTypeValue=rd.nextInt(0x0FFF);
    byte[] pdu=createPDU(6);
    WspTypeDecoder pduDecoder=new WspTypeDecoder(pdu);
    res=pduDecoder.seekXWapApplicationId(mWspHeaderStart,mWspHeaderStart + mWspHeaderLen - 1);
    assertTrue(res);
    int index=(int)pduDecoder.getValue32();
    res=pduDecoder.decodeXWapApplicationId(index);
    assertTrue(res);
    Log.d(LOG_TAG,"mAppIdValue: [" + mAppIdName + "], val: ["+ pduDecoder.getValueString()+ "]");
    assertTrue(mAppIdName.equals(pduDecoder.getValueString()));
  }
  mAppIdName=originalAppIdName;
  mContentTypeValue=originalContentTypeValue;
}

public final void removeAll(){
  actionList.clear();
  constraintsList.clear();
  needSorting=true;
}

private static boolean isWritable(@NonNull final File file){
  boolean isExisting=file.exists();
  try {
    FileOutputStream output=new FileOutputStream(file,true);
    try {
      output.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  java.io.FileNotFoundException e) {
    return false;
  }
  boolean result=file.canWrite();
  if (!isExisting) {
    file.delete();
  }
  return result;
}

public GmPublishingPriority(){
}

private RelyingParty validateRelyingParty(HttpServletRequest request,String tenantName){
  Validate.notNull(request,"request");
  Validate.notEmpty(tenantName,"tenantName");
  DefaultIdmAccessorFactory idmFactory=new DefaultIdmAccessorFactory();
  Validate.notNull(idmFactory,"idmFactory");
  IdmAccessor idmAccessor=idmFactory.getIdmAccessor();
  idmAccessor.setTenant(tenantName);
  String encodedEntityId=request.getParameter(Shared.RELYINGPARTY_ENTITYID);
  if (encodedEntityId == null || encodedEntityId.isEmpty()) {
    logger.error("No Relying Party's entity ID found. Ignore the request!");
    return null;
  }
  String rpEntityId=new String(Base64.decode(encodedEntityId));
  RelyingParty rp=idmAccessor.getRelyingPartyByUrl(rpEntityId);
  if (rp != null) {
    return rp;
  }
 else {
    logger.error("Unknown relying party: " + rpEntityId);
    return null;
  }
}

public void rotateZ(double theta){
  Matrix3D tmp=new Matrix3D();
  double c=Math.cos(theta);
  double s=Math.sin(theta);
  tmp.set(0,0,c);
  tmp.set(0,1,-s);
  tmp.set(1,0,s);
  tmp.set(1,1,c);
  preMultiply(tmp);
}

public ServiceHost startFactory(Service instanceService){
  final Class<? extends Service> serviceClass=instanceService.getClass();
  return startFactory(serviceClass,null);
}

void wakeOut(){
  OnAvailable outFlow=_outFlow;
  if (outFlow == null) {
    return;
  }
  if (_creditsIn <= _queue.head()) {
    return;
  }
  StateOutPipe stateOld;
  StateOutPipe stateNew;
  do {
    stateOld=_stateOutRef.get();
    if (!stateOld.isFull()) {
      return;
    }
    stateNew=stateOld.toWake();
  }
 while (!_stateOutRef.compareAndSet(stateOld,stateNew));
  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(_outRef.services())){
    Objects.requireNonNull(outbox);
    PipeWakeOutMessage<T> msg=new PipeWakeOutMessage<>(outbox,_outRef,this,outFlow);
    outbox.offer(msg);
  }
 }

public ConstraintMap createAssignmentConstraints(final AnnotatedTypeMirror assignedTo,final AnnotatedTypeMirror boxedReturnType,final AnnotatedExecutableType methodType,final Set<AFConstraint> afArgumentConstraints,final Map<TypeVariable,AnnotatedTypeMirror> inferredArgs,final Set<TypeVariable> targets,final AnnotatedTypeFactory typeFactory){
  final LinkedList<AFConstraint> assignmentAfs=new LinkedList<>();
  for (  AnnotatedTypeVariable typeParam : methodType.getTypeVariables()) {
    final TypeVariable target=typeParam.getUnderlyingType();
    final AnnotatedTypeMirror inferredType=inferredArgs.get(target);
    if (inferredType != null) {
      assignmentAfs.add(new A2F(inferredType,typeParam.getUpperBound()));
      assignmentAfs.add(new F2A(typeParam.getLowerBound(),inferredType));
    }
 else {
      assignmentAfs.add(new F2A(typeParam,typeParam.getUpperBound()));
      assignmentAfs.add(new A2F(typeParam.getLowerBound(),typeParam));
    }
  }
  for (  AFConstraint argConstraint : afArgumentConstraints) {
    if (argConstraint instanceof F2A) {
      assignmentAfs.add(argConstraint);
    }
  }
  LinkedList<AFConstraint> substitutedAssignmentConstraints=new LinkedList<>();
  for (  AFConstraint afConstraint : assignmentAfs) {
    substitutedAssignmentConstraints.add(afConstraint.substitute(inferredArgs));
  }
  final AnnotatedTypeMirror substitutedReturnType=TypeArgInferenceUtil.substitute(inferredArgs,boxedReturnType);
  substitutedAssignmentConstraints.add(new F2A(substitutedReturnType,assignedTo));
  final Set<AFConstraint> reducedConstraints=new LinkedHashSet<>();
  reduceAfConstraints(typeFactory,reducedConstraints,substitutedAssignmentConstraints,targets);
  final Set<TUConstraint> tuAssignmentConstraints=afToTuConstraints(reducedConstraints,targets);
  addConstraintsBetweenTargets(tuAssignmentConstraints,targets,true,typeFactory);
  return constraintMapBuilder.build(targets,tuAssignmentConstraints,typeFactory);
}

public static int columnsNumber(char c,int x,int prevX,int plainSpaceSize){
  if (c != '\t') {
    return 1;
  }
  int result=(x - prevX) / plainSpaceSize;
  if ((x - prevX) % plainSpaceSize > 0) {
    result++;
  }
  return result;
}

private Optional(T value){
  this.value=Objects.requireNonNull(value);
}

public KafkaMessageListenerContainer(ConsumerFactory<K,V> consumerFactory,ContainerProperties containerProperties,TopicPartitionInitialOffset... topicPartitions){
  super(containerProperties);
  Assert.notNull(consumerFactory,"A ConsumerFactory must be provided");
  this.consumerFactory=consumerFactory;
  if (topicPartitions != null) {
    this.topicPartitions=Arrays.copyOf(topicPartitions,topicPartitions.length);
  }
 else {
    this.topicPartitions=containerProperties.getTopicPartitions();
  }
}

public void engineDeleteEntry(String alias) throws KeyStoreException {
  Key k=(Key)keys.remove(alias);
  Certificate c=(Certificate)certs.remove(alias);
  if (c != null) {
    chainCerts.remove(new CertId(c.getPublicKey()));
  }
  if (k != null) {
    String id=(String)localIds.remove(alias);
    if (id != null) {
      c=(Certificate)keyCerts.remove(id);
    }
    if (c != null) {
      chainCerts.remove(new CertId(c.getPublicKey()));
    }
  }
}

private String toString(Matcher m,int group){
  return (group == 0) ? "" : m.group(group);
}

public PlaLineInt translate_by(PlaVectorInt p_vector){
  if (p_vector.equals(PlaVectorInt.ZERO))   return this;
  PlaPointInt new_a=point_a.translate_by(p_vector);
  PlaPointInt new_b=point_b.translate_by(p_vector);
  return new PlaLineInt(new_a,new_b);
}

@SuppressWarnings("all") final void reject(Runnable command){
  handler.rejectedExecution(command,this);
}

private int calculateMenuMargin(){
  WindowManager wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  Display display=wm.getDefaultDisplay();
  Point size=new Point();
  display.getSize(size);
  int height=size.y;
  return (int)Math.round(height * MENU_MARGIN_RELATIVE_MODIFIER);
}

public void addRam(AttackAction ea){
  pendingRams.addElement(ea);
  processGameEvent(new GameNewActionEvent(this,ea));
}

public static List<Integer> createColors(Resources r,int[] colors){
  List<Integer> result=new ArrayList<Integer>();
  for (  int i : colors) {
    result.add(r.getColor(i));
  }
  return result;
}

public void testConfigFileProperty() throws Exception {
  File configHome=new File(configuration.getHome());
  assertTrue("Could not find a proper configuration home.",configHome.exists() && configHome.isDirectory());
  File existingFile=createFile(configHome,"existingfile","helloworld");
  assertEquals("helloworld",readFile(existingFile));
  String fileName="testConfigfile";
  String fileContents="Hello @message@ ";
  File file=createFile(configFileDirectory,fileName,fileContents);
  FileConfig configFile=new FileConfig();
  configFile.setFile(getAbsolutePath(file));
  configFile.setToFile("existingfile");
  configFile.setOverwrite(false);
  configFile.setConfigfile(false);
  configuration.setProperty("message","world");
  configuration.setConfigFileProperty(configFile);
  configuration.doConfigure(null);
  File copiedFile=new File(configuration.getHome() + "/existingfile");
  assertTrue("Cannot find the expected copied file",copiedFile.exists());
  assertEquals("Hello world ",readFile(copiedFile));
}

protected byte[] generateSalt(){
  return HEADER.getBytes(Constants.UTF8);
}

public void addListener(final ProjectorListener projectorListener){
  if (listeners == null) {
    listeners=new ArrayList<ProjectorListener>();
  }
  listeners.add(projectorListener);
}

protected TupleExpr selectNextTupleExpr(List<TupleExpr> expressions,Map<TupleExpr,Double> cardinalityMap,Map<TupleExpr,List<Var>> varsMap,Map<Var,Integer> varFreqMap,Set<String> boundVars){
  TupleExpr result=null;
  if (expressions.size() > 1) {
    double lowestCardinality=Double.POSITIVE_INFINITY;
    for (    TupleExpr tupleExpr : expressions) {
      double cardinality=getTupleExprCardinality(tupleExpr,cardinalityMap,varsMap,varFreqMap,boundVars);
      if (cardinality < lowestCardinality || result == null) {
        lowestCardinality=cardinality;
        result=tupleExpr;
      }
    }
  }
 else {
    result=expressions.get(0);
  }
  return result;
}

public static void writeBcdNumber(OutputStream os,String number) throws IOException {
  int bcd=0x00;
  int n=0;
  for (int i=0; i < number.length(); i++) {
switch (number.charAt(i)) {
case '0':
      bcd|=0x00;
    break;
case '1':
  bcd|=0x10;
break;
case '2':
bcd|=0x20;
break;
case '3':
bcd|=0x30;
break;
case '4':
bcd|=0x40;
break;
case '5':
bcd|=0x50;
break;
case '6':
bcd|=0x60;
break;
case '7':
bcd|=0x70;
break;
case '8':
bcd|=0x80;
break;
case '9':
bcd|=0x90;
break;
case '*':
bcd|=0xA0;
break;
case '#':
bcd|=0xB0;
break;
case 'a':
bcd|=0xC0;
break;
case 'b':
bcd|=0xE0;
break;
}
n++;
if (n == 2) {
os.write(bcd);
n=0;
bcd=0x00;
}
 else {
bcd>>=4;
}
}
if (n == 1) {
bcd|=0xF0;
os.write(bcd);
}
}

public void addMessage(String message){
  messages.addLast(message);
  if (messages.size() > MAX_HISTORY) {
    messages.removeFirst();
  }
  pointer=messages.size();
}

@VisibleForTesting protected void startExecutor(final int container){
  LOG.info("Starting a new executor for container: " + container);
  final Process containerExecutor=startExecutorProcess(container);
  processToContainer.put(containerExecutor,container);
  LOG.info("Started the executor for container: " + container);
  startExecutorMonitor(container,containerExecutor);
}

public static Date stringToDate(String s,DateFormat formatter){
  try {
    return formatter.parse(s);
  }
 catch (  ParseException e) {
    return null;
  }
}

public void accept(AbstractReporter r){
  r.testStart(this);
  r.browserInfoEntry(browserInfoEntry);
  Iterator<LogEntry> entryIterator=logEntries.iterator();
  while (entryIterator.hasNext()) {
    LogEntry entry=entryIterator.next();
    if (!entryIterator.hasNext()) {
      entry.setLast(true);
    }
    visit(entry,r);
  }
  r.testEnd(this);
}

private void loadLatestExtensionVersions(){
  try {
    List<Extension> all=registryManager.getExtensions();
    if (!all.isEmpty()) {
      setLatestExtensionVersions(getLatestVersions(all));
    }
  }
 catch (  RegistryException e) {
    String msg=RegistryException.logRegistryException(e.getType(),this);
    warnings.addStartupError(msg);
    LOG.error(msg);
    msg=getText("admin.extensions.couldnt.load",new String[]{cfg.getRegistryUrl()});
    warnings.addStartupError(msg);
    LOG.error(msg);
  }
 finally {
    if (getLatestExtensionVersions() == null) {
      setLatestExtensionVersions(new ArrayList<Extension>());
    }
  }
}

protected void startNode(Node node) throws org.xml.sax.SAXException {
  if (node instanceof Locator) {
    Locator loc=(Locator)node;
    fLocator.setColumnNumber(loc.getColumnNumber());
    fLocator.setLineNumber(loc.getLineNumber());
    fLocator.setPublicId(loc.getPublicId());
    fLocator.setSystemId(loc.getSystemId());
  }
 else {
    fLocator.setColumnNumber(0);
    fLocator.setLineNumber(0);
  }
switch (node.getNodeType()) {
case Node.DOCUMENT_TYPE_NODE:
    serializeDocType((DocumentType)node,true);
  break;
case Node.COMMENT_NODE:
serializeComment((Comment)node);
break;
case Node.DOCUMENT_FRAGMENT_NODE:
break;
case Node.DOCUMENT_NODE:
break;
case Node.ELEMENT_NODE:
serializeElement((Element)node,true);
break;
case Node.PROCESSING_INSTRUCTION_NODE:
serializePI((ProcessingInstruction)node);
break;
case Node.CDATA_SECTION_NODE:
serializeCDATASection((CDATASection)node);
break;
case Node.TEXT_NODE:
serializeText((Text)node);
break;
case Node.ENTITY_REFERENCE_NODE:
serializeEntityReference((EntityReference)node,true);
break;
default :
}
}

@Override public String toString(){
  StringBuilder sb=new StringBuilder(10);
  format((getYear() + 1900),4,sb);
  sb.append('-');
  format((getMonth() + 1),2,sb);
  sb.append('-');
  format(getDate(),2,sb);
  return sb.toString();
}

public void testClearBitNegativeInside2(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=-1;
  int number=44;
  byte rBytes[]={-2,127,-57,-101,1,75,-90,-62,-92,-4,14,-36,-26};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.clearBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

public void testCompareGreaterScale2(){
  String a="12380964839238475457356735674573563567890295784902768787678287";
  int aScale=48;
  String b="4573563567890295784902768787678287";
  int bScale=2;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  int result=-1;
  assertEquals("incorrect result",result,aNumber.compareTo(bNumber));
}

public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
  if (bo == 'b') {
    val=(char)((val << 8) | (is.read() & 0xff));
  }
 else {
    val=(char)((is.read() << 8) | (val & 0xff));
  }
  return val;
}

public void cancelAutoCompletion(){
  if (inCompletion) {
    textField.setText(textBefore);
    textField.setCaretPosition(caretPosBefore);
    prevCompletion=null;
    prevCompletionIndex=0;
    inCompletion=false;
  }
}

private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){
  if (imageSize < viewSize) {
    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
  }
 else   if (trans > 0) {
    m[axis]=-((imageSize - viewSize) * 0.5f);
  }
 else {
    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));
  }
}

public Enumeration<Option> listOptions(){
  Vector<Option> result=new Vector<Option>();
  result.add(new Option("\tSkip identical instances (distances equal to zero).\n","S",1,"-S"));
  result.addAll(Collections.list(super.listOptions()));
  return result.elements();
}

public ClientPropertiesBuilder withProxyHostName(String proxyHostName){
  properties.setProperty(CLIENT_SERVICE_PROXY_HOST_NAME,proxyHostName);
  return this;
}

public static void verifySetterMethods(Class<?> clazz,MappedField... fields){
  String methodName=null;
  String fieldName=null;
  Class<?> fieldType=null;
  try {
    for (    MappedField field : fields) {
      fieldName=field.getName();
      fieldType=field.getType();
      String customSet=field.setMethod();
      if (!isNull(customSet) && !customSet.equals(Constants.DEFAULT_ACCESSOR_VALUE))       try {
        clazz.getMethod(customSet,fieldType);
        field.setMethod(customSet);
        continue;
      }
 catch (      Exception e) {
        Error.customMethod("set",customSet,clazz);
      }
      methodName=mSet(fieldName);
      clazz.getMethod(methodName,fieldType);
      field.setMethod(methodName);
    }
  }
 catch (  Exception e) {
    Error.method(methodName,fieldName,clazz);
  }
}

private E dequeue(){
  final Object[] items=this.items;
  @SuppressWarnings("unchecked") E x=(E)items[takeIndex];
  items[takeIndex]=null;
  takeIndex=inc(takeIndex);
  count--;
  if (itrs != null)   itrs.elementDequeued();
  notFull.signal();
  return x;
}

static public String randomPositiveFloat(int whole,int decimal){
  StringBuilder output=new StringBuilder();
  output.append(rnd.nextInt(8) + 1);
  for (int i=0; i < whole - 1; i++) {
    output.append(rnd.nextInt(9));
  }
  output.append(".");
  for (int i=0; i < decimal; i++) {
    output.append(rnd.nextInt(9));
  }
  return output.toString();
}

public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}

public void resetTextBoxIndexesExcept(Set<Integer> excludedList){
  Set<Integer> unusedTextBoxIndexes=new HashSet<Integer>(points.getTextBoxIndexes());
  unusedTextBoxIndexes.removeAll(excludedList);
  for (  Integer index : unusedTextBoxIndexes) {
    points.removeTextBox(index);
  }
}

public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){
  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();
  if (!processUpdates) {
    deviceListeners.clearListeners();
  }
  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;
  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;
  IDevice res=learnDeviceByEntity(new Entity(macAddress,vlan,ipv4Address,switchDPID,switchPort,new Date()));
  if (listeners != null) {
    for (    IDeviceListener listener : listeners) {
      deviceListeners.addListener("device",listener);
    }
  }
  return res;
}

public double[] levelZeroData(){
  List<Buffer> levelZeroBuffers=bufferMap.get(0);
  int length=0;
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      length+=buffer.size;
    }
 else {
      length+=buffer.next;
    }
  }
  int pos=0;
  int currLen;
  final double[] out=new double[length];
  for (  Buffer buffer : levelZeroBuffers) {
    if (!buffer.hasCapacity()) {
      currLen=buffer.size;
    }
 else {
      currLen=buffer.next;
    }
    System.arraycopy(buffer.data,0,out,pos,currLen);
    pos+=currLen;
  }
  return out;
}

private void addReference(final int sourcePosition,final int referencePosition){
  if (srcAndRefPositions == null) {
    srcAndRefPositions=new int[6];
  }
  if (referenceCount >= srcAndRefPositions.length) {
    int[] a=new int[srcAndRefPositions.length + 6];
    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);
    srcAndRefPositions=a;
  }
  srcAndRefPositions[referenceCount++]=sourcePosition;
  srcAndRefPositions[referenceCount++]=referencePosition;
}

public String[] showVersion() throws NetworkDeviceControllerException {
  String[] returnVal=new String[2];
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showVersion.cmd"),10000,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString("MDSDialog.showVersion.version.match"),MDSDialogProperties.getString("MDSDialog.showVersion.MDS.match"),MDSDialogProperties.getString("MDSDialog.showVersion.Nexus.match")};
  String[] groups=new String[2];
  for (  String line : lines) {
    int index=match(line,regex,groups);
switch (index) {
case 0:
      returnVal[1]=groups[0];
    break;
case 1:
  returnVal[0]=groups[0];
break;
case 2:
returnVal[0]=groups[0];
break;
}
}
return returnVal;
}

public static int countMatches(String string,char c){
  int n=0;
  for (  char tc : string.toCharArray()) {
    if (c == tc)     n++;
  }
  return n;
}

private ImageIcon addColor(ImageIcon icon,Color color){
  if (icon == null || color == null) {
    return icon;
  }
  BufferedImage newImage=new BufferedImage(icon.getIconWidth(),icon.getIconWidth(),BufferedImage.TYPE_INT_ARGB);
  Graphics g=newImage.getGraphics();
  g.setColor(color);
  g.drawImage(icon.getImage(),0,0,color,null);
  g.dispose();
  return new ImageIcon(newImage);
}

public static byte[] readAllLimited(InputStream inStr,int limit) throws IOException {
  ByteArrayOutputStream buf=new ByteArrayOutputStream();
  pipeAllLimited(inStr,limit,buf);
  return buf.toByteArray();
}

protected String searchFor(final String target,String start){
  return searchFor(target,null,start);
}

private int validatePreloadOrder(CacheConfiguration[] cfgs) throws IgniteCheckedException {
  int maxOrder=0;
  for (  CacheConfiguration cfg : cfgs) {
    int rebalanceOrder=cfg.getRebalanceOrder();
    if (rebalanceOrder > 0) {
      if (cfg.getCacheMode() == LOCAL)       throw new IgniteCheckedException("Rebalance order set for local cache (fix configuration and restart the " + "node): " + U.maskName(cfg.getName()));
      if (cfg.getRebalanceMode() == CacheRebalanceMode.NONE)       throw new IgniteCheckedException("Only caches with SYNC or ASYNC rebalance mode can be set as rebalance " + "dependency for other caches [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceMode="+ cfg.getRebalanceMode()+ ", rebalanceOrder="+ cfg.getRebalanceOrder()+ ']');
      maxOrder=Math.max(maxOrder,rebalanceOrder);
    }
 else     if (rebalanceOrder < 0)     throw new IgniteCheckedException("Rebalance order cannot be negative for cache (fix configuration and restart " + "the node) [cacheName=" + U.maskName(cfg.getName()) + ", rebalanceOrder="+ rebalanceOrder+ ']');
  }
  return maxOrder;
}

public void execute(){
  mPlayer.setLoopMode(mDoLoop);
  mThread=new Thread(this,"Movie Player");
  mThread.start();
}

@Override public void removeEnvVar(EnvVar envVar){
  if (envVar != null) {
    envVarList.remove(envVar);
  }
}

static private String calcThreshold(double scoreThreshold,double lambda){
  final double logProbThreshold=Math.log(1 - scoreThreshold / 0.999);
  int maxNum=1000000;
  if (calcLogProb(maxNum,lambda) > logProbThreshold) {
    return ">1e6";
  }
  int minNum=1;
  while (minNum < maxNum) {
    final int midNum=(maxNum + minNum) / 2;
    final boolean passThreshold=calcLogProb(midNum,lambda) <= logProbThreshold;
    if (passThreshold) {
      maxNum=midNum;
    }
 else {
      if (midNum == minNum) {
        break;
      }
      minNum=midNum;
    }
  }
  return Integer.toString(maxNum);
}

private Scope peek() throws JSONException {
  if (stack.isEmpty()) {
    throw new JSONException("Nesting problem");
  }
  return stack.get(stack.size() - 1);
}

public void testIsSigned(){
  try {
    assertFalse(rsmd.isSigned(1));
  }
 catch (  SQLException e1) {
    fail("ResultSetMetaDataTest.isSigned" + e1.getMessage());
    e1.printStackTrace();
  }
  try {
    rsmd.isSigned(0);
    fail("SQLException is not thrown");
  }
 catch (  SQLException e) {
  }
}

public static int indexOfLastSeparator(String filename){
  if (filename == null)   return -1;
  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);
  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);
  return Math.max(lastUnixPos,lastWindowsPos);
}

public static boolean pointInView(View v,float localX,float localY,float slop){
  return localX >= -slop && localY >= -slop && localX < (v.getWidth() + slop) && localY < (v.getHeight() + slop);
}

@Category(FlakyTest.class) @Test public void test_FPAmetadataFetch(){
  final Host host=Host.getHost(0);
  VM server1=host.getVM(0);
  VM server2=host.getVM(1);
  VM server3=host.getVM(2);
  VM server4=host.getVM(3);
  Boolean simpleFPR=false;
  final int portLocator=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);
  final String hostLocator=NetworkUtils.getServerHostName(server1.getHost());
  final String locator=hostLocator + "[" + portLocator+ "]";
  server3.invoke(null);
  try {
    List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",false,3));
    Integer port1=(Integer)server1.invoke(null);
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",true,3));
    Integer port2=(Integer)server2.invoke(null);
    fpaList.clear();
    createClientWithLocator(hostLocator,portLocator);
    putIntoPartitionedRegionsThreeQs();
    getFromPartitionedRegionsFor3Qs();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    int totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    int currentRedundancy=1;
    verifyMetadata(totalBucketOnServer,currentRedundancy);
    updateIntoSinglePRFor3Qs();
    fpaList.clear();
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q4",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",true,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",false,3));
    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",false,3));
    Integer port4=(Integer)server4.invoke(null);
    Wait.pause(2000);
    putIntoPartitionedRegions();
    getFromPartitionedRegions();
    Wait.pause(2000);
    server1.invoke(null);
    server2.invoke(null);
    server4.invoke(null);
    totalBucketOnServer=0;
    totalBucketOnServer+=(Integer)server1.invoke(null);
    totalBucketOnServer+=(Integer)server2.invoke(null);
    totalBucketOnServer+=(Integer)server4.invoke(null);
    updateIntoSinglePR();
  }
  finally {
    server3.invoke(null);
  }
}

private static Type[] unrollBounds(final Map<TypeVariable<?>,Type> typeArguments,final Type[] bounds){
  Type[] result=bounds;
  int i=0;
  for (; i < result.length; i++) {
    final Type unrolled=unrollVariables(typeArguments,result[i]);
    if (unrolled == null) {
      result=ArrayUtils.remove(result,i--);
    }
 else {
      result[i]=unrolled;
    }
  }
  return result;
}

public void deleteQuota(String id) throws IsilonException {
  delete(_baseUrl.resolve(URI_QUOTAS),id,"quota");
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public static Map<String,String> createBasicAuthHeader(String username,String password,Map<String,String> headerMap){
  if (headerMap == null)   headerMap=new HashMap<>();
  String credentials=username + ":" + password;
  String base64EncodedCredentials=Base64.encodeToString(credentials.getBytes(),Base64.NO_WRAP);
  headerMap.put("Authorization","Basic " + base64EncodedCredentials);
  return headerMap;
}

private void addExtentEntry(){
  extentModel.addNewEntry();
  removeExtentButton.setEnabled(false);
}

private TransportNetwork checkCached(String networkId){
  try {
    String filename=networkId + "_" + R5Version.version+ ".dat";
    File cacheLocation=new File(cacheDir,networkId + "_" + R5Version.version+ ".dat");
    if (cacheLocation.exists())     LOG.info("Found locally-cached TransportNetwork at {}",cacheLocation);
 else {
      LOG.info("No locally cached transport network at {}.",cacheLocation);
      if (sourceBucket != null) {
        LOG.info("Checking for cached transport network on S3.");
        S3Object tn;
        try {
          tn=s3.getObject(sourceBucket,filename);
        }
 catch (        AmazonServiceException ex) {
          LOG.info("No cached transport network was found in S3. It will be built from scratch.");
          return null;
        }
        cacheDir.mkdirs();
        LOG.info("Copying pre-built transport network from S3 to local file {}",cacheLocation);
        FileOutputStream fos=new FileOutputStream(cacheLocation);
        InputStream is=tn.getObjectContent();
        try {
          ByteStreams.copy(is,fos);
        }
  finally {
          is.close();
          fos.close();
        }
      }
 else {
        LOG.info("Transport network was not found");
        return null;
      }
    }
    LOG.info("Loading cached transport network at {}",cacheLocation);
    FileInputStream fis=new FileInputStream(cacheLocation);
    try {
      return TransportNetwork.read(fis);
    }
  finally {
      fis.close();
    }
  }
 catch (  Exception e) {
    LOG.error("Exception occurred retrieving cached transport network",e);
    return null;
  }
}

public int countTokens(){
  int count=0;
  boolean inToken=false;
  for (int i=position, length=string.length(); i < length; i++) {
    if (delimiters.indexOf(string.charAt(i),0) >= 0) {
      if (returnDelimiters)       count++;
      if (inToken) {
        count++;
        inToken=false;
      }
    }
 else {
      inToken=true;
    }
  }
  if (inToken)   count++;
  return count;
}

void readFile(File file) throws org.jdom2.JDOMException, java.io.IOException {
  XmlFile xf=new XmlFile(){
  }
;
  xf.rootFromFile(file);
}

public boolean isAllGranted(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;
  }
  return count == mPerms.size();
}

protected void execute(Runnable evt){
  executor.execute(evt);
}

private void sendNextMessageOverNetwork() throws Exception {
  RawData raw=outgoing.take();
  if (raw == null)   throw new NullPointerException();
  sendNext(raw);
}

@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  setupBounds(w,h);
  setupPaints();
  invalidate();
}

public void addAttributeFor(final Field field){
  fieldToUseAsAttribute.add(field);
}

public boolean isSessionToken(String token){
synchronized (sessionTokens) {
    return sessionTokens.contains(token);
  }
}

public static double rootMeansSquaredError(double[] real,double[] predicted){
  double ret=0.0;
  for (int i=0; i < real.length; i++) {
    ret+=Math.pow((real[i] - predicted[i]),2);
  }
  return Math.sqrt(ret / real.length);
}

public void export(ByteBuffer buf){
  buf.putInt(seqId);
  if (info.isRowBlockEnabled())   buf.putInt(nRows);
  export(primaryKey,buf);
  for (  ByteArray cb : cellBlocks) {
    export(cb,buf);
  }
}

private HashMap<String,Object> createAccDetailmap(String glcode,BigDecimal debitAmount,BigDecimal creditAmount){
  HashMap<String,Object> accountdetailmap=new HashMap<String,Object>();
  accountdetailmap.put(VoucherConstant.GLCODE,glcode);
  accountdetailmap.put(VoucherConstant.DEBITAMOUNT,debitAmount);
  accountdetailmap.put(VoucherConstant.CREDITAMOUNT,creditAmount);
  accountdetailmap.put(VoucherConstant.FUNCTIONCODE,getFunctionaryCode());
  return accountdetailmap;
}

private void rotateRight(Node<K,V> root){
  Node<K,V> pivot=root.left;
  Node<K,V> right=root.right;
  Node<K,V> pivotLeft=pivot.left;
  Node<K,V> pivotRight=pivot.right;
  root.left=pivotRight;
  if (pivotRight != null) {
    pivotRight.parent=root;
  }
  replaceInParent(root,pivot);
  pivot.right=root;
  root.parent=pivot;
  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;
  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;
}

private static int byteCompaction(int mode,int[] codewords,Charset encoding,int codeIndex,StringBuilder result){
  ByteArrayOutputStream decodedBytes=new ByteArrayOutputStream();
  if (mode == BYTE_COMPACTION_MODE_LATCH) {
    int count=0;
    long value=0;
    int[] byteCompactedCodewords=new int[6];
    boolean end=false;
    int nextCode=codewords[codeIndex++];
    while ((codeIndex < codewords[0]) && !end) {
      byteCompactedCodewords[count++]=nextCode;
      value=900 * value + nextCode;
      nextCode=codewords[codeIndex++];
      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {
        codeIndex--;
        end=true;
      }
 else {
        if ((count % 5 == 0) && (count > 0)) {
          for (int j=0; j < 6; ++j) {
            decodedBytes.write((byte)(value >> (8 * (5 - j))));
          }
          value=0;
          count=0;
        }
      }
    }
    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {
      byteCompactedCodewords[count++]=nextCode;
    }
    for (int i=0; i < count; i++) {
      decodedBytes.write((byte)byteCompactedCodewords[i]);
    }
  }
 else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {
    int count=0;
    long value=0;
    boolean end=false;
    while (codeIndex < codewords[0] && !end) {
      int code=codewords[codeIndex++];
      if (code < TEXT_COMPACTION_MODE_LATCH) {
        count++;
        value=900 * value + code;
      }
 else {
        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {
          codeIndex--;
          end=true;
        }
      }
      if ((count % 5 == 0) && (count > 0)) {
        for (int j=0; j < 6; ++j) {
          decodedBytes.write((byte)(value >> (8 * (5 - j))));
        }
        value=0;
        count=0;
      }
    }
  }
  result.append(new String(decodedBytes.toByteArray(),encoding));
  return codeIndex;
}

private void updateRadioLinks(){
  m_advanceDataSetFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  m_advanceIteratorFirst.setEnabled(m_GeneratorPropertyPanel.getEditorActive());
  if (m_Exp != null) {
    if (!m_GeneratorPropertyPanel.getEditorActive()) {
      m_Exp.setAdvanceDataSetFirst(true);
    }
 else {
      m_Exp.setAdvanceDataSetFirst(m_advanceDataSetFirst.isSelected());
    }
  }
}

public void update(long value){
  count.incrementAndGet();
  sample.update(value);
  setMax(value);
  setMin(value);
  sum.getAndAdd(value);
  updateVariance(value);
}

@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){
  paint.setColor(renderer.getColor());
  paint.setStyle(Style.FILL);
  int length=points.size();
  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);
  double max=series.getMaxValue();
  double coef=MAX_BUBBLE_SIZE / max;
  for (int i=0; i < length; i+=2) {
    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;
    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);
  }
}

public static void checkClassSignature(final String signature){
  int pos=0;
  if (getChar(signature,0) == '<') {
    pos=checkFormalTypeParameters(signature,pos);
  }
  pos=checkClassTypeSignature(signature,pos);
  while (getChar(signature,pos) == 'L') {
    pos=checkClassTypeSignature(signature,pos);
  }
  if (pos != signature.length()) {
    throw new IllegalArgumentException(signature + ": error at index " + pos);
  }
}

public static byte[] select(String appId,String suffix){
  String cardletAid=FIDESMO_AID_PREFIX + appId + suffix;
  return select(cardletAid);
}

public List<Properties> findAvailableProperties(String uri) throws IOException {
  _resourcesNotLoaded.clear();
  String fulluri=_path + uri;
  List<Properties> properties=new ArrayList<>();
  Enumeration<URL> resources=getResources(fulluri);
  while (resources.hasMoreElements()) {
    URL url=resources.nextElement();
    try {
      Properties props=loadProperties(url);
      properties.add(props);
    }
 catch (    Exception notAvailable) {
      _resourcesNotLoaded.add(url.toExternalForm());
    }
  }
  return properties;
}

void internalAddRootEntry(ProjectComparisonEntry entry){
  entries.add(entry);
}

public static Source fromURL(URL url,Charset cs) throws IOException {
  URI uri;
  try {
    uri=url.toURI();
  }
 catch (  URISyntaxException e) {
    throw new IOException("Illegal URI",e);
  }
  try (InputStream is=url.openStream()){
    return fromStream(is,uri,cs);
  }
 }

public synchronized void addZoomListener(ZoomListener listener){
  mZoomListeners.add(listener);
}

public void testMergeOneServletIntoDocumentWithAnotherServlet() throws Exception {
  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";
  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);
  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s2</servlet-name>"+ "    <servlet-class>sclass2</servlet-class>"+ "  </servlet>"+ "</web-app>";
  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);
  WebXmlMerger merger=new WebXmlMerger(srcWebXml);
  merger.merge(mergeWebXml);
  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));
  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s2"));
}

public RE extractRE() throws InterruptedException {
  arden();
  if (!coeffs.isEmpty()) {
    throw new RuntimeException("production still has free variables");
  }
  return unionREs(terms);
}

@Deprecated public static void runFinalizersOnExit(boolean run){
  finalizeOnExit=run;
}

public void addResult(AMIdentity id,Map attrs){
  searchResults.add(id);
  resultsMap.put(id,attrs);
}

public <T extends IntentionAction & LocalQuickFix>void registerBatchFix(@NotNull T fix,@Nullable TextRange range,@Nullable final HighlightDisplayKey key){
  if (range == null) {
    range=new TextRange(myStartOffset,myEndOffset);
  }
  if (myBatchFixes == null) {
    myBatchFixes=new ArrayList<QuickFixInfo>();
  }
  myBatchFixes.add(new QuickFixInfo(fix,range,key));
}

protected void createFile(ZipEntry entry){
  IPath pathname=new Path(entry.getName());
  ZipEntry parent;
  if (pathname.segmentCount() == 1) {
    parent=root;
  }
 else {
    parent=(ZipEntry)directoryEntryCache.get(pathname.removeLastSegments(1));
  }
  addToChildren(parent,entry);
}

public void testHasAttributes1() throws Throwable {
  Document doc;
  NodeList addrList;
  Node addrNode;
  boolean state;
  doc=(Document)load("staff",builder);
  addrList=doc.getElementsByTagName("name");
  addrNode=addrList.item(0);
  state=addrNode.hasAttributes();
  assertFalse("throw_False",state);
}

public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {
  fNamespaceContext=namespaceContext;
  try {
    if (fDocumentHandler != null) {
      if (locator != null) {
        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fDocumentHandler.startDocument();
    }
    if (fContentHandler != null) {
      if (locator != null) {
        fContentHandler.setDocumentLocator(new LocatorProxy(locator));
      }
      fContentHandler.startDocument();
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}

@Override public String dumpWindowHierarchy(boolean compressed){
  device.setCompressedLayoutHeirarchy(compressed);
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    device.dumpWindowHierarchy(os);
    os.close();
    return os.toString("UTF-8");
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    device.setCompressedLayoutHeirarchy(false);
  }
  return null;
}

public void registerObserver(RuleChangesObserver observer){
  observers.add(observer);
}

private void sendUpdateHeartbeats(){
  HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal();
  if (heartbeat != null) {
    heartbeat.updateHeartbeats();
  }
}

public void serialize(String name,byte[] message,OutputStream out) throws IOException {
  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];
  uint32ToByteArrayBE(params.getPacketMagic(),header,0);
  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {
    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);
  }
  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);
  byte[] hash=doubleDigest(message);
  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);
  out.write(header);
  out.write(message);
  if (log.isDebugEnabled())   log.debug("Sending {} message: {}",name,bytesToHexString(header) + bytesToHexString(message));
}

public SSLEngine initSslEngine(boolean client) throws Exception {
  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());
  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));
  KeyStore trustStore;
  if (properties.sslTrustStorePath() != null) {
    LOGGER.debug("Using separate trust store");
    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());
  }
 else {
    trustStore=keyStore;
    LOGGER.debug("Using key store as trust store");
  }
  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
  trustManagerFactory.init(trustStore);
  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();
  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();
  SSLContext sslContext=SSLContext.getInstance("TLS");
  sslContext.init(keyManagers,trustManagers,null);
  SSLEngine sslEngine=sslContext.createSSLEngine();
  sslEngine.setUseClientMode(client);
  sslEngine.setWantClientAuth(true);
  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());
  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());
  sslEngine.setEnableSessionCreation(true);
  return sslEngine;
}

public GetBufferedRandomAccessSource(IRandomAccessSource source){
  this.source=source;
  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];
  this.getBufferStart=-1;
  this.getBufferEnd=-1;
}

public ArgParser(String pName){
  programName=pName;
  args=new Vector();
  args.add(new HelpArg());
}

public void testSetBitZero(){
  byte aBytes[]={0};
  int aSign=0;
  int number=0;
  byte rBytes[]={1};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.setBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public static String convertBooleanArrToString(Boolean[] noDictionaryDimsMapping){
  StringBuilder builder=new StringBuilder();
  int index=0;
  for (; index < noDictionaryDimsMapping.length; index++) {
    builder.append(noDictionaryDimsMapping[index]);
    builder.append(CarbonCommonConstants.COMA_SPC_CHARACTER);
  }
  int lastIndex=builder.lastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER);
  String str=-1 != lastIndex ? builder.substring(0,lastIndex) : builder.toString();
  return str;
}

@Override protected void drawAxisLine(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge){
  Line2D axisLine=null;
  double c=cursor;
  if (edge == RectangleEdge.TOP) {
    axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.BOTTOM) {
    axisLine=new Line2D.Double(dataArea.getX(),c,dataArea.getMaxX(),c);
  }
 else   if (edge == RectangleEdge.LEFT) {
    axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY());
  }
 else   if (edge == RectangleEdge.RIGHT) {
    axisLine=new Line2D.Double(c,dataArea.getY(),c,dataArea.getMaxY());
  }
  g2.setPaint(getAxisLinePaint());
  g2.setStroke(getAxisLineStroke());
  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);
  g2.draw(axisLine);
  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);
  boolean drawUpOrRight=false;
  boolean drawDownOrLeft=false;
  if (this.positiveArrowVisible) {
    if (this.inverted) {
      drawDownOrLeft=true;
    }
 else {
      drawUpOrRight=true;
    }
  }
  if (this.negativeArrowVisible) {
    if (this.inverted) {
      drawUpOrRight=true;
    }
 else {
      drawDownOrLeft=true;
    }
  }
  if (drawUpOrRight) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataArea.getMaxX();
      y=cursor;
      arrow=this.rightArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataArea.getMinY();
      arrow=this.upArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.draw(shape);
  }
  if (drawDownOrLeft) {
    double x=0.0;
    double y=0.0;
    Shape arrow=null;
    if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {
      x=dataArea.getMinX();
      y=cursor;
      arrow=this.leftArrow;
    }
 else     if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {
      x=cursor;
      y=dataArea.getMaxY();
      arrow=this.downArrow;
    }
    AffineTransform transformer=new AffineTransform();
    transformer.setToTranslation(x,y);
    Shape shape=transformer.createTransformedShape(arrow);
    g2.fill(shape);
    g2.draw(shape);
  }
}

public static void saveXStream(File saveTo,Object model,Instances header) throws Exception {
  Vector<Object> v=new Vector<Object>();
  v.add(model);
  if (header != null) {
    v.add(header);
  }
  v.trimToSize();
  XStream.write(saveTo.getAbsolutePath(),v);
}

private void sortAndCollapse(){
  Collections.sort(mSpans);
  mAddsSinceSort=0;
  Iterator iter=mSpans.iterator();
  Span span=null;
  if (iter.hasNext()) {
    span=(Span)iter.next();
  }
  while (iter.hasNext()) {
    Span nextSpan=(Span)iter.next();
    if (span.subsume(nextSpan)) {
      iter.remove();
    }
 else {
      span=nextSpan;
    }
  }
}

public int splitRandomly(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){
  final int nele=end - begin;
  DBIDArrayIter it=ind.iter();
  double rs=tpro.doubleValue(it.seek(begin + rand.nextInt(nele)));
  int minInd=begin, maxInd=end - 1;
  while (minInd < maxInd) {
    double currEle=tpro.doubleValue(it.seek(minInd));
    if (currEle > rs) {
      while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {
        maxInd--;
      }
      if (minInd == maxInd) {
        break;
      }
      ind.swap(minInd,maxInd);
      maxInd--;
    }
    minInd++;
  }
  if (minInd == end - 1) {
    minInd=(begin + end) >>> 1;
  }
  return minInd;
}

public static String noPrefix(String path,String prefix){
  Objects.requireNonNull(path,"path must not be null");
  Objects.requireNonNull(prefix,"prefix must not be null");
  return path.startsWith(prefix) ? path.substring(prefix.length()) : path;
}

protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncCallback(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic="Sample/Java/v3";
    int qos=2;
    String message="Message from async calback MQTTv3 Java client sample";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}

public void remove(IAdaptable a){
  children.remove(a);
}

public static IntStream concat(IntStream a,IntStream b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  Spliterator.OfInt split=new Streams.ConcatSpliterator.OfInt(a.spliterator(),b.spliterator());
  IntStream stream=StreamSupport.intStream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}

public boolean equals(String expected,String actual){
  return framework.equals(expected,actual);
}

public LoginConfiguration forceAuth(String forceAuthReqParam){
  forceAuth=Boolean.parseBoolean(forceAuthReqParam);
  return this;
}

public UserConfig fetch(UserConfig config){
  config.addCredentials(this);
  String xml=POST(this.url + "/check-user",config.toXML());
  Element root=parse(xml);
  if (root == null) {
    return null;
  }
  try {
    UserConfig user=new UserConfig();
    user.parseXML(root);
    return user;
  }
 catch (  Exception exception) {
    this.exception=SDKException.parseFailure(exception);
    throw this.exception;
  }
}

@MethodDesc(description="Stops the replicator service",usage="stop") public void stop() throws Exception {
  try {
    handleEventSynchronous(new StopEvent());
    if (doneLatch != null) {
      doneLatch.countDown();
    }
  }
 catch (  Exception e) {
    logger.error("Stop operation failed",e);
    throw new Exception(e.toString());
  }
}

public void dispose() throws IabAsyncInProgressException {
synchronized (mAsyncInProgressLock) {
    if (mAsyncInProgress) {
      throw new IabAsyncInProgressException("Can't dispose because an async operation " + "(" + mAsyncOperation + ") is in progress.");
    }
  }
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
  }
  mDisposed=true;
  mContext=null;
  mServiceConn=null;
  mService=null;
  mPurchaseListener=null;
}

@Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException {
  pushMessageSync(msg);
  return;
}

public boolean writeCharacteristic(String address,String serviceUUID,String characteristicUUID,byte[] value){
  BluetoothGatt bluetoothGatt=mBluetoothGattMap.get(address);
  if (bluetoothGatt != null) {
    BluetoothGattService service=bluetoothGatt.getService(UUID.fromString(serviceUUID));
    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));
    characteristic.setValue(value);
    return bluetoothGatt.writeCharacteristic(characteristic);
  }
  return false;
}

public String linkForMessage(ProtoElement element){
  if (isExternalFile(element.getFile())) {
    String fullName=element.getFullName();
    return String.format("[%s]{@link external:\"%s\"}",fullName,fullName);
  }
 else {
    String simpleName=element.getSimpleName();
    return String.format("[%s]{@link %s}",simpleName,simpleName);
  }
}

public static <T>ArrayList<T> read(InputStream fileStream,String charsetName,ITransformer<String,T> transformer) throws FileNotFoundException {
  Scanner scanner=new Scanner(fileStream,charsetName);
  ArrayList<T> list=new ArrayList<>();
  while (scanner.hasNextLine()) {
    String line=scanner.nextLine();
    list.add(transformer.transform(line));
  }
  scanner.close();
  return list;
}

public boolean remove(JsonElement element){
  return elements.remove(element);
}

public TSink<byte[]> sendBytes(TStream<byte[]> stream){
  Objects.requireNonNull(stream,"stream");
  return sendBinary(stream,null);
}

private void sortBrokerItems(BrokerItem[] brokerItems,int sortType){
  Arrays.sort(brokerItems,BrokerItem.getComparatoryByType(sortType));
}

protected boolean needToEscapeXMLSpecialCharacters(String hostEntityID,String remoteEntityID,String realm){
  return true;
}

private void updatePathConstraints(TestChromosome test){
  List<BranchCondition> pathCondition=ConcolicExecution.getSymbolicPath(test);
  pathConditions.put(test,pathCondition);
}

public void test_journal_oneIndexNoData() throws IOException, InterruptedException, ExecutionException {
  final File out=File.createTempFile(getName(),Options.JNL);
  try {
    final Journal src=getStore(getProperties());
    try {
      final String NAME="testIndex";
      src.registerIndex(new IndexMetadata(NAME,UUID.randomUUID()));
      src.commit();
      final Future<Journal> f=src.compact(out);
      final Journal newJournal=f.get();
      try {
        assertNotNull(newJournal.getIndex(NAME));
        AbstractBTreeTestCase.assertSameBTree(src.getIndex(NAME),newJournal.getIndex(NAME));
      }
  finally {
        newJournal.destroy();
      }
    }
  finally {
      src.destroy();
    }
  }
  finally {
    out.delete();
  }
}

public static boolean p2pLoader(ClassLoader ldr){
  return ldr instanceof GridDeploymentInfo;
}

private static String removeSubTrailers(String decodedSubject){
  int subStringStart=0;
  int subStringEnd=decodedSubject.length();
  int originalSize=decodedSubject.length();
  int curPos=originalSize - 1;
  while (true) {
    char c=decodedSubject.charAt(curPos--);
    if (c == WS) {
      subStringEnd--;
    }
 else {
      if (subStringEnd > FWD_PARENS.length() && decodedSubject.endsWith(FWD_PARENS)) {
        subStringEnd-=FWD_PARENS.length();
      }
      break;
    }
  }
  decodedSubject=decodedSubject.substring(subStringStart,subStringEnd);
  return decodedSubject;
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

boolean nextSource() throws IOException {
  if (mSourceIt.hasNext()) {
    final InputStream is=mSourceIt.next();
    if (is == null) {
      mSource=null;
      return false;
    }
 else {
      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);
    }
    mSourceClosed=false;
    mInputBufferPosition=0;
    mInputBufferLength=0;
    mBufferLength=0;
    mBufferPosition=0;
    return true;
  }
  if (mSource != null) {
    mSource.close();
  }
  mSource=null;
  return false;
}

public static byte[] bitmapToBytes(Bitmap bm){
  byte[] bytes=null;
  if (bm != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    bm.compress(Bitmap.CompressFormat.PNG,100,baos);
    bytes=baos.toByteArray();
  }
  return bytes;
}

public static String inflate(String name){
  return inflate(name,gPrefix);
}

public void addPriorityHandler(WarningHandler handler){
  _priorityHandlers.add(handler);
}

private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  init(getMask(actions));
}

public void printLenString(String v) throws IOException {
  if (v == null) {
    os.write(0);
    os.write(0);
  }
 else {
    int len=v.length();
    os.write(len >> 8);
    os.write(len);
    printString(v,0,len);
  }
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

private void writeAttr(String name,String val) throws IOException {
  writeAttr(name,val,true);
}

final private String syntaxDef2SyntaxDesc(Attributes attrs) throws NamingException {
  StringBuffer syntaxDesc=new StringBuffer("( ");
  Attribute attr=null;
  int count=0;
  attr=attrs.get(NUMERICOID_ID);
  if (attr != null) {
    syntaxDesc.append(writeNumericOID(attr));
    count++;
  }
 else {
    throw new ConfigurationException("Attribute type doesn't" + "have a numeric OID");
  }
  attr=attrs.get(DESC_ID);
  if (attr != null) {
    syntaxDesc.append(writeQDString(attr));
    count++;
  }
  if (count < attrs.size()) {
    String attrId=null;
    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {
      attr=ae.next();
      attrId=attr.getID();
      if (attrId.equals(NUMERICOID_ID) || attrId.equals(DESC_ID)) {
        continue;
      }
 else {
        syntaxDesc.append(writeQDStrings(attr));
      }
    }
  }
  syntaxDesc.append(")");
  return syntaxDesc.toString();
}

@Override public void write(Buffer buffer,boolean isEnd) throws IOException {
  if (_s == null) {
    buffer.free();
    return;
  }
  try {
    _needsFlush=true;
    if (buffer.isDirect()) {
      _totalWriteBytes+=buffer.length();
      _s.write(buffer.direct());
      return;
    }
    _totalWriteBytes+=buffer.length();
    while (buffer.length() > 0) {
      _writeBuffer.clear();
      buffer.read(_writeBuffer);
      _writeBuffer.flip();
      _s.write(_writeBuffer);
    }
  }
 catch (  IOException e) {
    IOException exn=ClientDisconnectException.create(this + ":" + e,e);
    try {
      close();
    }
 catch (    IOException e1) {
    }
    throw exn;
  }
 finally {
    buffer.free();
  }
}

private static void skipMemberValue(int tag,ByteBuffer buf){
switch (tag) {
case 'e':
    buf.getInt();
  break;
case '@':
skipAnnotation(buf,true);
break;
case '[':
skipArray(buf);
break;
default :
buf.getShort();
}
}

protected void recursiveNestedJoin(EventBean lookupEvent,int nestingOrderIndex,EventBean[] currentPath,Collection<EventBean[]> result,ExprEvaluatorContext exprEvaluatorContext){
  List<EventBean[]> nestedResult=new LinkedList<EventBean[]>();
  ExecNode nestedExecNode=childNodes.get(nestingOrderIndex);
  nestedExecNode.process(lookupEvent,currentPath,nestedResult,exprEvaluatorContext);
  boolean isLastStream=(nestingOrderIndex == nestingOrderLength - 1);
  if (!isLastStream) {
    for (    EventBean[] row : nestedResult) {
      EventBean lookup=row[nestedStreams[nestingOrderIndex]];
      recursiveNestedJoin(lookup,nestingOrderIndex + 1,row,result,exprEvaluatorContext);
    }
    return;
  }
  for (  EventBean[] row : nestedResult) {
    result.add(row);
  }
}

public String generateMinimalMATSimConfig(){
  Config config=new Config();
  ConfigGroup ippcm=config.createModule(MatrixBasedPtRouterConfigGroup.GROUP_NAME);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_STOPS,this.ptStops);
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.USING_PT_STOPS,"tRue");
  ippcm.addParam(MatrixBasedPtRouterConfigGroup.PT_TRAVEL_TIMES_AND_DISTANCES_SWITCH,this.useTravelTimesAndDistances);
  ChangeModeConfigGroup changeModeConfig=ConfigUtils.addOrGetModule(config,ChangeModeConfigGroup.CONFIG_MODULE,ChangeModeConfigGroup.class);
  String[] str={"car","pt"};
  changeModeConfig.setModes(str);
  return writeConfigFile(config);
}

public RecordedRequest takeRequest() throws InterruptedException {
  return requestQueue.take();
}

private int convertLocationToColumn(int x,int y){
  if (cellWidth > 0) {
    if (layoutOrientation == JList.VERTICAL) {
      return 0;
    }
    Insets insets=list.getInsets();
    int col;
    if (isLeftToRight) {
      col=(x - insets.left) / cellWidth;
    }
 else {
      col=(list.getWidth() - x - insets.right- 1) / cellWidth;
    }
    if (col < 0) {
      return 0;
    }
 else     if (col >= columnCount) {
      return columnCount - 1;
    }
    return col;
  }
  return 0;
}

public static List<File> findFilesInDir(File directory,FilenameFilter filter){
  Vector<File> files=new Vector<File>();
  File[] entries=directory.listFiles();
  for (  File entry : entries) {
    if (filter == null || filter.accept(directory,entry.getName())) {
      files.add(entry);
    }
    if (entry.isDirectory()) {
      files.addAll(findFilesInDir(entry,filter));
    }
  }
  return files;
}

public String generateDrop(String table){
  StringBuffer result=new StringBuffer();
  result.append("DROP TABLE ");
  result.append(table);
  result.append(";\n");
  return result.toString();
}

private void registerChildListeners(){
  Iterator<PropertyChangeListener> iter=fChildListeners.iterator();
  while (iter.hasNext()) {
    PropertyChangeListener listener=iter.next();
    listener.register();
  }
}

boolean isScrollOutOfBounds(){
  return Float.compare(getScrollAmountOutOfBounds(mStackScrollP),0f) != 0;
}

private void refreshIndexForDimensionFields(String rowId,DimensionRow dimensionRow,DimensionRow dimensionRowOld){
  try {
    for (    DimensionField field : dimension.getDimensionFields()) {
      if (field == dimension.getKey()) {
        continue;
      }
      if (dimensionRowOld != null) {
        String oldRowValue=dimensionRowOld.get(field);
        String oldRowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),oldRowValue);
        String oldRowValuesKeysJson=keyValueStore.get(oldRowValueKey);
        String[] oldRowValueSKeys=objectMapper.readValue(oldRowValuesKeysJson,String[].class);
        Set<String> oldRowValuesKeySet=new LinkedHashSet<>(Arrays.asList(oldRowValueSKeys));
        oldRowValuesKeySet.remove(rowId);
        if (oldRowValuesKeySet.isEmpty()) {
          keyValueStore.remove(oldRowValueKey);
        }
 else {
          String updatedOldRowValueSKeys=objectMapper.writeValueAsString(oldRowValuesKeySet);
          keyValueStore.put(oldRowValueKey,updatedOldRowValueSKeys);
        }
      }
      String rowValue=dimensionRow.get(field);
      String rowValueKey=DimensionStoreKeyUtils.getRowKey(field.getName(),rowValue);
      String rowValueSKeys=keyValueStore.get(rowValueKey);
      Set<String> rowValueSKeySet=new LinkedHashSet<>();
      if (rowValueSKeys != null) {
        rowValueSKeySet.addAll(Arrays.asList(objectMapper.readValue(rowValueSKeys,String[].class)));
      }
      rowValueSKeySet.add(rowId);
      String updatedRowValueSKeys=objectMapper.writeValueAsString(rowValueSKeySet);
      keyValueStore.put(rowValueKey,updatedRowValueSKeys);
    }
  }
 catch (  IOException e) {
    LOG.error("Exception while adding dimension description entry in key value store : {}",e);
    throw new RuntimeException(e);
  }
}

public List<Instruction> reduceInstructions(final List<Instruction> instructions){
  lock.lock();
  try {
    this.instructions=instructions;
    stackSizeSimulator.buildStackSizes(instructions);
    return reduceInstructionsInternal(instructions);
  }
  finally {
    lock.unlock();
  }
}

protected boolean isLockedLocally(UUID newOwnerID){
  return thisNode.equals(getOwnerNode()) || thisNode.equals(newOwnerID);
}

private boolean tryToMove(float deltaY){
  if ((deltaY > 0 && mCurrentPos == 0)) {
    if (DEBUG) {
      Log.d(LOG_TAG,String.format("has reached the bottom"));
    }
    return false;
  }
  if ((deltaY < 0 && mCurrentPos == -mHeaderHeight)) {
    if (DEBUG) {
      Log.d(LOG_TAG,String.format("has reached the top"));
    }
    return false;
  }
  int to=mCurrentPos + (int)deltaY;
  if (to < -mHeaderHeight) {
    if (DEBUG) {
      Log.d(LOG_TAG,String.format("over top"));
    }
    to=-mHeaderHeight;
  }
  if (to > 0) {
    if (DEBUG) {
      Log.d(LOG_TAG,String.format("over bottom"));
    }
    to=0;
  }
  return moveTo(to);
}

public void testCompareNegNeg2(){
  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};
  int aSign=-1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  assertEquals(1,aNumber.compareTo(bNumber));
}

public void deletePoint(int position){
  int renderType=poly.getRenderType();
  Projection proj=getProjection();
  boolean needToHookUp=false;
  if (position <= 0 && isEnclosed()) {
    enclose(false);
    needToHookUp=true;
  }
  if (renderType == OMGraphic.RENDERTYPE_LATLON) {
    Debug.message("eomg","EditableOMPoly: removing point from lat/lon poly");
    if (proj != null) {
      double[] ll=poly.getLatLonArray();
      double[] newll=new double[ll.length - 2];
      int actualPosition=(position == Integer.MAX_VALUE ? ll.length : position * 2);
      if (actualPosition >= ll.length) {
        System.arraycopy(ll,0,newll,0,ll.length - 2);
        position=(ll.length - 2) / 2;
      }
 else       if (actualPosition <= 0) {
        System.arraycopy(ll,2,newll,0,ll.length - 2);
        position=0;
      }
 else {
        System.arraycopy(ll,0,newll,0,actualPosition);
        System.arraycopy(ll,actualPosition + 2,newll,actualPosition,ll.length - actualPosition - 2);
      }
      poly.setLocation(newll,poly.getUnits());
    }
  }
 else {
    Debug.message("eomg","EditableOMPoly: removing point from x/y or offset poly");
    int currentLength=poly.xs.length;
    int[] newxs=new int[currentLength - 1];
    int[] newys=new int[currentLength - 1];
    if (position >= currentLength) {
      System.arraycopy(poly.xs,0,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,0,newys,0,currentLength - 1);
      position=currentLength - 1;
    }
 else     if (position <= 0) {
      System.arraycopy(poly.xs,1,newxs,0,currentLength - 1);
      System.arraycopy(poly.ys,1,newys,0,currentLength - 1);
      position=0;
    }
 else {
      System.arraycopy(poly.xs,0,newxs,0,position);
      System.arraycopy(poly.xs,position + 1,newxs,position,currentLength - position - 1);
      System.arraycopy(poly.ys,0,newys,0,position);
      System.arraycopy(poly.ys,position + 1,newys,position,currentLength - position - 1);
    }
    if (poly.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {
      poly.setLocation(poly.lat,poly.lon,poly.getUnits(),newxs,newys);
    }
 else {
      poly.setLocation(newxs,newys);
    }
  }
  if (proj != null) {
    poly.regenerate(proj);
  }
  GrabPoint gp=(GrabPoint)polyGrabPoints.remove(position);
  if (gpo != null && gp != null) {
    gpo.removeGrabPoint(gp);
  }
  if (needToHookUp) {
    enclose(true);
  }
}

@Override public boolean deleteLeftWord(){
  mInputConnection.beginBatchEdit();
  if (mInputConnection.getSelectedText(0) != null) {
    mInputConnection.commitText("",0);
  }
 else {
    CharSequence beforeCursor=mInputConnection.getTextBeforeCursor(MAX_DELETABLE_CONTEXT,0);
    if (beforeCursor != null) {
      int beforeCursorLength=beforeCursor.length();
      Matcher m=WHITESPACE_AND_TOKEN.matcher(beforeCursor);
      int lastIndex=0;
      while (m.find()) {
        lastIndex=beforeCursorLength == m.end() ? m.start() : m.end();
      }
      if (lastIndex > 0) {
        mInputConnection.deleteSurroundingText(beforeCursorLength - lastIndex,0);
      }
 else       if (beforeCursorLength < MAX_DELETABLE_CONTEXT) {
        mInputConnection.deleteSurroundingText(beforeCursorLength,0);
      }
    }
  }
  mInputConnection.endBatchEdit();
  return true;
}

public static double cdf(double val,double rate){
  if (val < 0.) {
    return 0.;
  }
  return 1 - Math.exp(-rate * val);
}

public static DataSet readContinuous(File file,char delimiter) throws IOException {
  return readInContinuousData(file,delimiter,Collections.singleton("MULT"));
}

public static String generateNativeGuidForStoragePortFromIndication(String sourceInstanceSystemName,String portNetworkId){
  String[] splitedString=sourceInstanceSystemName.split(Constants.PATH_DELIMITER_REGEX);
  return String.format("%s+%s+PORT+%s",splitedString[0],splitedString[1],portNetworkId);
}

protected boolean arePathsContiguous(TreePath[] paths){
  if (rowMapper == null || paths.length < 2)   return true;
 else {
    BitSet bitSet=new BitSet(32);
    int anIndex, counter, min;
    int pathCount=paths.length;
    int validCount=0;
    TreePath[] tempPath=new TreePath[1];
    tempPath[0]=paths[0];
    min=rowMapper.getRowsForPaths(tempPath)[0];
    for (counter=0; counter < pathCount; counter++) {
      if (paths[counter] != null) {
        tempPath[0]=paths[counter];
        int[] rows=rowMapper.getRowsForPaths(tempPath);
        if (rows == null) {
          return false;
        }
        anIndex=rows[0];
        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;
        if (anIndex < min)         min=anIndex;
        if (!bitSet.get(anIndex)) {
          bitSet.set(anIndex);
          validCount++;
        }
      }
    }
    int maxCounter=validCount + min;
    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;
  }
  return true;
}

public FastStringReader(String s){
  this.str=s;
  this.length=s.length();
}

private static int arrayIndex(int i){
  return (i >> SHIFT_PER_WORD);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

static void updateStyle(JTextComponent c,SeaGlassContext context,String prefix){
  SeaGlassStyle style=(SeaGlassStyle)context.getStyle();
  Color color=c.getCaretColor();
  if (color == null || color instanceof UIResource) {
    c.setCaretColor((Color)style.get(context,prefix + ".caretForeground"));
  }
  Color fg=c.getForeground();
  if (fg == null || fg instanceof UIResource) {
    fg=style.getColorForState(context,ColorType.TEXT_FOREGROUND);
    if (fg != null) {
      c.setForeground(fg);
    }
  }
  Object ar=style.get(context,prefix + ".caretAspectRatio");
  if (ar instanceof Number) {
    c.putClientProperty("caretAspectRatio",ar);
  }
  context.setComponentState(SELECTED | FOCUSED);
  Color s=c.getSelectionColor();
  if (s == null || s instanceof UIResource) {
    c.setSelectionColor(style.getColor(context,ColorType.TEXT_BACKGROUND));
  }
  Color sfg=c.getSelectedTextColor();
  if (sfg == null || sfg instanceof UIResource) {
    c.setSelectedTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  context.setComponentState(DISABLED);
  Color dfg=c.getDisabledTextColor();
  if (dfg == null || dfg instanceof UIResource) {
    c.setDisabledTextColor(style.getColor(context,ColorType.TEXT_FOREGROUND));
  }
  Insets margin=c.getMargin();
  if (margin == null || margin instanceof UIResource) {
    margin=(Insets)style.get(context,prefix + ".margin");
    if (margin == null) {
      margin=SeaGlassLookAndFeel.EMPTY_UIRESOURCE_INSETS;
    }
    c.setMargin(margin);
  }
  Caret caret=c.getCaret();
  if (caret instanceof UIResource) {
    Object o=style.get(context,prefix + ".caretBlinkRate");
    if (o != null && o instanceof Integer) {
      Integer rate=(Integer)o;
      caret.setBlinkRate(rate.intValue());
    }
  }
}

@SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthMode=MeasureSpec.getMode(widthMeasureSpec);
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);
  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);
  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;
  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;
  int paddingLeft=getPaddingLeft();
  int paddingTop=getPaddingTop();
  int paddingRight=getPaddingRight();
  int paddingBottom=getPaddingBottom();
  int maxRightBound=maxWidth - paddingRight;
  int maxBottomBound=maxHeight - paddingBottom;
  int left;
  int top;
  int right;
  int bottom;
  int rightBound=paddingLeft;
  int maxRightNoPadding=rightBound;
  int bottomBound;
  int lastMaxBottom=paddingTop;
  int maxBottom=lastMaxBottom;
  int childWidth;
  int childHeight;
  int lineStartIndex=0;
  int lineEndIndex=0;
  rectList.clear();
  int childCount=getChildCount();
  for (int index=0; index < childCount; index++) {
    final View child=getChildAt(index);
    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);
    if (child.getVisibility() == View.GONE)     continue;
    final AutoWrapLayout.LayoutParams lp=(AutoWrapLayout.LayoutParams)child.getLayoutParams();
    childWidth=child.getMeasuredWidth();
    childHeight=child.getMeasuredHeight();
    left=rightBound + lp.leftMargin;
    right=left + childWidth;
    rightBound=right + lp.rightMargin;
    if (rightBound > maxRightBound) {
      lineEndIndex=index;
      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);
      if (maxBottom >= maxBottomBound)       break;
      if (lineEndIndex == lineStartIndex) {
        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);
        childWidth=child.getMeasuredWidth();
        childHeight=child.getMeasuredHeight();
      }
      left=paddingLeft + lp.leftMargin;
      right=left + childWidth;
      rightBound=right + lp.rightMargin;
      lastMaxBottom=maxBottom;
      top=lastMaxBottom + lp.topMargin;
      bottom=top + childHeight;
      bottomBound=bottom + lp.bottomMargin;
      lineStartIndex=index;
    }
 else {
      top=lastMaxBottom + lp.topMargin;
      bottom=top + childHeight;
      bottomBound=bottom + lp.bottomMargin;
    }
    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;
    if (bottomBound > maxBottom)     maxBottom=bottomBound;
    Rect rect=new Rect();
    rect.left=left;
    rect.top=top;
    rect.right=right;
    rect.bottom=bottom;
    rectList.add(rect);
  }
  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());
  int measuredWidth;
  int measuredHeight;
  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth;
 else   measuredWidth=maxRightNoPadding + paddingRight;
  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight;
 else {
    measuredHeight=maxBottom + paddingBottom;
    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;
  }
  setMeasuredDimension(measuredWidth,measuredHeight);
}

public final void wait() throws java.lang.InterruptedException {
  wait(0);
}

public QueryStringQueryBuilder field(String field,float boost){
  if (fields == null) {
    fields=new ArrayList<>();
  }
  fields.add(field);
  if (fieldsBoosts == null) {
    fieldsBoosts=new ObjectFloatHashMap<>();
  }
  fieldsBoosts.put(field,boost);
  return this;
}

public static String nowDateString(String format){
  SimpleDateFormat df=new SimpleDateFormat(format);
  return df.format(new Date());
}

protected void initStreamBufferSize(){
  String streamBufferSizeParam=getInitParameter("streamBufferSize");
  setStreamBufferSize((streamBufferSizeParam == null) ? DEFAULT_STREAM_BUFFER_SIZE : Integer.parseInt(streamBufferSizeParam));
  if (isDebug()) {
    log("streamBufferSize: " + getStreamBufferSize());
  }
}

public void registerSensor(Sensor s,int i){
  if ((i < 0) || (i > ((numInputCards() * bitsPerCard) - 1)) || (i > MAXSENSORS)) {
    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(i + 1));
    return;
  }
  hasActiveSensors=true;
  if (sensorArray[i] == null) {
    sensorArray[i]=s;
    if (lastUsedSensor < i) {
      lastUsedSensor=i;
    }
  }
 else {
    log.warn("multiple registration of same sensor: CS" + Integer.toString((getNodeAddress() * SerialSensorManager.SENSORSPERUA) + i + 1));
  }
}

public static Number asNumber(String value,Supplier<Number> defaultValueProvider){
  if (value != null) {
    try {
      return Short.valueOf(value);
    }
 catch (    NumberFormatException e1) {
      try {
        return Integer.valueOf(value);
      }
 catch (      NumberFormatException e2) {
        try {
          return Long.valueOf(value);
        }
 catch (        NumberFormatException e3) {
          try {
            return Float.valueOf(value);
          }
 catch (          NumberFormatException e4) {
            try {
              return Double.valueOf(value);
            }
 catch (            NumberFormatException e5) {
              try {
                return new BigInteger(value);
              }
 catch (              NumberFormatException e6) {
                try {
                  return new BigDecimal(value);
                }
 catch (                NumberFormatException e7) {
                }
              }
            }
          }
        }
      }
    }
  }
  return defaultValueProvider != null ? defaultValueProvider.get() : null;
}

public final void sample(){
  long sum=_sum.getAndSet(0);
  int count=_count.getAndSet(0);
  if (count != 0)   _value=sum / (double)count;
 else   _value=0;
}

private String applyReplacement(final BidiMap replacement,String contents){
  for (  Object key : replacement.keySet()) {
    String attributeName=(String)key;
    String attributeInitials=(String)replacement.get(key);
    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));
  }
  return contents;
}

public KeyImpl(KerberosPrincipal principal,char[] password,String algorithm){
  try {
    PrincipalName princ=new PrincipalName(principal.getName());
    EncryptionKey key=new EncryptionKey(password,princ.getSalt(),algorithm);
    this.keyBytes=key.getBytes();
    this.keyType=key.getEType();
  }
 catch (  KrbException e) {
    throw new IllegalArgumentException(e.getMessage());
  }
}

public static AnnotationBinding[] addStandardAnnotations(AnnotationBinding[] recordedAnnotations,long annotationTagBits,LookupEnvironment env){
  int count=0;
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   count++;
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   count++;
  if (count == 0)   return recordedAnnotations;
  int index=recordedAnnotations.length;
  AnnotationBinding[] result=new AnnotationBinding[index + count];
  System.arraycopy(recordedAnnotations,0,result,0,index);
  if ((annotationTagBits & TagBits.AnnotationTargetMASK) != 0)   result[index++]=buildTargetAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationRetentionMASK) != 0)   result[index++]=buildRetentionAnnotation(annotationTagBits,env);
  if ((annotationTagBits & TagBits.AnnotationDeprecated) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_DEPRECATED,env);
  if ((annotationTagBits & TagBits.AnnotationDocumented) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_DOCUMENTED,env);
  if ((annotationTagBits & TagBits.AnnotationInherited) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_ANNOTATION_INHERITED,env);
  if ((annotationTagBits & TagBits.AnnotationOverride) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_OVERRIDE,env);
  if ((annotationTagBits & TagBits.AnnotationSuppressWarnings) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SUPPRESSWARNINGS,env);
  if ((annotationTagBits & TagBits.AnnotationPolymorphicSignature) != 0)   result[index++]=buildMarkerAnnotationForMemberType(TypeConstants.JAVA_LANG_INVOKE_METHODHANDLE_$_POLYMORPHICSIGNATURE,env);
  if ((annotationTagBits & TagBits.AnnotationSafeVarargs) != 0)   result[index++]=buildMarkerAnnotation(TypeConstants.JAVA_LANG_SAFEVARARGS,env);
  return result;
}

@Override public String toString(){
  String result="RandomSplitResultProducer: ";
  result+=getCompatibilityState();
  if (m_Instances == null) {
    result+=": <null Instances>";
  }
 else {
    result+=": " + Utils.backQuoteChars(m_Instances.relationName());
  }
  return result;
}

public static void process(List<Packages> pkgList) throws Exception {
  init();
  String[] temps=templates.split(",");
  String[] vmFiles=new String[temps.length];
  for (int i=0; i < temps.length; i++) {
    vmFiles[i]=temps[i] + ".vm";
  }
  for (  Packages pkg : pkgList) {
    for (    String vmFile : vmFiles) {
      generator(vmFile,pkg);
    }
  }
}

public boolean check(final Direction dir,final boolean facing){
  if (this.dir != dir) {
    return false;
  }
  if (this.facing != facing) {
    return false;
  }
  final long now=System.currentTimeMillis();
  if (now >= expiration) {
    return false;
  }
  expiration=now + DELAY;
  return true;
}

private void parse(String path) throws Exception {
  if (path != null) {
    count=path.length();
    data=new char[count];
    path.getChars(0,count,data,0);
  }
  path();
}

public void recordVariable(String typeDesc,String varName,int varNo,SymbolTable tbl) throws CompileError {
  char c;
  int dim=0;
  while ((c=typeDesc.charAt(dim)) == '[')   ++dim;
  int type=MemberResolver.descToType(c);
  String cname=null;
  if (type == CLASS) {
    if (dim == 0)     cname=typeDesc.substring(1,typeDesc.length() - 1);
 else     cname=typeDesc.substring(dim + 1,typeDesc.length() - 1);
  }
  Declarator decl=new Declarator(type,cname,dim,varNo,new Symbol(varName));
  tbl.append(varName,decl);
}

protected synchronized void readDontVerify() throws IOException, FileEncryptionException {
  if (backingRandomAccessFile.length() < headerSize()) {
    throw new FileEncryptionException("Invalid file header");
  }
  long oldpos=backingRandomAccessFile.getFilePointer();
  backingRandomAccessFile.seek(0);
  byte[] header_data=new byte[headerSize() - FileHeader.AUTH_TAG_SIZE];
  backingRandomAccessFile.read(header_data);
  backingRandomAccessFile.seek(oldpos);
  DataInputStream istream=new DataInputStream(new ByteArrayInputStream(header_data));
  byte[] tmpmagic=new byte[PANBOX_FILE_MAGIC.length];
  istream.read(tmpmagic);
  if (!Arrays.equals(tmpmagic,PANBOX_FILE_MAGIC)) {
    throw new FileEncryptionException("Invalid magic number in file header");
  }
  byte[] tmpversion=new byte[PANBOX_FILE_VERSION.length];
  istream.read(tmpversion);
  if (!Arrays.equals(tmpversion,PANBOX_FILE_VERSION)) {
    throw new FileEncryptionException("Invalid version in file header. Expected version is " + PANBOX_FILE_VERSION.toString());
  }
  this.shareKeyVersion=istream.readInt();
  istream.close();
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

private boolean isMediaTypeSupported(String media){
  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {
    if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {
      return true;
    }
  }
  return false;
}

private void export_dependencies(JCas jcas){
  dependencies=new LinkedHashMap<Token,List<Dependency>>();
  List<Token> nonGoverned=new ArrayList<Token>(nodes.keySet());
  for (  Dependency dependency : select(jcas,Dependency.class)) {
    Token governor=dependency.getGovernor();
    Token dependent=dependency.getDependent();
    List<Dependency> l=dependencies.get(governor);
    if (l == null) {
      dependencies.put(governor,new ArrayList<Dependency>());
      l=dependencies.get(governor);
    }
    l.add(dependency);
    nonGoverned.remove(dependent);
  }
  for (  Token t : nonGoverned) {
    traverseDependents(t,"",-1);
    writeToFile("component",componentId,"p","dep","dep");
    componentId++;
  }
}

public static char[] fix83600(char[] signature){
  if (signature == null || signature.length < 2)   return signature;
  return Signature.removeCapture(signature);
}

public static boolean isNetworkAvailable(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo info=connectivityManager.getActiveNetworkInfo();
  return info != null && info.isConnected();
}

public static String randomRegexpishString(Random r){
  return randomRegexpishString(r,20);
}

public List<ExpectedPartitionValueEntity> createExpectedPartitionValueEntities(String partitionKeyGroupName,List<String> expectedPartitionValues){
  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDao.getPartitionKeyGroupByName(partitionKeyGroupName);
  if (partitionKeyGroupEntity == null) {
    partitionKeyGroupEntity=partitionKeyGroupDaoTestHelper.createPartitionKeyGroupEntity(partitionKeyGroupName);
  }
  List<ExpectedPartitionValueEntity> expectedPartitionValueEntities=new ArrayList<>();
  for (  String expectedPartitionValue : expectedPartitionValues) {
    ExpectedPartitionValueEntity expectedPartitionValueEntity=new ExpectedPartitionValueEntity();
    expectedPartitionValueEntity.setPartitionKeyGroup(partitionKeyGroupEntity);
    expectedPartitionValueEntity.setPartitionValue(expectedPartitionValue);
    expectedPartitionValueEntities.add(expectedPartitionValueDao.saveAndRefresh(expectedPartitionValueEntity));
  }
  return expectedPartitionValueEntities;
}

public String toString(){
  return text();
}

public static LowMemoryWatcher register(@NotNull Runnable runnable){
  return new LowMemoryWatcher(runnable);
}

public void writeData(DataOutput dout) throws IOException {
  dout.write(getMessage());
}

public Object extractHardRef(Object o){
  SoftReference w=(SoftReference)o;
  if (w != null) {
    return w.get();
  }
  return null;
}

public static String formatLong(long number){
  return intFormat.format(number);
}

public static void uncontribute(ComponentAddon component){
  contributedComponents.remove(component);
  if (currentAddon != null) {
    component.uninitialize(currentAddon);
  }
}

public synchronized int copyDirect(int pageId,OutputStream out) throws IOException {
  byte[] buffer=new byte[pageSize];
  if (pageId >= pageCount) {
    return -1;
  }
  file.seek((long)pageId << pageSizeShift);
  file.readFullyDirect(buffer,0,pageSize);
  readCount++;
  out.write(buffer,0,pageSize);
  return pageId + 1;
}

public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {
  if (limit - position >= length) {
    System.arraycopy(value,offset,buffer,position,length);
    position+=length;
  }
 else {
    throw new OutOfSpaceException(position,limit);
  }
}

private void assertBackupStatus(final BackupStatus backupStatus){
  Map<DistributedMember,Set<PersistentID>> backupMap=backupStatus.getBackedUpDiskStores();
  assertFalse(backupMap.isEmpty());
  for (  DistributedMember member : backupMap.keySet()) {
    for (    PersistentID id : backupMap.get(member)) {
      assertNotNull(id.getHost());
      assertNotNull(id.getUUID());
      assertNotNull(id.getDirectory());
    }
  }
}

@RequestMapping(value="/SAML2/Metadata/{tenant:.*}") public void metadataError(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletResponse response) throws IOException {
  logger.info("Metadata binding error! The client locale is {}, tenant is {}",locale.toString(),tenant);
  metadataDefaultTenantBindingError(locale,response);
}

public synchronized void checkState(State... requiredStates) throws IllegalStateException {
  for (  State requiredState : requiredStates) {
    if (requiredState.equals(currentState)) {
      return;
    }
  }
  throw new IllegalStateException(String.format(Locale.US,"Expected states %s, but in state %s",Lists.newArrayList(requiredStates),currentState));
}

public void sortMovies(){
synchronized (movies) {
    Utils.sortList(movies,MOVIE_SET_COMPARATOR);
    movieIds.clear();
    for (    Movie movie : movies) {
      movieIds.add(movie.getDbId());
    }
  }
  firePropertyChange("movies",null,movies);
}

public KeyValueListParser(String pairDelimiterRegex,String keyValDelimiterRegex){
  pairDelimiter=Pattern.compile(pairDelimiterRegex);
  keyValDelimiter=Pattern.compile(keyValDelimiterRegex);
}

private synchronized boolean pollStatsBroker(Destination queue){
  statsMessageListener.setDestination(queue);
  Timestamp timestamp=new Timestamp(System.currentTimeMillis());
  LOGGER.debug("Setting the destination to " + getQueueName(queue) + " at "+ timestamp);
  jmsTemplate.execute(STATS_BROKER_DESTINATION + getQueueName(queue),new ProducerCallbackImpl(statsQueue));
  try {
    Thread.sleep(3 * 1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return statsMessageListener.getStats() != null;
}

public File makeAcceptable(File pathname){
  if (accept(pathname)) {
    return pathname;
  }
 else {
    return new File(pathname.getPath() + '.' + defaultExtension);
  }
}

private static int handleDpadVertical(int iconIndex,int cntX,int cntY,int[][] matrix,int increment){
  int newIconIndex=NOOP;
  if (matrix == null) {
    throw new IllegalStateException("Dpad navigation requires a matrix.");
  }
  int xPos=-1;
  int yPos=-1;
  for (int i=0; i < cntX; i++) {
    for (int j=0; j < cntY; j++) {
      if (matrix[i][j] == iconIndex) {
        xPos=i;
        yPos=j;
      }
    }
  }
  if (DEBUG) {
    Log.v(TAG,String.format("\thandleDpadVertical: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIndex));
  }
  for (int y=yPos + increment; 0 <= y && y < cntY && 0 <= y; y+=increment) {
    if ((newIconIndex=inspectMatrix(xPos,y,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) {
      return newIconIndex;
    }
  }
  int nextXPos1;
  int nextXPos2;
  boolean haveCrossedAllAppsColumn1=false;
  boolean haveCrossedAllAppsColumn2=false;
  int y=-1;
  for (int coeff=1; coeff < cntX; coeff++) {
    nextXPos1=xPos + coeff * increment;
    nextXPos2=xPos - coeff * increment;
    y=yPos + increment * coeff;
    if (inspectMatrix(nextXPos1,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {
      haveCrossedAllAppsColumn1=true;
    }
    if (inspectMatrix(nextXPos2,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {
      haveCrossedAllAppsColumn2=true;
    }
    for (; 0 <= y && y < cntY; y=y + increment) {
      int offset1=haveCrossedAllAppsColumn1 && y < cntY - 1 ? increment : 0;
      newIconIndex=inspectMatrix(nextXPos1 + offset1,y,cntX,cntY,matrix);
      if (newIconIndex != NOOP) {
        return newIconIndex;
      }
      int offset2=haveCrossedAllAppsColumn2 && y < cntY - 1 ? -increment : 0;
      newIconIndex=inspectMatrix(nextXPos2 + offset2,y,cntX,cntY,matrix);
      if (newIconIndex != NOOP) {
        return newIconIndex;
      }
    }
  }
  return newIconIndex;
}

private static boolean edgeIntersectsCellBoundary(S2Point a,S2Point b,S2Cell cell){
  S2Point[] vertices=new S2Point[4];
  for (int i=0; i < 4; ++i) {
    vertices[i]=cell.getVertex(i);
  }
  for (int i=0; i < 4; ++i) {
    S2Point fromPoint=vertices[i];
    S2Point toPoint=vertices[(i + 1) % 4];
    if (lenientCrossing(a,b,fromPoint,toPoint)) {
      return true;
    }
  }
  return false;
}

private void generateLegalTimesTree(){
  int k0=KeyEvent.KEYCODE_0;
  int k1=KeyEvent.KEYCODE_1;
  int k2=KeyEvent.KEYCODE_2;
  int k3=KeyEvent.KEYCODE_3;
  int k4=KeyEvent.KEYCODE_4;
  int k5=KeyEvent.KEYCODE_5;
  int k6=KeyEvent.KEYCODE_6;
  int k7=KeyEvent.KEYCODE_7;
  int k8=KeyEvent.KEYCODE_8;
  int k9=KeyEvent.KEYCODE_9;
  mLegalTimesTree=new Node();
  if (mIs24HourMode) {
    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);
    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    minuteFirstDigit.addChild(minuteSecondDigit);
    Node firstDigit=new Node(k0,k1);
    mLegalTimesTree.addChild(firstDigit);
    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    Node thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    secondDigit=new Node(k6,k7,k8,k9);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    firstDigit=new Node(k2);
    mLegalTimesTree.addChild(firstDigit);
    secondDigit=new Node(k0,k1,k2,k3);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    secondDigit=new Node(k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteSecondDigit);
    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(minuteFirstDigit);
  }
 else {
    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));
    Node firstDigit=new Node(k1);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    Node secondDigit=new Node(k0,k1,k2);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(ampm);
    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    thirdDigit.addChild(fourthDigit);
    fourthDigit.addChild(ampm);
    thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    secondDigit=new Node(k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
  }
}

protected void updateOverlayContents(LookAt lookAt,Camera camera){
  latView.setText(formatLatitude(lookAt.latitude));
  lonView.setText(formatLongitude(lookAt.longitude));
  altView.setText(formatAltitude(camera.altitude));
}

public String jsTypeName(TypeRef typeRef){
switch (typeRef.getKind()) {
case TYPE_MESSAGE:
    return "Object";
case TYPE_ENUM:
  return "number";
default :
{
  String name=PRIMITIVE_TYPE_NAMES.get(typeRef.getKind());
  if (!Strings.isNullOrEmpty(name)) {
    return name;
  }
  throw new IllegalArgumentException("unknown type kind: " + typeRef.getKind());
}
}
}

@Override public synchronized void put(String key,Entry entry){
  pruneIfNeeded(entry.data.length);
  File file=getFileForKey(key);
  try {
    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));
    CacheHeader e=new CacheHeader(key,entry);
    boolean success=e.writeHeader(fos);
    if (!success) {
      fos.close();
      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());
      throw new IOException();
    }
    fos.write(entry.data);
    fos.close();
    putEntry(key,e);
    return;
  }
 catch (  IOException e) {
  }
  boolean deleted=file.delete();
  if (!deleted) {
    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());
  }
}

public StateMachine createStateMachine(StateMachineDefinition stateMachineDefinition){
  final Map<EventDefinition,EventData> eventDataMap=stateMachineDefinition.getEventDataMap();
  Set<Event> allEvents=createAllEvents(eventDataMap);
  Set<StateDefinition> stateDefinitions=stateMachineDefinition.getStates();
  Set<State> states=new HashSet<>();
  for (  StateDefinition stateDefinition : stateDefinitions) {
    State state=convertStateDefinitionToState(stateDefinition);
    states.add(state);
  }
  StateMachine stateMachine=new StateMachine(stateMachineDefinition.getVersion(),stateMachineDefinition.getName(),stateMachineDefinition.getDescription(),states,stateMachineDefinition.getCorrelationId());
  stateMachinesDAO.create(stateMachine);
  for (  Event event : allEvents) {
    event.setStateMachineInstanceId(stateMachine.getId());
    eventPersistenceService.persistEvent(event);
  }
  for (  State state : stateMachine.getStates()) {
    auditDAO.create(new AuditRecord(stateMachine.getId(),state.getId(),0L,Status.initialized,null,null));
  }
  return stateMachine;
}

protected void sqrtLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double splo=MathLib.safeSqrt(m_prevlo);
  double spspan=MathLib.safeSqrt(m_prevhi) - splo;
  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));
  double slo=MathLib.safeSqrt(m_lo);
  double sspan=MathLib.safeSqrt(m_hi) - slo;
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);
      if (f <= 0 || f >= 1.0) {
        item.setStartVisible(true);
      }
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}

public void dispose(){
  clearListeners();
  if (attributes != null) {
    attributes.clear();
  }
  removed(null);
}

private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  registrarID=new ServiceID(in);
  if (server == null) {
    throw new InvalidObjectException("null server");
  }
}

public Shape triangle_right(float x,float y,float height){
  m_path.reset();
  m_path.moveTo(x,y + height);
  m_path.lineTo(x + height,y + height / 2);
  m_path.lineTo(x,y);
  m_path.closePath();
  return m_path;
}

public static terminal find(String with_name){
  if (with_name == null)   return null;
 else   return (terminal)_all.get(with_name);
}

public LayoutBlock createNewLayoutBlock(String systemName,String userName){
  LayoutBlock block=null;
  if (userName == null || userName.equals("")) {
    log.error("Attempt to create a LayoutBlock with no user name");
    return null;
  }
  block=getByUserName(userName);
  if (block != null) {
    return null;
  }
  String sName="";
  if (systemName == null) {
    boolean found=true;
    while (found) {
      sName="ILB" + blkNum;
      blkNum++;
      block=getBySystemName(sName);
      if (block == null) {
        found=false;
      }
    }
  }
 else {
    block=getBySystemName((systemName.toUpperCase()));
    if (block != null) {
      return null;
    }
    sName=systemName.toUpperCase();
  }
  block=new LayoutBlock(sName,userName);
  register(block);
  return block;
}

@Override public void modifyNonstaticJPedalParameters(final Map values) throws PdfException {
  options.set(values);
  if (values.containsKey(JPedalSettings.DISPLAY_BACKGROUND)) {
  }
}

public static String escapeRegex(final String regex){
  Matcher match=REGEX_CHARS.matcher(regex);
  return match.replaceAll("\\\\$1");
}

public CharBuffer(String string){
  int length=string.length();
  int capacity=length + MIN_CAPACITY;
  init(new char[capacity],0,length);
  string.getChars(0,length,buffer(),0);
}

private void updatePromoVisibility(float percentage){
  if (isPromoAvailable()) {
    mPromoVisible=true;
    mPromoHeightPx=Math.round(MathUtils.clamp(percentage * mPromoContentHeightPx,0.f,mPromoContentHeightPx));
    mPromoOpacity=percentage;
  }
 else {
    mPromoVisible=false;
    mPromoHeightPx=0.f;
    mPromoOpacity=0.f;
  }
}

private ValueGeometry(byte[] bytes,Geometry geometry){
  this.bytes=bytes;
  this.geometry=geometry;
  this.hashCode=Arrays.hashCode(bytes);
}

@Override public void do_after_propagation(){
  for (  HeapInsIntervalManager im : new_pts.values()) {
    im.flush();
  }
  new_pts=new HashMap<AllocNode,HeapInsIntervalManager>();
}

static boolean isExist(String libName,int version){
  String file=_targetSoFile(libName,version);
  File a=new File(file);
  return a.exists();
}

private void finishCommon(){
  if (!unknownSubjects.isEmpty()) {
    if (statements.isEmpty() && restoredStatements.isEmpty()) {
      throw new BadSubjectException(unknownSubjects.keySet(),uris);
    }
 else {
      log.info("Unrecognized subjects: {}.  Expected only sitelinks and subjects starting with {} and {}",unknownSubjects.keySet(),uris.entityData(),uris.entity());
    }
  }
  if (revisionId == null) {
    throw new ContainedException("Didn't get a revision id for " + statements);
  }
  if (lastModified == null) {
    throw new ContainedException("Didn't get a last modified date for " + statements);
  }
  for (  Pair<URI,Literal> dataStatement : dataStatements) {
    statements.add(new StatementImpl(entityUriImpl,dataStatement.getLeft(),dataStatement.getRight()));
  }
  statements.addAll(restoredStatements);
}

public static final void showGUIMessage(final String user_message,final BufferedImage image,final String title){
  if (image == null) {
    return;
  }
  final ImagePanel display=new ImagePanel(image);
  display.setLayout(new BorderLayout());
  if (user_message != null) {
    display.add(new JLabel(user_message),BorderLayout.SOUTH);
  }
  final int width=image.getWidth();
  final int height=image.getHeight();
  display.setSize(new Dimension(width + 10,height + 10));
  JOptionPane.showConfirmDialog(contentPane,display,title,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE);
}

private void dynInit(){
}

@Override public Path call() throws Exception {
  final Set<FileVisitOption> options;
  if (followLinks) {
    options=EnumSet.of(FileVisitOption.FOLLOW_LINKS);
  }
 else {
    options=EnumSet.noneOf(FileVisitOption.class);
  }
  logger.info(String.format("Starting scan of: \"%s\".",path));
  try {
    Files.walkFileTree(path,options,maxDepth,this);
  }
 catch (  IOException e) {
    logger.log(Level.SEVERE,String.format("Error while scanning path: \"%s\".",path),e);
    throw e;
  }
  logger.info(String.format("Completed scan of: \"%s\".",path));
  return path;
}

private void baselineLayout(int origin,int size){
  int ascent;
  int descent;
  if (baselineAnchoredToTop) {
    ascent=prefAscent;
    descent=size - ascent;
  }
 else {
    ascent=size - prefDescent;
    descent=prefDescent;
  }
  for (  Spring spring : springs) {
    Alignment alignment=spring.getAlignment();
    if (alignment == null || alignment == Alignment.BASELINE) {
      int baseline=spring.getBaseline();
      if (baseline >= 0) {
        int springMax=spring.getMaximumSize(VERTICAL);
        int springPref=spring.getPreferredSize(VERTICAL);
        int height=springPref;
        int y;
switch (spring.getBaselineResizeBehavior()) {
case CONSTANT_ASCENT:
          y=origin + ascent - baseline;
        height=Math.min(descent,springMax - baseline) + baseline;
      break;
case CONSTANT_DESCENT:
    height=Math.min(ascent,springMax - springPref + baseline) + (springPref - baseline);
  y=origin + ascent + (springPref - baseline) - height;
break;
default :
y=origin + ascent - baseline;
break;
}
spring.setSize(VERTICAL,y,height);
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
 else {
setChildSize(spring,VERTICAL,origin,size);
}
}
}

public static int readInt(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getInt(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  int value=0;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getInt(index);
  }
  return value;
}

public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

private void unregisterDependent(Preference dependent){
  if (mDependents != null) {
    mDependents.remove(dependent);
  }
}

private void validateStoragePolicySelection(StoragePolicySelection storagePolicySelection){
  Assert.notNull(storagePolicySelection,"A storage policy selection must be specified.");
  businessObjectDataHelper.validateBusinessObjectDataKey(storagePolicySelection.getBusinessObjectDataKey(),true,true);
  storagePolicyHelper.validateStoragePolicyKey(storagePolicySelection.getStoragePolicyKey());
  Assert.notNull(storagePolicySelection.getStoragePolicyVersion(),"A storage policy version must be specified.");
}

@Override public String toString(){
  StringBuffer text=new StringBuffer();
  if (m_cobwebTree == null) {
    return "Cobweb hasn't been built yet!";
  }
 else {
    m_cobwebTree.dumpTree(0,text);
    return "Number of merges: " + m_numberMerges + "\nNumber of splits: "+ m_numberSplits+ "\nNumber of clusters: "+ numberOfClusters()+ "\n"+ text.toString()+ "\n\n";
  }
}

public static Object toArray(Collection<?> collection,Class<?> componentType){
  if (componentType.isPrimitive()) {
    Object array=Array.newInstance(componentType,collection.size());
    int index=0;
    for (    Object value : collection) {
      Array.set(array,index++,value);
    }
    return array;
  }
  return collection.toArray((Object[])Array.newInstance(componentType,collection.size()));
}

GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {
  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));
}

public void labelDistances(Hypergraph<V,E> graph,V root){
  labelDistances(graph,Collections.singleton(root));
}

public static java.lang.String toString(float d){
  float m=Math.abs(d);
  if (d == POSITIVE_INFINITY) {
    return "Infinity";
  }
 else   if (d == NEGATIVE_INFINITY) {
    return "-Infinity";
  }
 else   if (d == 0) {
    return "0.0";
  }
 else   if (m >= 1e-3 && m < 1e7) {
    String str=toStringImpl(d,false);
    char[] chars=str.toCharArray();
    int i=chars.length - 1;
    char c;
    while (i >= 0 && (c=chars[i]) == '0') {
      i--;
    }
    if (i < 0 || str.indexOf('.') == -1) {
      return str;
    }
 else     if (chars[i] == '.' || chars[i] == ',') {
      i++;
    }
    return str.substring(0,i + 1);
  }
 else {
    return toStringImpl(d,true);
  }
}

public int position(){
  return lineBuffer == null ? 0 : lineBuffer.length();
}

public BatchedImageRequest(Request<?> request,ImageContainer container){
  mRequest=request;
  mContainers.add(container);
}

public void addFrequency(Frequency frequency){
  frequencies.add(frequency);
}

public final static HeaderElement parseHeaderElement(final String value,HeaderValueParser parser) throws ParseException {
  if (value == null) {
    throw new IllegalArgumentException("Value to parse may not be null");
  }
  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;
  CharArrayBuffer buffer=new CharArrayBuffer(value.length());
  buffer.append(value);
  SaveParserCursor cursor=new SaveParserCursor(0,value.length());
  return parser.parseHeaderElement(buffer,cursor);
}

public static List<Interval> sliceIntervals(Interval interval,TimeGrain timeGrain){
  DateTime intervalEnd=interval.getEnd();
  DateTime sliceStart=interval.getStart();
  DateTime periodStart=timeGrain.roundFloor(sliceStart);
  if (!sliceStart.equals(periodStart)) {
    LOG.info("Interval {} is not aligned to TimeGrain {} starting {}",interval,timeGrain,periodStart);
    throw new IllegalArgumentException("Interval must be aligned to the TimeGrain starting " + periodStart);
  }
  List<Interval> intervalSlices=new ArrayList<>();
  while (sliceStart.isBefore(intervalEnd)) {
    DateTime sliceEnd=DateTimeUtils.addTimeGrain(sliceStart,timeGrain);
    Interval slicedInterval=new Interval(sliceStart,sliceEnd);
    if (!interval.contains(slicedInterval)) {
      LOG.info("Interval {} is not a multiple of TimeGrain {}",interval,timeGrain);
      throw new IllegalArgumentException("Interval must be a multiple of the TimeGrain");
    }
    intervalSlices.add(slicedInterval);
    sliceStart=sliceEnd;
  }
  LOG.debug("Sliced interval {} into {} slices of {} grain",interval,intervalSlices.size(),timeGrain);
  return intervalSlices;
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

public void testHasAttributes1() throws Throwable {
  Document doc;
  NodeList addrList;
  Node addrNode;
  boolean state;
  doc=(Document)load("staff",builder);
  addrList=doc.getElementsByTagName("name");
  addrNode=addrList.item(0);
  state=addrNode.hasAttributes();
  assertFalse("throw_False",state);
}

public boolean isGerund(){
  return typeString.startsWith(VERB_GERUND);
}

protected void error(String msg,Exception e) throws org.xml.sax.SAXException {
  SAXSourceLocator locator=getLocator();
  ErrorListener handler=m_stylesheetProcessor.getErrorListener();
  TransformerException pe;
  if (!(e instanceof TransformerException)) {
    pe=(null == e) ? new TransformerException(msg,locator) : new TransformerException(msg,locator,e);
  }
 else   pe=(TransformerException)e;
  if (null != handler) {
    try {
      handler.error(pe);
    }
 catch (    TransformerException te) {
      throw new org.xml.sax.SAXException(te);
    }
  }
 else   throw new org.xml.sax.SAXException(pe);
}

private JsonObject createRequest(Map<String,Object> headers,String uri,HttpMethod method,JsonObject payload){
  JsonObject request=new JsonObject();
  JsonArray jsonHeaders=new JsonArray();
  headers.forEach(null);
  request.put("headers",jsonHeaders);
  request.put("uri",uri);
  request.put("method",method.toString());
  request.put("payload",payload);
  return request;
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("acronym");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
{
    boolean success=false;
    try {
      child.replaceData(-5,3,"ABC");
    }
 catch (    DOMException ex) {
      success=(ex.code == DOMException.INDEX_SIZE_ERR);
    }
    assertTrue("throws_INDEX_SIZE_ERR",success);
  }
}

private long downloadTlogFiles(File tmpTlogDir,long latestGeneration) throws Exception {
  LOG.info("Starting download of tlog files from master: " + tlogFilesToDownload);
  tlogFilesDownloaded=Collections.synchronizedList(new ArrayList<>());
  long bytesDownloaded=0;
  boolean status=tmpTlogDir.mkdirs();
  if (!status) {
    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,"Failed to create temporary tlog folder: " + tmpTlogDir.getName());
  }
  for (  Map<String,Object> file : tlogFilesToDownload) {
    String saveAs=(String)(file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));
    localFileFetcher=new LocalFsFileFetcher(tmpTlogDir,file,saveAs,TLOG_FILE,latestGeneration);
    currentFile=file;
    localFileFetcher.fetchFile();
    bytesDownloaded+=localFileFetcher.getBytesDownloaded();
    tlogFilesDownloaded.add(new HashMap<>(file));
  }
  return bytesDownloaded;
}

static WindowsFileAttributes readAttributes(long handle) throws WindowsException {
  NativeBuffer buffer=NativeBuffers.getNativeBuffer(SIZEOF_FILE_INFORMATION);
  try {
    long address=buffer.address();
    GetFileInformationByHandle(handle,address);
    int reparseTag=0;
    int fileAttrs=unsafe.getInt(address + OFFSETOF_FILE_INFORMATION_ATTRIBUTES);
    if (isReparsePoint(fileAttrs)) {
      int size=MAXIMUM_REPARSE_DATA_BUFFER_SIZE;
      NativeBuffer reparseBuffer=NativeBuffers.getNativeBuffer(size);
      try {
        DeviceIoControlGetReparsePoint(handle,reparseBuffer.address(),size);
        reparseTag=(int)unsafe.getLong(reparseBuffer.address());
      }
  finally {
        reparseBuffer.release();
      }
    }
    return fromFileInformation(address,reparseTag);
  }
  finally {
    buffer.release();
  }
}

protected void addAllForReplay(Collection<Participant> participants){
  Iterator<Participant> it=participants.iterator();
  while (it.hasNext()) {
    Participant p=it.next();
    replayCompletion(p);
  }
}

public static JPanel createCheckbox(String boxlabel,String[] buttons,boolean[] checked,ActionListener al){
  JPanel jp=createPaletteJPanel(boxlabel);
  for (int j=0; j < buttons.length; j++) {
    JCheckBox jcb=new JCheckBox(buttons[j]);
    jcb.setActionCommand(Integer.toString(j));
    if (al != null)     jcb.addActionListener(al);
    jcb.setSelected(checked[j]);
    jp.add(jcb);
  }
  return jp;
}

public static void copy(DimensionsEvent aeDest,DimensionsEvent aeSrc){
  GPOMutable destAggs=aeDest.getAggregates();
  GPOMutable srcAggs=aeSrc.getAggregates();
  if (srcAggs.getFieldsBoolean() != null) {
    System.arraycopy(srcAggs.getFieldsBoolean(),0,destAggs.getFieldsBoolean(),0,srcAggs.getFieldsBoolean().length);
  }
  if (srcAggs.getFieldsCharacter() != null) {
    System.arraycopy(srcAggs.getFieldsCharacter(),0,destAggs.getFieldsCharacter(),0,srcAggs.getFieldsCharacter().length);
  }
  if (srcAggs.getFieldsString() != null) {
    System.arraycopy(srcAggs.getFieldsString(),0,destAggs.getFieldsString(),0,srcAggs.getFieldsString().length);
  }
  if (srcAggs.getFieldsShort() != null) {
    System.arraycopy(srcAggs.getFieldsShort(),0,destAggs.getFieldsShort(),0,srcAggs.getFieldsShort().length);
  }
  if (srcAggs.getFieldsInteger() != null) {
    System.arraycopy(srcAggs.getFieldsInteger(),0,destAggs.getFieldsInteger(),0,srcAggs.getFieldsInteger().length);
  }
  if (srcAggs.getFieldsLong() != null) {
    System.arraycopy(srcAggs.getFieldsLong(),0,destAggs.getFieldsLong(),0,srcAggs.getFieldsLong().length);
  }
  if (srcAggs.getFieldsFloat() != null) {
    System.arraycopy(srcAggs.getFieldsFloat(),0,destAggs.getFieldsFloat(),0,srcAggs.getFieldsFloat().length);
  }
  if (srcAggs.getFieldsDouble() != null) {
    System.arraycopy(srcAggs.getFieldsDouble(),0,destAggs.getFieldsDouble(),0,srcAggs.getFieldsDouble().length);
  }
}

public static double assignProbabilitiesToInstances(Relation<? extends NumberVector> relation,List<? extends EMClusterModel<?>> models,WritableDataStore<double[]> probClusterIGivenX){
  final int k=models.size();
  double emSum=0.;
  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {
    NumberVector vec=relation.get(iditer);
    double[] probabilities=new double[k];
{
      int i=0;
      for (      EMClusterModel<?> m : models) {
        probabilities[i]=m.estimateDensity(vec);
        ++i;
      }
    }
    double priorProbability=0.;
    for (int i=0; i < k; i++) {
      priorProbability+=probabilities[i];
    }
    double logP=Math.max(Math.log(priorProbability),MIN_LOGLIKELIHOOD);
    emSum+=(logP == logP) ? logP : 0.;
    double[] clusterProbabilities=new double[k];
    if (priorProbability > 0.) {
      for (int i=0; i < k; i++) {
        clusterProbabilities[i]=probabilities[i] / priorProbability;
      }
    }
    probClusterIGivenX.put(iditer,clusterProbabilities);
  }
  return emSum / relation.size();
}

public static String separatorsToUnix(String path){
  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {
    return path;
  }
  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);
}

public static String asString(URI value){
  return value != null ? value.toString() : null;
}

public Kernel(int offset,double[] values){
  this.values=Arrays.copyOf(values,values.length);
  this.offset=offset;
}

private void initializeWorkList(){
  for (  GVCongruenceClass c : B) {
    if (c.size() == 1) {
      continue;
    }
    Iterator<ValueGraphVertex> i=c.iterator();
    ValueGraphVertex first=i.next();
    while (i.hasNext()) {
      ValueGraphVertex v=i.next();
      if (!checkCongruence(first,v)) {
        workList.push(c);
        break;
      }
    }
  }
}

@Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){
  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());
  if (adapter != null)   adapter.clear();
  UnionMemberScope.clearCachedComposedMembers(model);
}

protected abstract void addFile(String relativeFilename) throws CommandException ;

public void treeExpanded(TreeExpansionEvent event){
  inspectorWindow.updateView(Director.ALL);
}

public void convertInfixToPostfix(String infixExp) throws Exception {
  m_originalInfix=infixExp;
  infixExp=Utils.removeSubstring(infixExp," ");
  infixExp=Utils.replaceSubstring(infixExp,"log","l");
  infixExp=Utils.replaceSubstring(infixExp,"abs","b");
  infixExp=Utils.replaceSubstring(infixExp,"cos","c");
  infixExp=Utils.replaceSubstring(infixExp,"exp","e");
  infixExp=Utils.replaceSubstring(infixExp,"sqrt","s");
  infixExp=Utils.replaceSubstring(infixExp,"floor","f");
  infixExp=Utils.replaceSubstring(infixExp,"ceil","h");
  infixExp=Utils.replaceSubstring(infixExp,"rint","r");
  infixExp=Utils.replaceSubstring(infixExp,"tan","t");
  infixExp=Utils.replaceSubstring(infixExp,"sin","n");
  StringTokenizer tokenizer=new StringTokenizer(infixExp,OPERATORS,true);
  m_postFixExpVector=new Vector<ExpressionComponent>();
  while (tokenizer.hasMoreTokens()) {
    String tok=tokenizer.nextToken();
    if (tok.length() > 1) {
      handleOperand(tok);
    }
 else {
      if (isOperator(tok.charAt(0))) {
        handleOperator(tok);
      }
 else {
        handleOperand(tok);
      }
    }
    m_previousTok=tok;
  }
  while (!m_operatorStack.empty()) {
    String popop=(String)(m_operatorStack.pop());
    if (popop.charAt(0) == '(' || popop.charAt(0) == ')') {
      throw new Exception("Mis-matched parenthesis!");
    }
    m_postFixExpVector.addElement(new Operator(popop.charAt(0)));
  }
}

public boolean hasItem(T object){
synchronized (mLock) {
    return source.contains(object);
  }
}

private static boolean versionMatches(Integer v1,int v2){
  if (v1 == null || v1 == 0 || v2 == 0) {
    return true;
  }
  return v1.equals(v2);
}

protected void onFailedClosingUrlConnection(URLConnection urlConnection,IOException cause){
}

private void onSchemaComplexType(Element schemaComplexType,DatatypeElementFactory elementFactory){
  Iterator<Element> iter=schemaComplexType.elementIterator(XSD_ATTRIBUTE);
  while (iter.hasNext()) {
    Element xsdAttribute=iter.next();
    String name=xsdAttribute.attributeValue("name");
    QName qname=getQName(name);
    XSDatatype dataType=dataTypeForXsdAttribute(xsdAttribute);
    if (dataType != null) {
      elementFactory.setAttributeXSDatatype(qname,dataType);
    }
  }
  Element schemaSequence=schemaComplexType.element(XSD_SEQUENCE);
  if (schemaSequence != null) {
    onChildElements(schemaSequence,elementFactory);
  }
  Element schemaChoice=schemaComplexType.element(XSD_CHOICE);
  if (schemaChoice != null) {
    onChildElements(schemaChoice,elementFactory);
  }
  Element schemaAll=schemaComplexType.element(XSD_ALL);
  if (schemaAll != null) {
    onChildElements(schemaAll,elementFactory);
  }
}

private void pushAnnotatorsRef(String values){
  annotatorsRef.push(annotatorsRef.peek());
  setAnnotatorsRef(values);
}

public String versionCompact(){
  return properties.getProperty("version.compact");
}

private void sequenceQuery(QueryEntry entry,ServerSessionContext session,CompletableFuture<QueryResponse> future){
  if (entry.getSequence() > session.getCommandSequence()) {
    session.registerSequenceQuery(entry.getSequence(),null);
  }
 else {
    indexQuery(entry,future);
  }
}

private boolean expungeStaleEntries(){
  if (size == 0)   return false;
  Object r;
  boolean result=false;
  while ((r=queue.poll()) != null) {
    result=true;
    Entry e=(Entry)r;
    int h=e.hash;
    int i=indexFor(h,table.length);
    Entry prev=table[i];
    Entry p=prev;
    while (p != null) {
      Entry next=p.next;
      if (p == e) {
        if (prev == e)         table[i]=next;
 else         prev.next=next;
        e.next=null;
        size--;
        break;
      }
      prev=p;
      p=next;
    }
  }
  return result;
}

public static <T>List<T> rest(List<T> l){
  return l.subList(1,l.size());
}

public static List<Integer> createRanges(int... startEnds){
  assert startEnds.length % 2 == 0;
  ArrayList<Integer> ret=new ArrayList<Integer>();
  for (int si=0; si < startEnds.length; si++) {
    final int start=startEnds[si++];
    final int end=startEnds[si];
    assert end >= start;
    ret.ensureCapacity(ret.size() + ((end - start) + 1));
    for (int i=start; i <= end; i++) {
      ret.add(new Integer(i));
    }
  }
  return ret;
}

@After public void tearDown(){
  webClient.closeAllWindows();
}

public void findAndUndo(Object someObj){
  if (someObj instanceof com.bbn.openmap.MapBean) {
    logger.fine("ProjectionStack removing a MapBean.");
    MapBean map=getMapBean();
    if (map != null && map == (MapBean)someObj) {
      setMapBean(null);
    }
  }
}

public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){
  if (exist()) {
    getProductionRunRoutingTasks();
    if (quantity == null)     getQuantity();
    Timestamp endDate=null;
    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {
      GenericValue routingTask=iter.next();
      if (priority.compareTo(routingTask.getLong("priority")) <= 0) {
        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);
        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);
        routingTask.set("estimatedStartDate",startDate);
        routingTask.set("estimatedCompletionDate",endDate);
        startDate=endDate;
      }
    }
    return endDate;
  }
 else {
    return null;
  }
}

public void addDocumentType(DocumentType documentType){
  mDocumentTypes.add(documentType);
}

public boolean tableExists(DatabaseMetaData dbMetaData,String tableName) throws SQLException {
  return (tableExistsCaseSensitive(dbMetaData,tableName) || tableExistsCaseSensitive(dbMetaData,tableName.toUpperCase(Locale.US)) || tableExistsCaseSensitive(dbMetaData,tableName.toLowerCase(Locale.US)));
}

public void testHasAttributes1() throws Throwable {
  Document doc;
  Element element;
  NodeList elementList;
  boolean hasAttributes;
  doc=(Document)load("staff",builder);
  elementList=doc.getElementsByTagName("employee");
  element=(Element)elementList.item(0);
  hasAttributes=element.hasAttributes();
  assertFalse("nodehasattributes01_1",hasAttributes);
  elementList=doc.getElementsByTagName("address");
  element=(Element)elementList.item(0);
  hasAttributes=element.hasAttributes();
  assertTrue("nodehasattributes01_2",hasAttributes);
}

private static Position nextTokenPos(Position pos,Token[][] spec){
  if (pos == null) {
    return null;
  }
  int nextItem=pos.item + 1;
  if ((nextItem < spec[pos.line].length) && ((pos.line < pcalEnd.line) || (nextItem < pcalEnd.item))) {
    return new Position(pos.line,nextItem);
  }
  int nextLine=pos.line + 1;
  while ((nextLine < spec.length) && (spec[nextLine].length == 0)) {
    nextLine++;
  }
  if ((nextLine < spec.length) && ((nextLine < pcalEnd.line) || ((nextLine == pcalEnd.line) && (0 < pcalEnd.item)))) {
    return new Position(nextLine,0);
  }
  return null;
}

public void update(GL10 gl){
  if (taskQueue.size() > 0) {
    GLResorceTask res;
    while ((res=taskQueue.poll()) != null) {
      res.perform(gl);
    }
  }
}

public static double[] HPDInterval(double proportion,double[] x,int[] indices){
  double minRange=Double.MAX_VALUE;
  int hpdIndex=0;
  final int diff=(int)Math.round(proportion * (double)x.length);
  for (int i=0; i <= (x.length - diff); i++) {
    final double minValue=x[indices[i]];
    final double maxValue=x[indices[i + diff - 1]];
    final double range=Math.abs(maxValue - minValue);
    if (range < minRange) {
      minRange=range;
      hpdIndex=i;
    }
  }
  return new double[]{x[indices[hpdIndex]],x[indices[hpdIndex + diff - 1]]};
}

private void checkIfDirectoriesExist(File[] disk_dirs){
  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);
}

private static byte[] readClass(final InputStream is,boolean close) throws IOException {
  if (is == null) {
    throw new IOException("Class not found");
  }
  try {
    byte[] b=new byte[is.available()];
    int len=0;
    while (true) {
      int n=is.read(b,len,b.length - len);
      if (n == -1) {
        if (len < b.length) {
          byte[] c=new byte[len];
          System.arraycopy(b,0,c,0,len);
          b=c;
        }
        return b;
      }
      len+=n;
      if (len == b.length) {
        int last=is.read();
        if (last < 0) {
          return b;
        }
        byte[] c=new byte[b.length + 1000];
        System.arraycopy(b,0,c,0,len);
        c[len++]=(byte)last;
        b=c;
      }
    }
  }
  finally {
    if (close) {
      is.close();
    }
  }
}

public void addPortToAlreadyAllocatedContext(StoragePort port,StorageHADomain haDomain,StorageSystem.Type arrayType,String switchName){
  String engine=getEngine(port,haDomain,arrayType);
  if (engine != null) {
    _alreadyAllocatedEngines.add(engine);
  }
  String directorType=getDirectorType(arrayType,haDomain);
  if (directorType != null) {
    _alreadyAllocatedDirectorTypes.add(directorType);
  }
  String director=getDirector(port,haDomain);
  if (director != null) {
    _alreadyAllocatedDirectors.add(director);
  }
  String cpu=getCpu(port,haDomain,arrayType);
  if (cpu != null) {
    _alreadyAllocatedCpus.add(cpu);
  }
  if (switchName != null) {
    _alreadyAllocatedSwitches.add(switchName);
  }
}

@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){
  paint.setColor(renderer.getColor());
  paint.setStyle(Style.FILL);
  int length=points.size();
  XYValueSeries series=(XYValueSeries)mDataset.getSeriesAt(seriesIndex);
  double max=series.getMaxValue();
  double coef=MAX_BUBBLE_SIZE / max;
  for (int i=0; i < length; i+=2) {
    double size=series.getValue(startIndex + i / 2) * coef + MIN_BUBBLE_SIZE;
    drawCircle(canvas,paint,points.get(i),points.get(i + 1),(float)size);
  }
}

public String convert(){
  if (s == null) {
    try {
      ByteArrayInputStream bs=new ByteArrayInputStream(bytes);
      DataInputStream d=new DataInputStream(bs);
      String buf=d.readUTF();
      sHashCode=buf.hashCode();
      return buf;
    }
 catch (    IOException e) {
      return "!!IOException!!";
    }
  }
  return s;
}

public static void writeListOfLongs(List list,boolean hasLongIDs,DataOutput out) throws IOException {
  if (list == null) {
    out.writeInt(-1);
  }
 else {
    out.writeInt(list.size());
    out.writeBoolean(hasLongIDs);
    for (Iterator it=list.iterator(); it.hasNext(); ) {
      Long l=(Long)it.next();
      if (hasLongIDs) {
        out.writeLong(l.longValue());
      }
 else {
        out.writeInt((int)l.longValue());
      }
    }
  }
}

public boolean isDefined(Object attrName){
  return table.containsKey(attrName);
}

private void showPreloadingStage(){
  Stage preloadingStage=new Stage(StageStyle.UNDECORATED);
  preloadingStage.initOwner(primaryStage);
  preloadingStage.setScene(new PreloadingScene());
  preloadingStage.show();
  primaryStage.setOnShowing(null);
}

@Override public void clear(){
  if (elementCount > 0) {
    elementCount=0;
    Arrays.fill(elementData,null);
    modCount++;
    while (referenceQueue.poll() != null) {
    }
  }
}

public V remove(Object key){
  int hash=hash(key.hashCode());
  Segment<K,V> s=segmentForHash(hash);
  return s == null ? null : s.remove(key,hash,null);
}

public void test_copyStream_fullBlock() throws IOException {
  final String id="test";
  final int version=0;
  Random r=new Random();
  final byte[] expected=new byte[BLOCK_SIZE];
  r.nextBytes(expected);
  assertEquals("nbytes",expected.length,repo.copyStream(id,version,new ByteArrayInputStream(expected)));
  assertEquals("blockCount",1,repo.getBlockCount(id,version));
  assertSameIterator("block identifiers",new Long[]{0L},repo.blocks(id,version));
  assertEquals("data",expected,read(repo.inputStream(id,version)));
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String badString;
  doc=(Document)load("hc_staff",false);
  elementList=doc.getElementsByTagName("acronym");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
{
    boolean success=false;
    try {
      badString=child.substringData(-5,3);
    }
 catch (    DOMException ex) {
      success=(ex.code == DOMException.INDEX_SIZE_ERR);
    }
    assertTrue("throws_INDEX_SIZE_ERR",success);
  }
}

private static int ipToBytes(String ip,byte[] bytes,boolean mustHave4) throws IPMatcherException {
  String[] parts=ip.split("\\.");
  if (parts.length > 4 || mustHave4 && parts.length != 4) {
    throw new IPMatcherException("Malformed IP specification " + ip);
  }
  try {
    for (int i=0; i < parts.length; i++) {
      int p=Integer.parseInt(parts[i]);
      if (p < 0 || p > 255) {
        throw new IPMatcherException("Malformed IP specification " + ip);
      }
      bytes[i]=(byte)(p < 128 ? p : p - 256);
    }
  }
 catch (  NumberFormatException nfe) {
    throw new IPMatcherException("Malformed IP specification " + ip,nfe);
  }
  return parts.length;
}

public static void CF2(double[] x,double[] f,double[] c,int nx){
  int count1=0;
  int count2=0;
  double sum1=0.0;
  double sum2=0.0;
  double yj;
  double N=2.0;
  double a=1.0;
  double t;
  for (int j=2; j <= nx; j++) {
    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);
    if (j % 2 == 1) {
      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);
      sum1+=yj * yj;
      count1++;
    }
 else {
      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);
      sum2+=yj * yj;
      count2++;
    }
  }
  f[0]=x[0] + 2.0 * sum1 / (double)count1;
  f[1]=1.0 - Math.sqrt(x[0]) + 2.0 * sum2 / (double)count2;
  t=f[1] + Math.sqrt(f[0]) - a * Math.sin(N * PI * (Math.sqrt(f[0]) - f[1] + 1.0)) - 1.0;
  c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t)));
}

protected void reply(RequestContext context,String key,String message){
  try {
    HttpServletRequest request=context.getRequest();
    String filename=request.getRemoteAddr();
    end(filename,key,message);
  }
 catch (  Exception e) {
  }
}

protected void addHeaders(HttpURLConnection connection,String tenantId){
  if (tenantId == null) {
    tenantId=PropertyUtil.getProperty(PropertyUtil.HAWKULAR_TENANT);
  }
  if (tenantId != null) {
    connection.setRequestProperty(HAWKULAR_TENANT,tenantId);
  }
  if (authorization == null && username != null) {
    String authString=username + ":" + password;
    String encoded=encoder.encodeToString(authString.getBytes());
    authorization="Basic " + encoded;
  }
  if (authorization != null) {
    connection.setRequestProperty("Authorization",authorization);
  }
}

public void addLongSelectionListener(SelectionListener listener){
  if (listener == null)   throw new IllegalArgumentException();
  if (hexEditControl == null) {
    if (listOfLongListeners == null)     listOfLongListeners=new ArrayList<>();
    listOfLongListeners.add(listener);
  }
 else {
    hexEditControl.addLongSelectionListener(listener);
  }
}

public void println() throws IOException {
  out.write(strategy.getPrinterNewline());
  newLine=true;
}

@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append("{");
  boolean firstTime=true;
  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {
    if (firstTime) {
      firstTime=false;
    }
 else {
      sb.append(",");
    }
    sb.append(entry.getKey());
    sb.append(":\"");
    sb.append(entry.getValue());
    sb.append("\"");
    return mCapabilities.toString();
  }
  return sb.toString();
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

public Debug(String clientID,ClientComms comms){
  this.clientID=clientID;
  this.comms=comms;
  log.setResourceName(clientID);
}

protected String alterCase(String value){
switch (getCase()) {
case UPPERCASE:
    return value.toUpperCase();
case LOWERCASE:
  return value.toLowerCase();
default :
return value;
}
}

private boolean isAckRequired(){
  return this.ackRequired;
}

@Override public synchronized String toString(){
  if (elementCount == 0) {
    return "[]";
  }
  int length=elementCount - 1;
  StringBuffer buffer=new StringBuffer(elementCount * 16);
  buffer.append('[');
  for (int i=0; i < length; i++) {
    if (elementData[i] == this) {
      buffer.append("(this Collection)");
    }
 else {
      buffer.append(elementData[i]);
    }
    buffer.append(", ");
  }
  if (elementData[length] == this) {
    buffer.append("(this Collection)");
  }
 else {
    buffer.append(elementData[length]);
  }
  buffer.append(']');
  return buffer.toString();
}

void addReporter(String textReporter,int xx,int yy){
  ReporterIcon l=new ReporterIcon(this);
  l.setReporter(textReporter);
  l.setLocation(xx,yy);
  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);
  l.setDisplayLevel(LABELS);
  setDirty(true);
  putItem(l);
}

private void drawSelectionRectangle(Graphics2D g2){
  if (this.selectionRectangle != null) {
    if (this.fillSelectionRectangle) {
      g2.setPaint(this.selectionFillPaint);
      g2.fill(selectionRectangle);
    }
 else {
      g2.setPaint(this.selectionOutlinePaint);
      g2.draw(selectionRectangle);
    }
  }
}

private int measureShort(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

public ConversionException(final Throwable cause){
  super(cause.getMessage());
  this.cause=cause;
}

private boolean hasConnectivityToAllSystems(Initiator initiator,Collection<URI> storageSystems,ExportGroup exportGroup){
  return hasConnectivityToAllSystems(initiator,storageSystems,null,exportGroup);
}

@Override public boolean onTouchEvent(MotionEvent event){
  if (!isEnabled())   return false;
  int pointerIndex;
  final int action=event.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mActivePointerId=event.getPointerId(event.getPointerCount() - 1);
  pointerIndex=event.findPointerIndex(mActivePointerId);
mDownMotionX=event.getX(pointerIndex);
pressedThumb=evalPressedThumb(mDownMotionX);
if (pressedThumb == null) return super.onTouchEvent(event);
setPressed(true);
invalidate();
onStartTrackingTouch();
trackTouchEvent(event);
attemptClaimDrag();
break;
case MotionEvent.ACTION_MOVE:
if (pressedThumb != null) {
if (mIsDragging) {
trackTouchEvent(event);
}
 else {
pointerIndex=event.findPointerIndex(mActivePointerId);
final float x=event.getX(pointerIndex);
if (Math.abs(x - mDownMotionX) > mScaledTouchSlop) {
setPressed(true);
invalidate();
onStartTrackingTouch();
trackTouchEvent(event);
attemptClaimDrag();
}
}
if (notifyWhileDragging && listener != null) {
listener.onRangeSeekBarValuesChanged(this,getSelectedMinValue(),getSelectedMaxValue());
}
}
break;
case MotionEvent.ACTION_UP:
if (mIsDragging) {
trackTouchEvent(event);
onStopTrackingTouch();
setPressed(false);
}
 else {
onStartTrackingTouch();
trackTouchEvent(event);
onStopTrackingTouch();
}
pressedThumb=null;
invalidate();
if (listener != null) {
listener.onRangeSeekBarValuesChanged(this,getSelectedMinValue(),getSelectedMaxValue());
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
{
final int index=event.getPointerCount() - 1;
mDownMotionX=event.getX(index);
mActivePointerId=event.getPointerId(index);
invalidate();
break;
}
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(event);
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
if (mIsDragging) {
onStopTrackingTouch();
setPressed(false);
}
invalidate();
break;
}
return true;
}

private Derivation<TK,FV> constructDerivation(Derivation<TK,FV> markedNode,int sourceInputId,FeatureExtractor<TK,FV> featurizer,Scorer<FV> scorer,SearchHeuristic<TK,FV> heuristic,OutputSpace<TK,FV> outputSpace){
  final List<Derivation<TK,FV>> nodes=new LinkedList<>();
  Derivation<TK,FV> p=markedNode;
  while (p != null) {
    nodes.add(0,p);
    p=p.parent;
  }
  p=markedNode.bestChild;
  while (p != null) {
    nodes.add(p);
    p=p.bestChild;
  }
  Derivation<TK,FV> goalHyp=null;
  for (  Derivation<TK,FV> node : nodes) {
    goalHyp=goalHyp == null ? node : new Derivation<>(sourceInputId,node.rule,goalHyp.length,goalHyp,featurizer,scorer,heuristic,outputSpace);
  }
  return goalHyp;
}

public void testPlusMathContextPositive(){
  String a="92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c="929487820944884782312124789.8748298842";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals("incorrect value",c,res.toString());
  assertEquals("incorrect scale",cScale,res.scale());
}

public void testRadix24Neg(){
  String value="-287628a88gmn3451b8ijk00865c67e8d7ff20";
  int radix=24;
  BigInteger aNumber=new BigInteger(value,radix);
  String result=aNumber.toString(radix);
  assertTrue(result.equals(value));
}

private static IAbstractNode convertOr(final CommonTree ast) throws RecognitionException {
  final List<IAbstractNode> children=new ArrayList<IAbstractNode>();
  for (  final Object childObject : ast.getChildren()) {
    children.add(convert((CommonTree)childObject));
  }
  return new CAbstractOrExpression(children);
}

public JDialog displayPanelInWindow(final JPanel panel,String title){
  JDialog frame=new GenericJDialog();
  frame.setContentPane(panel);
  frame.pack();
  frame.setTitle(title);
  frame.setVisible(true);
  return frame;
}

public JSONTokener(Reader reader){
  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);
  this.eof=false;
  this.usePrevious=false;
  this.previous=0;
  this.index=0;
  this.character=1;
  this.line=1;
}

public static void compress(){
  String s=BinaryStdIn.readString();
  char[] input=s.toCharArray();
  int[] freq=new int[R];
  for (int i=0; i < input.length; i++)   freq[input[i]]++;
  Node root=buildTrie(freq);
  String[] st=new String[R];
  buildCode(st,root,"");
  writeTrie(root);
  BinaryStdOut.write(input.length);
  for (int i=0; i < input.length; i++) {
    String code=st[input[i]];
    for (int j=0; j < code.length(); j++) {
      if (code.charAt(j) == '0') {
        BinaryStdOut.write(false);
      }
 else       if (code.charAt(j) == '1') {
        BinaryStdOut.write(true);
      }
 else       throw new IllegalStateException("Illegal state");
    }
  }
  BinaryStdOut.close();
}

public Builder withTokenizer(Class<? extends TokenizerFactory> factory,Map<String,String> params) throws IOException {
  Objects.requireNonNull(factory,"Tokenizer factory may not be null");
  tokenizer.set(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));
  componentsAdded=true;
  return this;
}

protected double computeAzimuthLabelOffset(double radius,double maxRadius){
  return Math.asin(AZIMUTH_LABEL_OFFSET * maxRadius / radius);
}

protected void addResource(List defaults,String bundleName){
  ResourceBundle bundle=ResourceBundle.getBundle(bundleName);
  for (Enumeration keys=bundle.getKeys(); keys.hasMoreElements(); ) {
    String key=(String)keys.nextElement();
    defaults.add(key);
    defaults.add(bundle.getObject(key));
  }
}

public void displayChanged(){
  executeDisplayChangedOnEDT(getGraphicsConfiguration());
}

@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Calendar dateTime=new GregorianCalendar(GMT);
  long localTime=value;
  if (tzShift != null) {
    localTime+=tzShift.longValue() * 60000;
  }
  dateTime.setTimeInMillis(localTime);
  try {
    appendInt(sb,dateTime.get(Calendar.YEAR),4);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.MONTH) + 1,2);
    sb.append('-');
    appendInt(sb,dateTime.get(Calendar.DAY_OF_MONTH),2);
    if (!dateOnly) {
      sb.append('T');
      appendInt(sb,dateTime.get(Calendar.HOUR_OF_DAY),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.MINUTE),2);
      sb.append(':');
      appendInt(sb,dateTime.get(Calendar.SECOND),2);
      if (dateTime.isSet(Calendar.MILLISECOND)) {
        sb.append('.');
        appendInt(sb,dateTime.get(Calendar.MILLISECOND),3);
      }
    }
    if (tzShift != null) {
      if (tzShift.intValue() == 0) {
        sb.append('Z');
      }
 else {
        int absTzShift=tzShift.intValue();
        if (tzShift > 0) {
          sb.append('+');
        }
 else {
          sb.append('-');
          absTzShift=-absTzShift;
        }
        int tzHours=absTzShift / 60;
        int tzMinutes=absTzShift % 60;
        appendInt(sb,tzHours,2);
        sb.append(':');
        appendInt(sb,tzMinutes,2);
      }
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new RuntimeException(e);
  }
  return sb.toString();
}

private static Stream<Method> extractMethods(Class clazz){
  try {
    Method[] methods=clazz.getMethods();
    if (methods.length > 0) {
      return Stream.of(methods);
    }
  }
 catch (  Exception|Error e) {
    LOG.warn("Problems loading class at startup: {}",clazz,e);
  }
  return Stream.empty();
}

@Override public void updateServerAddress(Application application,String dockerManagerIP,String serverPort,String serverManagerPort){
  String suffixCloudUnit=application.getSuffixCloudUnitIO();
  JedisPool pool=null;
  Jedis jedis=null;
  try {
    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);
    jedis=pool.getResource();
    String subNameSpace=concatSubNameSpace(application);
    String key=subNameSpace + suffixCloudUnit;
    String frontend="frontend:" + key.toLowerCase();
    jedis.lset(frontend,1,"http://" + dockerManagerIP + ":"+ serverPort);
    String frontendServerManager="frontend:manager-" + key.toLowerCase();
    jedis.lset(frontendServerManager,1,"http://" + dockerManagerIP + ":"+ serverManagerPort);
  }
 catch (  JedisConnectionException|UnsupportedEncodingException e) {
    logger.error("HipacheRedisUtils Exception",e);
  }
 finally {
    if (jedis != null) {
      pool.destroy();
    }
  }
}

protected void remove(int itemPosition){
  if (itemPosition >= 0 && itemPosition < getItemCount()) {
    list.remove(itemPosition);
  }
}

protected String chooseRandomEnemys(){
  final List<String> enemyList=new LinkedList<String>(enemyForces.keySet());
  final int enemySize=enemyList.size();
  final int position=Rand.rand(enemySize);
  return enemyList.get(position);
}

public boolean isRouteToDestValid(Block protecting,Block destination){
  if (protecting == destination) {
    log.debug("protecting and destination blocks are the same therefore we need to check if we have a valid neighbour");
    if (getAdjacency(protecting) != null) {
      return true;
    }
  }
 else   if (getValidRoute(protecting,destination) != null) {
    return true;
  }
  return false;
}

public void sortPools(List<StoragePool> storagePools){
  _portMetricsProcessor.computeStoragePoolsAvgPortMetrics(storagePools);
  Collections.sort(storagePools,_storagePoolComparator);
}

public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){
  mOverlays.addAll(overlays);
  if (mCurrentOverlayIndex == NO_OVERLAY) {
    selectOverlay(0);
  }
  return this;
}

public static Resource forPath(final String path) throws UnknownResourceException {
  Resource resource;
  if (path.startsWith(ClasspathResource.PREFIX + ":")) {
    resource=new ClasspathResource(path);
  }
 else   if (path.startsWith(FileResource.PREFIX + ":")) {
    resource=new FileResource(path);
  }
 else {
    resource=forPath(FileResource.PREFIX + ":" + path);
  }
  return resource;
}

private static boolean isOlderThanLeopard(){
  String version=System.getProperty("os.version");
  StringTokenizer tk=new StringTokenizer(version,".");
  int major=Integer.parseInt(tk.nextToken());
  int minor=Integer.parseInt(tk.nextToken());
  return major == 10 && minor < 6;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>();
  newVector.addElement(new Option("\tNumber of trees to build.\n\t(default 100)","I",1,"-I <number of trees>"));
  newVector.addElement(new Option("\tNumber of features to consider (<1=int(log_2(#predictors)+1)).\n\t(default 0)","K",1,"-K <number of features>"));
  newVector.addElement(new Option("\tSeed for random number generator.\n" + "\t(default 1)","S",1,"-S"));
  newVector.addElement(new Option("\tThe maximum depth of the trees, 0 for unlimited.\n" + "\t(default 0)","depth",1,"-depth <num>"));
  newVector.addElement(new Option("\tDon't calculate the out of bag error.","O",0,"-O"));
  newVector.addElement(new Option("\tPrint the individual trees in the output","print",0,"-print"));
  newVector.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>"));
  newVector.addAll(Collections.list(super.listOptions()));
  return newVector.elements();
}

public static String xmlContentEscape(String s){
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
switch (c) {
case '&':
      sb.append("&amp;");
    break;
case '<':
  sb.append("&lt;");
break;
case '\000':
case '\001':
case '\002':
case '\003':
case '\004':
case '\005':
case '\006':
case '\007':
case '\010':
case '\013':
case '\014':
case '\016':
case '\017':
case '\020':
case '\021':
case '\022':
case '\023':
case '\024':
case '\025':
case '\026':
case '\027':
case '\030':
case '\031':
case '\032':
case '\033':
case '\034':
case '\035':
case '\036':
case '\037':
break;
default :
sb.append(c);
}
}
return sb.toString();
}

private void feedForward(Vec input,List<Vec> activations,List<Vec> derivatives){
  Vec x=input;
  for (int i=0; i < Ws.size(); i++) {
    Matrix W_i=Ws.get(i);
    Vec b_i=bs.get(i);
    Vec a_i=activations.get(i);
    a_i.zeroOut();
    W_i.multiply(x,1,a_i);
    a_i.mutableAdd(b_i);
    a_i.applyFunction(f);
    Vec d_i=derivatives.get(i);
    a_i.copyTo(d_i);
    d_i.applyFunction(f.getD());
    x=a_i;
  }
}

private File findFile(File directory,String name) throws FileNotFoundException {
  File file=new File(directory,name);
  if (file.exists()) {
    return file;
  }
  for (  String child : directory.list()) {
    if (child.equalsIgnoreCase(name)) {
      return new File(directory,child);
    }
  }
  throw new FileNotFoundException("Missing file: " + file);
}

public static boolean compareResults(SolrClient controlClient,SolrClient cloudClient) throws SolrServerException, IOException {
  return compareResults(controlClient,cloudClient,null,null);
}

public ArrayList<String> GetElementList(String xPathExpression){
  try {
    ArrayList<String> values=new ArrayList<String>();
    List<?> nodeList=XPath.selectNodes(this.xmlDocument,xPathExpression);
    Iterator<?> iter=nodeList.iterator();
    while (iter.hasNext()) {
      org.jdom.Element element=(org.jdom.Element)iter.next();
      values.add(element.getText());
    }
    return values;
  }
 catch (  Exception ex) {
    LOG.error("Error in handler: " + ex.getMessage(),ex);
    return null;
  }
}

public static CLContext createContextFromCurrentGL(){
  RuntimeException first=null;
  for (  CLPlatform platform : listPlatforms()) {
    try {
      CLContext ctx=platform.createContextFromCurrentGL();
      if (ctx != null)       return ctx;
    }
 catch (    RuntimeException ex) {
      if (first == null)       first=ex;
    }
  }
  throw new RuntimeException("Failed to create an OpenCL context based on the current OpenGL context",first);
}

public void collapseTree(){
  for (int i=1; i < tree.getRowCount(); ++i) {
    tree.collapseRow(i);
  }
}

static void queuePlayerCapeReplacement(AbstractClientPlayer player){
  final String displayName=player.getDisplayNameString();
  Logger.info("Queueing cape replacement for %s",displayName);
  THREAD_POOL.submit(null);
}

public void removeVetoableChangeListener(VetoableChangeListener listener){
  if (listener != null) {
synchronized (this) {
      if (vetoableSupport != null) {
        vetoableSupport.removeVetoableChangeListener(listener);
      }
    }
  }
}

public StreamThroughput(String statusMessagePrefix){
  m_instanceCount=0;
  m_sampleCount=0;
  m_numSamples=0;
  m_cumulativeTime=0;
  m_startTime=System.currentTimeMillis();
  m_statusMessagePrefix=statusMessagePrefix;
}

protected void parseCommand(final String... args){
  for (  String arg : args) {
    final Command command=Command.valueOfName(arg);
    if (command != null) {
      setCommand(command);
      break;
    }
  }
}

@RequestMapping(value="/{bookmarkId}",method=RequestMethod.PUT) public ResponseEntity<Bookmark> editBookmark(@PathVariable(value="username") String username,@PathVariable(value="bookmarkId") int bookmarkId,@RequestBody String json) throws IOException, BookmarkNotFoundException, IllegalAccessException, InvocationTargetException {
  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);
  if (optional.isPresent()) {
    ObjectMapper mapper=new ObjectMapper();
    Map<String,String> changeMap=mapper.readValue(json,HashMap.class);
    Bookmark bookmark=optional.get();
    BeanUtils.populate(bookmark,changeMap);
    bookmark=bookmarksRepository.save(bookmark);
    return new ResponseEntity<>(bookmark,HttpStatus.OK);
  }
 else {
    throw new BookmarkNotFoundException("Bookmark not found id = " + bookmarkId);
  }
}

private Rect calcBounds(int index,Paint paint){
  Rect bounds=new Rect();
  CharSequence title=getTitle(index);
  bounds.right=(int)paint.measureText(title,0,title.length());
  bounds.bottom=(int)(paint.descent() - paint.ascent());
  return bounds;
}

public static String convertFromUtf32(int[] text,int startPos,int endPos){
  StringBuilder sb=new StringBuilder();
  for (int i=startPos; i < endPos; i++) {
    sb.append(convertFromUtf32ToCharArray(text[i]));
  }
  return sb.toString();
}

public void createBounds(){
  if (isEmpty() || hasSingleElement()) {
    mBounds=null;
    return;
  }
  int l=Integer.MAX_VALUE;
  int t=Integer.MAX_VALUE;
  int r=0;
  int b=0;
  for (  Selection.Element selection : getElements()) {
    ConstraintWidget w=selection.widget;
    l=Math.min(w.getDrawX(),l);
    t=Math.min(w.getDrawY(),t);
    r=Math.max(w.getDrawRight(),r);
    b=Math.max(w.getDrawBottom(),b);
  }
  ConstraintWidget bounds=new ConstraintWidget(l,t,r - l,b - t);
  bounds.setCompanionWidget(WidgetCompanion.create(bounds));
  mBounds=new Element(bounds);
  updateOriginFromBounds();
}

protected static void recordPattern(BitArray row,int start,int[] counters) throws NotFoundException {
  int numCounters=counters.length;
  Arrays.fill(counters,0,numCounters,0);
  int end=row.getSize();
  if (start >= end) {
    throw NotFoundException.getNotFoundInstance();
  }
  boolean isWhite=!row.get(start);
  int counterPosition=0;
  int i=start;
  while (i < end) {
    if (row.get(i) ^ isWhite) {
      counters[counterPosition]++;
    }
 else {
      counterPosition++;
      if (counterPosition == numCounters) {
        break;
      }
 else {
        counters[counterPosition]=1;
        isWhite=!isWhite;
      }
    }
    i++;
  }
  if (!(counterPosition == numCounters || (counterPosition == numCounters - 1 && i == end))) {
    throw NotFoundException.getNotFoundInstance();
  }
}

public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){
  Object[] arguments=new Object[args.size()];
  for (int i=0; i < args.size(); i++) {
    arguments[i]=args.get(i);
  }
  return findMethodWithListParameters(service,methodName,arguments);
}

static int firstIllegalCharacter(String source){
  for (int i=0; i < source.length(); i++) {
    if (isLegal(source.charAt(i)) == false) {
      return i;
    }
  }
  return -1;
}

private CoderResult decodeByteBufferToCharacterBuffer(boolean endOfInput) throws DecodingException {
  buffer.flip();
  return decodeMoreBytesToCharacterBuffer(endOfInput);
}

protected void newFastClockMinute(){
  for (int i=delayedTrains.size() - 1; i >= 0; i--) {
    ActiveTrain at=delayedTrains.get(i);
    if ((!at.getStarted()) && at.getDelayedStart() != ActiveTrain.NODELAY) {
      if (at.getDelayedStart() == ActiveTrain.TIMEDDELAY) {
        if (isFastClockTimeGE(at.getDepartureTimeHr(),at.getDepartureTimeMin())) {
          at.setStarted();
          delayedTrains.remove(i);
          if (_AutoAllocate) {
            autoAllocate.scanAllocationRequestList(allocationRequests);
          }
        }
      }
    }
 else     if (at.getStarted() && at.getStatus() == ActiveTrain.READY && at.reachedRestartPoint()) {
      if (isFastClockTimeGE(at.getRestartDepartHr(),at.getRestartDepartMin())) {
        at.restart();
        delayedTrains.remove(i);
        if (_AutoAllocate) {
          autoAllocate.scanAllocationRequestList(allocationRequests);
        }
      }
    }
  }
}

public void add(final CreatureRespawnPoint point){
  respawnPoints.add(point);
}

private void loadOrgAccessRole(ArrayList<OrgAccess> list){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql="SELECT * FROM AD_Role_OrgAccess " + "WHERE AD_Role_ID=? AND IsActive='Y'";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_Role_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MRoleOrgAccess oa=new MRoleOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}

public void testBytesAsSource() throws Exception {
  String JSON="[ 1, 2, 3, 4 ]";
  byte[] b=JSON.getBytes("UTF-8");
  int offset=50;
  int len=b.length;
  byte[] src=new byte[offset + len + offset];
  System.arraycopy(b,0,src,offset,len);
  JsonFactory jf=new JsonFactory();
  JsonParser jp=jf.createJsonParser(src,offset,len);
  assertToken(JsonToken.START_ARRAY,jp.nextToken());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(1,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(2,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(3,jp.getIntValue());
  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());
  assertEquals(4,jp.getIntValue());
  assertToken(JsonToken.END_ARRAY,jp.nextToken());
  assertNull(jp.nextToken());
  jp.close();
}

public java.security.cert.Certificate engineGenerateCertificate(InputStream in) throws CertificateException {
  if (currentStream == null) {
    currentStream=in;
    sData=null;
    sDataObjectCount=0;
  }
 else   if (currentStream != in) {
    currentStream=in;
    sData=null;
    sDataObjectCount=0;
  }
  try {
    if (sData != null) {
      if (sDataObjectCount != sData.size()) {
        return getCertificate();
      }
 else {
        sData=null;
        sDataObjectCount=0;
        return null;
      }
    }
    PushbackInputStream pis=new PushbackInputStream(in);
    int tag=pis.read();
    if (tag == -1) {
      return null;
    }
    pis.unread(tag);
    if (tag != 0x30) {
      return readPEMCertificate(pis);
    }
 else {
      return readDERCertificate(new ASN1InputStream(pis));
    }
  }
 catch (  Exception e) {
    throw new ExCertificateException(e);
  }
}

public String toString(Object value){
  return toPrettyString(value);
}

@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){
  Calendar cal=getCalendar();
  dateTimeUnit.setDay(1);
  dateTimeUnit=cal.minusMonths(dateTimeUnit,11);
  List<Period> periods=Lists.newArrayList();
  for (int i=0; i < 12; i++) {
    periods.add(createPeriod(dateTimeUnit,cal));
    dateTimeUnit=cal.plusMonths(dateTimeUnit,1);
  }
  return periods;
}

@SuppressWarnings("unchecked") public synchronized T findCounter(Enum<?> counterKey) throws IllegalAccessException, InstantiationException {
  T counter=cache.get(counterKey);
  if (counter == null) {
    counter=counterType.newInstance();
    cache.put(counterKey,counter);
  }
  return counter;
}

public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(Sms.ADDRESS,address);
  if (date != null) {
    values.put(Sms.DATE,date);
  }
  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(Sms.SUBJECT,subject);
  values.put(Sms.BODY,body);
  if (deliveryReport) {
    values.put(Sms.STATUS,Sms.STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(Sms.THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("hc_staff",false);
  elementList=doc.getElementsByTagName("strong");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  childData=child.getData();
  assertEquals("characterdataGetDataAssert","Margaret Martin",childData);
}

protected void engineSetMode(String mode){
  if (!mode.equalsIgnoreCase("ECB")) {
    throw new IllegalArgumentException("can't support mode " + mode);
  }
}

private void computeDoublesForAllZoomLevels(){
  int numFrames=mSoundFile.getNumFrames();
  int[] frameGains=mSoundFile.getFrameGains();
  double[] smoothedGains=new double[numFrames];
  if (numFrames == 1) {
    smoothedGains[0]=frameGains[0];
  }
 else   if (numFrames == 2) {
    smoothedGains[0]=frameGains[0];
    smoothedGains[1]=frameGains[1];
  }
 else   if (numFrames > 2) {
    smoothedGains[0]=(double)((frameGains[0] / 2.0) + (frameGains[1] / 2.0));
    for (int i=1; i < numFrames - 1; i++) {
      smoothedGains[i]=(double)((frameGains[i - 1] / 3.0) + (frameGains[i] / 3.0) + (frameGains[i + 1] / 3.0));
    }
    smoothedGains[numFrames - 1]=(double)((frameGains[numFrames - 2] / 2.0) + (frameGains[numFrames - 1] / 2.0));
  }
  double maxGain=1.0;
  for (int i=0; i < numFrames; i++) {
    if (smoothedGains[i] > maxGain) {
      maxGain=smoothedGains[i];
    }
  }
  double scaleFactor=1.0;
  if (maxGain > 255.0) {
    scaleFactor=255 / maxGain;
  }
  maxGain=0;
  int gainHist[]=new int[256];
  for (int i=0; i < numFrames; i++) {
    int smoothedGain=(int)(smoothedGains[i] * scaleFactor);
    if (smoothedGain < 0)     smoothedGain=0;
    if (smoothedGain > 255)     smoothedGain=255;
    if (smoothedGain > maxGain)     maxGain=smoothedGain;
    gainHist[smoothedGain]++;
  }
  double minGain=0;
  int sum=0;
  while (minGain < 255 && sum < numFrames / 20) {
    sum+=gainHist[(int)minGain];
    minGain++;
  }
  sum=0;
  while (maxGain > 2 && sum < numFrames / 100) {
    sum+=gainHist[(int)maxGain];
    maxGain--;
  }
  double[] heights=new double[numFrames];
  double range=maxGain - minGain;
  for (int i=0; i < numFrames; i++) {
    double value=(smoothedGains[i] * scaleFactor - minGain) / range;
    if (value < 0.0)     value=0.0;
    if (value > 1.0)     value=1.0;
    heights[i]=value * value;
  }
  algo(mSoundFile.getNumFrames());
  totalZooms=algoValues.size() + 2;
  mNumZoomLevels=totalZooms;
  mLenByZoomLevel=new int[totalZooms];
  mZoomFactorByZoomLevel=new double[totalZooms];
  mValuesByZoomLevel=new double[totalZooms][];
  mLenByZoomLevel[0]=numFrames * 2;
  mZoomFactorByZoomLevel[0]=2.0;
  mValuesByZoomLevel[0]=new double[mLenByZoomLevel[0]];
  if (numFrames > 0) {
    mValuesByZoomLevel[0][0]=0.5 * heights[0];
    mValuesByZoomLevel[0][1]=heights[0];
  }
  for (int i=1; i < numFrames; i++) {
    mValuesByZoomLevel[0][2 * i]=0.5 * (heights[i - 1] + heights[i]);
    mValuesByZoomLevel[0][2 * i + 1]=heights[i];
  }
  mLenByZoomLevel[1]=numFrames;
  mValuesByZoomLevel[1]=new double[mLenByZoomLevel[1]];
  mZoomFactorByZoomLevel[1]=1.0;
  for (int i=0; i < mLenByZoomLevel[1]; i++) {
    mValuesByZoomLevel[1][i]=heights[i];
  }
  int location=0;
  for (int j=2; j < totalZooms; j++) {
    mLenByZoomLevel[j]=algoValues.get(location);
    mValuesByZoomLevel[j]=new double[mLenByZoomLevel[j]];
    mZoomFactorByZoomLevel[j]=mZoomFactorByZoomLevel[j - 1] / 1.5;
    for (int i=0; i < mLenByZoomLevel[j]; i++) {
      mValuesByZoomLevel[j][i]=0.5 * (mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i)] + mValuesByZoomLevel[j - 1][(int)(divisorValues.get(location) * i) + 1]);
    }
    location++;
  }
  Log.i("Scope","Squeezed..!!");
  mInitialized=true;
}

@SuppressWarnings("unchecked") private void expungeStaleEntries(){
synchronized (sync) {
    ListWeakReference r;
    while ((r=(ListWeakReference)queue.poll()) != null) {
      ListEntry le=r.getListEntry();
      int i=list.indexOf(le);
      if (i != -1) {
        list.remove(i);
      }
    }
  }
}

protected void work(final IResource resource,final List<WorkItem> resources,IProgressMonitor monitor){
  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(getProject());
  boolean runAsJob=store.getBoolean(FindBugsConstants.KEY_RUN_ANALYSIS_AS_EXTRA_JOB);
  FindBugsJob fbJob=new StartedFromBuilderJob("Finding bugs in " + resource.getName() + "...",resource,resources);
  if (runAsJob) {
    if (DEBUG) {
      FindbugsPlugin.log("cancelSimilarJobs");
    }
    FindBugsJob.cancelSimilarJobs(fbJob);
    if (DEBUG) {
      FindbugsPlugin.log("scheduleAsSystem");
    }
    fbJob.scheduleAsSystem();
    if (DEBUG) {
      FindbugsPlugin.log("done scheduleAsSystem");
    }
  }
 else {
    if (DEBUG) {
      FindbugsPlugin.log("running fbJob");
    }
    fbJob.run(monitor);
    if (DEBUG) {
      FindbugsPlugin.log("done fbJob");
    }
  }
}

public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {
  super.fireVetoableChange(name,oldValue,newValue);
  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);
}

@Override public void onFullBackup(FullBackupDataOutput output) throws IOException {
  if (mVolumes != null) {
    if (DEBUG)     Slog.i(TAG,"Backing up " + mVolumes.length + " shared volumes");
    HashSet<String> externalFilesDirFilter=new HashSet<String>();
    final File externalAndroidRoot=new File(Environment.getExternalStorageDirectory(),Environment.DIRECTORY_ANDROID);
    externalFilesDirFilter.add(externalAndroidRoot.getCanonicalPath());
    for (int i=0; i < mVolumes.length; i++) {
      StorageVolume v=mVolumes[i];
      String domain=FullBackup.SHARED_PREFIX + i;
      fullBackupFileTree(null,domain,v.getPath(),externalFilesDirFilter,output);
    }
  }
}

public static void removeConnectionList(Integer tab){
  TABBED_CONNECTIONS.remove(tab.intValue());
}

protected void paintRangeRings(Point2D originPnt,Point2D dest,Graphics graphics,MapBean theMap){
  Geo originGeo=new Geo(originPnt.getY(),originPnt.getX(),true);
  Geo destGeo=new Geo(dest.getY(),dest.getX(),true);
  double distance=originGeo.distance(destGeo);
  for (int i=1; i <= Math.max(1,numRings); i++) {
    double ringDist=distance * (double)i;
    paintCircle(originGeo,ringDist,graphics,theMap);
    paintLabel(originGeo,ringDist,graphics,theMap);
  }
}

public static String separatorsToWindows(String path){
  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {
    return path;
  }
  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);
}

public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {
  int bufferEnd=current - backoff;
  int len=bufferEnd - complete;
  output.append(new String(input,offset + complete,len,charset));
  complete=bufferEnd;
}

@Override public Trie optimize(Trie orig){
  List<CharSequence> cmds=orig.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=orig.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    liftUp(orows.get(j),orows);
  }
  Arrays.fill(remap,-1);
  rows=removeGaps(orig.root,orows,new ArrayList<Row>(),remap);
  return new Trie(orig.forward,remap[orig.root],cmds,rows);
}

private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){
  Handler<Void> afterHandler=null;
  return afterHandler;
}

private void tryShutdown(){
  if (isClosing() && isOkToClose())   shutdown(closeFuture.get());
}

public StorageEntity createStorageEntity(String storageName,StoragePlatformEntity storagePlatformEntity,List<Attribute> attributes){
  StorageEntity storageEntity=new StorageEntity();
  storageEntity.setName(storageName);
  storageEntity.setStoragePlatform(storagePlatformEntity);
  if (!CollectionUtils.isEmpty(attributes)) {
    List<StorageAttributeEntity> attributeEntities=new ArrayList<>();
    storageEntity.setAttributes(attributeEntities);
    for (    Attribute attribute : attributes) {
      StorageAttributeEntity attributeEntity=new StorageAttributeEntity();
      attributeEntities.add(attributeEntity);
      attributeEntity.setStorage(storageEntity);
      attributeEntity.setName(attribute.getName());
      attributeEntity.setValue(attribute.getValue());
    }
  }
  return storageDao.saveAndRefresh(storageEntity);
}

public void displayInfoLine(String infoLine,int labelDesignator){
  if (infoLineHolder != null) {
    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);
  }
}

public Console format(String format,Object... args){
  Formatter f=new Formatter(writer);
  f.format(format,args);
  f.flush();
  return this;
}

@After public void tearDown(){
  webClient.closeAllWindows();
}

public void testSignerStringIdentityScope() throws Exception {
  Signer s=new SignerStub("sss4",IdentityScope.getSystemScope());
  assertNotNull(s);
  assertEquals("sss4",s.getName());
  assertSame(IdentityScope.getSystemScope(),s.getScope());
  assertNull(s.getPrivateKey());
  try {
    Signer s2=new SignerStub("sss4",IdentityScope.getSystemScope());
    fail("expected KeyManagementException not thrown");
  }
 catch (  KeyManagementException e) {
  }
  Signer s2=new SignerStub(null);
  assertNull(s2.getName());
}

private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {
  int[] cValues=new int[3];
  do {
    if (bits.available() == 8) {
      return;
    }
    int firstByte=bits.readBits(8);
    if (firstByte == 254) {
      return;
    }
    parseTwoBytes(firstByte,bits.readBits(8),cValues);
    for (int i=0; i < 3; i++) {
      int cValue=cValues[i];
      if (cValue == 0) {
        result.append('\r');
      }
 else       if (cValue == 1) {
        result.append('*');
      }
 else       if (cValue == 2) {
        result.append('>');
      }
 else       if (cValue == 3) {
        result.append(' ');
      }
 else       if (cValue < 14) {
        result.append((char)(cValue + 44));
      }
 else       if (cValue < 40) {
        result.append((char)(cValue + 51));
      }
 else {
        throw FormatException.getFormatInstance();
      }
    }
  }
 while (bits.available() > 0);
}

public TSink<byte[]> sendBytes(TStream<byte[]> stream){
  Objects.requireNonNull(stream,"stream");
  return sendBinary(stream,null);
}

public static Object invokeStaticMethod(BshClassManager bcm,Class clas,String methodName,Object[] args) throws ReflectError, UtilEvalError, InvocationTargetException {
  Interpreter.debug("invoke static Method");
  Method method=resolveExpectedJavaMethod(bcm,clas,null,methodName,args,true);
  return invokeMethod(method,null,args);
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

protected AbstractRegexNPAnnotator(String pattern,boolean caseSensitive,double confidence){
  this(Pattern.compile(pattern,caseSensitive ? 0 : Pattern.CASE_INSENSITIVE),0,confidence);
}

private static void removeLoopSafepoint(StructuredGraph graph){
  LoopBeginNode loopBegin=findFirstLoop(graph);
  loopBegin.disableSafepoint();
}

protected abstract void bindItem(DataBoundViewHolder<T> holder,int position,List<Object> payloads);

public void testCase7(){
  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public synchronized void add(double minValue,double maxValue){
  super.add(minValue);
  mMaxValues.add(maxValue);
}

public static Date daysBefore(Date dateInst,int numDays){
  if ((numDays <= 0) || (dateInst == null)) {
    throw new IllegalArgumentException();
  }
  final Calendar cal=new GregorianCalendar();
  cal.setTime(dateInst);
  cal.add(Calendar.DAY_OF_YEAR,-numDays);
  return cal.getTime();
}

public final int remainingCapacity(){
  return Math.max(0,capacity - cache.size());
}

public static byte[] decode(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}

@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeObject(conservativeApproximation);
}

int putData(Object data) throws FitsException {
  long lsize=ArrayFuncs.computeLSize(data);
  if (lsize > Integer.MAX_VALUE) {
    throw new FitsException("FITS Heap > 2 G");
  }
  int size=(int)lsize;
  expandHeap(size);
  ByteArrayOutputStream bo=new ByteArrayOutputStream(size);
  try {
    BufferedDataOutputStream o=new BufferedDataOutputStream(bo);
    o.writeArray(data);
    o.flush();
    o.close();
  }
 catch (  IOException e) {
    throw new FitsException("Unable to write variable column length data",e);
  }
  System.arraycopy(bo.toByteArray(),0,this.heap,this.heapSize,size);
  int oldOffset=this.heapSize;
  this.heapSize+=size;
  return oldOffset;
}

public void paint(Graphics g){
  try {
    super.paint(g);
  }
 catch (  Exception e) {
  }
  int focusedRow=getFocusedRow(true);
  if (focusedRow != -1 && focusedRow < getRowCount()) {
    Border rowBorder=UIManager.getBorder("Table.focusRowHighlightBorder");
    if (rowBorder != null) {
      Rectangle rect=getCellRect(focusedRow,0,true);
      rect.width=getWidth();
      rowBorder.paintBorder(this,g,rect.x,rect.y,rect.width,rect.height);
    }
  }
}

private void add(final JLabel label,final JTextField field){
  panel.add(label);
  panel.add(field);
  if (previous == null) {
    layout.putConstraint(SpringLayout.NORTH,panel,-SPACING,SpringLayout.NORTH,label);
  }
 else {
    layout.putConstraint(SpringLayout.NORTH,label,SPACING,SpringLayout.SOUTH,previous);
  }
  layout.putConstraint(SpringLayout.WEST,panel,-SPACING,SpringLayout.WEST,label);
  layout.putConstraint(SpringLayout.SOUTH,panel,SPACING,SpringLayout.SOUTH,label);
  layout.putConstraint(SpringLayout.EAST,field,-SPACING,SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.WEST,field,-(TEXT_FIELD_WIDTH + SPACING),SpringLayout.EAST,panel);
  layout.putConstraint(SpringLayout.SOUTH,field,SPACING,SpringLayout.SOUTH,label);
  previous=label;
}

private void onTrackPointStart(Attributes attributes){
  latitude=attributes.getValue(ATTRIBUTE_LAT);
  longitude=attributes.getValue(ATTRIBUTE_LON);
  altitude=null;
  time=null;
}

public static byte[] combine(final List<byte[]> dataChunks){
  int totalSize=0;
  for (  final byte[] dataPart : dataChunks) {
    totalSize+=dataPart.length;
  }
  final byte[] data=new byte[totalSize];
  int index=0;
  for (  final byte[] dataPart : dataChunks) {
    System.arraycopy(dataPart,0,data,index,dataPart.length);
    index+=dataPart.length;
  }
  return data;
}

public void commit(IResource[] resources,String comment,boolean keepLocks,IProgressMonitor monitor) throws TeamException {
  if (monitor == null) {
    monitor=new NullProgressMonitor();
  }
  Map table=getProviderMapping(resources);
  Set keySet=table.keySet();
  monitor.beginTask("",keySet.size() * 1000);
  monitor.setTaskName(Policy.bind("RepositoryManager.committing"));
  Iterator iterator=keySet.iterator();
  while (iterator.hasNext()) {
    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);
    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();
    List list=(List)table.get(provider);
    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);
    provider.checkin(providerResources,comment,keepLocks,IResource.DEPTH_INFINITE,subMonitor);
  }
}

public boolean canSpawnWorkers(){
  boolean canSpawnWorker=false;
  if (verboseLogLevel > 5) {
    Utilities.verboseLog("canSpawnWorkers - gridName: " + gridName + " tier : "+ tier+ " maxTierDepth: "+ maxTierDepth+ " lifeRemaing: "+ lifeRemaining()+ " maximumLifeMillis: "+ maximumLifeMillis);
  }
  if (!gridName.equals("lsf")) {
    return false;
  }
  if (clusterState != null) {
    Long timeSinceClusterLastUpdatedClusterState=System.currentTimeMillis() - clusterState.getLastUpdated();
    Utilities.verboseLog("timeSinceClusterLastUpdatedClusterState: " + timeSinceClusterLastUpdatedClusterState);
    if (timeSinceClusterLastUpdatedClusterState > 2 * gridCheckInterval * 1000) {
      Utilities.verboseLog("ClusterState is not uptodate:" + clusterState.toString());
      return false;
    }
  }
 else {
    return false;
  }
  if (tier == maxTierDepth) {
    return false;
  }
  if (lifeRemaining() < (maximumLifeMillis * 0.25)) {
    return false;
  }
switch (tier) {
case 1:
    canSpawnWorker=true;
  break;
case 2:
canSpawnWorker=true;
break;
case 3:
canSpawnWorker=true;
break;
case 4:
canSpawnWorker=true;
break;
default :
if (gridThrottle) {
canSpawnWorker=false;
}
 else {
canSpawnWorker=true;
}
}
return canSpawnWorker;
}

public boolean equals(Object object){
  if (object == null || !(object instanceof SessionID)) {
    return false;
  }
  SessionID another=(SessionID)object;
  return encryptedString.equals(another.encryptedString);
}

public static boolean areIdentical(String playerIdent,OfflinePlayer compareTo){
  return playerIdent.equals(getIdentificationForAsString(compareTo));
}

Builder addLenient(String name,String value){
  namesAndValues.add(name);
  namesAndValues.add(value.trim());
  return this;
}

protected String stringWithoutHeader(){
  StringBuffer text=new StringBuffer();
  for (int i=0; i < numInstances(); i++) {
    text.append(instance(i));
    if (i < numInstances() - 1) {
      text.append('\n');
    }
  }
  return text.toString();
}

protected boolean isAlwaysNonNull(Value v){
  return false;
}

public final <T>void removeInternal(List<T> list,int position){
  if (hasHeaderView() && position == 0)   return;
  if (enableLoadMore() && position == getItemCount() - 1)   return;
  if (list.size() > 0) {
synchronized (mLock) {
      list.remove(hasHeaderView() ? position - 1 : position);
    }
    removeNotifyExternal(position);
    notifyItemRemoved(position);
  }
}

public AMPrimaryMastHeadViewBean(String name){
  super(name);
}

public boolean consumedGesture(){
  return reacted;
}

private void initializeLayer(List<Neuron> layer,NeuronUpdateRule nodeType,int nodes){
  for (int i=0; i < nodes; i++) {
    Neuron node=new Neuron(getParentNetwork(),nodeType);
    layer.add(node);
  }
}

public static double angle(Coordinate p){
  return Math.atan2(p.y,p.x);
}

public void fireNeuronMoved(final Neuron moved){
  for (  NeuronListener listener : neuronListeners) {
    listener.neuronMoved(new NetworkEvent<Neuron>(this,moved));
  }
}

public IOUtils(){
  super();
}

public static X509Certificate createCertificateFromBytes(byte[] certBytes){
  X509Certificate cert=null;
  CertificateFactory certFactory;
  try {
    certFactory=CertificateFactory.getInstance("X.509");
    InputStream in=new ByteArrayInputStream(certBytes);
    cert=(X509Certificate)certFactory.generateCertificate(in);
  }
 catch (  CertificateException e) {
    logger.warn("Excpetion caught in CryptCore." + "createCertificateFromBytes, returning null",e);
  }
  return cert;
}

void handleSelectionChanged(String selection){
  if (mDidExpandSelection) {
    mDidExpandSelection=false;
    return;
  }
  if (selection == null || selection.isEmpty()) {
    scheduleInvalidTapNotification();
    if (mSelectionType == SelectionType.TAP) {
      resetSelectionStates();
      return;
    }
  }
  if (selection != null && !selection.isEmpty()) {
    unscheduleInvalidTapNotification();
  }
  mSelectedText=selection;
  if (mWasTapGestureDetected) {
    mSelectionType=SelectionType.TAP;
    handleSelection(selection,mSelectionType);
    mWasTapGestureDetected=false;
  }
 else {
    mHandler.handleSelectionModification(selection,mX,mY);
  }
}

public TermsAckParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException("Failed to parse input source!",e);
  }
}

public static String format(final String value,String... params){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  Pattern p=Pattern.compile("\\{(\\w+)\\}");
  Matcher m=p.matcher(value);
  String result=value;
  while (m.find()) {
    int paramNumber=Integer.parseInt(m.group(1));
    if (params == null || paramNumber >= params.length) {
      throw new IllegalArgumentException("params does not have value for " + m.group());
    }
    result=result.replace(m.group(),params[paramNumber]);
  }
  return result;
}

public Builder server(String server){
  if (server.endsWith("/") == false) {
    server=server + "/";
  }
  this.server=server;
  return this;
}

private ResponsePacket executeCount(QueryTemplatePacket template,IJSpace space,Transaction txn) throws SQLException {
  try {
    template.setRouting(getRouting());
    template.setExplainPlan(getExplainPlan());
    int count=space.count(template,txn,getReadModifier());
    ResponsePacket response=new ResponsePacket();
    Object[][] values=new Object[1][1];
    values[0][0]=count;
    ResultEntry result=new ResultEntry(new String[]{getCountColumnName()},new String[]{getCountColumnLabel()},new String[]{""},values);
    response.setResultEntry(result);
    return response;
  }
 catch (  Exception e) {
    if (_logger.isLoggable(Level.SEVERE)) {
      _logger.log(Level.SEVERE,e.getMessage(),e);
    }
    throw new SQLException("Failed to execute count: " + e,"GSP",-111);
  }
}

void deriveConfidenceValue(double baseCount){
  if (Utils.isMissingValue(m_confidence) && !Utils.isMissingValue(baseCount) && baseCount > 0) {
    m_confidence=m_recordCount / baseCount;
  }
}

public ModifiableSolrParams add(String name,String... val){
  String[] old=vals.put(name,val);
  if (old != null) {
    if (val == null || val.length < 1) {
      String[] both=new String[old.length + 1];
      System.arraycopy(old,0,both,0,old.length);
      both[old.length]=null;
      vals.put(name,both);
    }
 else {
      String[] both=new String[old.length + val.length];
      System.arraycopy(old,0,both,0,old.length);
      System.arraycopy(val,0,both,old.length,val.length);
      vals.put(name,both);
    }
  }
  return this;
}

private AStarNode jump(int nextX,int nextY,int nextZ,int px,int pz){
  int y=nextY;
  int dist=currentNode.getG() + (Math.abs(nextX - currentNode.x) + Math.abs(y - currentNode.y) + Math.abs(nextZ - currentNode.z));
  int dx=nextX - px;
  int dz=nextZ - pz;
  int py=y;
  y=getGroundNodeHeight(nextX,py,nextZ);
  if (y == 0) {
    return null;
  }
 else   if (targetNode.x == nextX && targetNode.z == nextZ && targetNode.y == y || dist >= MAX_SKIP_DISTANCE) {
    return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);
  }
  int nxY=(dx != 0) ? getGroundNodeHeight(nextX + dx,y,nextZ) : 0;
  int nzY=(dz != 0) ? getGroundNodeHeight(nextX,y,nextZ + dz) : 0;
  if (dx != 0 && dz != 0) {
    if ((getGroundNodeHeight(nextX - dx,y,nextZ + dz) != 0 && getGroundNodeHeight(nextX - dx,py,nextZ) == 0) || (getGroundNodeHeight(nextX + dx,y,nextZ - dz) != 0 && getGroundNodeHeight(nextX,py,nextZ - dz) == 0)) {
      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);
    }
  }
 else {
    if (dx != 0) {
      if (nxY != y || (getGroundNodeHeight(nextX,y,nextZ + 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ + 1) != 0) || (getGroundNodeHeight(nextX,y,nextZ - 1) == 0 && getGroundNodeHeight(nextX + dx,nxY,nextZ - 1) != 0)) {
        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);
      }
    }
 else {
      if (nzY != y || (getGroundNodeHeight(nextX + 1,y,nextZ) == 0 && getGroundNodeHeight(nextX + 1,nzY,nextZ + dz) != 0) || (getGroundNodeHeight(nextX - 1,y,nextZ) == 0 && getGroundNodeHeight(nextX - 1,nzY,nextZ + dz) != 0)) {
        return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);
      }
    }
  }
  if (dx != 0 && dz != 0) {
    AStarNode jx=jump(nextX + dx,y,nextZ,nextX,nextZ);
    AStarNode jy=jump(nextX,y,nextZ + dz,nextX,nextZ);
    if (jx != null || jy != null) {
      return new AStarNode(nextX,y,nextZ,dist,currentNode,targetNode);
    }
  }
  if (nxY != 0 || nzY != 0) {
    return jump(nextX + dx,y,nextZ + dz,nextX,nextZ);
  }
 else {
    return null;
  }
}

public ByteArrayDataSource(InputStream is,String type){
  try {
    ByteArrayOutputStream os=new ByteArrayOutputStream();
    int ch;
    while ((ch=is.read()) != -1) {
      os.write(ch);
    }
    m_data=os.toByteArray();
  }
 catch (  IOException ioex) {
    log.log(Level.WARNING,"",ioex);
  }
  if (type != null && type.length() > 0)   m_type=type;
}

Object toType(String value,String pattern,Locale locale){
  Calendar calendar=toCalendar(value,pattern,locale);
  return toType(calendar);
}

public void addLimitLine(LimitLine l){
  mLimitLines.add(l);
  if (mLimitLines.size() > 6) {
    Log.e("MPAndroiChart","Warning! You have more than 6 LimitLines on your axis, do you really want that?");
  }
}

public void readData(DataInput din) throws IOException {
  function=din.readUnsignedShort();
  data=(short)(din.readShort() & 0xFFFF);
}

int readResults(final byte[] b,final int bPos,final int bAvail,final Context context){
  if (context.buffer != null) {
    final int len=Math.min(available(context),bAvail);
    System.arraycopy(context.buffer,context.readPos,b,bPos,len);
    context.readPos+=len;
    if (context.readPos >= context.pos) {
      context.buffer=null;
    }
    return len;
  }
  return context.eof ? EOF : 0;
}

public static int inflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){
  if (previous == null) {
    System.arraycopy(current,0,result,0,currentLength);
    return currentLength;
  }
  int length=0;
  int start1=0;
  int start2=0;
  while (start1 < previousLength && start2 < currentLength) {
    int end1=start1;
    while (end1 < previousLength && previous[end1] != '\t') {
      end1++;
    }
    int end2=start2;
    while (end2 < currentLength && current[end2] != '\t') {
      end2++;
    }
    if (current[start2] == '&' && end2 == start2 + 1) {
      for (int i=start1; i < end1; i++)       result[length++]=previous[i];
    }
 else {
      for (int i=start2; i < end2; i++)       result[length++]=current[i];
    }
    if (end2 < currentLength)     result[length++]='\t';
    start1=end1 + 1;
    start2=end2 + 1;
  }
  return length;
}

public Object[] toArray(){
  final Object[] items=this.items;
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    final int count=this.count;
    Object[] a=new Object[count];
    int n=items.length - takeIndex;
    if (count <= n) {
      System.arraycopy(items,takeIndex,a,0,count);
    }
 else {
      System.arraycopy(items,takeIndex,a,0,n);
      System.arraycopy(items,0,a,n,count - n);
    }
    return a;
  }
  finally {
    lock.unlock();
  }
}

public void addContainer(ImageContainer container){
  mContainers.add(container);
}

public IOUtils(){
  super();
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("acronym");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.replaceData(0,50,"2600");
  childData=child.getData();
  assertEquals("characterdataReplaceDataExceedsLengthOfDataAssert","2600",childData);
}

private void Legends(List<String> legends_list,List<Integer> color_code_list){
  textPaint.setColor(Color.BLACK);
  textPaint.setTextSize(20f);
  int left=(int)(graphwidth * 0.1);
  for (int i=0; i < legends_list.size(); i++) {
    String label=legends_list.get(i);
    float text_width=textPaint.measureText(label,0,label.length());
    int color=color_code_list.get(i);
    if (!((graphwidth - legendLeft) > (text_width + 60))) {
      legendTop-=60;
      legendLeft=left;
    }
    addLegends(canvas,color,legendTop,legendLeft,legendRight,legendBottom,label);
    legendLeft+=((int)text_width + 60);
  }
}

private void fetchMetadata(TableMapLogEvent tableEvent) throws SQLException, ReplicatorException {
  if (metadataCache == null)   metadataCache=new TableMetadataCache(5000);
  Table table=metadataCache.retrieve(tableEvent.getDatabaseName(),tableEvent.getTableName());
  if (table == null || table.getTableId() != tableEvent.getTableId()) {
    prepareMetadataConnection();
    table=metadataConnection.findTable(tableEvent.getDatabaseName(),tableEvent.getTableName(),false);
    if (table != null) {
      table.setTableId(tableEvent.getTableId());
      metadataCache.store(table);
    }
  }
 else   if (logger.isDebugEnabled())   logger.debug("Table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName()+ " found in cache.");
  if (table == null) {
    logger.warn("No metadata found for table " + tableEvent.getDatabaseName() + "."+ tableEvent.getTableName());
  }
 else {
    tableEvent.setTable(table);
  }
}

public String encode(){
  StringBuffer sb=new StringBuffer();
  encode(sb);
  return sb.toString();
}

@Override public int read(byte[] buf,int offset,int len) throws IOException {
  int available=_available;
  if (available > 0) {
    len=Math.min(len,available);
    len=_next.read(buf,offset,len);
    if (len > 0) {
      _available-=len;
    }
  }
 else   if (available == 0) {
    _available=readChunkLength();
    if (_available > 0) {
      len=Math.min(len,_available);
      len=_next.read(buf,offset,len);
      if (len > 0)       _available-=len;
    }
 else {
      _available=-1;
      len=-1;
    }
  }
 else {
    len=-1;
  }
  return len;
}

@Override public void flush(){
  FlushTask task;
synchronized (logRecords) {
    task=new FlushTask(new ArrayList<String>(logRecords));
    logRecords.clear();
  }
  task.run();
}

public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){
  ArrayList<Page> newPages=new ArrayList<>();
  int pageAmount=pages.size();
  int times=0;
  while (pageAmount > 0) {
    ArrayList<Page> pagesTemp=new ArrayList<>();
    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));
    int height=0;
    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();
    for (    Page page : pagesTemp) {
      widgets.add(new ButtonWidget(15,10 + height,page));
      height+=20;
    }
    newPages.add(new Page("index" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));
    widgets.clear();
    pagesTemp.clear();
    pageAmount-=7;
    times++;
  }
  return newPages;
}

public void testPosPosFirstLonger(){
  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={0,-2,-76,88,44,1,2,17,35,16,9,2,5,6,21};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.and(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

protected List<String> createNewExportMaskWorkflowForInitiators(List<URI> initiatorURIs,ExportGroup exportGroup,Workflow workflow,Map<URI,Integer> volumeMap,StorageSystem storage,String token,String previousStep) throws Exception {
  List<String> newSteps=new ArrayList<>();
  if (!initiatorURIs.isEmpty()) {
    Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,initiatorURIs);
    for (    Map.Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {
      String computeKey=resourceEntry.getKey();
      List<URI> computeInitiatorURIs=resourceEntry.getValue();
      _log.info(String.format("New export masks for %s",computeKey));
      GenExportMaskCreateWorkflowResult result=generateDeviceSpecificExportMaskCreateWorkFlow(workflow,previousStep,storage,exportGroup,computeInitiatorURIs,volumeMap,token);
      previousStep=result.getStepId();
      newSteps.add(previousStep);
    }
  }
  if (newSteps.isEmpty() && previousStep != null) {
    newSteps.add(previousStep);
  }
  return newSteps;
}

public boolean isLessThen(Percent Percent){
  assertDefined();
  BigDecimal thisValue=notNull(this);
  BigDecimal parameter=notNull(Percent);
  return (thisValue.compareTo(parameter) < 0);
}

@Override public URI toEdgeURI(final Object key){
  return toURI(key.toString());
}

short readShort() throws IOException {
  mDexFile.readFully(tmpBuf,0,2);
  if (isBigEndian) {
    return (short)((tmpBuf[1] & 0xff) | ((tmpBuf[0] & 0xff) << 8));
  }
 else {
    return (short)((tmpBuf[0] & 0xff) | ((tmpBuf[1] & 0xff) << 8));
  }
}

public static List<INaviProject> loadProjects(final AbstractSQLProvider provider,final DebuggerTemplateManager debuggerManager) throws CouldntLoadDataException {
  PostgreSQLDatabaseFunctions.checkArguments(provider,debuggerManager);
  final CConnection connection=provider.getConnection();
  final List<INaviProject> projects=new ArrayList<>();
  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.PROJECTS_TABLE)) {
    return projects;
  }
  String query="SELECT id, name, description, creation_date, modification_date, " + " (SELECT count(*) FROM " + CTableNames.ADDRESS_SPACES_TABLE + " WHERE project_id = "+ CTableNames.PROJECTS_TABLE+ ".id) "+ " AS addressspace_count FROM "+ CTableNames.PROJECTS_TABLE;
  try (ResultSet resultSet=connection.executeQuery(query,true)){
    while (resultSet.next()) {
      final int projectId=resultSet.getInt("id");
      final String name=PostgreSQLHelpers.readString(resultSet,"name");
      final String description=PostgreSQLHelpers.readString(resultSet,"description");
      final int addressSpaceCount=resultSet.getInt("addressspace_count");
      final Timestamp creationDate=resultSet.getTimestamp("creation_date");
      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");
      final List<DebuggerTemplate> debuggers=PostgreSQLDatabaseFunctions.getAssignedDebuggers(connection,projectId,debuggerManager);
      projects.add(new CProject(projectId,name,description == null ? "" : description,creationDate,modificationDate,addressSpaceCount,debuggers,provider));
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return new ArrayList<INaviProject>(projects);
}

public String syllabify(String phoneString){
  LinkedList<String> phoneList=splitIntoAllophones(phoneString);
  syllabify(phoneList);
  StringBuilder sb=new StringBuilder();
  for (  String p : phoneList) {
    if (sb.length() > 0)     sb.append(" ");
    sb.append(p);
  }
  return sb.toString();
}

@Override protected Node removeFromFrontier(){
  cleanUpFrontier();
  Node result=frontier.remove();
  updateMetrics(frontier.size());
  setExplored(result);
  return result;
}

public static boolean isFile(String path){
  File f=new File(path);
  return f.isFile();
}

public boolean equals(Object object){
  if (!(object instanceof ObjectInstance)) {
    return false;
  }
  ObjectInstance val=(ObjectInstance)object;
  if (!name.equals(val.getObjectName()))   return false;
  if (className == null)   return (val.getClassName() == null);
  return className.equals(val.getClassName());
}

public ZookeeperEmbedded(int port){
  this.port=port;
  this.logDir=new File(System.getProperty("java.io.tmpdir"),"zk/logs/zookeeper-test-" + port);
}

public BasicCondition(String variable,Value value,Relation relation){
  this.variable=Template.create(variable);
  this.templateValue=Template.create(value.toString());
  this.groundValue=value;
  this.relation=relation;
}

public static Set<String> readStopwordsPath(Path path,boolean lowercase) throws IOException {
  return readStopwordsInputStream(Files.newInputStream(path),lowercase);
}

@Override public String toString(){
  StringBuilder sRep=new StringBuilder();
  sRep.append('(');
  sRep.append(articleID);
  sRep.append(", ");
  sRep.append(revisionCounter);
  sRep.append(", ");
  sRep.append(timeStamp);
  sRep.append(", ");
  sRep.append(revisionId);
  if (revisionText != null) {
    sRep.append(", ");
    sRep.append(revisionText.length());
  }
  sRep.append(')');
  return sRep.toString();
}

private void breakBarrier(){
  generation.broken=true;
  count=parties;
  trip.signalAll();
}

public List<Entry> filter(List<Entry> points,double tolerance){
  if (tolerance <= 0)   return points;
  keep=new boolean[points.size()];
switch (mType) {
case DOUGLAS_PEUCKER:
    return reduceWithDouglasPeuker(points,tolerance);
case NONE:
  return points;
default :
return points;
}
}

protected void sendLogEvent(String component,String message,Callback<Object> callback){
  String syslogMessage=String.format(Locale.US,"<22>%s %s %s:%s",getSysLogFormattedDate(),utils.getApplicationName(context),component,message);
  sendDataOverUDP(syslogMessage,callback);
}

public static <T extends Throwable>T writeStackTraces(T throwable,StreamOutput out) throws IOException {
  StackTraceElement[] stackTrace=throwable.getStackTrace();
  out.writeVInt(stackTrace.length);
  for (  StackTraceElement element : stackTrace) {
    out.writeString(element.getClassName());
    out.writeOptionalString(element.getFileName());
    out.writeString(element.getMethodName());
    out.writeVInt(element.getLineNumber());
  }
  Throwable[] suppressed=throwable.getSuppressed();
  out.writeVInt(suppressed.length);
  for (  Throwable t : suppressed) {
    out.writeThrowable(t);
  }
  return throwable;
}

public DistributedLogMultiStreamWriter build(){
  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),"No streams provided");
  Preconditions.checkNotNull(_client,"No distributedlog client provided");
  Preconditions.checkNotNull(_codec,"No compression codec provided");
  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,"Invalid speculative timeout settings");
  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMicros,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);
}

public static String numberToString(Number number) throws JSONException {
  if (number == null) {
    throw new JSONException("Null pointer");
  }
  testValidity(number);
  String string=number.toString();
  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {
    while (string.endsWith("0")) {
      string=string.substring(0,string.length() - 1);
    }
    if (string.endsWith(".")) {
      string=string.substring(0,string.length() - 1);
    }
  }
  return string;
}

private ImageElement(int AD_PrintFormatItem_ID){
  loadAttachment(AD_PrintFormatItem_ID);
}

public ThreadRegisterValues(final ThreadRegisters values){
  m_tid=values.getTid();
  for (  final RegisterValue value : values.getRegisters()) {
    m_values.add(new Register(value));
  }
}

public LauncherDiscoveryRequestBuilder configurationParameters(Map<String,String> configurationParameters){
  Preconditions.notNull(configurationParameters,"configuration parameters map must not be null");
  configurationParameters.forEach(null);
  return this;
}

public boolean isTriggered(){
  return checkbox.isSelected();
}

public void addAll(int index,int[] data){
  int dataLen=data.length;
  if (dataLen == 0) {
    return;
  }
  int newcap=size + (int)(dataLen * 1.1) + 1;
  ensureCapacity(newcap);
  System.arraycopy(array,index,array,index + dataLen,size - index);
  System.arraycopy(data,0,array,index,dataLen);
  size+=dataLen;
}

public int read(byte[] b) throws java.io.IOException {
  return read(b,0,b.length);
}

public static void e(String tag,String msg,Object... args){
  if (sLevel > LEVEL_ERROR) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.e(tag,msg);
}

private static float calculateScore(final int[] playCounts){
  if (playCounts == null) {
    return 0;
  }
  float score=0;
  for (int i=0; i < Math.min(playCounts.length,NUM_WEEKS); i++) {
    score+=playCounts[i] * getScoreMultiplierForWeek(i);
  }
  return score;
}

public void removeScanningCallback(OneSheeldScanningCallback scanningCallback){
  if (scanningCallback != null && scanningCallbacks.contains(scanningCallback))   scanningCallbacks.remove(scanningCallback);
}

public void paintRect(Graphics g,JComponent c,int x,int y,int w,int h){
  Rectangle bounds=c.getBounds();
  check(bounds);
  g.drawImage(m_backImage,x,y,x + w,h + y,x,y,x + w,y + h,c);
}

@Override public final void sample(){
  _value=_acquireCount.get() - _releaseCount.get();
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

private boolean isPageBreak(int row){
  for (int i=0; i < m_pageBreak.size(); i++) {
    Integer rr=(Integer)m_pageBreak.get(i);
    if (rr.intValue() + 1 == row)     return true;
 else     if (rr.intValue() > row)     return false;
  }
  return false;
}

public ExecutorService shutdown(){
  pool.shutdown();
  return pool;
}

public static boolean isPropositionSymbolIdentifierPart(char ch){
  return Character.isJavaIdentifierPart(ch);
}

public static void o(Zdiagmat D){
  o(D,Parameters.OutputFieldWidth,Parameters.OutputFracPlaces);
}

public int search(String txt){
  int M=pat.length();
  int N=txt.length();
  int skip;
  for (int i=0; i <= N - M; i+=skip) {
    skip=0;
    for (int j=M - 1; j >= 0; j--) {
      if (pat.charAt(j) != txt.charAt(i + j)) {
        skip=Math.max(1,j - right[txt.charAt(i + j)]);
        break;
      }
    }
    if (skip == 0)     return i;
  }
  return N;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tSpecify list of columns to copy. First and last are valid\n" + "\tindexes. (default none)","R",1,"-R <index1,index2-index4,...>"));
  newVector.addElement(new Option("\tInvert matching sense (i.e. copy all non-specified columns)","V",0,"-V"));
  return newVector.elements();
}

public String toChars(int[] indices){
  StringBuilder s=new StringBuilder(indices.length);
  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));
  return s.toString();
}

public static final String trunc(final String str,final int length){
  if (str == null) {
    return str;
  }
  if (str.length() <= length) {
    return str;
  }
  return str.substring(0,length);
}

public void clearTransactions(int fromHeight){
  lock.lock();
  try {
    if (fromHeight == 0) {
      unspent.clear();
      spent.clear();
      pending.clear();
      dead.clear();
      transactions.clear();
    }
 else {
      throw new UnsupportedOperationException();
    }
  }
  finally {
    lock.unlock();
  }
}

@Override public boolean load(final Player player,final List<String> args){
  groovyBinding.setVariable("player",player);
  if (args != null) {
    groovyBinding.setVariable("args",args.toArray(new String[args.size()]));
  }
 else {
    groovyBinding.setVariable("args",new String[0]);
  }
  final GroovyShell interp=new GroovyShell(groovyBinding);
  boolean ret=true;
  preExecute(player,args);
  try {
    final File f=new File(groovyScript);
    interp.evaluate(f);
  }
 catch (  final Exception e) {
    logger.error("Exception while sourcing file " + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
catch (  final Error e) {
    logger.error("Exception while sourcing file " + groovyScript,e);
    setMessage(e.getMessage());
    ret=false;
  }
  postExecute(player,args,ret);
  return (ret);
}

private void startAnimation(){
  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);
  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();
  mPendingAnimations.clear();
  int propertyMask=0;
  int propertyCount=nameValueList.size();
  for (int i=0; i < propertyCount; ++i) {
    NameValuesHolder nameValuesHolder=nameValueList.get(i);
    propertyMask|=nameValuesHolder.mNameConstant;
  }
  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));
  animator.addUpdateListener(mAnimatorEventListener);
  animator.addListener(mAnimatorEventListener);
  if (mStartDelaySet) {
    animator.setStartDelay(mStartDelay);
  }
  if (mDurationSet) {
    animator.setDuration(mDuration);
  }
  if (mInterpolatorSet) {
    animator.setInterpolator(mInterpolator);
  }
  animator.start();
}

private void cleanDirtyRegion(float eventX,float eventY){
  dirtyRect.left=Math.min(lastTouchX,eventX);
  dirtyRect.right=Math.max(lastTouchX,eventX);
  dirtyRect.top=Math.min(lastTouchY,eventY);
  dirtyRect.bottom=Math.max(lastTouchY,eventY);
}

public Sort(String[] fields){
  this(fields,new boolean[fields.length]);
  Arrays.fill(m_ascend,true);
}

@Override public boolean wasSuccessful(){
  return isFinished() && getCurrentPoints() >= successThreashold;
}

void startLocatingPhone(){
  Intent intent=new Intent(sContext,LocationService.class);
  intent.setAction(LocationService.START_SERVICE);
  intent.putExtra("to",this.mAnswerTo);
  sContext.startService(intent);
}

public void deleteResourceConfig(String clusterName,ResourceType resourceType,String dsName) throws ConfigurationException {
  if (getClusterHome() == null) {
    throw new ConfigurationException("No home directory found from which to configure resources.");
  }
  File resources=getDir(getResourceConfigDirName(getClusterHome(),clusterName,resourceType));
  String delFileName=resources.getAbsolutePath() + File.separator + dsName+ ".properties";
  delFile(delFileName);
}

public BusMovement(BusMovement proto){
  super(proto);
  this.controlSystem=proto.controlSystem;
  this.id=nextID++;
  controlSystem.registerBus(this);
  startMode=true;
}

private int removeNext(){
  if (lastUsageDates.isEmpty()) {
    return INVALID_SIZE;
  }
  Long oldestUsage=null;
  File mostLongUsedFile=null;
  Set<Entry<File,Long>> entries=lastUsageDates.entrySet();
synchronized (lastUsageDates) {
    for (    Entry<File,Long> entry : entries) {
      if (mostLongUsedFile == null) {
        mostLongUsedFile=entry.getKey();
        oldestUsage=entry.getValue();
      }
 else {
        Long lastValueUsage=entry.getValue();
        if (lastValueUsage < oldestUsage) {
          oldestUsage=lastValueUsage;
          mostLongUsedFile=entry.getKey();
        }
      }
    }
  }
  int fileSize=0;
  if (mostLongUsedFile != null) {
    if (mostLongUsedFile.exists()) {
      fileSize=getSize(mostLongUsedFile);
      if (mostLongUsedFile.delete()) {
        lastUsageDates.remove(mostLongUsedFile);
      }
    }
 else {
      lastUsageDates.remove(mostLongUsedFile);
    }
  }
  return fileSize;
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 158) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

private void createGui(){
  for (  final IResultsPanel panel : m_factory) {
    m_tabbedPane.addTab(panel.getTitle(),panel.getComponent());
  }
  add(m_tabbedPane,BorderLayout.CENTER);
  m_tabbedPane.setVisible(true);
}

public static float generateRandomFloatBetween(float lowerLimit,float upperLimit){
  return lowerLimit + ((upperLimit - lowerLimit) * _r.nextFloat());
}

public SGenItemProviderAdapterFactory(){
  supportedTypes.add(IEditingDomainItemProvider.class);
  supportedTypes.add(IStructuredItemContentProvider.class);
  supportedTypes.add(ITreeItemContentProvider.class);
  supportedTypes.add(IItemLabelProvider.class);
  supportedTypes.add(IItemPropertySource.class);
}

private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DBIDArrayIter iter,double radius){
  if (right - left <= leafsize) {
    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {
      double dist=norm.distance(query,relation.get(iter));
      countObjectAccess();
      countDistanceComputation();
      if (dist <= radius) {
        res.add(dist,iter);
      }
    }
    return;
  }
  final int middle=(left + right) >>> 1;
  O split=relation.get(iter.seek(middle));
  countObjectAccess();
  final double delta=split.doubleValue(axis) - query.doubleValue(axis);
  final boolean onleft=(delta >= 0);
  final boolean onright=(delta <= 0);
  final boolean close=(Math.abs(delta) <= radius);
  final int next=(axis + 1) % dims;
  if (close) {
    double dist=norm.distance(query,split);
    countDistanceComputation();
    if (dist <= radius) {
      assert (iter.getOffset() == middle);
      res.add(dist,iter);
    }
  }
  if (left < middle && (onleft || close)) {
    kdRangeSearch(left,middle,next,query,res,iter,radius);
  }
  if (middle + 1 < right && (onright || close)) {
    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);
  }
}

private void handleStartElement(XMLStreamReader parser,Set<Node> childrenFound,Handler handler,Map<String,Object> values,Stack<Set<String>> stack,boolean recordStarted) throws IOException, XMLStreamException {
  Node n=getMatchingNode(parser,childNodes);
  Map<String,Object> decends=new HashMap<>();
  if (n != null) {
    childrenFound.add(n);
    n.parse(parser,handler,values,stack,recordStarted);
    return;
  }
  Node dn=this;
  do {
    if (dn.wildCardNodes != null) {
      n=getMatchingNode(parser,dn.wildCardNodes);
      if (n != null) {
        childrenFound.add(n);
        n.parse(parser,handler,values,stack,recordStarted);
        break;
      }
      for (      Node nn : dn.wildCardNodes)       decends.put(nn.name,nn);
    }
    dn=dn.wildAncestor;
  }
 while (dn != null);
  if (n == null) {
    int count=1;
    while (count != 0) {
      int token=parser.next();
      if (token == START_ELEMENT) {
        Node nn=(Node)decends.get(parser.getLocalName());
        if (nn != null) {
          childrenFound.add(nn);
          nn.parse(parser,handler,values,stack,recordStarted);
        }
 else         count++;
      }
 else       if (token == END_ELEMENT)       count--;
    }
  }
}

private void connect(){
  if (!connected) {
    updateInfo();
    String connectString="tcp://" + connectAddress + ":"+ connectPort;
    if (clientId == null || clientId.length() < 1) {
      out(getDate() + Messages.MqttClientView_15 + connectString+ Messages.MqttClientView_16);
      return;
    }
    try {
      if (firstConnect) {
        mqttClient=new MqttClient(connectString,clientId);
        mqttClient.setCallback(this);
        firstConnect=false;
      }
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_17 + e.getMessage());
      e.printStackTrace();
    }
    connOpts=new MqttConnectOptions();
    connOpts.setCleanSession(cleanStart);
    connOpts.setConnectionTimeout(30);
    connOpts.setKeepAliveInterval(keepAlive);
    if (username.length() > 0 && password.length() > 0) {
      connOpts.setPassword(password.toCharArray());
      connOpts.setUserName(username);
    }
    if (useWill) {
      if (willTopic == null || willTopic.equals("")) {
        out(Messages.MqttClientView_19);
        return;
      }
      connOpts.setWill(mqttClient.getTopic(willTopic),willMessage.getBytes(),willQos,willRetain);
    }
    try {
      out(getDate() + Messages.MqttClientView_20 + connectString);
      mqttClient.connect(connOpts);
      connected=true;
      out(getDate() + Messages.MqttClientView_21 + clientId);
    }
 catch (    MqttException e) {
      out(getDate() + Messages.MqttClientView_22 + e.getMessage());
      e.printStackTrace();
    }
  }
 else {
    out(Messages.MqttClientView_23);
  }
}

static void checkTypeRefAndPath(int typeRef,TypePath typePath){
  int mask=0;
switch (typeRef >>> 24) {
case TypeReference.CLASS_TYPE_PARAMETER:
case TypeReference.METHOD_TYPE_PARAMETER:
case TypeReference.METHOD_FORMAL_PARAMETER:
    mask=0xFFFF0000;
  break;
case TypeReference.FIELD:
case TypeReference.METHOD_RETURN:
case TypeReference.METHOD_RECEIVER:
case TypeReference.LOCAL_VARIABLE:
case TypeReference.RESOURCE_VARIABLE:
case TypeReference.INSTANCEOF:
case TypeReference.NEW:
case TypeReference.CONSTRUCTOR_REFERENCE:
case TypeReference.METHOD_REFERENCE:
mask=0xFF000000;
break;
case TypeReference.CLASS_EXTENDS:
case TypeReference.CLASS_TYPE_PARAMETER_BOUND:
case TypeReference.METHOD_TYPE_PARAMETER_BOUND:
case TypeReference.THROWS:
case TypeReference.EXCEPTION_PARAMETER:
mask=0xFFFFFF00;
break;
case TypeReference.CAST:
case TypeReference.CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT:
case TypeReference.METHOD_INVOCATION_TYPE_ARGUMENT:
case TypeReference.CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT:
case TypeReference.METHOD_REFERENCE_TYPE_ARGUMENT:
mask=0xFF0000FF;
break;
default :
throw new IllegalArgumentException("Invalid type reference sort 0x" + Integer.toHexString(typeRef >>> 24));
}
if ((typeRef & ~mask) != 0) {
throw new IllegalArgumentException("Invalid type reference 0x" + Integer.toHexString(typeRef));
}
if (typePath != null) {
for (int i=0; i < typePath.getLength(); ++i) {
int step=typePath.getStep(i);
if (step != TypePath.ARRAY_ELEMENT && step != TypePath.INNER_TYPE && step != TypePath.TYPE_ARGUMENT && step != TypePath.WILDCARD_BOUND) {
throw new IllegalArgumentException("Invalid type path step " + i + " in "+ typePath);
}
if (step != TypePath.TYPE_ARGUMENT && typePath.getStepArgument(i) != 0) {
throw new IllegalArgumentException("Invalid type path step argument for step " + i + " in "+ typePath);
}
}
}
}

synchronized void addTracer(Tracer tracer){
  if (curTracers.add(tracer)) {
    LOG.trace(toString() + ": adding tracer " + tracer.toString());
  }
}

private void grow(){
  int newCap=(entries.length << 1) + 1;
  Object[] newEntries=new Object[newCap];
  System.arraycopy(entries,0,newEntries,0,size);
  entries=newEntries;
}

public void damage(double value){
  setValue(Math.max(0,getValue() - value));
}

@Ignore("Disabling due to bug #52347") @Test public void testConcurrentEventsOnEmptyRegion(){
  versionTestConcurrentEventsOnEmptyRegion();
}

public Graph(){
  roots=new ArrayList<Node>();
  nodes=new ArrayList<Node>();
  string="";
}

private static String trimVersion(String apiVersion){
  if (apiVersion == null) {
    return null;
  }
 else {
    String[] versionParts=apiVersion.split("/");
    return versionParts[versionParts.length - 1];
  }
}

private Inventory queryInventory(boolean querySkuDetails,List<String> moreItemSkus) throws IabException {
  checkNotDisposed();
  checkSetupDone("queryInventory");
  try {
    Inventory inv=new Inventory();
    int r=queryPurchases(inv,ITEM_TYPE_INAPP);
    if (r != BILLING_RESPONSE_RESULT_OK) {
      throw new IabException(r,"Error refreshing inventory (querying owned items).");
    }
    if (querySkuDetails) {
      r=querySkuDetails(ITEM_TYPE_INAPP,inv,moreItemSkus);
      if (r != BILLING_RESPONSE_RESULT_OK) {
        throw new IabException(r,"Error refreshing inventory (querying prices of items).");
      }
    }
    if (mSubscriptionsSupported) {
      r=queryPurchases(inv,ITEM_TYPE_SUBS);
      if (r != BILLING_RESPONSE_RESULT_OK) {
        throw new IabException(r,"Error refreshing inventory (querying owned subscriptions).");
      }
      if (querySkuDetails) {
        r=querySkuDetails(ITEM_TYPE_SUBS,inv,moreItemSkus);
        if (r != BILLING_RESPONSE_RESULT_OK) {
          throw new IabException(r,"Error refreshing inventory (querying prices of subscriptions).");
        }
      }
    }
    return inv;
  }
 catch (  RemoteException e) {
    throw new IabException(IABHELPER_REMOTE_EXCEPTION,"Remote exception while refreshing inventory.",e);
  }
catch (  JSONException e) {
    throw new IabException(IABHELPER_BAD_RESPONSE,"Error parsing JSON response while refreshing inventory.",e);
  }
}

@Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException {
  if (!m_percentilesWithEmptyIntervals && analyzedInterval.getNumUniqueMessageIds() == 0) {
    return;
  }
  final double rawScore=calcRawScore(analyzedInterval);
  if (!SeenHugeLogProb(analyzedInterval)) {
    m_rawScores.add(rawScore);
    ++m_intervalCount;
  }
}

public static String readFileAsString(File file,String encoding) throws IOException {
  ByteBuffer buffer=readFile(file);
  if (null == encoding) {
    encoding="UTF-8";
  }
  String converted=new String(buffer.array(),encoding);
  return converted;
}

public EmBayesEstimatorEditor(EmBayesEstimatorWrapper emBayesEstWrapper){
  this(emBayesEstWrapper.getEstimateBayesIm(),emBayesEstWrapper.getDataSet());
}

private boolean saveDataToDisk(boolean exit,boolean complete,String updatedSaveName){
  return saveDataToDisk(exit,complete,updatedSaveName,true);
}

public static final void writeMapXml(Map val,String name,XmlSerializer out,WriteMapCallback callback) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,"null");
    out.endTag(null,"null");
    return;
  }
  out.startTag(null,"map");
  if (name != null) {
    out.attribute(null,"name",name);
  }
  writeMapXml(val,out,callback);
  out.endTag(null,"map");
}

public boolean needPreloadKey(int idx){
  return preloadKeys != null && preloadKeys.get(idx);
}

public int generateChallengeToken(InetSocketAddress address){
  int token=random.nextInt();
  challengeTokens.put(address,token);
  return token;
}

@Override public void perform(IR ir){
  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {
    BasicBlock bb=e.nextElement();
    if (bb.isEmpty())     continue;
    container.counter2++;
    if (bb.getInfrequent()) {
      container.counter1++;
      if (ir.options.FREQ_FOCUS_EFFORT)       continue;
    }
    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {
      Instruction s=ie.nextElement();
      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {
        ie=bb.forwardInstrEnumerator();
      }
    }
  }
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

public void runWithRetries(RetryableTask task) throws Exception {
  boolean maxSleepIntervalHit=false;
  for (int i=0; i < numAttempts; i++) {
    try {
      task.run();
      return;
    }
 catch (    Exception e) {
      if (i == numAttempts - 1) {
        throw e;
      }
      int sleepTime;
      if (maxSleepIntervalHit) {
        sleepTime=maxSleepInterval;
      }
 else {
        sleepTime=baseSleepInterval * (int)Math.pow(2,i);
      }
      LOG.error("Got an exception! Sleeping for " + sleepTime + " seconds and retrying.",e);
      try {
        Thread.sleep(sleepTime * 1000);
      }
 catch (      InterruptedException ie) {
        LOG.error("Unexpected interruption!",ie);
        throw ie;
      }
    }
  }
}

public Object pack(){
  if (collection) {
    List l=(List)value;
    if (Types.isArray(type)) {
      Object[] o=(Object[])Array.newInstance(itemType,l.size());
      l.toArray(o);
      return o;
    }
  }
  return value;
}

public void removeRequest(InterruptRequest interruptRequest){
synchronized (interruptRequestQueue) {
    interruptRequestQueue.remove(interruptRequest);
  }
}

@Override public final void onHeatmapFailed(){
  updatePending=false;
}

@SuppressLint("NewApi") @Nullable public static Drawable inflate(boolean forceSystemHandlingWhenPossible,@NonNull Resources resources,@DrawableRes int id){
  boolean systemHandling=isSystemHandling(forceSystemHandlingWhenPossible);
  Log.d(LOG_TAG,String.format("Inflating resource with id #0x%s (system handling: %s)",Integer.toHexString(id),systemHandling));
  if (systemHandling) {
    return resources.getDrawable(id,null);
  }
  try {
    return VectorDrawable.create(resources,id);
  }
 catch (  Resources.NotFoundException e) {
    return null;
  }
}

public static long objectFieldOffset(Field field){
  return UNSAFE.objectFieldOffset(field);
}

public void addAnnotation(String annotation,double x,double y){
  mAnnotations.add(annotation);
  mStringXY.put(x,y);
}

protected synchronized void write(long offset,byte[] b) throws IOException {
  if (byteBuffer != null) {
    byteBuffer.position((int)offset);
    byteBuffer.put(b);
  }
 else {
    throw new IOException("Write failed, file " + getPath() + " not mapped for I/O");
  }
}

public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){
  byte[] combined=new byte[iv.length + cipherText.length];
  System.arraycopy(iv,0,combined,0,iv.length);
  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);
  return combined;
}

long timestamp(long timestamp){
  this.timestamp=Math.max(this.timestamp,timestamp);
  return this.timestamp;
}

public MaterialPackage(MaterialPackageBO materialPackageBO,List<GenericTrack> genericTracks){
  super(materialPackageBO);
  this.materialPackageBO=materialPackageBO;
  this.genericTracks=Collections.unmodifiableList(genericTracks);
}

public Edge findEdgeInSameDirection(Coordinate p0,Coordinate p1){
  for (int i=0; i < edges.size(); i++) {
    Edge e=(Edge)edges.get(i);
    Coordinate[] eCoord=e.getCoordinates();
    if (matchInSameDirection(p0,p1,eCoord[0],eCoord[1]))     return e;
    if (matchInSameDirection(p0,p1,eCoord[eCoord.length - 1],eCoord[eCoord.length - 2]))     return e;
  }
  return null;
}

public void acquireProbabilities(final String string){
  if (string.length() < 2) {
    return;
  }
  for (int i=2; i < string.length(); ++i) {
    final char previousChar=string.charAt(i - 2);
    final char currentChar=string.charAt(i - 1);
    final char nextChar=string.charAt(i);
    final String key=previousChar + "" + currentChar;
    if (!sequences.contains(key)) {
      sequences.add(key);
    }
    HashMap<Character,Integer> probabilities=sequenceProbabilities.get(key);
    if (probabilities == null) {
      probabilities=new HashMap<>();
      sequenceProbabilities.put(key,probabilities);
    }
    int existingValue=probabilities.getOrDefault(nextChar,0);
    ++existingValue;
    probabilities.put(nextChar,existingValue);
  }
}

protected final void resolveIssue(HealthIssue healthIssue){
  EventBus eventBus;
  boolean wasIssueActive;
synchronized (mLock) {
    if (mHealthEventBus == null) {
      LOG.w("A health issue was resolved even though no event bus was registered to " + "handle it: %1$s.",healthIssue.toString());
      return;
    }
    eventBus=mHealthEventBus;
    wasIssueActive=mActiveIssues.remove(healthIssue);
  }
  if (wasIssueActive) {
    eventBus.post(healthIssue.resolved);
  }
}

public static byte[] decode(String s){
  return decode(s,NO_OPTIONS);
}

private static boolean test(ODatabaseDocumentPool pool,String dbURL,String user,String password,boolean finalTry){
  ODatabaseDocumentTx db=null;
  try {
    logger.info("Verifying the DB.");
    db=pool.acquire(dbURL,user,password);
    Iterator<ODocument> iter=db.browseClass("config");
    if (iter.hasNext()) {
      iter.next();
    }
  }
 catch (  OException ex) {
    if (finalTry) {
      logger.info("Exceptions encountered in verifying the DB",ex);
    }
 else {
      logger.debug("DB exception in testing.",ex);
    }
    return false;
  }
 finally {
    if (db != null) {
      db.close();
    }
  }
  return true;
}

@Override public void agg(Object newVal){
  if (newVal instanceof byte[]) {
    byte[] values=(byte[])newVal;
    ByteBuffer buffer=ByteBuffer.wrap(values);
    buffer.rewind();
    while (buffer.hasRemaining()) {
      valueSet.add(buffer.getInt());
    }
    return;
  }
 else {
    double value=new Double(newVal.toString());
    agg(value);
  }
}

private void displayEasterEgg(CommandSender sender){
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§4\u2592§4\u2592§c\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§4\u2592§4\u2592§4\u2592§c\u2592§c\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§c\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§7\u2592§0\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§8\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§4\u2592§4\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§8\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§4\u2592§4\u2592§6\u2592§6\u2592§8\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§8\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§0\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§4\u2592§6\u2592§6\u2592§6\u2592§6\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§8\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§8\u2592§8\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§6\u2592§6\u2592§6\u2592§6\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§0\u2592§8\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§7\u2592§6\u2592§6\u2592§4\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§0\u2592§0\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§0\u2592§8\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§8\u2592§8\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§4\u2592§4\u2592§4\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§0\u2592§8\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§8\u2592§8\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§4\u2592§4\u2592§4\u2592§7\u2592§7\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§8\u2592§8\u2592§f\u2592§7\u2592§f\u2592§7\u2592§f\u2592§f\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§4\u2592§4\u2592§4\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§4\u2592§4\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§f\u2592§f\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§4\u2592§4\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§0\u2592§0\u2592§0\u2592§4\u2592§4\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§f\u2592§f\u2592§7\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§4\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§8\u2592§8\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§0\u2592§0\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§0\u2592§0\u2592§0\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
  sender.sendMessage(StringEscapeUtils.unescapeJava("§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§7\u2592§5\u2592§5\u2592§5\u2592§5\u2592§7\u2592§r"));
}

public boolean isUnparsedEntity(String entityName){
  Entity entity=(Entity)fEntities.get(entityName);
  if (entity == null) {
    return false;
  }
  return entity.isUnparsed();
}

public void flush() throws IOException {
  out.flush();
}

private static String urlEncode(final String text) throws UnsupportedEncodingException {
  return URLEncoder.encode(text,"UTF-8");
}

protected void processFocusEvent(FocusEvent evt){
  super.processFocusEvent(evt);
  if (evt.getID() == FocusEvent.FOCUS_LOST) {
    if (popup != null)     hidePopup();
  }
}

@Override public synchronized void addRequestProperty(String key,String value){
  if (connected || connecting)   throw new IllegalStateException("Already connected");
  if (key == null)   throw new NullPointerException("key is null");
  if (isExternalMessageHeaderAllowed(key,value)) {
    requests.add(key,value);
    if (!key.equalsIgnoreCase("Content-Type")) {
      userHeaders.add(key,value);
    }
  }
}

public void execute(AbortableTask task){
  AbortingRunnable ar=new AbortingRunnable(task);
  tasks.add(ar);
  try {
    exec.execute(ar);
  }
 catch (  RejectedExecutionException e) {
    tasks.remove(ar);
    throw e;
  }
}

default ByteBuffer serialize(T value){
  ByteBuffer buffer=ByteBuffer.allocate(size(value));
  serialize(value,buffer);
  return buffer;
}

private void loadSubmissions(){
  submissions.clear();
  String[] users=JPlagCentral.usersList();
  for (int i=0; i < users.length; i++) {
    AccessStructure[] subm=JPlagCentral.listAccessStructures(users[i]);
    if (subm != null && subm.length != 0) {
      for (int j=0; j < subm.length; j++) {
        submissions.add(subm[j]);
      }
    }
  }
}

private void subFormat(int patternCharIndex,int count,FieldDelegate delegate,StringBuffer buffer,boolean useDateFormatSymbols){
  int maxIntCount=Integer.MAX_VALUE;
  String current=null;
  int beginOffset=buffer.length();
  int field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];
  int value;
  if (field == CalendarBuilder.WEEK_YEAR) {
    if (calendar.isWeekDateSupported()) {
      value=calendar.getWeekYear();
    }
 else {
      patternCharIndex=PATTERN_YEAR;
      field=PATTERN_INDEX_TO_CALENDAR_FIELD[patternCharIndex];
      value=calendar.get(field);
    }
  }
 else   if (field == CalendarBuilder.ISO_DAY_OF_WEEK) {
    value=CalendarBuilder.toISODayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));
  }
 else {
    value=calendar.get(field);
  }
  int style=(count >= 4) ? Calendar.LONG : Calendar.SHORT;
  if (!useDateFormatSymbols && field < Calendar.ZONE_OFFSET && patternCharIndex != PATTERN_MONTH_STANDALONE) {
    current=calendar.getDisplayName(field,style,locale);
  }
switch (patternCharIndex) {
case PATTERN_ERA:
    if (useDateFormatSymbols) {
      String[] eras=formatData.getEras();
      if (value < eras.length) {
        current=eras[value];
      }
    }
  if (current == null) {
    current="";
  }
break;
case PATTERN_WEEK_YEAR:
case PATTERN_YEAR:
if (calendar instanceof GregorianCalendar) {
if (count != 2) {
  zeroPaddingNumber(value,count,maxIntCount,buffer);
}
 else {
  zeroPaddingNumber(value,2,2,buffer);
}
}
 else {
if (current == null) {
  zeroPaddingNumber(value,style == Calendar.LONG ? 1 : count,maxIntCount,buffer);
}
}
break;
case PATTERN_MONTH:
if (useDateFormatSymbols) {
String[] months;
if (count >= 4) {
months=formatData.getMonths();
current=months[value];
}
 else if (count == 3) {
months=formatData.getShortMonths();
current=months[value];
}
}
 else {
if (count < 3) {
current=null;
}
 else if (forceStandaloneForm) {
current=calendar.getDisplayName(field,style | 0x8000,locale);
if (current == null) {
current=calendar.getDisplayName(field,style,locale);
}
}
}
if (current == null) {
zeroPaddingNumber(value + 1,count,maxIntCount,buffer);
}
break;
case PATTERN_MONTH_STANDALONE:
assert current == null;
if (locale == null) {
String[] months;
if (count >= 4) {
months=formatData.getMonths();
current=months[value];
}
 else if (count == 3) {
months=formatData.getShortMonths();
current=months[value];
}
}
 else {
if (count >= 3) {
current=calendar.getDisplayName(field,style | 0x8000,locale);
}
}
if (current == null) {
zeroPaddingNumber(value + 1,count,maxIntCount,buffer);
}
break;
case PATTERN_HOUR_OF_DAY1:
if (current == null) {
if (value == 0) {
zeroPaddingNumber(calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1,count,maxIntCount,buffer);
}
 else {
zeroPaddingNumber(value,count,maxIntCount,buffer);
}
}
break;
case PATTERN_DAY_OF_WEEK:
if (useDateFormatSymbols) {
String[] weekdays;
if (count >= 4) {
weekdays=formatData.getWeekdays();
current=weekdays[value];
}
 else {
weekdays=formatData.getShortWeekdays();
current=weekdays[value];
}
}
break;
case PATTERN_AM_PM:
if (useDateFormatSymbols) {
String[] ampm=formatData.getAmPmStrings();
current=ampm[value];
}
break;
case PATTERN_HOUR1:
if (current == null) {
if (value == 0) {
zeroPaddingNumber(calendar.getLeastMaximum(Calendar.HOUR) + 1,count,maxIntCount,buffer);
}
 else {
zeroPaddingNumber(value,count,maxIntCount,buffer);
}
}
break;
case PATTERN_ZONE_NAME:
if (current == null) {
if (formatData.locale == null || formatData.isZoneStringsSet) {
int zoneIndex=formatData.getZoneIndex(calendar.getTimeZone().getID());
if (zoneIndex == -1) {
value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
buffer.append(ZoneInfoFile.toCustomID(value));
}
 else {
int index=(calendar.get(Calendar.DST_OFFSET) == 0) ? 1 : 3;
if (count < 4) {
index++;
}
String[][] zoneStrings=formatData.getZoneStringsWrapper();
buffer.append(zoneStrings[zoneIndex][index]);
}
}
 else {
TimeZone tz=calendar.getTimeZone();
boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);
int tzstyle=(count < 4 ? TimeZone.SHORT : TimeZone.LONG);
buffer.append(tz.getDisplayName(daylight,tzstyle,formatData.locale));
}
}
break;
case PATTERN_ZONE_VALUE:
value=(calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET)) / 60000;
int width=4;
if (value >= 0) {
buffer.append('+');
}
 else {
width++;
}
int num=(value / 60) * 100 + (value % 60);
CalendarUtils.sprintf0d(buffer,num,width);
break;
case PATTERN_ISO_ZONE:
value=calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
if (value == 0) {
buffer.append('Z');
break;
}
value/=60000;
if (value >= 0) {
buffer.append('+');
}
 else {
buffer.append('-');
value=-value;
}
CalendarUtils.sprintf0d(buffer,value / 60,2);
if (count == 1) {
break;
}
if (count == 3) {
buffer.append(':');
}
CalendarUtils.sprintf0d(buffer,value % 60,2);
break;
default :
if (current == null) {
zeroPaddingNumber(value,count,maxIntCount,buffer);
}
break;
}
if (current != null) {
buffer.append(current);
}
int fieldID=PATTERN_INDEX_TO_DATE_FORMAT_FIELD[patternCharIndex];
Field f=PATTERN_INDEX_TO_DATE_FORMAT_FIELD_ID[patternCharIndex];
delegate.formatted(fieldID,f,f,beginOffset,buffer.length(),buffer);
}

@SuppressWarnings("unused") public boolean onTouchEvent(MotionEvent event){
  try {
    int pointerCount=multiTouchSupported ? (Integer)m_getPointerCount.invoke(event) : 1;
    if (DEBUG)     Log.i("MultiTouch","Got here 1 - " + multiTouchSupported + " "+ mMode+ " "+ handleSingleTouchEvents+ " "+ pointerCount);
    if (mMode == MODE_NOTHING && !handleSingleTouchEvents && pointerCount == 1)     return false;
    if (DEBUG)     Log.i("MultiTouch","Got here 2");
    int action=event.getAction();
    int histLen=event.getHistorySize() / pointerCount;
    for (int histIdx=0; histIdx <= histLen; histIdx++) {
      boolean processingHist=histIdx < histLen;
      if (!multiTouchSupported || pointerCount == 1) {
        if (DEBUG)         Log.i("MultiTouch","Got here 3");
        xVals[0]=processingHist ? event.getHistoricalX(histIdx) : event.getX();
        yVals[0]=processingHist ? event.getHistoricalY(histIdx) : event.getY();
        pressureVals[0]=processingHist ? event.getHistoricalPressure(histIdx) : event.getPressure();
      }
 else {
        if (DEBUG)         Log.i("MultiTouch","Got here 4");
        int numPointers=Math.min(pointerCount,MAX_TOUCH_POINTS);
        if (DEBUG && pointerCount > MAX_TOUCH_POINTS)         Log.i("MultiTouch","Got more pointers than MAX_TOUCH_POINTS");
        for (int ptrIdx=0; ptrIdx < numPointers; ptrIdx++) {
          int ptrId=(Integer)m_getPointerId.invoke(event,ptrIdx);
          pointerIds[ptrIdx]=ptrId;
          xVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalX.invoke(event,ptrIdx,histIdx) : m_getX.invoke(event,ptrIdx));
          yVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalY.invoke(event,ptrIdx,histIdx) : m_getY.invoke(event,ptrIdx));
          pressureVals[ptrIdx]=(Float)(processingHist ? m_getHistoricalPressure.invoke(event,ptrIdx,histIdx) : m_getPressure.invoke(event,ptrIdx));
        }
      }
      decodeTouchEvent(pointerCount,xVals,yVals,pressureVals,pointerIds,processingHist ? MotionEvent.ACTION_MOVE : action,processingHist ? true : action != MotionEvent.ACTION_UP && (action & ((1 << ACTION_POINTER_INDEX_SHIFT) - 1)) != ACTION_POINTER_UP && action != MotionEvent.ACTION_CANCEL,processingHist ? event.getHistoricalEventTime(histIdx) : event.getEventTime());
    }
    return true;
  }
 catch (  Exception e) {
    Log.e("MultiTouchController","onTouchEvent() failed",e);
    return false;
  }
}

public static Bit valueOf(String bit) throws NumberFormatException {
  final int i=Integer.parseInt(bit);
  if (i != 0 && i != 1) {
    throw new NumberFormatException("Input \"" + bit + "\" must be 0 or 1.");
  }
  return (i > 0) ? TRUE : FALSE;
}

public boolean next() throws EOFException {
  if (limit >= fileSize) {
    throw new EOFException("End of file was reached");
  }
  if (mem.getLongVolatile(Structure.Limit) <= limit) {
    return false;
  }
  byte commit=mem.getByteVolatile(limit);
  byte rollback=mem.getByteVolatile(limit + Length.Commit);
  if (rollback == Rollback.Set) {
    limit+=Length.RecordHeader + recordSize;
    timeoutCounter=0;
    timerStart=0;
    return false;
  }
  if (commit == Commit.Set) {
    timeoutCounter=0;
    timerStart=0;
    return true;
  }
  timeoutCounter++;
  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {
    if (timerStart == 0) {
      timerStart=System.currentTimeMillis();
    }
 else {
      if (System.currentTimeMillis() - timerStart >= maxTimeout) {
        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);
        limit+=Length.RecordHeader + recordSize;
        timeoutCounter=0;
        timerStart=0;
        return false;
      }
    }
  }
  return false;
}

private int composeComponent(int a,int b){
  return Math.min(b + b * a / DIMMING_FACTOR,0xff);
}

public synchronized void writeTo(OutputStream out) throws IOException {
  int remaining=count;
  for (  byte[] buf : buffers) {
    int c=Math.min(buf.length,remaining);
    out.write(buf,0,c);
    remaining-=c;
    if (remaining == 0) {
      break;
    }
  }
}

public void removeTreeModelListener(TreeModelListener l){
  treeModelListeners.removeElement(l);
}

public URIName(String name) throws IOException {
  try {
    uri=new URI(name);
  }
 catch (  URISyntaxException use) {
    throw new IOException("invalid URI name:" + name,use);
  }
  if (uri.getScheme() == null) {
    throw new IOException("URI name must include scheme:" + name);
  }
  host=uri.getHost();
  if (host != null) {
    if (host.charAt(0) == '[') {
      String ipV6Host=host.substring(1,host.length() - 1);
      try {
        hostIP=new IPAddressName(ipV6Host);
      }
 catch (      IOException ioe) {
        throw new IOException("invalid URI name (host " + "portion is not a valid IPv6 address):" + name);
      }
    }
 else {
      try {
        hostDNS=new DNSName(host);
      }
 catch (      IOException ioe) {
        try {
          hostIP=new IPAddressName(host);
        }
 catch (        Exception ioe2) {
          throw new IOException("invalid URI name (host " + "portion is not a valid DNS name, IPv4 address," + " or IPv6 address):"+ name);
        }
      }
    }
  }
}

public ProjectedStream addView(String namespace,String name,List<Expression> parameters){
  views.add(View.create(namespace,name,parameters));
  return this;
}

protected int read(SpeechRecord recorder,byte[] buffer){
  int len=buffer.length;
  int numOfBytes=recorder.read(buffer,0,len);
  int status=getStatus(numOfBytes,len);
  if (status == 0) {
    System.arraycopy(buffer,0,mRecording,mRecordedLength,numOfBytes);
    mRecordedLength+=len;
  }
  return status;
}

public void touch(){
  candiesStore=null;
}

public ZoneRules toRules(String zoneId){
  Objects.requireNonNull(zoneId,"zoneId");
  if (windowList.isEmpty()) {
    throw new IllegalStateException("No windows have been added to the builder");
  }
  final List<ZoneOffsetTransition> standardTransitionList=new ArrayList<>(4);
  final List<ZoneOffsetTransition> transitionList=new ArrayList<>(256);
  final List<ZoneOffsetTransitionRule> lastTransitionRuleList=new ArrayList<>(2);
  final TZWindow firstWindow=windowList.get(0);
  ZoneOffset loopStandardOffset=firstWindow.standardOffset;
  int loopSavings=0;
  if (firstWindow.fixedSavingAmountSecs != null) {
    loopSavings=firstWindow.fixedSavingAmountSecs;
  }
  final ZoneOffset firstWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + loopSavings);
  LocalDateTime loopWindowStart=LocalDateTime.of(YEAR_MIN_VALUE,1,1,0,0);
  ZoneOffset loopWindowOffset=firstWallOffset;
  for (  TZWindow window : windowList) {
    window.tidy(loopWindowStart.getYear());
    Integer effectiveSavings=window.fixedSavingAmountSecs;
    if (effectiveSavings == null) {
      effectiveSavings=0;
      for (      TZRule rule : window.ruleList) {
        if (rule.toEpochSecond(loopStandardOffset,loopSavings) > loopWindowStart.toEpochSecond(loopWindowOffset)) {
          break;
        }
        effectiveSavings=rule.savingAmountSecs;
      }
    }
    if (loopStandardOffset.equals(window.standardOffset) == false) {
      standardTransitionList.add(new ZoneOffsetTransition(LocalDateTime.ofEpochSecond(loopWindowStart.toEpochSecond(loopWindowOffset),0,loopStandardOffset),loopStandardOffset,window.standardOffset));
      loopStandardOffset=window.standardOffset;
    }
    ZoneOffset effectiveWallOffset=ZoneOffset.ofTotalSeconds(loopStandardOffset.getTotalSeconds() + effectiveSavings);
    if (loopWindowOffset.equals(effectiveWallOffset) == false) {
      transitionList.add(new ZoneOffsetTransition(loopWindowStart,loopWindowOffset,effectiveWallOffset));
    }
    loopSavings=effectiveSavings;
    for (    TZRule rule : window.ruleList) {
      if (rule.isTransition(loopSavings)) {
        ZoneOffsetTransition trans=rule.toTransition(loopStandardOffset,loopSavings);
        if (trans.toEpochSecond() < loopWindowStart.toEpochSecond(loopWindowOffset) == false && trans.toEpochSecond() < window.createDateTimeEpochSecond(loopSavings)) {
          transitionList.add(trans);
          loopSavings=rule.savingAmountSecs;
        }
      }
    }
    for (    TZRule lastRule : window.lastRuleList) {
      lastTransitionRuleList.add(lastRule.toTransitionRule(loopStandardOffset,loopSavings));
      loopSavings=lastRule.savingAmountSecs;
    }
    loopWindowOffset=window.createWallOffset(loopSavings);
    loopWindowStart=LocalDateTime.ofEpochSecond(window.createDateTimeEpochSecond(loopSavings),0,loopWindowOffset);
  }
  return new ZoneRules(firstWindow.standardOffset,firstWallOffset,standardTransitionList,transitionList,lastTransitionRuleList);
}

public static int hash(Object o){
  int h=o == null ? 0 : o instanceof byte[] ? Arrays.hashCode((byte[])o) : o.hashCode();
  h+=(h << 15) ^ 0xffffcd7d;
  h^=(h >>> 10);
  h+=(h << 3);
  h^=(h >>> 6);
  h+=(h << 2) + (h << 14);
  return h ^ (h >>> 16);
}

public void addParseTemplate(String parseTemplate){
  parseTemplates.add(parseTemplate);
}

private void attachImageFromCamera(){
  try {
    if (null != mShootedPicturePath) {
      Uri uri=Uri.fromFile(new File(mShootedPicturePath));
      try {
        Bitmap previewBitmap=VectorApp.getSavedPickerImagePreview();
        String thumbnailPath=getThumbnailPath(mShootedPicturePath);
        int rotationAngle=ImageUtils.getRotationAngleForBitmap(VectorMediasPickerActivity.this,uri);
        if (0 != rotationAngle) {
          android.graphics.Matrix bitmapMatrix=new android.graphics.Matrix();
          bitmapMatrix.postRotate(360 - rotationAngle);
          previewBitmap=Bitmap.createBitmap(previewBitmap,0,0,previewBitmap.getWidth(),previewBitmap.getHeight(),bitmapMatrix,false);
        }
        File file=new File(thumbnailPath);
        FileOutputStream outStream=new FileOutputStream(file);
        previewBitmap.compress(Bitmap.CompressFormat.JPEG,50,outStream);
        outStream.flush();
        outStream.close();
      }
 catch (      Exception e) {
        Log.e(LOG_TAG,"attachImageFromCamera fails to create thumbnail file");
      }
      Bundle conData=new Bundle();
      Intent intent=new Intent();
      intent.setData(uri);
      intent.putExtras(conData);
      setResult(RESULT_OK,intent);
    }
  }
 catch (  Exception e) {
    setResult(RESULT_CANCELED,null);
  }
 finally {
    VectorApp.setSavedCameraImagePreview(null);
    finish();
  }
}

private double minIgnoreNaN(double a,double b){
  if (Double.isNaN(a)) {
    return b;
  }
  if (Double.isNaN(b)) {
    return a;
  }
  return Math.min(a,b);
}

public ObjectName preRegister(MBeanServer server,ObjectName name) throws Exception {
  setMBeanServer(server);
  if (name == null) {
    name=new ObjectName(server.getDefaultDomain() + ":" + ServiceName.MLET);
  }
  this.mletObjectName=name;
  return this.mletObjectName;
}

static String matchStringOrThrow(Pattern p,ToDateParser params,Enum<?> aEnum){
  String s=params.getInputStr();
  Matcher matcher=p.matcher(s);
  if (!matcher.find()) {
    throwException(params,format("Issue happened when parsing token '%s'",aEnum.name()));
  }
  return matcher.group(1);
}

String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){
  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);
  StringBuilder sb=new StringBuilder();
  visitor.visit(annotationValue,sb);
  return sb.toString();
}

static ByteBuffer newByteBuffer(int capacity){
  ByteBuffer newbb=ByteBuffer.allocate(capacity);
  newbb.order(ByteOrder.LITTLE_ENDIAN);
  return newbb;
}

public synchronized void add(double x,double y,double value){
  super.add(x,y);
  mValue.add(value);
  updateRange(value);
}

private void validateCollectionAttribute(CollectionAttribute collection,Set<String> allCollections){
  if (collection == null || allCollections == null) {
    return;
  }
  for (  RestMethod restMethod : collection.getMethods()) {
    if (allCollections.contains(restMethod.getRestFullMethodName())) {
      aspect.warning(SimpleLocation.TOPLEVEL,"The rpc methods and the associated http paths are not following the guidelines. As a " + "result the derived rest collection '%s' contains a sub collection and a " + "method with the same name as '%s'. This can cause a failure to generate client "+ "library, since these names are used for generating artifacts in generated code.",collection.getFullName(),restMethod.getRestMethodName());
    }
  }
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

public void putStringNoNull(String s){
  ensureCapacity(s.length() * 2);
  System.arraycopy(s.getBytes(),0,this.byteBuffer,this.position,s.length());
  this.position+=s.length();
}

public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      String publicId=identifier.getPublicId();
      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();
      fDeclHandler.externalEntityDecl(name,publicId,systemId);
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}

public HoltWintersModelBuilder alpha(double alpha){
  this.alpha=alpha;
  return this;
}

public static @CheckForNull ClassDescriptor createClassDescriptorFromFieldSignature(String signature){
  int start=signature.indexOf('L');
  if (start < 0) {
    return null;
  }
  int end=signature.indexOf(';',start);
  if (end < 0) {
    return null;
  }
  return createClassDescriptor(signature.substring(start + 1,end));
}

private static ServiceTicketResponse checkGetNfcServiceTicketResponse(ServiceTicketResponse serviceTicketResponse) throws RpcException {
  logger.info("Checking {}",serviceTicketResponse);
switch (serviceTicketResponse.getResult()) {
case OK:
    break;
case SYSTEM_ERROR:
  throw new SystemErrorException(serviceTicketResponse.getError());
case NOT_FOUND:
throw new DatastoreNotFoundException(serviceTicketResponse.getError());
default :
throw new RpcException(String.format("Unknown result: %s",serviceTicketResponse.getError()));
}
return serviceTicketResponse;
}

public void schedule(TimerTask task,long delay){
  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");
  sched(task,System.currentTimeMillis() + delay,0);
}

public void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){
  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis can't be negative");
  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis can't be negative");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * semiMajorAxis);
  double hs=factorY(2 * semiMinorAxis);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}

static byte[] discardWhitespace(byte[] data){
  byte groomedData[]=new byte[data.length];
  int bytesCopied=0;
  for (int i=0; i < data.length; i++) {
switch (data[i]) {
case (byte)' ':
case (byte)'\n':
case (byte)'\r':
case (byte)'\t':
      break;
default :
    groomedData[bytesCopied++]=data[i];
}
}
byte packedData[]=new byte[bytesCopied];
System.arraycopy(groomedData,0,packedData,0,bytesCopied);
return packedData;
}

@Override public Cursor swapCursor(Cursor newCursor){
  mAlphabetIndexer.setCursor(newCursor);
  return super.swapCursor(newCursor);
}

public void lockFlushing(){
  flushLock.lock();
}

public static boolean canBeRandomized(Class clazz){
  return ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.equals(String.class) || clazz.equals(IDiscordClient.class);
}

public static String generateNativeGuid(String deviceType,String serialNumber){
  return String.format("%s+%s",_deviceTypeMap.get(deviceType),serialNumber);
}

public static SecretKeys keys(String keysStr) throws InvalidKeyException {
  String[] keysArr=keysStr.split(":");
  if (keysArr.length != 2) {
    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");
  }
 else {
    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);
    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {
      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");
    }
    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);
    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {
      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");
    }
    return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM));
  }
}

public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int bandList[]){
  if (x < this.minX) {
    throw new RasterFormatException("x lies outside raster");
  }
  if (y < this.minY) {
    throw new RasterFormatException("y lies outside raster");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException("(x + width) is outside of Raster");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException("(y + height) is outside of Raster");
  }
  SampleModel sm;
  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList);
 else   sm=sampleModel;
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new ShortBandedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}

private void sortChildren(final JCriteriumTreeNode parentNode){
  final List<JCriteriumTreeNode> operators=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> conditions=new ArrayList<JCriteriumTreeNode>();
  final List<JCriteriumTreeNode> minus=new ArrayList<JCriteriumTreeNode>();
  final Enumeration<?> children=parentNode.children();
  while (children.hasMoreElements()) {
    final JCriteriumTreeNode child=(JCriteriumTreeNode)children.nextElement();
    final ICriterium type=child.getCriterium();
    if (type instanceof CConditionCriterium) {
      conditions.add(child);
    }
 else {
      operators.add(child);
    }
  }
  parentNode.removeAllChildren();
  for (  final JCriteriumTreeNode child : operators) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : conditions) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
  for (  final JCriteriumTreeNode child : minus) {
    parentNode.add(child);
    child.setParent(parentNode);
  }
}

public static int poisson(double lambda){
  int k=0;
  double p=1.0;
  double L=Math.exp(-lambda);
  do {
    k++;
    p*=uniform();
  }
 while (p >= L);
  return k - 1;
}

public String build(String input){
  inputString=input;
  inputIndex=0;
  inputLength=input.length();
  outputString=new StringBuffer();
  char nextChar;
  while ((nextChar=get()) != 0 && outputString.length() < maxOutputLength) {
    if (nextChar == '/') {
      if (inputStartsWith("*!")) {
        String nextChars=peek(7);
        boolean haveBangComment=false;
        if (nextChars != null && nextChars.length() == 7) {
          haveBangComment=true;
          for (int i=2; i < nextChars.length(); i++) {
            if (!Character.isDigit(nextChars.charAt(i))) {
              haveBangComment=false;
              break;
            }
          }
        }
        if (haveBangComment) {
          skip(7);
          String contents=getToDelimiter("*/");
          if (contents != null) {
            put(contents);
            skip(2);
          }
        }
 else {
          put(nextChar);
        }
      }
 else       if (inputStartsWith("*")) {
        if (getToDelimiter("*/") != null)         skip(2);
      }
 else {
        put(nextChar);
      }
    }
 else     if (nextChar == '-') {
      if (inputStartsWith("-")) {
        String tail=peek(2);
        if (tail == null) {
          break;
        }
 else {
          if (Character.isWhitespace(tail.charAt(1))) {
            String buf=getToEndOfLine();
            skip(buf.length());
            put(' ');
          }
 else           put(nextChar);
        }
      }
 else {
        put(nextChar);
      }
    }
 else     if (nextChar == '\n') {
      put(" ");
    }
 else {
      put(nextChar);
    }
  }
  return outputString.toString();
}

public boolean isBuiltinSoundAvailable(String soundIdentifier){
  return builtinSounds.containsKey(soundIdentifier);
}

public Iterator<String> iterateSerializers(){
  return serializers.iterator();
}

private static void checkKey(String key) throws MalformedObjectNameException {
  if (key == null)   throw new NullPointerException("Invalid key (null)");
  final int len=key.length();
  if (len == 0)   throw new MalformedObjectNameException("Invalid key (empty)");
  final char[] k=key.toCharArray();
  final int endKey=parseKey(k,0);
  if (endKey < len)   throw new MalformedObjectNameException("Invalid character in value: `" + k[endKey] + "'");
}

public abstract boolean isShutdown();

protected abstract void init();

private void drawArc(Canvas canvas){
  if (mCurrentDashMode.equals(DASH_MODE.DOWNLOAD)) {
    mnIndeterminateStartPosition+=(1 - mnProgress) * mnStartSpeed;
    if ((mnIndeterminateStartPosition > CIRCULAR_FACTOR) || (mnIndeterminateStartPosition < 0)) {
      mnIndeterminateStartPosition=0;
    }
    Rect currRect=new Rect();
    getLocalVisibleRect(currRect);
    float nRingBoundaryInner=mnRingRadius - (mnRingWidth / 2) - (mnArcWidth / 2);
    mArcRect.set(mnViewCenter - nRingBoundaryInner,mnViewCenter - nRingBoundaryInner,mnViewCenter + nRingBoundaryInner,mnViewCenter + nRingBoundaryInner);
    mPaint.setColor(mArcColor);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeWidth(mnArcWidth);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    canvas.drawArc(mArcRect,mnIndeterminateStartPosition,mnArcLength,false,mPaint);
  }
}

public static String formatDateTime(java.util.Date date,String format,String locale,String timeZone){
  SimpleDateFormat dateFormat=getDateFormat(format,locale,timeZone);
synchronized (dateFormat) {
    return dateFormat.format(date);
  }
}

public static byte[] decode(byte[] input,int offset,int len,int flags){
  Decoder decoder=new Decoder(flags,new byte[len * 3 / 4]);
  if (!decoder.process(input,offset,len,true)) {
    throw new IllegalArgumentException("bad base-64");
  }
  if (decoder.op == decoder.output.length) {
    return decoder.output;
  }
  byte[] temp=new byte[decoder.op];
  System.arraycopy(decoder.output,0,temp,0,decoder.op);
  return temp;
}

public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {
  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);
  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);
  List<Mesh> list=new ArrayList<>();
  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {
    Mesh mesh=generateMesh(md5Model,md5Mesh);
    handleTexture(mesh,md5Mesh,defaultColour);
    list.add(mesh);
  }
  Mesh[] meshes=new Mesh[list.size()];
  meshes=list.toArray(meshes);
  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);
  return result;
}

protected MessageDigest(String algorithm){
  this.algorithm=algorithm;
}

private void createGui(){
  final JPanel topPanel=new JPanel(new BorderLayout());
  final JPanel innerTopPanel=new JPanel(new BorderLayout());
  innerTopPanel.add(m_stdEditPanel);
  topPanel.add(innerTopPanel);
  final JPanel debuggerChooserPanel=new JPanel(new BorderLayout());
  debuggerChooserPanel.setBorder(new TitledBorder("Project Debuggers"));
  m_checkedList=new JCheckedListbox<>(new Vector<DebuggerTemplate>(),false);
  updateCheckedListPanel();
  final JScrollPane debuggerScrollPane=new JScrollPane(m_checkedList);
  m_checkedListPanel.add(debuggerScrollPane);
  debuggerChooserPanel.add(m_checkedListPanel,BorderLayout.CENTER);
  debuggerChooserPanel.setMinimumSize(new Dimension(0,128));
  debuggerChooserPanel.setPreferredSize(new Dimension(0,128));
  innerTopPanel.add(debuggerChooserPanel,BorderLayout.SOUTH);
  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));
  buttonPanel.setBorder(new EmptyBorder(0,0,5,2));
  buttonPanel.add(new JPanel());
  buttonPanel.add(m_saveButton);
  topPanel.add(buttonPanel,BorderLayout.SOUTH);
  final JPanel bottomPanel=new CAddressSpacesTablePanel(m_table);
  final JScrollPane scrollPane=new JScrollPane(m_table);
  bottomPanel.setBorder(m_titledBorder);
  setBorder(new EmptyBorder(0,0,0,1));
  bottomPanel.add(scrollPane);
  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);
  splitPane.setOneTouchExpandable(true);
  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());
  splitPane.setResizeWeight(0.5);
  add(splitPane);
}

public static int[] mergeSort(int[] a){
  if (a.length == 1)   return a;
  int[] x=mergeSort(Arrays.copyOfRange(a,0,a.length / 2));
  int[] y=mergeSort(Arrays.copyOfRange(a,a.length / 2,a.length));
  return merge(x,y);
}

private void copyACls(final List<AccessControlLevel> accessControlLevels2){
  for (  AccessControlLevel acl : this.accessControlLevels) {
    accessControlLevels2.add(new AccessControlLevel(acl));
  }
}

public void put(ByteBuffer byteBuffer,int contentLength){
  if (contentLength > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException("contentLength is too large");
  }
  byteBuffer.get(bytes,this.contentLength,contentLength);
  this.contentLength+=contentLength;
}

private void handleResponse(AvsResponse response){
  boolean checkAfter=(avsQueue.size() == 0);
  if (response != null) {
    for (int i=response.size() - 1; i >= 0; i--) {
      if (response.get(i) instanceof AvsReplaceAllItem || response.get(i) instanceof AvsReplaceEnqueuedItem) {
        avsQueue.clear();
        response.remove(i);
      }
    }
    Log.i(TAG,"Adding " + response.size() + " items to our queue");
    avsQueue.addAll(response);
  }
  if (checkAfter) {
    checkQueue();
  }
}

protected synchronized void request(String stream){
  if (stream == null || stream.isEmpty()) {
    return;
  }
  stream=stream.toLowerCase(Locale.ENGLISH);
  FollowerInfo cachedInfo=cached.get(stream);
  if (cachedInfo == null || checkTimePassed(cachedInfo)) {
    if (type == Follower.Type.FOLLOWER) {
      api.requestFollowers(stream);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      api.requestSubscribers(stream);
    }
  }
 else {
    if (type == Follower.Type.FOLLOWER) {
      listener.receivedFollowers(cachedInfo);
    }
 else     if (type == Follower.Type.SUBSCRIBER) {
      listener.receivedSubscribers(cachedInfo);
    }
  }
}

boolean removeViewIfHidden(View view){
  final int index=mCallback.indexOfChild(view);
  if (index == -1) {
    if (mHiddenViews.remove(view) && DEBUG) {
      throw new IllegalStateException("view is in hidden list but not in view group");
    }
    return true;
  }
  if (mBucket.get(index)) {
    mBucket.remove(index);
    mCallback.removeViewAt(index);
    if (!mHiddenViews.remove(view) && DEBUG) {
      throw new IllegalStateException("removed a hidden view but it is not in hidden views list");
    }
    return true;
  }
  return false;
}

public String consumeCssIdentifier(){
  int start=pos;
  while (!isEmpty() && (matchesWord() || matchesAny('-','_')))   pos++;
  return queue.substring(start,pos);
}

@Ignore("TODO: test is disabled") @Test public void testPopulate1kbwrites(){
  final byte[] value=new byte[ENTRY_SIZE];
  Arrays.fill(value,(byte)77);
  for (int i=0; i < OP_COUNT; i++) {
    region.put(new Integer(i),value);
  }
  closeDown();
}

public void serialize(KXmlSerializer serializer) throws IOException {
  serializer.startTag(ns,TAG);
  serializeAttribute(serializer,NAME_ATTR,mName);
  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);
  serializeAttribute(serializer,DIGEST_ATTR,getDigest());
  if (SIGNATURE_TEST_PKG.equals(mName)) {
    serializer.attribute(ns,"signatureCheck","true");
  }
  mSuiteRoot.serialize(serializer);
  serializer.endTag(ns,TAG);
}

public ActivityResolveInfo(ResolveInfo resolveInfo){
  this.resolveInfo=resolveInfo;
}

public void rollback(Throwable t){
  log.debug("  ROLLBACK: deleting " + tempFile + " due to "+ t);
  try {
    fileContentStore.delete(tempFile,node);
  }
 catch (  Exception e) {
    t.addSuppressed(e);
  }
}

protected void parseGeometryString(){
  int i=0;
  byte[] bytes=geometryString.getBytes();
  xgrav=new String(bytes,0,1);
  for (i=2; i < bytes.length; i++) {
    if ((bytes[i] == '-') || (bytes[i] == '+'))     break;
  }
  if (i == bytes.length)   return;
  ygrav=(bytes[i] == '-') ? "-" : "+";
  xpos=Integer.parseInt(new String(bytes,1,i - 1));
  ++i;
  ypos=Integer.parseInt(new String(bytes,i,bytes.length - i));
}

@Override protected final synchronized boolean writeData(ByteBuffer data){
  AionServerPacket packet=sendMsgQueue.pollFirst();
  if (packet == null) {
    return false;
  }
  packet.setBuf(data);
  packet.write(this);
  return true;
}

protected boolean position(Projection proj){
  if (proj == null) {
    logger.fine("OMRasterObject: null projection in position!");
    return false;
  }
  projWidth=proj.getWidth();
  projHeight=proj.getHeight();
switch (renderType) {
case RENDERTYPE_LATLON:
    if (!proj.isPlotable(lat,lon)) {
      if (DEBUG) {
        logger.fine("OMRasterObject: point is not plotable!");
      }
      setNeedToReposition(true);
      return false;
    }
  point1=(Point)proj.forward(lat,lon,new Point());
break;
case RENDERTYPE_XY:
point1=new Point(x,y);
break;
case RENDERTYPE_OFFSET:
if (!proj.isPlotable(lat,lon)) {
if (DEBUG) {
logger.fine("OMRasterObject: point is not plotable!");
}
setNeedToReposition(true);
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
point1.x+=x;
point1.y+=y;
break;
case RENDERTYPE_UNKNOWN:
if (DEBUG) {
logger.fine("OMRasterObject.position(): ignoring unknown rendertype, wingin' it");
}
if (lat == 0 && lon == 0) {
if (x == 0 && y == 0) {
if (DEBUG) {
logger.fine("OMRasterObject.position(): Not enough info in object to place it reasonably.");
}
point1=new Point(-width,-height);
point2=new Point(0,0);
return false;
}
 else {
point1=new Point(x,y);
}
}
 else {
if (!proj.isPlotable(lat,lon)) {
logger.fine("OMRasterObject: point is not plotable!");
return false;
}
point1=(Point)proj.forward(lat,lon,new Point());
}
break;
}
point2=new Point(0,0);
point2.x=point1.x + width;
point2.y=point1.y + height;
setNeedToReposition(false);
return true;
}

public synchronized int lastIndexOf(Object object,int location){
  if (location < elementCount) {
    if (object != null) {
      for (int i=location; i >= 0; i--) {
        if (object.equals(elementData[i])) {
          return i;
        }
      }
    }
 else {
      for (int i=location; i >= 0; i--) {
        if (elementData[i] == null) {
          return i;
        }
      }
    }
    return -1;
  }
  throw arrayIndexOutOfBoundsException(location,elementCount);
}

@Override public boolean canUndo(){
  return !m_UndoList.isEmpty();
}

public java.lang.StringBuffer insert(int offset,char c){
  internal.insert(offset,c);
  return this;
}

public static boolean isAbsolutePath(String systemId){
  if (systemId == null)   return false;
  final File file=new File(systemId);
  return file.isAbsolute();
}

protected void calculateDestination(IFile uxf,ICompilationUnit referencingCompilationUnit,Destination dest) throws CoreException {
  IFile uxfDest=calculateImgDestination(uxf,referencingCompilationUnit);
  if (uxfDest != null) {
    dest.imgFileDestination=uxfDest;
  }
}

@Override public void onEvent(ProjectEvent event){
  if (event.getType() == ProjectEvent.EventType.UPDATED || event.getType() == ProjectEvent.EventType.CREATED) {
    update(event);
  }
}

protected abstract boolean onMouseClick(Point point);

private void remeasure(int width,int height){
  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);
  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);
  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
  for (int day=0; day < mNumDays; day++) {
    mEarliestStartHour[day]=25;
    mHasAllDayEvent[day]=false;
  }
  int maxAllDayEvents=mMaxAlldayEvents;
  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);
  if (mCellHeight < mMinCellHeight) {
    mCellHeight=mMinCellHeight;
  }
  mFirstCell=DAY_HEADER_HEIGHT;
  int allDayHeight=0;
  if (maxAllDayEvents > 0) {
    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;
    if (maxAllDayEvents == 1) {
      allDayHeight=SINGLE_ALLDAY_HEIGHT;
    }
 else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {
      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;
      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;
      }
    }
 else {
      if (mAnimateDayHeight != 0) {
        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);
      }
 else {
        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {
          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);
        }
 else         if (allDayHeight > maxAllAllDayHeight) {
          allDayHeight=maxAllAllDayHeight;
        }
      }
    }
    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;
  }
 else {
    mSelectionAllday=false;
  }
  mAlldayHeight=allDayHeight;
  mGridAreaHeight=height - mFirstCell;
  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();
  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);
  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);
  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;
  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();
  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);
  mEventGeometry.setHourHeight(mCellHeight);
  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));
  Event.computePositions(mEvents,minimumDurationMillis);
  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;
  if (DEBUG) {
    Log.e(TAG,"mViewStartY: " + mViewStartY);
    Log.e(TAG,"mMaxViewStartY: " + mMaxViewStartY);
  }
  if (mViewStartY > mMaxViewStartY) {
    mViewStartY=mMaxViewStartY;
    computeFirstHour();
  }
  if (mFirstHour == -1) {
    initFirstHour();
    mFirstHourOffset=0;
  }
  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {
    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;
  }
  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;
  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);
  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {
    mPopup.dismiss();
  }
  mPopup.setWidth(eventAreaWidth - 20);
  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);
}

public void updateVisibleIds(List<Integer> priority){
  if (mNativeTabContentManager != 0) {
    int idsSize=Math.min(mFullResThumbnailsMaxSize,priority.size());
    if (idsSize != mPriorityTabIds.length) {
      mPriorityTabIds=new int[idsSize];
    }
    for (int i=0; i < idsSize; i++) {
      mPriorityTabIds[i]=priority.get(i);
    }
    nativeUpdateVisibleIds(mNativeTabContentManager,mPriorityTabIds);
  }
}

public final void walkGraph(Hashtable semNodesTable){
  Integer uid=new Integer(myUID);
  if (semNodesTable.get(uid) != null)   return;
  semNodesTable.put(new Integer(myUID),this);
}

private void requestFragmenting(IgfsEntryInfo fileInfo){
  IgfsFileMap map=fileInfo.fileMap();
  assert map != null && !map.ranges().isEmpty();
  Map<UUID,Collection<IgfsFileAffinityRange>> grpMap=U.newHashMap(map.ranges().size());
  for (  IgfsFileAffinityRange range : map.ranges()) {
    UUID nodeId=igfsCtx.data().affinityNode(range.affinityKey()).id();
    Collection<IgfsFileAffinityRange> nodeRanges=grpMap.get(nodeId);
    if (nodeRanges == null) {
      nodeRanges=new LinkedList<>();
      grpMap.put(nodeId,nodeRanges);
    }
    nodeRanges.addAll(range.split(igfsCtx.data().groupBlockSize()));
  }
  Collection<UUID> nodeIds=new IdentityHashSet(grpMap.keySet());
  if (log.isDebugEnabled())   log.debug("Calculating fragmentizer groups for file [fileInfo=" + fileInfo + ", nodeIds="+ nodeIds+ ']');
  Object old=fragmentingFiles.putIfAbsent(fileInfo.id(),nodeIds);
  assert old == null;
  for (  Map.Entry<UUID,Collection<IgfsFileAffinityRange>> entry : grpMap.entrySet()) {
    UUID nodeId=entry.getKey();
    IgfsFragmentizerRequest msg=new IgfsFragmentizerRequest(fileInfo.id(),entry.getValue());
    try {
      if (log.isDebugEnabled())       log.debug("Sending fragmentizer request to remote node [nodeId=" + nodeId + ", fileId="+ fileInfo.id()+ ", msg="+ msg+ ']');
      sendWithRetries(nodeId,msg);
    }
 catch (    IgniteCheckedException e) {
      if (e.hasCause(ClusterTopologyCheckedException.class)) {
        if (log.isDebugEnabled())         log.debug("Failed to send fragmentizer request to remote node (node left grid): " + nodeId);
      }
 else       U.error(log,"Failed to send fragmentizer request to remote node [nodeId=" + nodeId + ", msg="+ msg+ ']',e);
      nodeIds.remove(nodeId);
    }
  }
  if (nodeIds.isEmpty()) {
    if (log.isDebugEnabled())     log.debug("Got empty wait set for fragmentized file: " + fileInfo);
    fragmentingFiles.remove(fileInfo.id(),nodeIds);
  }
}

public boolean showPreviousNotification(){
  int i=getSelectedIndex();
  if (i != -1 && i > 0) {
    model.setSelectedItem(model.getElementAt(i - 1));
    return true;
  }
  return false;
}

@Override public void writeExternal(ObjectOutput out) throws IOException {
  super.writeExternal(out);
  out.writeBoolean(isLeaf);
  out.writeInt(numEntries);
}

protected void addInputNode_internal(BNode inputNode){
  if (inputNodes.containsKey(inputNode.getId())) {
    log.warning("node " + inputNode.getId() + " already included in the input nodes of "+ nodeId);
  }
  inputNodes.put(inputNode.getId(),inputNode);
}

public static void initialize(final CDatabaseConfiguration configuration) throws CouldntLoadDriverException, CouldntConnectException, SQLException {
  checkDriver(configuration);
  final String url=POSTGRES_DRIVER + "//" + configuration.getHost()+ "/"+ POSTGRES_DEFAULT_DB;
  Connection connection=null;
  try {
    connection=DriverManager.getConnection(url,configuration.getUser(),configuration.getPassword());
  }
 catch (  final SQLException exception) {
    CUtilityFunctions.logException(exception);
    throw new CouldntConnectException(exception,exception.getErrorCode(),exception.getSQLState());
  }
  final String statement="CREATE DATABASE \"" + configuration.getName() + "\"";
  final PreparedStatement preparedStatement=connection.prepareStatement(statement);
  try {
    preparedStatement.execute();
  }
  finally {
    preparedStatement.close();
    connection.close();
  }
}

public List<FCEndpoint> showFcnsDatabase(Integer vsanId) throws NetworkDeviceControllerException {
  Map<Integer,String> vsanToWwns=getVsanWwns(vsanId);
  List<FCEndpoint> connections=new ArrayList<FCEndpoint>();
  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};
  StringBuilder buf=new StringBuilder();
  String cmd=MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.cmd");
  if (vsanId != null) {
    cmd=cmd + MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.vsan.cmd") + vsanId.toString()+ "\n";
  }
 else {
    cmd=cmd + "\n";
  }
  SSHPrompt prompt=sendWaitFor(cmd,defaultTimeout,prompts,buf);
  String[] lines=getLines(buf);
  String[] regex={MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.VSAN.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.portwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.nodewwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.fabricportwwn.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.ConnectedInterface.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.SwitchName.match"),MDSDialogProperties.getString("MDSDialog.showFcnsDatabase.deviceAlias.match")};
  String[] groups=new String[10];
  FCEndpoint conn=null;
  for (  String line : lines) {
    int index=match(line,regex,groups,Pattern.CASE_INSENSITIVE);
switch (index) {
case 0:
      conn=new FCEndpoint();
    conn.setFabricId(groups[0]);
  conn.setFcid(groups[1]);
String fabricWwn=vsanToWwns.get(new Integer(groups[0]));
if (fabricWwn != null) {
conn.setFabricWwn(fabricWwn);
}
connections.add(conn);
break;
case 1:
conn.setRemotePortName(groups[0]);
break;
case 2:
conn.setRemoteNodeName(groups[0]);
break;
case 3:
conn.setSwitchPortName(groups[0]);
break;
case 4:
conn.setSwitchInterface(groups[0]);
break;
case 5:
conn.setSwitchName(groups[0]);
break;
case 6:
conn.setRemotePortAlias(groups[0]);
}
}
return connections;
}

private void registerObjectRead(Object obj,int handle,boolean unshared) throws IOException {
  if (unshared) {
    obj=UNSHARED_OBJ;
  }
  int index=handle - ObjectStreamConstants.baseWireHandle;
  int size=objectsRead.size();
  while (index > size) {
    objectsRead.add(null);
    ++size;
  }
  if (index == size) {
    objectsRead.add(obj);
  }
 else {
    objectsRead.set(index,obj);
  }
}

public static void addExtensionHeader(String headerName,String className){
  nameMap.put(headerName.toLowerCase(),className);
}

public boolean merge(final Frame<? extends V> frame,final Interpreter<V> interpreter) throws AnalyzerException {
  if (top != frame.top) {
    throw new AnalyzerException(null,"Incompatible stack heights");
  }
  boolean changes=false;
  for (int i=0; i < locals + top; ++i) {
    V v=interpreter.merge(values[i],frame.values[i]);
    if (!v.equals(values[i])) {
      values[i]=v;
      changes=true;
    }
  }
  return changes;
}

public static void keytool(String cmd){
  log.info("keytool " + cmd);
  ArrayList<String> list=new ArrayList<String>();
  StringTokenizer st=new StringTokenizer(cmd," ");
  String quoteBuffer=null;
  while (st.hasMoreTokens()) {
    String token=st.nextToken();
    if (quoteBuffer == null) {
      if (token.startsWith("\""))       quoteBuffer=token.substring(1);
 else       list.add(token);
    }
 else     quoteBuffer+=" " + token;
    if (token.endsWith("\"")) {
      String str=quoteBuffer.substring(0,quoteBuffer.length() - 1);
      list.add(str);
      quoteBuffer=null;
    }
  }
  String[] args=new String[list.size()];
  list.toArray(args);
  try {
    KeyTool.main(args);
  }
 catch (  Exception e) {
  }
}

private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}

private void updatePropertyToValue2() throws Exception {
  properties.put(TEST_KEY,TEST_VALUE_2);
  updatePropertiesFile();
}

public void unassignServices(String universalId,Set serviceNames) throws AMConsoleException {
  if ((serviceNames != null) && !serviceNames.isEmpty()) {
    String[] params=new String[2];
    params[0]=universalId;
    String currentSvc="";
    try {
      AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);
      for (Iterator iter=serviceNames.iterator(); iter.hasNext(); ) {
        currentSvc=(String)iter.next();
        params[1]=currentSvc;
        logEvent("ATTEMPT_IDENTITY_UNASSIGN_SERVICE",params);
        amid.unassignService(currentSvc);
        logEvent("SUCCEED_IDENTITY_UNASSIGN_SERVICE",params);
      }
    }
 catch (    SSOException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent("SSO_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx);
      debug.warning("EntitiesModelImpl.unassignServices",e);
      throw new AMConsoleException(getErrorString(e));
    }
catch (    IdRepoException e) {
      String[] paramsEx={universalId,currentSvc,getErrorString(e)};
      logEvent("IDM_EXCEPTION_IDENTITY_UNASSIGN_SERVICE",paramsEx);
      debug.warning("EntitiesModelImpl.unassignServices",e);
      throw new AMConsoleException(getErrorString(e));
    }
  }
}

private Cluster<T> expandCluster(final Cluster<T> cluster,final T point,final List<T> neighbors,final Collection<T> points,final Map<Clusterable,PointStatus> visited){
  cluster.addPoint(point);
  visited.put(point,PointStatus.PART_OF_CLUSTER);
  List<T> seeds=new ArrayList<T>(neighbors);
  int index=0;
  while (index < seeds.size()) {
    final T current=seeds.get(index);
    PointStatus pStatus=visited.get(current);
    if (pStatus == null) {
      final List<T> currentNeighbors=getNeighbors(current,points);
      if (currentNeighbors.size() >= minPts) {
        seeds=merge(seeds,currentNeighbors);
      }
    }
    if (pStatus != PointStatus.PART_OF_CLUSTER) {
      visited.put(current,PointStatus.PART_OF_CLUSTER);
      cluster.addPoint(current);
    }
    index++;
  }
  return cluster;
}

private static Address GetFloatArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){
  if (traceJNI)   VM.sysWrite("JNI called: GetFloatArrayElements  \n");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    float[] sourceArray=(float[])env.getJNIRef(arrayJREF);
    int size=sourceArray.length;
    if (MemoryManager.willNeverMove(sourceArray)) {
      JNIGenericHelpers.setBoolStar(isCopyAddress,false);
      return Magic.objectAsAddress(sourceArray);
    }
 else {
      Address copyBuffer=sysCall.sysMalloc(size << LOG_BYTES_IN_FLOAT);
      if (copyBuffer.isZero()) {
        env.recordException(new OutOfMemoryError());
        return Address.zero();
      }
      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size << LOG_BYTES_IN_FLOAT);
      JNIGenericHelpers.setBoolStar(isCopyAddress,true);
      return copyBuffer;
    }
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return Address.zero();
  }
}

@Override public int parse(DateTimeParseContext context,CharSequence text,int position){
  int length=text.length();
  if (position > length) {
    throw new IndexOutOfBoundsException();
  }
  if (position == length) {
    return ~position;
  }
  char nextChar=text.charAt(position);
  if (nextChar == '+' || nextChar == '-') {
    return parseOffsetBased(context,text,position,position,OffsetIdPrinterParser.INSTANCE_ID_Z);
  }
 else   if (length >= position + 2) {
    char nextNextChar=text.charAt(position + 1);
    if (context.charEquals(nextChar,'U') && context.charEquals(nextNextChar,'T')) {
      if (length >= position + 3 && context.charEquals(text.charAt(position + 2),'C')) {
        return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
      }
      return parseOffsetBased(context,text,position,position + 2,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
 else     if (context.charEquals(nextChar,'G') && length >= position + 3 && context.charEquals(nextNextChar,'M') && context.charEquals(text.charAt(position + 2),'T')) {
      return parseOffsetBased(context,text,position,position + 3,OffsetIdPrinterParser.INSTANCE_ID_ZERO);
    }
  }
  PrefixTree tree=getTree(context);
  ParsePosition ppos=new ParsePosition(position);
  String parsedZoneId=tree.match(text,ppos);
  if (parsedZoneId == null) {
    if (context.charEquals(nextChar,'Z')) {
      context.setParsed(ZoneOffset.UTC);
      return position + 1;
    }
    return ~position;
  }
  context.setParsed(ZoneId.of(parsedZoneId));
  return ppos.getIndex();
}

private void prepareTransfers() throws LibUsbException {
  if (mAvailableTransfers == null) {
    mAvailableTransfers=new LinkedTransferQueue<>();
    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {
      Transfer transfer=LibUsb.allocTransfer();
      if (transfer == null) {
        throw new LibUsbException("couldn't allocate transfer",LibUsb.ERROR_NO_MEM);
      }
      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);
      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,"Buffer",USB_TIMEOUT_US);
      mAvailableTransfers.add(transfer);
    }
  }
}

private void outputFullLines() throws IOException {
  for (; ; ) {
    int leftLen=leftBuf.indexOf("\n");
    if (leftLen < 0) {
      return;
    }
    int rightLen=rightBuf.indexOf("\n");
    if (rightLen < 0) {
      return;
    }
    if (leftLen != 0) {
      out.write(leftBuf.substring(0,leftLen));
    }
    if (rightLen != 0) {
      writeSpaces(out,leftWidth - leftLen);
      out.write(rightBuf.substring(0,rightLen));
    }
    out.write('\n');
    leftBuf.delete(0,leftLen + 1);
    rightBuf.delete(0,rightLen + 1);
  }
}

@Secured public void addPay_Simple(long userId,BigDecimal amount,Date created,PaymentType payType,String details,boolean updateCache) throws ConcurrentUpdateSqlException, Exception {
  checkAccessFor_ADMIN();
  amount=amount.abs();
  long id=universal.nextSeqFor(payments);
  PaymentExt payment=PaymentExt.createSystemPayment(id,userId,amount,created,payType,details);
  BigDecimal newVal=doPayment(userId,payment,updateCache);
  log.info("pay added: userId=" + userId + (newVal != null ? ", newBalance=" + newVal : "")+ ", req="+ getReqInfoStr());
}

public void registerUnregisteredNamespaces(){
  for (int i=0; i < m_unregisteredExtensions.size(); i++) {
    String ns=(String)m_unregisteredExtensions.get(i);
    ExtensionNamespaceSupport extNsSpt=defineJavaNamespace(ns);
    if (extNsSpt != null)     m_extensions.add(extNsSpt);
  }
}

private void removeAllObjects(){
  logger.debug("CLEANING screen object list");
  texts.clear();
}

public Builder deleteDisplayName(){
  deleteFields.add("displayName");
  return this;
}

public static Type newType(AST ast,VariableDeclaration declaration){
  return newType(ast,declaration,null,null);
}

public void delete() throws IOException {
  close();
  Util.deleteContents(directory);
}

private void waitForIteratorsCleared(IgniteCache<String,Integer> cache,int secs) throws InterruptedException {
  for (int i=0; i < secs; i++) {
    try {
      cache.size();
      checkIteratorsCleared();
    }
 catch (    AssertionFailedError e) {
      if (i == 9) {
        for (int j=0; j < gridCount(); j++)         executeOnLocalOrRemoteJvm(j,new PrintIteratorStateTask());
        throw e;
      }
      log.info("Iterators not cleared, will wait");
      Thread.sleep(1000);
    }
  }
}

public void addLifecycleListener(LifecycleListener lifecycleListener){
  if (!lifecycleListeners.contains(lifecycleListener)) {
    lifecycleListeners.add(lifecycleListener);
  }
}

private int indexOf(String fullPath){
  for (int i=0, length=this.relativePaths.length; i < length; i++) {
    String currentRelativePath=this.relativePaths[i];
    if (currentRelativePath == null)     continue;
    String currentContainerPath=this.containerPaths[i];
    String currentFullPath=currentRelativePath.length() == 0 ? currentContainerPath : (currentContainerPath + '/' + currentRelativePath);
    if (encloses(currentFullPath,fullPath,i))     return i;
  }
  return -1;
}

boolean destroyVolume(boolean force){
  NaElement elem=new NaElement("volume-destroy");
  elem.addNewChild("force",Boolean.toString(force));
  elem.addNewChild("name",name);
  try {
    server.invokeElem(elem);
    return true;
  }
 catch (  Exception e) {
    String msg="Failed to destroy volume: " + name;
    log.error(msg,e);
    throw new NetAppException(msg,e);
  }
}

public static GeneralPath stackSpline(GeneralPath p,float[] pts,float epsilon,float slack,boolean closed,float tx,float ty){
  int npoints=0;
  for (; npoints < pts.length; ++npoints)   if (Float.isNaN(pts[npoints]))   break;
  return stackSpline(p,pts,0,npoints / 2,epsilon,slack,closed,tx,ty);
}

private boolean validateCooldownSetting(String appId,AutoScalerPolicyTrigger policyTrigger,String triggerId){
  AutoScalingDataStore stateStore=AutoScalingDataStoreFactory.getAutoScalingDataStore();
  AppAutoScaleState appState=null;
  appState=stateStore.getScalingState(appId);
  if (appState == null) {
    return true;
  }
 else   if ((appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_COMPLETED) && (appState.getInstanceCountState() != ScalingStateManager.SCALING_STATE_FAILED)) {
    long lastStartTime=appState.getLastActionStartTime();
    long currentTime=System.currentTimeMillis();
    boolean timeExpired=(currentTime - lastStartTime) > this.eventTimeout;
    if (timeExpired) {
      logger.debug("True: Last scaling action is not completed but it's time expired for application " + appId + ".");
      return true;
    }
    logger.debug("False: Last scaling action is not completed for application " + appId + ".");
    return false;
  }
 else {
    long cooldownEndtime=appState.getLastActionEndTime() + 1000L * getCooldownSecs(policyTrigger,triggerId);
    if (System.currentTimeMillis() < cooldownEndtime) {
      logger.debug("False: It's cooldown time for application " + appId + ". No scaling in action.");
      return false;
    }
  }
  return true;
}

private long convertToBytes(int megaBytes){
  long bytes=megaBytes;
  bytes=bytes * 1024 * 1024;
  return bytes;
}

public static int calcTextHeight(Paint paint,String demoText){
  Rect r=new Rect();
  paint.getTextBounds(demoText,0,demoText.length(),r);
  return r.height();
}

private String generateZonesetCloneName(String zonesetToClone){
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ex) {
    _log.warn(ex.getLocalizedMessage());
  }
  Calendar cal=Calendar.getInstance();
  DateFormat dateFormat=new SimpleDateFormat("MMddyy-HHmmss");
  String dateString=dateFormat.format(cal.getTime());
  String longName=MDSDialogProperties.getString("MDSDialog.zonesetCloneLongName.cmd");
  if (!longName.contains("!MDSDialog.zonesetCloneLongName.cmd!")) {
    return longName;
  }
  return "ViPR-" + zonesetToClone + "-"+ dateString;
}

protected abstract void writeSignatureBlock(byte[] signature,OutputStream out) throws IOException ;

private static Object invokeOrDie(final Method method,final Object object,final Object... params){
  try {
    return method.invoke(object,params);
  }
 catch (  IllegalAccessException e) {
    throw new RuntimeException("Couldn't use Java reflection to implement protocol message " + "reflection.",e);
  }
catch (  InvocationTargetException e) {
    final Throwable cause=e.getCause();
    if (cause instanceof RuntimeException) {
      throw (RuntimeException)cause;
    }
 else     if (cause instanceof Error) {
      throw (Error)cause;
    }
 else {
      throw new RuntimeException("Unexpected exception thrown by generated accessor method.",cause);
    }
  }
}

private StringBuffer buildSelectQuery(String schemaName,String tableName,ArrayList<OneRowChange.ColumnSpec> keys,ArrayList<OneRowChange.ColumnVal> keyValues){
  StringBuffer stmt=new StringBuffer();
  stmt.append("SELECT * FROM ");
  stmt.append(conn.getDatabaseObjectName(schemaName) + "." + conn.getDatabaseObjectName(tableName));
  stmt.append(" WHERE ");
  printColumnSpec(stmt,keys,keyValues,PrintMode.ASSIGNMENT," AND ");
  return stmt;
}

public void show(Animation anim){
  mAnim=anim;
  show();
}

public static boolean isUriKey(String key){
  return key.endsWith(".url") || key.endsWith(".uri");
}

public int receive(byte[] buffer,int offset,int count,int timeout){
  checkArrayBounds(buffer,offset,count);
  if (count == 0) {
    return 0;
  }
  byte[] data=buffer;
  if (offset > 0) {
    data=new byte[count];
  }
  IntOut bytesReceivedOut=new IntOut();
  try {
    IDevice.checkResult(LibIMobileDevice.idevice_connection_receive_timeout(getRef(),data,count,bytesReceivedOut,timeout));
    int bytesRead=bytesReceivedOut.getValue();
    if (bytesRead > 0 && data != buffer) {
      System.arraycopy(data,0,buffer,offset,bytesRead);
    }
    return bytesRead;
  }
  finally {
    bytesReceivedOut.delete();
  }
}

public synchronized void addOFChannelHandlerAndSendRole(OFChannelHandler h){
  connectedChannelHandlers.add(h);
  h.sendRoleRequest(this.role);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("staff",true);
  elementList=doc.getElementsByTagName("address");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.deleteData(4,50);
  childData=child.getData();
  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);
}

public boolean send(byte[] bytes){
  if (!connected)   return false;
  try {
    outputStream.write(bytes);
    outputStream.flush();
    return true;
  }
 catch (  IOException e) {
    connected=false;
    Log.e(TAG,"Fail to send data");
    return false;
  }
 finally {
    if (!connected) {
      closeConnection();
    }
  }
}

public synchronized void returnBuf(byte[] buf){
  if (buf == null || buf.length > mSizeLimit) {
    return;
  }
  mBuffersByLastUse.add(buf);
  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);
  if (pos < 0) {
    pos=-pos - 1;
  }
  mBuffersBySize.add(pos,buf);
  mCurrentSize+=buf.length;
  trim();
}

public CopyOnWriteArrayList(Collection c){
  Object[] elements=new Object[c.size()];
  int size=0;
  for (Iterator itr=c.iterator(); itr.hasNext(); ) {
    Object e=itr.next();
    elements[size++]=e;
  }
  setArray(elements);
}

private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {
  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());
  byte[] buffer=null;
  try {
    InputStream in=entity.getContent();
    if (in == null) {
      throw new ServerError();
    }
    buffer=mPool.getBuf(1024);
    int count;
    while ((count=in.read(buffer)) != -1) {
      bytes.write(buffer,0,count);
    }
    return bytes.toByteArray();
  }
  finally {
    try {
      entity.consumeContent();
    }
 catch (    IOException e) {
      VolleyLog.v("Error occured when calling consumingContent");
    }
    mPool.returnBuf(buffer);
    bytes.close();
  }
}

public void addTailArg(String arg){
  _tailArgs.add(arg);
}

private String translateBytesToString(byte[] bytes,long format,Transferable localeTransferable) throws IOException {
  Long lFormat=Long.valueOf(format);
  String charset=getBestCharsetForTextFormat(lFormat,localeTransferable);
  String eoln=(String)nativeEOLNs.get(lFormat);
  Integer terminators=(Integer)nativeTerminators.get(lFormat);
  int count;
  if (terminators != null) {
    int numTerminators=terminators.intValue();
    search:     for (count=0; count < (bytes.length - numTerminators + 1); count+=numTerminators) {
      for (int i=count; i < count + numTerminators; i++) {
        if (bytes[i] != 0x0) {
          continue search;
        }
      }
      break search;
    }
  }
 else {
    count=bytes.length;
  }
  String converted=new String(bytes,0,count,charset);
  if (eoln != null) {
    char[] buf=converted.toCharArray();
    char[] eoln_arr=eoln.toCharArray();
    converted=null;
    int j=0;
    boolean match;
    for (int i=0; i < buf.length; ) {
      if (i + eoln_arr.length > buf.length) {
        buf[j++]=buf[i++];
        continue;
      }
      match=true;
      for (int k=0, l=i; k < eoln_arr.length; k++, l++) {
        if (eoln_arr[k] != buf[l]) {
          match=false;
          break;
        }
      }
      if (match) {
        buf[j++]='\n';
        i+=eoln_arr.length;
      }
 else {
        buf[j++]=buf[i++];
      }
    }
    converted=new String(buf,0,j);
  }
  return converted;
}

public InlineURIHandler(final String namespace){
  this.namespace=namespace;
  this.len=namespace.length();
}

private double[] CalcVariableCoef(Variogram variogram,KrigingPoint p,List<KrigingPoint> NNPoints){
  int n=NNPoints.size();
  double[] mat=new double[n + 1];
  double dist=0.0;
  for (int i=0; i < n; i++) {
    dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - p.x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - p.y,2)));
    mat[i]=getTheoreticalSVValue(dist,variogram);
  }
  mat[n]=1;
  return mat;
}

public static Object deserialization(String filePath){
  ObjectInputStream in=null;
  try {
    in=new ObjectInputStream(new FileInputStream(filePath));
    Object o=in.readObject();
    in.close();
    return o;
  }
 catch (  FileNotFoundException e) {
    throw new RuntimeException("FileNotFoundException occurred. ",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException("ClassNotFoundException occurred. ",e);
  }
catch (  IOException e) {
    throw new RuntimeException("IOException occurred. ",e);
  }
 finally {
    IOUtils.close(in);
  }
}

private static boolean isMergedSegment(String segName){
  if (segName.contains(".")) {
    return true;
  }
  return false;
}

public static CipherParameters makePBEMacParameters(PBEKeySpec keySpec,int type,int hash,int keySize){
  PBEParametersGenerator generator=makePBEGenerator(type,hash);
  byte[] key;
  CipherParameters param;
  key=convertPassword(type,keySpec);
  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());
  param=generator.generateDerivedMacParameters(keySize);
  for (int i=0; i != key.length; i++) {
    key[i]=0;
  }
  return param;
}

public void addEmojiconGroup(List<EaseEmojiconGroupEntity> groupEntitieList){
  for (int i=0; i < groupEntitieList.size(); i++) {
    EaseEmojiconGroupEntity groupEntity=groupEntitieList.get(i);
    emojiconGroupList.add(groupEntity);
    pagerView.addEmojiconGroup(groupEntity,i == groupEntitieList.size() - 1 ? true : false);
    tabBar.addTab(groupEntity.getIcon());
  }
}

public void updateEnd(Logger log){
  m_instanceCount++;
  m_sampleCount++;
  double end=System.currentTimeMillis();
  double temp=end - m_updateStart;
  m_cumulativeTime+=temp;
  boolean toFastToMeasure=false;
  if ((end - m_startTime) >= m_sampleTime) {
    computeUpdate(end);
    if (log != null) {
      log.statusMessage(m_statusMessagePrefix + "Processed " + m_instanceCount+ " insts @ "+ m_avInstsPerSec / m_numSamples + " insts/sec" + (toFastToMeasure ? "*" : ""));
    }
    m_sampleCount=0;
    m_cumulativeTime=0;
    m_startTime=System.currentTimeMillis();
  }
}

public boolean shouldInclude(final Path path){
  return includeMatchers.size() == 0 || matches(path,includeMatchers);
}

private List<View> addView(View view,List<View> cache){
  if (cache == null) {
    cache=new LinkedList<View>();
  }
  cache.add(view);
  return cache;
}

public ArrayList<MechSummary> generateUnits(int num,UnitFilter filter){
  ArrayList<MechSummary> retVal=new ArrayList<>();
  for (int i=0; i < num; i++) {
    MechSummary ms=generateUnit(filter);
    if (ms != null) {
      retVal.add(ms);
    }
  }
  return retVal;
}

static public Automaton concatenate(Automaton a1,Automaton a2){
  return concatenate(Arrays.asList(a1,a2));
}

public void contentsChanged(ListDataEvent e){
  Object oldSelection=selectedItemReminder;
  Object newSelection=dataModel.getSelectedItem();
  if (oldSelection == null || !oldSelection.equals(newSelection)) {
    selectedItemChanged();
    if (!selectingItem) {
      fireActionEvent();
    }
  }
}

protected void adjustCanopies(double[] densities){
  if (m_numClustersRequested < 0) {
    assignCanopiesToCanopyCenters();
    m_trainingData=new Instances(m_canopies,0);
    return;
  }
  if (m_canopies.numInstances() > m_numClustersRequested) {
    int[] sortedIndexes=Utils.stableSort(densities);
    Instances finalCanopies=new Instances(m_canopies,0);
    int count=0;
    for (int i=sortedIndexes.length - 1; count < m_numClustersRequested; i--) {
      finalCanopies.add(m_canopies.instance(sortedIndexes[i]));
      count++;
    }
    m_canopies=finalCanopies;
    List<double[][]> tempCanopyCenters=new ArrayList<double[][]>();
    List<double[]> tempT2Dists=new ArrayList<double[]>();
    List<double[]> tempMissings=new ArrayList<double[]>();
    count=0;
    for (int i=sortedIndexes.length - 1; count < finalCanopies.numInstances(); i--) {
      tempCanopyCenters.add(m_canopyCenters.get(sortedIndexes[i]));
      tempT2Dists.add(m_canopyT2Density.get(sortedIndexes[i]));
      tempMissings.add(m_canopyNumMissingForNumerics.get(sortedIndexes[i]));
      count++;
    }
    m_canopyCenters=tempCanopyCenters;
    m_canopyT2Density=tempT2Dists;
    m_canopyNumMissingForNumerics=tempMissings;
  }
 else   if (m_canopies.numInstances() < m_numClustersRequested && m_trainingData != null && m_trainingData.numInstances() > 0) {
    Random r=new Random(getSeed());
    for (int i=0; i < 10; i++) {
      r.nextInt();
    }
    HashMap<DecisionTableHashKey,Integer> initC=new HashMap<DecisionTableHashKey,Integer>();
    DecisionTableHashKey hk=null;
    for (int i=0; i < m_canopies.numInstances(); i++) {
      try {
        hk=new DecisionTableHashKey(m_canopies.instance(i),m_canopies.numAttributes(),true);
        initC.put(hk,null);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (int j=m_trainingData.numInstances() - 1; j >= 0; j--) {
      int instIndex=r.nextInt(j + 1);
      try {
        hk=new DecisionTableHashKey(m_trainingData.instance(instIndex),m_trainingData.numAttributes(),true);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      if (!initC.containsKey(hk)) {
        Instance newInstance=m_trainingData.instance(instIndex);
        m_canopies.add(newInstance);
        double[] density=new double[1];
        density[0]=1.0;
        m_canopyT2Density.add(density);
        double[][] center=new double[newInstance.numAttributes()][0];
        double[] numMissingNumerics=new double[newInstance.numAttributes()];
        updateCanopyCenter(newInstance,center,numMissingNumerics);
        m_canopyCenters.add(center);
        m_canopyNumMissingForNumerics.add(numMissingNumerics);
        initC.put(hk,null);
      }
      m_trainingData.swap(j,instIndex);
      if (m_canopies.numInstances() == m_numClustersRequested) {
        break;
      }
    }
  }
  assignCanopiesToCanopyCenters();
  m_trainingData=new Instances(m_canopies,0);
}

protected void createFromHValues(int[] hValues,int partitions){
  Arrays.sort(hValues);
  this.splits=new int[partitions];
  int maxH=0x7fffffff;
  for (int i=0; i < splits.length; i++) {
    int quantile=(int)((long)(i + 1) * hValues.length / partitions);
    this.splits[i]=quantile == hValues.length ? maxH : hValues[quantile];
  }
}

private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
  iInstant=(LocalDateTime)oos.readObject();
  DateTimeFieldType type=(DateTimeFieldType)oos.readObject();
  iField=type.getField(iInstant.getChronology());
}

public void testConstructor_InetAddressIInetAddressI() throws Exception {
  int sport=startServer("Cons InetAddress,I,InetAddress,I");
  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),0);
  assertNotNull(ssl);
  assertEquals(sport,ssl.getPort());
  ssl.close();
  try {
    getSSLSocket(InetAddress.getLocalHost(),8081,InetAddress.getLocalHost(),8082);
    fail();
  }
 catch (  IOException expected) {
  }
  try {
    getSSLSocket(InetAddress.getLocalHost(),-1,InetAddress.getLocalHost(),sport + 1);
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),-1);
    fail();
  }
 catch (  IllegalArgumentException expected) {
  }
  try {
    getSSLSocket(InetAddress.getLocalHost(),Integer.MIN_VALUE,InetAddress.getLocalHost(),sport + 1);
    fail();
  }
 catch (  IOException expectedOnRI) {
    assertTrue(StandardNames.IS_RI);
  }
catch (  IllegalArgumentException expectedOnAndroid) {
    assertFalse(StandardNames.IS_RI);
  }
  try {
    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),Integer.MAX_VALUE);
    fail();
  }
 catch (  IllegalArgumentException expectedOnAndroid) {
    assertFalse(StandardNames.IS_RI);
  }
}

private String convertUserInputIntoAFullyQualifiedPath(final String userInput){
  if (FileUtils.denotesAbsolutePath(userInput)) {
    return userInput;
  }
  if (userInput.startsWith(HOME_DIRECTORY_SYMBOL)) {
    Assert.notNull(home,"Home directory could not be determined from system properties");
    if (userInput.length() > 1) {
      return home + userInput.substring(1);
    }
  }
  String fullPath=getWorkingDirectoryAsString() + userInput;
  return fullPath;
}

static final int resizeStamp(int n){
  return Integer.numberOfLeadingZeros(n) | (1 << (RESIZE_STAMP_BITS - 1));
}

public byte readByte() throws IOException {
  return dis.readByte();
}

protected static byte[] hkdfExpand(byte[] ikm,byte[] salt,byte[] info,int length) throws InvalidKeyException, NoSuchAlgorithmException {
  HKDFBytesGenerator hkdf=new HKDFBytesGenerator(new SHA256Digest());
  hkdf.init(new HKDFParameters(ikm,salt,info));
  byte[] okm=new byte[length];
  hkdf.generateBytes(okm,0,length);
  return okm;
}

public boolean isEmoteIgnored(Emoticon emote){
  return ignoredEmotes.contains(emote.code);
}

public boolean isPropertyAllowed(Name name){
  return propertiesAllowed.contains(name);
}

@SuppressWarnings("unchecked") public void readFile(String fileName) throws JDOMException, IOException {
  if (checkFile(fileName)) {
    Element root=rootFromName(fileName);
    Element roster;
    if (root == null) {
      log.warn("consist file could not be read");
      return;
    }
    roster=root.getChild("roster");
    if (roster == null) {
      log.debug("consist file does not contain a roster entry");
      return;
    }
    Iterator<Element> consistIterator=root.getDescendants(new ElementFilter("consist"));
    try {
      Element consist;
      do {
        consist=consistIterator.next();
        consistFromXml(consist);
      }
 while (consistIterator.hasNext());
    }
 catch (    NoSuchElementException nde) {
      log.debug("end of consist list");
    }
  }
 else {
    log.info("Consist file does not exist.  One will be created if necessary.");
  }
}

public void testConstructorSignBytesZeroNull2(){
  byte aBytes[]={};
  int aSign=0;
  byte rBytes[]={0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,aNumber.signum());
}

private int accept(FileDescriptor ssfd,FileDescriptor newfd,InetSocketAddress[] isaa) throws IOException {
  return accept0(ssfd,newfd,isaa);
}

protected void transcode(File file,Transcoder transcoder) throws IOException, TranscoderException {
  transcoder.addTranscodingHint(XMLAbstractTranscoder.KEY_XML_PARSER_VALIDATING,Boolean.FALSE);
  SVGDocument doc=cloneDocument();
  TranscoderInput input=new TranscoderInput(doc);
  OutputStream out=new BufferedOutputStream(new FileOutputStream(file));
  TranscoderOutput output=new TranscoderOutput(out);
  transcoder.transcode(input,output);
  out.flush();
  out.close();
}

public static void f(String tag,String msg,Object... args){
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}

private void reportProgress(State state,InnerState innerState){
  long now=System.currentTimeMillis();
  if (innerState.mBytesSoFar - innerState.mBytesNotified > Constants.MIN_PROGRESS_STEP && now - innerState.mTimeLastNotification > Constants.MIN_PROGRESS_TIME) {
    mInfo.mCurrentBytes=innerState.mBytesSoFar;
    mDB.updateDownloadCurrentBytes(mInfo);
    innerState.mBytesNotified=innerState.mBytesSoFar;
    innerState.mTimeLastNotification=now;
    long totalBytesSoFar=innerState.mBytesThisSession + mService.mBytesSoFar;
    if (Constants.LOGVV) {
      Log.v(Constants.TAG,"downloaded " + mInfo.mCurrentBytes + " out of "+ mInfo.mTotalBytes);
      Log.v(Constants.TAG,"     total " + totalBytesSoFar + " out of "+ mService.mTotalLength);
    }
    mService.notifyUpdateBytes(totalBytesSoFar);
  }
}

@Override public Document newDocument(){
  return new mf.org.apache.xerces.dom.DocumentImpl();
}

@HLEFunction(nid=0xD1E0A01E,version=150,checkInsideInterrupt=true) public int __sceSasSetGrain(int sasCore,int grain){
  checkSasHandleGood(sasCore);
  grainSamples=grain;
  return 0;
}

public void handleTblRequestHandlerListButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {
  try {
    Map values=getValues();
    onBeforeSaveProfile(values);
    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);
    SCSAML2SOAPBindingRequestHandlerListAddViewBean vb=(SCSAML2SOAPBindingRequestHandlerListAddViewBean)getViewBean(SCSAML2SOAPBindingRequestHandlerListAddViewBean.class);
    unlockPageTrail();
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());
  }
}

protected static void drawDataPoint(double x,double y,double xprev,double yprev,int size,int shape,Graphics gx){
  drawDataPoint(x,y,size,shape,gx);
  gx.drawLine((int)x,(int)y,(int)xprev,(int)yprev);
}

public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){
  for (int i=1; i < keys.length; ++i) {
    if (keys[i] < keys[i - 1]) {
      throw new IllegalArgumentException("keys must be sorted ascending");
    }
  }
  Label def=newLabel();
  Label end=newLabel();
  if (keys.length > 0) {
    int len=keys.length;
    int min=keys[0];
    int max=keys[len - 1];
    int range=max - min + 1;
    if (useTable) {
      Label[] labels=new Label[range];
      Arrays.fill(labels,def);
      for (int i=0; i < len; ++i) {
        labels[keys[i] - min]=newLabel();
      }
      mv.visitTableSwitchInsn(min,max,def,labels);
      for (int i=0; i < range; ++i) {
        Label label=labels[i];
        if (label != def) {
          mark(label);
          generator.generateCase(i + min,end);
        }
      }
    }
 else {
      Label[] labels=new Label[len];
      for (int i=0; i < len; ++i) {
        labels[i]=newLabel();
      }
      mv.visitLookupSwitchInsn(def,keys,labels);
      for (int i=0; i < len; ++i) {
        mark(labels[i]);
        generator.generateCase(keys[i],end);
      }
    }
  }
  mark(def);
  generator.generateDefault();
  mark(end);
}

static boolean chunkSet(InternalDistributedMember recipient,Set set,int CHUNK_SIZE_IN_BYTES,boolean includeValues,ObjectIntProcedure proc) throws IOException {
  Iterator it=set.iterator();
  boolean keepGoing=true;
  boolean sentLastChunk=false;
  final HeapDataOutputStream mos=new HeapDataOutputStream(InitialImageOperation.CHUNK_SIZE_IN_BYTES + 2048,recipient.getVersionObject());
  do {
    mos.reset();
    int avgItemSize=0;
    int itemCount=0;
    while ((mos.size() + avgItemSize) < InitialImageOperation.CHUNK_SIZE_IN_BYTES && it.hasNext()) {
      Object key=it.next();
      DataSerializer.writeObject(key,mos);
      itemCount++;
      avgItemSize=mos.size() / itemCount;
    }
    DataSerializer.writeObject((Object)null,mos);
    int lastMsg=it.hasNext() ? 0 : 1;
    keepGoing=proc.executeWith(mos,lastMsg);
    sentLastChunk=lastMsg == 1 && keepGoing;
  }
 while (keepGoing && it.hasNext());
  return sentLastChunk;
}

private int[] parseMetaDataInformation() throws UserError {
  int[] selectedColumns=new int[metaData.size()];
  Set<String> usedColumnNames=new HashSet<>();
  int columnIndex=0;
  int usedColumnIndex=0;
  for (  ColumnMetaData column : metaData) {
    if (!column.isRemoved()) {
      selectedColumns[usedColumnIndex]=columnIndex;
      usedColumnIndex++;
      String columnName=column.getName();
      if (!usedColumnNames.contains(columnName)) {
        usedColumnNames.add(columnName);
      }
 else {
        throw new UserError(null,"data_import.non_unique_column_name",columnName);
      }
    }
    columnIndex++;
  }
  int[] attributeColumns=Arrays.copyOf(selectedColumns,usedColumnIndex);
  return attributeColumns;
}

static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());
}

SSLSession toSession(byte[] data,String host,int port){
  ByteArrayInputStream bais=new ByteArrayInputStream(data);
  DataInputStream dais=new DataInputStream(bais);
  try {
    int type=dais.readInt();
    if (type != OPEN_SSL) {
      log(new AssertionError("Unexpected type ID: " + type));
      return null;
    }
    int length=dais.readInt();
    byte[] sessionData=new byte[length];
    dais.readFully(sessionData);
    int count=dais.readInt();
    X509Certificate[] certs=new X509Certificate[count];
    for (int i=0; i < count; i++) {
      length=dais.readInt();
      byte[] certData=new byte[length];
      dais.readFully(certData);
      certs[i]=OpenSSLX509Certificate.fromX509Der(certData);
    }
    return new OpenSSLSessionImpl(sessionData,host,port,certs,this);
  }
 catch (  IOException e) {
    log(e);
    return null;
  }
}

private void addDumpFile(){
  addDumpFile(dumpFile);
}

private static boolean dateByOrdinal(DateTimeFormatterBuilder bld,Collection<DateTimeFieldType> fields,boolean extended,boolean strictISO){
  boolean reducedPrec=false;
  if (fields.remove(DateTimeFieldType.year())) {
    bld.append(yearElement());
    if (fields.remove(DateTimeFieldType.dayOfYear())) {
      appendSeparator(bld,extended);
      bld.appendDayOfYear(3);
    }
 else {
      reducedPrec=true;
    }
  }
 else   if (fields.remove(DateTimeFieldType.dayOfYear())) {
    bld.appendLiteral('-');
    bld.appendDayOfYear(3);
  }
  return reducedPrec;
}

private void writeAttr(String name,String val) throws IOException {
  writeAttr(name,val,true);
}

public boolean isPageInRange(int pageNumber){
  for (int ind=0; ind < sequenceStarts.size(); ind++) {
    if (sequenceStarts.get(ind) <= pageNumber && pageNumber <= sequenceEnds.get(ind))     return true;
  }
  return false;
}

public void dispose(){
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
  }
  mDisposed=true;
  mContext=null;
  mServiceConn=null;
  mService=null;
  mPurchaseListener=null;
}

@SuppressWarnings("unchecked") public static <T extends DimensionalItemObject>List<T> asTypedList(Collection<DimensionalItemObject> collection){
  List<T> list=new ArrayList<>();
  if (collection != null) {
    for (    DimensionalItemObject object : collection) {
      list.add((T)object);
    }
  }
  return list;
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public PutIndexTemplateRequest aliases(XContentBuilder source){
  return aliases(source.bytes());
}

void addNewTable(String name,int tdefPageNumber,Short type,String linkedDbName,String linkedTableName) throws IOException {
  addTable(name,Integer.valueOf(tdefPageNumber),type,linkedDbName,linkedTableName);
  addToSystemCatalog(name,tdefPageNumber,type,linkedDbName,linkedTableName,_tableParentId);
  addToAccessControlEntries(tdefPageNumber,_tableParentId,_newTableSIDs);
}

public static String hashpw(byte[] password0,final String salt){
  BCrypt B;
  String real_salt;
  byte passwordb[]=null, saltb[], hashed[];
  char minor=(char)0;
  int rounds, off=0;
  final StringBuffer rs=new StringBuffer();
  if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {
    throw new IllegalArgumentException("Invalid salt version");
  }
  if (salt.charAt(2) == '$') {
    off=3;
  }
 else {
    minor=salt.charAt(2);
    if (minor != 'a' || salt.charAt(3) != '$') {
      throw new IllegalArgumentException("Invalid salt revision");
    }
    off=4;
  }
  if (salt.charAt(off + 2) > '$') {
    throw new IllegalArgumentException("Missing salt rounds");
  }
  rounds=Integer.parseInt(salt.substring(off,off + 2));
  real_salt=salt.substring(off + 3,off + 25);
  try {
    if (minor >= (byte)'a') {
      passwordb=Arrays.copyOf(password0,password0.length + 1);
      passwordb[passwordb.length - 1]=(byte)0;
    }
 else {
      passwordb=Arrays.copyOf(password0,password0.length);
    }
    saltb=decode_base64(real_salt,BCRYPT_SALT_LEN);
    B=new BCrypt();
    hashed=B.crypt_raw(passwordb,saltb,rounds,bf_crypt_ciphertext.clone());
  }
  finally {
    if (password0 != null) {
      Arrays.fill(password0,(byte)'\0');
      password0=null;
    }
    if (passwordb != null) {
      Arrays.fill(passwordb,(byte)'\0');
      passwordb=null;
    }
  }
  rs.append("$2");
  if (minor >= 'a') {
    rs.append(minor);
  }
  rs.append("$");
  if (rounds < 10) {
    rs.append("0");
  }
  if (rounds > 30) {
    throw new IllegalArgumentException("rounds exceeds maximum (30)");
  }
  rs.append(Integer.toString(rounds));
  rs.append("$");
  rs.append(encode_base64(saltb,saltb.length));
  rs.append(encode_base64(hashed,bf_crypt_ciphertext.length * 4 - 1));
  return rs.toString();
}

public void removeListener(@NotNull ConfigurationListener listener){
  if (myListeners != null) {
    myListeners.remove(listener);
    if (myListeners.isEmpty()) {
      myListeners=null;
    }
  }
}

void reclaimScrapViews(List<View> views){
  if (mViewTypeCount == 1) {
    views.addAll(mCurrentScrap);
  }
 else {
    final int viewTypeCount=mViewTypeCount;
    final ArrayList<View>[] scrapViews=mScrapViews;
    for (int i=0; i < viewTypeCount; ++i) {
      final ArrayList<View> scrapPile=scrapViews[i];
      views.addAll(scrapPile);
    }
  }
}

public void doWindowOpen(){
  doConnect();
}

public boolean schedule(Runnable task,ClassLoader loader){
  boolean isPriority=false;
  boolean isQueue=true;
  boolean isWake=true;
  return scheduleImpl(task,loader,MAX_EXPIRE,isPriority,isQueue,isWake);
}

public static int hash2(int hash,Object x,Object y){
  return 0x20000000 | (hash + 7 * System.identityHashCode(x) + 11 * System.identityHashCode(y));
}

public static double[] parseVectorString(String vectorString){
  String[] parsedString=vectorString.split(",");
  double[] vector=new double[parsedString.length];
  for (int j=0; j < parsedString.length; j++) {
    double val=Utils.doubleParsable(parsedString[j]);
    vector[j]=Double.isNaN(val) ? 0 : val;
  }
  return vector;
}

public String globalInfo(){
  return "A filter that removes a range of" + " attributes from the dataset. Will " + "re-order the remaining attributes "+ "if invert matching sense is turned "+ "on and the attribute column indices "+ "are not specified in ascending order.";
}

public static <T>Stream<T> concat(Stream<? extends T> a,Stream<? extends T> b){
  Objects.requireNonNull(a);
  Objects.requireNonNull(b);
  @SuppressWarnings("unchecked") Spliterator<T> split=new Streams.ConcatSpliterator.OfRef<>((Spliterator<T>)a.spliterator(),(Spliterator<T>)b.spliterator());
  Stream<T> stream=StreamSupport.stream(split,a.isParallel() || b.isParallel());
  return stream.onClose(Streams.composedClose(a,b));
}

@Ignore @Test public void test_DR_PGS_4NODES_2NODESDOWN_Validate_Receiver() throws Exception {
  Integer lnPort=(Integer)vm0.invoke(null);
  Integer nyPort=(Integer)vm1.invoke(null);
  createCacheInVMs(nyPort,vm2,vm3);
  createReceiverInVMs(vm2,vm3);
  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  startSenderInVMs("ln",vm4,vm5,vm6,vm7);
  vm2.invoke(null);
  vm3.invoke(null);
  vm4.invoke(null);
  vm5.invoke(null);
  vm6.invoke(null);
  vm7.invoke(null);
  Thread.sleep(60000);
{
    AsyncInvocation inv1=vm7.invokeAsync(null);
    Thread.sleep(1000);
    AsyncInvocation inv2=vm4.invokeAsync(null);
    Thread.sleep(2000);
    AsyncInvocation inv3=vm6.invokeAsync(null);
    Thread.sleep(1500);
    AsyncInvocation inv4=vm5.invokeAsync(null);
    try {
      inv1.join();
      inv2.join();
      inv3.join();
      inv4.join();
    }
 catch (    Exception e) {
      Assert.fail("UnExpected Exception",e);
    }
  }
  vm6.invoke(null);
  vm7.invoke(null);
  vm2.invoke(null);
}

public void findAndInit(Iterator it){
  while (it.hasNext()) {
    findAndInit(it.next());
  }
}

public static DataSourcePropertiesInterface decodeXML(Document document,String elementName){
  if ((document == null) || (elementName == null)) {
    return null;
  }
  Map<String,String> map=new LinkedHashMap<String,String>();
  NodeList nodeList=document.getElementsByTagName(elementName);
  if (nodeList.getLength() > 0) {
    Node node=nodeList.item(0);
    Node child=node.getFirstChild();
    while (child != null) {
      if (child.getNodeType() == Node.ELEMENT_NODE) {
        map.put(child.getNodeName(),child.getTextContent());
      }
      child=child.getNextSibling();
    }
    return DataSourceConnectorFactory.getDataSourceProperties(map);
  }
 else {
    return DataSourceConnectorFactory.getNoDataSource();
  }
}

@Override public char next(){
  ++docPos;
  if (docPos < segmentEnd || segmentEnd >= doc.getLength()) {
    return text.next();
  }
  try {
    doc.getText(segmentEnd,doc.getLength() - segmentEnd,text);
  }
 catch (  BadLocationException e) {
    throw new RuntimeException(e);
  }
  segmentEnd+=text.count;
  return text.current();
}

private void adjustRowHeights(JTable table){
  for (int row=0; row < table.getRowCount(); row++) {
    int rowHeight=table.getRowHeight();
    for (int column=0; column < table.getColumnCount(); column++) {
      Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column);
      rowHeight=Math.max(rowHeight,comp.getPreferredSize().height);
    }
    table.setRowHeight(row,rowHeight);
  }
}

public List<URI> volumeURIs(List<URI> uris,boolean delete,boolean remediate,ValCk... checks){
  List<URI> remediatedURIs=new ArrayList<URI>();
  List<Volume> volumes=dbClient.queryObject(Volume.class,uris);
  List<Volume> remediatedVolumes=volumes(volumes,delete,remediate,checks);
  for (  Volume volume : remediatedVolumes) {
    remediatedURIs.add(volume.getId());
  }
  return remediatedURIs;
}

private FormatString[] parse(String s){
  ArrayList<FormatString> al=new ArrayList<>();
  Matcher m=fsPattern.matcher(s);
  for (int i=0, len=s.length(); i < len; ) {
    if (m.find(i)) {
      if (m.start() != i) {
        checkText(s,i,m.start());
        al.add(new FixedString(s.substring(i,m.start())));
      }
      al.add(new FormatSpecifier(m));
      i=m.end();
    }
 else {
      checkText(s,i,len);
      al.add(new FixedString(s.substring(i)));
      break;
    }
  }
  return al.toArray(new FormatString[al.size()]);
}

public int size(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    return count;
  }
  finally {
    lock.unlock();
  }
}

private void updateIndexColumnButtons(){
  indexRemoveButton.setEnabled(false);
  indexUpButton.setEnabled(false);
  indexDownButton.setEnabled(false);
  int index=selectedColumns.getSelectionIndex();
  if (index >= 0) {
    indexRemoveButton.setEnabled(true);
    if (index > 0) {
      indexUpButton.setEnabled(true);
    }
 else     if (index < selectedColumns.getItemCount() - 1) {
      indexDownButton.setEnabled(true);
    }
  }
}

public String urlForPOISearch(String tag,BoundingBox bb,int limit,int timeout){
  StringBuilder s=new StringBuilder();
  s.append(mService + "?data=");
  String sBB="(" + bb.getLatSouth() + ","+ bb.getLonWest()+ ","+ bb.getLatNorth()+ ","+ bb.getLonEast()+ ")";
  String data="[out:json][timeout:" + timeout + "];("+ "node["+ tag+ "]"+ sBB+ ";"+ "way["+ tag+ "]"+ sBB+ ";"+ "relation["+ tag+ "]"+ sBB+ ";"+ ");out qt center "+ limit+ " tags;";
  Log.d(BonusPackHelper.LOG_TAG,"data=" + data);
  s.append(URLEncoder.encode(data));
  return s.toString();
}

public void waitForDecodingToFinish(){
  while (isDecoding) {
    try {
      Thread.sleep(100);
    }
 catch (    final InterruptedException e) {
      LogWriter.writeLog("Exception: " + e.getMessage());
      isDecoding=false;
    }
  }
}

private static String wikiToPlainText(String content){
  content=content.replaceAll("\\[\\[[iI]mage:[^\\]]*\\]\\]","");
  content=content.replaceAll("(?s)<!--.*?-->","");
  content=content.replaceAll("(?s)<ref>.*?</ref>","");
  content=content.replaceAll("(?s)\\{\\{([^{}]*?\\{\\{[^{}]*?\\}\\})+[^{}].*?\\}\\}","");
  content=content.replaceAll("(?s)\\{\\{.*?\\}\\}","");
  content=content.replaceAll("(?s)\\{\\|.*?\\|\\}","");
  content=content.replaceAll("\\[\\[[^\\]]*\\|","");
  content=content.replaceAll("\\[\\[","");
  content=content.replaceAll("\\]\\]","");
  content=content.replaceAll("(?s)<.*?>","");
  content=content.trim();
  final int size=content.length();
  int endOfFirstParagraph=content.indexOf("\n",50);
  if (endOfFirstParagraph < 0) {
    endOfFirstParagraph=size;
  }
  content=content.substring(0,Math.min(endOfFirstParagraph,1024));
  return content;
}

public final byte[] update(byte[] input){
  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {
    throw new IllegalStateException();
  }
  if (input == null) {
    throw new IllegalArgumentException("input == null");
  }
  if (input.length == 0) {
    return null;
  }
  return spiImpl.engineUpdate(input,0,input.length);
}

public static void e(String tag,String msg,Object... args){
  if (sLevel > LEVEL_ERROR) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.e(tag,msg);
}

private static int createPackedParams(SunGraphics2D sg2d,GlyphList gl){
  return (((gl.usePositions() ? 1 : 0) << OFFSET_POSITIONS) | ((gl.isSubPixPos() ? 1 : 0) << OFFSET_SUBPIXPOS) | ((gl.isRGBOrder() ? 1 : 0) << OFFSET_RGBORDER)| ((sg2d.lcdTextContrast & 0xff) << OFFSET_CONTRAST));
}

public static int update(String sql,Object[] args){
  Connection c=null;
  PreparedStatement p=null;
  try {
    c=getConnection();
    if (c == null)     return -1;
    p=c.prepareStatement(sql);
    int order=1;
    if (args != null) {
      for (int i=0; i < args.length; i++) {
        Object o=args[i];
        setParameter(p,order++,o);
      }
    }
    return p.executeUpdate();
  }
 catch (  Exception e) {
    if (log.isErrorEnabled())     log.error(sql + toString(args),e);
  }
 finally {
    close(p,c);
  }
  return 0;
}

public boolean isLockSubject(){
  return true;
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("acronym");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
{
    boolean success=false;
    try {
      child.deleteData(40,3);
    }
 catch (    DOMException ex) {
      success=(ex.code == DOMException.INDEX_SIZE_ERR);
    }
    assertTrue("throw_INDEX_SIZE_ERR",success);
  }
}

@Override public int hashCode(){
  int code=0;
  if (fPublicId != null) {
    code+=fPublicId.hashCode();
  }
  if (fLiteralSystemId != null) {
    code+=fLiteralSystemId.hashCode();
  }
  if (fBaseSystemId != null) {
    code+=fBaseSystemId.hashCode();
  }
  if (fExpandedSystemId != null) {
    code+=fExpandedSystemId.hashCode();
  }
  if (fNamespace != null) {
    code+=fNamespace.hashCode();
  }
  return code;
}

public QuickActionView addAction(Action action){
  checkShown();
  mActions.add(action);
  return this;
}

public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){
  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;
}

protected boolean display(File helpFile) throws HelpException {
  if (helpFile.exists()) {
    loadAndWrite(helpFile);
    return true;
  }
 else {
    File notFound=new File(helpDir,NOT_FOUND);
    if (notFound.exists())     loadAndWrite(notFound);
 else     throw new HelpException("Topic not found, try 'help' for more information");
    return false;
  }
}

public static void storeLocation(Context context,LatLng location){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  SharedPreferences.Editor editor=prefs.edit();
  editor.putLong(PREFERENCES_LAT,Double.doubleToRawLongBits(location.latitude));
  editor.putLong(PREFERENCES_LNG,Double.doubleToRawLongBits(location.longitude));
  editor.apply();
}

public Point2D either(){
  return best1;
}

@Override public boolean equals(Object object){
  if (this == object) {
    return true;
  }
  if (object instanceof List) {
    List<?> list=(List<?>)object;
    if (list.size() != size()) {
      return false;
    }
    Iterator<?> it1=iterator(), it2=list.iterator();
    while (it1.hasNext()) {
      Object e1=it1.next(), e2=it2.next();
      if (!(e1 == null ? e2 == null : e1.equals(e2))) {
        return false;
      }
    }
    return true;
  }
  return false;
}

public static String rowToString(JSONArray ja){
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < ja.length(); i+=1) {
    if (i > 0) {
      sb.append(',');
    }
    Object object=ja.opt(i);
    if (object != null) {
      String string=object.toString();
      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {
        sb.append('"');
        int length=string.length();
        for (int j=0; j < length; j+=1) {
          char c=string.charAt(j);
          if (c >= ' ' && c != '"') {
            sb.append(c);
          }
        }
        sb.append('"');
      }
 else {
        sb.append(string);
      }
    }
  }
  sb.append('\n');
  return sb.toString();
}

private static void removeTable(Connection conn,String name) throws SQLException {
  name=name.replace('.','_');
  Statement stat=conn.createStatement();
  stat.execute("DROP TABLE " + name);
  DBUtil.commitEL(conn);
}

public boolean containsCategory(String category){
  return !hiddenBugCategorySet.contains(category);
}

public static boolean isVolumeFullCopySource(Volume volume,DbClient dbClient){
  boolean isFullCopySource=false;
  StringSet fullCopyIds=volume.getFullCopies();
  if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) {
    Iterator<String> fullCopyIdsIter=fullCopyIds.iterator();
    while (fullCopyIdsIter.hasNext()) {
      URI fullCopyURI=URI.create(fullCopyIdsIter.next());
      Volume fullCopyVolume=dbClient.queryObject(Volume.class,fullCopyURI);
      if ((fullCopyVolume != null) && (!fullCopyVolume.getInactive())) {
        isFullCopySource=true;
      }
    }
  }
  return isFullCopySource;
}

@Override public void assertEquals(String message,Object expectedObj,Object actualObj){
  LinearRegressionModel expected=(LinearRegressionModel)expectedObj;
  LinearRegressionModel actual=(LinearRegressionModel)actualObj;
  message=message + " - Linear Regression Model \"" + actual.getSource()+ "\" does not match the expected Model";
  Assert.assertArrayEquals(message + " : coefficients are not equal",expected.getCoefficients(),actual.getCoefficients(),1E-15);
  Assert.assertArrayEquals(message + " : probabilities are not equal",expected.getProbabilities(),actual.getProbabilities(),1E-15);
  Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributeNames(),actual.getSelectedAttributeNames());
  Assert.assertArrayEquals(message + " : selected attributes are not equal",expected.getSelectedAttributes(),actual.getSelectedAttributes());
  Assert.assertArrayEquals(message + " : standard errors are not equal",expected.getStandardErrors(),actual.getStandardErrors(),1E-15);
  Assert.assertArrayEquals(message + " : standardized coefficients are not equal",expected.getStandardizedCoefficients(),actual.getStandardizedCoefficients(),1E-15);
  Assert.assertArrayEquals(message + " : tolerances are not equal",expected.getTolerances(),actual.getTolerances(),1E-15);
  Assert.assertArrayEquals(message + " : t statistics are not equal",expected.getTStats(),actual.getTStats(),1E-15);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("staff",true);
  elementList=doc.getElementsByTagName("address");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.replaceData(30,5,"98665");
  childData=child.getData();
  assertEquals("characterdataReplaceDataEndAssert","1230 North Ave. Dallas, Texas 98665",childData);
}

public static Map<String,Object> entityMaintPermCheck(DispatchContext dctx,Map<String,? extends Object> context){
  GenericValue userLogin=(GenericValue)context.get("userLogin");
  Locale locale=(Locale)context.get("locale");
  Security security=dctx.getSecurity();
  Map<String,Object> resultMap=null;
  if (security.hasPermission("ENTITY_MAINT",userLogin)) {
    resultMap=ServiceUtil.returnSuccess();
    resultMap.put("hasPermission",true);
  }
 else {
    resultMap=ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"WebtoolsPermissionError",locale));
    resultMap.put("hasPermission",false);
  }
  return resultMap;
}

public void testQuorumSucceed(){
  quorum.succeed();
  quorum.fail();
  assertEquals(callbackResult.get(),0);
  quorum.fail();
  quorum.succeed();
  assertEquals(callbackResult.get(),1);
}

public void requestAfterExplanation(@NonNull String[] permissions){
  ArrayList<String> permissionsToRequest=new ArrayList<>();
  for (  String permissionName : permissions) {
    if (isPermissionDeclined(permissionName)) {
      permissionsToRequest.add(permissionName);
    }
 else {
      permissionCallback.onPermissionPreGranted(permissionName);
    }
  }
  if (permissionsToRequest.isEmpty())   return;
  permissions=permissionsToRequest.toArray(new String[permissionsToRequest.size()]);
  context.requestPermissions(permissions,REQUEST_PERMISSIONS);
}

static void pauseThread(long duration){
  try {
    Thread.sleep(duration);
  }
 catch (  Exception e) {
    s_logger.warn("Exception while trying to sleep",e);
  }
}

final public void println(String v){
  try {
    _out.println(v);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

public int read(char cbuf[],int offset,int length) throws IOException {
  return sd.read(cbuf,offset,length);
}

public int read() throws IOException {
  int val;
  if ((val=is.read()) < 0) {
    return -1;
  }
switch (val & 0xf0) {
case 0xc0:
case 0xd0:
    val=((val & 0x1f) << 6) | (is.read() & 0x3f);
  break;
case 0xe0:
val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);
break;
case 0xf0:
throw new UnsupportedEncodingException();
default :
break;
}
return val;
}

private static boolean CallNonvirtualBooleanMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {
  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualBooleanMethodV  \n");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    Object obj=env.getJNIRef(objJREF);
    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Boolean,true);
    return Reflection.unwrapBoolean(returnObj);
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return false;
  }
}

private boolean rContainsRMInstruction(ProgramBlock pb,String varName){
  if (pb instanceof WhileProgramBlock) {
    WhileProgramBlock tmp=(WhileProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof IfProgramBlock) {
    IfProgramBlock tmp=(IfProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocksIfBody())     if (rContainsRMInstruction(c,varName))     return true;
    for (    ProgramBlock c : tmp.getChildBlocksElseBody())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof ForProgramBlock) {
    ForProgramBlock tmp=(ForProgramBlock)pb;
    for (    ProgramBlock c : tmp.getChildBlocks())     if (rContainsRMInstruction(c,varName))     return true;
  }
 else   if (pb instanceof FunctionProgramBlock) {
  }
 else {
    for (    Instruction inst : pb.getInstructions()) {
      String instStr=inst.toString();
      if (instStr.contains("rmfilevar" + Lop.OPERAND_DELIMITOR + varName) || instStr.contains("rmvar" + Lop.OPERAND_DELIMITOR + varName)) {
        return true;
      }
    }
  }
  return false;
}

public ProjectImporter(final File rootFolder){
  assertNotNull("Root folder cannot be null.",rootFolder);
  assertTrue("Root folder does not exist: " + rootFolder,rootFolder.exists());
  assertTrue("Root folder must be a folder. But was a file: " + rootFolder,rootFolder.isDirectory());
  assertTrue("Root folder directory content cannot be read: " + rootFolder,rootFolder.canRead());
  assertTrue("No files were found in the directory: " + rootFolder,null != rootFolder.listFiles());
  this.rootFolder=rootFolder;
}

public void testDoubles() throws Exception {
  double[] values=new double[]{Double.NEGATIVE_INFINITY,-2.3E25,-1.0E15,-1.0,-1.0E-1,-1.0E-2,-0.0,+0.0,1.0E-2,1.0E-1,1.0,1.0E15,2.3E25,Double.POSITIVE_INFINITY,Double.NaN};
  long[] encoded=new long[values.length];
  for (int i=0; i < values.length; i++) {
    encoded[i]=NumericUtils.doubleToSortableLong(values[i]);
    assertTrue("forward and back conversion should generate same double",Double.compare(values[i],NumericUtils.sortableLongToDouble(encoded[i])) == 0);
  }
  for (int i=1; i < encoded.length; i++) {
    assertTrue("check sort order",encoded[i - 1] < encoded[i]);
  }
}

public static boolean isRegistered(Class<?> clazz){
  return regModules.containsKey(clazz.getName());
}

private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){
  final String address=environment.getNextVariableString();
  final String index=environment.getNextVariableString();
  final String tmpVar=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals("0")) {
    final String isZeroCondition=environment.getNextVariableString();
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,"-" + immediateNodeValue,dw,tmpVar2));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,"-" + immediateNodeValue,dw,tmpVar3));
    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));
  }
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));
  return new Pair<String,String>(address,registerNodeValue1);
}

public Class<?> loadClass(String name) throws ClassNotFoundException {
  return Class.forName(name);
}

public void waitForOperations(){
  operator.waitForOperations();
}

private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){
  if (mode == BYTE_COMPACTION_MODE_LATCH) {
    int count=0;
    long value=0;
    char[] decodedData=new char[6];
    int[] byteCompactedCodewords=new int[6];
    boolean end=false;
    int nextCode=codewords[codeIndex++];
    while ((codeIndex < codewords[0]) && !end) {
      byteCompactedCodewords[count++]=nextCode;
      value=900 * value + nextCode;
      nextCode=codewords[codeIndex++];
      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {
        codeIndex--;
        end=true;
      }
 else {
        if ((count % 5 == 0) && (count > 0)) {
          for (int j=0; j < 6; ++j) {
            decodedData[5 - j]=(char)(value % 256);
            value>>=8;
          }
          result.append(decodedData);
          count=0;
        }
      }
    }
    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {
      byteCompactedCodewords[count++]=nextCode;
    }
    for (int i=0; i < count; i++) {
      result.append((char)byteCompactedCodewords[i]);
    }
  }
 else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {
    int count=0;
    long value=0;
    boolean end=false;
    while (codeIndex < codewords[0] && !end) {
      int code=codewords[codeIndex++];
      if (code < TEXT_COMPACTION_MODE_LATCH) {
        count++;
        value=900 * value + code;
      }
 else {
        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {
          codeIndex--;
          end=true;
        }
      }
      if ((count % 5 == 0) && (count > 0)) {
        char[] decodedData=new char[6];
        for (int j=0; j < 6; ++j) {
          decodedData[5 - j]=(char)(value & 0xFF);
          value>>=8;
        }
        result.append(decodedData);
        count=0;
      }
    }
  }
  return codeIndex;
}

protected boolean isAllTestComponentsInTarget(Geometry testGeom){
  List coords=ComponentCoordinateExtracter.getCoordinates(testGeom);
  for (Iterator i=coords.iterator(); i.hasNext(); ) {
    Coordinate p=(Coordinate)i.next();
    int loc=targetPointLocator.locate(p);
    if (loc == Location.EXTERIOR)     return false;
  }
  return true;
}

private Object createInner(SimpleObject post,RequestContext context) throws ResponseException {
  try {
    String xml=completeXform(convertUuidsToIds(post));
    File file=File.createTempFile("projectbuendia",null);
    processor.processXForm(xml,file.getAbsolutePath(),true,context.getRequest());
  }
 catch (  IOException e) {
    throw new GenericRestException("Error storing xform data",e);
  }
catch (  ResponseException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ConversionException("Error processing xform data",e);
  }
  Encounter encounter=guessEncounterFromXformSubmission(post);
  if (encounter == null) {
    return post;
  }
  SimpleObject returnJson=new SimpleObject();
  EncounterResource.populateJsonProperties(encounter,returnJson);
  return returnJson;
}

public Endpoint(URI endpointUrl,SecurityMode... modes){
  if (modes == null || endpointUrl == null)   throw new IllegalArgumentException("null arg");
  for (  SecurityMode m : modes) {
    if (m == null)     throw new IllegalArgumentException("null arg");
    hash=13 * hash + m.hashCode();
  }
  this.endpointUrl=endpointUrl.toString();
  this.modes=modes;
  this.endpointConfiguration=EndpointConfiguration.defaults();
  hash=13 * hash + endpointUrl.hashCode();
}

protected Value parseValue() throws IOException, RDFParseException, RDFHandlerException {
  int c=peekCodePoint();
  if (c == '<') {
    return parseURI();
  }
 else   if (c == ':' || TurtleUtil.isPrefixStartChar(c)) {
    return parseQNameOrBoolean();
  }
 else   if (c == '_') {
    return parseNodeID();
  }
 else   if (c == '"' || c == '\'') {
    return parseQuotedLiteral();
  }
 else   if (ASCIIUtil.isNumber(c) || c == '.' || c == '+' || c == '-') {
    return parseNumber();
  }
 else   if (c == -1) {
    throwEOFException();
    return null;
  }
 else {
    reportFatalError("Expected an RDF value here, found '" + new String(Character.toChars(c)) + "'");
    return null;
  }
}

public TimeSeriesCollection(){
  this(null,TimeZone.getDefault());
}

private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {
  int stepType;
  int stepCount=0;
  boolean foundDorDS=false;
  boolean foundSelf=false;
  boolean foundDS=false;
  int nodeTestType=OpCodes.NODETYPE_NODE;
  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {
    if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false;
    stepCount++;
    if (stepCount > 3)     return false;
    boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType);
    if (mightBeProximate)     return false;
switch (stepType) {
case OpCodes.FROM_FOLLOWING:
case OpCodes.FROM_FOLLOWING_SIBLINGS:
case OpCodes.FROM_PRECEDING:
case OpCodes.FROM_PRECEDING_SIBLINGS:
case OpCodes.FROM_PARENT:
case OpCodes.OP_VARIABLE:
case OpCodes.OP_EXTFUNCTION:
case OpCodes.OP_FUNCTION:
case OpCodes.OP_GROUP:
case OpCodes.FROM_NAMESPACE:
case OpCodes.FROM_ANCESTORS:
case OpCodes.FROM_ANCESTORS_OR_SELF:
case OpCodes.FROM_ATTRIBUTES:
case OpCodes.MATCH_ATTRIBUTE:
case OpCodes.MATCH_ANY_ANCESTOR:
case OpCodes.MATCH_IMMEDIATE_ANCESTOR:
      return false;
case OpCodes.FROM_ROOT:
    if (1 != stepCount)     return false;
  break;
case OpCodes.FROM_CHILDREN:
if (!foundDS && !(foundDorDS && foundSelf)) return false;
break;
case OpCodes.FROM_DESCENDANTS_OR_SELF:
foundDS=true;
case OpCodes.FROM_DESCENDANTS:
if (3 == stepCount) return false;
foundDorDS=true;
break;
case OpCodes.FROM_SELF:
if (1 != stepCount) return false;
foundSelf=true;
break;
default :
throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));
}
nodeTestType=compiler.getStepTestType(stepOpCodePos);
int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);
if (nextStepOpCodePos < 0) break;
if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) {
if (compiler.countPredicates(stepOpCodePos) > 0) {
return false;
}
}
stepOpCodePos=nextStepOpCodePos;
}
return true;
}

public static <E>List<E> of(E e1,E e2,E e3){
  List<E> list=new ArrayList<>();
  list.add(e1);
  list.add(e2);
  list.add(e3);
  return list;
}

public int alloc(int size){
  int index=n;
  int len=array.length;
  if (n + size >= len) {
    byte[] aux=new byte[len + blockSize];
    System.arraycopy(array,0,aux,0,len);
    array=aux;
  }
  n+=size;
  return index;
}

@Override public void addAttribute(String name,float value){
  String str=Float.toString(value);
  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);
  current.setAttribute(name,str);
}

@RequestMapping(value="/container/{containerId}/application/{applicationName}",method=RequestMethod.POST) @ResponseBody public JsonResponse createDirectory(@PathVariable final String containerId,@PathVariable final String applicationName,@RequestParam("path") String path) throws ServiceException, CheckException, IOException {
  if (logger.isDebugEnabled()) {
    logger.debug("containerId:" + containerId);
    logger.debug("applicationName:" + applicationName);
    logger.debug("path:" + path);
  }
  fileService.createDirectory(applicationName,containerId,path);
  return new HttpOk();
}

public void fill_ellipse_arr(PlaEllipse[] p_ellipse_arr,Graphics p_g,Color p_color,double p_translucency_factor){
  if (p_color == null)   return;
  if (p_ellipse_arr.length <= 0)   return;
  GeneralPath draw_path=new GeneralPath(GeneralPath.WIND_EVEN_ODD);
  for (  PlaEllipse curr_ellipse : p_ellipse_arr) {
    Point2D center=coordinate_transform.board_to_screen(curr_ellipse.center);
    double bigger_radius=coordinate_transform.board_to_screen(curr_ellipse.bigger_radius);
    if (!point_near_rectangle(center.getX(),center.getY(),(Rectangle)p_g.getClip(),bigger_radius)) {
      continue;
    }
    double smaller_radius=coordinate_transform.board_to_screen(curr_ellipse.smaller_radius);
    Ellipse2D draw_ellipse=new Ellipse2D.Double(center.getX() - bigger_radius,center.getY() - smaller_radius,2 * bigger_radius,2 * smaller_radius);
    double rotation=coordinate_transform.board_to_screen_angle(curr_ellipse.rotation);
    AffineTransform affine_transform=new AffineTransform();
    affine_transform.rotate(rotation,center.getX(),center.getY());
    Shape rotated_ellipse=affine_transform.createTransformedShape(draw_ellipse);
    draw_path.append(rotated_ellipse,false);
  }
  Graphics2D g2=(Graphics2D)p_g;
  g2.setColor(p_color);
  set_translucency(g2,p_translucency_factor);
  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2.fill(draw_path);
}

@Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){
}

private void refreshChallengeCounts(){
  mDueChallengeCounts=mDueChallengeLogic.getDueChallengeCounts(mCategories);
}

public Identity(final int dim){
  this(dim,EnumSet.noneOf(Address.Flags.class));
}

private ImageData awtToSwt(final BufferedImage bufferedImage,final int width,final int height){
  final int[] awtPixels=new int[width * height];
  final ImageData swtImageData=new ImageData(width,height,24,PALETTE_DATA);
  swtImageData.transparentPixel=TRANSPARENT_COLOR;
  final int step=swtImageData.depth / 8;
  final byte[] data=swtImageData.data;
  bufferedImage.getRGB(0,0,width,height,awtPixels,0,width);
  for (int i=0; i < height; i++) {
    int idx=(0 + i) * swtImageData.bytesPerLine + 0 * step;
    for (int j=0; j < width; j++) {
      final int rgb=awtPixels[j + i * width];
      for (int k=swtImageData.depth - 8; k >= 0; k-=8) {
        data[idx++]=(byte)(rgb >> k & 0xFF);
      }
    }
  }
  return swtImageData;
}

public static boolean isUnlimitedStrengthPolicyAvailable(){
  try {
    return Cipher.getMaxAllowedKeyLength("AES") >= 256;
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return false;
}

public long rsslim(){
  return Long.parseLong(fields[24]);
}

public void addTotals(Info_Column[] layout){
  addTotals((ColumnInfo[])layout);
}

private void fillStackTrace(StringBuffer buffer,StackTraceElement[] elements){
  for (int index=0; index < elements.length; index++) {
    buffer.append(elements[index]);
    buffer.append("\n");
  }
}

public static boolean isFileTypeSupported(int fileType){
  List providers=getMidiFileWriters();
  for (int i=0; i < providers.size(); i++) {
    MidiFileWriter writer=(MidiFileWriter)providers.get(i);
    if (writer.isFileTypeSupported(fileType)) {
      return true;
    }
  }
  return false;
}

public void makeImmutable(){
  if (isMutable) {
    isMutable=false;
  }
}

public static double uniform(){
  return random.nextDouble();
}

public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException("SMSFlatFileObject.modify: " + "One or more arguments is null or empty");
  }
  String objKey=objName.toLowerCase();
  String filepath=null;
  mRWLock.readRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg="SMSFlatFileObject.modify: object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    filepath=mNameMap.getProperty(objKey);
    if (filepath == null) {
      String errmsg="SMSFlatFileObject.modify: object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg="SMSFlatFileObject.modify: Attributes file for object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    if (!hasSunXmlKeyValue) {
      hasSunXmlKeyValue=(props.getProperty(SMSEntry.ATTR_XML_KEYVAL) == null) ? false : true;
    }
    if (hasSunXmlKeyValue) {
      deleteSunXmlKeyValFiles(filehandle.getParentFile());
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,props.getProperty(SMSEntry.ATTR_XML_KEYVAL));
      createSunXmlKeyValFiles(filehandle.getParentFile(),xmlKeyVals);
    }
  }
  finally {
    mRWLock.writeDone();
  }
}

private AMSetupDSConfig(){
  Map map=ServicesDefaultValues.getDefaultValues();
  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);
  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);
  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);
  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);
  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);
  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);
  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);
}

private boolean compareAndIncrementWorkerCount(int expect){
  return ctl.compareAndSet(expect,expect + 1);
}

private void makeItems(int fingerPosition,List<View> viewList){
  if (fingerPosition >= viewList.size()) {
    return;
  }
  for (int i=0; i < viewList.size(); i++) {
    int translationY=Math.min(Math.max(Math.abs(fingerPosition - i) * intervalHeight,10),maxTranslationHeight);
    updateItemHeightAnimator(viewList.get(i),translationY);
  }
}

private boolean pathIsWindows(String path){
  if (path != null && path.length() > 1) {
    return (Character.isLetter(path.charAt(0)) && path.charAt(1) == ':') || (path.startsWith("//") || path.startsWith("\\\\"));
  }
  return false;
}

Object processCHAR(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {
  if (getSupportsAVT()) {
    try {
      AVT avt=new AVT(handler,uri,name,rawName,value,owner);
      if ((avt.isSimple()) && (value.length() != 1)) {
        handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);
        return null;
      }
      return avt;
    }
 catch (    TransformerException te) {
      throw new org.xml.sax.SAXException(te);
    }
  }
 else {
    if (value.length() != 1) {
      handleError(handler,XSLTErrorResources.INVALID_TCHAR,new Object[]{name,value},null);
      return null;
    }
    return new Character(value.charAt(0));
  }
}

public static Element addChildElementValue(Element element,String childElementName,String childElementValue,Document document){
  Element newElement=addChildElement(element,childElementName,document);
  newElement.appendChild(document.createTextNode(childElementValue));
  return newElement;
}

public boolean isSegmentBalanced(){
  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;
  MAcctSchemaElement[] elements=m_acctSchema.getAcctSchemaElements();
  for (int i=0; i < elements.length; i++) {
    MAcctSchemaElement ase=elements[i];
    if (ase.isBalanced() && !isSegmentBalanced(ase.getElementType()))     return false;
  }
  return true;
}

Attributes parseAttributes() throws JasperException {
  AttributesImpl attrs=new AttributesImpl();
  reader.skipSpaces();
  while (parseAttribute(attrs))   reader.skipSpaces();
  return attrs;
}

public static byte[] readBinaryFile(File sourceFile){
  byte[] result=null;
  try {
    BufferedInputStream input;
    input=new BufferedInputStream(new FileInputStream(sourceFile));
    int num=input.available();
    result=new byte[num];
    input.read(result,0,num);
    input.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    result=null;
  }
  return result;
}

@SuppressWarnings("rawtypes") public void test_streamAPI(){
  final List<IBindingSet> expectedSolutions=new ArrayList<IBindingSet>();
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var("x"),new Constant<IV>(termId));
    expectedSolutions.add(expected);
  }
{
    final IBindingSet expected=new ListBindingSet();
    expected.set(Var.var("x"),new Constant<IV>(termId));
    expected.set(Var.var("y"),new Constant<IV>(blobIV));
    expectedSolutions.add(expected);
  }
  doEncodeDecodeTest(expectedSolutions);
}

public void addTerm(SplitCondition condition){
  terms.add(condition);
}

@Override protected void thresholdReached() throws IOException {
  if (prefix != null) {
    outputFile=File.createTempFile(prefix,suffix,directory);
  }
  FileOutputStream fos=new FileOutputStream(outputFile);
  memoryOutputStream.writeTo(fos);
  currentOutputStream=fos;
  memoryOutputStream=null;
}

public void removeIndexInterval(int index0,int index1){
  int rmMinIndex=Math.min(index0,index1);
  int rmMaxIndex=Math.max(index0,index1);
  int gapLength=(rmMaxIndex - rmMinIndex) + 1;
  for (int i=rmMinIndex; i <= maxIndex; i++) {
    setState(i,value.get(i + gapLength));
  }
  int leadIndex=this.leadIndex;
  if (leadIndex == 0 && rmMinIndex == 0) {
  }
 else   if (leadIndex > rmMaxIndex) {
    leadIndex=this.leadIndex - gapLength;
  }
 else   if (leadIndex >= rmMinIndex) {
    leadIndex=rmMinIndex - 1;
  }
  int anchorIndex=this.anchorIndex;
  if (anchorIndex == 0 && rmMinIndex == 0) {
  }
 else   if (anchorIndex > rmMaxIndex) {
    anchorIndex=this.anchorIndex - gapLength;
  }
 else   if (anchorIndex >= rmMinIndex) {
    anchorIndex=rmMinIndex - 1;
  }
  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {
    updateLeadAnchorIndices(anchorIndex,leadIndex);
  }
  fireValueChanged();
}

public void rebuildEventList(boolean resetSelected){
  if (logger.isLoggable(Level.FINE)) {
    logger.fine("rebuilding list");
  }
  allEvents=null;
  activeEvents=null;
  hideDetails();
  initInterface(getActiveEvents(),resetSelected);
  highlightCurrentEvent(currentTime);
  firePropertyChange(ActiveEventsProperty,null,getActiveEvents());
}

public DiskStoreFactory createDiskStoreFactory(){
  return new DiskStoreFactoryImpl(this);
}

public static boolean deleteDirectorySubdirectories(String rootDirectory){
  if ((rootDirectory == null)) {
    return false;
  }
  boolean didSuccessfullyDeleteAllDirectories=true;
  try {
    List<File> files=getListOfFilesInADirectory(rootDirectory);
    for (    File file : files) {
      if (file.isDirectory()) {
        boolean deleteSuccess=deleteDirectoryAndContents(file);
        if (!deleteSuccess) {
          logger.debug("Warning - failed to delete " + file.getAbsolutePath());
          didSuccessfullyDeleteAllDirectories=false;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));
    return false;
  }
  return didSuccessfullyDeleteAllDirectories;
}

public void put(byte[] buffer,int offset,int count){
  if (count > (bytes.length - this.contentLength)) {
    throw new IllegalArgumentException("buffer is too large");
  }
  System.arraycopy(buffer,offset,bytes,this.contentLength,count);
  this.contentLength+=count;
}

private void markReserved(int ropReg,int category){
  reservedRopRegs.set(ropReg,ropReg + category,true);
}

public static void registerDefaultResolvers(){
synchronized (resolverList) {
    resolverList.add(new ResourceResolver(new ResolverFragment()));
    resolverList.add(new ResourceResolver(new ResolverLocalFilesystem()));
    resolverList.add(new ResourceResolver(new ResolverXPointer()));
    resolverList.add(new ResourceResolver(new ResolverDirectHTTP()));
  }
}

private boolean processAuthenticationResponse(final HttpMethod method){
  LOG.trace("enter HttpMethodBase.processAuthenticationResponse(" + "HttpState, HttpConnection)");
  try {
switch (method.getStatusCode()) {
case HttpStatus.SC_UNAUTHORIZED:
      return processWWWAuthChallenge(method);
case HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED:
    return processProxyAuthChallenge(method);
default :
  return false;
}
}
 catch (Exception e) {
if (LOG.isErrorEnabled()) {
LOG.error(e.getMessage(),e);
}
return false;
}
}

private void release(ByteArray byteArray){
synchronized (syncRoot) {
    if (availableByteArrays.size() >= maxAvailableArraysCount) {
      return;
    }
    if (!availableByteArrays.contains(byteArray)) {
      availableByteArrays.add(byteArray);
    }
  }
}

public Pipeline(){
}

@Override public boolean connectionAllowed(EventSetDescriptor esd){
  return connectionAllowed(esd.getName());
}

@Override public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){
  if (marker instanceof ValueMarker) {
    ValueMarker vm=(ValueMarker)marker;
    double value=vm.getValue();
    Range range=axis.getRange();
    if (!range.contains(value)) {
      return;
    }
    final Composite savedComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    PlotOrientation orientation=plot.getOrientation();
    double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());
    Line2D line=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);
    }
 else {
      throw new IllegalStateException();
    }
    g2.setPaint(marker.getPaint());
    g2.setStroke(marker.getStroke());
    g2.draw(line);
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coordinates=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);
      Rectangle2D rect=TextUtils.calcAlignedStringBounds(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(rect);
      g2.setPaint(marker.getLabelPaint());
      TextUtils.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(savedComposite);
  }
 else   if (marker instanceof IntervalMarker) {
    IntervalMarker im=(IntervalMarker)marker;
    double start=im.getStartValue();
    double end=im.getEndValue();
    Range range=axis.getRange();
    if (!(range.intersects(start,end))) {
      return;
    }
    final Composite savedComposite=g2.getComposite();
    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));
    double start2d=axis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());
    double end2d=axis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());
    double low=Math.min(start2d,end2d);
    double high=Math.max(start2d,end2d);
    PlotOrientation orientation=plot.getOrientation();
    Rectangle2D rect=null;
    if (orientation == PlotOrientation.HORIZONTAL) {
      low=Math.max(low,dataArea.getMinX());
      high=Math.min(high,dataArea.getMaxX());
      rect=new Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());
    }
 else     if (orientation == PlotOrientation.VERTICAL) {
      low=Math.max(low,dataArea.getMinY());
      high=Math.min(high,dataArea.getMaxY());
      rect=new Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);
    }
    Paint p=marker.getPaint();
    if (p instanceof GradientPaint) {
      GradientPaint gp=(GradientPaint)p;
      GradientPaintTransformer t=im.getGradientPaintTransformer();
      if (t != null) {
        gp=t.transform(gp,rect);
      }
      g2.setPaint(gp);
    }
 else {
      g2.setPaint(p);
    }
    g2.fill(rect);
    if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
      if (orientation == PlotOrientation.VERTICAL) {
        Line2D line=new Line2D.Double();
        double x0=dataArea.getMinX();
        double x1=dataArea.getMaxX();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(x0,start2d,x1,start2d);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(x0,end2d,x1,end2d);
          g2.draw(line);
        }
      }
 else {
        Line2D line=new Line2D.Double();
        double y0=dataArea.getMinY();
        double y1=dataArea.getMaxY();
        g2.setPaint(im.getOutlinePaint());
        g2.setStroke(im.getOutlineStroke());
        if (range.contains(start)) {
          line.setLine(start2d,y0,start2d,y1);
          g2.draw(line);
        }
        if (range.contains(end)) {
          line.setLine(end2d,y0,end2d,y1);
          g2.draw(line);
        }
      }
    }
    String label=marker.getLabel();
    RectangleAnchor anchor=marker.getLabelAnchor();
    if (label != null) {
      Font labelFont=marker.getLabelFont();
      g2.setFont(labelFont);
      Point2D coords=calculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);
      Rectangle2D r=TextUtils.calcAlignedStringBounds(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
      g2.setPaint(marker.getLabelBackgroundColor());
      g2.fill(r);
      g2.setPaint(marker.getLabelPaint());
      TextUtilities.drawAlignedString(label,g2,(float)coords.getX(),(float)coords.getY(),marker.getLabelTextAnchor());
    }
    g2.setComposite(savedComposite);
  }
}

private void init(){
  acceptableMethods=new ArrayList<>();
  acceptableMethods.add(new NoAuthenticationRequiredMethod());
  acceptableMethods.add(new GssApiMethod());
  acceptableMethods.add(new UsernamePasswordMethod());
}

private boolean lockOrder(Order order){
  lock.lock();
  try {
    return activeOrders.add(order.getId());
  }
  finally {
    lock.unlock();
  }
}

public void put(Buffer buffer){
  if (buffer.getLength() <= 2) {
    return;
  }
  byte[] currentRtpPacketData=((byte[])buffer.getData());
  H264RtpHeaders h264RtpHeaders=new H264RtpHeaders(currentRtpPacketData);
  if (h264RtpHeaders.getFUI_F()) {
    return;
  }
  if (reassembledData == null) {
    timestamp=buffer.getTimestamp();
    format=buffer.getFormat();
    seqNumber=buffer.getSequenceNumber();
    reassembledDataNALHeader=h264RtpHeaders.getNALHeader();
    reassembledData=new byte[JavaPacketizer.H264_MAX_RTP_PKTS][H264_FRAME_PACKET_SIZE];
    reassembledDataSize=new int[JavaPacketizer.H264_MAX_RTP_PKTS];
    reassembledDataHasStart=false;
    reassembledDataHasEnd=false;
  }
  int posSeq=(int)(buffer.getSequenceNumber() & VIDEO_DECODER_MAX_PAYLOADS_CHUNKS_MASK);
  int payloadStartPosition=h264RtpHeaders.getHeaderSize();
  int payloadLength=buffer.getLength() - h264RtpHeaders.getHeaderSize();
  if (h264RtpHeaders.getFUI_TYPE() == H264RtpHeaders.AVC_NALTYPE_FUA) {
    reassembledDataHasStart|=(h264RtpHeaders.getFUH_S());
    reassembledDataHasEnd|=(h264RtpHeaders.getFUH_E());
    reassembledDataPosSeqStart=((h264RtpHeaders.getFUH_S()) ? posSeq : reassembledDataPosSeqStart);
    reassembledDataPosSeqEnd=((h264RtpHeaders.getFUH_E()) ? posSeq : reassembledDataPosSeqEnd);
  }
  reassembledDataSize[posSeq]=payloadLength;
  reassembledDataFullSize+=payloadLength;
  System.arraycopy(currentRtpPacketData,payloadStartPosition,reassembledData[posSeq],0,payloadLength);
  videoOrientation=buffer.getVideoOrientation();
}

public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,"null");
    out.endTag(null,"null");
    return;
  }
  out.startTag(null,"string-array");
  if (name != null) {
    out.attribute(null,"name",name);
  }
  final int N=val.length;
  out.attribute(null,"num",Integer.toString(N));
  for (int i=0; i < N; i++) {
    out.startTag(null,"item");
    out.attribute(null,"value",val[i]);
    out.endTag(null,"item");
  }
  out.endTag(null,"string-array");
}

private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){
  try {
    PackageManager pm=context.getPackageManager();
    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);
    if (handlers == null || handlers.size() == 0) {
      return false;
    }
    for (    ResolveInfo resolveInfo : handlers) {
      IntentFilter filter=resolveInfo.filter;
      if (filter == null)       continue;
      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;
      if (resolveInfo.activityInfo == null)       continue;
      return true;
    }
  }
 catch (  RuntimeException e) {
    Log.e(TAG,"Runtime exception while getting specialized handlers");
  }
  return false;
}

private void unifyUsernameByName(Map<String,List<LogCommitInfo>> devNameMap){
  for (  Entry<String,List<LogCommitInfo>> entry : devNameMap.entrySet()) {
    List<String> userNames=getUserNamesList(entry.getValue());
    if (userNames.size() > 1) {
      String newUserName=getNewUserName(userNames);
      for (      LogCommitInfo commit : entry.getValue()) {
        commit.setUserName(newUserName);
      }
    }
  }
}

@SuppressWarnings("unchecked") public JdbcData(Connection connection,String table,boolean buffered){
  this.connection=connection;
  this.table=table;
  setBuffered(buffered);
  try {
    setColumnTypes(getJdbcColumnTypes());
  }
 catch (  SQLException e) {
    e.printStackTrace();
  }
}

public void storeStackForException(Throwable t,int currentStackFrame){
  if (!exceptionStack.containsKey(t)) {
    int[] s=new int[stackPointer + 1];
    System.arraycopy(stack,0,s,0,stackPointer);
    s[stackPointer]=currentStackFrame;
    exceptionStack.put(t,s);
  }
}

public SecureELFFormatter(){
  String timestampGeneratorClass=lmanager.getProperty(LogConstants.SECURE_TIMESTAMP_GENERATOR);
  try {
    Class clz=Class.forName(timestampGeneratorClass);
    secureTimestampGenerator=(ITimestampGenerator)clz.newInstance();
  }
 catch (  ClassNotFoundException cnfe) {
    Debug.error("SecureELFFormatter: TimeStamp Generator Class " + "not found",cnfe);
  }
catch (  InstantiationException ie) {
    Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",ie);
  }
catch (  IllegalAccessException iae) {
    Debug.error("SecureELFFormatter: Timestamp Generator Could " + "not be Instantiated",iae);
  }
}

public static byte[] readData(final URL url) throws IOException {
  try (InputStream input=url.openStream()){
    return readData(input);
  }
 }

public boolean isValidCurrent(long checkTime){
  if (checkTime == 0 || (rDateList == null && rRulesList == null)) {
    return false;
  }
  boolean found=false;
  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();
  while (rulesIterator.hasNext()) {
    RecurrenceRule rule=rulesIterator.next();
    long currentTime=rule.validCurrent(getStartTime(),checkTime,getCurrentCount());
    currentTime=checkDateList(rDateList,currentTime,checkTime);
    if ((currentTime > 0) && isValid(checkTime)) {
      found=true;
    }
 else {
      return false;
    }
  }
  return found;
}

public static EnergyNetwork initNetwork(){
  Random random=new Random(System.currentTimeMillis());
  int id=random.nextInt();
  while (usedIds.contains(id)) {
    id=random.nextInt();
  }
  ;
  EnergyNetwork net=new EnergyNetwork();
  usedIds.add(id);
  net.networkID=id;
  return net;
}

public static String toKilobytes(long bytes){
  if (bytes < 0)   return "? " + GENERAL_UNIT_KILOBYTES;
  long kbytes=bytes / 1024;
  if ((bytes & 512) != 0 || (bytes > 0 && bytes < 1024))   kbytes++;
  return NUMBER_FORMAT0.format(kbytes) + GENERAL_UNIT_KILOBYTES;
}

private PendingIntent createRequestPendingIntent(@NonNull String pendingIntentClassName){
  PendingIntent pendingIntent=null;
  try {
    Class classOfPendingIntent=Class.forName(pendingIntentClassName);
    if (classOfPendingIntent != null) {
      Intent intent=new Intent(mContext,classOfPendingIntent);
      pendingIntent=PendingIntent.getService(mContext,0,intent,PendingIntent.FLAG_UPDATE_CURRENT);
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
  return pendingIntent;
}

public boolean isStatic(){
  return Modifier.isStatic(_method.getModifiers());
}

void testString(){
  String a=randomString();
  if (returnNew) {
    String b=StringUtils.fromCacheOrNew(a);
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError("error",e);
    }
    if (a != null && a == b && a.length() > 0) {
      throw new AssertionError("a=" + System.identityHashCode(a) + " b="+ System.identityHashCode(b));
    }
  }
 else {
    String b;
    if (useIntern) {
      b=a == null ? null : a.intern();
    }
 else {
      b=StringUtils.cache(a);
    }
    try {
      assertEquals(a,b);
    }
 catch (    Exception e) {
      TestBase.logError("error",e);
    }
  }
}

public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {
  String str=data == null ? null : data.toString();
  writeStringToFile(file,str,encoding,append);
}

public static String unifyLineSeparators(String s){
  return unifyLineSeparators(s,System.getProperty("line.separator"));
}

public static byte[] decryptKey(byte[] password,byte[] encryptedKey){
  try {
    Cipher c=Cipher.getInstance(ENCRYPT_KEY_ALGORITHM);
    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_KEY);
    return c.doFinal(encryptedKey);
  }
 catch (  Exception e) {
    throw new IllegalStateException(ENCRYPT_KEY_ALGORITHM + " is not available",e);
  }
}

public void configs(SwtPlatform... platforms){
  configs(Arrays.asList(platforms));
}

protected int checkIPRange(){
  int retVal=0;
  String ipVersion;
  String ipType;
  Map<String,String> holdDetails;
  for (  String nextIP : IPRangeRange) {
    try {
      holdDetails=checkIPVersion(nextIP);
    }
 catch (    IllegalArgumentException e) {
      if (debug.warningEnabled()) {
        debug.warning("{}.checkIPRange: IP type could not be validated. IP={}",ADAPTIVE,nextIP,e);
      }
      continue;
    }
    ipVersion=holdDetails.get(IP_Version);
    ipType=holdDetails.get(IP_TYPE);
    if (ipVersion.equalsIgnoreCase(IP_V6) && ValidateIPaddress.isIPv6(clientIP)) {
      if (debug.messageEnabled()) {
        debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP);
        debug.message("IP version is: {}",IP_V6);
        debug.message("Client IP is: {}",IPv6Address.fromString(clientIP));
      }
      if (ipType.equalsIgnoreCase("Range")) {
        String first=holdDetails.get(IP_START);
        String last=holdDetails.get(IP_END);
        IPv6AddressRange iPv6AddressRange=IPv6AddressRange.fromFirstAndLast(IPv6Address.fromString(first),IPv6Address.fromString(last));
        if (iPv6AddressRange.contains(IPv6Address.fromString(clientIP))) {
          retVal=IPRangeScore;
          break;
        }
      }
 else       if (ipType.equalsIgnoreCase("CIDR")) {
        IPv6Network iPv6Network=IPv6Network.fromString(nextIP);
        if (iPv6Network.contains(IPv6Address.fromString(clientIP))) {
          retVal=IPRangeScore;
          break;
        }
      }
 else {
        IPv6Address iPv6AddressNextIP=IPv6Address.fromString(nextIP);
        if (iPv6AddressNextIP.compareTo(IPv6Address.fromString(clientIP)) == 0) {
          retVal=IPRangeScore;
          break;
        }
      }
    }
 else     if (ipVersion.equalsIgnoreCase(IP_V4) && ValidateIPaddress.isIPv4(clientIP)) {
      if (debug.messageEnabled()) {
        debug.message("{}.checkIPRange: {} --> {}",ADAPTIVE,clientIP,nextIP);
        debug.message("IP version is: {}",IP_V4);
        debug.message("Client IP is: {}",clientIP);
      }
      IPRange theRange=new IPRange(nextIP);
      if (theRange.inRange(clientIP)) {
        retVal=IPRangeScore;
        break;
      }
    }
  }
  if (!IPRangeInvert) {
    retVal=IPRangeScore - retVal;
  }
  return retVal;
}

private View fillFromSelection(int selectedLeft,int childrenLeft,int childrenRight){
  if (DEBUG)   Log.i(TAG,"fillFromSelection() selectedLeft: " + selectedLeft + " childrenLeft: "+ childrenLeft+ CHILDREN_RIGHT+ childrenRight+ M_FIRST_POSITION+ mFirstPosition);
  final int fadingEdgeLength=getHorizontalFadingEdgeLength();
  final int selectedPosition=mSelectedPosition;
  final int numRows=mNumRows;
  final int horizontalSpacing=mHorizontalSpacing;
  int columnStart;
  int columnEnd=-1;
  if (!mStackFromBottom) {
    columnStart=selectedPosition - (selectedPosition % numRows);
  }
 else {
    int invertedSelection=mItemCount - 1 - selectedPosition;
    columnEnd=mItemCount - 1 - (invertedSelection - (invertedSelection % numRows));
    columnStart=Math.max(0,columnEnd - numRows + 1);
  }
  View sel;
  View referenceView;
  int leftSelectionPixel=getLeftSelectionPixel(childrenLeft,fadingEdgeLength,columnStart);
  int rightSelectionPixel=getRightSelectionPixel(childrenRight,fadingEdgeLength,numRows,columnStart);
  sel=makeColumn(mStackFromBottom ? columnEnd : columnStart,selectedLeft,true);
  mFirstPosition=columnStart;
  referenceView=mReferenceView;
  adjustForLeftFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);
  adjustForRightFadingEdge(referenceView,leftSelectionPixel,rightSelectionPixel);
  if (!mStackFromBottom) {
    fillLeft(columnStart - numRows,referenceView.getLeft() - horizontalSpacing);
    adjustViewsLeftOrRight();
    fillRight(columnStart + numRows,referenceView.getRight() + horizontalSpacing);
  }
 else {
    fillRight(columnEnd + numRows,referenceView.getRight() + horizontalSpacing);
    adjustViewsLeftOrRight();
    fillLeft(columnStart - 1,referenceView.getLeft() - horizontalSpacing);
  }
  return sel;
}

private static Field findField(Object instance,String name) throws NoSuchFieldException {
  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {
    try {
      Field field=clazz.getDeclaredField(name);
      if (!field.isAccessible()) {
        field.setAccessible(true);
      }
      return field;
    }
 catch (    NoSuchFieldException e) {
    }
  }
  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());
}

protected int calculateBreakPosition(int p0,Token tokenList,float x0){
  int p=p0;
  RSyntaxTextArea textArea=(RSyntaxTextArea)getContainer();
  float currentWidth=getWidth();
  if (currentWidth == Integer.MAX_VALUE)   currentWidth=getPreferredSpan(X_AXIS);
  currentWidth=Math.max(currentWidth,MIN_WIDTH);
  Token t=tokenList;
  while (t != null && t.isPaintable()) {
    float tokenWidth=t.getWidth(textArea,this,x0);
    if (tokenWidth > currentWidth) {
      if (p == p0) {
        return t.getOffsetBeforeX(textArea,this,0,currentWidth);
      }
      return t.isWhitespace() ? p + t.textCount : p;
    }
    currentWidth-=tokenWidth;
    x0+=tokenWidth;
    p+=t.textCount;
    t=t.getNextToken();
  }
  return p + 1;
}

@Override public ShapeTileSimplex to_Simplex(){
  if (is_empty())   return ShapeTileSimplex.EMPTY;
  ArrayList<PlaLineInt> line_arr=new ArrayList<PlaLineInt>(4);
  line_arr.add(new PlaLineInt(box_ll,PlaDirection.RIGHT));
  line_arr.add(new PlaLineInt(box_ur,PlaDirection.UP));
  line_arr.add(new PlaLineInt(box_ur,PlaDirection.LEFT));
  line_arr.add(new PlaLineInt(box_ll,PlaDirection.DOWN));
  return new ShapeTileSimplex(line_arr);
}

private void injectContent(Inject injectContent) throws IOException, MojoExecutionException {
  Map<Pattern,File> contents=getContentsMap(injectContent.getContents());
  File tmpFile=ioFactory.createTemporaryFile(injectContent.getDestinationFile());
  BufferedReader reader=null;
  BufferedWriter writer=null;
  try {
    reader=ioFactory.newReader(injectContent.getDestinationFile());
    writer=ioFactory.newWriter(tmpFile);
    String line;
    while ((line=reader.readLine()) != null) {
      File content=doesLineMatchId(contents,line);
      if (content != null) {
        ioFactory.writeContent(writer,content,getContentConverter(injectContent));
      }
 else {
        ioFactory.writeLine(writer,line);
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
    if (writer != null) {
      writer.flush();
      writer.close();
    }
  }
  ioFactory.moveTo(tmpFile,injectContent.getDestinationFile());
}

public static <E>boolean isEmpty(CharSequence c){
  return (c == null) || c.length() == 0;
}

private static boolean createBooleanSetting(final Map<String,String> rawSettings,final String settingName,final boolean defaultValue){
  final String settingString=rawSettings.get(settingName);
  if (settingString == null) {
    return defaultValue;
  }
 else {
    try {
      return Boolean.parseBoolean(settingString);
    }
 catch (    final NumberFormatException exception) {
      CUtilityFunctions.logException(exception);
      return defaultValue;
    }
  }
}

@Override public void disconnectionNotification(String eventName,Object source){
  m_listenees.remove(source);
}

public Criteria createCriteria(){
  Criteria criteria=createCriteriaInternal();
  if (oredCriteria.size() == 0) {
    oredCriteria.add(criteria);
  }
  return criteria;
}

private MarshalledWrapper lookupDo(Template tmpl){
  if (isEmpty(tmpl.serviceTypes) || tmpl.serviceID != null) {
    ItemIter iter=matchingItems(tmpl);
    if (iter.hasNext())     return iter.next().service;
    return null;
  }
  List services=matchingServices(tmpl.serviceTypes);
  long now=System.currentTimeMillis();
  int slen=services.size();
  if (slen == 0)   return null;
  int srand=Math.abs(random.nextInt() % slen);
  for (int i=0; i < slen; i++) {
    SvcReg reg=(SvcReg)services.get((i + srand) % slen);
    if (reg.leaseExpiration > now && matchAttributes(tmpl,reg.item))     return reg.item.service;
  }
  return null;
}

@Override public boolean runAfter(List tasks,int size){
  for (int i=0; i < size; i++) {
    CacheTask t=(CacheTask)tasks.get(i);
    if (t instanceof RegisterListenerTask || t instanceof LookupTask) {
      ProxyReg otherReg=t.getProxyReg();
      if (reg.equals(otherReg)) {
        if (thisTaskSeqN > t.getSeqN())         return true;
      }
    }
  }
  return super.runAfter(tasks,size);
}

String generateKey() throws OracleException {
  byte[] data=null;
  try {
    data=HashFuncs.getRandom();
  }
 catch (  Exception e) {
    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());
  }
  if (data == null) {
    data=fetchGuid();
  }
  if (data == null) {
    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);
  }
  return (ByteArray.rawToHex(data));
}

public double[] arrayCopy(){
  double[] array=new double[length()];
  for (  IndexValue iv : this)   array[iv.getIndex()]=iv.getValue();
  return array;
}

public static void delete(Path path){
  if (path != null) {
    path=path.toAbsolutePath();
    if (inTargetDir(path)) {
      try {
        IoUtil.delete(path);
      }
 catch (      IOException e) {
        printError("Unable to remove '" + path.toAbsolutePath() + "'",e);
      }
    }
 else {
      printError("Will not remove directory that is outside test target area: " + path);
    }
  }
}

private static boolean parse(Class<?> service,URL u) throws ServiceConfigurationError {
  InputStream in=null;
  BufferedReader r=null;
  try {
    in=u.openStream();
    r=new BufferedReader(new InputStreamReader(in,"utf-8"));
    int lc=1;
    String ln;
    while ((ln=r.readLine()) != null) {
      int ci=ln.indexOf('#');
      if (ci >= 0)       ln=ln.substring(0,ci);
      ln=ln.trim();
      int n=ln.length();
      if (n != 0) {
        if ((ln.indexOf(' ') >= 0) || (ln.indexOf('\t') >= 0))         fail(service,u,lc,"Illegal configuration-file syntax");
        int cp=ln.codePointAt(0);
        if (!Character.isJavaIdentifierStart(cp))         fail(service,u,lc,"Illegal provider-class name: " + ln);
        for (int i=Character.charCount(cp); i < n; i+=Character.charCount(cp)) {
          cp=ln.codePointAt(i);
          if (!Character.isJavaIdentifierPart(cp) && (cp != '.'))           fail(service,u,lc,"Illegal provider-class name: " + ln);
        }
        return true;
      }
    }
  }
 catch (  FileNotFoundException x) {
    return false;
  }
catch (  IOException x) {
    fail(service,": " + x);
  }
 finally {
    try {
      if (r != null)       r.close();
    }
 catch (    IOException y) {
      fail(service,": " + y);
    }
    try {
      if (in != null)       in.close();
    }
 catch (    IOException y) {
      fail(service,": " + y);
    }
  }
  return false;
}

private void initPattern(){
  StringBuffer patternTemplateRegex=new StringBuffer();
  logger.debug("Get placeholder matcher");
  Matcher placeholderMatcher=getPlaceholderMatcher();
  logger.debug("Replace all placeholder with regex group capture");
  while (placeholderMatcher.find()) {
    String group=placeholderMatcher.group(1);
    if (!groups.contains(group)) {
      logger.trace("New group found, add it, replace with a capture group");
      groups.add(group);
      String groupRegex=getGroupRegex(group);
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("(?<" + group + ">"+ groupRegex+ ")"));
    }
 else {
      logger.trace("Existing group found, replace with a back reference");
      placeholderMatcher.appendReplacement(patternTemplateRegex,Matcher.quoteReplacement("\\k<" + group + ">"));
    }
  }
  placeholderMatcher.appendTail(patternTemplateRegex);
  String patternRegex=patternTemplateRegex.toString();
  logger.debug("pattern:" + patternRegex);
  pattern=Pattern.compile(patternRegex);
}

protected void newLine(PrintWriter file,String string,boolean isManifest){
  String[] lines=string.split(NEW_LINE);
  for (  String line : lines) {
    String[] words=line.split(SPACE);
    StringBuffer sb=new StringBuffer();
    for (    String word : words) {
      if (checkStringLength(sb.toString() + word,isManifest)) {
        sb.append(word + SPACE);
      }
 else {
        sb.setLength(sb.length() - 1);
        addLine(file,sb.toString());
        sb=new StringBuffer(word + SPACE);
      }
    }
    if (sb.length() > 0) {
      sb.setLength(sb.length() - 1);
    }
    addLine(file,sb.toString());
  }
}

protected boolean updateAttachmentPoint(){
  boolean moved=false;
  this.oldAPs=attachmentPoints;
  if (attachmentPoints == null || attachmentPoints.isEmpty())   return false;
  List<AttachmentPoint> apList=new ArrayList<AttachmentPoint>();
  if (attachmentPoints != null)   apList.addAll(attachmentPoints);
  Map<Long,AttachmentPoint> newMap=getAPMap(apList);
  if (newMap == null || newMap.size() != apList.size()) {
    moved=true;
  }
  if (moved) {
    log.info("updateAttachmentPoint: ap {}  newmap {} ",attachmentPoints,newMap);
    List<AttachmentPoint> newAPList=new ArrayList<AttachmentPoint>();
    if (newMap != null)     newAPList.addAll(newMap.values());
    this.attachmentPoints=newAPList;
  }
  return moved;
}

public List<SoftWrapImpl> removeStartingFrom(int offset){
  int startIndex=getSoftWrapIndex(offset);
  if (startIndex < 0) {
    startIndex=-startIndex - 1;
  }
  if (startIndex >= myWraps.size()) {
    return Collections.emptyList();
  }
  List<SoftWrapImpl> tail=myWraps.subList(startIndex,myWraps.size());
  List<SoftWrapImpl> result=new ArrayList<SoftWrapImpl>(tail);
  tail.clear();
  return result;
}

public static String formatDps(final double dps){
  return "(" + String.format("%.2f",dps) + " dps)";
}

public static String truncate(String string,int length){
  if (string.length() > length) {
    string=string.substring(0,length);
  }
  return string;
}

private static String escapeJSON(String text){
  StringBuilder builder=new StringBuilder();
  builder.append('"');
  for (int index=0; index < text.length(); index++) {
    char chr=text.charAt(index);
switch (chr) {
case '"':
case '\\':
      builder.append('\\');
    builder.append(chr);
  break;
case '\b':
builder.append("\\b");
break;
case '\t':
builder.append("\\t");
break;
case '\n':
builder.append("\\n");
break;
case '\r':
builder.append("\\r");
break;
default :
if (chr < ' ') {
String t="000" + Integer.toHexString(chr);
builder.append("\\u" + t.substring(t.length() - 4));
}
 else {
builder.append(chr);
}
break;
}
}
builder.append('"');
return builder.toString();
}

@SuppressWarnings("unchecked") public SortedSet<E> subSet(E start,E end){
  return subSet(start,true,end,false);
}

private boolean checkDisband(Legion legion){
  if (legion.isDisbanding()) {
    if ((System.currentTimeMillis() / 1000) > legion.getDisbandTime()) {
      disbandLegion(legion);
      return true;
    }
  }
  return false;
}

public void index(Tuple t,String field){
  String s;
  if ((s=t.getString(field)) == null)   return;
  StringTokenizer st=new StringTokenizer(s,m_delim);
  while (st.hasMoreTokens()) {
    String tok=st.nextToken();
    addString(tok,t);
  }
}

public static void downto(float self,Number to,@ClosureParams(FirstParam.class) Closure closure){
  float to1=to.floatValue();
  if (self >= to1) {
    for (float i=self; i >= to1; i--) {
      closure.call(i);
    }
  }
 else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");
}

protected void parseDOMAttributes(Element element) throws SAML2Exception {
  requestId=element.getAttribute(SAML2Constants.ID);
  validateID(requestId);
  version=element.getAttribute(SAML2Constants.VERSION);
  validateVersion(version);
  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);
  validateIssueInstant(issueInstantStr);
  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);
  consent=element.getAttribute(SAML2Constants.CONSENT);
}

protected int readFully(InputStream in,byte buffer[]) throws java.io.IOException {
  for (int i=0; i < buffer.length; i++) {
    int q=in.read();
    if (q == -1)     return i;
    buffer[i]=(byte)q;
  }
  return buffer.length;
}

@CalledByNative private static void insertFullscreenInfoIntoList(ArrayList<FullscreenInfo> list,String origin,String embedder){
  list.add(new FullscreenInfo(origin,embedder,false));
}

public static InputStream streamFromString(String location) throws IOException {
  InputStream is=null;
  URL url=urlFromString(location,null,false);
  if (url != null) {
    is=url.openStream();
  }
 else {
    File f=new File(location);
    if (f.exists())     is=new FileInputStream(f);
  }
  if (is == null) {
    return null;
  }
 else   if (isGZipFile(location)) {
    return new GZIPInputStream(is);
  }
 else {
    return is;
  }
}

public void add(T item){
synchronized (lock) {
    items.add(identifiedItemFactory.create(item));
  }
  notifyDataSetChanged();
}

private void copyACLs(List<UnManagedCifsShareACL> origACLList,List<CifsShareACL> shareACLList,FileShare fileshare){
  CifsShareACL shareACL=null;
  for (  UnManagedCifsShareACL origACL : origACLList) {
    shareACL=new CifsShareACL();
    shareACL.setId(URIUtil.createId(CifsShareACL.class));
    shareACL.setUser(origACL.getUser());
    shareACL.setPermission(origACL.getPermission());
    shareACL.setShareName(origACL.getShareName());
    shareACL.setFileSystemId(fileshare.getId());
    shareACLList.add(shareACL);
    _logger.info("share ACLs details {}",shareACL.toString());
  }
}

public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {
  try {
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    parser.parse(mInputSource,this);
    return this;
  }
 catch (  IOException e) {
    throw new ParseFailureException("Failed to parse input source!",e);
  }
}

public Builder deleteEntitlements(){
  deleteFields.add("entitlements");
  return this;
}

protected void incorporateSignedProperties() throws DSSException {
  signedPropertiesDom=DSSXMLUtils.addElement(documentDom,qualifyingPropertiesDom,XAdES,XADES_SIGNED_PROPERTIES);
  signedPropertiesDom.setAttribute(ID,"xades-" + deterministicId);
  incorporateSignedSignatureProperties();
}

private ChannelSelection createChannelSelection(StyleFactoryImpl styleFactory,ContrastMethod contrastMethod){
  ContrastEnhancement contrastEnhancement=(ContrastEnhancement)styleFactory.contrastEnhancement(null,contrastMethod.name());
  FilterFactory ff=CommonFactoryFinder.getFilterFactory();
  Map<String,Expression> options=contrastEnhancement.getOptions();
  options.put("algorithm",ff.literal("StretchToMinimumMaximum"));
  options.put("minValue",ff.literal("1"));
  options.put("maxValue",ff.literal("5"));
  SelectedChannelType channelType=styleFactory.createSelectedChannelType("channel name",contrastEnhancement);
  SelectedChannelType[] channels=new SelectedChannelType[3];
  channels[0]=channelType;
  channels[1]=channelType;
  channels[2]=channelType;
  ChannelSelection channelSelection=styleFactory.createChannelSelection(channels);
  return channelSelection;
}

public static float mean(float[] data,int[] inds){
  float mean=0;
  for (int i=0; i < inds.length; i++) {
    if (Float.isNaN(data[inds[i]]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");
    mean+=data[inds[i]];
  }
  mean/=inds.length;
  return mean;
}

public int depth(){
  return pointer;
}

public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final double percentReaders=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_READERS));
  final double percentWritersWillFlush=Double.parseDouble(properties.getProperty(TestOptions.PERCENT_WRITER_WILL_FLUSH));
  final int reclen=Integer.parseInt(properties.getProperty(TestOptions.RECLEN));
  final int nwritesPerTask=Integer.parseInt(properties.getProperty(TestOptions.NWRITES));
  final int nreadsPerTask=Integer.parseInt(properties.getProperty(TestOptions.NREADS));
  final AtomicInteger nerr=new AtomicInteger();
  final Result result=doMRMWTest(store,timeout,ntrials,nclients,percentReaders,percentWritersWillFlush,reclen,nwritesPerTask,nreadsPerTask,nerr);
  return result;
}

private void cmd_import(){
  JFileChooser jc=new JFileChooser();
  jc.setDialogTitle(Msg.getMsg(Env.getCtx(),"Import"));
  jc.setDialogType(JFileChooser.OPEN_DIALOG);
  jc.setFileSelectionMode(JFileChooser.FILES_ONLY);
  if (jc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)   return;
  StringBuffer sb=new StringBuffer();
  try {
    InputStreamReader in=new InputStreamReader(new FileInputStream(jc.getSelectedFile()));
    char[] cbuf=new char[1024];
    int count;
    while ((count=in.read(cbuf)) > 0)     sb.append(cbuf,0,count);
    in.close();
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"HTMLEditor.import" + e.getMessage());
    return;
  }
  setHtmlText(sb.toString());
}

private List<String> fetchFileCosIdList() throws SOSFailure {
  final String methodName="fetchFileCosIdList(): ";
  log.trace(methodName + "Entry");
  final String FILE_COS_URI="/file/vpools";
  List<String> fileCosIdList=new ArrayList<String>();
  try {
    CoSList cosElemList=_client.queryObject(FILE_COS_URI,CoSList.class);
    if (cosElemList != null && cosElemList.getCosElements() != null) {
      for (      CoSElement elem : cosElemList.getCosElements()) {
        if (elem != null) {
          fileCosIdList.add(elem.getId());
        }
      }
    }
    log.trace(methodName + "File CoS Ids: " + fileCosIdList);
    if (cosElemList != null && fileCosIdList != null) {
      log.trace(methodName + "Exit returning cos list of size[" + fileCosIdList.size()+ "]");
      return fileCosIdList;
    }
    log.trace(methodName + "Exit returning cos list of size[0]");
    return new ArrayList<String>();
  }
 catch (  NoSuchAlgorithmException e) {
    log.error(methodName + "NoSuchAlgorithmException occured",e);
    throw new SOSFailure(e);
  }
catch (  UniformInterfaceException e) {
    log.error(methodName + "UniformInterfaceException occured",e);
    throw new SOSFailure(e);
  }
}

public void monitor(ScalingStateMonitorTask task){
  taskQueue.add(task);
  startMonitor();
}

public void insertNodeInto(MutableTreeNode newChild,MutableTreeNode parent,int index){
  parent.insert(newChild,index);
  int[] newIndexs=new int[1];
  newIndexs[0]=index;
  nodesWereInserted(parent,newIndexs);
}

public final double sampleMax(){
  long max=_max.getAndSet(0);
  return _scale * max;
}

private static void writeFile(File file,List<String> lines) throws IOException {
  if (!file.exists())   file.createNewFile();
  FileWriter fw=new FileWriter(file);
  BufferedWriter Bw=new BufferedWriter(fw);
  PrintWriter pw=new PrintWriter(Bw);
  for (  String line : lines)   pw.println(line);
  Bw.close();
  fw.close();
  pw.close();
}

public synchronized boolean verifyChunkAuthTag(int chunkIdx,byte[] chunkAuthTag) throws FileEncryptionException {
  if ((chunkIdx < 0) || (chunkAuthTag == null) || (chunkAuthTag.length != backEncRandomAccessFile.CHUNK_TLEN)) {
    throw new FileEncryptionException("Invalid auth tag parameter given!");
  }
 else {
    byte[] storedAuthTag=atagList.get(chunkIdx);
    if (storedAuthTag == null || !Arrays.equals(chunkAuthTag,storedAuthTag)) {
      return false;
    }
 else {
      return true;
    }
  }
}

public static String guessMimeTypeFromExtension(String extension){
  if (extension == null || extension.isEmpty()) {
    return null;
  }
  return extensionToMimeTypeMap.get(extension);
}

public <AnnotationType extends Annotation>void register(MethodBinder<AnnotationType> methodBinder){
  Set<AnnotatedMethod<AnnotationType>> annotatedMethods=AnnotatedMethods.get(methodBinder.getAnnotationClass(),annotatedType);
  if (!annotatedMethods.isEmpty()) {
    objectBinders.add(new AnnotatedMethodBinder<>(methodBinder,annotatedMethods));
  }
}

public static String removeNewLineChars(String s){
  String retString=null;
  if ((s != null) && (s.length() > 0) && (s.indexOf('\n') != -1)) {
    char[] chars=s.toCharArray();
    int len=chars.length;
    StringBuffer sb=new StringBuffer(len);
    for (int i=0; i < len; i++) {
      char c=chars[i];
      if (c != '\n') {
        sb.append(c);
      }
    }
    retString=sb.toString();
  }
 else {
    retString=s;
  }
  return retString;
}

private Document parseRouteFile() throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(true);
  DocumentBuilder builder=factory.newDocumentBuilder();
  return builder.parse(routeFile);
}

public void removeDTEDDirectoryHandler(DTEDDirectoryHandler handler){
  directories.remove(handler);
}

public default void addFile(final ContentProvider contentProvider,final String fileName,final EntryInformation entryInformation) throws IOException {
  addFile(contentProvider,fileName,entryInformation,Optional.empty());
}

public synchronized void writeTo(OutputStream out) throws IOException {
  int remaining=count;
  for (  byte[] buf : buffers) {
    int c=Math.min(buf.length,remaining);
    out.write(buf,0,c);
    remaining-=c;
    if (remaining == 0) {
      break;
    }
  }
}

protected void read_lookahead() throws java.lang.Exception {
  lookahead=new Symbol[error_sync_size()];
  for (int i=0; i < error_sync_size(); i++) {
    lookahead[i]=cur_token;
    cur_token=scan();
  }
  lookahead_pos=0;
}

private Vector<SnmpVarBind> splitFrom(Vector<SnmpVarBind> original,int limit){
  int max=original.size();
  Vector<SnmpVarBind> result=new Vector<>(max - limit);
  int i=limit;
  for (Enumeration<SnmpVarBind> e=original.elements(); e.hasMoreElements(); --i) {
    SnmpVarBind var=e.nextElement();
    if (i > 0)     continue;
    result.addElement(new SnmpVarBind(var.oid,var.value));
  }
  return result;
}

public static void initUrbanSimZoneWriter(Config config){
  UrbanSimParameterConfigModuleV3 module=(UrbanSimParameterConfigModuleV3)config.getModule(UrbanSimParameterConfigModuleV3.GROUP_NAME);
  try {
    log.info("Initializing UrbanSimParcelCSVWriter ...");
    parcelWriter=IOUtils.getBufferedWriter(module.getMATSim4OpusTemp() + FILE_NAME);
    log.info("Writing data into " + module.getMATSim4OpusTemp() + FILE_NAME+ " ...");
    parcelWriter.write(InternalConstants.PARCEL_ID + "," + ACCESSIBILITY_BY_FREESPEED+ ","+ ACCESSIBILITY_BY_CAR+ ","+ ACCESSIBILITY_BY_BIKE+ ","+ ACCESSIBILITY_BY_WALK+ ","+ ACCESSIBILITY_BY_PT);
    parcelWriter.newLine();
    log.info("... done!");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

@Override public void onReset(){
  closeDialog();
}

public final void delayTask(@NotNull TransactionRunnable task){
  myDelayedTasks.add(task);
}

public TextEditor replaceAll(String regex,String replacement){
  if (text.length() > 0) {
    final String r=replacement;
    Pattern p=Pattern.compile(regex,Pattern.MULTILINE);
    Matcher m=p.matcher(text);
    StringBuffer sb=new StringBuffer();
    while (m.find()) {
      m.appendReplacement(sb,r);
    }
    m.appendTail(sb);
    text=new StringBuilder(sb.toString());
  }
  return this;
}

private static <T>int migrateAll(Migration<T> migration) throws Exception {
  int migrated=0;
  for (  T entity : migration.getAllEntities()) {
    try {
      if (migration.isMigrated(entity))       continue;
    }
 catch (    Exception x) {
      LOG.error("Couldn't check if the entity '{}' is migrated due to occurred error",entity);
      throw x;
    }
    try {
      migration.migrate(entity);
    }
 catch (    Exception x) {
      LOG.error("Error migrating the entity '{}",entity);
      throw x;
    }
    migrated++;
  }
  return migrated;
}

private void captureDifferentString(String oldString,String newString,Map<String,String> map,String appName){
  Reject.ifNull(appName);
  Reject.ifNull(map);
  if (oldString == null ? newString != null : !oldString.equals(newString)) {
    map.put(appName,newString);
  }
}

public void onChildThreadResumeBegin(){
  _threadCount.incrementAndGet();
}

@Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){
  int length=xLabels.size();
  if (length > 0) {
    boolean showLabels=mRenderer.isShowLabels();
    boolean showGridY=mRenderer.isShowGridY();
    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));
    for (int i=0; i < length; i++) {
      long label=Math.round(xLabels.get(i));
      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));
      if (showLabels) {
        paint.setColor(mRenderer.getXLabelsColor());
        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);
        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3,paint,mRenderer.getXLabelsAngle());
      }
      if (showGridY) {
        paint.setColor(mRenderer.getGridColor());
        canvas.drawLine(xLabel,bottom,xLabel,top,paint);
      }
    }
  }
  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);
}

public static String encodeToString(byte[] src){
  if (src == null) {
    return null;
  }
  if (src.length == 0) {
    return "";
  }
  String result;
  try {
    result=new String(delegate.encode(src),DEFAULT_CHARSET.displayName());
  }
 catch (  UnsupportedEncodingException e) {
    throw new IllegalStateException(e);
  }
  return result;
}

public static byte[] decode(String str,int flags){
  return decode(str.getBytes(),flags);
}

public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj instanceof ECFieldF2m) {
    ECFieldF2m o=(ECFieldF2m)obj;
    if (this.m == o.m) {
      if (this.rp == null) {
        if (o.rp == null) {
          return true;
        }
      }
 else {
        return Arrays.equals(this.ks,o.ks);
      }
    }
  }
  return false;
}

public static void chunkTaskSync(RegionWrapper region,final RunnableVal<int[]> task){
  final int p1x=region.minX;
  final int p1z=region.minZ;
  final int p2x=region.maxX;
  final int p2z=region.maxZ;
  final int bcx=p1x >> 4;
  final int bcz=p1z >> 4;
  final int tcx=p2x >> 4;
  final int tcz=p2z >> 4;
  task.value=new int[7];
  for (int x=bcx; x <= tcx; x++) {
    for (int z=bcz; z <= tcz; z++) {
      task.value[0]=x;
      task.value[1]=z;
      task.value[2]=task.value[0] << 4;
      task.value[3]=task.value[1] << 4;
      task.value[4]=task.value[2] + 15;
      task.value[5]=task.value[3] + 15;
      task.value[6]=0;
      if (task.value[0] == bcx) {
        task.value[2]=p1x;
        task.value[6]=1;
      }
      if (task.value[0] == tcx) {
        task.value[4]=p2x;
        task.value[6]=1;
      }
      if (task.value[1] == bcz) {
        task.value[3]=p1z;
        task.value[6]=1;
      }
      if (task.value[1] == tcz) {
        task.value[5]=p2z;
        task.value[6]=1;
      }
      task.run();
    }
  }
}

public ElsaSerializerPojo make(){
  return new ElsaSerializerPojo(objectStack,singletons,registeredSers,registeredSerHeaders,registeredDeser,unknownClassNotification,new ElsaClassInfoResolver.ArrayBased(classes.toArray(new Class[0])));
}

private void loadBinary(InputStream is) throws IOException {
  if (is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    FileChannel fc=fis.getChannel();
    MappedByteBuffer bb=fc.map(FileChannel.MapMode.READ_ONLY,0,(int)fc.size());
    bb.load();
    loadBinary(bb);
    is.close();
  }
 else {
    loadBinary(new DataInputStream(is));
  }
}

private static boolean isTwoSlotType(ClassNode type){
  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;
}

public SpecificationRunnerBuilder sections(String[] paramSections){
  Collections.addAll(this.sections,paramSections);
  return this;
}

private void consumeCRLF() throws DecodingException {
  char next=nextChar();
  if (next != '\n') {
    consumeChar('\r');
  }
  consumeChar('\n');
}

private String processLogoutRequest(LogoutState t,LogoutRequest logoutRequest,SessionManager sessionManager) throws SamlServiceException {
  String sessionId=null;
  List<SessionIndex> sessionList=logoutRequest.getSessionIndexes();
  Validate.notNull(sessionList,"sessionList");
  Validate.isTrue(sessionList.size() > 0);
  for (  SessionIndex sessionIndex : sessionList) {
    Validate.notNull(sessionIndex);
    String participantSession=sessionIndex.getSessionIndex();
    Validate.notNull(participantSession,"participantSession");
    Session session=sessionManager.getByParticipant(participantSession);
    if (session == null) {
      throw new SamlServiceException("Server session not found");
    }
    if (!session.containsSessionParticipantUrl(t.getIssuerValue())) {
      throw new SamlServiceException("Issuer URL does not match session participant URL");
    }
    if (sessionId == null) {
      sessionId=session.getId();
    }
 else {
      if (!sessionId.equals(session.getId())) {
        throw new SamlServiceException("Participant requested multiple server sessions to be terminated");
      }
    }
  }
  return sessionId;
}

public boolean equals(Object o){
  if (o instanceof CoverageIntVdt) {
    CoverageIntVdt civ=(CoverageIntVdt)o;
    return ((attribute == civ.attribute) && (value == civ.value));
  }
 else {
    return false;
  }
}

public void accept(final Path file) throws InterruptedException {
  logger.info(String.format("Sending to thread pool; will queue if full: \"%s\".",file));
  permits.acquire();
  executor.execute(new ConsumerTask(file));
}

private void addOptionList(final List<String> args,final String optName,final List<String> values){
  for (  final String value : values) {
    if (value != null && !value.isEmpty()) {
      args.add(optName);
      args.add(value);
    }
  }
}

public void testNegPosFirstShorter(){
  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  byte bBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};
  int aSign=-1;
  int bSign=1;
  byte rBytes[]={-74,91,47,-5,-13,-7,-5,-33,-49,-65,-1,-9,-3};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.or(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

private Activity checkActivity(){
  Activity activity=mActivity.get();
  if (activity == null) {
    throw new IllegalStateException("No activity set. Either subclass PermisoActivity or call Permiso.setActivity() in onCreate() and onResume() of your Activity.");
  }
  return activity;
}

@Override public synchronized void start(){
  LOGGER.info("Starting the C2MON alive timer mechanism.");
  timer=new Timer("C2MON-alive-timer");
  timer.schedule(this,INITIAL_SCAN_DELAY,SCAN_INTERVAL);
  running=true;
}

public boolean isLandingPage(URL url){
  if (url.getQuery() != null) {
    return false;
  }
 else {
    return landingPageSuffix(url) != "";
  }
}

protected static void writeRowCountDefinitions(TableCreator creator,ByteBuffer buffer){
  writeRowCountDefinitions(creator,buffer,creator.getIndexCount());
}

public void send(String theString){
  send(theString.getBytes());
}

public void init(){
  _tokenMgmtExecutor.scheduleWithFixedDelay(new ExpiredTokenCleaner(),1,_maxLifeValuesHolder.getMaxTokenIdleTimeInMins(),TimeUnit.MINUTES);
  _tokenMgmtExecutor.scheduleWithFixedDelay(new TokenKeysUpdater(),1,FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS,TimeUnit.MINUTES);
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return PATH;
case 2:
  return OFFSET_LBA;
default :
return null;
}
}

public String toString(){
  return "BeanMap<" + String.valueOf(bean) + ">";
}

private static String doGetPath(String filename,int separatorAdd){
  if (filename == null) {
    return null;
  }
  int prefix=getPrefixLength(filename);
  if (prefix < 0) {
    return null;
  }
  int index=indexOfLastSeparator(filename);
  int endIndex=index + separatorAdd;
  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {
    return "";
  }
  return filename.substring(prefix,endIndex);
}

public Spanned[] history(){
  int i=0;
  Spanned[] array=new Spanned[history.size()];
  for (  String s : history) {
    if (s != null) {
      array[i]=Html.fromHtml(s);
      i++;
    }
  }
  return array;
}

private void sign(final byte[] contentBytes,final ByteArrayOutputStream mimeContent) throws Exception {
  String algId=conf.getSignatureAlgorithmId();
  String keyId=conf.getActiveSigningKey();
  log.debug("Signing directory with signing key '{}' " + "and signing algorithm '{}'",keyId,algId);
  String signature=signHelper(keyId,algId,contentBytes);
  mimeContent.write(envelopeHeader.getBytes());
  try (MultipartEncoder encoder=new MultipartEncoder(mimeContent,envelopeBoundary)){
    encoder.startPart(mpMixedContentType(dataBoundary));
    encoder.write(contentBytes);
    String algURI=CryptoUtils.getSignatureAlgorithmURI(algId);
    String hashURI=hashCalculator.getAlgoURI();
    Path verificatioCertPath=conf.getCertPath(keyId);
    encoder.startPart(MimeTypes.BINARY,new String[]{HEADER_CONTENT_TRANSFER_ENCODING + ": base64",HEADER_SIG_ALGO_ID + ": " + algURI,HEADER_VERIFICATION_CERT_HASH + ": " + getVerificationCertHash(verificatioCertPath)+ "; "+ HEADER_HASH_ALGORITHM_ID+ "="+ hashURI});
    encoder.write(signature.getBytes());
  }
   log.debug("Generated signed directory:\n{}\n",mimeContent.toString());
  Files.write(tempConfPath,mimeContent.toByteArray());
  log.debug("Written signed directory to '{}'",tempConfPath);
}

private boolean nextItemIs(String match) throws IOException {
  int c;
  while (isWhiteSpace(c=buf.get())) {
  }
  for (int i=0; i < match.length(); i++) {
    if (i > 0) {
      c=buf.get();
    }
    if (c != match.charAt(i)) {
      return false;
    }
  }
  return true;
}

public static Object deserializeObject(final byte[] objBytes,final ClassLoader loader) throws IOException, ClassNotFoundException {
  ObjectInputStream objIn=null;
  try {
    objIn=new ClassLoaderObjectInputStream(new ByteArrayInputStream(objBytes),loader);
    return objIn.readObject();
  }
  finally {
    close(objIn);
  }
}

public IntervalImpl(int serialNum,long startIntervalDateTime,double coverageFactor,FramingFlowType intervalDataType,ISource source,IIntervalClassification intervalClassification,Version adeVersion) throws AdeInternalException {
  a_adeVersion=adeVersion;
  if (startIntervalDateTime < 0) {
    throw new IllegalArgumentException(String.format("Interval start time must be " + "greater than 0! Failed creating new interval with parameters: serialNum=%d, " + "startIntervalDateTime=%d, coverageFactor=%s, intervalDataType=%s, source=%s, "+ "intervalClassification=%s, adeVersion=%s",serialNum,startIntervalDateTime,coverageFactor,intervalDataType,source,intervalClassification,adeVersion));
  }
  m_startIntervalTime=startIntervalDateTime;
  m_framingFlowType=intervalDataType;
  m_serialNum=serialNum;
  m_intervalClassification=intervalClassification;
  if (m_intervalClassification == null) {
    m_intervalClassification=IntervalClassificationEnum.REGULAR;
  }
  m_messageSummaryMap=new TreeMap<Integer,IMessageSummary>();
  m_endIntervalTime=m_startIntervalTime + m_framingFlowType.getDuration();
  m_source=source;
  if (coverageFactor <= 0 || coverageFactor > 1) {
    throw new AdeInternalException("Interval coverage factor must be between 0 (exclusive) and 1 (inclusive), but currently is: " + coverageFactor);
  }
  m_coverageFactor=coverageFactor;
}

public static boolean isTrue(Map<String,Object> dict,String key){
  return isTrue(dict,key,false);
}

protected ShoppingCartItem(){
}

public OutputStream bindStream(OutputStream output){
  OutputStream stream=m_streams.get();
  m_streams.set(output);
  return stream;
}

private void initMapLayer(){
  float zoom=getInitZoom(mapView.getWidth(),mapView.getHeight(),image.getWidth(),image.getHeight());
  Log.i(TAG,Float.toString(zoom));
  mapView.setCurrentZoom(zoom,0,0);
  float width=mapView.getWidth() - zoom * image.getWidth();
  float height=mapView.getHeight() - zoom * image.getHeight();
  mapView.translate(width / 2,height / 2);
}

public static double sampleSkew(int size,double moment3,double sampleVariance){
  int n=size;
  double s=Math.sqrt(sampleVariance);
  double m3=moment3 * n;
  return n * m3 / ((n - 1) * (n - 2) * s* s* s);
}

public static void evolve(Permutation p1,Permutation p2){
  int n=p1.size();
  if (n != p2.size()) {
    throw new FrameworkException("permutations not same size");
  }
  int cuttingPoint1=PRNG.nextInt(n);
  int cuttingPoint2=PRNG.nextInt(n - 1);
  if (cuttingPoint1 == cuttingPoint2) {
    cuttingPoint2=n - 1;
  }
 else   if (cuttingPoint1 > cuttingPoint2) {
    int swap=cuttingPoint1;
    cuttingPoint1=cuttingPoint2;
    cuttingPoint2=swap;
  }
  int[] parent1=p1.toArray();
  int[] parent2=p2.toArray();
  int[] offspring1=new int[n];
  int[] offspring2=new int[n];
  int[] replacement1=new int[n];
  int[] replacement2=new int[n];
  Arrays.fill(replacement1,-1);
  Arrays.fill(replacement2,-1);
  for (int i=cuttingPoint1; i <= cuttingPoint2; i++) {
    offspring1[i]=parent2[i];
    offspring2[i]=parent1[i];
    replacement1[parent2[i]]=parent1[i];
    replacement2[parent1[i]]=parent2[i];
  }
  for (int i=0; i < n; i++) {
    if ((i < cuttingPoint1) || (i > cuttingPoint2)) {
      int n1=parent1[i];
      int m1=replacement1[n1];
      int n2=parent2[i];
      int m2=replacement2[n2];
      while (m1 != -1) {
        n1=m1;
        m1=replacement1[m1];
      }
      while (m2 != -1) {
        n2=m2;
        m2=replacement2[m2];
      }
      offspring1[i]=n1;
      offspring2[i]=n2;
    }
  }
  p1.fromArray(offspring1);
  p2.fromArray(offspring2);
}

private String extractSpan(String spans,int start,int end) throws IndexOutOfBoundsException {
  int offset=getFirstSpanOffset(spans);
  assert (start >= offset);
  assert (end >= offset);
  spans+=HTML_OPEN_SPAN;
  int substart=getSpanPos(spans,start - offset);
  int subend=getSpanPos(spans,end - offset + 1);
  return spans.substring(substart,subend);
}

public void finished(long chainLength){
  currentState=chainLength;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(currentState);
      logger.stopLogging();
    }
  }
  if (showOperatorAnalysis) {
    showOperatorAnalysis(System.out);
  }
  if (operatorAnalysisFile != null) {
    try {
      PrintStream out=new PrintStream(new FileOutputStream(operatorAnalysisFile));
      showOperatorAnalysis(out);
      out.flush();
      out.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}

public boolean hasDelay(){
  return delay != -1;
}

void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException {
  String value=attrs.getValue("xml:space");
  if (null == value) {
    m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse());
  }
 else   if (value.equals("preserve")) {
    m_spacePreserveStack.push(true);
  }
 else   if (value.equals("default")) {
    m_spacePreserveStack.push(false);
  }
 else {
    SAXSourceLocator locator=getLocator();
    ErrorListener handler=m_stylesheetProcessor.getErrorListener();
    try {
      handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator));
    }
 catch (    TransformerException te) {
      throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te);
    }
    m_spacePreserveStack.push(m_spacePreserveStack.peek());
  }
}

@SuppressWarnings("unchecked") public void registerDefaultDeviceTypes(){
  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();
  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    try {
      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));
    }
 catch (    ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}

protected void positiveClose(){
  freeContent();
}

public InputStreamReader(java.io.InputStream is,java.lang.String enc) throws java.io.UnsupportedEncodingException {
  internal=is;
  this.enc=enc.intern();
}

public int serverDelivery(Object message,Object consumer,int deliveryCount) throws Exception {
  ProtonServerSenderContext protonSender=serverSenders.get(consumer);
  if (protonSender != null) {
    return protonSender.deliverMessage(message,deliveryCount);
  }
  return 0;
}

public static String decode(AbstractMessage msg,Boolean ext,int header){
  if (ext == false) {
    return decode(msg);
  }
  return "Bootloader Message Type: " + header;
}

private Instance votedReclassifyExample(Instance example) throws Exception {
  int classVotes[]=new int[getNumClasses()];
  for (int i=0; i < classVotes.length; i++) {
    classVotes[i]=0;
  }
  for (Enumeration<RuleList> e=new WekaEnumeration<RuleList>(m_DecisionList); e.hasMoreElements(); ) {
    RuleList rl=e.nextElement();
    int classValue=(int)rl.classifyInstance(example);
    if (classValue >= 0) {
      classVotes[classValue]++;
    }
  }
  int maxVote=0;
  int vote=-1;
  for (int i=0; i < classVotes.length; i++) {
    if (classVotes[i] > maxVote) {
      maxVote=classVotes[i];
      vote=i;
    }
  }
  if (vote >= 0) {
    example.setClassValue(vote);
  }
 else {
    throw new Exception("Error in instance classification.");
  }
  return example;
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

public final int hashCode(){
  return System.identityHashCode(this);
}

public DTMAxisIterator cloneIterator(){
  _isRestartable=false;
  try {
    final PrecedingIterator clone=(PrecedingIterator)super.clone();
    final int[] stackCopy=new int[_stack.length];
    System.arraycopy(_stack,0,stackCopy,0,_stack.length);
    clone._stack=stackCopy;
    return clone;
  }
 catch (  CloneNotSupportedException e) {
    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));
  }
}

private BigQueryIO(){
}

private boolean keyChainContainsPrivateKey(Collection<ECKey> keyChain,ECKey keyToAdd){
  if (keyChain == null || keyToAdd == null) {
    return false;
  }
 else {
    for (    ECKey loopKey : keyChain) {
      if (Arrays.equals(keyToAdd.getPrivKeyBytes(),loopKey.getPrivKeyBytes())) {
        return true;
      }
    }
    return false;
  }
}

public ScriptBuilder data(byte[] data){
  if (data.length == 0)   return smallNum(0);
 else   return data(chunks.size(),data);
}

public RotationMatrixBuilder withThetas(double theta){
  for (  Plane plane : planes) {
    plane.setTheta(theta);
  }
  return this;
}

private void writeUserRegistry(LocalContainer container,File configDir,Map<String,String> users,Map<String,List<String>> groups) throws IOException {
  File usersXML=new File(configDir,"cargo-users.xml");
  PrintStream writer=ServerConfigUtils.open(usersXML);
  writer.println("  <basicRegistry id=\"basic\">");
  for (  Map.Entry<String,String> user : users.entrySet()) {
    writer.print("    <user name=\"");
    writer.print(user.getKey());
    writer.print("\" password=\"");
    writer.print(user.getValue());
    writer.println("\"/>");
  }
  for (  Map.Entry<String,List<String>> group : groups.entrySet()) {
    writer.print("    <group name=\"");
    writer.print(group.getKey());
    writer.println("\">");
    for (    String member : group.getValue()) {
      writer.print("      <member name=\"");
      writer.print(member);
      writer.println("\"/>");
    }
    writer.println("    </group>");
  }
  writer.println("  </basicRegistry>");
  ServerConfigUtils.close(writer);
}

public static String valueOf(double value){
  return Double.toString(value);
}

private static void decodeHanziSegment(BitSource bits,StringBuilder result,int count) throws FormatException {
  if (count * 13 > bits.available()) {
    throw FormatException.getFormatInstance();
  }
  byte[] buffer=new byte[2 * count];
  int offset=0;
  while (count > 0) {
    int twoBytes=bits.readBits(13);
    int assembledTwoBytes=((twoBytes / 0x060) << 8) | (twoBytes % 0x060);
    if (assembledTwoBytes < 0x003BF) {
      assembledTwoBytes+=0x0A1A1;
    }
 else {
      assembledTwoBytes+=0x0A6A1;
    }
    buffer[offset]=(byte)((assembledTwoBytes >> 8) & 0xFF);
    buffer[offset + 1]=(byte)(assembledTwoBytes & 0xFF);
    offset+=2;
    count--;
  }
  try {
    result.append(new String(buffer,StringUtils.GB2312));
  }
 catch (  UnsupportedEncodingException ignored) {
    throw FormatException.getFormatInstance();
  }
}

@GenIgnore static Record createRecord(String name,String address,Class itf,JsonObject metadata){
  return createRecord(name,address,itf.getName(),metadata);
}

public StopwatchCPU(){
  threadTimer=ManagementFactory.getThreadMXBean();
  start=threadTimer.getCurrentThreadCpuTime();
}

public synchronized byte[] lookupAudio(String inputtype,String locale,String voice,String outputparams,String style,String effects,String inputtext) throws SQLException {
  if (inputtype == null || locale == null || voice == null || inputtext == null) {
    throw new NullPointerException("Null argument");
  }
  byte[] audio=null;
  String query="Select outputaudio FROM marycache WHERE inputtype = '" + inputtype + "' AND outputtype = 'AUDIO' AND locale = '"+ locale+ "' AND voice = '"+ voice+ "' AND outputparams = '"+ outputparams+ "' AND style = '"+ style+ "' AND effects = '"+ effects+ "' AND inputtext = ?";
  PreparedStatement st=connection.prepareStatement(query);
  st.setString(1,inputtext);
  ResultSet results=st.executeQuery();
  if (results.next()) {
    audio=results.getBytes(1);
  }
  return audio;
}

public void addCondition(final Condition condition){
  conditions.add(condition);
  condition.setId(conditionIdCounter++);
}

public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){
  byte[] buffer=new byte[byteBuffer.remaining()];
  byteBuffer.get(buffer);
  return buffer;
}

public void findPackageAndClass() throws IOException {
  packageName=null;
  className=null;
  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));
  try {
    while (className == null || packageName == null) {
      String line=reader.readLine();
      if (line == null)       break;
      if (packageName == null) {
        Matcher matcher=PACKAGE_PATTERN.matcher(line);
        if (matcher.find()) {
          packageName=matcher.group(1);
        }
      }
      if (className == null) {
        Matcher matcher=CLASS_PATTERN.matcher(line);
        if (matcher.find()) {
          className=matcher.group(1);
        }
      }
    }
    if (className == null) {
      className="Yylex";
    }
  }
  finally {
    reader.close();
  }
}

public static void log(final String msg,final Throwable t){
  if (DEBUG) {
    log(msg);
    t.printStackTrace(System.out);
  }
}

public static Set<URI> fetchRPTargetVirtualPools(DbClient dbClient){
  Set<URI> rpProtectedTargetVPools=new HashSet<URI>();
  try {
    List<URI> vpoolProtectionSettingsURIs=dbClient.queryByType(VpoolProtectionVarraySettings.class,true);
    Iterator<VpoolProtectionVarraySettings> vPoolProtectionSettingsItr=dbClient.queryIterativeObjects(VpoolProtectionVarraySettings.class,vpoolProtectionSettingsURIs,true);
    while (vPoolProtectionSettingsItr.hasNext()) {
      VpoolProtectionVarraySettings rSetting=vPoolProtectionSettingsItr.next();
      if (null != rSetting && !NullColumnValueGetter.isNullURI(rSetting.getVirtualPool())) {
        rpProtectedTargetVPools.add(rSetting.getVirtualPool());
      }
    }
  }
 catch (  Exception ex) {
    _log.error("Exception occurred while fetching RP enabled virtualpools",ex);
  }
  return rpProtectedTargetVPools;
}

public NSData(File file) throws IOException {
  bytes=new byte[(int)file.length()];
  RandomAccessFile raf=new RandomAccessFile(file,"r");
  raf.read(bytes);
  raf.close();
}

public int cardinality(){
  int sum=0;
  for (  long l : this.data)   sum+=Long.bitCount(l);
  return sum;
}

private String deEscapeLiteral(String lit){
  return lit.replaceAll("\\\\\"","\"");
}

private static URI cookieUri(URI uri,HttpCookie cookie){
  URI cookieUri=uri;
  if (cookie.getDomain() != null) {
    String domain=cookie.getDomain();
    if (domain.charAt(0) == '.') {
      domain=domain.substring(1);
    }
    try {
      cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null);
    }
 catch (    URISyntaxException e) {
      Log.w(TAG,e);
    }
  }
  return cookieUri;
}

public static void i(String msg,Object... args){
  if (!allowI)   return;
  StackTraceElement caller=getCallerStackTraceElement();
  String tag=generateTag(caller);
  if (sLevel > LEVEL_INFO) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.i(tag,msg);
}

public static <V>boolean addListNotNullValue(List<V> sourceList,V value){
  return (sourceList != null && value != null) ? sourceList.add(value) : false;
}

public DNewKeyStoreType(JFrame parent){
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  setTitle(res.getString("DNewKeyStoreType.Title"));
  initComponents();
}

protected void sprint(long longField){
  sprint(String.valueOf(longField));
}

private String substituteSubString(String input,String find,String replace){
  int find_length=find.length();
  int replace_length=replace.length();
  StringBuilder output=new StringBuilder(input);
  int index=input.indexOf(find);
  int outputOffset=0;
  while (index > -1) {
    output.replace(index + outputOffset,index + outputOffset + find_length,replace);
    outputOffset=outputOffset + (replace_length - find_length);
    index=input.indexOf(find,index + find_length);
  }
  return output.toString();
}

private int insertTestDataLocalDTTypes(PreparedStatement pstmt) throws Exception {
  pstmt.setInt(1,1);
  pstmt.setDate(2,testSqlDate);
  pstmt.setTime(3,testSqlTime);
  pstmt.setTimestamp(4,testSqlTimeStamp);
  pstmt.setTimestamp(5,testSqlTimeStamp);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,2);
  pstmt.setObject(2,testLocalDate);
  pstmt.setObject(3,testLocalTime);
  pstmt.setObject(4,testLocalDateTime);
  pstmt.setObject(5,testLocalDateTime);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,3);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,4);
  pstmt.setObject(2,testLocalDate,JDBCType.DATE,10);
  pstmt.setObject(3,testLocalTime,JDBCType.TIME,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.TIMESTAMP,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.TIMESTAMP,20);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,5);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR);
  assertEquals(1,pstmt.executeUpdate());
  pstmt.setInt(1,6);
  pstmt.setObject(2,testLocalDate,JDBCType.VARCHAR,10);
  pstmt.setObject(3,testLocalTime,JDBCType.VARCHAR,8);
  pstmt.setObject(4,testLocalDateTime,JDBCType.VARCHAR,20);
  pstmt.setObject(5,testLocalDateTime,JDBCType.VARCHAR,20);
  assertEquals(1,pstmt.executeUpdate());
  if (pstmt instanceof CallableStatement) {
    CallableStatement cstmt=(CallableStatement)pstmt;
    cstmt.setInt("id",7);
    cstmt.setDate("d",testSqlDate);
    cstmt.setTime("t",testSqlTime);
    cstmt.setTimestamp("dt",testSqlTimeStamp);
    cstmt.setTimestamp("ts",testSqlTimeStamp);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt("id",8);
    cstmt.setObject("d",testLocalDate);
    cstmt.setObject("t",testLocalTime);
    cstmt.setObject("dt",testLocalDateTime);
    cstmt.setObject("ts",testLocalDateTime);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt("id",9);
    cstmt.setObject("d",testLocalDate,JDBCType.DATE);
    cstmt.setObject("t",testLocalTime,JDBCType.TIME);
    cstmt.setObject("dt",testLocalDateTime,JDBCType.TIMESTAMP);
    cstmt.setObject("ts",testLocalDateTime,JDBCType.TIMESTAMP);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt("id",10);
    cstmt.setObject("d",testLocalDate,JDBCType.DATE,10);
    cstmt.setObject("t",testLocalTime,JDBCType.TIME,8);
    cstmt.setObject("dt",testLocalDateTime,JDBCType.TIMESTAMP,20);
    cstmt.setObject("ts",testLocalDateTime,JDBCType.TIMESTAMP,20);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt("id",11);
    cstmt.setObject("d",testLocalDate,JDBCType.VARCHAR);
    cstmt.setObject("t",testLocalTime,JDBCType.VARCHAR);
    cstmt.setObject("dt",testLocalDateTime,JDBCType.VARCHAR);
    cstmt.setObject("ts",testLocalDateTime,JDBCType.VARCHAR);
    assertEquals(1,cstmt.executeUpdate());
    cstmt.setInt("id",12);
    cstmt.setObject("d",testLocalDate,JDBCType.VARCHAR,10);
    cstmt.setObject("t",testLocalTime,JDBCType.VARCHAR,8);
    cstmt.setObject("dt",testLocalDateTime,JDBCType.VARCHAR,20);
    cstmt.setObject("ts",testLocalDateTime,JDBCType.VARCHAR,20);
    assertEquals(1,cstmt.executeUpdate());
    return 12;
  }
  return 6;
}

public void removeListener(final L listener){
  Validate.notNull(listener,"Listener object cannot be null.");
  listeners.remove(listener);
}

public void run(){
  start();
  try {
    while (true) {
      Thread.sleep(interval);
      processConfigMessages();
    }
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
    log.warn("Got interrupt in config manager thread, so shutting down");
  }
 finally {
    log.info("Stopping the config manager");
    stop();
  }
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

private static DecoderResult createDecoderResultFromAmbiguousValues(int ecLevel,int[] codewords,int[] erasureArray,int[] ambiguousIndexes,int[][] ambiguousIndexValues) throws FormatException, ChecksumException {
  int[] ambiguousIndexCount=new int[ambiguousIndexes.length];
  int tries=100;
  while (tries-- > 0) {
    for (int i=0; i < ambiguousIndexCount.length; i++) {
      codewords[ambiguousIndexes[i]]=ambiguousIndexValues[i][ambiguousIndexCount[i]];
    }
    try {
      return decodeCodewords(codewords,ecLevel,erasureArray);
    }
 catch (    ChecksumException ignored) {
    }
    if (ambiguousIndexCount.length == 0) {
      throw ChecksumException.getChecksumInstance();
    }
    for (int i=0; i < ambiguousIndexCount.length; i++) {
      if (ambiguousIndexCount[i] < ambiguousIndexValues[i].length - 1) {
        ambiguousIndexCount[i]++;
        break;
      }
 else {
        ambiguousIndexCount[i]=0;
        if (i == ambiguousIndexCount.length - 1) {
          throw ChecksumException.getChecksumInstance();
        }
      }
    }
  }
  throw ChecksumException.getChecksumInstance();
}

private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  init(getName(),getMask(actions));
}

public int predBlockIndexForSourcesIndex(int sourcesIndex){
  return operands.get(sourcesIndex).blockIndex;
}

public LockableFileWriter(File file,Charset encoding,boolean append,String lockDir) throws IOException {
  super();
  file=file.getAbsoluteFile();
  if (file.getParentFile() != null) {
    FileUtils.forceMkdir(file.getParentFile());
  }
  if (file.isDirectory()) {
    throw new IOException("File specified is a directory");
  }
  if (lockDir == null) {
    lockDir=System.getProperty("java.io.tmpdir");
  }
  File lockDirFile=new File(lockDir);
  FileUtils.forceMkdir(lockDirFile);
  testLockDir(lockDirFile);
  lockFile=new File(lockDirFile,file.getName() + LCK);
  createLock();
  out=initWriter(file,encoding,append);
}

void appendProgramDescription(final WrappingStringBuilder wb){
  if (!mProgramDescription.equals("")) {
    wb.append(LS);
    wb.setWrapIndent(0);
    wb.wrapTextWithNewLines(mProgramDescription);
  }
}

public static byte[] decode(String s) throws java.io.IOException {
  return decode(s,NO_OPTIONS);
}

@SuppressWarnings("deprecation") private static final URL toURL(String location,boolean file){
  if (file) {
    File f=new File(location);
    if (f.exists()) {
      try {
        return f.toURL();
      }
 catch (      MalformedURLException murl) {
        return null;
      }
    }
 else {
      return null;
    }
  }
 else {
    return getURL(location);
  }
}

protected Object parseValue(String string){
  int openParen=string.indexOf("(");
  String type=string.substring(0,openParen);
  String value=string.substring(openParen + 1,string.length() - 1);
  if (type.equals("String")) {
    return value;
  }
 else   if (type.equals("Float")) {
    return new Float(Float.parseFloat(value));
  }
 else   if (type.equals("Integer")) {
    return new Integer(Integer.parseInt(value));
  }
 else   if (type.equals("List")) {
    StringTokenizer tok=new StringTokenizer(value,",");
    int size=tok.countTokens();
    int[] values=new int[size];
    for (int i=0; i < size; i++) {
      float fval=Float.parseFloat(tok.nextToken());
      values[i]=Math.round(fval);
    }
    return values;
  }
 else {
    throw new Error("Unknown type: " + type);
  }
}

public static String toUpperCase(String string){
  boolean changed=false;
  char[] chars=string.toCharArray();
  for (int i=0; i != chars.length; i++) {
    char ch=chars[i];
    if ('a' <= ch && 'z' >= ch) {
      changed=true;
      chars[i]=(char)(ch - 'a' + 'A');
    }
  }
  if (changed) {
    return new String(chars);
  }
  return string;
}

public void writeData(DataOutput dout) throws IOException {
  dout.write(getMessage());
}

@Override public void update(List<EnvVar> dataList){
  envVarList.clear();
  if (dataList == null) {
    for (    EnvVar envVar : builtInEnvVarMap.values()) {
      envVarList.add(envVar);
    }
  }
 else {
    for (    EnvVar envVar : dataList) {
      if (builtInEnvVarMap.containsKey(envVar.getName())) {
        envVarList.add(new EnvVar(envVar,true));
      }
 else {
        envVarList.add(new EnvVar(envVar,false));
      }
    }
  }
  setEnvironmentVariableValues();
}

public void makeClass(String str,boolean caseless){
  for (int i=0; i < str.length(); i++)   makeClass(str.charAt(i),caseless);
}

protected void notifyTimestampsToGateways(EntryEventImpl event){
  VersionTagHolder updateTimeStampEvent=new VersionTagHolder(event.getVersionTag());
  updateTimeStampEvent.setOperation(Operation.UPDATE_VERSION_STAMP);
  updateTimeStampEvent.setKeyInfo(event.getKeyInfo());
  updateTimeStampEvent.setGenerateCallbacks(false);
  updateTimeStampEvent.distributedMember=event.getDistributedMember();
  updateTimeStampEvent.setNewEventId(getSystem());
  if (event.getRegion() instanceof BucketRegion) {
    BucketRegion br=(BucketRegion)event.getRegion();
    PartitionedRegion pr=br.getPartitionedRegion();
    updateTimeStampEvent.setRegion(pr);
    if (pr.isParallelWanEnabled()) {
      br.handleWANEvent(updateTimeStampEvent);
    }
    if (pr.isInitialized()) {
      pr.notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
    }
  }
 else {
    updateTimeStampEvent.setRegion(event.getRegion());
    notifyGatewaySender(EnumListenerEvent.TIMESTAMP_UPDATE,updateTimeStampEvent);
  }
}

public Token nextRegex(Pattern pattern){
  if (!hasNextRegex(pattern))   throw new IllegalStateException("No more occurrences found!");
  Matcher matcher=anyMentionPattern.matcher(remaining);
  if (!matcher.find())   throw new IllegalStateException("Couldn't find any matches!");
  final int start=currentPosition + matcher.start();
  final int end=currentPosition + matcher.end();
  stepTo(end);
  return new Token(this,start,end);
}

public boolean removeNode(ServiceNode node){
  try {
    return nodes.remove(node);
  }
 catch (  Exception e) {
    return false;
  }
}

public String asString() throws IOException {
  long len=getContentLength();
  ByteArrayOutputStream buf;
  if (0 < len) {
    buf=new ByteArrayOutputStream((int)len);
  }
 else {
    buf=new ByteArrayOutputStream();
  }
  writeTo(buf);
  return decode(buf.toByteArray(),getCharacterEncoding());
}

public static void init(Context context){
  if (cameraManager == null) {
    cameraManager=new CameraManager(context);
  }
}

public void addContentItem(ContentItem contentItem){
  if (contentItems == null) {
    contentItems=new ArrayList<ContentItem>();
  }
  contentItems.add(contentItem);
}

public void execute() throws IOException {
  String key="mqtt-" + (System.currentTimeMillis() / 1000);
  String b64Key=Base64.encode(key);
  sendHandshakeRequest(b64Key);
  receiveHandshakeResponse(b64Key);
}

public void calculateMin(double min){
  if (this.min == -1) {
    this.min=min;
  }
 else {
    this.min=Math.min(this.min,min);
  }
}

private void emitUntil(@Nonnegative int taskCountAllowed) throws IOException {
  try {
    while (emitQueue.size() > taskCountAllowed) {
      Future<byte[]> future=emitQueue.remove();
      byte[] toWrite=future.get();
      blockSizes.add(toWrite.length);
      out.write(toWrite);
    }
    tryEmit();
  }
 catch (  ExecutionException e) {
    throw new IOException(e);
  }
catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
}

void xrot(double theta){
  theta*=(pi / 180);
  double ct=Math.cos(theta);
  double st=Math.sin(theta);
  float Nyx=(float)(yx * ct + zx * st);
  float Nyy=(float)(yy * ct + zy * st);
  float Nyz=(float)(yz * ct + zz * st);
  float Nyo=(float)(yo * ct + zo * st);
  float Nzx=(float)(zx * ct - yx * st);
  float Nzy=(float)(zy * ct - yy * st);
  float Nzz=(float)(zz * ct - yz * st);
  float Nzo=(float)(zo * ct - yo * st);
  yo=Nyo;
  yx=Nyx;
  yy=Nyy;
  yz=Nyz;
  zo=Nzo;
  zx=Nzx;
  zy=Nzy;
  zz=Nzz;
}

public void testAuditCompleted(){
}

public static void scaleRectAboutCenter(Rect r,float scale){
  if (scale != 1.0f) {
    int cx=r.centerX();
    int cy=r.centerY();
    r.offset(-cx,-cy);
    r.left=(int)(r.left * scale + 0.5f);
    r.top=(int)(r.top * scale + 0.5f);
    r.right=(int)(r.right * scale + 0.5f);
    r.bottom=(int)(r.bottom * scale + 0.5f);
    r.offset(cx,cy);
  }
}

private static CharHandler parseUnprintableExtCodes(String[] codeStrings){
  if (codeStrings.length != 1) {
    throw new IllegalStateException("Unexpected code strings " + Arrays.asList(codeStrings));
  }
  byte[] bytes=codesToBytes(codeStrings[0],true);
  if (bytes.length != 1) {
    throw new IllegalStateException("Unexpected code strings " + Arrays.asList(codeStrings));
  }
  return new UnprintableExtCharHandler(bytes[0]);
}

private int measureHeight(int measureSpec){
  float result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return (int)Math.ceil(result);
}

public static boolean isNull(URI id){
  return (id == null) || NULL_URI.equals(id);
}

public void updatePendingList(){
  while (mPendingList.size() > 0 && activeListHasRoom()) {
    DownloadInfoRunnable pending=mPendingList.get(0);
    pending.changeStatusState(new ActiveState(pending));
  }
}

@SuppressWarnings("unused") public static float valueRangeLimit(float value,float startValue,float endValue){
  if (value < Math.min(startValue,endValue))   return Math.min(startValue,endValue);
  if (value > Math.max(startValue,endValue))   return Math.max(startValue,endValue);
  return value;
}

protected void createTitle(String title){
  String newTitle;
  newTitle="Weka " + new Version();
  if (title.length() != 0) {
    newTitle+=" - " + title;
  }
  setTitle(newTitle);
}

public static boolean isConnected(NetType netType,NetworkInfo networkInfo){
  if (netType == NetType.Any && networkInfo != null && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Wifi && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI && isConnected(networkInfo))   return true;
 else   if (netType == NetType.Mobile && networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE && isConnected(networkInfo))   return true;
  return false;
}

public void deleteItem(int position){
  if (!isDataListEmpty() && position >= 0 && position < mDataList.size()) {
    mDataList.remove(position);
    notifyItemRemoved(position);
  }
}

private int calculateGraidentChannel(int sourceChannel,int destChannel,int distance,int offset){
  if (sourceChannel == destChannel) {
    return sourceChannel;
  }
  float ratio=((float)offset) / ((float)distance);
  int pos=(int)(Math.abs(sourceChannel - destChannel) * ratio);
  if (sourceChannel > destChannel) {
    return sourceChannel - pos;
  }
 else {
    return sourceChannel + pos;
  }
}

private void applyImageMatrix(float width,float height,boolean center,boolean animate){
  if (mBitmap != null && width > 0 && height > 0) {
    mImageMatrix.reset();
    mImageMatrix.postTranslate((width - mBitmap.getWidth()) / 2,(height - mBitmap.getHeight()) / 2);
    mapImagePointsByImageMatrix();
    if (mDegreesRotated > 0) {
      mImageMatrix.postRotate(mDegreesRotated,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    float scale=Math.min(width / BitmapUtils.getRectWidth(mImagePoints),height / BitmapUtils.getRectHeight(mImagePoints));
    if (mScaleType == ScaleType.FIT_CENTER || (mScaleType == ScaleType.CENTER_INSIDE && scale < 1) || (scale > 1 && mAutoZoomEnabled)) {
      mImageMatrix.postScale(scale,scale,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
      mapImagePointsByImageMatrix();
    }
    mImageMatrix.postScale(mZoom,mZoom,BitmapUtils.getRectCenterX(mImagePoints),BitmapUtils.getRectCenterY(mImagePoints));
    mapImagePointsByImageMatrix();
    RectF cropRect=mCropOverlayView.getCropWindowRect();
    cropRect.offset(-mZoomOffsetX * mZoom,-mZoomOffsetY * mZoom);
    if (center) {
      mZoomOffsetX=width > BitmapUtils.getRectWidth(mImagePoints) ? 0 : Math.max(Math.min(width / 2 - cropRect.centerX(),-BitmapUtils.getRectLeft(mImagePoints)),getWidth() - BitmapUtils.getRectRight(mImagePoints)) / mZoom;
      mZoomOffsetY=height > BitmapUtils.getRectHeight(mImagePoints) ? 0 : Math.max(Math.min(height / 2 - cropRect.centerY(),-BitmapUtils.getRectTop(mImagePoints)),getHeight() - BitmapUtils.getRectBottom(mImagePoints)) / mZoom;
    }
 else {
      mZoomOffsetX=Math.min(Math.max(mZoomOffsetX * mZoom,-cropRect.left),-cropRect.right + width) / mZoom;
      mZoomOffsetY=Math.min(Math.max(mZoomOffsetY * mZoom,-cropRect.top),-cropRect.bottom + height) / mZoom;
    }
    mImageMatrix.postTranslate(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    cropRect.offset(mZoomOffsetX * mZoom,mZoomOffsetY * mZoom);
    mCropOverlayView.setCropWindowRect(cropRect);
    mapImagePointsByImageMatrix();
    if (animate) {
      mAnimation.setEndState(mImagePoints,mImageMatrix);
      mImageView.startAnimation(mAnimation);
    }
 else {
      mImageView.setImageMatrix(mImageMatrix);
    }
    updateImageBounds(false);
  }
}

public static void addStartupListener(StartUpListener s){
  m_StartupListeners.add(s);
}

public static void closeQuiet(@Nullable SelectionKey rsrc){
  if (rsrc != null)   closeQuiet(rsrc.channel());
}

public CompletableFuture<NewFile> run(){
  LOG.log(Level.FINE,"starting optimized file creation for {0} files",files.size());
  CompletableFuture<NewFile> fileCreation=new CompletableFuture<>();
  final List<TSData> fjpFiles=this.files;
  TASK_POOL.execute(null);
synchronized (OUTSTANDING) {
    OUTSTANDING.add(fileCreation);
  }
  this.files=new LinkedList<>();
  return fileCreation;
}

private static Key createDESKey(byte[] bytes,int offset){
  byte[] keyBytes=new byte[7];
  System.arraycopy(bytes,offset,keyBytes,0,7);
  byte[] material=new byte[8];
  material[0]=keyBytes[0];
  material[1]=(byte)(keyBytes[0] << 7 | (keyBytes[1] & 0xff) >>> 1);
  material[2]=(byte)(keyBytes[1] << 6 | (keyBytes[2] & 0xff) >>> 2);
  material[3]=(byte)(keyBytes[2] << 5 | (keyBytes[3] & 0xff) >>> 3);
  material[4]=(byte)(keyBytes[3] << 4 | (keyBytes[4] & 0xff) >>> 4);
  material[5]=(byte)(keyBytes[4] << 3 | (keyBytes[5] & 0xff) >>> 5);
  material[6]=(byte)(keyBytes[5] << 2 | (keyBytes[6] & 0xff) >>> 6);
  material[7]=(byte)(keyBytes[6] << 1);
  oddParity(material);
  return new SecretKeySpec(material,"DES");
}

private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {
  int codewordPosition=1 + bits.getByteOffset();
  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);
  int count;
  if (d1 == 0) {
    count=bits.available() / 8;
  }
 else   if (d1 < 250) {
    count=d1;
  }
 else {
    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);
  }
  if (count < 0) {
    throw FormatException.getFormatInstance();
  }
  byte[] bytes=new byte[count];
  for (int i=0; i < count; i++) {
    if (bits.available() < 8) {
      throw FormatException.getFormatInstance();
    }
    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);
  }
  byteSegments.add(bytes);
  try {
    result.append(new String(bytes,"ISO8859_1"));
  }
 catch (  UnsupportedEncodingException uee) {
    throw new IllegalStateException("Platform does not support required encoding: " + uee);
  }
}

static void checkDesc(final String desc,final boolean canBeVoid){
  int end=checkDesc(desc,0,canBeVoid);
  if (end != desc.length()) {
    throw new IllegalArgumentException("Invalid descriptor: " + desc);
  }
}

protected JsOutput newJsOutput(Module m) throws IOException {
  return new JsOutput(m,isCompilingLanguageModule());
}

public String text(){
  StringBuilder sb=new StringBuilder();
  for (  Node node : nodes) {
    sb.append(node.getTextContent());
  }
  return sb.toString();
}

private boolean scanExpr(SymbolTable symbolTable,Tokens tokens,String data,int currentOffset,int endOffset) throws XNIException {
  int ch;
  int openParen=0;
  int closeParen=0;
  int nameOffset, dataOffset;
  boolean isQName=false;
  String name=null;
  String prefix=null;
  String schemeData=null;
  StringBuffer schemeDataBuff=new StringBuffer();
  while (true) {
    if (currentOffset == endOffset) {
      break;
    }
    ch=data.charAt(currentOffset);
    while (ch == ' ' || ch == 0x0A || ch == 0x09 || ch == 0x0D) {
      if (++currentOffset == endOffset) {
        break;
      }
      ch=data.charAt(currentOffset);
    }
    if (currentOffset == endOffset) {
      break;
    }
    byte chartype=(ch >= 0x80) ? CHARTYPE_NONASCII : fASCIICharMap[ch];
switch (chartype) {
case CHARTYPE_OPEN_PAREN:
      addToken(tokens,Tokens.XPTRTOKEN_OPEN_PAREN);
    openParen++;
  ++currentOffset;
break;
case CHARTYPE_CLOSE_PAREN:
addToken(tokens,Tokens.XPTRTOKEN_CLOSE_PAREN);
closeParen++;
++currentOffset;
break;
case CHARTYPE_CARRET:
case CHARTYPE_COLON:
case CHARTYPE_DIGIT:
case CHARTYPE_EQUAL:
case CHARTYPE_LETTER:
case CHARTYPE_MINUS:
case CHARTYPE_NONASCII:
case CHARTYPE_OTHER:
case CHARTYPE_PERIOD:
case CHARTYPE_SLASH:
case CHARTYPE_UNDERSCORE:
case CHARTYPE_WHITESPACE:
if (openParen == 0) {
nameOffset=currentOffset;
currentOffset=scanNCName(data,endOffset,currentOffset);
if (currentOffset == nameOffset) {
reportError("InvalidShortHandPointer",new Object[]{data});
return false;
}
if (currentOffset < endOffset) {
ch=data.charAt(currentOffset);
}
 else {
ch=-1;
}
name=symbolTable.addSymbol(data.substring(nameOffset,currentOffset));
prefix=XMLSymbols.EMPTY_STRING;
if (ch == ':') {
if (++currentOffset == endOffset) {
return false;
}
ch=data.charAt(currentOffset);
prefix=name;
nameOffset=currentOffset;
currentOffset=scanNCName(data,endOffset,currentOffset);
if (currentOffset == nameOffset) {
return false;
}
if (currentOffset < endOffset) {
ch=data.charAt(currentOffset);
}
 else {
ch=-1;
}
isQName=true;
name=symbolTable.addSymbol(data.substring(nameOffset,currentOffset));
}
if (currentOffset != endOffset) {
addToken(tokens,Tokens.XPTRTOKEN_SCHEMENAME);
tokens.addToken(prefix);
tokens.addToken(name);
isQName=false;
}
 else if (currentOffset == endOffset) {
addToken(tokens,Tokens.XPTRTOKEN_SHORTHAND);
tokens.addToken(name);
isQName=false;
}
closeParen=0;
break;
}
 else if (openParen > 0 && closeParen == 0 && name != null) {
dataOffset=currentOffset;
currentOffset=scanData(data,schemeDataBuff,endOffset,currentOffset);
if (currentOffset == dataOffset) {
reportError("InvalidSchemeDataInXPointer",new Object[]{data});
return false;
}
if (currentOffset < endOffset) {
ch=data.charAt(currentOffset);
}
 else {
ch=-1;
}
schemeData=symbolTable.addSymbol(schemeDataBuff.toString());
addToken(tokens,Tokens.XPTRTOKEN_SCHEMEDATA);
tokens.addToken(schemeData);
openParen=0;
schemeDataBuff.delete(0,schemeDataBuff.length());
}
 else {
return false;
}
}
}
return true;
}

public void addLine(int startLine,String sourceFile,int repeatCount,int outputLine,int outputIncrement){
  _lines.add(new Line(startLine,sourceFile,repeatCount,outputLine,outputIncrement));
}

public String(StringBuffer stringbuffer){
  offset=0;
synchronized (stringbuffer) {
    value=stringbuffer.shareValue();
    count=stringbuffer.length();
  }
}

public int size(){
  return all.size();
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

public Process executeAsync(final CommandLine command,final Map<String,String> environment,final ExecuteResultHandler handler) throws IOException {
  if (workingDirectory != null && !workingDirectory.exists()) {
    throw new IOException(workingDirectory + " doesn't exist.");
  }
  return executeInternal(command,environment,workingDirectory,streamHandler,handler);
}

public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){
  ParamChecks.nullNotPermitted(dataset,"dataset");
  ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys");
  double minimum=Double.POSITIVE_INFINITY;
  double maximum=Double.NEGATIVE_INFINITY;
  if (includeInterval && dataset instanceof IntervalXYDataset) {
    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;
    Iterator iterator=visibleSeriesKeys.iterator();
    while (iterator.hasNext()) {
      Comparable seriesKey=(Comparable)iterator.next();
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double xvalue=ixyd.getXValue(series,item);
        double lvalue=ixyd.getStartXValue(series,item);
        double uvalue=ixyd.getEndXValue(series,item);
        if (!Double.isNaN(xvalue)) {
          minimum=Math.min(minimum,xvalue);
          maximum=Math.max(maximum,xvalue);
        }
        if (!Double.isNaN(lvalue)) {
          minimum=Math.min(minimum,lvalue);
        }
        if (!Double.isNaN(uvalue)) {
          maximum=Math.max(maximum,uvalue);
        }
      }
    }
  }
 else {
    Iterator iterator=visibleSeriesKeys.iterator();
    while (iterator.hasNext()) {
      Comparable seriesKey=(Comparable)iterator.next();
      int series=dataset.indexOf(seriesKey);
      int itemCount=dataset.getItemCount(series);
      for (int item=0; item < itemCount; item++) {
        double x=dataset.getXValue(series,item);
        if (!Double.isNaN(x)) {
          minimum=Math.min(minimum,x);
          maximum=Math.max(maximum,x);
        }
      }
    }
  }
  if (minimum == Double.POSITIVE_INFINITY) {
    return null;
  }
 else {
    return new Range(minimum,maximum);
  }
}

public LibertyManagerClient(){
}

private void checkComplianceAttributes(AttrSet attrSet,boolean ignoreCompliance) throws AMException {
  if (!ignoreCompliance && ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {
    complianceImpl.verifyAttributes(attrSet);
  }
}

private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){
  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);
  for (  ZoneInfo zoneInfo : zoningMap.values()) {
    log.info("Found zone: {} for initiator {} and port {}",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});
  }
  mask.setZoningMap(zoningMap);
}

public InvitationStatus waitInvitationAnswer(){
  return waitInvitationAnswer(mRingingPeriod);
}

private boolean moveWithinSelectedRange(JTable table,int dx,int dy,ListSelectionModel rsm,ListSelectionModel csm){
  int totalCount;
  int minX, maxX, minY, maxY;
  boolean rs=table.getRowSelectionAllowed();
  boolean cs=table.getColumnSelectionAllowed();
  if (rs && cs) {
    totalCount=table.getSelectedRowCount() * table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (rs) {
    totalCount=table.getSelectedRowCount();
    minX=0;
    maxX=table.getColumnCount() - 1;
    minY=rsm.getMinSelectionIndex();
    maxY=rsm.getMaxSelectionIndex();
  }
 else   if (cs) {
    totalCount=table.getSelectedColumnCount();
    minX=csm.getMinSelectionIndex();
    maxX=csm.getMaxSelectionIndex();
    minY=0;
    maxY=table.getRowCount() - 1;
  }
 else {
    totalCount=0;
    minX=maxX=minY=maxY=0;
  }
  boolean stayInSelection;
  if (totalCount == 0 || (totalCount == 1 && table.isCellSelected(leadRow,leadColumn))) {
    stayInSelection=false;
    maxX=table.getColumnCount() - 1;
    maxY=table.getRowCount() - 1;
    minX=Math.min(0,maxX);
    minY=Math.min(0,maxY);
  }
 else {
    stayInSelection=true;
  }
  if (dy == 1 && leadColumn == -1) {
    leadColumn=minX;
    leadRow=-1;
  }
 else   if (dx == 1 && leadRow == -1) {
    leadRow=minY;
    leadColumn=-1;
  }
 else   if (dy == -1 && leadColumn == -1) {
    leadColumn=maxX;
    leadRow=maxY + 1;
  }
 else   if (dx == -1 && leadRow == -1) {
    leadRow=maxY;
    leadColumn=maxX + 1;
  }
  leadRow=Math.min(Math.max(leadRow,minY - 1),maxY + 1);
  leadColumn=Math.min(Math.max(leadColumn,minX - 1),maxX + 1);
  do {
    calcNextPos(dx,minX,maxX,dy,minY,maxY);
  }
 while (stayInSelection && !table.isCellSelected(leadRow,leadColumn));
  return stayInSelection;
}

private double[][] xPrime(int t){
  double[][] x=new double[1][getNumLags() * numVars];
  for (int i=0; i < getNumLags(); i++) {
    double[][] yPrime=yPrime(t - i - 1);
    System.arraycopy(yPrime[0],0,x[0],i * numVars,numVars);
  }
  return x;
}

private void readBinary(final LittleEndianDataInputStream dis) throws IOException {
  RajLog.i("StlPaser: Reading Binary");
  dis.skip(80);
  int facetCount=dis.readInt();
  float[] verticesArr=new float[facetCount * 9];
  float[] normalsArr=new float[facetCount * 9];
  int[] indicesArr=new int[facetCount * 3];
  float[] tempNorms=new float[3];
  int vertPos=0, normPos=0;
  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;
  while (dis.available() > 0) {
    for (int j=0; j < 3; j++) {
      tempNorms[j]=dis.readFloat();
      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {
        RajLog.w("STL contains bad normals of NaN or Infinite!");
        tempNorms[0]=0;
        tempNorms[1]=0;
        tempNorms[2]=0;
        break;
      }
    }
    for (int j=0; j < 3; j++) {
      normalsArr[normPos++]=tempNorms[0];
      normalsArr[normPos++]=tempNorms[1];
      normalsArr[normPos++]=tempNorms[2];
    }
    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();
    dis.skip(2);
  }
  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);
}

public int size(){
  return components.size();
}

public void testRoundMathContextPrecision0(){
  String a="3736186567876876578956958765675671119238118911893939591735";
  int aScale=45;
  int precision=0;
  RoundingMode rm=RoundingMode.HALF_UP;
  MathContext mc=new MathContext(precision,rm);
  String res="3736186567876.876578956958765675671119238118911893939591735";
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal result=aNumber.round(mc);
  assertEquals("incorrect quotient value",res,result.toString());
  assertEquals("incorrect quotient scale",aScale,result.scale());
}

public void omitLessFreq(){
  if (name == null)   return;
  int threshold=n_words[0] / LESS_FREQ_RATIO;
  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;
  Set<String> keys=freq.keySet();
  int roman=0;
  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {
    String key=i.next();
    int count=freq.get(key);
    if (count <= threshold) {
      n_words[key.length() - 1]-=count;
      i.remove();
    }
 else {
      if (key.matches("^[A-Za-z]$")) {
        roman+=count;
      }
    }
  }
  if (roman < n_words[0] / 3) {
    Set<String> keys2=freq.keySet();
    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {
      String key=i.next();
      if (key.matches(".*[A-Za-z].*")) {
        n_words[key.length() - 1]-=freq.get(key);
        i.remove();
      }
    }
  }
}

@Override public synchronized String toString(){
  if (elementCount == 0) {
    return "[]";
  }
  int length=elementCount - 1;
  StringBuffer buffer=new StringBuffer(elementCount * 16);
  buffer.append('[');
  for (int i=0; i < length; i++) {
    if (elementData[i] == this) {
      buffer.append("(this Collection)");
    }
 else {
      buffer.append(elementData[i]);
    }
    buffer.append(", ");
  }
  if (elementData[length] == this) {
    buffer.append("(this Collection)");
  }
 else {
    buffer.append(elementData[length]);
  }
  buffer.append(']');
  return buffer.toString();
}

public static PublicKeySelector fromString(String type){
  if (type != null) {
    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {
      if (type.equalsIgnoreCase(keySelector.type)) {
        return keySelector;
      }
    }
  }
  return null;
}

public static SortedMap<Integer,Integer> generateSortedTagMap(String[] partitions,Map<String,String> tags){
  final SortedMap<Integer,Integer> tagHashMap=new TreeMap<Integer,Integer>();
  for (  Map.Entry<String,String> entry : tags.entrySet()) {
    final String tagName=entry.getKey();
    final String tagValue=entry.getValue();
    if (tagValue == null || isPartitionTag(partitions,tagName))     continue;
    tagHashMap.put(tagName.hashCode(),tagValue.hashCode());
  }
  return tagHashMap;
}

public static void describeShapeDetail(Shape shape,double flattening){
  PathIterator pi2=shape.getPathIterator(null);
  FlatteningPathIterator pi=new FlatteningPathIterator(pi2,flattening);
  double[] coords=new double[6];
  int pointCount=0;
  Debug.output(" -- start describeShapeDetail with flattening[" + flattening + "]");
  while (!pi.isDone()) {
    int type=pi.currentSegment(coords);
    Debug.output(" Shape point [" + type + "] ("+ (pointCount++)+ ") "+ coords[0]+ ", "+ coords[1]);
    pi.next();
  }
  Debug.output(" -- end (" + pointCount + ")");
}

protected static String shortenClassname(String nam,char c){
  final int lastdot=nam.lastIndexOf(c);
  if (lastdot >= 0) {
    nam=nam.substring(lastdot + 1);
  }
  return nam;
}

public void add(T graphic){
synchronized (mLock) {
    mGraphics.add(graphic);
  }
  postInvalidate();
}

public String toString(){
  StringBuffer sbuf=new StringBuffer();
  TypeParameter.toString(sbuf,typeParams);
  sbuf.append(" (");
  Type.toString(sbuf,params);
  sbuf.append(") ");
  sbuf.append(retType);
  if (exceptions.length > 0) {
    sbuf.append(" throws ");
    Type.toString(sbuf,exceptions);
  }
  return sbuf.toString();
}

@Override public void flip(X11ComponentPeer peer,Component target,VolatileImage xBackBuffer,int x1,int y1,int x2,int y2,BufferCapabilities.FlipContents flipAction){
  if (flipAction == BufferCapabilities.FlipContents.COPIED) {
    SurfaceManager vsm=SurfaceManager.getManager(xBackBuffer);
    SurfaceData sd=vsm.getPrimarySurfaceData();
    if (sd instanceof GLXVSyncOffScreenSurfaceData) {
      GLXVSyncOffScreenSurfaceData vsd=(GLXVSyncOffScreenSurfaceData)sd;
      SurfaceData bbsd=vsd.getFlipSurface();
      Graphics2D bbg=new SunGraphics2D(bbsd,Color.black,Color.white,null);
      try {
        bbg.drawImage(xBackBuffer,0,0,null);
      }
  finally {
        bbg.dispose();
      }
    }
 else {
      Graphics g=peer.getGraphics();
      try {
        g.drawImage(xBackBuffer,x1,y1,x2,y2,x1,y1,x2,y2,null);
      }
  finally {
        g.dispose();
      }
      return;
    }
  }
 else   if (flipAction == BufferCapabilities.FlipContents.PRIOR) {
    return;
  }
  OGLSurfaceData.swapBuffers(peer.getContentWindow());
  if (flipAction == BufferCapabilities.FlipContents.BACKGROUND) {
    Graphics g=xBackBuffer.getGraphics();
    try {
      g.setColor(target.getBackground());
      g.fillRect(0,0,xBackBuffer.getWidth(),xBackBuffer.getHeight());
    }
  finally {
      g.dispose();
    }
  }
}

public boolean addProperty(OwlProperty property){
  property.addRestriction(this);
  return properties.add(property);
}

public static GoogleAnalytics initialiseGoogleAnalytics(Context context,String trackerId,final ExceptionParser callback){
  mAnalytics=GoogleAnalytics.getInstance(context);
  mAnalytics.setLocalDispatchPeriod(1800);
  mTracker=mAnalytics.newTracker(trackerId);
  mTracker.enableExceptionReporting(true);
  mTracker.enableAutoActivityTracking(true);
  Thread.UncaughtExceptionHandler handler=Thread.getDefaultUncaughtExceptionHandler();
  if (handler != null && handler instanceof ExceptionReporter) {
    ExceptionReporter exceptionReporter=(ExceptionReporter)handler;
    exceptionReporter.setExceptionParser(callback);
    Thread.setDefaultUncaughtExceptionHandler(exceptionReporter);
    Log.d(LOG_TAG,"Analytics active.");
  }
 else {
    Log.e(LOG_TAG,"Cannot set custom exception parser.");
  }
  return mAnalytics;
}

void onMoved(){
  double diff=System.currentTimeMillis() - timeStamp;
  timeStamp=0;
  if (diff > DISCARD_THRESHOLD) {
    return;
  }
  double recentJitter=0;
  double sum=0.0;
  for (int i=0; i < VECTOR_LENGTH; i++) {
    double old=times[i];
    double avg=(diff + old) / 2;
    recentJitter+=Math.abs(old - diff);
    times[i]=avg;
    diff=old;
    sum+=avg;
  }
  recentJitter/=8;
  jitter=(jitter + 2.0 * Math.max(jitter,recentJitter) + recentJitter) / 4.0;
  prediction=TURN_LENGTH / (sum / VECTOR_LENGTH + jitter);
  WtWindowManager wm=WtWindowManager.getInstance();
  wm.setProperty(SPEED_PROPERTY,Double.toString(prediction));
  wm.setProperty(JITTER_PROPERTY,Double.toString(jitter));
}

public ServiceID(DataInput in) throws IOException {
  this.mostSig=in.readLong();
  this.leastSig=in.readLong();
}

public void onEnterElementConsumed(String uri,String localName,String qname,Attributes atts) throws SAXException {
  attStack.push(currentAtts=new AttributesImpl(atts));
  nsEffectiveStack.push(new Integer(nsEffectivePtr));
  nsEffectivePtr=namespaces.size();
}

private void addFinally(ArrayList returnList,Stmnt finallyBlock) throws CompileError {
  Bytecode bc=bytecode;
  int n=returnList.size();
  for (int i=0; i < n; ++i) {
    final int[] ret=(int[])returnList.get(i);
    int pc=ret[0];
    bc.write16bit(pc,bc.currentPc() - pc + 1);
    ReturnHook hook=new JsrHook2(this,ret);
    finallyBlock.accept(this);
    hook.remove(this);
    if (!hasReturned) {
      bc.addOpcode(Opcode.GOTO);
      bc.addIndex(pc + 3 - bc.currentPc());
    }
  }
}

public Object nextMeta() throws JSONException {
  char c;
  char q;
  do {
    c=next();
  }
 while (Character.isWhitespace(c));
switch (c) {
case 0:
    throw syntaxError("Misshaped meta tag");
case '<':
  return XML.LT;
case '>':
return XML.GT;
case '/':
return XML.SLASH;
case '=':
return XML.EQ;
case '!':
return XML.BANG;
case '?':
return XML.QUEST;
case '"':
case '\'':
q=c;
for (; ; ) {
c=next();
if (c == 0) {
throw syntaxError("Unterminated string");
}
if (c == q) {
return Boolean.TRUE;
}
}
default :
for (; ; ) {
c=next();
if (Character.isWhitespace(c)) {
return Boolean.TRUE;
}
switch (c) {
case 0:
case '<':
case '>':
case '/':
case '=':
case '!':
case '?':
case '"':
case '\'':
back();
return Boolean.TRUE;
}
}
}
}

private boolean checkTouchSlop(View child,float dx,float dy){
  if (child == null) {
    return false;
  }
  final boolean checkHorizontal=mCallback.getViewHorizontalDragRange(child) > 0;
  final boolean checkVertical=mCallback.getViewVerticalDragRange(child) > 0;
  if (checkHorizontal && checkVertical) {
    return dx * dx + dy * dy > mTouchSlop * mTouchSlop;
  }
 else   if (checkHorizontal) {
    return Math.abs(dx) > mTouchSlop;
  }
 else   if (checkVertical) {
    return Math.abs(dy) > mTouchSlop;
  }
  return false;
}

public static void writeJSONString(Collection collection,Writer out) throws IOException {
  if (collection == null) {
    out.write("null");
    return;
  }
  boolean first=true;
  Iterator iter=collection.iterator();
  out.write('[');
  while (iter.hasNext()) {
    if (first)     first=false;
 else     out.write(',');
    Object value=iter.next();
    if (value == null) {
      out.write("null");
      continue;
    }
    JSONValue.writeJSONString(value,out);
  }
  out.write(']');
}

protected int[] readColorTable(final int ncolors){
  final int nbytes=3 * ncolors;
  int[] tab=null;
  final byte[] c=new byte[nbytes];
  try {
    rawData.get(c);
    tab=new int[256];
    int i=0;
    int j=0;
    while (i < ncolors) {
      final int r=(c[j++]) & 0xff;
      final int g=(c[j++]) & 0xff;
      final int b=(c[j++]) & 0xff;
      tab[i++]=0xff000000 | (r << 16) | (g << 8)| b;
    }
  }
 catch (  final BufferUnderflowException e) {
    Log.w(TAG,"Format Error Reading Color Table",e);
    status=STATUS_FORMAT_ERROR;
  }
  return tab;
}

void touch(boolean openReadOnly) throws IOException {
  if (isReadOnly || openReadOnly) {
    throw new IOException("Read only");
  }
  lastModified=System.currentTimeMillis();
}

void pushImportURL(String hrefUrl){
  m_importStack.push(hrefUrl);
}

@SneakyThrows public void addKeyToKeystore(KeyStore keyStore,X509Certificate cert,RSAPrivateKey privateKey,String alias,String password){
  KeyStore.PasswordProtection pass=new KeyStore.PasswordProtection(password.toCharArray());
  Certificate[] certificateChain={cert};
  keyStore.setEntry(alias,new KeyStore.PrivateKeyEntry(privateKey,certificateChain),pass);
}

public boolean needsReload(File file){
  return fFilesToReoad.contains(file);
}

protected int drawLegend(Canvas canvas,DefaultRenderer renderer,String[] titles,int left,int right,int y,int width,int height,int legendSize,Paint paint,boolean calculate){
  float size=32;
  if (renderer.isShowLegend()) {
    float currentX=left;
    float currentY=y + height - legendSize + size;
    paint.setTextAlign(Component.LEFT);
    paint.setTextSize(renderer.getLegendTextSize());
    int sLength=Math.min(titles.length,renderer.getSeriesRendererCount());
    for (int i=0; i < sLength; i++) {
      SimpleSeriesRenderer r=renderer.getSeriesRendererAt(i);
      final float lineSize=getLegendShapeWidth(i);
      if (r.isShowLegendItem()) {
        String text=titles[i];
        if (titles.length == renderer.getSeriesRendererCount()) {
          paint.setColor(r.getColor());
        }
 else {
          paint.setColor(ColorUtil.LTGRAY);
        }
        float[] widths=new float[text.length()];
        paint.getTextWidths(text,widths);
        float sum=0;
        for (        float value : widths) {
          sum+=value;
        }
        float extraSize=lineSize + 10 + sum;
        float currentWidth=currentX + extraSize;
        if (i > 0 && getExceed(currentWidth,renderer,right,width)) {
          currentX=left;
          currentY+=renderer.getLegendTextSize();
          size+=renderer.getLegendTextSize();
          currentWidth=currentX + extraSize;
        }
        if (getExceed(currentWidth,renderer,right,width)) {
          float maxWidth=right - currentX - lineSize- 10;
          if (isVertical(renderer)) {
            maxWidth=width - currentX - lineSize- 10;
          }
          int nr=paint.breakText(text,true,maxWidth,widths);
          text=text.substring(0,nr) + "...";
        }
        if (!calculate) {
          drawLegendShape(canvas,r,currentX,currentY,i,paint);
          drawString(canvas,text,currentX + lineSize + 5,currentY + 5,paint);
        }
        currentX+=extraSize;
      }
    }
  }
  return Math.round(size + renderer.getLegendTextSize());
}

public PutRepositoryRequest source(byte[] repositoryDefinition){
  return source(repositoryDefinition,0,repositoryDefinition.length);
}

private void disableButtons(){
  setFireEnabled(false);
  setSkipEnabled(false);
  setTwistEnabled(false);
  setNextEnabled(false);
  butDone.setEnabled(false);
  setFlipArmsEnabled(false);
  setFireModeEnabled(false);
  setNextTargetEnabled(false);
}

public boolean isAdditiveNumber(String num){
  int n=num.length();
  for (int i=1; i <= n / 2; i++) {
    if (num.charAt(0) == '0' && i > 1) {
      return false;
    }
    BigInteger num1=new BigInteger(num.substring(0,i));
    for (int j=1; Math.max(i,j) <= n - i - j; j++) {
      if (num.charAt(i) == '0' && j > 1) {
        break;
      }
      BigInteger num2=new BigInteger(num.substring(i,i + j));
      if (isAdditiveNumber(num1,num2,i + j,num)) {
        return true;
      }
    }
  }
  return false;
}

@Override public void write(String str){
  int start=0;
  while (start < str.length()) {
    int end=Math.min(start + MAX_MESSAGE_LENGTH,str.length());
    Log.i(TAG,str.substring(start,end));
    start=end;
  }
}

protected void addToQuarantineQueue(NodePortTuple npt){
  if (quarantineQueue.contains(npt) == false) {
    quarantineQueue.add(npt);
  }
}

private CarbonDictionarySortInfo createColumnSortInfo(CarbonDictionarySortModel[] dictionarySortModels){
  int[] sortIndex;
  int[] sortIndexInverted;
  Arrays.sort(dictionarySortModels);
  sortIndex=new int[dictionarySortModels.length];
  sortIndexInverted=new int[dictionarySortModels.length];
  for (int i=0; i < dictionarySortModels.length; i++) {
    CarbonDictionarySortModel dictionarySortModel=dictionarySortModels[i];
    sortIndex[i]=dictionarySortModel.getKey();
    sortIndexInverted[dictionarySortModel.getKey() - 1]=i + 1;
  }
  dictionarySortModels=null;
  List<Integer> sortIndexList=convertToList(sortIndex);
  List<Integer> sortIndexInvertedList=convertToList(sortIndexInverted);
  return new CarbonDictionarySortInfo(sortIndexList,sortIndexInvertedList);
}

private void addFeature(JsonNode feature,int index){
  PointFeature feat=null;
  try {
    feat=PointFeature.fromJsonNode(feature);
  }
 catch (  EmptyPolygonException e) {
    LOG.warn("Empty MultiPolygon, skipping.");
    return;
  }
catch (  UnsupportedGeometryException e) {
    LOG.warn(e.message);
    return;
  }
  if (feat == null) {
    return;
  }
  addFeature(feat,index);
}

public BitString(final String value){
  this(value.length());
  for (int i=0; i < value.length(); i++) {
    if (value.charAt(i) == '1') {
      setBit(value.length() - (i + 1),true);
    }
 else     if (value.charAt(i) != '0') {
      throw new IllegalArgumentException("Illegal character at position " + i);
    }
  }
}

public void sort(Comparator<Individual> comparator){
  Collections.sort(individuals,comparator);
}

public void write(Writer writer) throws Exception {
  writer.write(toString());
  writer.flush();
}

public SafeAsyncTask(){
  this.executor=DEFAULT_EXECUTOR;
}

public static boolean isCglibRenamedMethod(Method renamedMethod){
  String name=renamedMethod.getName();
  if (name.startsWith(CGLIB_RENAMED_METHOD_PREFIX)) {
    int i=name.length() - 1;
    while (i >= 0 && Character.isDigit(name.charAt(i))) {
      i--;
    }
    return ((i > CGLIB_RENAMED_METHOD_PREFIX.length()) && (i < name.length() - 1) && (name.charAt(i) == '$'));
  }
  return false;
}

public PWResetException(String bundleName,String errCode,Object[] args){
  super(bundleName,errCode,args);
  errList=new ArrayList(1);
  errList.add(getMessage());
}

public static String[] unionArrays(String[] array1,String[] array2){
  if (array1 == null) {
    return array2;
  }
  if (array2 == null) {
    return array1;
  }
  Set<String> set=new LinkedHashSet<>();
  set.addAll(Arrays.asList(array1));
  set.addAll(Arrays.asList(array2));
  return set.toArray(new String[set.size()]);
}

boolean isStateChange(XDecoratedPeer window,XPropertyEvent e){
  if (!window.isShowing()) {
    stateLog.finer("Window is not showing");
    return false;
  }
  int wm_state=window.getWMState();
  if (wm_state == XUtilConstants.WithdrawnState) {
    stateLog.finer("WithdrawnState");
    return false;
  }
 else {
    if (stateLog.isLoggable(PlatformLogger.Level.FINER)) {
      stateLog.finer("Window WM_STATE is " + wm_state);
    }
  }
  boolean is_state_change=false;
  if (e.get_atom() == XA_WM_STATE.getAtom()) {
    is_state_change=true;
  }
  for (  XStateProtocol proto : getProtocols(XStateProtocol.class)) {
    is_state_change|=proto.isStateChange(e);
    if (stateLog.isLoggable(PlatformLogger.Level.FINEST)) {
      stateLog.finest(proto + ": is state changed = " + is_state_change);
    }
  }
  return is_state_change;
}

@Override public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {
  Node xpathOwnerNode=(Node)xctxt.getOwnerObject();
  if (xpathOwnerNode == null) {
    return null;
  }
  int xpathOwnerNodeDTM=xctxt.getDTMHandleFromNode(xpathOwnerNode);
  int currentNode=xctxt.getCurrentNode();
  DTM dtm=xctxt.getDTM(currentNode);
  int docContext=dtm.getDocument();
  if (DTM.NULL == docContext) {
    error(xctxt,XPATHErrorResources.ER_CONTEXT_HAS_NO_OWNERDOC,null);
  }
{
    Document currentDoc=XMLUtils.getOwnerDocument(dtm.getNode(currentNode));
    Document xpathOwnerDoc=XMLUtils.getOwnerDocument(xpathOwnerNode);
    if (currentDoc != xpathOwnerDoc) {
      throw new TransformerException(I18n.translate("xpath.funcHere.documentsDiffer"));
    }
  }
  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());
  NodeSetDTM nodeSet=nodes.mutableNodeset();
{
    int hereNode=DTM.NULL;
switch (dtm.getNodeType(xpathOwnerNodeDTM)) {
case Node.ATTRIBUTE_NODE:
case Node.PROCESSING_INSTRUCTION_NODE:
{
        hereNode=xpathOwnerNodeDTM;
        nodeSet.addNode(hereNode);
        break;
      }
case Node.TEXT_NODE:
{
      hereNode=dtm.getParent(xpathOwnerNodeDTM);
      nodeSet.addNode(hereNode);
      break;
    }
default :
  break;
}
}
nodeSet.detach();
return nodes;
}

public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}

public static String grabClass(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature);
  return matcher.group(1);
}

public TimeSeriesMetricDeltaSet(Stream<Entry<Tags,MetricValue>> td){
  values_=Any2.right(td.collect(Collectors.toMap(null,null,null,null)));
}

public int size(){
  return nodes.size();
}

@Override public final E nextElement(){
  E result=m_Vector.get(m_Counter);
  m_Counter++;
  if (m_Counter == m_SpecialElement) {
    m_Counter++;
  }
  return result;
}

private ByteString escapeBytes(final ByteString value){
  if (!needEscaping(value)) {
    return value;
  }
  final ByteStringBuilder builder=new ByteStringBuilder();
  for (int i=0; i < value.length(); i++) {
    final byte b=value.byteAt(i);
    if (isByteToEscape(b)) {
      builder.appendByte(DN.NORMALIZED_ESC_BYTE);
    }
    builder.appendByte(b);
  }
  return builder.toByteString();
}

public InputBuilder<T> repeatAll(int times){
  List<T> toAppend=new ArrayList<>();
  for (int i=0; i < times; i++) {
    toAppend.addAll(input);
  }
  input.addAll(toAppend);
  return this;
}

public final void renameClass(Map classnames){
  String jvmNewThisName=(String)classnames.get(Descriptor.toJvmName(thisclassname));
  if (jvmNewThisName != null)   thisclassname=Descriptor.toJavaName(jvmNewThisName);
  constPool.renameClass(classnames);
  AttributeInfo.renameClass(attributes,classnames);
  ArrayList list=methods;
  int n=list.size();
  for (int i=0; i < n; ++i) {
    MethodInfo minfo=(MethodInfo)list.get(i);
    String desc=minfo.getDescriptor();
    minfo.setDescriptor(Descriptor.rename(desc,classnames));
    AttributeInfo.renameClass(minfo.getAttributes(),classnames);
  }
  list=fields;
  n=list.size();
  for (int i=0; i < n; ++i) {
    FieldInfo finfo=(FieldInfo)list.get(i);
    String desc=finfo.getDescriptor();
    finfo.setDescriptor(Descriptor.rename(desc,classnames));
    AttributeInfo.renameClass(finfo.getAttributes(),classnames);
  }
}

@SuppressWarnings("unused") public void handleButton3Request(RequestInvocationEvent event){
  backTrail();
  try {
    String name=(String)getPageSessionAttribute(SAVE_VB_NAME);
    ViewBean vb=getViewBean(Class.forName(name));
    passPgSessionMap(vb);
    vb.forwardTo(getRequestContext());
  }
 catch (  ClassNotFoundException e) {
    debug.warning("AbstractAuditViewBean.handleButton3Request:",e);
  }
}

public IonException(Throwable cause){
  super(cause.getMessage(),cause);
}

public final double distance(){
  return Math.sqrt(distance_square());
}

@Override public void done(){
  super.done();
  if (mNumTestsExpected > mNumTestsRun) {
    handleTestRunFailed(String.format("Test run incomplete. Expected %d tests, received %d",mNumTestsExpected,mNumTestsRun));
  }
 else   if (mTestRunInProgress) {
    handleTestRunFailed("No test results");
  }
}

public List<Challenge> challenges(){
  String responseField;
  if (code == HTTP_UNAUTHORIZED) {
    responseField="WWW-Authenticate";
  }
 else   if (code == HTTP_PROXY_AUTH) {
    responseField="Proxy-Authenticate";
  }
 else {
    return Collections.emptyList();
  }
  return OkHeaders.parseChallenges(headers(),responseField);
}

byte[] toBytes(SSLSession session){
  if (!(session instanceof OpenSSLSessionImpl)) {
    return null;
  }
  OpenSSLSessionImpl sslSession=(OpenSSLSessionImpl)session;
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream daos=new DataOutputStream(baos);
    daos.writeInt(OPEN_SSL);
    byte[] data=sslSession.getEncoded();
    daos.writeInt(data.length);
    daos.write(data);
    Certificate[] certs=session.getPeerCertificates();
    daos.writeInt(certs.length);
    for (    Certificate cert : certs) {
      data=cert.getEncoded();
      daos.writeInt(data.length);
      daos.write(data);
    }
    return baos.toByteArray();
  }
 catch (  IOException e) {
    log(e);
    return null;
  }
catch (  CertificateEncodingException e) {
    log(e);
    return null;
  }
}

public MersenneTwister(){
  mt=new int[N];
  setSeed(System.currentTimeMillis() + System.identityHashCode(this));
}

private void verifyTimestamp(X509Certificate cert) throws CertPathValidatorException {
  String msg="timestamp";
  if (debug != null)   debug.println("---checking " + msg + ":"+ date.toString()+ "...");
  try {
    cert.checkValidity(date);
  }
 catch (  CertificateExpiredException e) {
    throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.EXPIRED);
  }
catch (  CertificateNotYetValidException e) {
    throw new CertPathValidatorException(msg + " check failed",e,null,-1,BasicReason.NOT_YET_VALID);
  }
  if (debug != null)   debug.println(msg + " verified.");
}

public static byte[] encryptPassword(final String password,final byte[] seed) throws NoSuchAlgorithmException {
  if (password == null || password.equals("")) {
    return new byte[0];
  }
  final MessageDigest messageDigest=MessageDigest.getInstance("SHA-1");
  final byte[] stage1=messageDigest.digest(password.getBytes());
  messageDigest.reset();
  final byte[] stage2=messageDigest.digest(stage1);
  messageDigest.reset();
  messageDigest.update(seed);
  messageDigest.update(stage2);
  final byte[] digest=messageDigest.digest();
  final byte[] returnBytes=new byte[digest.length];
  for (int i=0; i < digest.length; i++) {
    returnBytes[i]=(byte)(stage1[i] ^ digest[i]);
  }
  return returnBytes;
}

public int rows(){
  return rows;
}

private static byte[] streamToBytes(InputStream in,int length) throws IOException {
  byte[] bytes=new byte[length];
  int count;
  int pos=0;
  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {
    pos+=count;
  }
  if (pos != length) {
    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");
  }
  return bytes;
}

public static String array2hex(final byte[] array){
  return byteArray2String(array,"0x",", ",true,16);
}

private byte[] writeCheckedBytes(MessageNano proto){
  BackupProtos.CheckedMessage wrapper=new BackupProtos.CheckedMessage();
  wrapper.payload=MessageNano.toByteArray(proto);
  CRC32 checksum=new CRC32();
  checksum.update(wrapper.payload);
  wrapper.checksum=checksum.getValue();
  return MessageNano.toByteArray(wrapper);
}

public double reduceTo(int width,int height,double limit){
  int w=getIconWidth();
  int h=getIconHeight();
  double scale=1.0;
  if (w > width) {
    scale=((double)width) / w;
  }
  if (h > height) {
    scale=Math.min(scale,((double)height) / h);
  }
  if (scale < 1) {
    if (limit > 0.0) {
      scale=Math.max(scale,limit);
    }
    AffineTransform t=AffineTransform.getScaleInstance(scale,scale);
    transformImage((int)Math.ceil(scale * w),(int)Math.ceil(scale * h),t,null);
  }
  return scale;
}

public void installBuiltinSound(String soundIdentifier,InputStream data) throws IOException {
  builtinSounds.put(soundIdentifier,convertBuiltinSound(data));
}

private Integer countFragmentFilteredPages(List<String> templateFragments,boolean whitelist) throws WikiApiException {
  try {
    int count=0;
    PreparedStatement statement=null;
    ResultSet result=null;
    try {
      StringBuffer sqlString=new StringBuffer();
      StringBuffer subconditions=new StringBuffer();
      sqlString.append("SELECT distinct(count(*)) FROM " + GeneratorConstants.TABLE_TPLID_TPLNAME + " as tpl, "+ GeneratorConstants.TABLE_TPLID_PAGEID+ " AS p WHERE tpl.templateId = p.templateId "+ (whitelist ? "AND" : "AND NOT")+ " (");
      for (      @SuppressWarnings("unused") String fragment : templateFragments) {
        if (subconditions.length() != 0) {
          subconditions.append("OR ");
        }
        subconditions.append("tpl.templateName LIKE ?");
      }
      sqlString.append(subconditions);
      sqlString.append(")");
      statement=connection.prepareStatement(sqlString.toString());
      int curIdx=1;
      for (      String fragment : templateFragments) {
        fragment=fragment.toLowerCase();
        fragment=fragment.trim();
        fragment=fragment.replaceAll(" ","_");
        statement.setString(curIdx++,fragment + "%");
      }
      result=execute(statement);
      if (result == null) {
        return 0;
      }
      if (result.next()) {
        count=result.getInt(1);
      }
    }
  finally {
      if (statement != null) {
        statement.close();
      }
      if (result != null) {
        result.close();
      }
    }
    return count;
  }
 catch (  Exception e) {
    throw new WikiApiException(e);
  }
}

public static int findName(String name,int[] table){
  for (int i=0; i < table.length; i++) {
    if (name.equals(getName(table[i]))) {
      return i;
    }
  }
  return -1;
}

private static Bitmap transform(Matrix scaler,Bitmap source,int targetWidth,int targetHeight,int options){
  Log.i(TAG,"transform --1--");
  boolean scaleUp=(options & 0x1) != 0;
  boolean recycle=(options & 0x2) != 0;
  int deltaX=source.getWidth() - targetWidth;
  int deltaY=source.getHeight() - targetHeight;
  if (!scaleUp && (deltaX < 0 || deltaY < 0)) {
    Log.i(TAG,"transform --2--");
    Bitmap b2=Bitmap.createBitmap(targetWidth,targetHeight,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(b2);
    int deltaXHalf=Math.max(0,deltaX / 2);
    int deltaYHalf=Math.max(0,deltaY / 2);
    Rect src=new Rect(deltaXHalf,deltaYHalf,deltaXHalf + Math.min(targetWidth,source.getWidth()),deltaYHalf + Math.min(targetHeight,source.getHeight()));
    int dstX=(targetWidth - src.width()) / 2;
    int dstY=(targetHeight - src.height()) / 2;
    Rect dst=new Rect(dstX,dstY,targetWidth - dstX,targetHeight - dstY);
    c.drawBitmap(source,src,dst,null);
    if (recycle) {
      source.recycle();
    }
    c.setBitmap(null);
    Log.i(TAG,"transform --3--");
    return b2;
  }
  float bitmapWidthF=source.getWidth();
  float bitmapHeightF=source.getHeight();
  Log.i(TAG,"bitmapWidthF:" + bitmapWidthF + ",bitmapHeightF:"+ bitmapHeightF);
  float bitmapAspect=bitmapWidthF / bitmapHeightF;
  float viewAspect=(float)targetWidth / targetHeight;
  Log.i(TAG,"targetWidth:" + targetWidth + ",targetHeight:"+ targetHeight);
  if (bitmapAspect > viewAspect) {
    float scale=targetHeight / bitmapHeightF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
 else {
    float scale=targetWidth / bitmapWidthF;
    if (scale < .9F || scale > 1F) {
      scaler.setScale(scale,scale);
    }
 else {
      scaler=null;
    }
  }
  Bitmap b1;
  if (scaler != null) {
    Log.i(TAG,"transform --3.1--");
    b1=Bitmap.createBitmap(source,0,0,source.getWidth(),source.getHeight(),scaler,true);
  }
 else {
    Log.i(TAG,"transform --3.2--");
    b1=source;
  }
  if (recycle && b1 != source) {
    Log.i(TAG,"transform --4--");
    source.recycle();
  }
  int dx1=Math.max(0,b1.getWidth() - targetWidth);
  int dy1=Math.max(0,b1.getHeight() - targetHeight);
  Bitmap b2=Bitmap.createBitmap(b1,dx1 / 2,dy1 / 2,targetWidth,targetHeight);
  if (b2 != b1) {
    if (recycle || b1 != source) {
      Log.i(TAG,"transform --5--");
      b1.recycle();
    }
  }
  Log.i(TAG,"transform --6--");
  if (b2 == null) {
    Log.i(TAG,"transform --7--");
  }
  return b2;
}

private void scoreTrackResults(Collection<Track> tracks,SearchQuery query,Collection<ScoredResult> output){
  for (  Track track : tracks) {
    double score=scoreTrackResult(query,track);
    output.add(new ScoredResult(track,score));
  }
}

private Long currentTime(){
  return System.currentTimeMillis() / 1000;
}

public static void v(String tag,String msg,Object... args){
  if (sLevel > LEVEL_VERBOSE) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.v(tag,msg);
}

private static byte[] encode(double latitude,double longitude){
  byte[] bytes=new byte[2 * Integer.BYTES];
  NumericUtils.intToSortableBytes(encodeLatitude(latitude),bytes,0);
  NumericUtils.intToSortableBytes(encodeLongitude(longitude),bytes,Integer.BYTES);
  return bytes;
}

public static void putLongVolatile(Object obj,long off,long val){
  UNSAFE.putLongVolatile(obj,off,val);
}

public static List<String> run(List<String> commands){
  return Shell.run("su",commands.toArray(new String[commands.size()]),null,false);
}

public void circle(double x,double y,double r){
  if (r < 0)   throw new IllegalArgumentException("circle radius can't be negative");
  double xs=scaleX(x);
  double ys=scaleY(y);
  double ws=factorX(2 * r);
  double hs=factorY(2 * r);
  if (ws <= 1 && hs <= 1)   pixel(x,y);
 else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));
  draw();
}

final public void println(double v){
  Writer out=this.out;
  if (out == null)   return;
  print(v);
  try {
    out.write(_newline,0,_newline.length);
  }
 catch (  IOException e) {
    log.log(Level.FINE,e.toString(),e);
  }
}

public void writeSI32(int value) throws IOException {
  flushBits();
  out.write(value & 0xff);
  out.write(value >> 8);
  out.write(value >> 16);
  out.write(value >> 24);
  bytesWritten+=4;
}

private static void map(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  final String value=sequence.toString();
  for (int i=0; i < value.length(); i++) {
    final char c=value.charAt(i);
    if (MAP_2_NULL.contains(c)) {
      continue;
    }
    if (MAP_2_SPACE.contains(c)) {
      if (canMapToSpace(buffer,trim)) {
        buffer.append(SPACE_CHAR);
      }
      continue;
    }
    if (foldCase) {
      final String mapping=CASE_MAP_TABLE.get(c);
      if (mapping != null) {
        buffer.append(mapping);
        continue;
      }
    }
    buffer.append(c);
  }
}

public void addButtonPressedListener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}

public void dispose(){
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
    mServiceConn=null;
    mService=null;
    mPurchaseListener=null;
  }
}

private void fillXMLAttribute(Attributes att,int index){
  fillQName(fAttributeQName,att.getURI(index),att.getLocalName(index),att.getQName(index));
  String type=att.getType(index);
  fAttributes.addAttributeNS(fAttributeQName,(type != null) ? type : XMLSymbols.fCDATASymbol,att.getValue(index));
}

public JComponent createPropertyGUI(PropertyConsumer pc){
  this.propertyConsumer=pc;
  Properties props=new Properties();
  props=pc.getProperties(props);
  Properties info=new Properties();
  info=pc.getPropertyInfo(info);
  String prefix=pc.getPropertyPrefix();
  return createPropertyGUI(prefix,props,info);
}

public long copy(String filename,OutputStream out,long offset,long size) throws IOException, InterruptedException {
  if (size < 0) {
    return 0;
  }
  BufferedInputStream is=new BufferedInputStream(getFileInputStream(filename));
  byte[] buf=new byte[64 * 1024];
  int bytesRead;
  long pos=0;
  long remaining=size;
  try {
    if (offset != 0) {
      is.skip(offset);
      pos+=offset;
    }
    while (remaining != 0) {
      int max=buf.length;
      if (max > remaining) {
        max=(int)remaining;
      }
      bytesRead=is.read(buf,0,max);
      if (bytesRead == -1) {
        break;
      }
      out.write(buf,0,bytesRead);
      pos+=bytesRead;
      remaining-=bytesRead;
    }
    out.flush();
  }
 catch (  Exception e) {
    out.flush();
  }
 finally {
    try {
      is.close();
    }
 catch (    Exception e) {
    }
  }
  return pos;
}

private static void deserializeHeader(KdbHeader kdbHeader,DataInput dataInput) throws IOException {
  kdbHeader.setFlags(dataInput.readInt());
  kdbHeader.setVersion(dataInput.readInt());
  byte[] buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setMasterSeed(buffer);
  buffer=new byte[16];
  dataInput.readFully(buffer);
  kdbHeader.setEncryptionIv(buffer);
  kdbHeader.setGroupCount(dataInput.readInt());
  kdbHeader.setEntryCount(dataInput.readInt());
  byte[] buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setContentHash(buffer32);
  buffer32=new byte[32];
  dataInput.readFully(buffer32);
  kdbHeader.setTransformSeed(buffer32);
  kdbHeader.setTransformRounds(dataInput.readInt());
}

public List<JCAnnotation> transformAnnotations(OutputElement target,Tree.Declaration annotated){
  EnumSet<OutputElement> outputs;
  if (annotated instanceof Tree.AnyClass) {
    outputs=AnnotationUtil.outputs((Tree.AnyClass)annotated);
  }
 else   if (annotated instanceof Tree.AnyInterface) {
    outputs=AnnotationUtil.outputs((Tree.AnyInterface)annotated);
  }
 else   if (annotated instanceof Tree.TypeAliasDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.TypeAliasDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.Constructor) {
    outputs=AnnotationUtil.outputs((Tree.Constructor)annotated);
  }
 else   if (annotated instanceof Tree.Enumerated) {
    outputs=AnnotationUtil.outputs((Tree.Enumerated)annotated);
  }
 else   if (annotated instanceof Tree.AnyMethod) {
    outputs=AnnotationUtil.outputs((Tree.AnyMethod)annotated);
  }
 else   if (annotated instanceof Tree.AttributeDeclaration) {
    outputs=AnnotationUtil.outputs((Tree.AttributeDeclaration)annotated);
  }
 else   if (annotated instanceof Tree.AttributeGetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeGetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.AttributeSetterDefinition) {
    outputs=AnnotationUtil.outputs((Tree.AttributeSetterDefinition)annotated);
  }
 else   if (annotated instanceof Tree.ObjectDefinition) {
    outputs=AnnotationUtil.outputs((Tree.ObjectDefinition)annotated);
  }
 else {
    throw BugException.unhandledNodeCase(annotated);
  }
  return transform(annotated.getDeclarationModel(),target,annotated.getAnnotationList(),outputs);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("strong");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.insertData(15,", Esquire");
  childData=child.getData();
  assertEquals("characterdataInsertDataEndAssert","Margaret Martin, Esquire",childData);
}

public boolean areAllPermissionsGranted(){
  return deniedPermissionResponses.isEmpty();
}

private String fetchCharsetFromCache(Client client,Locale loc){
  Map cCache=(Map)charsetCache.get(client.getClientType());
  String val=null;
  if (cCache != null) {
    val=(String)cCache.get(loc);
  }
  return val;
}

public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){
  g.setColor(getColor());
  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {
    Rectangle alloc;
    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds;
 else     alloc=bounds.getBounds();
    paintSquiggle(g,alloc);
    return alloc;
  }
  try {
    Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);
    Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();
    paintSquiggle(g,r);
    return r;
  }
 catch (  BadLocationException e) {
    e.printStackTrace();
  }
  return null;
}

public void addControlRoll(PilotingRollData control){
  controlRolls.addElement(control);
}

void processAddOnChanges(Window caller,AddOnDependencyChecker.AddOnChangesResult changes){
  if (addonsDialog != null) {
    addonsDialog.setDownloadingUpdates();
  }
  if (getView() != null) {
    Set<AddOn> addOns=new HashSet<>(changes.getUninstalls());
    addOns.addAll(changes.getOldVersions());
    Set<Extension> extensions=new HashSet<>();
    extensions.addAll(changes.getUnloadExtensions());
    extensions.addAll(changes.getSoftUnloadExtensions());
    if (!warnUnsavedResourcesOrActiveActions(caller,addOns,extensions,true)) {
      return;
    }
  }
  uninstallAddOns(caller,changes.getUninstalls(),false);
  Set<AddOn> allAddons=new HashSet<>(changes.getNewVersions());
  allAddons.addAll(changes.getInstalls());
  for (  AddOn addOn : allAddons) {
    if (addonsDialog != null) {
      addonsDialog.notifyAddOnDownloading(addOn);
    }
    downloadAddOn(addOn);
  }
}

public void rederiveColor(){
  Color src=UIManager.getColor(uiDefaultParentName);
  if (src != null) {
    float[] tmp=Color.RGBtoHSB(src.getRed(),src.getGreen(),src.getBlue(),null);
    tmp[0]=clamp(tmp[0] + hOffset);
    tmp[1]=clamp(tmp[1] + sOffset);
    tmp[2]=clamp(tmp[2] + bOffset);
    int alpha=clamp(src.getAlpha() + aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
 else {
    float[] tmp=new float[3];
    tmp[0]=clamp(hOffset);
    tmp[1]=clamp(sOffset);
    tmp[2]=clamp(bOffset);
    int alpha=clamp(aOffset);
    argbValue=(Color.HSBtoRGB(tmp[0],tmp[1],tmp[2]) & 0xFFFFFF) | (alpha << 24);
  }
}

public static String toString(int[] oid){
  StringBuilder sb=new StringBuilder(3 * oid.length);
  for (int i=0; i < oid.length - 1; ++i) {
    sb.append(oid[i]);
    sb.append('.');
  }
  sb.append(oid[oid.length - 1]);
  return sb.toString();
}

private void grow(){
  m_allocatedSize*=2;
  boolean newVector[]=new boolean[m_allocatedSize];
  System.arraycopy(m_values,0,newVector,0,m_index + 1);
  m_values=newVector;
}

public void onIdleBegin(){
  _idleCount.incrementAndGet();
}

private void addSpan(CacheSpan span){
  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);
  if (spansForKey == null) {
    spansForKey=new TreeSet<CacheSpan>();
    cachedSpans.put(span.key,spansForKey);
  }
  spansForKey.add(span);
  totalSpace+=span.length;
  notifySpanAdded(span);
}

public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (!(obj instanceof URIName)) {
    return false;
  }
  URIName other=(URIName)obj;
  return uri.equals(other.getURI());
}

void repaintChildren(){
  for (  Component child : panel.getComponents()) {
    child.repaint();
  }
}

private void validateDnsName(String dnsName) throws PolicyException {
  int starIndex=dnsName.indexOf("*");
  if ((starIndex >= 0) && !dnsName.equals("*")) {
    if ((starIndex > 0) || ((starIndex == 0) && ((dnsName.indexOf("*",1) != -1) || (dnsName.charAt(1) != '.')))) {
      String args[]={DNS_NAME,dnsName};
      throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);
    }
  }
}

private static String readComment(String input,int index){
  String comment=null;
  Matcher matcher=COMMENT_PATTERN.matcher(input.substring(index));
  if (matcher.find()) {
    comment=matcher.group(1);
    comment=comment.substring(1);
  }
  return comment;
}

public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){
  int numPreEscapes=0;
  for (int i=start; i < str.length(); i++) {
    char curChar=str.charAt(i);
    if (numPreEscapes == 0 && curChar == separator) {
      return i;
    }
 else {
      split.append(curChar);
      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;
    }
  }
  return -1;
}

private static String guessContentType(String url){
  url=url.toLowerCase();
  if (url.endsWith(".webm")) {
    return "video/webm";
  }
 else   if (url.endsWith(".mp4")) {
    return "video/mp4";
  }
 else   if (url.matches(".*\\.jpe?g")) {
    return "image/jpeg";
  }
 else   if (url.endsWith(".png")) {
    return "image/png";
  }
 else   if (url.endsWith(".gif")) {
    return "image/gif";
  }
 else {
    return "application/octet-stream";
  }
}

public static String extractCSVOutputLineDomain(String csvOut){
  String tokens[]=csvOut.split(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)",-1);
  return tokens[1];
}

public void connect(){
  connect(this.logWriter);
}

public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){
  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {
    return false;
  }
  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);
  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);
  resp.setDateHeader("Last-Modified",lastMod);
  resp.setHeader("ETag",etag);
  if (checkETagValidators(req,resp,reqMethod,etag)) {
    return true;
  }
  if (checkLastModValidators(req,resp,lastMod)) {
    return true;
  }
  return false;
}

public IvrZoneset showActiveIvrZoneset() throws NetworkDeviceControllerException {
  List<IvrZoneset> zonesets=showIvrZonesets(true);
  return zonesets.isEmpty() ? null : zonesets.get(0);
}

@SuppressWarnings("unchecked") public static <K>ImmutableArray<K> empty(){
  return (ImmutableArray<K>)EMPTY;
}

public void replaceNonOptionalNonMinusNodesWith(final List<IGroupMemberNode> ordered,final boolean recomputeDefinitelyProduced){
  nonOptionalNonMinusNodes.clear();
  nonOptionalNonMinusNodes.addAll(ordered);
  if (recomputeDefinitelyProduced) {
    recomputeDefinitelyProduced();
  }
}

public static String toString(Accountable a){
  StringBuilder sb=new StringBuilder();
  toString(sb,a,0);
  return sb.toString();
}

@Override public int hashCode(){
  return type << 16 | value.hashCode() << 8 | otherValue.hashCode();
}

protected void deleteTypeVertex(AtlasVertex instanceVertex,DataTypes.TypeCategory typeCategory,boolean force) throws AtlasException {
switch (typeCategory) {
case STRUCT:
case TRAIT:
    deleteTypeVertex(instanceVertex,force);
  break;
case CLASS:
deleteEntities(Collections.singletonList(instanceVertex));
break;
default :
throw new IllegalStateException("Type category " + typeCategory + " not handled");
}
}

public static List<String> readToList(Reader r) throws IOException {
  try (BufferedReader in=new BufferedReader(r)){
    List<String> l=new ArrayList<>();
    String line=null;
    while ((line=in.readLine()) != null)     l.add(line);
    return Collections.unmodifiableList(l);
  }
 }

@SuppressWarnings("unchecked") public void addCacheContext(GridCacheContext cacheCtx) throws IgniteCheckedException {
  if (ctxMap.containsKey(cacheCtx.cacheId())) {
    GridCacheContext<K,V> existing=ctxMap.get(cacheCtx.cacheId());
    throw new IgniteCheckedException("Failed to start cache due to conflicting cache ID " + "(change cache name and restart grid) [cacheName=" + cacheCtx.name() + ", conflictingCacheName="+ existing.name()+ ']');
  }
  CacheStoreManager mgr=cacheCtx.store();
  if (mgr.configured() && mgr.isLocal())   locStoreCnt.incrementAndGet();
  ctxMap.put(cacheCtx.cacheId(),cacheCtx);
}

protected static boolean isCglibGetCallbacks(AnnotatedMethod am){
  Class<?> rt=am.getRawType();
  if (rt == null || !rt.isArray()) {
    return false;
  }
  Class<?> compType=rt.getComponentType();
  Package pkg=compType.getPackage();
  if (pkg != null) {
    String pname=pkg.getName();
    if (pname.startsWith("net.sf.cglib") || pname.startsWith("org.hibernate.repackage.cglib")) {
      return true;
    }
  }
  return false;
}

public int compareTo(NamedMediaType other){
  return _name.compareTo(other._name);
}

public boolean isModified(){
synchronized (this) {
    if (_isChecking || _isModified) {
      return _isModified;
    }
    _isChecking=true;
  }
  try {
    long now;
    now=CurrentTime.currentTime();
    if (now < _lastCheckTime + _checkInterval)     return _isModified;
    _lastCheckTime=now;
    for (int i=_dependencyList.size() - 1; i >= 0; i--) {
      Dependency dependency=_dependencyList.get(i);
      if (dependency.isModified()) {
        dependency.logModified(log());
        _isModified=true;
        return _isModified;
      }
    }
    return _isModified;
  }
  finally {
    _isChecking=false;
  }
}

protected ReplacedElement newIrreplaceableImageElement(int cssWidth,int cssHeight){
  BufferedImage missingImage;
  ReplacedElement mre;
  try {
    missingImage=ImageUtil.createCompatibleBufferedImage(cssWidth,cssHeight,BufferedImage.TYPE_INT_RGB);
    Graphics2D g=missingImage.createGraphics();
    g.setColor(Color.BLACK);
    g.setBackground(Color.WHITE);
    g.setFont(new Font("Serif",Font.PLAIN,12));
    g.drawString("Missing",0,12);
    g.dispose();
    mre=new ImageReplacedElement(missingImage,cssWidth,cssHeight);
  }
 catch (  Exception e) {
    mre=new EmptyReplacedElement(cssWidth < 0 ? 0 : cssWidth,cssHeight < 0 ? 0 : cssHeight);
  }
  return mre;
}

public boolean greaterThan(FXGVersion version){
  return (compareTo(version) > 0);
}

@Override public DataSource createDataSource(Properties properties) throws SQLException {
  Properties propertiesCopy=new Properties();
  if (properties != null) {
    propertiesCopy.putAll(properties);
  }
  rejectUnsupportedOptions(propertiesCopy);
  rejectPoolingOptions(propertiesCopy);
  JdbcDataSource dataSource=new JdbcDataSource();
  setupH2DataSource(dataSource,propertiesCopy);
  return dataSource;
}

public Set<String> find(T object){
  if (!locations.containsKey(object)) {
    locations.put(object,new HashSet<>());
  }
  return Collections.unmodifiableSet(locations.get(object));
}

private void scrollCurrentItemToCenter(){
  final ViewItem currItem=mViewItems[BUFFER_CENTER];
  if (currItem == null) {
    return;
  }
  final int currentViewCenter=currItem.getCenterX();
  if (mController.isScrolling() || mIsUserScrolling || isCurrentItemCentered()) {
    Log.d(TAG,"[fling] mController.isScrolling() - " + mController.isScrolling());
    return;
  }
  int snapInTime=(int)(SNAP_IN_CENTER_TIME_MS * ((float)Math.abs(mCenterX - currentViewCenter)) / mDrawArea.width());
  Log.d(TAG,"[fling] Scroll to center.");
  mController.scrollToPosition(currentViewCenter,snapInTime,false);
}

public void addMetaObject(MetaObject object){
  for (int k=0; k < MetaObjects.size(); ++k) {
    if (MetaObjects.get(k) == null) {
      MetaObjects.set(k,object);
      return;
    }
  }
  MetaObjects.add(object);
}

public boolean remove(String word){
  return m_Words.remove(word);
}

public void testCase12(){
  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",-1,result.signum());
}

public synchronized void addRecentItem(T item){
  item=fromString(toString(item));
  if (m_RecentItems.size() > 0) {
    if (item.equals(m_RecentItems.get(0)))     return;
  }
  m_RecentItems.remove(item);
  m_RecentItems.add(0,item);
  while (m_RecentItems.size() > m_MaxCount)   m_RecentItems.remove(m_RecentItems.size() - 1);
  if (m_IgnoreChanges)   return;
  writeProps();
  updateMenu();
  notifyRecentItemListenersOfAdd(item);
}

private Rect calcBounds(int index,Paint paint){
  Rect bounds=new Rect();
  CharSequence title=getTitle(index);
  bounds.right=(int)paint.measureText(title,0,title.length());
  bounds.bottom=(int)(paint.descent() - paint.ascent());
  return bounds;
}

public void testInvokeAll2() throws InterruptedException {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());
    assertTrue(r.isEmpty());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}

public void cfgPackage(ConfigurationValue cfgval,String name,String desc){
  packages.add(new PackageInfo(name,desc));
  packageNames.add(name);
}

@Override public void close() throws IOException {
  input.close();
}

private void createBlockMirrorData(String name,int numBlockMirrors) throws Exception {
  Volume volume=new Volume();
  URI volumeURI=URIUtil.createId(Volume.class);
  testVolumeURIs.add(volumeURI);
  volume.setId(volumeURI);
  volume.setLabel("blockMirrorVolume");
  URI cgUri=createBlockConsistencyGroup("blockMirrorVolume-cg");
  volume.setConsistencyGroup(cgUri);
  _dbClient.createObject(volume);
  for (int i=1; i <= numBlockMirrors; i++) {
    BlockMirror blockMirror=new BlockMirror();
    URI blockMirrorURI=URIUtil.createId(BlockMirror.class);
    testBlockMirrorURIs.add(blockMirrorURI);
    blockMirror.setId(blockMirrorURI);
    blockMirror.setLabel(name + i);
    blockMirror.setConsistencyGroup(cgUri);
    _dbClient.createObject(blockMirror);
  }
}

@Override public synchronized void start(){
  if (running) {
    return;
  }
  LOGGER.info("Starting server");
  if (endpoints.isEmpty()) {
    int port=config.getInt(NetworkConfig.Keys.COAP_PORT);
    LOGGER.log(Level.INFO,"No endpoints have been defined for server, setting up server endpoint on default port {0}",port);
    addEndpoint(new CoapEndpoint(port,this.config));
  }
  int started=0;
  for (  Endpoint ep : endpoints) {
    try {
      ep.start();
      ++started;
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,"Cannot start server endpoint [" + ep.getAddress() + "]",e);
    }
  }
  if (started == 0) {
    throw new IllegalStateException("None of the server endpoints could be started");
  }
 else {
    running=true;
  }
}

public JsonArray add(String value){
  values.add(Json.value(value));
  return this;
}

public boolean retainAll(AbstractFloatList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}

@Override public void exceptionCaught(IoSession session,Throwable cause){
  final IoSessionInputStream in=(IoSessionInputStream)session.getAttribute(KEY_IN);
  IOException e=null;
  if (cause instanceof StreamIoException) {
    e=(IOException)cause.getCause();
  }
 else   if (cause instanceof IOException) {
    e=(IOException)cause;
  }
  if (e != null && in != null) {
    in.throwException(e);
  }
 else {
    LOGGER.warn("Unexpected exception.",cause);
    session.close(true);
  }
}

protected void clearResult(){
  md.clearResult();
  localizationResult.setText("<HTML>Result: <BR><BR><BR></HTML>");
}

public static <T>String toString(Collection<T> collection){
  if (collection == null) {
    return "null";
  }
  if (collection.isEmpty()) {
    return "";
  }
  StringBuilder buf=new StringBuilder();
  String delimiter="";
  for (  T t : collection) {
    if (t == null) {
      continue;
    }
    buf.append(delimiter);
    buf.append(t);
    delimiter=", ";
  }
  return buf.toString();
}

public static float between(float val,float min,float max){
  return Math.max(Math.min(val,max),min);
}

public static StringBuffer replaceString(StringBuffer buffer,String[] parameters){
  int placeHolderPosition=-1;
  String placeHolder=null;
  for (int i=0; i < parameters.length; i++) {
    if (parameters[i] == null) {
      break;
    }
    placeHolder="%" + (i + 1) + "%";
    placeHolderPosition=buffer.indexOf(placeHolder);
    if (placeHolderPosition != -1) {
      buffer.replace(placeHolderPosition,placeHolderPosition + placeHolder.length(),parameters[i]);
    }
 else {
      break;
    }
  }
  return buffer;
}

private static int lookupQualSelector(XMPNode arrayNode,String qualName,String qualValue,int aliasForm) throws XMPException {
  if (XML_LANG.equals(qualName)) {
    qualValue=Utils.normalizeLangValue(qualValue);
    int index=XMPNodeUtils.lookupLanguageItem(arrayNode,qualValue);
    if (index < 0 && (aliasForm & AliasOptions.PROP_ARRAY_ALT_TEXT) > 0) {
      XMPNode langNode=new XMPNode(ARRAY_ITEM_NAME,null);
      XMPNode xdefault=new XMPNode(XML_LANG,X_DEFAULT,null);
      langNode.addQualifier(xdefault);
      arrayNode.addChild(1,langNode);
      return 1;
    }
 else {
      return index;
    }
  }
 else {
    for (int index=1; index < arrayNode.getChildrenLength(); index++) {
      XMPNode currItem=arrayNode.getChild(index);
      for (Iterator it=currItem.iterateQualifier(); it.hasNext(); ) {
        XMPNode qualifier=(XMPNode)it.next();
        if (qualName.equals(qualifier.getName()) && qualValue.equals(qualifier.getValue())) {
          return index;
        }
      }
    }
    return -1;
  }
}

public boolean isMultipleAllowed(String frameID){
  return multipleFrames.contains(frameID);
}

public String[] parseConfiguration(File xmlFile) throws SAXException, IOException {
  Document document=builder.parse(xmlFile);
  return (parseConfiguration(document));
}

private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){
  TetradMatrix Kyx=Ky.times(Kx);
  TetradMatrix Kyz=Ky.times(Kz);
  TetradMatrix Kzx=Kz.times(Kx);
  TetradMatrix Kzreg=Kz.copy();
  for (int i=0; i < m; i++) {
    double ent=(Kzreg.get(i,i) + this.regularizer);
    Kzreg.set(i,i,ent);
  }
  TetradMatrix A=Kzreg.inverse();
  Kzreg=A.times(A);
  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);
  A=Kyz.times(Kzreg);
  Kyzzregzx=A.times(Kzx);
  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();
  Kyzzregzxzzregz=Kyzzregzx.times(Kz);
  A=Kyzzregzxzzregz.times(Kzreg);
  Kyzzregzxzzregz=A.times(Kz);
  double empHSIC=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=Kyx.get(i,i);
    empHSIC+=(-2 * Kyzzregzx.get(i,i));
    empHSIC+=Kyzzregzxzzregz.get(i,i);
  }
  empHSIC/=Math.pow(m - 1,2);
  double Bz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      Bz+=Math.pow(Kz.get(i,j),2);
      Bz+=Math.pow(Kz.get(j,i),2);
    }
  }
  Bz=(m * (m - 1)) / Bz;
  empHSIC*=Bz;
  return empHSIC;
}

public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {
  create(rpfFilePaths,outputFile,false);
}

private synchronized void postEvent(EventInfo eventInfo){
  eventQueue.add(eventInfo);
  notifyAll();
}

public String chooseServerAlias(String keyType,Principal[] issuers,Socket sock){
  return sunX509KeyManager.chooseServerAlias(keyType,issuers,sock);
}

private void processBmpImage(BufferedImage image){
  if (!isError) {
    File outputFile=new File(path,prefix + (numPage + 1) + ".bmp");
    try {
      ImageIO.write(image,"bmp",outputFile);
      addTempFile(outputFile);
      addScanFile(outputFile);
      numPage++;
    }
 catch (    IOException e) {
      e.printStackTrace();
      endProcess(true,false);
    }
  }
}

public PathHandler(String path){
  this(Paths.get(path));
}

public boolean loadLines(){
  boolean result=false;
  try {
    m_parser.parse(new InputSource(m_reader),this);
    result=true;
    m_success=true;
  }
 catch (  SAXException e) {
    m_errorMessage="ErrorParsingData";
    m_errorDescription=e.getMessage();
  }
catch (  IOException e) {
    m_errorMessage="ErrorReadingData";
    m_errorDescription=e.getMessage();
  }
  return result;
}

private void loadIgnoreFile(final String srcFolder){
  ignoreFile=IgnoreFile.load(srcFolder);
  if (ignoreFile == null) {
    loadDefaultExcludePattern(srcFolder);
  }
}

public boolean removeArg(final BOp arg){
  if (arg == null)   throw new IllegalArgumentException();
  if (arg == this)   throw new IllegalArgumentException();
  if (args.remove(arg)) {
    mutation();
    return true;
  }
  return false;
}

public static boolean looksLikeAListStyleType(String val){
  return LIST_TYPES.indexOf(val) >= 0;
}

public PKCS10Attribute(PKCS9Attribute attr){
  this.attributeId=attr.getOID();
  this.attributeValue=attr.getValue();
}

public void createNote(Note note){
  SQLiteDatabase db=getWritableDatabase();
  String spannableAsHtml=Html.toHtml(note.getSpannable());
  String date=dt.format(new Date());
  ContentValues values=new ContentValues();
  values.put(KEY_SPANNABLE_NOTE,spannableAsHtml);
  values.put(KEY_NOTE_TITLE,note.getTitle());
  values.put(KEY_IMAGE,BitmapConverter.getBytes(note.getImage()));
  values.put(KEY_DATE_UPDATED,date);
  db.insert(TABLE_NOTES,null,values);
  db.close();
}

void verifyUniqueXids(List<OFMessage> msgs){
  if (seenXids == null)   seenXids=new HashSet<Long>();
  for (  OFMessage m : msgs) {
    long xid=m.getXid();
    assertTrue("Xid in messags is 0",xid != 0);
    assertFalse("Xid " + xid + " has already been used",seenXids.contains(xid));
    seenXids.add(xid);
  }
}

void addNext(Node<T> n){
  nextNodes.add(n);
  Collections.sort(nextNodes,isVertical ? verticalComparator : horizontalComparator);
}

protected void configDialogPropertyChange(PropertyChangeEvent event){
  log.debug("internal config dialog handler");
  firePropertyChange(PropertyChangeID.CONFIG_CHANGE,event.getOldValue(),event.getNewValue());
}

public final String readUTF() throws IOException {
  return decodeUTF(readUnsignedShort());
}

private void myAdd(LinkedList<Integer> l,int i){
  l.add(i);
}

private void resetStateForGridTop(){
  final int colCount=mColCount;
  if (mItemTops == null || mItemTops.length != colCount) {
    mItemTops=new int[colCount];
    mItemBottoms=new int[colCount];
  }
  final int top=getPaddingTop();
  Arrays.fill(mItemTops,top);
  Arrays.fill(mItemBottoms,top);
  mFirstPosition=0;
  if (mRestoreOffsets != null)   Arrays.fill(mRestoreOffsets,0);
}

public String testNextToken() throws IOException {
  Token t=super.nextToken();
  return Integer.toString(t.type) + ";" + t.content+ ";";
}

public static RepaintManager currentManager(Component c){
  return currentManager(AppContext.getAppContext());
}

private boolean isRecoverPointInitiator(String portWWN){
  return portWWN.contains(RECOVERPOINT_INITIATOR_PREFIX);
}

protected boolean isWFXMLChar(String chardata,Character refInvalidChar){
  if (chardata == null || (chardata.length() == 0)) {
    return true;
  }
  char[] dataarray=chardata.toCharArray();
  int datalength=dataarray.length;
  if (fIsXMLVersion11) {
    int i=0;
    while (i < datalength) {
      if (XML11Char.isXML11Invalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return false;
      }
    }
  }
 else {
    int i=0;
    while (i < datalength) {
      if (XMLChar.isInvalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return false;
      }
    }
  }
  return true;
}

@Override public void send(Buffer buffer){
  _outProxy.write(_outWriter,buffer,false);
}

@Override public boolean eIsSet(int featureID){
switch (featureID) {
case EipPackage.ROUTE__OWNED_ENDPOINTS:
    return ownedEndpoints != null && !ownedEndpoints.isEmpty();
case EipPackage.ROUTE__OWNED_CHANNELS:
  return ownedChannels != null && !ownedChannels.isEmpty();
case EipPackage.ROUTE__NAME:
return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case EipPackage.ROUTE__EXCHANGE_TYPE:
return exchangeType != EXCHANGE_TYPE_EDEFAULT;
}
return super.eIsSet(featureID);
}

public void removeClickingListener(OnWheelClickedListener listener){
  clickingListeners.remove(listener);
}

public void addSection(final Section SECTION){
  if (null == SECTION)   return;
  sections.add(SECTION);
  Collections.sort(sections,new SectionComparator());
  fireUpdateEvent(SECTION_EVENT);
}

private int calculatePreferredWrapPosition(@NotNull Editor editor,@NotNull CharSequence text,int tabSize,int spaceSize,int startLineOffset,int endLineOffset,int targetRangeEndOffset){
  boolean hasTabs=false;
  boolean canOptimize=true;
  boolean hasNonSpaceSymbols=false;
  loop:   for (int i=startLineOffset; i < Math.min(endLineOffset,targetRangeEndOffset); i++) {
    char c=text.charAt(i);
switch (c) {
case '\t':
{
        hasTabs=true;
        if (hasNonSpaceSymbols) {
          canOptimize=false;
          break loop;
        }
      }
case ' ':
    break;
default :
  hasNonSpaceSymbols=true;
}
}
if (!hasTabs) {
return wrapPositionForTextWithoutTabs(startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else if (canOptimize) {
return wrapPositionForTabbedTextWithOptimization(text,tabSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
 else {
return wrapPositionForTabbedTextWithoutOptimization(editor,text,spaceSize,startLineOffset,endLineOffset,targetRangeEndOffset);
}
}

public void addAll(OVector v){
  expandFor(size + v.size - 1,null);
  System.arraycopy(v.vector,0,vector,size - v.size,v.size);
}

private static boolean isOptimizableForDescendantIterator(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {
  int stepType;
  int stepCount=0;
  boolean foundDorDS=false;
  boolean foundSelf=false;
  boolean foundDS=false;
  int nodeTestType=OpCodes.NODETYPE_NODE;
  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {
    if (nodeTestType != OpCodes.NODETYPE_NODE && nodeTestType != OpCodes.NODETYPE_ROOT)     return false;
    stepCount++;
    if (stepCount > 3)     return false;
    boolean mightBeProximate=mightBeProximate(compiler,stepOpCodePos,stepType);
    if (mightBeProximate)     return false;
switch (stepType) {
case OpCodes.FROM_FOLLOWING:
case OpCodes.FROM_FOLLOWING_SIBLINGS:
case OpCodes.FROM_PRECEDING:
case OpCodes.FROM_PRECEDING_SIBLINGS:
case OpCodes.FROM_PARENT:
case OpCodes.OP_VARIABLE:
case OpCodes.OP_EXTFUNCTION:
case OpCodes.OP_FUNCTION:
case OpCodes.OP_GROUP:
case OpCodes.FROM_NAMESPACE:
case OpCodes.FROM_ANCESTORS:
case OpCodes.FROM_ANCESTORS_OR_SELF:
case OpCodes.FROM_ATTRIBUTES:
case OpCodes.MATCH_ATTRIBUTE:
case OpCodes.MATCH_ANY_ANCESTOR:
case OpCodes.MATCH_IMMEDIATE_ANCESTOR:
      return false;
case OpCodes.FROM_ROOT:
    if (1 != stepCount)     return false;
  break;
case OpCodes.FROM_CHILDREN:
if (!foundDS && !(foundDorDS && foundSelf)) return false;
break;
case OpCodes.FROM_DESCENDANTS_OR_SELF:
foundDS=true;
case OpCodes.FROM_DESCENDANTS:
if (3 == stepCount) return false;
foundDorDS=true;
break;
case OpCodes.FROM_SELF:
if (1 != stepCount) return false;
foundSelf=true;
break;
default :
throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));
}
nodeTestType=compiler.getStepTestType(stepOpCodePos);
int nextStepOpCodePos=compiler.getNextStepPos(stepOpCodePos);
if (nextStepOpCodePos < 0) break;
if (OpCodes.ENDOP != compiler.getOp(nextStepOpCodePos)) {
if (compiler.countPredicates(stepOpCodePos) > 0) {
return false;
}
}
stepOpCodePos=nextStepOpCodePos;
}
return true;
}

public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {
  byte[] bs=new byte[BUFFER_SIZE];
  int numRead;
  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {
    outStr.write(bs,0,numRead);
  }
}

public void addRule(String ruleExpression,T resultIfMatched){
  mRuleMap.add(new MimeMatcherRule(ruleExpression,resultIfMatched));
}

protected abstract boolean validateNumber(ConversationContext context,Number input);

public void sendMessageUntilStopCount(int stopCount){
  for (int i=processedWorkerCount; i < workers.size(); ++i) {
    ActorRef worker=workers.get(i);
    try {
      Thread.sleep(1L);
    }
 catch (    InterruptedException e) {
      logger.error("sleep exception " + e + " details: ",e);
    }
    worker.tell(OperationWorkerMsgType.PROCESS_REQUEST,originalManager);
    processedWorkerCount++;
    if (processedWorkerCount > stopCount) {
      return;
    }
    logger.debug("REQ_SENT: {} / {} taskId {}",processedWorkerCount,requestTotalCount,taskIdTrim);
  }
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split(",")));
}

private String pickCharset(){
  if (charset != null) {
    return charset;
  }
 else   if (utf8Supported) {
    return "UTF-8";
  }
 else {
    return System.getProperty("file.encoding");
  }
}

public void testToEngineeringStringPos(){
  String a="123809648392384754573567356745735.63567890295784902768787678287E-501";
  BigDecimal aNumber=new BigDecimal(a);
  String result="123.80964839238475457356735674573563567890295784902768787678287E-471";
  assertEquals("incorrect value",result,aNumber.toEngineeringString());
}

@Override public void clear(){
  if (elementCount > 0) {
    elementCount=0;
    Arrays.fill(elementData,null);
    modCount++;
  }
}

public void addLayer(final LayerDefinition layer){
  layer.setMap(this);
  layers.add(layer);
}

private List<Rule> readRules(Reader reader) throws IOException, IllegalArgumentException {
  BufferedReader in=new BufferedReader(reader);
  List<Rule> rules=new ArrayList<Rule>();
  String line;
  while ((line=in.readLine()) != null) {
    if (line.length() == 0) {
      continue;
    }
    line=line.trim();
    char first=line.charAt(0);
    boolean sign=false;
switch (first) {
case '+':
      sign=true;
    break;
case '-':
  sign=false;
break;
case ' ':
case '\n':
case '#':
continue;
default :
throw new IOException("Invalid first character: " + line);
}
String regex=line.substring(1);
if (LOG.isTraceEnabled()) {
LOG.trace("Adding rule [" + regex + "]");
}
Rule rule=createRule(sign,regex);
rules.add(rule);
}
return rules;
}

@SuppressWarnings("unchecked") @Override protected Object applyUpdatesToManagedData(Object updates){
  boolean madeChanges=false;
  List<String> words=(List<String>)updates;
  log.info("Applying updates: " + words);
  boolean ignoreCase=getIgnoreCase();
  for (  String word : words) {
    if (ignoreCase)     word=word.toLowerCase(Locale.ROOT);
    if (managedWords.add(word)) {
      madeChanges=true;
      log.info("Added word: {}",word);
    }
  }
  return madeChanges ? managedWords : null;
}

protected void drawLabel(Canvas canvas,String labelText,DefaultRenderer renderer,List<RectF> prevLabelsBounds,int centerX,int centerY,float shortRadius,float longRadius,float currentAngle,float angle,int left,int right,int color,Paint paint,boolean line,boolean display){
  if (renderer.isShowLabels() || display) {
    paint.setColor(color);
    double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));
    double sinValue=Math.sin(rAngle);
    double cosValue=Math.cos(rAngle);
    int x1=Math.round(centerX + (float)(shortRadius * sinValue));
    int y1=Math.round(centerY + (float)(shortRadius * cosValue));
    int x2=Math.round(centerX + (float)(longRadius * sinValue));
    int y2=Math.round(centerY + (float)(longRadius * cosValue));
    float size=renderer.getLabelsTextSize();
    float extra=Math.max(size / 2,10);
    paint.setTextAlign(Align.LEFT);
    if (x1 > x2) {
      extra=-extra;
      paint.setTextAlign(Align.RIGHT);
    }
    float xLabel=x2 + extra;
    float yLabel=y2;
    float width=right - xLabel;
    if (x1 > x2) {
      width=xLabel - left;
    }
    labelText=getFitText(labelText,width,paint);
    float widthLabel=paint.measureText(labelText);
    boolean okBounds=false;
    while (!okBounds && line) {
      boolean intersects=false;
      int length=prevLabelsBounds.size();
      for (int j=0; j < length && !intersects; j++) {
        RectF prevLabelBounds=prevLabelsBounds.get(j);
        if (prevLabelBounds.intersects(xLabel,yLabel,xLabel + widthLabel,yLabel + size)) {
          intersects=true;
          yLabel=Math.max(yLabel,prevLabelBounds.bottom);
        }
      }
      okBounds=!intersects;
    }
    if (line) {
      y2=(int)(yLabel - size / 2);
      canvas.drawLine(x1,y1,x2,y2,paint);
      canvas.drawLine(x2,y2,x2 + extra,y2,paint);
    }
 else {
      paint.setTextAlign(Align.CENTER);
    }
    canvas.drawText(labelText,xLabel,yLabel,paint);
    if (line) {
      prevLabelsBounds.add(new RectF(xLabel,yLabel,xLabel + widthLabel,yLabel + size));
    }
  }
}

@Override public void write(char c[],int off,int len){
  if ((off < 0) || (off > c.length) || (len < 0)|| ((off + len) > c.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
  int newcount=count + len;
  if (newcount > buf.length) {
    buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));
  }
  System.arraycopy(c,off,buf,count,len);
  count=newcount;
}

@Deprecated public static EpisodeMatchingResult detectEpisodeFromFilename(File file){
  LOGGER.debug("Detect episodes/seasons from file " + file.getName());
  EpisodeMatchingResult result=new EpisodeMatchingResult();
  String fileName=file.getName();
  result=parseString(fileName);
  Collections.sort(result.episodes);
  Matcher matcher=stackingMarkerPattern.matcher(result.name);
  result.stackingMarkerFound=matcher.matches();
  LOGGER.debug("returning result " + result);
  return result;
}

public static TypedOperation createArrayCreation(ArrayType arrayType){
  List<Type> typeList=new ArrayList<>();
  typeList.add(JavaTypes.INT_TYPE);
  TypeTuple inputTypes=new TypeTuple(typeList);
  return new TypedTermOperation(new ArrayCreation(arrayType),inputTypes,arrayType);
}

public void fireEvent(final SPARQLUpdateEvent e){
  if (isReadOnly())   throw new UnsupportedOperationException();
  if (e == null)   throw new IllegalArgumentException();
  if (listeners.isEmpty()) {
    return;
  }
  final ISPARQLUpdateListener[] a=listeners.toArray(new ISPARQLUpdateListener[0]);
  for (  ISPARQLUpdateListener l : a) {
    final ISPARQLUpdateListener listener=l;
    try {
      listener.updateEvent(e);
    }
 catch (    Throwable t) {
      if (InnerCause.isInnerCause(t,InterruptedException.class)) {
        throw new RuntimeException(t);
      }
      log.error(t,t);
    }
  }
}

public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){
  if (!VALID_TYPES.contains(prefType)) {
    throw new IllegalArgumentException("The specified type: " + prefType + " is not supported in preferences");
  }
  this.prefType=prefType;
  return this;
}

private void expungeStaleEntries(){
  for (Object x; (x=queue.poll()) != null; ) {
synchronized (queue) {
      @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)x;
      int i=indexFor(e.hash,table.length);
      Entry<K,V> prev=table[i];
      Entry<K,V> p=prev;
      while (p != null) {
        Entry<K,V> next=p.next;
        if (p == e) {
          if (prev == e)           table[i]=next;
 else           prev.next=next;
          e.value=null;
          size--;
          break;
        }
        prev=p;
        p=next;
      }
    }
  }
}

protected boolean isNumeric(String text){
  text=text.trim();
  int tlen=text.length();
  for (int i=0; i < tlen; i++) {
    if (Character.isDigit(text.charAt(i)) == false) {
      return false;
    }
  }
  return true;
}

public static boolean isChar(String desc){
  return desc.endsWith("C");
}

public RSAPublicKeyImpl(byte[] encoded) throws InvalidKeyException {
  decode(encoded);
  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);
}

Date toDate(Calendar calendar){
  return calendar.getTime();
}

public boolean isClientAuthentication(){
  return clientAuthentication;
}

private JPanel createImageFilePanel(){
  JPanel panel=new JPanel();
  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));
  panel.add(imageFileName);
  panel.add(Box.createHorizontalStrut(6));
  panel.add(new JButton(openImageFile));
  return panel;
}

void writeLine(BufferedWriter writer,String line) throws IOException {
  writer.write(line);
  writer.newLine();
}

public Layer childAt(int index){
  return children.get(index);
}

private static void checkPermission(){
  SecurityManager security=System.getSecurityManager();
  if (security != null)   security.checkPermission(modifyThreadPermission);
}

public static Function<Value,Value> ofValue(){
  return VALUE;
}

public static String removeQuotes(String s){
  if (s == null) {
    return null;
  }
  String trimmed=s.trim();
  if (trimmed.length() == 0) {
    return trimmed;
  }
  int i=nextNonQuoteIndex(trimmed,0,true);
  int j=nextNonQuoteIndex(trimmed,trimmed.length() - 1,false);
  return trimmed.substring(i,j + 1);
}

public static boolean isDefinedNSDecl(SerializationHandler serializer,int attr,DTM dtm){
  if (DTM.NAMESPACE_NODE == dtm.getNodeType(attr)) {
    String prefix=dtm.getNodeNameX(attr);
    String uri=serializer.getNamespaceURIFromPrefix(prefix);
    if ((null != uri) && uri.equals(dtm.getStringValue(attr)))     return true;
  }
  return false;
}

public void testUserDataHandlerNotifiedOfShallowClones(){
  RecordingHandler handler=new RecordingHandler();
  name.setUserData("a","apple",handler);
  name.setUserData("b","banana",handler);
  standard.setUserData("c","cat",handler);
  waffles.setUserData("d","dog",handler);
  Element clonedName=(Element)name.cloneNode(false);
  Attr clonedStandard=clonedName.getAttributeNode("a:standard");
  Set<String> expected=new HashSet<String>();
  expected.add(notification(NODE_CLONED,"a","apple",name,clonedName));
  expected.add(notification(NODE_CLONED,"b","banana",name,clonedName));
  expected.add(notification(NODE_CLONED,"c","cat",standard,clonedStandard));
  assertEquals(expected,handler.calls);
}

public DBasicConstraints(JDialog parent,byte[] value) throws IOException {
  super(parent);
  setTitle(res.getString("DBasicConstraints.Title"));
  initComponents();
  prepopulateWithValue(value);
}

private static int lastIndexOf(Object o,Object[] elements,int index){
  if (o == null) {
    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;
  }
 else {
    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;
  }
  return -1;
}

public FloatColumn(int nrows,int capacity,float defaultValue){
  super(float.class,new Float(defaultValue));
  if (capacity < nrows) {
    throw new IllegalArgumentException("Capacity value can not be less than the row count.");
  }
  m_values=new float[capacity];
  Arrays.fill(m_values,defaultValue);
  m_size=nrows;
}

void readPRJ() throws IOException {
  while (true) {
    String S=isr.readLine();
    if (S == null)     return;
    if (S.startsWith("EOP"))     return;
  }
}

private void purgeOne(){
synchronized (queue) {
    WeakKey key=(WeakKey)queue.poll();
    if (key != null) {
      super.remove(key.getReferenced());
    }
  }
}

private void checkAlterPeriodConverters() throws SecurityException {
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkPermission(new JodaTimePermission("ConverterManager.alterPeriodConverters"));
  }
}

public boolean equals(final ArtifactCoordinates obj){
  return this == obj || obj != null && groupId.equals(obj.groupId) && artifactId.equals(obj.artifactId) && version.equals(obj.version) && classifier.equals(obj.classifier);
}

public synchronized void add(double x,double y,double value){
  super.add(x,y);
  mValue.add(value);
  updateRange(value);
}

private void checkMatrixDimensions(Matrix B){
  if (B.m != m || B.n != n) {
    throw new IllegalArgumentException("Matrix dimensions must agree.");
  }
}

public void importFromChange(Change sourceChange){
  if (sourceChange.revision() > 0) {
    this.revisionId=new NumericLiteralImpl(sourceChange.revision());
  }
  if (sourceChange.timestamp() != null) {
    Date date=sourceChange.timestamp();
    Calendar c=Calendar.getInstance(TimeZone.getTimeZone("UTC"),Locale.ROOT);
    c.setTime(date);
    this.lastModified=new LiteralImpl(DatatypeConverter.printDate(c),XMLSchema.DATETIME);
  }
}

protected PrintWriter lineFileOut(Document doc){
  return lineFileOut;
}

@Override public Query newFuzzyQuery(String text,int fuzziness){
  if (settings.lowercaseExpandedTerms()) {
    text=text.toLowerCase(settings.locale());
  }
  BooleanQuery.Builder bq=new BooleanQuery.Builder();
  bq.setDisableCoord(true);
  for (  Map.Entry<String,Float> entry : weights.entrySet()) {
    try {
      Query q=new FuzzyQuery(new Term(entry.getKey(),text),fuzziness);
      q.setBoost(entry.getValue());
      bq.add(q,BooleanClause.Occur.SHOULD);
    }
 catch (    RuntimeException e) {
      rethrowUnlessLenient(e);
    }
  }
  return super.simplify(bq.build());
}

public CallChainInfo(SootMethod m,Stmt s,String type){
  this.type=type;
  this.link="as_call";
  this.method=m;
  this.stmt=s;
  calls=1;
  if (type.equals("syscall"))   syscalls=1;
}

public void startPlayback(){
  Log.d(TAG,">> startPlayback");
  if (null == mRecordFile) {
    Log.e(TAG,"no file to playback!");
    return;
  }
  mPlayer=new MediaPlayer();
  try {
    mPlayer.setDataSource(mRecordFile.getAbsolutePath());
    Log.d(TAG,"MediaPlayer.setDataSource(" + mRecordFile.getAbsolutePath() + ")");
    mPlayer.setOnCompletionListener(this);
    mPlayer.setOnErrorListener(this);
    mPlayer.prepare();
    Log.d(TAG,"MediaPlayer.prepare()");
    mPlayer.start();
  }
 catch (  IOException e) {
    Log.e(TAG,"Exception while trying to playback recording file: " + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalArgumentException e) {
    Log.e(TAG,"Exception while trying to playback recording file: " + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  SecurityException e) {
    Log.e(TAG,"Exception while trying to playback recording file: " + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
catch (  IllegalStateException e) {
    Log.e(TAG,"Exception while trying to playback recording file: " + e);
    setError(ERROR_PLAYER_INTERNAL);
    return;
  }
  setState(STATE_PLAYBACK);
  Log.d(TAG,"<< startPlayback");
}

public static final double sigma(double a){
  return 1.0 / (1.0 + Math.exp(-a));
}

private void deleteFilesInDir(File dir){
  for (  File child : dir.listFiles()) {
    child.delete();
  }
}

public static void notEmpty(String string,String msg){
  if (string == null || string.length() == 0)   throw new IllegalArgumentException(msg);
}

public static void resetContext(){
  contexts.set(null);
}

public static Object convertToParameterValues(Object object){
  Collection<Object> collection;
  if (object instanceof Object[]) {
    collection=Arrays.asList((Object[])object);
  }
 else   if (object instanceof Collection) {
    collection=(Collection<Object>)object;
  }
 else {
    LOGGER.warn("Unable to convert value, ignoring");
    return new Object[]{};
  }
  List<Object> s=new LinkedList<Object>();
  for (  Object o : collection) {
    Object converted=convertToParameterValue(o);
    if (converted instanceof Object[]) {
      s.addAll(Arrays.asList((Object[])converted));
    }
 else {
      s.add(converted);
    }
  }
  return s.toArray(new Object[s.size()]);
}

public boolean logoutUser(String username,HttpServletRequest req){
  return logoutUser(username,req,true,true);
}

public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){
  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);
  Operation networkInterfaceOperation=null;
  if (existingInterfaceLink == null) {
    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);
  }
 else {
    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);
  }
  return networkInterfaceOperation;
}

public CodeSourceFacade(final CodeSource codeSource){
  this.location=codeSource.getLocation();
  final Certificate[] certificates=codeSource.getCertificates();
  if (null == certificates || 0 == certificates.length) {
    LOGGER.warning(String.format("no certificate found for %s",codeSource));
    this.firstCertificate=null;
    return;
  }
  this.firstCertificate=(X509Certificate)certificates[0];
}

public static byte[] decode(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}

public JdpBroadcaster(InetAddress address,InetAddress srcAddress,int port,int ttl) throws IOException, JdpException {
  this.addr=address;
  this.port=port;
  ProtocolFamily family=(address instanceof Inet6Address) ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;
  channel=DatagramChannel.open(family);
  channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);
  channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL,ttl);
  if (srcAddress != null) {
    NetworkInterface interf=NetworkInterface.getByInetAddress(srcAddress);
    try {
      channel.bind(new InetSocketAddress(srcAddress,0));
    }
 catch (    UnsupportedAddressTypeException ex) {
      throw new JdpException("Unable to bind to source address");
    }
    channel.setOption(StandardSocketOptions.IP_MULTICAST_IF,interf);
  }
}

public void close() throws IOException {
  rrdFile.close();
}

public Vector rotateInDegree(double degree){
  return rotateInRadian(Math.toRadians(degree));
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public static String toString(final URI uri,final Charset encoding) throws IOException {
  return IOUtils.toString(uri.toURL(),Charsets.toCharset(encoding));
}

public void put(int fieldNumber,FieldData data){
  int i=binarySearch(fieldNumber);
  if (i >= 0) {
    mData[i]=data;
  }
 else {
    i=~i;
    if (i < mSize && mData[i] == DELETED) {
      mFieldNumbers[i]=fieldNumber;
      mData[i]=data;
      return;
    }
    if (mGarbage && mSize >= mFieldNumbers.length) {
      gc();
      i=~binarySearch(fieldNumber);
    }
    if (mSize >= mFieldNumbers.length) {
      int n=idealIntArraySize(mSize + 1);
      int[] nkeys=new int[n];
      FieldData[] nvalues=new FieldData[n];
      System.arraycopy(mFieldNumbers,0,nkeys,0,mFieldNumbers.length);
      System.arraycopy(mData,0,nvalues,0,mData.length);
      mFieldNumbers=nkeys;
      mData=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mFieldNumbers,i,mFieldNumbers,i + 1,mSize - i);
      System.arraycopy(mData,i,mData,i + 1,mSize - i);
    }
    mFieldNumbers[i]=fieldNumber;
    mData[i]=data;
    mSize++;
  }
}

void hideBorder(){
  Insets insets=getInsets();
  setBorder(BorderFactory.createEmptyBorder(insets.top,insets.left,insets.bottom,insets.right));
}

public void remove(String btxn){
synchronized (filterMap) {
    FilterProcessor oldfp=filterMap.get(btxn);
    if (oldfp != null) {
      globalExclusionFilters.remove(oldfp);
      btxnFilters.remove(oldfp);
    }
  }
}

public void add(double weight,double x,double y){
  observations.add(new WeightedObservedPoint(weight,x,y));
}

public boolean addTagId(final Long tagId){
  if (tagId != null && tagId > 0) {
    return tagIds.add(tagId);
  }
  return false;
}

public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{"SSLv3"});
}

@SuppressLint("NewApi") @TargetApi(Build.VERSION_CODES.KITKAT) private static Platform findPlatform(){
  try {
    try {
      Class.forName("com.android.org.conscrypt.OpenSSLSocketImpl");
    }
 catch (    ClassNotFoundException e) {
      Class.forName("org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl");
    }
    OptionalMethod<Socket> setUseSessionTickets=new OptionalMethod<>(null,"setUseSessionTickets",boolean.class);
    OptionalMethod<Socket> setHostname=new OptionalMethod<>(null,"setHostname",String.class);
    Method trafficStatsTagSocket=null;
    Method trafficStatsUntagSocket=null;
    OptionalMethod<Socket> getAlpnSelectedProtocol=null;
    OptionalMethod<Socket> setAlpnProtocols=null;
    try {
      Class<?> trafficStats=Class.forName("android.net.TrafficStats");
      trafficStatsTagSocket=trafficStats.getMethod("tagSocket",Socket.class);
      trafficStatsUntagSocket=trafficStats.getMethod("untagSocket",Socket.class);
      try {
        Class.forName("android.net.Network");
        getAlpnSelectedProtocol=new OptionalMethod<>(byte[].class,"getAlpnSelectedProtocol");
        setAlpnProtocols=new OptionalMethod<>(null,"setAlpnProtocols",byte[].class);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
 catch (    ClassNotFoundException|NoSuchMethodException ignored) {
    }
    return new Android(setUseSessionTickets,setHostname,trafficStatsTagSocket,trafficStatsUntagSocket,getAlpnSelectedProtocol,setAlpnProtocols);
  }
 catch (  ClassNotFoundException ignored) {
  }
  try {
    String negoClassName="org.eclipse.jetty.alpn.ALPN";
    Class<?> negoClass=Class.forName(negoClassName);
    Class<?> providerClass=Class.forName(negoClassName + "$Provider");
    Class<?> clientProviderClass=Class.forName(negoClassName + "$ClientProvider");
    Class<?> serverProviderClass=Class.forName(negoClassName + "$ServerProvider");
    Method putMethod=negoClass.getMethod("put",SSLSocket.class,providerClass);
    Method getMethod=negoClass.getMethod("get",SSLSocket.class);
    Method removeMethod=negoClass.getMethod("remove",SSLSocket.class);
    return new JdkWithJettyBootPlatform(putMethod,getMethod,removeMethod,clientProviderClass,serverProviderClass);
  }
 catch (  ClassNotFoundException|NoSuchMethodException ignored) {
  }
  return new Platform();
}

public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions){
  List<ExecutionEntity> orderedList=new ArrayList<ExecutionEntity>(executions.size());
  HashSet<String> previousIds=new HashSet<String>();
  for (  ExecutionEntity execution : executions) {
    if (execution.getParentId() == null) {
      orderedList.add(execution);
      previousIds.add(execution.getId());
    }
  }
  while (orderedList.size() < executions.size()) {
    for (    ExecutionEntity execution : executions) {
      if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {
        orderedList.add(execution);
        previousIds.add(execution.getId());
      }
    }
  }
  return orderedList;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public void initTKF91(){
  int iNumNodes=iParent.length;
  double iBeta[]=new double[iNumNodes];
  iB=new double[iNumNodes];
  iE=new double[iNumNodes];
  iH=new double[iNumNodes];
  iN=new double[iNumNodes];
  iInitial=1.0;
  for (int i=0; i < iNumNodes; i++) {
    if (i == iNumNodes - 1) {
      iBeta[i]=1.0 / iMu;
      iH[i]=0.0;
    }
 else {
      iBeta[i]=Math.exp((iLambda - iMu) * iTau[i]);
      iBeta[i]=(1.0 - iBeta[i]) / (iMu - iLambda * iBeta[i]);
      iH[i]=Math.exp(-iMu * iTau[i]) * (1.0 - iLambda * iBeta[i]);
    }
    iB[i]=iLambda * iBeta[i];
    iE[i]=iMu * iBeta[i];
    iN[i]=(1.0 - iMu * iBeta[i]) * (1.0 - iB[i]) - iH[i];
    iInitial*=(1.0 - iB[i]);
  }
}

public static String serializeExpression(Node s){
  if (s instanceof ASTTerm) {
    ASTTerm a=(ASTTerm)s;
    return (a.isNotFlag() ? "!" : "") + " " + a.getTerm();
  }
  String prefix="";
  String suffix="";
  String join=" ";
  if (s instanceof ASTExpression) {
    ASTExpression a=(ASTExpression)s;
    prefix=(a.isNotFlag() ? "!" : "") + "(";
    suffix=")";
    join=" " + a.getType() + " ";
  }
  List<String> children=new ArrayList<String>();
  for (int i=0; i < s.jjtGetNumChildren(); i++) {
    children.add(serializeExpression(s.jjtGetChild(i)));
  }
  return prefix + StringUtils.join(children,join) + suffix;
}

private void defineInternalFrameMenuButtons(UIDefaults d){
  String p="InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"";
  String c=PAINTER_PREFIX + "TitlePaneMenuButtonPainter";
  d.put(p + ".WindowNotFocused",new TitlePaneMenuButtonWindowNotFocusedState());
  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));
  d.put(p + "[Enabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED));
  d.put(p + "[Disabled].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_DISABLED));
  d.put(p + "[MouseOver].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER));
  d.put(p + "[Pressed].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED));
  d.put(p + "[Enabled+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_ENABLED_WINDOWNOTFOCUSED));
  d.put(p + "[MouseOver+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_MOUSEOVER_WINDOWNOTFOCUSED));
  d.put(p + "[Pressed+WindowNotFocused].iconPainter",new LazyPainter(c,TitlePaneMenuButtonPainter.Which.ICON_PRESSED_WINDOWNOTFOCUSED));
  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",19,18));
}

public static Workflow.Method restoreFromCloneMethod(URI storage,List<URI> clone,Boolean updateOpStatus,boolean isCG){
  return new Workflow.Method("restoreFromCloneStep",storage,clone,updateOpStatus,isCG);
}

@Override public synchronized void removeDataSourceListener(DataSourceListener dsl){
  m_dataSourceListeners.remove(dsl);
}

public String rightStr(String str,int length){
  return str.substring(Math.max(0,str.length() - length));
}

public void clearNameInUnoccupiedBlocks(){
  for (int i=0; i < mBlockEntries.size(); i++) {
    Block b=mBlockEntries.get(i);
    if (b.getState() == Block.UNOCCUPIED) {
      b.setValue("  ");
    }
  }
}

public static Object unserialize(Data data){
  try {
    Class clazz=(Class)Class.forName((String)data.get("class"));
    if (clazz.isEnum()) {
      return Enum.valueOf(clazz,data.get("value"));
    }
 else     if (clazz == Vector3D.class) {
      return new Vector3D(data.get("x"),data.get("y"),data.get("z"));
    }
 else     if (clazz == Vector2D.class) {
      return new Vector2D(data.get("x"),(double)data.get("y"));
    }
 else {
      return unserialize(clazz,data);
    }
  }
 catch (  Exception e) {
    throw new DataException(e);
  }
}

public static void onGridStop() throws InterruptedException {
synchronized (mux) {
    if (gridCnt == 0)     return;
    --gridCnt;
    Thread timer0=timer;
    if (gridCnt == 0 && timer0 != null) {
      timer=null;
      timer0.interrupt();
      timer0.join();
    }
  }
}

public void pushTemplateFolder(@NotNull String folderName) throws IOException {
  myLastTemplateFolders.push(resolveName(folderName));
}

public void printDepthFirst(){
  print(new DepthFirstEnumerator(_firstNode));
}

protected void drawHorizontalBezier(Canvas c,ILineDataSet dataSet){
  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());
  int entryCount=dataSet.getEntryCount();
  Entry entryFrom=dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX,DataSet.Rounding.DOWN);
  Entry entryTo=dataSet.getEntryForXIndex(mMaxX,DataSet.Rounding.UP);
  int diff=(entryFrom == entryTo) ? 1 : 0;
  int minx=Math.max(dataSet.getEntryIndex(entryFrom) - diff,0);
  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryIndex(entryTo) + 1),entryCount);
  float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX()));
  float phaseY=mAnimator.getPhaseY();
  cubicPath.reset();
  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);
  if (size - minx >= 2) {
    Entry prev=dataSet.getEntryForIndex(minx);
    Entry cur=prev;
    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);
    for (int j=minx + 1, count=Math.min(size,entryCount); j < count; j++) {
      prev=dataSet.getEntryForIndex(j - 1);
      cur=dataSet.getEntryForIndex(j);
      final float cpx=(float)(prev.getXIndex()) + (float)(cur.getXIndex() - prev.getXIndex()) / 2.0f;
      cubicPath.cubicTo(cpx,prev.getVal() * phaseY,cpx,cur.getVal() * phaseY,cur.getXIndex(),cur.getVal() * phaseY);
    }
  }
  if (dataSet.isDrawFilledEnabled()) {
    cubicFillPath.reset();
    cubicFillPath.addPath(cubicPath);
    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,minx,size);
  }
  mRenderPaint.setColor(dataSet.getColor());
  mRenderPaint.setStyle(Paint.Style.STROKE);
  trans.pathValueToPixel(cubicPath);
  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);
  mRenderPaint.setPathEffect(null);
}

public void addEvent(SimEvent newEvent){
  double eventTime=newEvent.eventTime();
  if (eventTime >= maxTime) {
    list.add(newEvent);
    maxTime=eventTime;
    return;
  }
  ListIterator<SimEvent> iterator=list.listIterator();
  SimEvent event;
  while (iterator.hasNext()) {
    event=iterator.next();
    if (event.eventTime() > eventTime) {
      iterator.previous();
      iterator.add(newEvent);
      return;
    }
  }
  list.add(newEvent);
}

public DbSchemaEjbGenerator(GeneratedTables genTables,SchemaElement schemaElement){
  this(genTables,schemaElement,CollectionType.COLLECTION,false,false,false);
}

@Override public void initialize(){
  board=null;
switch (simPaneCtrl.getParamValueIndex(PARAM_INIT_CONF)) {
case 0:
    board=new EightPuzzleBoard(new int[]{1,2,5,3,4,0,6,7,8});
  break;
case 1:
board=new EightPuzzleBoard(new int[]{1,4,2,7,5,8,3,0,6});
break;
case 2:
board=new EightPuzzleBoard(new int[]{0,8,7,6,5,4,3,2,1});
break;
case 3:
board=new EightPuzzleBoard(new int[]{0,1,2,3,4,5,6,7,8});
Random r=new Random(System.currentTimeMillis());
for (int i=0; i < 200; i++) {
switch (r.nextInt(4)) {
case 0:
board.moveGapUp();
break;
case 1:
board.moveGapDown();
break;
case 2:
board.moveGapLeft();
break;
case 3:
board.moveGapRight();
break;
}
}
}
stateViewCtrl.initialize(board);
}

protected abstract void onOpen(HTableInterface tbl,Scan scan) throws IOException ;

private static void addAbbreviation(String primitive,String abbreviation){
  abbreviationMap.put(primitive,abbreviation);
  reverseAbbreviationMap.put(abbreviation,primitive);
}

private void initTreeMap(){
  if (entityType == null) {
    entityType="Mouse";
  }
  if (entityType.equalsIgnoreCase("Circle")) {
    imageMap=RotatingEntityManager.getCircle();
  }
  if (entityType.equalsIgnoreCase("Mouse")) {
    imageMap=RotatingEntityManager.getMouse();
  }
 else   if (entityType.equalsIgnoreCase("Amy")) {
    imageMap=RotatingEntityManager.getRotatingTileset("amy",20);
  }
 else   if (entityType.equalsIgnoreCase("Arnold")) {
    imageMap=RotatingEntityManager.getRotatingTileset("arno",20);
  }
 else   if (entityType.equalsIgnoreCase("Boy")) {
    imageMap=RotatingEntityManager.getRotatingTileset("boy",20);
  }
 else   if (entityType.equalsIgnoreCase("Cow")) {
    imageMap=RotatingEntityManager.getRotatingTileset("cow",25);
  }
 else   if (entityType.equalsIgnoreCase("Girl")) {
    imageMap=RotatingEntityManager.getRotatingTileset("girl",20);
  }
 else   if (entityType.equalsIgnoreCase("Lion")) {
    imageMap=RotatingEntityManager.getRotatingTileset("lion",15);
  }
 else   if (entityType.equalsIgnoreCase("Susi")) {
    imageMap=RotatingEntityManager.getRotatingTileset("susi",20);
  }
 else   if (entityType.equalsIgnoreCase("Jake")) {
    imageMap=RotatingEntityManager.getRotatingTileset("jake",20);
  }
 else   if (entityType.equalsIgnoreCase("Steve")) {
    imageMap=RotatingEntityManager.getRotatingTileset("steve",20);
  }
  update();
}

public static File locateReplicatorHomeDir(){
  if (replicatorHomeDir == null) {
    String replicatorHome=System.getProperty(HOME_DIR);
    if (replicatorHome == null)     replicatorHome=System.getProperty("user.dir");
    replicatorHomeDir=new File(replicatorHome);
    if (!replicatorHomeDir.isDirectory()) {
      throw new ServerRuntimeException("Replicator home does not exist or is invalid: " + replicatorHomeDir);
    }
  }
  return replicatorHomeDir;
}

public StringData(String data){
  m_data=data;
}

void writeRepeatedSqr(DD xdd){
  if (xdd.ge(DD.valueOf(1)))   throw new IllegalArgumentException("Argument must be < 1");
  int count=0;
  while (xdd.doubleValue() > 1e-300) {
    count++;
    if (count == 100)     count=count;
    double x=xdd.doubleValue();
    DD xSqr=xdd.sqr();
    String s=xSqr.toString();
    DD xSqr2=DD.parse(s);
    xdd=xSqr;
  }
}

public java.lang.StringBuffer append(float f){
  internal.append(f);
  return this;
}

public static final void open(File file) throws NoSuchMethodException {
  if (Platform.isMacOSX()) {
    execArgs("open",file.getAbsolutePath());
  }
 else   if (Platform.isWindows()) {
    if (file.isDirectory()) {
      execArgs("explorer",file.getAbsolutePath());
    }
 else {
      execArgs("start",file.getAbsolutePath());
    }
  }
 else   if (Platform.isUnix() && hasUnixCommand("gnome-open")) {
    execArgs("gnome-open",file.toString());
  }
 else   if (Platform.isUnix() && hasUnixCommand("konqueror")) {
    execArgs("konqueror",file.toString());
  }
 else   if (Platform.isSolaris() && file.isDirectory()) {
    execArgs("/usr/dt/bin/dtfile","-folder",file.getAbsolutePath());
  }
 else {
    throw new NoSuchMethodException("Cannot open files on this platform");
  }
}

@Override public String testDestination(Location destination,Track track){
  String status=super.testDestination(destination,track);
  if (!status.equals(Track.OKAY)) {
    return status;
  }
  if (track == null) {
    return status;
  }
  return track.checkSchedule(this);
}

public void close() throws java.io.IOException {
  flushBuffer();
  m_os.close();
}

private static String[] norm(String path){
  String[] elements=path.split("[/\\\\]");
  ArrayList<String> stack=new ArrayList<String>();
  for (  String e : elements) {
    if (e.isEmpty() || e.equals("."))     continue;
    if (e.equals("..")) {
      if (!stack.isEmpty())       stack.remove(stack.size() - 1);
 else       return null;
      continue;
    }
    stack.add(e);
  }
  return stack.toArray(new String[stack.size()]);
}

static Random random(){
  if (null == LUCENE_TEST_CASE) {
    return null;
  }
 else {
    try {
      Method randomMethod=LUCENE_TEST_CASE.getMethod("random");
      return (Random)randomMethod.invoke(null);
    }
 catch (    Exception e) {
      throw new IllegalStateException("Unable to use reflection to invoke LuceneTestCase.random()",e);
    }
  }
}

protected String record(String deployment){
  deployments.add(deployment);
  return deployment;
}

protected void onBeforeStart(BundleContext ctx){
}

@Override public void onSuccess(DLSN value){
  if (value.getLogSegmentSequenceNo() != currentLogSegmentSeqNo) {
    LOG.error("Ledger Seq No: {}, Expected: {}",value.getLogSegmentSequenceNo(),currentLogSegmentSeqNo);
    errorsFound.set(true);
  }
  if (verifyEntryId && value.getEntryId() != currentEntryId) {
    LOG.error("EntryId: {}, Expected: {}",value.getEntryId(),currentEntryId);
    errorsFound.set(true);
  }
  syncLatch.countDown();
}

private static void shutDownMySQLAbandonedConnectionCleanupThread(ClassLoader classLoader){
  try {
    Class<?> mysqlCleanupThreadClass;
    try {
      mysqlCleanupThreadClass=classLoader.loadClass("com.mysql.jdbc.AbandonedConnectionCleanupThread");
    }
 catch (    ClassNotFoundException e) {
      LOG.trace("Failed to load MySQL abandoned connection cleanup thread class. Presuming DB App is " + "not being run with MySQL and ignoring",e);
      return;
    }
    Method shutdownMethod=mysqlCleanupThreadClass.getMethod("shutdown");
    shutdownMethod.invoke(null);
    LOG.debug("Successfully shutdown MySQL connection cleanup thread.");
  }
 catch (  Throwable e) {
    LOG.warn("Failed to shutdown MySQL connection cleanup thread. Ignoring.",e);
  }
}

public void write(byte[] buffer){
  if (isFinal) {
    log.warning("attempting to write to a final SpeechData object");
    return;
  }
  byte[] newData=new byte[data.length + buffer.length];
  System.arraycopy(data,0,newData,0,data.length);
  System.arraycopy(buffer,0,newData,data.length,buffer.length);
  data=newData;
}

public String parse(String controlTemplate,Context controlContext) throws Exception {
  this.controlContext=controlContext;
  fillContextDefaults(this.controlContext);
  fillContextProperties(this.controlContext);
  Template template=getTemplate(controlTemplate,inputEncoding);
  StringWriter sw=new StringWriter();
  template.merge(controlContext,sw);
  return sw.toString();
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

protected boolean onCreateCustomFromTag(XmlPullParser parser,T parent,final AttributeSet attrs) throws XmlPullParserException {
  return false;
}

public static long writeFile(String path,byte[] jpeg,ExifInterface exif) throws IOException {
  if (!createDirectoryIfNeeded(path)) {
    Log.e(TAG,"Failed to create parent directory for file: " + path);
    return -1;
  }
  if (exif != null) {
    exif.writeExif(jpeg,path);
    File f=new File(path);
    return f.length();
  }
 else {
    return writeFile(path,jpeg);
  }
}

private boolean checkForImageServers(){
  boolean imageServerExists=true;
  List<URI> imageServerURIList=_dbClient.queryByType(ComputeImageServer.class,true);
  ArrayList<URI> tempList=Lists.newArrayList(imageServerURIList.iterator());
  if (tempList.isEmpty()) {
    imageServerExists=false;
  }
  return imageServerExists;
}

final long now(){
  return System.nanoTime();
}

public void removeExtension(String ext){
synchronized (exts) {
    ext=ext.toLowerCase();
    exts.remove(ext);
  }
}

protected SuballocatedIntVector findNamespaceContext(int elementNodeIndex){
  if (null != m_namespaceDeclSetElements) {
    int wouldBeAt=findInSortedSuballocatedIntVector(m_namespaceDeclSetElements,elementNodeIndex);
    if (wouldBeAt >= 0)     return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);
    if (wouldBeAt == -1)     return null;
    wouldBeAt=-1 - wouldBeAt;
    int candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);
    int ancestor=_parent(elementNodeIndex);
    if (wouldBeAt == 0 && candidate < ancestor) {
      int rootHandle=getDocumentRoot(makeNodeHandle(elementNodeIndex));
      int rootID=makeNodeIdentity(rootHandle);
      int uppermostNSCandidateID;
      if (getNodeType(rootHandle) == DTM.DOCUMENT_NODE) {
        int ch=_firstch(rootID);
        uppermostNSCandidateID=(ch != DTM.NULL) ? ch : rootID;
      }
 else {
        uppermostNSCandidateID=rootID;
      }
      if (candidate == uppermostNSCandidateID) {
        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);
      }
    }
    while (wouldBeAt >= 0 && ancestor > 0) {
      if (candidate == ancestor) {
        return (SuballocatedIntVector)m_namespaceDeclSets.elementAt(wouldBeAt);
      }
 else       if (candidate < ancestor) {
        do {
          ancestor=_parent(ancestor);
        }
 while (candidate < ancestor);
      }
 else       if (wouldBeAt > 0) {
        candidate=m_namespaceDeclSetElements.elementAt(--wouldBeAt);
      }
 else       break;
    }
  }
  return null;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public void addObserver(Observer observer){
  if (observer == null) {
    throw new NullPointerException("observer == null");
  }
synchronized (this) {
    if (!observers.contains(observer))     observers.add(observer);
  }
}

public static void closeOutputStream(OutputStream stream,String tag){
  if (stream != null) {
    try {
      stream.close();
    }
 catch (    IOException e) {
      Log.e(tag,"Exception occured when closing ByteArrayOutputStream." + e);
    }
  }
}

protected double distance(int i,int k,int[] designations){
  return Math.sqrt(Math.max(selfK[i] - 2.0 / ownes[k] * evalSumK(i,k,designations) + meanSqrdNorms[k] * normConsts[k],0));
}

public StringBuffer format(Object pat,StringBuffer result,FieldPosition fpos){
  String pattern=processPattern((String)pat);
  int lastOffset=0;
  for (int i=0; i <= maxOffset; ++i) {
    int offidx=offsets[i];
    result.append(pattern.substring(lastOffset,offsets[i]));
    lastOffset=offidx;
    String key=arguments[i];
    String obj;
    if (key.length() > 0) {
      obj=formatObject(processKey(key));
    }
 else {
      result.append(this.ldel);
      result.append(this.rdel);
      continue;
    }
    if (obj == null) {
      String lessgreedy=ldel + key;
      int fromright=lessgreedy.lastIndexOf(ldel);
      if (fromright > 0) {
        String newkey=lessgreedy.substring(fromright + ldel.length());
        String newsubst=formatObject(processKey(newkey));
        if (newsubst != null) {
          obj=lessgreedy.substring(0,fromright) + newsubst;
        }
      }
    }
    if (obj == null) {
      if (throwex) {
        throw new IllegalArgumentException("ObjectForKey");
      }
 else {
        obj=ldel + key + rdel;
      }
    }
    result.append(obj);
  }
  result.append(pattern.substring(lastOffset,pattern.length()));
  return result;
}

public void add(String keyword,byte id){
  int key=getStringMapKey(keyword);
  map[key]=new Keyword(keyword.toCharArray(),id,map[key]);
}

void release(Object owner,Field field){
  Map<String,Integer> fields=owners.get(owner);
  if (fields != null) {
    release();
    Integer count=fields.get(field.toGenericString());
    if (--count > 0) {
      fields.put(field.toGenericString(),count);
    }
 else {
      fields.remove(field.toGenericString());
    }
  }
  if (fields != null && fields.isEmpty()) {
    owners.remove(owner);
  }
}

public static List<DashboardDto> transformToDto(List<Dashboard> dashboards){
  if (dashboards == null) {
    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);
  }
  List<DashboardDto> result=new ArrayList<DashboardDto>();
  for (  Dashboard dashboard : dashboards) {
    result.add(transformToDto(dashboard));
  }
  return result;
}

static Executor screenExecutor(Executor e){
  if (!useCommonPool && e == ForkJoinPool.commonPool())   return asyncPool;
  if (e == null)   throw new NullPointerException();
  return e;
}

public void addGroupPropertiesListener(GroupPropertiesListener groupPropertiesListener){
  groupPropertiesListeners.add(groupPropertiesListener);
}

public static void editGlobalFunctionComment(final AbstractSQLProvider provider,final INaviFunction function,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {
  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);
}

public void load(Element element,Object o){
  log.error("load(Element, Object) called unexpectedly");
}

public synchronized void clearSessions(Context context,Boolean clearCredentials){
synchronized (instance) {
    while (mMXSessions.size() > 0) {
      clearSession(context,mMXSessions.get(0),clearCredentials);
    }
  }
}

public boolean doesEntryExists(SSOToken token,String entryDN){
  try {
    PersistentObject po=UMSObject.getObject(internalToken,new Guid(entryDN));
  }
 catch (  UMSException ue) {
    if (entryDN.indexOf("agents") < 0) {
      if (debug.messageEnabled()) {
        debug.message("DirectoryServicesImpl.doesProfileExist(): + " + "Exception caught: ",ue);
      }
    }
    return false;
  }
  return true;
}

private static char[] yy_unpack_cmap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 86) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

private static native void initIDs();

private static int hashWrapperName(String xn){
  if (xn.length() < 3) {
    return 0;
  }
  return (3 * xn.charAt(1) + xn.charAt(2)) % 16;
}

@Override public final void startElement(final String ns,final String lName,final String qName,final Attributes list) throws SAXException {
  String name=lName == null || lName.length() == 0 ? qName : lName;
  StringBuffer sb=new StringBuffer(match);
  if (match.length() > 0) {
    sb.append('/');
  }
  sb.append(name);
  match=sb.toString();
  Rule r=(Rule)RULES.match(match);
  if (r != null) {
    r.begin(name,list);
  }
}

public boolean isString(String key){
  Object val=get(key);
  return val instanceof String;
}

private void createPRWithTotalNumPropSetList(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy){
  Iterator nodeIterator=vmList.iterator();
  while (nodeIterator.hasNext()) {
    VM vm=(VM)nodeIterator.next();
    vm.invoke(createMultiplePRWithTotalNumBucketPropSet(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,11));
  }
}

public Zdiagmat(Zmat A,int k) throws JampackException {
  Parameters.BaseIndexNotChangeable=true;
  basex=Parameters.BaseIndex;
  if (k >= 0) {
    if (k >= A.ncol) {
      throw new JampackException("Diagonal out of range.");
    }
    order=Math.min(A.nrow,A.ncol - k);
    re=new double[order];
    im=new double[order];
    for (int i=0; i < order; i++) {
      re[i]=A.re[i][i + k];
      im[i]=A.im[i][i + k];
    }
  }
 else {
    k=-k;
    if (k >= A.nrow) {
      throw new JampackException("Diagonal out of range.");
    }
    order=Math.min(A.nrow - k,A.ncol);
    re=new double[order];
    im=new double[order];
    for (int i=0; i < order; i++) {
      re[i]=A.re[i + k][i];
      im[i]=A.im[i + k][i];
    }
  }
  getProperties();
}

protected void checkAntVersion(Hashtable h){
  if (null == h)   h=new Hashtable();
  try {
    final String ANT_VERSION_CLASS="org.apache.tools.ant.Main";
    final String ANT_VERSION_METHOD="getAntVersion";
    final Class noArgs[]=new Class[0];
    Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true);
    Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs);
    Object returnValue=method.invoke(null,new Object[0]);
    h.put(VERSION + "ant",(String)returnValue);
  }
 catch (  Exception e) {
    h.put(VERSION + "ant",CLASS_NOTPRESENT);
  }
}

public void buildNetwork(){
  Neuron firstNeuron=new Neuron(network,DEFAULT_NEURON_TYPE);
  List<Neuron> currentLayer=new ArrayList<Neuron>();
  firstNeuron.setPosition(initialPosition);
  currentLayer.add(firstNeuron);
  int numNeuronsLastLayer=(int)Math.pow(numBrachesPerNeuron,numLayers);
  double totalSpace=numNeuronsLastLayer * horizontalSpacing;
  for (int layerIndex=1; layerIndex <= numLayers; layerIndex++) {
    List<Neuron> tempList=new ArrayList<Neuron>();
    double layerSpacing=totalSpace / (int)Math.pow(numBrachesPerNeuron,layerIndex);
    double branchWidth=layerSpacing * (numBrachesPerNeuron - 1);
    for (    Neuron baseNeuron : currentLayer) {
      network.addNeuron(baseNeuron);
      double initialXOffset=branchWidth / 2;
      for (int j=0; j < numBrachesPerNeuron; j++) {
        Neuron targetNeuron=new Neuron(network,new LinearRule());
        targetNeuron.setLocation(baseNeuron.getX() - initialXOffset + (j * layerSpacing),initialPosition.y - (layerIndex * verticalSpacing));
        tempList.add(targetNeuron);
        network.addNeuron(targetNeuron);
        targetNeuron.setUpdatePriority(layerIndex);
        Synapse synapse=new Synapse(network,baseNeuron,targetNeuron,new StaticSynapseRule());
        network.addSynapse(synapse);
      }
    }
    currentLayer=tempList;
  }
}

private static boolean areEqual(int fromIndex,CharSequence left,CharSequence right){
  if (left == right)   return true;
  if ((left == null) || (right == null))   return false;
  int n=left.length();
  if (right.length() != n)   return false;
  for (int i=n; i > fromIndex; ) {
    if (Character.toUpperCase(left.charAt(--i)) != Character.toUpperCase(right.charAt(i)))     return false;
  }
  return true;
}

public void testCase12(){
  byte bBytes[]={15,48,-29,7,98,-1,39,-128};
  int bSign=-1;
  byte rBytes[]={0};
  BigInteger aNumber=BigInteger.ZERO;
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.divide(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,result.signum());
}

public Enumeration productions(){
  return _productions.elements();
}

public void addTightSourceNode(ASTNode reference){
  fTightSourceRangeNodes.add(reference);
  List<StructuralPropertyDescriptor> properties=reference.structuralPropertiesForType();
  for (Iterator<StructuralPropertyDescriptor> iterator=properties.iterator(); iterator.hasNext(); ) {
    StructuralPropertyDescriptor descriptor=iterator.next();
    if (descriptor.isChildProperty()) {
      ASTNode child=(ASTNode)reference.getStructuralProperty(descriptor);
      if (child != null && isExtending(child,reference)) {
        addTightSourceNode(child);
      }
    }
 else     if (descriptor.isChildListProperty()) {
      List<? extends ASTNode> children=(List<? extends ASTNode>)reference.getStructuralProperty(descriptor);
      for (Iterator<? extends ASTNode> iterator2=children.iterator(); iterator2.hasNext(); ) {
        ASTNode child=iterator2.next();
        if (isExtending(child,reference)) {
          addTightSourceNode(child);
        }
      }
    }
  }
}

protected boolean isEventDisabled(XEvent e){
switch (e.get_type()) {
case XConstants.ConfigureNotify:
    return true;
case XConstants.EnterNotify:
case XConstants.LeaveNotify:
  return true;
default :
return super.isEventDisabled(e);
}
}

public DJarInfo(JFrame parent) throws IOException {
  this(parent,res.getString("DJarInfo.Title"),ModalityType.DOCUMENT_MODAL);
}

protected void transformPointArrayNoTouch(float[] pts){
  mMatrixValueToPx.mapPoints(pts);
  mMatrixOffset.mapPoints(pts);
}

private void convertEscapedFunction(final StringBuilder target,final CharSequence escapedFunction) throws FBSQLParseException {
  final String templateResult=FBEscapedFunctionHelper.convertTemplate(escapedFunction.toString(),mode);
  target.append(templateResult != null ? templateResult : escapedFunction);
}

@Override public final String toString(){
  if (stringRep == null) {
    StringBuilder buffer=new StringBuilder();
    buffer.append(this.name);
    buffer.append(':');
    buffer.append(Integer.toString(this.defaultPort));
    stringRep=buffer.toString();
  }
  return stringRep;
}

public void addListener(ImsSessionListener listener){
  mListeners.add(listener);
}

public int checkBookiesUp(int count,int timeout) throws Exception {
  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);
  try {
    int mostRecentSize=0;
    for (int i=0; i < timeout; i++) {
      try {
        List<String> children=zkc.getChildren("/ledgers/available",false);
        children.remove("readonly");
        mostRecentSize=children.size();
        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {
          LOG.info("Found " + mostRecentSize + " bookies up, "+ "waiting for "+ count);
          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {
            for (            String child : children) {
              LOG.info(" server: " + child);
            }
          }
        }
        if (mostRecentSize == count) {
          break;
        }
      }
 catch (      KeeperException e) {
      }
      Thread.sleep(1000);
    }
    return mostRecentSize;
  }
  finally {
    zkc.close();
  }
}

public static IPath stampToPath(final long stamp){
  fgCalendar.setTimeInMillis(stamp);
  final StringBuffer buffer=new StringBuffer(256);
  buffer.append(fgCalendar.get(Calendar.YEAR));
  buffer.append(IPath.SEPARATOR);
  buffer.append(fgCalendar.get(Calendar.MONTH) + 1);
  buffer.append(IPath.SEPARATOR);
  buffer.append(fgCalendar.get(Calendar.WEEK_OF_YEAR));
  return new Path(buffer.toString());
}

private void addPingTimeData(long sample){
  lastPingTimesLock.lock();
  try {
    if (lastPingTimes == null) {
      lastPingTimes=new long[PING_MOVING_AVERAGE_WINDOW];
      Arrays.fill(lastPingTimes,sample);
    }
 else {
      System.arraycopy(lastPingTimes,1,lastPingTimes,0,lastPingTimes.length - 1);
      lastPingTimes[lastPingTimes.length - 1]=sample;
    }
  }
  finally {
    lastPingTimesLock.unlock();
  }
}

public void printUserMessage(UserMessage message){
  User user=message.user;
  boolean ignored=message.ignored_compact;
  if (ignored) {
    printCompact("IGNORED",user);
    return;
  }
  Color color=message.color;
  boolean action=message.action;
  String text=message.text;
  TagEmotes emotes=message.emotes;
  boolean highlighted=message.highlighted;
  if (message.whisper && message.action) {
    color=StyleConstants.getForeground(styles.info());
    highlighted=true;
  }
  closeCompactMode();
  MutableAttributeSet style;
  if (highlighted) {
    style=styles.highlight(color);
  }
 else {
    style=styles.standard();
  }
  print(getTimePrefix(),style);
  printUser(user,action,message.whisper,message.id);
  if (!highlighted && action && styles.actionColored()) {
    style=styles.standard(user.getDisplayColor());
  }
  printSpecials(text,user,style,emotes,false,message.bits > 0);
  printNewline();
}

public boolean connectImpl(String address,int port) throws IOException {
  _socketTimeout=600000;
  _nativeFd=-1;
  _isClosed.set(false);
synchronized (_writeLock) {
    boolean isConnect=nativeConnect(_socketFd,address,port);
    return isConnect;
  }
}

public static boolean isAccessModifier(String str){
  return str.equals("static") || str.equals("public") || str.equals("protected")|| str.equals("private")|| str.equals("final")|| str.equals("transient");
}

protected void handleAppendRequestFailure(MemberState member,AppendRequest request,Throwable error){
  failAttempt(member,error);
}

private static SizePair selectSizePair(Camera camera,int desiredWidth,int desiredHeight){
  List<SizePair> validPreviewSizes=generateValidPreviewSizeList(camera);
  SizePair selectedPair=null;
  int minDiff=Integer.MAX_VALUE;
  for (  SizePair sizePair : validPreviewSizes) {
    Size size=sizePair.previewSize();
    int diff=Math.abs(size.getWidth() - desiredWidth) + Math.abs(size.getHeight() - desiredHeight);
    if (diff < minDiff) {
      selectedPair=sizePair;
      minDiff=diff;
    }
  }
  return selectedPair;
}

public List<AddressItem> loadAllDeepFromCursor(Cursor cursor){
  int count=cursor.getCount();
  List<AddressItem> list=new ArrayList<AddressItem>(count);
  if (cursor.moveToFirst()) {
    if (identityScope != null) {
      identityScope.lock();
      identityScope.reserveRoom(count);
    }
    try {
      do {
        list.add(loadCurrentDeep(cursor,false));
      }
 while (cursor.moveToNext());
    }
  finally {
      if (identityScope != null) {
        identityScope.unlock();
      }
    }
  }
  return list;
}

public static String decode(byte[] utf8) throws CharacterCodingException {
  return decode(ByteBuffer.wrap(utf8),true);
}

private Map<String,String> attributesToLowerCase(){
  Map<String,String> lowerCaseAttributes=new LinkedHashMap<String,String>();
  for (  String key : attributes.keySet()) {
    lowerCaseAttributes.put(key.toLowerCase(),attributes.get(key));
  }
  return lowerCaseAttributes;
}

protected final void acceptAnnotations(final MethodVisitor mv){
  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();
  for (int i=0; i < n; ++i) {
    TypeAnnotationNode an=visibleTypeAnnotations.get(i);
    an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,true));
  }
  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();
  for (int i=0; i < n; ++i) {
    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);
    an.accept(mv.visitInsnAnnotation(an.typeRef,an.typePath,an.desc,false));
  }
}

public static <T>List<T> toList(T obj1,T obj2){
  List<T> list=new LinkedList<T>();
  list.add(obj1);
  list.add(obj2);
  return list;
}

public byte[] readNextPart() throws JPlagException {
  if (remainingBytes == 0) {
    throw new JPlagException("downloadException","There's nothing left to be downloaded!","");
  }
  try {
    FileInputStream in=new FileInputStream(file);
    in.skip(filesize - remainingBytes);
    int partsize=remainingBytes;
    if (partsize > 81920)     partsize=81920;
    byte[] data=new byte[partsize];
    in.read(data);
    in.close();
    remainingBytes-=partsize;
    return data;
  }
 catch (  IOException e) {
    e.printStackTrace();
    throw new JPlagException("downloadException","Unable to read" + " submission part from server!","");
  }
}

public boolean isMultiLineTabbed(){
  return multiLineTab;
}

protected void computeParameters(){
  if (m_SumOfWeights > 0) {
    m_Mean=m_SumOfValues / m_SumOfWeights;
    double stdDev=Math.sqrt(Math.abs(m_SumOfValuesSq - m_Mean * m_SumOfValues) / m_SumOfWeights);
    if (stdDev > 1e-10) {
      m_StandardDev=Math.max(m_Precision / (2 * 3),stdDev);
    }
  }
}

public String translateDataType(String sourceVendorName,String targetVendorName,String dataType,int size,int scale){
  return getDataType(targetVendorName,getDataTypeID(sourceVendorName,dataType),size,scale);
}

public static List<ShapeRecord> rectangle(double startx,double starty,double width,double height,double radiusX,double radiusY,double topLeftRadiusX,double topLeftRadiusY,double topRightRadiusX,double topRightRadiusY,double bottomLeftRadiusX,double bottomLeftRadiusY,double bottomRightRadiusX,double bottomRightRadiusY){
  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();
  if (radiusX == 0.0) {
    radiusY=radiusX=0;
  }
 else   if (radiusY == 0.0) {
    radiusY=radiusX;
  }
  if (radiusX > width / 2.0)   radiusX=width / 2.0;
  if (radiusY > height / 2.0)   radiusY=height / 2.0;
  double[] topLeftRadius=getCornerRadius(topLeftRadiusX,topLeftRadiusY,radiusX,radiusY,width,height);
  topLeftRadiusX=topLeftRadius[0];
  topLeftRadiusY=topLeftRadius[1];
  double[] topRightRadius=getCornerRadius(topRightRadiusX,topRightRadiusY,radiusX,radiusY,width,height);
  topRightRadiusX=topRightRadius[0];
  topRightRadiusY=topRightRadius[1];
  double[] bottomLeftRadius=getCornerRadius(bottomLeftRadiusX,bottomLeftRadiusY,radiusX,radiusY,width,height);
  bottomLeftRadiusX=bottomLeftRadius[0];
  bottomLeftRadiusY=bottomLeftRadius[1];
  double[] bottomRightRadius=getCornerRadius(bottomRightRadiusX,bottomRightRadiusY,radiusX,radiusY,width,height);
  bottomRightRadiusX=bottomRightRadius[0];
  bottomRightRadiusY=bottomRightRadius[1];
  double c0=0.923879532511;
  double c1=0.382683432365;
  double c3=0.707106781187;
  double rx=bottomRightRadiusX;
  double ry=bottomRightRadiusY;
  double tx=rx / 0.923879532511;
  double ty=ry / 0.923879532511;
  double dx, currentx;
  double dy, currenty;
  dx=startx + width - rx;
  dy=starty + height - ry;
  shapeRecords.add(move((dx + rx),dy));
  currentx=(dx + rx);
  currenty=dy;
  if (bottomRightRadiusX != 0.0) {
    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c0 * tx),(dy + c1 * ty),(dx + c3 * rx),(dy + c3 * ry)));
    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy + c3 * ry),(dx + c1 * tx),(dy + c0 * ty),dx,(dy + ry)));
    currentx=dx;
    currenty=dy + ry;
  }
  rx=bottomLeftRadiusX;
  ry=bottomLeftRadiusY;
  tx=rx / 0.923879532511;
  ty=ry / 0.923879532511;
  dx=startx + rx;
  dy=starty + height - ry;
  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy + ry)));
  currentx=dx;
  currenty=dy + ry;
  if (bottomLeftRadiusX != 0.0) {
    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c1 * tx),(dy + c0 * ty),(dx - c3 * rx),(dy + c3 * ry)));
    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy + c3 * ry),(dx - c0 * tx),(dy + c1 * ty),(dx - rx),dy));
    currentx=dx - rx;
    currenty=dy;
  }
  rx=topLeftRadiusX;
  ry=topLeftRadiusY;
  tx=rx / 0.923879532511;
  ty=ry / 0.923879532511;
  dx=startx + rx;
  dy=starty + ry;
  shapeRecords.addAll(straightEdge(currentx,currenty,(dx - rx),dy));
  currentx=dx - rx;
  currenty=dy;
  if (topLeftRadiusX != 0.0) {
    shapeRecords.add(curvedEdge(currentx,currenty,(dx - c0 * tx),(dy - c1 * ty),(dx - c3 * rx),(dy - c3 * ry)));
    shapeRecords.add(curvedEdge((dx - c3 * rx),(dy - c3 * ry),(dx - c1 * tx),(dy - c0 * ty),dx,(dy - ry)));
    currentx=dx;
    currenty=dy - ry;
  }
  rx=topRightRadiusX;
  ry=topRightRadiusY;
  tx=rx / 0.923879532511;
  ty=ry / 0.923879532511;
  dx=startx + width - rx;
  dy=starty + ry;
  shapeRecords.addAll(straightEdge(currentx,currenty,dx,(dy - ry)));
  currentx=dx;
  currenty=dy - ry;
  if (topRightRadiusX != 0.0) {
    shapeRecords.add(curvedEdge(currentx,currenty,(dx + c1 * tx),(dy - c0 * ty),(dx + c3 * rx),(dy - c3 * ry)));
    shapeRecords.add(curvedEdge((dx + c3 * rx),(dy - c3 * ry),(dx + c0 * tx),(dy - c1 * ty),(dx + rx),dy));
    currentx=(dx + rx);
    currenty=dy;
  }
  rx=bottomRightRadiusX;
  ry=bottomRightRadiusY;
  tx=rx / 0.923879532511;
  ty=ry / 0.923879532511;
  dx=startx + width - rx;
  dy=starty + height - ry;
  shapeRecords.addAll(straightEdge(currentx,currenty,(dx + rx),dy));
  return shapeRecords;
}

public static int findGlobalValleyLocation(double[] data){
  double min=Double.NaN;
  int imin=-1;
  for (int i=0; i < data.length; i++) {
    if (Double.isNaN(data[i]))     continue;
    if (Double.isNaN(min) || data[i] < min) {
      min=data[i];
      imin=i;
    }
  }
  return imin;
}

public void delete() throws IOException {
  close();
  deleteContents(directory);
}

protected void moveDownSelected(){
  int selectedIndex=table.getSelectedRow();
  if (selectedIndex > -1) {
    int index=data.moveDown(indexToModel(selectedIndex));
    setRowSelected(indexToView(index));
  }
}

JarWithFile(PathImpl backing){
  super(backing);
}

public List<Runnable> shutdownNow(){
  logger.info("Shutting down scanner immediately.");
  return executor.shutdownNow();
}

public static List<String> toRelativePaths(@NotNull VirtualFile root,@NotNull final Collection<FilePath> filePaths){
  ArrayList<String> rc=new ArrayList<String>(filePaths.size());
  for (  FilePath path : filePaths) {
    rc.add(relativePath(root,path));
  }
  return rc;
}

private void handleUnlockOrInstall(){
  if (isFinishing()) {
    return;
  }
switch (mKeyStore.state()) {
case UNINITIALIZED:
{
      ensureKeyGuard();
      return;
    }
case LOCKED:
{
    new UnlockDialog();
    return;
  }
case UNLOCKED:
{
  if (!checkKeyGuardQuality()) {
    new ConfigureKeyGuardDialog();
    return;
  }
  installIfAvailable();
  finish();
  return;
}
}
}

private void stopDrag(MotionEvent ev){
  mTouchMode=TOUCH_MODE_IDLE;
  final boolean commitChange=ev.getAction() == MotionEvent.ACTION_UP && isEnabled();
  final boolean oldState=isChecked();
  final boolean newState;
  if (commitChange) {
    mVelocityTracker.computeCurrentVelocity(1000);
    final float xvel=mVelocityTracker.getXVelocity();
    if (Math.abs(xvel) > mMinFlingVelocity) {
      newState=ViewUtils.isLayoutRtl(this) ? (xvel < 0) : (xvel > 0);
    }
 else {
      newState=getTargetCheckedState();
    }
  }
 else {
    newState=oldState;
  }
  if (newState != oldState) {
    playSoundEffect(SoundEffectConstants.CLICK);
  }
  setChecked(newState);
  cancelSuperTouch(ev);
}

private void offsetStartTimeIfNecessary(Time startTime,Time endTime,String rrule,CalendarEventModel model){
  if (rrule == null || rrule.isEmpty()) {
    return;
  }
  mEventRecurrence.parse(rrule);
  if (mEventRecurrence.freq != EventRecurrence.WEEKLY) {
    return;
  }
  if (mEventRecurrence.byday.length > mEventRecurrence.bydayCount) {
    return;
  }
  int closestWeekday=Integer.MAX_VALUE;
  int weekstart=EventRecurrence.day2TimeDay(mEventRecurrence.wkst);
  int startDay=startTime.weekDay;
  for (int i=0; i < mEventRecurrence.bydayCount; i++) {
    int day=EventRecurrence.day2TimeDay(mEventRecurrence.byday[i]);
    if (day == startDay) {
      return;
    }
    if (day < weekstart) {
      day+=7;
    }
    if (day > startDay && (day < closestWeekday || closestWeekday < startDay)) {
      closestWeekday=day;
    }
    if (closestWeekday == Integer.MAX_VALUE || closestWeekday < startDay) {
      if (day < closestWeekday) {
        closestWeekday=day;
      }
    }
  }
  if (closestWeekday < startDay) {
    closestWeekday+=7;
  }
  int daysOffset=closestWeekday - startDay;
  startTime.monthDay+=daysOffset;
  endTime.monthDay+=daysOffset;
  long newStartTime=startTime.normalize(true);
  long newEndTime=endTime.normalize(true);
  model.mStart=newStartTime;
  model.mEnd=newEndTime;
}

public Vector3 ceil(){
  return new Vector3(Math.ceil(x),Math.ceil(y),Math.ceil(z));
}

public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){
  String subSignature=method.getSubSignature();
  if (subSignature.equals("java.lang.Throwable fillInStackTrace()")) {
    java_lang_Throwable_fillInStackTrace(method,thisVar,returnVar,params);
    return;
  }
 else {
    defaultMethod(method,thisVar,returnVar,params);
    return;
  }
}

private void cleanUpFrontier(){
  while (!frontier.isEmpty() && isExplored(frontier.element()))   frontier.remove();
}

public void addChangingListener(OnWheelChangedListener listener){
  changingListeners.add(listener);
}

private void parseAttributes(TypedArray a){
  barWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwBarWidth,barWidth);
  rimWidth=(int)a.getDimension(R.styleable.ProgressWheel_pwRimWidth,rimWidth);
  spinSpeed=(int)a.getDimension(R.styleable.ProgressWheel_pwSpinSpeed,spinSpeed);
  barLength=(int)a.getDimension(R.styleable.ProgressWheel_pwBarLength,barLength);
  delayMillis=a.getInteger(R.styleable.ProgressWheel_pwDelayMillis,delayMillis);
  if (delayMillis < 0) {
    delayMillis=10;
  }
  if (a.hasValue(R.styleable.ProgressWheel_pwText)) {
    setText(a.getString(R.styleable.ProgressWheel_pwText));
  }
  barColor=a.getColor(R.styleable.ProgressWheel_pwBarColor,barColor);
  textColor=a.getColor(R.styleable.ProgressWheel_pwTextColor,textColor);
  rimColor=a.getColor(R.styleable.ProgressWheel_pwRimColor,rimColor);
  circleColor=a.getColor(R.styleable.ProgressWheel_pwCircleColor,circleColor);
  contourColor=a.getColor(R.styleable.ProgressWheel_pwContourColor,contourColor);
  textSize=(int)a.getDimension(R.styleable.ProgressWheel_pwTextSize,textSize);
  contourSize=a.getDimension(R.styleable.ProgressWheel_pwContourSize,contourSize);
  a.recycle();
}

public static byte[] concatenate(byte[] a,byte[] b){
  byte[] output=new byte[a.length + b.length];
  System.arraycopy(a,0,output,0,a.length);
  System.arraycopy(b,0,output,a.length,b.length);
  return output;
}

public final AssertSubscriber<T> assertTerminated(){
  if (cdl.getCount() != 0) {
    throw new AssertionError("Not terminated",null);
  }
  return this;
}

protected static void assertArgument(final boolean validArg,final String message,final Object... args){
  if (!validArg) {
    throw new IllegalArgumentException(String.format(message,args));
  }
}

public static boolean isBeforeToday(Calendar _calendar){
  return _calendar.before(Calendar.getInstance());
}

public static ViewItemGroup buildLoginUI(ModelApplication modelApp,Activity activity){
  ViewItemGroup viewItems=new ViewItemGroup(activity);
  TextView usernameText=new TextView(activity);
  usernameText.setText(R.string.username);
  viewItems.addView(usernameText);
  ViewItemFactory viewItemFactory=ViewItemFactory.instance();
  ViewItem usernameItem=viewItemFactory.create(LoginViewID.USERNAME,viewItemFactory.TEXT_DATATYPE_DB_ID,activity);
  viewItems.addViewItem(usernameItem,new OmniText(modelApp.getUsername()));
  TextView passwordText=new TextView(activity);
  passwordText.setText(R.string.password);
  viewItems.addView(passwordText);
  ViewItem passwordItem=viewItemFactory.create(LoginViewID.PASSWORD,viewItemFactory.PASSWORD_INPUT_DATATYPE_DB_ID,activity);
  viewItems.addViewItem(passwordItem,new OmniPasswordInput(modelApp.getPassword()));
  return viewItems;
}

public void unMapVolumeFromSCSIInitiator(String volumeId,String initiatorId) throws Exception {
  String uri=ScaleIOConstants.getUnmapVolumeToScsiInitiatorURI(volumeId);
  ScaleIOUnmapVolumeToScsiInitiator unmapParm=new ScaleIOUnmapVolumeToScsiInitiator();
  unmapParm.setScsiInitiatorId(initiatorId);
  post(URI.create(uri),getJsonForEntity(unmapParm));
}

public Collection<T> asCollection(){
  return this.list;
}

private static void addQuarterArc(Path2D.Float path,float x1,float y1,float x2,float y2,float curvature,boolean verticalStart){
  boolean down=y1 < y2;
  boolean left=x1 > x2;
  float cx1=0;
  float cy1=0;
  float cx2=0;
  float cy2=0;
  if (verticalStart) {
    cx1=x1;
    cy2=y2;
    if (left) {
      cx2=x1 - curvature;
    }
 else {
      cx2=x1 + curvature;
    }
    if (down) {
      cy1=y2 - curvature;
    }
 else {
      cy1=y2 + curvature;
    }
  }
 else {
    cx2=x2;
    cy1=y1;
    if (left) {
      cx1=x2 + curvature;
    }
 else {
      cx1=x2 - curvature;
    }
    if (down) {
      cy2=y1 + curvature;
    }
 else {
      cy2=y1 - curvature;
    }
  }
  path.curveTo(cx1,cy1,cx2,cy2,x2,y2);
}

@Override public void parse(String content,Node block){
  this.block=block;
  this.input=content.trim();
  this.index=0;
  this.lastDelimiter=null;
  this.lastBracket=null;
  boolean moreToParse;
  do {
    moreToParse=parseInline();
  }
 while (moreToParse);
  processDelimiters(null);
  mergeTextNodes(block.getFirstChild(),block.getLastChild());
}

public static void random(byte[] b,int offset,int length){
  checkPositionIndex(offset,b.length,"offset");
  checkArgument(length > 0,"length must be greater than 0");
  checkPositionIndex(offset + length,b.length,"offset + length");
  byte[] buf=new byte[length];
  RNG.nextBytes(buf);
  System.arraycopy(buf,0,b,offset,length);
}

public void removeAllScanningCallbacks(){
  scanningCallbacks.clear();
}

public int read(byte[] buf,int off,int len) throws TTransportException {
  if (inputStream_ == null) {
    throw new TTransportException(TTransportException.NOT_OPEN,"Cannot read from null inputStream");
  }
  int bytesRead;
  try {
    bytesRead=inputStream_.read(buf,off,len);
  }
 catch (  IOException iox) {
    throw new TTransportException(TTransportException.UNKNOWN,iox);
  }
  if (bytesRead < 0) {
    throw new TTransportException(TTransportException.END_OF_FILE);
  }
  return bytesRead;
}

public void handleManagerCreation() throws ManagementException {
  if (!isServiceInitialised("handleManagerCreation")) {
    return;
  }
  ObjectName managerMBeanName=MBeanJMXAdapter.getManagerName();
  ManagerMBeanBridge bridge=new ManagerMBeanBridge(service);
  ManagerMXBean bean=new ManagerMBean(bridge);
  service.registerInternalMBean(bean,managerMBeanName);
}

@SuppressWarnings("unused") private boolean checkSetShape(Shape oldShape,Shape newShape){
  Shape currentShape=getShape();
  assert oldShape != newShape : "Wrong old shape assumption?";
  assert newShape != currentShape : "Redundant shape change? shape=" + currentShape;
  assert oldShape == currentShape || oldShape.getParent() == currentShape : "Out-of-order shape change?" + "\nparentShape=" + currentShape + "\noldShape="+ oldShape+ "\nnewShape="+ newShape;
  return true;
}

protected boolean isFileVisible(File file){
  if (file == null || !file.exists() || !file.canRead() || file.isHidden()) {
    return false;
  }
  return true;
}

public static String[] append(final String[] a,final String... b){
  final int alen=a.length;
  final int blen=b.length;
  final String[] res=Arrays.copyOf(a,alen + blen);
  System.arraycopy(b,0,res,alen,blen);
  return res;
}

public void delete() throws AMException, SSOException {
  delete(false);
}

public String(byte[] bytes,int off,int len,java.lang.String enc) throws java.io.UnsupportedEncodingException {
  this(bytesToChars(bytes,off,len,enc));
}

private boolean initializeSearchItemset(BitVector bv,int[] scratchi,int[] iters){
  for (int i=0; i < scratchi.length; i++) {
    iters[i]=(i == 0) ? bv.iter() : bv.iterAdvance(iters[i - 1]);
    if (iters[i] < 0) {
      return false;
    }
    scratchi[i]=bv.iterDim(iters[i]);
  }
  return true;
}

private Rectangle computeEditorBounds(){
  if (row == -1 || column == -1)   return new Rectangle(0,0,0,0);
  Rectangle cell=grid.getCellBounds(column,row);
  Rectangle area=grid.getClientArea();
  if (cell.x < area.x + area.width) {
    if (cell.x + cell.width > area.x + area.width) {
      cell.width=area.x + area.width - cell.x;
    }
  }
  Rectangle editorRect=new Rectangle(cell.x,cell.y,minimumWidth,minimumHeight);
  if (grabHorizontal) {
    editorRect.width=Math.max(cell.width,minimumWidth);
  }
  if (grabVertical) {
    editorRect.height=Math.max(cell.height,minimumHeight);
  }
  if (horizontalAlignment == SWT.RIGHT) {
    editorRect.x+=cell.width - editorRect.width;
  }
 else   if (horizontalAlignment == SWT.LEFT) {
  }
 else {
    editorRect.x+=(cell.width - editorRect.width) / 2;
  }
  if (verticalAlignment == SWT.BOTTOM) {
    editorRect.y+=cell.height - editorRect.height;
  }
 else   if (verticalAlignment == SWT.TOP) {
  }
 else {
    editorRect.y+=(cell.height - editorRect.height) / 2;
  }
  return editorRect;
}

public int read(byte[] buffer,int offset,int length) throws IOException {
  throw new UnsupportedOperationException(String.valueOf(this));
}

public Cuboid(World world,int x1,int y1,int z1,int x2,int y2,int z2){
  this.worldName=world.getName();
  this.x1=Math.min(x1,x2);
  this.x2=Math.max(x1,x2);
  this.y1=Math.min(y1,y2);
  this.y2=Math.max(y1,y2);
  this.z1=Math.min(z1,z2);
  this.z2=Math.max(z1,z2);
}

@SuppressWarnings({"SuspiciousNameCombination"}) public double logMarginalLikelihoodSmoothed(List<Double> v,double delta,double Pdata){
  final double logDelta=StrictMath.log(delta);
  final double logInvDelta=StrictMath.log(1.0 - delta);
  final int n=v.size();
  final double logN=StrictMath.log(n);
  final double offset=logInvDelta - Pdata;
  double bottom=logN + logDelta - logInvDelta;
  double top=bottom + Pdata;
  for (int i=0; i < n; i++) {
    double weight=-LogTricks.logSum(logDelta,offset + v.get(i));
    top=LogTricks.logSum(top,weight + v.get(i));
    bottom=LogTricks.logSum(bottom,weight);
  }
  return top - bottom;
}

public boolean isNewMessage(){
  if (message == null) {
    throw new IllegalStateException("no message present");
  }
  return message.startsWith("new(") || message.equals("new");
}

private void installProperties(){
  System.setProperty("http.agent",UserAgentGenerator.getUserAgent());
  if (OSUtils.isMacOSX()) {
    System.setProperty("apple.laf.useScreenMenuBar","true");
  }
}

public DoubleBuffer put(double[] src,int srcOffset,int doubleCount){
  Arrays.checkOffsetAndCount(src.length,srcOffset,doubleCount);
  if (doubleCount > remaining()) {
    throw new BufferOverflowException();
  }
  for (int i=srcOffset; i < srcOffset + doubleCount; ++i) {
    put(src[i]);
  }
  return this;
}

private void loadRecipients(int addressType,HashSet<String> recipients,HashMap<Integer,EncodedStringValue[]> addressMap,boolean excludeMyNumber){
  EncodedStringValue[] array=addressMap.get(addressType);
  if (array == null) {
    return;
  }
  if (excludeMyNumber && array.length == 1) {
    return;
  }
  String myNumber=excludeMyNumber ? mTelephonyManager.getLine1Number() : null;
  for (  EncodedStringValue v : array) {
    if (v != null) {
      String number=v.getString();
      if ((myNumber == null || !PhoneNumberUtils.compare(number,myNumber)) && !recipients.contains(number)) {
        recipients.add(number);
      }
    }
  }
}

public static boolean isExtension(String filename,String extension){
  if (filename == null) {
    return false;
  }
  if (extension == null || extension.length() == 0) {
    return indexOfExtension(filename) == -1;
  }
  String fileExt=getExtension(filename);
  return fileExt.equals(extension);
}

private String scriptFromDisk(String name){
  name=name.replace('\\','/');
  final char SEP=';';
  String pkgPart="";
  String pathPart="";
  String namePart="";
  int at=name.indexOf(SEP);
  if (at > -1) {
    int nextAt=name.indexOf(SEP,at + 1);
    if (nextAt > -1) {
      pathPart=name.substring(0,at);
      pkgPart=name.substring(at + 1,nextAt);
      namePart=name.substring(nextAt + 1);
    }
 else {
      pathPart=name.substring(0,at);
      namePart=name.substring(at + 1);
    }
  }
 else {
    at=name.lastIndexOf('/');
    if (at > -1) {
      int mx=name.lastIndexOf("/mx/");
      if (mx > -1) {
        pathPart=name.substring(0,mx);
        pkgPart=name.substring(mx + 1,at);
      }
 else {
        pathPart=name.substring(0,at);
      }
      namePart=name.substring(at + 1);
    }
 else {
      pathPart=".";
      namePart=name;
    }
  }
  String script=null;
  try {
    Charset realEncoding=null;
    Charset bomEncoding=null;
    InputStream in=locateScriptFile(pathPart,pkgPart,namePart);
    if (in != null) {
      try {
        BufferedInputStream bis=new BufferedInputStream(in);
        bomEncoding=getEncodingFromBOM(bis);
        script=pullInSource(bis,bomEncoding);
        realEncoding=getEncodingFromXMLDirective(script);
      }
  finally {
        try {
          in.close();
        }
 catch (        IOException e) {
        }
      }
    }
    if (realEncoding != null && !realEncoding.equals(bomEncoding)) {
      in=locateScriptFile(pathPart,pkgPart,namePart);
      if (in != null) {
        try {
          BufferedInputStream bis=new BufferedInputStream(in);
          getEncodingFromBOM(bis);
          script=pullInSource(bis,realEncoding);
        }
  finally {
          try {
            in.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
 catch (  FileNotFoundException fnf) {
    fnf.printStackTrace();
  }
  return script;
}

@PrePersist public void prePersist(){
  lockTime=System.currentTimeMillis();
}

public LibPadstack add(String p_name,ShapeConvex[] p_shapes,boolean p_attach_allowed,boolean p_placed_absolute){
  int pad_no=count() + 1;
  LibPadstack new_padstack=new LibPadstack(p_name,pad_no,p_shapes,p_attach_allowed,p_placed_absolute);
  padstack_list.add(new_padstack);
  return new_padstack;
}

private Rect calcBounds(int index,Paint paint){
  Rect bounds=new Rect();
  CharSequence title=getTitle(index);
  bounds.right=(int)paint.measureText(title,0,title.length());
  bounds.bottom=(int)(paint.descent() - paint.ascent());
  return bounds;
}

protected ArgsBase(){
  _argv=null;
  _env=null;
}

@Override public void startContentModel(String elementName,Augmentations augs) throws XNIException {
  if (fValidation) {
    fDTDElementDeclName=elementName;
    fMixedElementTypes.clear();
  }
  if (fDTDGrammar != null)   fDTDGrammar.startContentModel(elementName,augs);
  if (fDTDContentModelHandler != null) {
    fDTDContentModelHandler.startContentModel(elementName,augs);
  }
}

public OMRangeRings(LatLonPoint center,double radius,Length units,int nverts){
  super(center,radius,units,nverts);
  centerPoint=createCenterPoint();
  form.setMaximumFractionDigits(2);
}

public static InputSource createInputSource(String s){
  try {
    return new InputSource(new ByteArrayInputStream(s.getBytes("UTF-8")));
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}

public static void write(File file,CharSequence data,boolean append) throws IOException {
  write(file,data,Charset.defaultCharset(),append);
}

public static Preferences userRoot(){
  return factory.userRoot();
}

public static String toDebugString(final long socketIdentifier){
  final int ipBits=(int)socketIdentifier;
  final int port=extractPortNumber(socketIdentifier);
  final int inode=(int)(socketIdentifier >> 48);
  return Integer.toHexString(ipBits) + ":" + port+ "/"+ inode;
}

@Override public void onAlbumUpdate(ProviderIdentifier provider,final Album a) throws RemoteException {
  if (a == null) {
    Log.w(TAG,"Provider returned a null album");
    return;
  }
  Album cached=mCache.getAlbum(a.getRef());
  boolean modified=false;
  if (cached == null) {
    mCache.putAlbum(provider,a);
    cached=a;
    modified=true;
  }
 else   if (!cached.isLoaded() || !cached.isIdentical(a)) {
    cached.setName(a.getName());
    cached.setYear(a.getYear());
    cached.setIsLoaded(a.isLoaded());
    cached.setProvider(a.getProvider());
    if (cached.getSongsCount() != a.getSongsCount()) {
      Iterator<String> songsIt=a.songs();
      while (songsIt.hasNext()) {
        String songRef=songsIt.next();
        cached.addSong(songRef);
      }
    }
    modified=true;
  }
  if (cached.getProvider() == null) {
    Log.e(TAG,"Provider for " + cached.getRef() + " is null!");
  }
  if (modified) {
    Iterator<String> songs=a.songs();
    while (songs.hasNext()) {
      String songRef=songs.next();
      Song song=retrieveSong(songRef,a.getProvider());
      if (song != null && song.isLoaded()) {
        String artistRef=song.getArtist();
        if (artistRef != null) {
          Artist artist=retrieveArtist(artistRef,song.getProvider());
          if (artist != null) {
            artist.addAlbum(a.getRef());
          }
 else {
            if (DEBUG)             Log.e(TAG,"Artist is null!");
          }
        }
      }
 else {
        if (DEBUG)         Log.e(TAG,"Song is null!");
      }
    }
    postAlbumForUpdate(cached);
  }
}

public final void push(String s){
  if ((m_firstFree + 1) >= m_mapSize) {
    m_mapSize+=m_blocksize;
    String newMap[]=new String[m_mapSize];
    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);
    m_map=newMap;
  }
  m_map[m_firstFree]=s;
  m_firstFree++;
}

public static String readFromFile(final File path) throws IOException {
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(path);
    return readFromFile(fis);
  }
  finally {
    if (fis != null) {
      fis.close();
    }
  }
}

public static int XToTileX(int x,int tileGridXOffset,int tileWidth){
  x-=tileGridXOffset;
  if (x < 0) {
    x+=1 - tileWidth;
  }
  return x / tileWidth;
}

private boolean checkTouchSlop(View child,float dx,float dy){
  if (child == null) {
    return false;
  }
  final boolean checkHorizontal=mCallback.getViewHorizontalDragRange(child) > 0;
  final boolean checkVertical=mCallback.getViewVerticalDragRange(child) > 0;
  if (checkHorizontal && checkVertical) {
    return dx * dx + dy * dy > mTouchSlop * mTouchSlop;
  }
 else   if (checkHorizontal) {
    return Math.abs(dx) > mTouchSlop;
  }
 else   if (checkVertical) {
    return Math.abs(dy) > mTouchSlop;
  }
  return false;
}

public Input(String name,@InputType int type,@Alignment int align,Connection connection){
  mName=name;
  mType=type;
  mAlign=align;
  mConnection=connection;
  if (mConnection != null) {
    mConnection.setInput(this);
  }
}

public static BshClassManager createClassManager(Interpreter interpreter){
  BshClassManager manager;
  if (Capabilities.classExists("java.lang.ref.WeakReference") && Capabilities.classExists("java.util.HashMap") && Capabilities.classExists("bsh.classpath.ClassManagerImpl"))   try {
    Class clas=Class.forName("bsh.classpath.ClassManagerImpl");
    manager=(BshClassManager)clas.newInstance();
  }
 catch (  Exception e) {
    throw new InterpreterError("Error loading classmanager: " + e);
  }
 else   manager=new BshClassManager();
  if (interpreter == null)   interpreter=new Interpreter();
  manager.declaringInterpreter=interpreter;
  return manager;
}

public int swap(){
  if (!mEgl.eglSwapBuffers(mEglDisplay,mEglSurface)) {
    return mEgl.eglGetError();
  }
  return EGL10.EGL_SUCCESS;
}

public void requestLastLoginTime(){
  operations.add(PasswordPolicyStateOperationType.GET_LAST_LOGIN_TIME);
}

public static Stream<String> wordsOf(String text){
  requireNonNull(text);
  return WORDS.splitAsStream(text);
}

public void add(AppInfo info){
  if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) {
    return;
  }
  if (findActivity(data,info.componentName,info.user)) {
    return;
  }
  data.add(info);
  added.add(info);
}

public Joiner match(String field,Object... value){
  return match(field,Arrays.asList(value));
}

private String removeYouTubeMarkup(String plot){
  if (plot == null)   return null;
  return plot.replaceAll("\\[.*\\]","");
}

private String createDashArrayString(List<Float> dashesArray){
  StringBuilder sb=new StringBuilder();
  if (dashesArray != null) {
    int index=0;
    for (    Float value : dashesArray) {
      String str=Float.toString(value);
      if (str.endsWith(".0")) {
        sb.append(value.intValue());
      }
 else {
        sb.append(value);
      }
      if (index < dashesArray.size() - 1) {
        sb.append(" ");
      }
      index++;
    }
  }
  return sb.toString();
}

private final boolean compareAndSetHead(Node update){
  return unsafe.compareAndSwapObject(this,headOffset,null,update);
}

public long position(java.sql.Blob pattern,long start) throws SQLException {
  return position(pattern.getBytes(0,(int)pattern.length()),start);
}

protected synchronized T load() throws IOException {
  long genLoaded=-1;
  IOException ioe=null;
  List<String> genFiles=new ArrayList<String>();
  String[] files;
  try {
    files=dir.listAll();
  }
 catch (  IOException ioe2) {
    return null;
  }
  T loaded=null;
  for (  String file : files) {
    if (file.startsWith(prefix)) {
      long gen=Long.parseLong(file.substring(prefix.length()));
      if (genLoaded == -1 || gen > genLoaded) {
        genFiles.add(file);
        IndexInput in=dir.openInput(file,IOContext.DEFAULT);
        try {
          loaded=loadOne(in);
        }
 catch (        IOException ioe2) {
          if (ioe == null) {
            ioe=ioe2;
          }
        }
 finally {
          in.close();
        }
        genLoaded=gen;
      }
    }
  }
  if (genLoaded == -1) {
    if (ioe != null) {
      throw ioe;
    }
  }
 else {
    if (genFiles.size() > 1) {
      String curFileName=prefix + genLoaded;
      for (      String file : genFiles) {
        long gen=Long.parseLong(file.substring(prefix.length()));
        if (canDelete(gen) && !curFileName.equals(file)) {
          dir.deleteFile(file);
        }
      }
    }
    nextWriteGen=1 + genLoaded;
  }
  return loaded;
}

public static String readLine(InputStream in,String charset) throws IOException {
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  while (true) {
    int b=in.read();
    if (b == -1) {
      if (baos.size() == 0) {
        return null;
      }
 else {
        break;
      }
    }
    if (b == '\n') {
      break;
    }
    if (b != '\r') {
      baos.write(b);
      continue;
    }
    int b2=in.read();
    if (b2 == -1) {
      baos.write(b);
      break;
    }
    if (b2 == '\n') {
      break;
    }
    baos.write(b);
    baos.write(b2);
  }
  return baos.toString(charset);
}

protected static final String addEscapes(String str){
  StringBuffer retval=new StringBuffer();
  char ch;
  for (int i=0; i < str.length(); i++) {
switch (str.charAt(i)) {
case 0:
      continue;
case '\b':
    retval.append("\\b");
  continue;
case '\t':
retval.append("\\t");
continue;
case '\n':
retval.append("\\n");
continue;
case '\f':
retval.append("\\f");
continue;
case '\r':
retval.append("\\r");
continue;
case '\"':
retval.append("\\\"");
continue;
case '\'':
retval.append("\\\'");
continue;
case '\\':
retval.append("\\\\");
continue;
default :
if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {
String s="0000" + Integer.toString(ch,16);
retval.append("\\u" + s.substring(s.length() - 4,s.length()));
}
 else {
retval.append(ch);
}
continue;
}
}
return retval.toString();
}

public boolean checkTableExists(TableDefinition table){
  String column=null;
  for (  FieldDefinition field : table.getFields()) {
    if (column == null) {
      column=field.getName();
    }
 else     if (field.isPrimaryKey()) {
      column=field.getName();
      break;
    }
  }
  String sql="SELECT " + column + " FROM "+ table.getFullName()+ " WHERE "+ column+ " <> "+ column;
  DataReadQuery query=new DataReadQuery(sql);
  query.setMaxRows(1);
  try {
    session.executeQuery(query);
    return true;
  }
 catch (  Exception notFound) {
    return false;
  }
 finally {
  }
}

private int processColon(int length){
  if (_hasScheme) {
    if (!readUserPass(length) && _buffer.length() > 0) {
      _reader.goBack();
      _buffer.delete(_buffer.length() - 1,_buffer.length());
      int backtrackOnFail=_reader.getPosition() - _buffer.length() + length;
      if (!readDomainName(_buffer.substring(length))) {
        _reader.seek(backtrackOnFail);
        readEnd(ReadEndState.InvalidUrl);
      }
      length=0;
    }
  }
 else   if (readScheme() && _buffer.length() > 0) {
    _hasScheme=true;
    length=_buffer.length();
  }
 else   if (_buffer.length() > 0 && _options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _reader.canReadChars(1)) {
    _reader.goBack();
    _buffer.delete(_buffer.length() - 1,_buffer.length());
    readDomainName(_buffer.toString());
  }
 else {
    readEnd(ReadEndState.InvalidUrl);
    length=0;
  }
  return length;
}

public static boolean containsSqlScriptDelimiters(String script,String delim){
  boolean inLiteral=false;
  char[] content=script.toCharArray();
  for (int i=0; i < script.length(); i++) {
    if (content[i] == '\'') {
      inLiteral=!inLiteral;
    }
    if (!inLiteral && script.startsWith(delim,i)) {
      return true;
    }
  }
  return false;
}

public void compress(byte[] bytes,int off,int len,OutputStream os){
  try {
    os.write(bytes,off,len);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

public void assertNotJoined(final UUID serviceId){
  m_triggers.add(new QuorumEventInvariant(QuorumEventEnum.SERVICE_JOIN,serviceId));
  if (isMember(m_quorum.getJoined(),serviceId))   broken();
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

public int encryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {
  if ((inOff + blockSize) > in.length) {
    throw new DataLengthException("input buffer too short");
  }
  if ((outOff + blockSize) > out.length) {
    throw new DataLengthException("output buffer too short");
  }
  cipher.processBlock(cfbV,0,cfbOutV,0);
  for (int i=0; i < blockSize; i++) {
    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);
  }
  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);
  System.arraycopy(out,outOff,cfbV,cfbV.length - blockSize,blockSize);
  return blockSize;
}

public final void print(String value){
  try {
    Element rootElement=workDoc.getDefaultRootElement();
    int deleteLines=rootElement.getElementCount() - linesMax;
    for (int index=0; index < deleteLines; index++) {
      Element elem=rootElement.getElement(0);
      workDoc.remove(elem.getStartOffset(),elem.getEndOffset());
    }
    workDoc.insertString(workDoc.getLength(),value,null);
    textArea.setCaretPosition(workDoc.getLength());
  }
 catch (  Exception exc) {
    exc.printStackTrace();
  }
}

private void addConnectionGroups(Collection<ConnectionGroup> connectionGroups){
  for (  ConnectionGroup connectionGroup : connectionGroups) {
    APIConnectionGroup parent=retrievedGroups.get(connectionGroup.getParentIdentifier());
    if (parent != null) {
      Collection<APIConnectionGroup> children=parent.getChildConnectionGroups();
      if (children == null) {
        children=new ArrayList<APIConnectionGroup>();
        parent.setChildConnectionGroups(children);
      }
      APIConnectionGroup apiConnectionGroup=new APIConnectionGroup(connectionGroup);
      retrievedGroups.put(connectionGroup.getIdentifier(),apiConnectionGroup);
      children.add(apiConnectionGroup);
    }
 else     logger.debug("Connection group \"{}\" cannot be added to the tree: parent \"{}\" does not actually exist.",connectionGroup.getIdentifier(),connectionGroup.getParentIdentifier());
  }
}

public void loadMap(InputStream input,String groupID) throws Exception {
  shapes=parser.parse(input,groupID);
  boundaries=new ArrayList<Rect2D>(shapes.size());
  for (  IGeometric2D shape : shapes) {
    boundaries.add(shape.getBounds());
  }
}

public void addDecoration(LineDecoration decoration){
  if (decoration != null) {
    decorations.add(decoration);
  }
}

private String parseLinkTitle(){
  String title=match(LINK_TITLE);
  if (title != null) {
    return Escaping.unescapeString(title.substring(1,title.length() - 1));
  }
 else {
    return null;
  }
}

public void recordSRDFOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,Object... extParam){
  try {
    boolean opStatus=(Operation.Status.ready == status) ? true : false;
    String evType;
    evType=opType.getEvType(opStatus);
    String evDesc=opType.getDescription();
    String opStage=AuditLogManager.AUDITOP_END;
    _logger.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);
    recordBourneSRDFEvent(dbClient,getId(),evType,status,evDesc);
    String id=(String)extParam[0];
switch (opType) {
case CREATE_SRDF_LINK:
      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
    break;
case SUSPEND_SRDF_LINK:
  AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case DETACH_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case PAUSE_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case RESUME_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case FAILOVER_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case SWAP_SRDF_VOLUME:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case STOP_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
case SYNC_SRDF_LINK:
AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,extParam);
break;
default :
_logger.error("unrecognized SRDF operation type");
}
}
 catch (Exception e) {
_logger.error("Failed to record SRDF operation {}, err: {}",opType.toString(),e);
}
}

@Override public void put(double val){
  final double nn=this.n + 1.0;
  final double delta=val - m1;
  final double delta_nn=delta / nn;
  final double delta_nn2=delta_nn * delta_nn;
  final double inc=delta * delta_nn * this.n;
  m4+=inc * delta_nn2 * (nn * nn - 3. * nn + 3.) + 6. * delta_nn2 * m2 - 4. * delta_nn * m3;
  m3+=inc * delta_nn * (nn - 2) - 3. * delta_nn * m2;
  m2+=inc;
  m1+=delta_nn;
  n=nn;
  min=Math.min(min,val);
  max=Math.max(max,val);
}

public void close(){
  this.closed=true;
}

public int size(){
  return m_RecentItems.size();
}

public JCDiagnostic warning(LintCategory lc,String key,Object... args){
  return create(WARNING,lc,EnumSet.noneOf(DiagnosticFlag.class),null,null,key,args);
}

public Destructurer(final Tree.Pattern that,final GenerateJsVisitor gen,final Set<Declaration> directAccess,final String expvar,boolean first,final boolean forAssert){
  this.gen=gen;
  jsw=gen == null ? null : gen.out;
  names=gen == null ? null : gen.getNames();
  this.directAccess=directAccess;
  this.expvar=expvar;
  this.first=first;
  this.forAssert=forAssert;
  that.visit(this);
  if (jsw != null && !attribs.isEmpty()) {
    for (    Value attr : attribs) {
      jsw.write(";",names.self((TypeDeclaration)attr.getContainer()),".",names.name(attr),"=",names.name(attr));
    }
  }
}

@SuppressWarnings("unused") public void handleTblSubConfigButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {
  submitCycle=true;
  CCActionTable tbl=(CCActionTable)getChild(TBL_SUB_CONFIG);
  tbl.restoreStateData();
  CCActionTableModel tblModel=(CCActionTableModel)tbl.getModel();
  Integer[] selected=tblModel.getSelectedRows();
  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);
  List list=szCache.getSerializedObj();
  Set<String> names=new HashSet<>(selected.length * 2);
  for (  Integer index : selected) {
    SMSubConfig sc=(SMSubConfig)list.get(index);
    names.add(sc.getName());
  }
  try {
    AbstractAuditModel model=(AbstractAuditModel)getModel();
    model.deleteEventHandles(names);
    if (selected.length == 1) {
      setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,"event.handler.message.deleted");
    }
 else {
      setInlineAlertMessage(TYPE_INFO,INFORMATION_MESSAGE,"event.handler.message.deleted.plural");
    }
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(TYPE_ERROR,ERROR_MESSAGE,e.getMessage());
  }
  submitCycle=false;
  forwardTo();
}

public synchronized void removeGraphListener(GraphListener cl){
  m_graphListeners.remove(cl);
}

public boolean isHealthy(boolean doExtensiveChecks){
  if (socket.isClosed() || socket.isInputShutdown() || socket.isOutputShutdown()) {
    return false;
  }
  if (framedConnection != null) {
    return true;
  }
  if (doExtensiveChecks) {
    try {
      int readTimeout=socket.getSoTimeout();
      try {
        socket.setSoTimeout(1);
        if (source.exhausted()) {
          return false;
        }
        return true;
      }
  finally {
        socket.setSoTimeout(readTimeout);
      }
    }
 catch (    SocketTimeoutException ignored) {
    }
catch (    IOException e) {
      return false;
    }
  }
  return true;
}

public void addColumn(int index,Column column){
  validateColumn(column);
  columnList.add(index,column);
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

private void init(){
  setTitle("New Hopfield Network");
  hopPropertiesPanel=new HopfieldPropertiesPanel(networkPanel);
  hopPropertiesPanel.fillFieldValues();
  tabLogic.setLayout(new FlowLayout());
  tabLogic.add(hopPropertiesPanel);
  tabLayout.add(layoutPanel);
  layoutPanel=new MainLayoutPanel(false,this);
  tabbedPane.addTab("Logic",tabLogic);
  tabbedPane.addTab("Layout",layoutPanel);
  setContentPane(tabbedPane);
  Action helpAction=new ShowHelpAction(hopPropertiesPanel.getHelpPath());
  addButton(new JButton(helpAction));
}

public BatchedImageRequest(Request<?> request,ImageContainer container){
  mRequest=request;
  mContainers.add(container);
}

private double normVector(double[] z){
  double sum=0;
  for (int i=0; i < problem.getNumberOfObjectives(); i++) {
    sum+=z[i] * z[i];
  }
  return Math.sqrt(sum);
}

public String forceGetValueAsString(){
  if (mValue == null) {
    return "";
  }
 else   if (mValue instanceof byte[]) {
    if (mDataType == TYPE_ASCII) {
      return new String((byte[])mValue,US_ASCII);
    }
 else {
      return Arrays.toString((byte[])mValue);
    }
  }
 else   if (mValue instanceof long[]) {
    if (((long[])mValue).length == 1) {
      return String.valueOf(((long[])mValue)[0]);
    }
 else {
      return Arrays.toString((long[])mValue);
    }
  }
 else   if (mValue instanceof Object[]) {
    if (((Object[])mValue).length == 1) {
      Object val=((Object[])mValue)[0];
      if (val == null) {
        return "";
      }
 else {
        return val.toString();
      }
    }
 else {
      return Arrays.toString((Object[])mValue);
    }
  }
 else {
    return mValue.toString();
  }
}

public int hashCode(){
  return 127 * factor.hashCode() + lag;
}

public void deserializeArchivedVersions() throws RuntimeException {
  System.out.println("Deserializing archived instances in " + getArchiveDirectory() + ".");
  File archive=new File(getArchiveDirectory());
  if (!archive.exists() || !archive.isDirectory()) {
    return;
  }
  String[] listing=archive.list();
  for (  String archiveName : listing) {
    if (!(archiveName.endsWith(".zip"))) {
      continue;
    }
    try {
      File file=new File(getArchiveDirectory(),archiveName);
      ZipFile zipFile=new ZipFile(file);
      ZipEntry entry=zipFile.getEntry("class_fields.ser");
      InputStream inputStream=zipFile.getInputStream(entry);
      ObjectInputStream objectIn=new ObjectInputStream(inputStream);
      Map<String,List<String>> classFields=(Map<String,List<String>>)objectIn.readObject();
      zipFile.close();
      for (      String className : classFields.keySet()) {
        List<String> fieldNames=classFields.get(className);
        Class<?> clazz=Class.forName(className);
        ObjectStreamClass streamClass=ObjectStreamClass.lookup(clazz);
        if (streamClass == null) {
          System.out.println();
        }
        for (        String fieldName : fieldNames) {
          assert streamClass != null;
          ObjectStreamField field=streamClass.getField(fieldName);
          if (field == null) {
            throw new RuntimeException("Field '" + fieldName + "' was dropped from class '"+ className+ "' as a serializable field! Please "+ "put it back!!!"+ "\nIt used to be in "+ className+ " in this archive: "+ archiveName+ ".");
          }
        }
      }
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Could not read class_fields.ser in archive + " + archiveName + " .",e);
    }
catch (    IOException e) {
      throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e);
    }
    System.out.println("...Deserializing instances in " + archiveName + "...");
    ZipEntry zipEntry=null;
    try {
      File file=new File(getArchiveDirectory(),archiveName);
      FileInputStream in=new FileInputStream(file);
      ZipInputStream zipinputstream=new ZipInputStream(in);
      while ((zipEntry=zipinputstream.getNextEntry()) != null) {
        if (!zipEntry.getName().endsWith(".ser")) {
          continue;
        }
        ObjectInputStream objectIn=new ObjectInputStream(zipinputstream);
        objectIn.readObject();
        zipinputstream.closeEntry();
      }
      zipinputstream.close();
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException("Could not read object zipped file " + zipEntry.getName() + " in archive "+ archiveName+ ". "+ "Perhaps the class was renamed, moved to another package, or "+ "removed. In any case, please put it back where it was.",e);
    }
catch (    IOException e) {
      throw new RuntimeException("Problem reading archive" + archiveName + "; see cause.",e);
    }
  }
  System.out.println("Finished deserializing archived instances.");
}

private void convertMaximalToMinimalEdgeRings(List ringEdges){
  for (Iterator i=ringEdges.iterator(); i.hasNext(); ) {
    PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();
    long label=de.getLabel();
    List intNodes=findIntersectionNodes(de,label);
    if (intNodes == null)     continue;
    for (Iterator iNode=intNodes.iterator(); iNode.hasNext(); ) {
      Node node=(Node)iNode.next();
      computeNextCCWEdges(node,label);
    }
  }
}

public byte[] generateMAC(byte commandClass,byte[] ciphertext,byte sendingNode,byte receivingNode,byte[] iv) throws GeneralSecurityException {
  traceHex("generateMAC ciphertext",ciphertext);
  traceHex("generateMAC iv",iv);
  int bufferSize=ciphertext.length + 4;
  byte[] buffer=new byte[bufferSize];
  byte[] tempAuth=new byte[16];
  buffer[0]=commandClass;
  buffer[1]=sendingNode;
  buffer[2]=receivingNode;
  buffer[3]=(byte)ciphertext.length;
  System.arraycopy(ciphertext,0,buffer,4,ciphertext.length);
  traceHex("generateMAC NetworkKey",networkKey.getEncoded());
  traceHex("generateMAC Raw Auth (minus IV)",buffer);
  Cipher encryptCipher=Cipher.getInstance("AES/ECB/NoPadding");
  encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);
  tempAuth=encryptCipher.doFinal(iv);
  traceHex("generateMAC tmp1",tempAuth);
  byte[] encpck=new byte[16];
  int block=0;
  for (int i=0; i < bufferSize; i++) {
    encpck[block]=buffer[i];
    block++;
    if (block == 16) {
      for (int j=0; j < 16; j++) {
        tempAuth[j]=(byte)(encpck[j] ^ tempAuth[j]);
        encpck[j]=0;
      }
      Arrays.fill(encpck,(byte)0);
      block=0;
      encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);
      tempAuth=encryptCipher.doFinal(tempAuth);
    }
  }
  if (block > 0) {
    for (int i=0; i < 16; i++) {
      tempAuth[i]=(byte)(encpck[i] ^ tempAuth[i]);
    }
    encryptCipher.init(Cipher.ENCRYPT_MODE,authKey);
    tempAuth=encryptCipher.doFinal(tempAuth);
  }
  traceHex("generateMAC Computed Auth",tempAuth);
  byte[] mac=new byte[8];
  System.arraycopy(tempAuth,0,mac,0,8);
  return mac;
}

public void removeEventListener(ImageSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {
  if (mApi == null) {
    throw new RcsServiceNotAvailableException();
  }
  try {
    WeakReference<IImageSharingListener> weakRef=mImageSharingListeners.remove(listener);
    if (weakRef == null) {
      return;
    }
    IImageSharingListener rcsListener=weakRef.get();
    if (rcsListener != null) {
      mApi.removeEventListener2(rcsListener);
    }
  }
 catch (  Exception e) {
    RcsIllegalArgumentException.assertException(e);
    throw new RcsGenericException(e);
  }
}

private void updateWaveFileSize() throws IOException {
  ByteBuffer buffer=getUnsignedIntegerBuffer(mFileChannel.size() - 8);
  mFileChannel.write(buffer,4);
  ByteBuffer buffer2=getUnsignedIntegerBuffer(mFileChannel.size() - 44);
  mFileChannel.write(buffer2,40);
}

private void writeJournal(ParcelFileDescriptor newState,Journal journal){
  try {
    FileOutputStream outStream=new FileOutputStream(newState.getFileDescriptor());
    final byte[] journalBytes=writeCheckedBytes(journal);
    outStream.write(journalBytes);
    if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal");
  }
 catch (  IOException e) {
    Log.w(TAG,"failed to write backup journal",e);
  }
}

public boolean matches(String sa){
  if (_length != sa.length())   return false;
  char[] buffer=_buffer;
  int offset=_offset;
  for (int i=_length - 1; i >= 0; i--)   if (_buffer[_offset + i] != sa.charAt(i))   return false;
  return true;
}

@Override public void mouseReleased(MouseEvent event){
  if (event.getSource() == getComponentDecreaseSpinnerButton()) {
    decreaseTimer.stop();
  }
 else {
    increaseTimer.stop();
  }
}

public double computeMaxClassValueUsingPercentFactorPerSeries(DefaultChartData chartData,String[] series,double[] percentFactorPerSeries){
  double maxValue=0;
  for (  String className : chartData.getClassNamesIncludingDisabled()) {
    double total=0;
    for (int i=0; i < series.length; i++) {
      String seriesName=series[i];
      if (transposedHeightsAdditive)       total+=percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className);
 else       total=Math.max(total,percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className));
    }
    if (total > maxValue) {
      maxValue=total;
    }
  }
  return 1.1 * maxValue;
}

public int addChannel(Channel channel){
  int index=-1;
switch (channel.getChannelType()) {
case STANDARD:
    mChannels.add(channel);
  index=mChannels.size() - 1;
fireTableRowsInserted(index,index);
break;
case TRAFFIC:
mTrafficChannels.add(channel);
index=mChannels.size() - 1;
break;
default :
break;
}
broadcast(new ChannelEvent(channel,Event.NOTIFICATION_ADD));
if (channel.getEnabled()) {
broadcast(new ChannelEvent(channel,Event.REQUEST_ENABLE));
}
return index;
}

public static String join(Object... array){
  if (array == null) {
    return null;
  }
  if (array.length == 0) {
    return StringPool.EMPTY;
  }
  if (array.length == 1) {
    return String.valueOf(array[0]);
  }
  final StringBuilder sb=new StringBuilder(array.length * 16);
  for (int i=0; i < array.length; i++) {
    sb.append(array[i]);
  }
  return sb.toString();
}

public boolean hasTrait(final StoreTrait storeTrait){
  final Set<StoreTrait> traits=getTraits();
  return null != traits && traits.contains(storeTrait);
}

public void createSupply(MWMInOutBoundLine boundline,BigDecimal qtySupply){
  MProduct product=MProduct.get(boundline.getCtx(),boundline.getM_Product_ID());
  if (product.isBOM()) {
    createMO(boundline,product,qtySupply);
  }
 else   if (product.isPurchased()) {
    createRequisition(boundline,product,qtySupply);
  }
}

public int size(){
  return parameters.size();
}

public List<LocalTime> top(int n){
  List<LocalTime> top=new ArrayList<>();
  int[] values=data.toIntArray();
  IntArrays.parallelQuickSort(values,ReverseIntComparator.instance());
  for (int i=0; i < n && i < values.length; i++) {
    top.add(PackedLocalTime.asLocalTime(values[i]));
  }
  return top;
}

@Override public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {
  try {
    schemaName=XMLHandler.getTagValue(stepnode,"schemaName");
    tabelName=XMLHandler.getTagValue(stepnode,"TableName");
    mdkeySize=XMLHandler.getTagValue(stepnode,"MDKeySize");
    measureCount=XMLHandler.getTagValue(stepnode,"Measurecount");
    heirAndKeySize=XMLHandler.getTagValue(stepnode,"HeirAndKeySize");
    cubeName=XMLHandler.getTagValue(stepnode,"cubeName");
    groupByEnabled=XMLHandler.getTagValue(stepnode,"isGroupByEnabled");
    aggregatorClassString=XMLHandler.getTagValue(stepnode,"aggregatorClassString");
    aggregatorString=XMLHandler.getTagValue(stepnode,"aggregatorString");
    factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");
    levelAnddataTypeString=XMLHandler.getTagValue(stepnode,"levelAnddataTypeString");
    currentRestructNumber=Integer.parseInt(XMLHandler.getTagValue(stepnode,"currentRestructNumber"));
    partitionID=XMLHandler.getTagValue(stepnode,"partitionID");
    segmentId=XMLHandler.getTagValue(stepnode,"segmentId");
    taskNo=XMLHandler.getTagValue(stepnode,"taskNo");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to read step info from XML node",e);
  }
}

public void put(int key,E value){
  int i=binarySearch(mKeys,0,mSize,key);
  if (i >= 0) {
    mValues[i]=value;
  }
 else {
    i=~i;
    if (i < mSize && mValues[i] == DELETED) {
      mKeys[i]=key;
      mValues[i]=value;
      return;
    }
    if (mGarbage && mSize >= mKeys.length) {
      gc();
      i=~binarySearch(mKeys,0,mSize,key);
    }
    if (mSize >= mKeys.length) {
      int n=Math.max(mSize + 1,mKeys.length * 2);
      int[] nkeys=new int[n];
      Object[] nvalues=new Object[n];
      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
      System.arraycopy(mValues,0,nvalues,0,mValues.length);
      mKeys=nkeys;
      mValues=nvalues;
    }
    if (mSize - i != 0) {
      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);
      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);
    }
    mKeys[i]=key;
    mValues[i]=value;
    mSize++;
  }
}

public void readData(DataInput din) throws IOException {
  reference=din.readUnsignedShort();
}

public float dotProduct(DenseVector df){
  float res=0.0f;
  for (int i=0; i < Math.min(size,df.getLength()); i++) {
    res+=u[i] * df.u[i];
  }
  return res;
}

private void emitCode(){
  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();
  worklist.add(new Instantiation(null,mainSubroutine));
  InsnList newInstructions=new InsnList();
  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();
  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();
  while (!worklist.isEmpty()) {
    Instantiation inst=worklist.removeFirst();
    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);
  }
  instructions=newInstructions;
  tryCatchBlocks=newTryCatchBlocks;
  localVariables=newLocalVariables;
}

public static double stDev(final List<Double> list){
  return Math.sqrt(variance(list));
}

public void trimToSize(){
  if (size < array.length) {
    int[] olddata=array;
    array=new int[size];
    System.arraycopy(olddata,0,array,0,size);
  }
}

public void testSetBitZeroOutside1(){
  byte aBytes[]={0};
  int aSign=0;
  int number=95;
  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.setBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public static int compare(Date left,boolean right){
  return compare(left,right ? 1D : 0D);
}

private IBindingSet[] decodeNextChunk() throws IOException {
  if (nsolutions == solutionSetCount) {
    if (log.isDebugEnabled())     log.debug("Read solutionSet: name=" + name + ", solutionSetSize="+ nsolutions);
    return null;
  }
  in.readInt();
  final int chunkSize=in.readInt();
  final int byteLength=in.readInt();
  final byte[] a=new byte[byteLength];
  in.readFully(a);
  final DataInputBuffer buf=new DataInputBuffer(a);
  final IBindingSet[] t=new IBindingSet[chunkSize];
  for (int i=0; i < chunkSize; i++) {
    t[i]=decoder.decodeSolution(buf,true);
    if (log.isTraceEnabled())     log.trace("Read: name=" + name + ", solution="+ t[i]);
  }
  nsolutions+=chunkSize;
  if (log.isTraceEnabled())   log.trace("Read chunk: name=" + name + ", chunkSize="+ chunkSize+ ", bytesRead="+ (SolutionSetStreamEncoder.CHUNK_HEADER_SIZE + byteLength)+ ", solutionSetSize="+ nsolutions);
  return t;
}

public UDPClientSocket(Logger logger){
  this.logger=logger;
  try {
    socket=new DatagramSocket();
    socket.setBroadcast(true);
    socket.setSendBufferSize(1024 * 1024 * 8);
    socket.setReceiveBufferSize(1024 * 1024 * 8);
    socket.setSoTimeout(1);
  }
 catch (  SocketException e) {
    logger.severe("**** FAILED TO CREATE SOCKET!");
    logger.severe("java.net.SocketException: " + e.getMessage());
    System.exit(1);
  }
}

public void multiplyAllValuesBy(final double multiplyBy,final int RoundType){
  for (  final T t : keySet()) {
    double val=mapValues.get(t);
switch (RoundType) {
case 1:
      val=Math.floor(val * multiplyBy);
    break;
case 2:
  val=Math.round(val * multiplyBy);
break;
case 3:
val=Math.ceil(val * multiplyBy);
break;
default :
val=val * multiplyBy;
break;
}
put(t,(int)val);
}
}

public static boolean isLevel(Level level){
  if (level == null)   return false;
  return level.intValue() >= s_currentLevel.intValue();
}

protected void computeFolderChildren(File folder,boolean isIncluded,String[] pkgName,ArrayList vChildren,char[][] inclusionPatterns,char[][] exclusionPatterns) throws JavaModelException {
  if (isIncluded) {
    IPackageFragment pkg=getPackageFragment(pkgName);
    vChildren.add(pkg);
  }
  try {
    File[] members=folder.listFiles();
    boolean hasIncluded=isIncluded;
    int length=members.length;
    if (length > 0) {
      JavaProject javaProject=(JavaProject)getJavaProject();
      String sourceLevel=javaProject.getOption(JavaCore.COMPILER_SOURCE,true);
      String complianceLevel=javaProject.getOption(JavaCore.COMPILER_COMPLIANCE,true);
      for (int i=0; i < length; i++) {
        File member=members[i];
        String memberName=member.getName();
        if (member.isDirectory()) {
          if (Util.isValidFolderNameForPackage(memberName,sourceLevel,complianceLevel)) {
            String[] newNames=Util.arrayConcat(pkgName,manager.intern(memberName));
            boolean isMemberIncluded=false;
            computeFolderChildren(member,isMemberIncluded,newNames,vChildren,inclusionPatterns,exclusionPatterns);
          }
        }
 else {
          if (!hasIncluded && Util.isValidCompilationUnitName(memberName,sourceLevel,complianceLevel)) {
            hasIncluded=true;
            IPackageFragment pkg=getPackageFragment(pkgName);
            vChildren.add(pkg);
          }
        }
      }
    }
  }
 catch (  IllegalArgumentException e) {
    throw new JavaModelException(e,IJavaModelStatusConstants.ELEMENT_DOES_NOT_EXIST);
  }
catch (  CoreException e) {
    throw new JavaModelException(e);
  }
}

public static String quote(File input){
  return quote(input.getAbsolutePath());
}

private void readFromNet() throws IgniteCheckedException {
  try {
    inNetBuf.clear();
    int read=ch.read(inNetBuf);
    if (read == -1)     throw new IgniteCheckedException("Failed to read remote node response (connection closed).");
  }
 catch (  IOException e) {
    throw new IgniteCheckedException("Failed to write byte to socket.",e);
  }
}

synchronized void clear(){
  maps=new Maps();
  tombstones.clear();
  ramBytesUsedCurrent.set(0);
  if (mgr != null) {
    mgr.removeListener(this);
    mgr=null;
  }
}

public synchronized void removeConsumer(ImageConsumer ic){
  ics.removeElement(ic);
}

public boolean isNavigationAtBottom(){
  return (mSmallestWidthDp >= 600 || mInPortrait);
}

private void updateAperture(int newValue,long now){
  int previous=targetAperture;
  targetAperture=newValue;
  targetAperture=Math.max(minAperture,targetAperture);
  int maxAperture=Math.min(this.maxAperture,activeSockets.size() + activeFactories.size());
  targetAperture=Math.min(maxAperture,targetAperture);
  lastApertureRefresh=now;
  pendings.reset((minPendings + maxPendings) / 2);
  if (targetAperture != previous) {
    logger.debug("Current pending={}, new target={}, previous target={}",pendings.value(),targetAperture,previous);
  }
}

public I buildInvocation(Object protocolKey,I invocation) throws ConfigException {
  Objects.requireNonNull(invocation);
  invocation=buildInvocation(invocation);
  LruCache<Object,I> invocationCache=_invocationCache;
  if (invocationCache != null) {
    I oldInvocation;
    oldInvocation=invocationCache.get(protocolKey);
    if (oldInvocation != null && !oldInvocation.isModified()) {
      return oldInvocation;
    }
    if (invocation.getURLLength() < _maxURLLength) {
      invocationCache.put(protocolKey,invocation);
    }
  }
  return invocation;
}

public WebResourceStatistics computeMark(WebResourceStatistics wrStatistics){
  float passed=wrStatistics.getNbOfPassed();
  if (passed == -1) {
    wrStatistics.setRawMark(Float.valueOf(-1));
    return wrStatistics;
  }
  float failed=wrStatistics.getNbOfFailed();
  float needMoreInfo=wrStatistics.getNbOfNmi();
  if (failed == 0 && passed == 0) {
    wrStatistics.setMark(Float.valueOf(0));
    return wrStatistics;
  }
  float ratioNMI=needMoreInfo / (passed + failed + needMoreInfo);
  float result=((1 - ratioNMI) * passed / (passed + failed) + ratioNMI * needMoreInfo / (passed + failed + needMoreInfo)) * 100f;
  wrStatistics.setMark(result);
  return wrStatistics;
}

public void testGcdFirstZero(){
  byte aBytes[]={0};
  byte bBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};
  int aSign=1;
  int bSign=1;
  byte rBytes[]={15,24,123,57,-15,24,123,57,-15,24,123,57};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.gcd(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public void testKingCapture() throws ChessParseError {
  Position pos=TextIO.readFEN("8/4k3/8/8/8/8/8/4RK2 b - - 0 1");
  pos.setWhiteMove(true);
  List<String> strMoves=getMoveList(pos,false);
  assertEquals(1,strMoves.size());
  assertEquals("Re1xe7",strMoves.get(0));
  pos.setPiece(Position.getSquare(0,2),Piece.WBISHOP);
  pos.setPiece(Position.getSquare(4,1),Piece.WPAWN);
  strMoves=getMoveList(pos,false);
  assertEquals(1,strMoves.size());
  assertEquals("Ba3xe7",strMoves.get(0));
  pos.setPiece(Position.getSquare(1,3),Piece.WPAWN);
  pos.setPiece(Position.getSquare(5,5),Piece.WPAWN);
  strMoves=getMoveList(pos,false);
  assertEquals(1,strMoves.size());
  assertEquals("f6xe7",strMoves.get(0));
}

public static BinaryMessage checkAndCorrect(BinaryMessage message,int startIndex){
  boolean parityError=message.cardinality() % 2 != 0;
  int syndrome=getSyndrome(message,startIndex);
  if (syndrome == 0) {
    if (parityError) {
      message.flip(startIndex + 23);
    }
    message.setCRC(CRC.PASSED);
    return message;
  }
  int original=message.getInt(0,22);
  int index=-1;
  int syndromeWeight=3;
  int errors=0;
  while (index < 23) {
    if (index != -1) {
      if (index > 0) {
        message.flip(index - 1);
      }
      message.flip(index);
      syndromeWeight=2;
    }
    syndrome=getSyndrome(message,startIndex);
    if (syndrome > 0) {
      for (int i=0; i < 23; i++) {
        errors=Integer.bitCount(syndrome);
        if (errors <= syndromeWeight) {
          message.xor(12,11,syndrome);
          message.rotateRight(i,startIndex,startIndex + 22);
          if (index >= 0) {
            errors++;
          }
          int corrected=message.getInt(0,22);
          if (Integer.bitCount(original ^ corrected) > 3) {
            message.setCRC(CRC.FAILED_CRC);
            return message;
          }
          message.setCRC(CRC.PASSED);
          return message;
        }
 else {
          message.rotateLeft(startIndex,startIndex + 22);
          syndrome=getSyndrome(message,startIndex);
        }
      }
      index++;
    }
  }
  message.setCRC(CRC.FAILED_CRC);
  return message;
}

public static List<Object> validateAndEvaluate(String viewName,StatementContext statementContext,List<ExprNode> expressions) throws ViewParameterException {
  List<Object> results=new ArrayList<Object>();
  int expressionNumber=0;
  StreamTypeService streamTypeService=new StreamTypeServiceImpl(statementContext.getEngineURI(),false);
  for (  ExprNode expr : expressions) {
    Object result=validateAndEvaluateExpr(viewName,statementContext,expr,streamTypeService,expressionNumber);
    results.add(result);
    expressionNumber++;
  }
  return results;
}

@NotNull public static String parseRelativeDirectory(@NotNull String s) throws SvnBindException {
  s=s.trim();
  int length=s.length();
  String result;
  if (isUnescapedQuote(s,length - 1)) {
    int index=lastUnescapedIndexOf(s,length - 1,'"');
    assertIndex(s,index,"Could not find start quote");
    result=s.substring(index + 1,length - 1);
  }
 else {
    int index=lastUnescapedIndexOf(s,length,' ');
    assertIndex(s,index,"Could not find separating space");
    result=s.substring(index + 1);
  }
  return unescape(result);
}

private String pickEncoding(InputSource inputSource){
  Reader reader=inputSource.getCharacterStream();
  if (reader != null) {
    return CHARACTER_ENCODING;
  }
  String encoding=inputSource.getEncoding();
  return encoding == null ? DEFAULT_ENCODING : encoding;
}

@Override public String generateURL(CategoryDataset dataset,int series,int category){
  String url=this.prefix;
  Comparable seriesKey=dataset.getRowKey(series);
  Comparable categoryKey=dataset.getColumnKey(category);
  boolean firstParameter=!url.contains("?");
  url+=firstParameter ? "?" : "&amp;";
  try {
    url+=this.seriesParameterName + "=" + URLEncoder.encode(seriesKey.toString(),"UTF-8");
    url+="&amp;" + this.categoryParameterName + "="+ URLEncoder.encode(categoryKey.toString(),"UTF-8");
  }
 catch (  UnsupportedEncodingException ex) {
    throw new RuntimeException(ex);
  }
  return url;
}

public boolean isIdleExpire(){
  if (!_lifecycle.isActive())   return true;
  long now=currentTimeActual();
  long idleExpire=_threadIdleExpireTime.get();
  int idleCount=_idleCount.get();
  if (_idleMin < idleCount) {
    long nextIdleExpire=now + _idleTimeout;
    if (_idleMax < idleCount && _idleMin < _idleMax) {
      _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire);
      return true;
    }
 else     if (idleExpire < now && _threadIdleExpireTime.compareAndSet(idleExpire,nextIdleExpire)) {
      return true;
    }
  }
  return false;
}

public void beginDisplay(DisplayEvent event) throws ModelControlException {
  IdentitySubjectModel subjectModel=getSubjectModel();
  PolicyModel model=(PolicyModel)getModel();
  super.beginDisplay(event);
  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);
  Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);
  OptionList entityTypes=createOptionList(supportedEntityTypes);
  entityTypes.add(0,"policy.subject.select.identity.type","");
  menu.setOptions(entityTypes);
  menu.setValue("");
  CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);
  child.restoreStateData();
  OptionList selected=addRemoveModel.getSelectedOptionList();
  OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));
  child.resetStateData();
  addRemoveModel.setAvailableOptionList(possible);
}

private void decode64(ByteBuffer infile,LongArrayPointer a){
  byte[] nbitplanes=new byte[N03];
  byte[] tmagic=new byte[2];
  infile.get(tmagic);
  if (tmagic[0] != CODE_MAGIC[0] || tmagic[1] != CODE_MAGIC[1]) {
    throw new RuntimeException("Compression error");
  }
  this.nx=infile.getInt();
  this.ny=infile.getInt();
  this.scale=infile.getInt();
  long sumall=infile.getLong();
  infile.get(nbitplanes);
  dodecode64(infile,a,nbitplanes);
  a.set(0,sumall);
}

private static void createScript() throws Exception {
  Class.forName("org.h2.Driver");
  Connection conn=DriverManager.getConnection("jdbc:h2:mem:test");
  Statement stat=conn.createStatement();
  stat.execute("CREATE TABLE TEST(NAME VARCHAR)");
  stat.execute("INSERT INTO TEST VALUES('Hello World')");
  stat.execute("SCRIPT TO 'script.sql'");
  stat.close();
  conn.close();
}

public static double cauchy(){
  return Math.tan(Math.PI * (uniform() - 0.5));
}

public void addJobGroupToNeverDelete(String group){
  if (group != null)   jobGroupsToNeverDelete.add(group);
}

private WebDoc createLayout(WebDoc doc,MWorkflow wf,int activeNode,MWFNode[] nodes,ArrayList nodes_ID,int[][] imageMap){
  body b=doc.getBody();
  b.addElement(printWorkflow(activeNode,wf,nodes,nodes_ID,imageMap));
  b.addElement(new hr());
  b.addElement(printDescription(activeNode,wf,nodes,nodes_ID));
  b.addElement(new br());
  b.addElement(printControlPanel(activeNode,wf,nodes,nodes_ID));
  return doc;
}

@Override public void requestPollRead(){
  try {
    requestLoop();
  }
 catch (  Exception e) {
    log.log(Level.WARNING,e.toString(),e);
  }
}

public MultiMatchQueryBuilder field(String field){
  fields.add(field);
  return this;
}

void encode(OutputStream os,boolean include_h) throws IOException {
  int q=params.q;
  os.write(getEncoded(f));
  if (params.basisType == NTRUSigningKeyGenerationParameters.BASIS_TYPE_STANDARD) {
    IntegerPolynomial fPrimeInt=fPrime.toIntegerPolynomial();
    for (int i=0; i < fPrimeInt.coeffs.length; i++) {
      fPrimeInt.coeffs[i]+=q / 2;
    }
    os.write(fPrimeInt.toBinary(q));
  }
 else {
    os.write(getEncoded(fPrime));
  }
  if (include_h) {
    os.write(h.toBinary(q));
  }
}

private void signalNoAcks(){
  lock.lock();
  try {
    allAcksRcvCond.signalAll();
  }
  finally {
    lock.unlock();
  }
}

private static String arrayToString(int[] array){
  StringBuilder sb=new StringBuilder();
  boolean first=true;
  for (  int i : array) {
    if (first) {
      first=false;
    }
 else {
      sb.append(" ");
    }
    sb.append(i);
  }
  return sb.toString();
}

public static byte[] copy(byte[] source,byte[] target){
  int len=source.length;
  if (len > target.length) {
    target=new byte[len];
  }
  System.arraycopy(source,0,target,0,len);
  return target;
}

public double greatCircleDistance(Location location){
  if (location == null) {
    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","greatCircleDistance","missingLocation"));
  }
  double lat1Radians=Math.toRadians(this.latitude);
  double lon1Radians=Math.toRadians(this.longitude);
  double lat2Radians=Math.toRadians(location.latitude);
  double lon2Radians=Math.toRadians(location.longitude);
  if (lat1Radians == lat2Radians && lon1Radians == lon2Radians) {
    return 0;
  }
  double a=Math.sin((lat2Radians - lat1Radians) / 2.0);
  double b=Math.sin((lon2Radians - lon1Radians) / 2.0);
  double c=a * a + Math.cos(lat1Radians) * Math.cos(lat2Radians) * b* b;
  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));
  return Double.isNaN(distanceRadians) ? 0 : distanceRadians;
}

private List<InputSplit> parseManifest(FileSystem fs,Path manifestPath,JobConf job) throws IOException {
  List<InputSplit> splits=null;
  FSDataInputStream fp=fs.open(manifestPath);
  JsonReader reader=new JsonReader(new InputStreamReader(fp,Charsets.UTF_8));
  reader.beginObject();
  while (reader.hasNext()) {
    String name=reader.nextName();
switch (name) {
case VERSION_JSON_KEY:
      job.set(DynamoDBConstants.EXPORT_FORMAT_VERSION,String.valueOf(reader.nextInt()));
    break;
case ENTRIES_JSON_KEY:
  splits=readEntries(reader,job);
break;
default :
log.info("Skipping a JSON key in the manifest file: " + name);
reader.skipValue();
break;
}
}
reader.endObject();
if (splits == null) {
return Collections.emptyList();
}
return splits;
}

@Override public final void readFully(byte ba[],int off,int len) throws IOException {
  dis.readFully(ba,off,len);
}

public void fireOperatorMoved(Operator operator){
  List<Operator> list=new LinkedList<>();
  list.add(operator);
  fireOperatorsMoved(list);
}

public void remove(int i){
  individuals.remove(i);
}

@Override public void modifyVariableId(String oldId,String newId){
  if (baseVar.equals(oldId)) {
    baseVar=newId.replace("'","");
  }
}

public static String repeat(String str,int count){
  final StringBuilder result=new StringBuilder(str.length() * count);
  for (int i=0; i < count; i++) {
    result.append(str);
  }
  return result.toString();
}

private void waitForStateChange(int maxTTW) throws MqttException {
synchronized (waiter) {
    if (!donext) {
      try {
        waiter.wait(maxTTW);
      }
 catch (      InterruptedException e) {
        log("timed out");
        e.printStackTrace();
      }
      if (ex != null) {
        throw (MqttException)ex;
      }
    }
    donext=false;
  }
}

@Override public Node pickNode(final InferenceGraph g){
  treeCache.clear();
  Pair<List<Node>,Integer> bestPath=noPath;
  for (  Node n : g.nodes) {
    if (!Collections.disjoint(n.data,varsToSolve)) {
      Pair<List<Node>,Integer> path=computeTreeToLeafs(n);
      if (path.snd < bestPath.snd) {
        bestPath=path;
      }
    }
  }
  if (bestPath == noPath) {
    throw new NodeNotFoundException(g);
  }
  return bestPath.fst.head;
}

public AddUserFields(){
  m_attributeSpecs=new ArrayList<AttributeSpec>();
}

private Integer parseInt(String s,int flags){
  if (convertColorNames(flags)) {
    String c=Descriptor.convertColorName(s);
    if (c != null) {
      s=c;
    }
  }
  try {
    if (hasLeadingZeros(s)) {
      return null;
    }
 else {
      return Integer.decode(s);
    }
  }
 catch (  NumberFormatException e) {
    return null;
  }
}

private Rectangle findBounds(int AD_WF_Node_ID){
  for (int i=0; i < m_nodes.size(); i++) {
    WFNode node=(WFNode)m_nodes.get(i);
    if (node.getAD_WF_Node_ID() == AD_WF_Node_ID)     return node.getBounds();
  }
  return null;
}

protected void stopWorkers(Collection<WorkerThread> workers){
  if (workers == null) {
    workers=this.workers;
  }
  final Iterator<WorkerThread> iter=workers.iterator();
  while (iter.hasNext()) {
    final WorkerThread worker=iter.next();
    if ((worker.getStatus() & (WorkerThread.sENDED | WorkerThread.sENDING)) == 0) {
      worker.signalShutdown();
      runningWorkers--;
    }
  }
}

public ArrayList<Mapping> cloneFrame(){
  if (stack[top] == null)   return null;
  ArrayList<Mapping> clone=new ArrayList<Mapping>();
  for (Mapping map=topOfFrame(); map != null; map=next()) {
    clone.add(map);
  }
  return clone;
}

private static int computeHashCode(int seed,Object... objects){
  if (objects == null || objects.length == 0) {
    return seed * HashCode.PRIME;
  }
  int hc=seed;
  for (  Object object : objects) {
    hc=HashCode.PRIME * hc;
    if (object instanceof byte[]) {
      hc+=Arrays.hashCode((byte[])object);
    }
 else     if (object instanceof boolean[]) {
      hc+=Arrays.hashCode((boolean[])object);
    }
 else     if (object instanceof short[]) {
      hc+=Arrays.hashCode((short[])object);
    }
 else     if (object instanceof int[]) {
      hc+=Arrays.hashCode((int[])object);
    }
 else     if (object instanceof long[]) {
      hc+=Arrays.hashCode((long[])object);
    }
 else     if (object instanceof float[]) {
      hc+=Arrays.hashCode((float[])object);
    }
 else     if (object instanceof double[]) {
      hc+=Arrays.hashCode((double[])object);
    }
 else     if (object instanceof char[]) {
      hc+=Arrays.hashCode((char[])object);
    }
 else     if (object instanceof Object[]) {
      hc+=Arrays.hashCode((Object[])object);
    }
 else     if (object != null) {
      hc+=object.hashCode();
    }
  }
  return hc;
}

protected float calculateStateTransitionPercentage(String name,boolean flapping){
  int flapInterval=getFlapInterval(name);
  LinkedList<Boolean> list=getFlaps(name);
  float lowWeight=getFlapLowWeight(name);
  float highWeight=getFlapHighWeight(name);
  float weightRange=highWeight - lowWeight;
  float result=0;
  for (int i=list.size() - 1; i >= 0; i--) {
    boolean thisFlap=list.get(i);
    if (flapping != thisFlap) {
      float weight=lowWeight + (weightRange * i / (flapInterval - 1));
      result+=weight;
    }
  }
  return result / flapInterval;
}

public static String mangleName(Method method,boolean isFull){
  StringBuffer sb=new StringBuffer();
  sb.append(method.getName());
  Class[] params=method.getParameterTypes();
  for (int i=0; i < params.length; i++) {
    sb.append('_');
    sb.append(mangleClass(params[i],isFull));
  }
  return sb.toString();
}

private void saveState(){
  savedStartOffset=offsetAttribute.startOffset();
  savedEndOffset=offsetAttribute.endOffset();
  hasIllegalOffsets=(savedEndOffset - savedStartOffset != termAttribute.length());
  savedType=typeAttribute.type();
  if (savedBuffer.length < termAttribute.length()) {
    savedBuffer=new char[ArrayUtil.oversize(termAttribute.length(),Character.BYTES)];
  }
  System.arraycopy(termAttribute.buffer(),0,savedBuffer,0,termAttribute.length());
  iterator.text=savedBuffer;
  hasSavedState=true;
}

public String consumeTo(String seq){
  int offset=queue.indexOf(seq,pos);
  if (offset != -1) {
    String consumed=queue.substring(pos,offset);
    pos+=consumed.length();
    return consumed;
  }
 else {
    return remainder();
  }
}

private void printOutDefinedIPs(List<String> definedIPs){
  List<String> ipList=new ArrayList<>();
  for (  String ip : definedIPs) {
    if (ip.indexOf(':') != -1) {
      ipList.add("|- IPv6: " + ip);
    }
 else {
      ipList.add("|- IPv4: " + ip);
    }
  }
  Collections.sort(ipList);
  for (  String ip : ipList) {
    log.info(ip);
  }
}

private void disposeCodec(IoSession session){
  disposeEncoder(session);
  disposeDecoder(session);
  disposeDecoderOut(session);
}

private static int transpositions(final CharSequence first,final CharSequence second){
  int transpositions=0;
  for (int i=0; i < first.length(); i++) {
    if (first.charAt(i) != second.charAt(i)) {
      transpositions++;
    }
  }
  return transpositions / 2;
}

@Override public Object parseObject(final String source,final ParsePosition pos){
  return parser.parseObject(source,pos);
}

@Override public default Stream<TimeSeriesCollection> stream(){
  return StreamSupport.stream(spliterator(),false);
}

private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (xmlWriter.getPrefix(namespace) == null) {
    xmlWriter.writeNamespace(prefix,namespace);
    xmlWriter.setPrefix(prefix,namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
}

private ManifestModInfo registerMod(File file,Manifest manifest){
  ManifestModInfo mod=loadMod(file,manifest);
  if (mod != null) {
    if (idMap.containsKey(mod.getModID())) {
      ModInfo mod2=idMap.get(mod.getModID());
      duplicates.put(mod.getModID(),mod);
      duplicates.put(mod.getModID(),mod2);
      log.error("Duplicate mod IDs for files '%s' and '%s'",mod.getModFile(),mod2.getModFile());
    }
 else {
      modList.add(mod);
      idMap.put(mod.getModID(),mod);
    }
  }
  return mod;
}

protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){
  List blocks=container.getBlocks();
  Block b=(Block)blocks.get(0);
  Size2D s=b.arrange(g2,RectangleConstraint.NONE);
  b.setBounds(new Rectangle2D.Double(0.0,0.0,s.width,s.height));
  return new Size2D(s.width,s.height);
}

public static boolean isContentType(String contentType,Message message){
  if (contentType == null) {
    return message.getContentType() == null;
  }
 else {
    return contentType.equals(message.getContentType());
  }
}

private static X509Certificate generateCertificate(String dn,int days,String applicationUri,KeyPair keys,org.opcfoundation.ua.transport.security.KeyPair issuerKeys,String... hostNames) throws GeneralSecurityException, IOException {
  PrivateKey privkey=keys.getPrivate();
  PublicKey publicKey=keys.getPublic();
  return generateCertificate(dn,days,applicationUri,publicKey,privkey,issuerKeys,hostNames);
}

@SuppressWarnings("unused") public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {
  submitCycle=true;
  AbstractAuditModel model=(AbstractAuditModel)getModel();
  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);
  String subConfigName=(String)getPageSessionAttribute(AUDIT_HANDLER_NAME);
  try {
    Map orig=model.getEventHandlerAttributeValues(subConfigName);
    Map values=ps.getAttributeValues(orig,true,true,model);
    model.setEventHandlerAttributeValues(subConfigName,values);
    backToProfileViewBean();
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(TYPE_ERROR,ERROR_MESSAGE,e.getMessage());
    forwardTo();
  }
}

private String checkAllDependencies(HashMap<String,ModuleDescriptor> modlist){
  for (  ModuleDescriptor md : modlist.values()) {
    String res=checkDependencies(md,modlist);
    if (!res.isEmpty()) {
      return res;
    }
  }
  return "";
}

public void childrenRemoved(BeanContextMembershipEvent bcme){
  for (Iterator it=bcme.iterator(); it.hasNext(); ) {
    findAndUndo(it.next());
  }
}

public static void checkDirectoryIsWriteable(@NotNull File directory) throws IOException {
  while (!directory.exists() || !directory.isDirectory()) {
    directory=directory.getParentFile();
  }
  if (!directory.canWrite()) {
    throw new IOException("Cannot write to folder: " + directory.getAbsolutePath());
  }
}

public String toString(){
  StringBuilder s=new StringBuilder();
  boolean appended=false;
  if (this.weeks != 0 || appended) {
    appended=true;
    s.append(this.weeks + " Wochen ");
  }
  if (this.days != 0 || appended) {
    appended=true;
    s.append(this.days + " Tage ");
  }
  if (this.hours != 0 || appended) {
    appended=true;
    s.append(this.hours + " Stunden ");
  }
  if (this.minutes != 0 || appended) {
    appended=true;
    s.append(this.minutes + " Minuten ");
  }
  if (this.seconds != 0 || appended) {
    appended=true;
    s.append(this.seconds + " Sekunden ");
  }
  if (this.milliseconds != 0 || appended) {
    appended=true;
    s.append(this.milliseconds + " Milisekunden");
  }
  return s.toString();
}

private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {
  s.defaultWriteObject();
}

public void startEntity(String name) throws org.xml.sax.SAXException {
}

public static boolean isJavaKeyword(String name){
  return tokens.contains(name);
}

protected String extractImportUrl(final Matcher matcher){
  return matcher.group(INDEX_URL);
}

@Override public boolean equals(Object that){
  if (this == that) {
    return true;
  }
  if (that == null) {
    return false;
  }
  if (getClass() != that.getClass()) {
    return false;
  }
  Collator other=(Collator)that;
  return ((strength == other.strength) && (decmp == other.decmp));
}

public void runTest() throws Throwable {
  Document doc;
  NodeList emList;
  Node emNode;
  CharacterData emText;
  Node nullChild;
  doc=(Document)load("hc_staff",false);
  emList=doc.getElementsByTagName("em");
  emNode=emList.item(0);
  emText=(CharacterData)emNode.getFirstChild();
  nullChild=emText.getFirstChild();
  assertNull("nullChild",nullChild);
}

Type renameTypeAsType(Type type){
  if (type == null) {
    return null;
  }
  if (type.getSort() == Type.OBJECT) {
    String in=type.getInternalName();
    String newIn=renameInternalType(in);
    if (newIn != in) {
      return Type.getType("L" + newIn + ";");
    }
  }
 else   if (type.getSort() == Type.ARRAY) {
    StringBuilder sb=new StringBuilder();
    for (int n=type.getDimensions(); n > 0; n--) {
      sb.append('[');
    }
    sb.append(renameType(type.getElementType()));
    return Type.getType(sb.toString());
  }
  return type;
}

public static void writeFileList(XMLOutput xmlOutput,String tagName,Iterable<File> listValues) throws IOException {
  if (listValues != null) {
    writeFileList(xmlOutput,tagName,listValues.iterator());
  }
}

public DPolicyConstraints(JDialog parent){
  super(parent);
  setTitle(res.getString("DPolicyConstraints.Title"));
  initComponents();
}

@PreAuthorize(SpringEvalExpressions.HAS_AUTH_SYSTEM_ADMIN) @Override public ResponseEntity<Collection<String>> invalidateCaches(){
  final Collection<String> cacheNames=cacheManager.getCacheNames();
  LOGGER.info("Invalidating caches {}",cacheNames);
  cacheNames.forEach(null);
  return ResponseEntity.ok(cacheNames);
}

public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,"null");
    out.endTag(null,"null");
    return;
  }
  out.startTag(null,"byte-array");
  if (name != null) {
    out.attribute(null,"name",name);
  }
  final int N=val.length;
  out.attribute(null,"num",Integer.toString(N));
  StringBuilder sb=new StringBuilder(val.length * 2);
  for (int i=0; i < N; i++) {
    int b=val[i];
    int h=b >> 4;
    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));
    h=b & 0xff;
    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));
  }
  out.text(sb.toString());
  out.endTag(null,"byte-array");
}

public static void writeFile(final File destination,final List<String> contents) throws IOException {
  final BufferedWriter bw=new BufferedWriter(new FileWriter(destination));
  try {
    for (    String line : contents) {
      bw.write(line);
      bw.newLine();
    }
    bw.flush();
  }
  finally {
    bw.close();
  }
}

public void cancelRequestsByTAG(Object TAG,boolean mayInterruptIfRunning){
  if (TAG == null) {
    return;
  }
  for (  List<RequestHandle> requestList : requestMap.values()) {
    if (requestList != null) {
      for (      RequestHandle requestHandle : requestList) {
        if (TAG.equals(requestHandle.getTag()))         requestHandle.cancel(mayInterruptIfRunning);
      }
    }
  }
}

public static void drawSnapHorizontalMargin(ViewTransform transform,Graphics2D g,int x1,int x2,int y1,String text,boolean textOver){
  Canvas c=new Canvas();
  FontMetrics fm=c.getFontMetrics(sFont);
  g.setFont(sFont);
  int padding=transform.getSwingDimension(4);
  Rectangle2D bounds=fm.getStringBounds(text,g);
  int tw=(int)bounds.getWidth();
  int offset=6 * CONNECTION_ARROW_SIZE;
  if (x1 > x2) {
    int temp=x1;
    x1=x2;
    x2=temp;
  }
  int w=((x2 - x1) - (tw + 2 * padding)) / 2;
  if (w <= padding) {
    g.drawLine(x1,y1,x2,y1);
    if (textOver) {
      offset=-1 * offset / 2;
    }
    g.drawString(text,x1 + w + padding,y1 + offset);
  }
 else {
    g.drawLine(x1,y1,x1 + w,y1);
    g.drawLine(x2 - w,y1,x2,y1);
    g.drawString(text,x1 + w + padding,(int)(y1 + (bounds.getHeight() / 2)));
  }
  g.drawLine(x1,y1 - CONNECTION_ARROW_SIZE,x1,y1 + CONNECTION_ARROW_SIZE);
  g.drawLine(x2,y1 - CONNECTION_ARROW_SIZE,x2,y1 + CONNECTION_ARROW_SIZE);
}

public static GenericRecord subsetRecord(GenericRecord record,Schema subsetSchema){
  return subsetRecord(record,subsetSchema,null);
}

static public void queueOperation(Context context,OperationInfo args){
  args.calculateScheduledTime();
synchronized (sWorkQueue) {
    sWorkQueue.add(args);
    sWorkQueue.notify();
  }
  context.startService(new Intent(context,AsyncQueryServiceHelper.class));
}

private static Cell[] interpret(String string){
  Cell[] cells=new Cell[9];
  for (int i=0; i < string.length(); i++) {
    int dig=string.charAt(i) - '1';
    int col=dig % 3;
    int row=dig / 3;
    cells[i]=new Cell(col,row);
  }
  return cells;
}

public Shape transform(Shape shape){
  Rectangle2D bounds=shape.getBounds2D();
  Point2D center=new Point2D.Double(bounds.getCenterX(),bounds.getCenterY());
  Point2D newCenter=transform(center);
  double dx=newCenter.getX() - center.getX();
  double dy=newCenter.getY() - center.getY();
  AffineTransform at=AffineTransform.getTranslateInstance(dx,dy);
  return at.createTransformedShape(shape);
}

public void list(PrintWriter out,int indent){
  for (int i=0; i < indent; i++) {
    out.print(" ");
  }
  out.println(this);
}

private void init(){
  setTitle("New Competitive Group");
  compPropertiesPanel=CompetitivePropertiesPanel.createCompetitivePropertiesPanel(networkPanel,CompetitivePropsPanelType.CREATE_GROUP);
  tabLogic.add(compPropertiesPanel);
  layoutPanel=new MainLayoutPanel(false,this);
  layoutPanel.setCurrentLayout(CompetitiveGroup.DEFAULT_LAYOUT);
  tabLayout.add(layoutPanel);
  tabbedPane.addTab("Logic",tabLogic);
  tabbedPane.addTab("Layout",layoutPanel);
  setContentPane(tabbedPane);
  Action helpAction=new ShowHelpAction(compPropertiesPanel.getHelpPath());
  addButton(new JButton(helpAction));
}

public static RevocationStatus check(X509Certificate cert,X509Certificate issuerCert) throws IOException, CertPathValidatorException {
  CertId certId=null;
  URI responderURI=null;
  try {
    X509CertImpl certImpl=X509CertImpl.toImpl(cert);
    responderURI=getResponderURI(certImpl);
    if (responderURI == null) {
      throw new CertPathValidatorException("No OCSP Responder URI in certificate");
    }
    certId=new CertId(issuerCert,certImpl.getSerialNumberObject());
  }
 catch (  CertificateException|IOException e) {
    throw new CertPathValidatorException("Exception while encoding OCSPRequest",e);
  }
  OCSPResponse ocspResponse=check(Collections.singletonList(certId),responderURI,issuerCert,null,null,Collections.<Extension>emptyList());
  return (RevocationStatus)ocspResponse.getSingleResponse(certId);
}

public static CompositeType forAlphaComposite(AlphaComposite ac){
switch (ac.getRule()) {
case AlphaComposite.CLEAR:
    return Clear;
case AlphaComposite.SRC:
  if (ac.getAlpha() >= 1.0f) {
    return SrcNoEa;
  }
 else {
    return Src;
  }
case AlphaComposite.DST:
return Dst;
case AlphaComposite.SRC_OVER:
if (ac.getAlpha() >= 1.0f) {
return SrcOverNoEa;
}
 else {
return SrcOver;
}
case AlphaComposite.DST_OVER:
return DstOver;
case AlphaComposite.SRC_IN:
return SrcIn;
case AlphaComposite.DST_IN:
return DstIn;
case AlphaComposite.SRC_OUT:
return SrcOut;
case AlphaComposite.DST_OUT:
return DstOut;
case AlphaComposite.SRC_ATOP:
return SrcAtop;
case AlphaComposite.DST_ATOP:
return DstAtop;
case AlphaComposite.XOR:
return AlphaXor;
default :
throw new InternalError("Unrecognized alpha rule");
}
}

public void removeTrackingIcon(Object tag){
  if (trackingIcons != null && trackingIcons.remove(tag)) {
    repaint();
  }
}

private List findPhonemes(){
  Set set=new HashSet();
  for (int i=0; i < stateMachine.length; i++) {
    if (stateMachine[i] instanceof FinalState) {
      FinalState fstate=(FinalState)stateMachine[i];
      if (fstate.phoneList != null) {
        for (int j=0; j < fstate.phoneList.length; j++) {
          set.add(fstate.phoneList[j]);
        }
      }
    }
  }
  return new ArrayList(set);
}

public static File removeParent(File parent,File file){
  String absolutePath=file.getAbsolutePath();
  String parentAbsolutePath=parent.getAbsolutePath();
  String newPath=absolutePath.replace(parentAbsolutePath + "/","");
  return new File(newPath);
}

public static boolean almostEqual(double a,double b,double delta){
  return Math.abs(a - b) <= delta;
}

public void endElement(){
  nss.popContext();
}

public void test_fill$BIIB(){
  byte val=Byte.MAX_VALUE;
  byte d[]=new byte[1000];
  Arrays.fill(d,400,d.length,val);
  for (int i=0; i < 400; i++)   assertTrue("Filled elements not in range",!(d[i] == val));
  for (int i=400; i < d.length; i++)   assertTrue("Failed to fill byte array correctly",d[i] == val);
  int result;
  try {
    Arrays.fill(new byte[2],2,1,(byte)27);
    result=0;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    result=1;
  }
catch (  IllegalArgumentException e) {
    result=2;
  }
  assertEquals("Wrong exception1",2,result);
  try {
    Arrays.fill(new byte[2],-1,1,(byte)27);
    result=0;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    result=1;
  }
catch (  IllegalArgumentException e) {
    result=2;
  }
  assertEquals("Wrong exception2",1,result);
  try {
    Arrays.fill(new byte[2],1,4,(byte)27);
    result=0;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    result=1;
  }
catch (  IllegalArgumentException e) {
    result=2;
  }
  assertEquals("Wrong exception",1,result);
}

private JsonWriter open(int empty,String openBracket) throws IOException {
  beforeValue();
  push(empty);
  out.write(openBracket);
  return this;
}

private double calculateLog(double value){
  return Math.log(value) / this.baseLog;
}

@Override public boolean uploadFile(String source,String dest){
  FileInputStream fis;
  try {
    File file=new File(source);
    fis=new FileInputStream(file);
    mDBApi.putFileOverwrite(dest,fis,file.length(),null);
    fis.close();
    return true;
  }
 catch (  DropboxUnlinkedException e) {
    Log.d(String.valueOf(R.string.app_name),"User has unlinked.",e);
    return false;
  }
catch (  DropboxException e) {
    Log.d(String.valueOf(R.string.app_name),"Something went wrong while uploading.",e);
    return false;
  }
catch (  FileNotFoundException e) {
    Log.d(String.valueOf(R.string.app_name),"File not found.",e);
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}

private File createZipFileHandle() throws IOException {
  File zipFile=File.createTempFile("test","zip",tmpOutputFolder.getRoot());
  assertTrue(zipFile.delete());
  return zipFile;
}

public boolean removeHandler(String columnName){
  if (m_overrides == null)   return false;
 else   return m_overrides.remove(columnName) != null;
}

public boolean isEmpty(){
  return (tag == null || tag.isEmpty()) && images.size() == 0;
}

@SuppressWarnings("unchecked") private void restoreBadges(){
  Bundle restoredBundle=savedInstanceState;
  if (restoredBundle != null) {
    if (restoredBundle.containsKey(BADGE_FULL_TEXT_KEY)) {
      shouldShowBadgeWithNinePlus=restoredBundle.getBoolean(BADGE_FULL_TEXT_KEY);
    }
    if (restoredBundle.containsKey(BUDGES_ITEM_BUNDLE_KEY)) {
      badgeSaveInstanceHashMap=(HashMap<Integer,Object>)savedInstanceState.getSerializable(BUDGES_ITEM_BUNDLE_KEY);
      if (badgeSaveInstanceHashMap != null) {
        for (        Integer integer : badgeSaveInstanceHashMap.keySet()) {
          BadgeHelper.forceShowBadge(badgeList.get(integer),(BadgeItem)badgeSaveInstanceHashMap.get(integer),shouldShowBadgeWithNinePlus);
        }
      }
    }
  }
}

public void touch(){
  touch=System.currentTimeMillis();
  if (worker != null) {
    worker.touch();
  }
}

public CatalogEntry(String name,Vector args) throws CatalogException {
  Integer iType=(Integer)entryTypes.get(name);
  if (iType == null) {
    throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE);
  }
  int type=iType.intValue();
  try {
    Integer iArgs=(Integer)entryArgs.get(type);
    if (iArgs.intValue() != args.size()) {
      throw new CatalogException(CatalogException.INVALID_ENTRY);
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE);
  }
  entryType=type;
  this.args=args;
}

public void addMsgWaiting(MwiType type,int count,MwiProfile profile,boolean storeMessage){
  if (count > 255) {
    count=255;
  }
  messages_.add(new MsgWaiting(type,count,profile,storeMessage));
}

private void pushStack(int newTop){
  if (stackSize == stack.length) {
    int[] newStack=new int[stackSize * 2];
    int[] newPathIndices=new int[stackSize * 2];
    String[] newPathNames=new String[stackSize * 2];
    System.arraycopy(stack,0,newStack,0,stackSize);
    System.arraycopy(pathIndices,0,newPathIndices,0,stackSize);
    System.arraycopy(pathNames,0,newPathNames,0,stackSize);
    stack=newStack;
    pathIndices=newPathIndices;
    pathNames=newPathNames;
  }
  stack[stackSize++]=newTop;
}

private static void logHierarchy(String prefix,ClassLoader classLoader){
  if (!isDiagnosticsEnabled()) {
    return;
  }
  ClassLoader systemClassLoader;
  if (classLoader != null) {
    final String classLoaderString=classLoader.toString();
    logDiagnostic(prefix + objectId(classLoader) + " == '"+ classLoaderString+ "'");
  }
  try {
    systemClassLoader=ClassLoader.getSystemClassLoader();
  }
 catch (  SecurityException ex) {
    logDiagnostic(prefix + "Security forbids determining the system classloader.");
    return;
  }
  if (classLoader != null) {
    StringBuffer buf=new StringBuffer(prefix + "ClassLoader tree:");
    for (; ; ) {
      buf.append(objectId(classLoader));
      if (classLoader == systemClassLoader) {
        buf.append(" (SYSTEM) ");
      }
      try {
        classLoader=classLoader.getParent();
      }
 catch (      SecurityException ex) {
        buf.append(" --> SECRET");
        break;
      }
      buf.append(" --> ");
      if (classLoader == null) {
        buf.append("BOOT");
        break;
      }
    }
    logDiagnostic(buf.toString());
  }
}

public void addGossipMember(GossipMember member){
  gossipMembers.add(member);
}

public static Collection<String> logFiles(){
  Collection<String> res=new ArrayList<>(fileAppenders.size());
  for (  FileAppender a : fileAppenders)   res.add(a.getFile());
  return res;
}

public boolean isCaseSensitive(){
  return m_caseSensitiveBox.isSelected();
}

public boolean isNamespaceNode(Node n){
  if (Node.ATTRIBUTE_NODE == n.getNodeType()) {
    String attrName=n.getNodeName();
    return (attrName.startsWith("xmlns:") || attrName.equals("xmlns"));
  }
  return false;
}

@Override public int hashCode(){
  int hash=type.hashCode();
  if (name != null)   hash^=name.hashCode();
  if (actions != null)   hash^=actions.hashCode();
  return hash;
}

public SubConfigModelImpl(HttpServletRequest req,String serviceName,String parentId,Map map) throws AMConsoleException {
  super(req,map);
  this.serviceName=serviceName;
  this.parentId=parentId;
  subConfigMeta=new SubConfigMeta(serviceName,this);
  subConfigMeta.setParentId(parentId);
  displayName=subConfigMeta.getParentDisplayName();
}

@Override public boolean equals(Object obj){
  if (!(obj instanceof PolynomialFunction2D)) {
    return false;
  }
  PolynomialFunction2D that=(PolynomialFunction2D)obj;
  return Arrays.equals(this.coefficients,that.coefficients);
}

public static int convertToColorInt(String a,String r,String g,String b,boolean useAlpha){
  int alpha=useAlpha ? Integer.parseInt(a,16) : 0xff;
  int red=Integer.parseInt(r,16);
  int green=Integer.parseInt(g,16);
  int blue=Integer.parseInt(b,16);
  return Color.argb(useAlpha ? alpha : -1,red,green,blue);
}

@Override public void onAction(){
  onAction(ActionType.PICK);
}

public AbstractBinaryTraversal(IBinaryTreeNode<T> node){
  if (node == null) {
    throw new NullPointerException("AbstractBinaryTraversal received null starting point");
  }
  stack.add(new Moment(node,initialPhase()));
  advance();
}

@Override public void endElement(String uri,String localName,String qName) throws SAXException {
  if (qName.equals(TAG_ROOT)) {
  }
 else   if (qName.equals(TAG_GROUP) || qName.equals(TAG_PROPERTY)) {
    SettingsItem item=itemStack.remove(itemStack.size() - 1);
    settingsItems.put(item.getKey(),item);
  }
 else {
    throw new SAXException("Unknown tag or usage: " + localName);
  }
}

public void cancelAll(){
  endpoint.cancelAll();
}

@Override public double value(int attIndex){
  int index=locateIndex(attIndex);
  if ((index >= 0) && (m_Indices[index] == attIndex)) {
    return m_AttValues[index];
  }
 else {
    return 0.0;
  }
}

public void initialize(Context context,TimePickerDialog timePickerDialog,int initialHoursOfDay,int initialMinutes,boolean is24HourMode){
  if (mTimeInitialized) {
    Log.e(TAG,"Time has already been initialized.");
    return;
  }
  mTimePickerDialog=timePickerDialog;
  mIs24HourMode=is24HourMode;
  mHideAmPm=mAccessibilityManager.isTouchExplorationEnabled() || mIs24HourMode;
  mCircleView.initialize(context,mHideAmPm);
  mCircleView.invalidate();
  if (!mHideAmPm) {
    mAmPmCirclesView.initialize(context,initialHoursOfDay < 12 ? AM : PM);
    mAmPmCirclesView.invalidate();
  }
  Resources res=context.getResources();
  int[] hours={12,1,2,3,4,5,6,7,8,9,10,11};
  int[] hours_24={0,13,14,15,16,17,18,19,20,21,22,23};
  int[] minutes={0,5,10,15,20,25,30,35,40,45,50,55};
  String[] hoursTexts=new String[12];
  String[] innerHoursTexts=new String[12];
  String[] minutesTexts=new String[12];
  for (int i=0; i < 12; i++) {
    hoursTexts[i]=is24HourMode ? String.format("%02d",hours_24[i]) : String.format("%d",hours[i]);
    innerHoursTexts[i]=String.format("%d",hours[i]);
    minutesTexts[i]=String.format("%02d",minutes[i]);
  }
  mHourRadialTextsView.initialize(res,hoursTexts,(is24HourMode ? innerHoursTexts : null),mHideAmPm,true);
  mHourRadialTextsView.setSelection(is24HourMode ? initialHoursOfDay : hours[initialHoursOfDay % 12]);
  mHourRadialTextsView.invalidate();
  mMinuteRadialTextsView.initialize(res,minutesTexts,null,mHideAmPm,false);
  mMinuteRadialTextsView.setSelection(initialMinutes);
  mMinuteRadialTextsView.invalidate();
  setValueForItem(HOUR_INDEX,initialHoursOfDay);
  setValueForItem(MINUTE_INDEX,initialMinutes);
  int hourDegrees=(initialHoursOfDay % 12) * HOUR_VALUE_TO_DEGREES_STEP_SIZE;
  mHourRadialSelectorView.initialize(context,mHideAmPm,is24HourMode,true,hourDegrees,isHourInnerCircle(initialHoursOfDay));
  int minuteDegrees=initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
  mMinuteRadialSelectorView.initialize(context,mHideAmPm,false,false,minuteDegrees,false);
  mTimeInitialized=true;
}

protected void decodeBitmapData(final GifFrame frame,byte[] dstPixels){
  if (frame != null) {
    rawData.position(frame.bufferFrameStart);
  }
  final int nullCode=-1;
  final int npix=(frame == null) ? width * height : frame.iw * frame.ih;
  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;
  if (dstPixels == null || dstPixels.length < npix) {
    dstPixels=new byte[npix];
  }
  if (prefix == null) {
    prefix=new short[MAX_STACK_SIZE];
  }
  if (suffix == null) {
    suffix=new byte[MAX_STACK_SIZE];
  }
  if (pixelStack == null) {
    pixelStack=new byte[MAX_STACK_SIZE + 1];
  }
  data_size=read();
  clear=1 << data_size;
  end_of_information=clear + 1;
  available=clear + 2;
  old_code=nullCode;
  code_size=data_size + 1;
  code_mask=(1 << code_size) - 1;
  for (code=0; code < clear; code++) {
    prefix[code]=0;
    suffix[code]=(byte)code;
  }
  datum=bits=count=first=top=pi=bi=0;
  for (i=0; i < npix; ) {
    if (top == 0) {
      if (bits < code_size) {
        if (count == 0) {
          count=readBlock();
          if (count <= 0) {
            break;
          }
          bi=0;
        }
        datum+=((block[bi]) & 0xff) << bits;
        bits+=8;
        bi++;
        count--;
        continue;
      }
      code=datum & code_mask;
      datum>>=code_size;
      bits-=code_size;
      if ((code > available) || (code == end_of_information)) {
        break;
      }
      if (code == clear) {
        code_size=data_size + 1;
        code_mask=(1 << code_size) - 1;
        available=clear + 2;
        old_code=nullCode;
        continue;
      }
      if (old_code == nullCode) {
        pixelStack[top++]=suffix[code];
        old_code=code;
        first=code;
        continue;
      }
      in_code=code;
      if (code == available) {
        pixelStack[top++]=(byte)first;
        code=old_code;
      }
      while (code > clear) {
        pixelStack[top++]=suffix[code];
        code=prefix[code];
      }
      first=(suffix[code]) & 0xff;
      if (available >= MAX_STACK_SIZE) {
        break;
      }
      pixelStack[top++]=(byte)first;
      prefix[available]=(short)old_code;
      suffix[available]=(byte)first;
      available++;
      if (((available & code_mask) == 0) && (available < MAX_STACK_SIZE)) {
        code_size++;
        code_mask+=available;
      }
      old_code=in_code;
    }
    top--;
    dstPixels[pi++]=pixelStack[top];
    i++;
  }
  for (i=pi; i < npix; i++) {
    dstPixels[i]=0;
  }
}

public synchronized String findValue(String k){
  if (k == null) {
    for (int i=nkeys; --i >= 0; )     if (keys[i] == null)     return values[i];
  }
 else   for (int i=nkeys; --i >= 0; ) {
    if (k.equalsIgnoreCase(keys[i]))     return values[i];
  }
  return null;
}

public static byte[] decode(String input) throws ParseException {
  if (input.length() == 0) {
    return new byte[0];
  }
  byte[] input58=new byte[input.length()];
  for (int i=0; i < input.length(); ++i) {
    char c=input.charAt(i);
    int digit=c < 128 ? INDEXES[c] : -1;
    if (digit < 0) {
      throw new ParseException("Illegal character " + c + " at position "+ i,i);
    }
    input58[i]=(byte)digit;
  }
  int zeros=0;
  while (zeros < input58.length && input58[zeros] == 0) {
    ++zeros;
  }
  byte[] decoded=new byte[input.length()];
  int outputStart=decoded.length;
  for (int inputStart=zeros; inputStart < input58.length; ) {
    decoded[--outputStart]=divmod(input58,inputStart,58,256);
    if (input58[inputStart] == 0) {
      ++inputStart;
    }
  }
  while (outputStart < decoded.length && decoded[outputStart] == 0) {
    ++outputStart;
  }
  return Arrays.copyOfRange(decoded,outputStart - zeros,decoded.length);
}

TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){
  m_pattern=pat;
  m_template=template;
  m_stepPattern=pattern;
  m_targetString=m_stepPattern.getTargetString();
  m_wild=m_targetString.equals("*");
}

public boolean delete() throws IOException {
  if (closed.compareAndSet(false,true)) {
    close(false);
    boolean success=allocatedNodesList.delete();
    success&=nioFile.delete();
    return success;
  }
  return false;
}

public static boolean hasNoPrefix(final AnnotatedTypeMirror annoType){
  if (annoType == null) {
    return true;
  }
  for (  AnnotationMirror mirror : annoType.getAnnotations()) {
    if (!hasNoPrefix(mirror)) {
      return false;
    }
  }
  return true;
}

public static void tryFormatSatisfiability(String format) throws IllegalFormatException {
  @SuppressWarnings("unused") String unused=String.format(format,(Object[])null);
}

public static IgniteLogger logger(GridKernalContext ctx,AtomicReference<IgniteLogger> logRef,Class<?> cls){
  IgniteLogger log=logRef.get();
  if (log == null) {
    logRef.compareAndSet(null,ctx.log(cls));
    log=logRef.get();
  }
  return log;
}

public byte receiveOneByte(){
  Log.d(TAG,"receiveOneByte() entrance");
  try {
    acquireLock();
    mServerSocket.receive(mReceivePacket);
    Log.d(TAG,"receive: " + (0 + mReceivePacket.getData()[0]));
    return mReceivePacket.getData()[0];
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return Byte.MIN_VALUE;
}

public static List<ConstraintViolation> check(Resource resource,ProgressMonitor monitor){
  return check(resource,SPIN.constraint,null,monitor);
}

public static boolean isValidImdbId(String imdbId){
  if (StringUtils.isEmpty(imdbId)) {
    return false;
  }
  return imdbId.matches("tt\\d{7}");
}

protected void showRecordedVideo(){
  String absPath=mCurrentVideoFile.getAbsolutePath();
  Intent intent=new Intent(this,PlayerActivity.class);
  intent.putExtra(PlayerActivity.EXTRA_VIDEO_PATH,absPath);
  startActivity(intent);
  mCurrentVideoFile=null;
}

private void write(Coordinate[] coords,int level,StringBuffer buf){
  startLine("<coordinates>",level,buf);
  boolean isNewLine=false;
  for (int i=0; i < coords.length; i++) {
    if (i > 0) {
      buf.append(TUPLE_SEPARATOR);
    }
    if (isNewLine) {
      startLine("  ",level,buf);
      isNewLine=false;
    }
    write(coords[i],buf);
    if ((i + 1) % maxCoordinatesPerLine == 0 && i < coords.length - 1) {
      buf.append("\n");
      isNewLine=true;
    }
  }
  buf.append("</coordinates>\n");
}

protected static boolean isIntendedException(Exception e,Class<?> clazz){
  final String message=e.getMessage();
  return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName()));
}

public static void swapPivot(DenseDoubleMatrix2D source,long diag,DenseDoubleMatrix2D s,DenseDoubleMatrix2D t){
  long swapRow=diag;
  long swapCol=diag;
  double maxValue=Math.abs(source.getDouble(diag,diag));
  long rows=source.getRowCount();
  long cols=source.getColumnCount();
  double abs=0;
  for (long row=diag; row < rows; row++) {
    for (long col=diag; col < cols; col++) {
      abs=Math.abs(source.getDouble(row,col));
      if (abs > maxValue) {
        maxValue=abs;
        swapRow=row;
        swapCol=col;
      }
    }
  }
  if (swapRow != diag) {
    swapRows(source,swapRow,diag);
    swapRows(t,swapRow,diag);
  }
  if (swapCol != diag) {
    swapCols(source,swapCol,diag);
    swapCols(s,swapCol,diag);
  }
}

public boolean canPopupOverlapTaskBar(){
  boolean result=true;
  try {
    SecurityManager sm=System.getSecurityManager();
    if (sm != null) {
      sm.checkPermission(SecurityConstants.AWT.SET_WINDOW_ALWAYS_ON_TOP_PERMISSION);
    }
  }
 catch (  SecurityException se) {
    result=false;
  }
  return result;
}

public Job createJobForCreateCluster(String activitiXmlClasspathResourceName,List<Parameter> parameters) throws Exception {
  return createJobForCreateCluster(activitiXmlClasspathResourceName,parameters,null);
}

public static List<String> findMainClasses(File rootDir) throws IOException {
  List<String> ret=new ArrayList<>();
  if (!rootDir.exists()) {
    return ret;
  }
  if (!rootDir.isDirectory()) {
    throw new IllegalArgumentException(String.format("Path %s is not a directory",rootDir.getPath()));
  }
  findClasses(ret,rootDir,rootDir.getAbsolutePath() + "/");
  return ret;
}

private static String validateXML(String string) throws IOException {
  for (int i=0; i < string.length(); i++) {
    char ch=string.charAt(i);
    if (!(ch == 9 || ch == 10 || ch == 13 || ch >= 32))     throw new IOException("Character reference \"&#" + Integer.toString(ch) + "\" is an invalid XML character.");
  }
  return string;
}

public void writeToFile(String filename){
  GridUtils.writeSpatialGridTable(this,filename);
}

public void readValues(){
  readValues(false);
}

protected static boolean isAccessCompatibleWithInstantRun(int access){
  return ((access & Opcodes.ACC_ABSTRACT) == 0) && ((access & Opcodes.ACC_BRIDGE) == 0);
}

protected ASN1Sequence(ASN1Encodable[] array){
  for (int i=0; i != array.length; i++) {
    seq.addElement(array[i]);
  }
}

public ThreadedListenerManager(ExecutorService pool){
  managerNumber=MANAGER_COUNT.getAndIncrement();
  this.pool=pool;
}

private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  if (choiceLimits.length != choiceFormats.length) {
    throw new InvalidObjectException("limits and format arrays of different length.");
  }
}

private void computeOffsetSegment(LineSegment seg,int side,double distance,LineSegment offset){
  int sideSign=side == Position.LEFT ? 1 : -1;
  double dx=seg.p1.x - seg.p0.x;
  double dy=seg.p1.y - seg.p0.y;
  double len=Math.sqrt(dx * dx + dy * dy);
  double ux=sideSign * distance * dx / len;
  double uy=sideSign * distance * dy / len;
  offset.p0.x=seg.p0.x - uy;
  offset.p0.y=seg.p0.y + ux;
  offset.p1.x=seg.p1.x - uy;
  offset.p1.y=seg.p1.y + ux;
}

@SuppressWarnings("unchecked") public synchronized E elementAt(int location){
  if (location < elementCount) {
    return (E)elementData[location];
  }
  throw arrayIndexOutOfBoundsException(location,elementCount);
}

private List<QoSRule> createQoSRules(JsonObject qosSettings){
  List<QoSRule> rules=new ArrayList<>();
  if (qosSettings.containsKey(JSON_FIELD_RULES)) {
    JsonObject jsonRules=qosSettings.getJsonObject(JSON_FIELD_RULES);
    for (    String urlPatternRegExp : jsonRules.fieldNames()) {
      log.debug("Creating a new QoS rule object for URL pattern: " + urlPatternRegExp);
      JsonObject jsonRule=jsonRules.getJsonObject(urlPatternRegExp);
      Pattern urlPattern=Pattern.compile(urlPatternRegExp);
      QoSRule rule=new QoSRule(urlPattern);
      boolean addRule=false;
      if (jsonRule.containsKey("reject")) {
        addRule=true;
        rule.setReject(jsonRule.getDouble("reject"));
      }
      if (jsonRule.containsKey("warn")) {
        addRule=true;
        rule.setWarn(jsonRule.getDouble("warn"));
      }
      if (addRule) {
        rules.add(rule);
      }
 else {
        log.warn("No or unknown QoS action defined for rule {}. This rule will not be loaded!",urlPatternRegExp);
      }
    }
  }
  return rules;
}

private static final byte[] toOctets(int identifier,String text){
  byte[] s=text.getBytes(StandardCharsets.UTF_8);
  byte[] base=OctetUtils.toOctets(AttributeType.VENDOR_SPECIFIC,identifier);
  int maxTextSpace=Attribute.MAX_ATTRIBUTE_LENGTH - base.length;
  byte[] octets;
  if (s.length > maxTextSpace) {
    octets=new byte[Attribute.MAX_ATTRIBUTE_LENGTH];
    System.arraycopy(s,0,octets,base.length,Attribute.MAX_ATTRIBUTE_LENGTH - base.length);
  }
 else {
    octets=new byte[base.length + s.length];
    System.arraycopy(s,0,octets,base.length,s.length);
  }
  System.arraycopy(base,0,octets,0,base.length);
  octets[1]=(byte)octets.length;
  return octets;
}

private Double formatDoubleValue(Double value,int places){
  BigDecimal bd=new BigDecimal(value);
  bd=bd.setScale(places,RoundingMode.HALF_UP);
  return bd.doubleValue();
}

@Override public void flush() throws IOException {
  out.flush();
}

protected int moveOrCopyFiles(boolean move,String what,File[] destFiles,File[] sourceFiles){
  int opCode=(move) ? OP_MOVE : OP_COPY;
  mModifiedSrcFiles=(move) ? new ArrayList<String>() : null;
  mModifiedDestFiles=new ArrayList<String>();
  openLogfile();
  onPreProcess(what,null,null,opCode);
  int itemCount=0;
  int pos=0;
  int fileCount=destFiles.length;
  while (pos < fileCount) {
    File sourceFile=sourceFiles[pos];
    File destFile=destFiles[pos];
    File destRenamed=renameDuplicate(destFile);
    if (osFileMoveOrCopy(move,destRenamed,sourceFile))     itemCount++;
    log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceFile)," ",getFilenameForLog(destRenamed));
    File sourceSidecar=getSidecar(sourceFile);
    if (osFileExists(sourceSidecar)) {
      File destSidecar=getSidecar(destRenamed);
      if (osFileMoveOrCopy(move,destSidecar,sourceSidecar))       itemCount++;
      log(((move) ? "MOVE /y " : "COPY /y "),getFilenameForLog(sourceSidecar)," ",getFilenameForLog(destSidecar));
    }
    pos++;
  }
  int modifyCount=mModifiedDestFiles.size();
  String[] modifiedSourceFiles=((mModifiedSrcFiles != null) && (mModifiedSrcFiles.size() > 0)) ? mModifiedSrcFiles.toArray(new String[modifyCount]) : null;
  onPostProcess(what,modifiedSourceFiles,(modifyCount > 0) ? mModifiedDestFiles.toArray(new String[modifyCount]) : null,itemCount,sourceFiles.length,opCode);
  closeLogFile();
  return itemCount;
}

static boolean isCOctetStringValid(String value,int maxLength){
  if (value == null)   return true;
  if (value.length() >= maxLength)   return false;
  return true;
}

public Rectangle2D createProperBounds(double x1,double y1,double x2,double y2){
  double x=Math.min(x1,x2);
  double y=Math.min(y1,y2);
  double w=Math.abs(x1 - x2);
  double h=Math.abs(y1 - y2);
  return new Rectangle2D.Double(x,y,w,h);
}

public void addClearGraphDataButton(){
  JButton clearButton=new JButton("Clear");
  clearButton.setAction(RasterPlotActions.getClearGraphAction(this));
  buttonPanel.add(clearButton);
}

public static float normalizedLevenshteinDistance(String s,String t){
  float d=levenshteinDistance(s,t);
  int max=Math.max(s.length(),t.length());
  return d / (float)max;
}

private void createFile(int number,String extention){
  for (int i=0; i < number; i++) {
    try {
      BufferedWriter output=new BufferedWriter(new FileWriter(new File(textInputFolder + "/File" + String.valueOf(i)+ extention)));
      try {
        output.write("File number ");
        output.write(String.valueOf(i));
      }
  finally {
        output.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}

public boolean isAnimal(){
  return typeString.contains(SUFFIX_ANIMAL);
}

public static String unifyLineSeparators(String s,String ls){
  if (s == null) {
    return null;
  }
  if (ls == null) {
    ls=System.getProperty("line.separator");
  }
  if (!(ls.equals("\n") || ls.equals("\r") || ls.equals("\r\n"))) {
    throw new IllegalArgumentException("Requested line separator is invalid.");
  }
  int length=s.length();
  StringBuilder buffer=new StringBuilder(length);
  for (int i=0; i < length; i++) {
    if (s.charAt(i) == '\r') {
      if ((i + 1) < length && s.charAt(i + 1) == '\n') {
        i++;
      }
      buffer.append(ls);
    }
 else     if (s.charAt(i) == '\n') {
      buffer.append(ls);
    }
 else {
      buffer.append(s.charAt(i));
    }
  }
  return buffer.toString();
}

private void adjustNameAndPosition(Node node,int deltaX,int deltaY){
  String originalName=node.getName();
  String uniqueName=nextUniqueName(originalName);
  if (!uniqueName.equals(originalName)) {
    node.setName(uniqueName);
    node.setCenterX(node.getCenterX() + deltaX);
    node.setCenterY(node.getCenterY() + deltaY);
  }
}

public void addNotification(PingNotification notification){
  notifications.add(notification);
}

public List<Datastore> createNfsDatastore(ClusterComputeResource cluster,FileShareRestRep fileSystem,FileSystemExportParam export,URI datacenterId,String datastoreName){
  addNfsDatastoreTag(fileSystem,export,datacenterId,datastoreName);
  List<Datastore> datastores=Lists.newArrayList();
  String fileServer=StringUtils.substringBefore(export.getMountPoint(),":");
  String mountPath=StringUtils.substringAfter(export.getMountPoint(),":");
  for (  HostSystem host : cluster.getHosts()) {
    datastores.add(execute(new CreateNfsDatastore(host,fileServer,mountPath,datastoreName)));
    addAffectedResource(fileSystem);
    ExecutionUtils.clearRollback();
  }
  return datastores;
}

private void checkSize(final int i){
  if (i >= max_size) {
    final int old_size=max_size;
    max_size+=increment_size;
    if (max_size <= i) {
      max_size=i + increment_size + 2;
    }
    final String[] temp=items;
    items=new String[max_size];
    System.arraycopy(temp,0,items,0,old_size);
    increment_size=incrementSize(increment_size);
  }
}

public Album(Context context,Uri mediaUri){
  super();
  media.add(0,new Media(context,mediaUri));
  setCurrentPhotoIndex(0);
}

static void checkInternalName(final String name,final int start,final int end,final String msg){
  int max=end == -1 ? name.length() : end;
  try {
    int begin=start;
    int slash;
    do {
      slash=name.indexOf('/',begin + 1);
      if (slash == -1 || slash > max) {
        slash=max;
      }
      checkIdentifier(name,begin,slash,null);
      begin=slash + 1;
    }
 while (slash != max);
  }
 catch (  IllegalArgumentException unused) {
    throw new IllegalArgumentException("Invalid " + msg + " (must be a fully qualified class name in internal form): "+ name);
  }
}

protected void initializeTaskDone(Set<TaskImageContainer> tasks,Optional<Runnable> runnableWhenDone){
  Set<CaptureSession> sessionSet=new HashSet<>();
  Map<CaptureSession,Integer> sessionTaskCount=new HashMap<>();
  for (  TaskImageContainer task : tasks) {
    sessionSet.add(task.mSession);
    Integer currentCount=sessionTaskCount.get(task.mSession);
    if (currentCount == null) {
      sessionTaskCount.put(task.mSession,1);
    }
 else {
      sessionTaskCount.put(task.mSession,currentCount + 1);
    }
  }
synchronized (mShadowTaskMap) {
    for (    CaptureSession captureSession : sessionSet) {
      BlockSignalProtocol protocol=new BlockSignalProtocol();
      protocol.setCount(sessionTaskCount.get(captureSession));
      final ImageShadowTask shadowTask;
      shadowTask=new ImageShadowTask(protocol,captureSession,runnableWhenDone);
      mShadowTaskMap.put(captureSession,shadowTask);
      mProcessingTaskConsumer.enqueueTask(shadowTask);
    }
  }
}

public void createCalibrationCharts(String colorScheme,SortedMap<Integer,Integer[]> distanceTripMap,SortedMap<Integer,Integer[]> travelTimeTripMap,SortedMap<Integer,Integer[]> numberTripsPerMode,String path,String surveyName) throws IOException {
  path=path.substring(0,path.lastIndexOf("/")) + "/calibration" + path.substring(path.lastIndexOf("/"),path.length());
  getSimulationData(distanceTripMap,travelTimeTripMap,numberTripsPerMode);
  simulationDistDataset.calculateSharesAndTotals();
  simulationTTDataset.calculateSharesAndTotals();
  commonColorScheme=colorScheme;
  createModeShareStackedBarChart(surveyName + " Mode Share per Distance Class",path + fileTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Mode share [%]");
  createModeShareStackedBarChart("Simulation Mode Share per Distance Class",path + fileTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Mode share [%]");
  createModeShareComparisonChart("Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias mode share [%]");
  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeBenchmark,surveyDistDataset,"Distance [km]","Cumulative mode share [%]");
  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Distance Class",path + fileCumulativeTripDistanceByModeSimulation,simulationDistDataset,"Distance [km]","Cumulative mode share [%]");
  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Distance Class - " + surveyName + " vs. Simulation",path + fileCumulativeTripDistanceByModeComparison,simulationDistDataset,surveyDistDataset,"Distance [km]","Bias cumulative mode share (%)");
  createModeShareStackedBarChart(surveyName + " Mode Share per Travel Time Class",path + fileTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Mode share [%]");
  createModeShareStackedBarChart("Simulation Mode Share per Travel Time Class",path + fileTripTTByModeSimulation,simulationTTDataset,"Travel Time [min]","Mode share [%]");
  createModeShareComparisonChart("Modeshare per Travel Time - " + surveyName + " vs. Simulation",path + fileTripTTByModeComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias mode share [%]");
  createCummulativeModeShareChart(surveyName + " Cumulative Mode Share per Travel Time Class",path + fileCumulativeTripTTByModeBenchmark,surveyTTDataset,"Travel Time [min]","Cumulative mode share [%]");
  createCummulativeModeShareChart("Simulation Cumulative Mode Share per Travel Time Class",path + fileCumModeshareTTSimulation,simulationTTDataset,"Travel Time [min]","Cumulative mode share [%]");
  createCummulativeModeShareComparisonChart("Cummulative Modeshare per Travel Time Class - " + surveyName + " vs. Simulation",path + fileCumModeshareTTComparison,simulationTTDataset,surveyTTDataset,"Travel Time [min]","Bias cumulative mode share (%)");
  createModeShareHistoryChart("Simulation Modeshare",path.substring(0,path.indexOf("ITERS")) + fileModeshareHistory,modeShareHistoryDataset,"Iteration","Mode share [%]",surveyTTDataset);
}

public static String unquote(String name){
  return isQuoted(name) ? name.substring(1,name.length() - 1) : name;
}

public boolean hasLeader(String playerName){
  return (leader != null) && leader.equals(playerName);
}

synchronized void redo(RTEditText editor){
  Stack<Operation> redoStack=getRedoStack(editor);
  if (!redoStack.empty()) {
    Stack<Operation> undoStack=getUndoStack(editor);
    Operation op=redoStack.pop();
    push(op,undoStack);
    op.redo(editor);
    while (!redoStack.empty() && op.canMerge(redoStack.peek())) {
      op=redoStack.pop();
      push(op,undoStack);
      op.redo(editor);
    }
  }
}

private static <T>T reportJoin(Object r){
  if (r instanceof AltResult) {
    Throwable x;
    if ((x=((AltResult)r).ex) == null)     return null;
    if (x instanceof CancellationException)     throw (CancellationException)x;
    if (x instanceof CompletionException)     throw (CompletionException)x;
    throw new CompletionException(x);
  }
  @SuppressWarnings("unchecked") T t=(T)r;
  return t;
}

public int write(final Protein protein) throws IOException {
  checkEntryHierarchy();
  if (entryHierarchy != null) {
    for (    ProteinXref xref : protein.getCrossReferences()) {
      final SimpleProtein simpleProtein=SimpleProtein.valueOf(protein,xref,entryHierarchy);
      if (simpleProtein != null) {
        final SimpleHash model=buildModelMap(simpleProtein,entryHierarchy);
        Writer writer=null;
        try {
          final Template temp=freeMarkerConfig.getTemplate(freeMarkerTemplate);
          checkTempDirectory(tempDirectory);
          if (!tempDirectory.endsWith(File.separator)) {
            tempDirectory=tempDirectory + File.separator;
          }
          UrlFriendlyIdGenerator gen=UrlFriendlyIdGenerator.getInstance();
          String urlFriendlyId=gen.generate(xref.getIdentifier());
          final Path newResultFile=Paths.get(tempDirectory + urlFriendlyId + ".svg");
          resultFiles.add(newResultFile);
          writer=Files.newBufferedWriter(newResultFile,characterSet);
          temp.process(model,writer);
          writer.flush();
        }
 catch (        TemplateException e) {
          e.printStackTrace();
        }
catch (        IOException e) {
          e.printStackTrace();
        }
 finally {
          if (writer != null) {
            writer.close();
          }
        }
      }
    }
  }
  return 0;
}

public void testCasts(){
  String sql_begin="SELECT ";
  String[][] sql_tests=new String[][]{{"cast('N' as char)","cast('N' as char)"},{"cast('this is a string' as nvarchar2(40))","cast('this is a string' as VARCHAR)"},{"cast('this is a string as a ''string''' as nvarchar2(40))","cast('this is a string as a ''string''' as VARCHAR)"},{"cast(tbl.IsView as char)","cast(tbl.IsView as char)"},{"cast(trunc(tbl.Updated,'MONTH') as date)","cast(trunc(tbl.Updated,'MONTH') as TIMESTAMP)"},{"cast(NULL as nvarchar2(255))","cast(NULL as VARCHAR)"},{"cast(NULL as number(10))","cast(NULL as NUMERIC)"}};
  String sql_end=" FROM AD_Table tbl";
  StringBuffer sql=new StringBuffer(sql_begin);
  StringBuffer sqle=new StringBuffer(sql_begin);
  for (int i=0; i < sql_tests.length; i++) {
    if (i > 0) {
      sql.append(",");
      sqle.append(",");
    }
    sql.append(sql_tests[i][0]);
    sqle.append(sql_tests[i][1]);
  }
  sql.append(sql_end);
  sqle.append(sql_end);
  String[] r=convert.convert(sql.toString());
  assertEquals(sqle.toString(),r[0]);
}

private boolean saveMacro(){
  if (firstTime) {
    try {
      Thread.sleep(firstTimeSleep);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  firstTime=false;
  byte[] macroAccy=new byte[macroSize];
  int index=0;
  int accyNum=0;
  accyNum=getAccyRow(macroAccy,index,textAccy1,accyTextField1,cmdButton1);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy2,accyTextField2,cmdButton2);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy3,accyTextField3,cmdButton3);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy4,accyTextField4,cmdButton4);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy5,accyTextField5,cmdButton5);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy6,accyTextField6,cmdButton6);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  accyNum=getAccyRow(macroAccy,index,textAccy7,accyTextField7,cmdButton7);
  if (accyNum < 0) {
    return false;
  }
  if (accyNum > 0) {
    index+=2;
  }
  if (!isUsb) {
    accyNum=getAccyRow(macroAccy,index,textAccy8,accyTextField8,cmdButton8);
    if (accyNum < 0) {
      return false;
    }
    if (accyNum > 0) {
      index+=2;
    }
    accyNum=getAccyRow(macroAccy,index,textAccy9,accyTextField9,cmdButton9);
    if (accyNum < 0) {
      return false;
    }
    if (accyNum > 0) {
      index+=2;
    }
  }
  accyNum=getAccyRow(macroAccy,index,textAccy10,accyTextField10,cmdButton10);
  if (accyNum < 0) {
    JOptionPane.showMessageDialog(this,rb.getString("EnterMacroNumberLine10"),rb.getString("NceMacro"),JOptionPane.ERROR_MESSAGE);
    return false;
  }
  processMemory(false,true,macroNum,macroAccy);
  return true;
}

public void writeIntoSPTKLF0File(String sptkFileName) throws IOException {
  LEDataOutputStream lf0Data=new LEDataOutputStream(new BufferedOutputStream(new FileOutputStream(sptkFileName)));
  for (int i=0; i < this.contour.length; i++) {
    double f0Val=contour[i];
    if (contour[i] == 0.0f) {
      lf0Data.writeFloat(NEGATIVE_MAXIMUM);
    }
 else {
      lf0Data.writeFloat((float)Math.log(contour[i]));
    }
  }
  lf0Data.flush();
  lf0Data.close();
}

public static Thread start(long timeout){
  return start(Thread.currentThread(),timeout);
}

public static Element find(Node parent,String name){
  NodeList list=parent.getChildNodes();
  for (int i=0; i < list.getLength(); i++) {
    Node n=list.item(i);
    if (n instanceof Element) {
      Element e=(Element)n;
      if (name.equals(e.getAttribute("id"))) {
        return e;
      }
    }
    Element r=find(n,name);
    if (r != null) {
      return r;
    }
  }
  return null;
}

final boolean transferAfterCancelledWait(Node node){
  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {
    enq(node);
    return true;
  }
  while (!isOnSyncQueue(node))   Thread.yield();
  return false;
}

public static RE mkStar(RE x){
  if (x.equals(epsilon) || x.equals(empty)) {
    return epsilon;
  }
  RE res=new RE(ReOp.STAR);
  res.unaryArg=x;
  return res;
}

public void remove(final Object element){
  Set oldSelection=new HashSet(selection);
  boolean rv=selection.remove(element);
  if (rv) {
    fireSelectionChanged(oldSelection,selection);
  }
  oldSelection=null;
}

@Override public void mouseClicked(MouseEvent evt){
  delegate.mouseMoved(evt);
}

public void printf(Locale locale,String format,Object... args){
  out.printf(locale,format,args);
  out.flush();
}

public void transform(Source xmlSource,Result outputTarget) throws TransformerException {
  transform(xmlSource,outputTarget,true);
}

public void testSortsAttributesBeforeElements() throws Exception {
  XppDom dom1=XppFactory.buildDom("<dom x='a'><a/></dom>");
  XppDom dom2=XppFactory.buildDom("<dom x='b'><b/></dom>");
  assertEquals(-1,comparator.compare(dom1,dom2));
  assertEquals("/dom[@x]",xpath.get());
  assertEquals(1,comparator.compare(dom2,dom1));
  assertEquals("/dom[@x]",xpath.get());
}

public void addSuffix(DalvInsn insn){
  suffix.add(insn);
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(1);
  newVector.addElement(new Option("\tThe filename where output will be stored. Use - for stdout.\n" + "\t(default temp file)","O",1,"-O <file name>"));
  return newVector.elements();
}

private void closeSelector(){
  if (selector.isOpen()) {
    if (log.isDebugEnabled())     log.debug("Closing all listening sockets.");
    for (    SelectionKey key : selector.keys())     U.close(key.channel(),log);
    if (log.isDebugEnabled())     log.debug("Closing NIO selector.");
    U.close(selector,log);
  }
}

public static Number sub(Number a,Number b){
  if (isFloatingPoint(a) || isFloatingPoint(b)) {
    return a.doubleValue() - b.doubleValue();
  }
 else {
    return a.longValue() - b.longValue();
  }
}

public Builder requiredAttributes(final String... nameOrOIDs){
  return requiredAttributes(Arrays.asList(nameOrOIDs));
}

private void showHistoryDialog(){
  JBList commandsList=new JBList(HistoryUtils.getCommandsFromHistory());
  commandsList.setCellRenderer(new HistoryListCellRenderer());
  commandsList.setEmptyText("No data to display");
  commandsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  String[] buttons={"OK","Cancel"};
  int result=JOptionPane.showOptionDialog(toolWindowContent,commandsList,"Command history",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,buttons,buttons[0]);
  if (result == 0) {
    updateUiFromCommand((Command)commandsList.getSelectedValue());
  }
}

public int size(){
  return count.get();
}

protected static byte[] read(InputStream is) throws IOException {
  final boolean close=true;
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    int i;
    while ((i=is.read()) != -1) {
      baos.write(i);
    }
  }
  finally {
    try {
      if (close) {
        is.close();
      }
      baos.close();
    }
 catch (    Exception ex) {
      log.warn("Could not close input/output stream: " + ex,ex);
    }
  }
  return baos.toByteArray();
}

public static <T>Streamable<T> fromPublisher(final Publisher<? extends T> publisher){
  Objects.requireNonNull(publisher);
  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();
  publisher.subscribe(sub);
  return fromStream(sub.stream());
}

public ProtobufConnection(Listener<MessageType> handler,MessageType prototype,int maxMessageSize,int timeoutMillis){
  this.handler=handler;
  this.prototype=prototype;
  this.maxMessageSize=Math.min(maxMessageSize,Integer.MAX_VALUE - 4);
  setTimeoutEnabled(false);
  setSocketTimeout(timeoutMillis);
}

private Response<Bitmap> doParse(NetworkResponse response){
  byte[] data=response.data;
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  Bitmap bitmap=null;
  if (mMaxWidth == 0 && mMaxHeight == 0) {
    decodeOptions.inPreferredConfig=mDecodeConfig;
    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  }
 else {
    decodeOptions.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    int actualWidth=decodeOptions.outWidth;
    int actualHeight=decodeOptions.outHeight;
    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);
    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);
    decodeOptions.inJustDecodeBounds=false;
    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
      tempBitmap.recycle();
    }
 else {
      bitmap=tempBitmap;
    }
  }
  if (bitmap == null) {
    return Response.error(new ParseError(response));
  }
 else {
    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));
  }
}

public Notification find(Integer notificationID){
  Notification notification=new Notification(context,notificationID,null);
  if (notification.getAttributes() == null)   notification.loadAttributesFromPreferences();
  return notification;
}

public GreenGradient(int maxCount){
  this.maxCount=maxCount;
  factor=maxCount / Math.log(maxCount);
}

public static void writeHistogram(TDoubleDoubleHashMap distr,String filename) throws FileNotFoundException, IOException {
  BufferedWriter aWriter=IOUtils.getBufferedWriter(filename);
  aWriter.write("bin\tcount");
  aWriter.newLine();
  double[] keys=distr.keys();
  Arrays.sort(keys);
  for (  double key : keys) {
    aWriter.write(String.valueOf(key));
    aWriter.write("\t");
    aWriter.write(String.valueOf(distr.get(key)));
    aWriter.newLine();
  }
  aWriter.close();
}

public static <T>CompletionStage<T> dereference(CompletionStage<? extends CompletionStage<T>> stage){
  return stage.thenCompose(Identity.INSTANCE);
}

public static Number plus(Character left,Number right){
  return NumberNumberPlus.plus(Integer.valueOf(left),right);
}

public static String clipStringIfNecessary(JComponent c,FontMetrics fm,String string,int availTextWidth){
  if ((string == null) || (string.equals(""))) {
    return "";
  }
  int textWidth=SwingUtilities2.stringWidth(c,fm,string);
  if (textWidth > availTextWidth) {
    return SwingUtilities2.clipString(c,fm,string,availTextWidth);
  }
  return string;
}

public boolean removeElement(Object obj){
synchronized (actions) {
    if (allowToChange) {
      boolean result=actions.remove(obj);
      if (actions.isEmpty()) {
        if (headTask != null) {
          cancel();
        }
      }
      return result;
    }
  }
  return false;
}

public static boolean isCglibProxy(Object object){
  return ClassUtils.isCglibProxyClass(object.getClass());
}

public void resetReferences(){
  if (_refs != null)   _refs.clear();
}

public void addSlide(@NonNull Fragment fragment){
  fragments.add(fragment);
  addBackgroundColor(Color.TRANSPARENT);
  pagerAdapter.notifyDataSetChanged();
}

public static String[] wrapString(@Nonnull String str,int maxWidth,@Nullable String[] output){
  if (output == null) {
    output=new String[(int)((str.length() / maxWidth) * 1.5d + 1)];
  }
  int lineStart=0;
  int arrayIndex=0;
  int i;
  for (i=0; i < str.length(); i++) {
    char c=str.charAt(i);
    if (c == '\n') {
      output=addString(output,str.substring(lineStart,i),arrayIndex++);
      lineStart=i + 1;
    }
 else     if (i - lineStart == maxWidth) {
      output=addString(output,str.substring(lineStart,i),arrayIndex++);
      lineStart=i;
    }
  }
  if (lineStart != i || i == 0) {
    output=addString(output,str.substring(lineStart),arrayIndex++,output.length + 1);
  }
  if (arrayIndex < output.length) {
    output[arrayIndex]=null;
  }
  return output;
}

public void removeChangingListener(OnWheelChangedListener listener){
  changingListeners.remove(listener);
}

private static FloatBuffer createVertexArray(float[] coords){
  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * 4);
  bb.order(ByteOrder.nativeOrder());
  FloatBuffer fb=bb.asFloatBuffer();
  fb.put(coords);
  fb.position(0);
  return fb;
}

protected void publish() throws MqttException, IOException {
  sampleClientPub=new SampleAsyncWait(url,clientIdPub,cleanSession,quietMode,userName,password);
  if (sampleClientPub != null) {
    String topic="Sample/Java/v3";
    int qos=2;
    String message="Message from async calback MQTTv3 Java client sample";
    try {
      sampleClientPub.publish(topic,qos,message.getBytes());
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
}

public static void cleanDirectory(File directory) throws IOException {
  if (!directory.exists()) {
    String message=directory + " does not exist";
    throw new IllegalArgumentException(message);
  }
  if (!directory.isDirectory()) {
    String message=directory + " is not a directory";
    throw new IllegalArgumentException(message);
  }
  File[] files=directory.listFiles();
  if (files == null) {
    throw new IOException("Failed to list contents of " + directory);
  }
  IOException exception=null;
  for (  File file : files) {
    try {
      forceDelete(file);
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
  }
  if (null != exception) {
    throw exception;
  }
}

private Object[] invWmSubBand(Image img,double[] wm,int n,double threshold){
  int m=0;
  double z=0.0;
  double v=0.0;
  for (int i=0; i < img.getWidth() * img.getHeight(); i++) {
    if (img.getData()[i] > threshold) {
      z+=(img.getData()[i] * wm[i % n]);
      v+=Math.abs(img.getData()[i]);
      m++;
    }
  }
  return new Object[]{m,z,v};
}

public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {
  if (src == null) {
    throw new NullPointerException("Source must not be null");
  }
  if (destDir == null) {
    throw new NullPointerException("Destination must not be null");
  }
  if (!src.exists()) {
    throw new FileNotFoundException("Source '" + src + "' does not exist");
  }
  if (src.isDirectory()) {
    moveDirectoryToDirectory(src,destDir,createDestDir);
  }
 else {
    moveFileToDirectory(src,destDir,createDestDir);
  }
}

private static TungstenProperties loadSecurityPropertiesFromFile(String propertiesFileLocation) throws ConfigurationException {
  TungstenProperties securityProps=null;
  FileInputStream securityConfigurationFileInputStream=null;
  if (propertiesFileLocation == null && ClusterConfiguration.getClusterHome() == null) {
    throw new ConfigurationException("No cluster.home found from which to configure cluster resources.");
  }
  File securityPropertiesFile;
  if (propertiesFileLocation == null) {
    File clusterConfDirectory=ClusterConfiguration.getDir(ClusterConfiguration.getGlobalConfigDirName(ClusterConfiguration.getClusterHome()));
    securityPropertiesFile=new File(clusterConfDirectory.getPath(),SecurityConf.SECURITY_PROPERTIES_FILE_NAME);
  }
 else {
    securityPropertiesFile=new File(propertiesFileLocation);
  }
  try {
    securityProps=new TungstenProperties();
    securityConfigurationFileInputStream=new FileInputStream(securityPropertiesFile);
    securityProps.load(securityConfigurationFileInputStream,true);
    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);
  }
 catch (  FileNotFoundException e) {
    String msg=MessageFormat.format("Cannot find configuration file: {0}",securityPropertiesFile.getPath());
    logger.debug(msg,e);
    throw new ConfigurationException(msg);
  }
catch (  IOException e) {
    String msg=MessageFormat.format("Cannot load configuration file: {0}.\n Reason: {1}",securityPropertiesFile.getPath(),e.getMessage());
    logger.debug(msg,e);
    throw new ConfigurationException(msg);
  }
 finally {
    closeSecurityConfigurationFileInputStream(securityConfigurationFileInputStream);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(MessageFormat.format(": {0}",securityPropertiesFile.getPath()));
  }
  securityProps.put(SecurityConf.SECURITY_PROPERTIES_PARENT_FILE_LOCATION,securityPropertiesFile.getAbsolutePath());
  return securityProps;
}

public static void close(InputStream in){
  try {
    if (in != null) {
      in.close();
    }
  }
 catch (  IOException ioE) {
  }
}

private synchronized void clearScanFiles(){
  if ((allFiles != null) && (allFiles.size() > 0)) {
    Iterator it=allFiles.iterator();
    File file=null;
    while (it.hasNext()) {
      file=(File)it.next();
      file.delete();
    }
    allFiles.clear();
  }
}

private static boolean intersectsLatEdge(S2Point a,S2Point b,double lat,S1Interval lng){
  S2Point z=S2Point.normalize(S2.robustCrossProd(a,b));
  if (z.z < 0) {
    z=S2Point.neg(z);
  }
  S2Point y=S2Point.normalize(S2.robustCrossProd(z,new S2Point(0,0,1)));
  S2Point x=S2Point.crossProd(y,z);
  double sinLat=Math.sin(lat);
  if (Math.abs(sinLat) >= x.z) {
    return false;
  }
  double cosTheta=sinLat / x.z;
  double sinTheta=Math.sqrt(1 - cosTheta * cosTheta);
  double theta=Math.atan2(sinTheta,cosTheta);
  S1Interval abTheta=S1Interval.fromPointPair(Math.atan2(a.dotProd(y),a.dotProd(x)),Math.atan2(b.dotProd(y),b.dotProd(x)));
  if (abTheta.contains(theta)) {
    S2Point isect=S2Point.add(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));
    if (lng.contains(Math.atan2(isect.y,isect.x))) {
      return true;
    }
  }
  if (abTheta.contains(-theta)) {
    S2Point intersection=S2Point.sub(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));
    if (lng.contains(Math.atan2(intersection.y,intersection.x))) {
      return true;
    }
  }
  return false;
}

public static void execAndCheckOutput(ProcessBuilder builder,String expectedOut,String expectedErr) throws Exception {
  Process process=builder.start();
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  try {
    Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream()));
    Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream()));
    assertEquals(expectedOut,outFuture.get(10,TimeUnit.SECONDS));
    assertEquals(expectedErr,errFuture.get(10,TimeUnit.SECONDS));
  }
  finally {
    executorService.shutdown();
    process.waitFor();
  }
}

private void startFileBasedMerge() throws CarbonSortKeyAndGroupByException {
  try {
    executorService.shutdown();
    executorService.awaitTermination(2,TimeUnit.DAYS);
    dataSorterAndWriterExecutorService.shutdown();
    dataSorterAndWriterExecutorService.awaitTermination(2,TimeUnit.DAYS);
  }
 catch (  InterruptedException e) {
    throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ",e);
  }
}

public void insertUpdate(DocumentEvent e){
  if (!dirty) {
    setDirty(true);
  }
}

public DateTimeParseException(String message,CharSequence parsedData,int errorIndex){
  super(message);
  this.parsedString=parsedData.toString();
  this.errorIndex=errorIndex;
}

private boolean areParallelSiblings(Component source,Component target,int axis){
  ComponentInfo sourceInfo=getComponentInfo(source);
  ComponentInfo targetInfo=getComponentInfo(target);
  Spring sourceSpring;
  Spring targetSpring;
  if (axis == HORIZONTAL) {
    sourceSpring=sourceInfo.horizontalSpring;
    targetSpring=targetInfo.horizontalSpring;
  }
 else {
    sourceSpring=sourceInfo.verticalSpring;
    targetSpring=targetInfo.verticalSpring;
  }
  ArrayList sourcePath=tmpParallelSet;
  sourcePath.clear();
  Spring spring=sourceSpring.getParent();
  while (spring != null) {
    sourcePath.add(spring);
    spring=spring.getParent();
  }
  spring=targetSpring.getParent();
  while (spring != null) {
    if (sourcePath.contains(spring)) {
      sourcePath.clear();
      while (spring != null) {
        if (spring instanceof ParallelGroup) {
          return true;
        }
        spring=spring.getParent();
      }
      return false;
    }
    spring=spring.getParent();
  }
  sourcePath.clear();
  return false;
}

protected Object readObjectImpl(Class cl) throws IOException {
  try {
    Object obj=cl.newInstance();
    if (_refs == null)     _refs=new ArrayList();
    _refs.add(obj);
    HashMap fieldMap=getFieldMap(cl);
    int code=read();
    for (; code >= 0 && code != 'z'; code=read()) {
      unread();
      Object key=readObject();
      Field field=(Field)fieldMap.get(key);
      if (field != null) {
        Object value=readObject(field.getType());
        field.set(obj,value);
      }
 else {
        Object value=readObject();
      }
    }
    if (code != 'z')     throw expect("map",code);
    try {
      Method method=cl.getMethod("readResolve",new Class[0]);
      return method.invoke(obj,new Object[0]);
    }
 catch (    Exception e) {
    }
    return obj;
  }
 catch (  IOException e) {
    throw e;
  }
catch (  Exception e) {
    throw new IOExceptionWrapper(e);
  }
}

public void testCase18(){
  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};
  byte bBytes[]={0};
  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};
  int aSign=1;
  int bSign=0;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.subtract(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(1,result.signum());
}

protected static Pair<String,String> lsrImmediate(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){
  final String shifterOperand=environment.getNextVariableString();
  final String shifterCarryOut=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals("0")) {
    final String tmpVar1=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,minusThirtyOneSet,wordSize,tmpVar1));
    instructions.add(ReilHelpers.createAnd(baseOffset++,wordSize,tmpVar1,byteSize,oneSet,byteSize,shifterCarryOut));
    return new Pair<String,String>(String.valueOf(0),shifterCarryOut);
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,"-" + immediateNodeValue,qWordSize,tmpVar1));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar1,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),dWordSize,tmpVar2));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar2,byteSize,oneSet,byteSize,shifterCarryOut));
    return new Pair<String,String>(shifterOperand,shifterCarryOut);
  }
}

public static PlainText plain(int text){
  return plain(Integer.toString(text));
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public static boolean isToday(Calendar _calendar){
  Calendar now=Calendar.getInstance();
  if (now.get(Calendar.DAY_OF_MONTH) == _calendar.get(Calendar.DAY_OF_MONTH)) {
    if (now.get(Calendar.MONTH) == _calendar.get(Calendar.MONTH)) {
      if (now.get(Calendar.YEAR) == _calendar.get(Calendar.YEAR)) {
        return true;
      }
    }
  }
  return false;
}

public void start(){
  managedPairs.add(createPort());
  fixNames();
  singlePorts.addObserver(observer,false);
  for (  Ports<M> ports : multiPortsList) {
    ports.addObserver(observer,false);
  }
}

protected void sprint(double doubleField){
  sprint(String.valueOf(doubleField));
}

public static Bitmap convertYuvImageToBitmap(@NonNull final YuvImage yuvImage){
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  yuvImage.compressToJpeg(new Rect(0,0,yuvImage.getWidth(),yuvImage.getHeight()),100,out);
  byte[] imageBytes=out.toByteArray();
  try {
    out.close();
  }
 catch (  IOException e) {
    Log.e(LOG_TAG,"Exception while closing output stream",e);
  }
  return BitmapFactory.decodeByteArray(imageBytes,0,imageBytes.length);
}

public Double read(String value){
  return Double.valueOf(value);
}

public boolean hasFeature(String feature,String version){
  if (feature.equals("Core")) {
    return version == null || version.equals("1.0") || version.equals("2.0");
  }
  return false;
}

private StoragePort assignPortBasedOnUsage(List<StoragePort> matchingTargetPorts,Map<StoragePort,Integer> portUsage){
  StoragePort foundPort=null;
  for (  StoragePort matchedPort : matchingTargetPorts) {
    if (portUsage.get(matchedPort) == null) {
      portUsage.put(matchedPort,0);
    }
    if (foundPort == null) {
      foundPort=matchedPort;
    }
 else {
      if (portUsage.get(matchedPort) < portUsage.get(foundPort)) {
        foundPort=matchedPort;
      }
    }
  }
  if (foundPort != null) {
    portUsage.put(foundPort,portUsage.get(foundPort) + 1);
  }
  return foundPort;
}

public ExternalEvent nextEvent(){
  if (queue.size() == 0) {
    return new ExternalEvent(Double.MAX_VALUE);
  }
  ExternalEvent ee=queue.get(nextEventIndex);
  nextEventIndex++;
  if (nextEventIndex >= queue.size()) {
    queue=readEvents(nrofPreload);
    nextEventIndex=0;
  }
  return ee;
}

public void appendToBuffer(StringBuilder buf){
  Iterator<double[]> iter=points.iterator();
  while (iter.hasNext()) {
    double[] data=iter.next();
    for (int i=0; i < data.length; i++) {
      if (i > 0) {
        buf.append(",");
      }
      buf.append(data[i]);
    }
    if (iter.hasNext()) {
      buf.append(" ");
    }
  }
}

public void updateComboBox(JComboBox<Track> box){
  box.removeAllItems();
  box.addItem(null);
  List<Track> tracks=getTrackByNameList(null);
  for (  Track track : tracks) {
    box.addItem(track);
  }
}

public RefactoringSessionTransformer(final boolean projects){
  fProjects=projects;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(2);
  newVector.addElement(new Option("\tIf set, classifier is run in debug mode and\n" + "\tmay output additional info to the console","output-debug-info",0,"-output-debug-info"));
  newVector.addElement(new Option("\tIf set, classifier capabilities are not checked before classifier is built\n" + "\t(use with caution).","-do-not-check-capabilities",0,"-do-not-check-capabilities"));
  return newVector.elements();
}

public CompareResult open(){
  final ContentComparator[] comparatorArray=comparators.toArray(new ContentComparator[comparators.size()]);
  final CustomCompareEditorInput input=new CustomCompareEditorInput(modified,original,ancestor,comparatorArray,compareConfiguration,externalCompareHandler);
  if (compareConfiguration.isLeftEditable() || compareConfiguration.isRightEditable()) {
    compareConfiguration.setProperty("org.eclipse.compare.internal.CONFIRM_SAVE_PROPERTY",Boolean.FALSE);
    input.setAlwaysDirty(alwaysDirty);
  }
  input.addSaveListener(new ProxyCompareSaveListener());
  log.info(MessageFormat.format("Comparing {0} to {1}",getLabelNOLOC(modified),getLabelNOLOC(original)));
  compareUIType.openCompareUI(input);
  final boolean contentsIdentical=(input.getCompareResult() == null);
  final boolean contentsSaved=(input.getSavedContents().length > 0);
  return new CompareResult(contentsIdentical,input.wasOKPressed(),contentsSaved);
}

protected void engineSetMode(String mode){
  if (!mode.equalsIgnoreCase("ECB")) {
    throw new IllegalArgumentException("can't support mode " + mode);
  }
}

protected void addResource(String resource){
  if (!StringUtils.isEmpty(resource)) {
    resources.add(resource);
  }
}

public static boolean isNumeric(String maybeNumeric){
  return maybeNumeric != null && maybeNumeric.matches("[0-9]+");
}

public void openKeyStore(File keyStoreFile,String defaultPassword){
  try {
    if (!keyStoreFile.isFile()) {
      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NotFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);
      return;
    }
    if (isKeyStoreFileOpen(keyStoreFile)) {
      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoOpenKeyStoreAlreadyOpen.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);
      return;
    }
    Password password=(defaultPassword != null) ? new Password(defaultPassword.toCharArray()) : null;
    KeyStore openedKeyStore=null;
    boolean firstTry=true;
    while (true) {
      if (password == null) {
        password=showPasswordDialog(keyStoreFile);
      }
      if (password == null) {
        return;
      }
      try {
        openedKeyStore=KeyStoreUtil.load(keyStoreFile,password);
        break;
      }
 catch (      KeyStoreLoadException klex) {
        if (defaultPassword == null || !firstTry) {
          int tryAgainChoice=showErrorMessage(keyStoreFile,klex);
          if (tryAgainChoice == JOptionPane.NO_OPTION) {
            return;
          }
        }
      }
      password.nullPassword();
      password=null;
      firstTry=false;
    }
    if (openedKeyStore == null) {
      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.FileNotRecognisedType.message"),keyStoreFile.getName()),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);
      return;
    }
    kseFrame.addKeyStore(openedKeyStore,keyStoreFile,password);
  }
 catch (  FileNotFoundException ex) {
    JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("OpenAction.NoReadFile.message"),keyStoreFile),res.getString("OpenAction.OpenKeyStore.Title"),JOptionPane.WARNING_MESSAGE);
  }
catch (  Exception ex) {
    DError.displayError(frame,ex);
  }
}

public static String encode(String string){
  byte[] bytes;
  try {
    bytes=string.getBytes(PREFERRED_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    bytes=string.getBytes();
  }
  return encodeBytes(bytes);
}

public final long addAndGet(long delta){
  for (; ; ) {
    long current=get();
    long next=current + delta;
    if (compareAndSet(current,next))     return next;
  }
}

default long now(TimeUnit unit){
  return unit.convert(System.currentTimeMillis(),TimeUnit.MILLISECONDS);
}

private final void append(List<? super NameValuePair> l,final String k,final String v){
  if (v != null)   l.add(new NameValuePair(k,v));
}

protected Properties createProperties(URL location) throws IOException {
  InputStream is=null;
  if (location != null) {
    is=location.openStream();
  }
  Properties tmpProperties=new Properties();
  if (is != null) {
    tmpProperties.load(is);
  }
  return tmpProperties;
}

protected double calcPlanWeight(final T plan,final double maxScore){
  if (plan.getScore() == null) {
    return Double.NaN;
  }
  double weight=Math.exp(this.beta * (plan.getScore() - maxScore));
  if (weight < MIN_WEIGHT)   weight=MIN_WEIGHT;
  return weight;
}

public static boolean isExtension(String filename,Collection<String> extensions){
  if (filename == null) {
    return false;
  }
  if (extensions == null || extensions.isEmpty()) {
    return indexOfExtension(filename) == -1;
  }
  String fileExt=getExtension(filename);
  for (  String extension : extensions) {
    if (fileExt.equals(extension)) {
      return true;
    }
  }
  return false;
}

void findValue(){
  if (log.isDebugEnabled()) {
    log.debug("findValue invoked on " + label());
  }
  for (int i=0; i < _value.getItemCount(); i++) {
    String choice=_value.getItemAt(i);
    SettingList sl=choiceHash.get(choice);
    if (sl.match()) {
      if (log.isDebugEnabled()) {
        log.debug("  match in " + i);
      }
      _value.setSelectedItem(choice);
      return;
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("   no match");
  }
}

public java.lang.StringBuilder insert(int index,java.lang.String string){
  if (string == null) {
    string="null";
  }
  int min=string.length();
  if (min != 0) {
    move(min,index);
    string.getChars(0,min,value,index);
    count+=min;
  }
  return this;
}

public void mkdir(String key) throws IOException {
  key=key.replace(" ","");
  if (key.endsWith("/") && !key.equals("/")) {
    throw new InvalidParameterException("Trailing slash not allowed in zookeeper path");
  }
  String[] split=key.split("/");
  StringBuilder builder=new StringBuilder();
  for (  String s : split) {
    builder.append(s);
    if (!s.isEmpty() && !exists(builder.toString())) {
      zkState.set(builder.toString(),null);
    }
    builder.append("/");
  }
}

public double calculateLog(double value){
  return Math.log(value) / this.baseLog;
}

public static Vector3 pow(Vector3 o,double power){
  return new Vector3(Math.pow(o.x,power),Math.pow(o.y,power),Math.pow(o.z,power));
}

public DatagramPacket responseReceive() throws IOException {
  byte[] buf=new byte[1024];
  DatagramPacket dp=new DatagramPacket(buf,buf.length);
  datagramSocket.receive(dp);
  return dp;
}

@After public void tearDown(){
  webClient.closeAllWindows();
}

@Override public void flush(){
  flush(false);
}

public static float[] temperatureToRGB(int degreesK){
  int k=MathUtils.constrain(degreesK,1000,20000);
  float a=(k % 100) / 100.0f;
  int i=((k - 1000) / 100) * 3;
  return new float[]{interp(i,a),interp(i + 1,a),interp(i + 2,a)};
}

public AdvancedStateMap.Builder withName(Function<PropertiesMap,String> mapper){
  this.nameMapper=mapper;
  return this;
}

public synchronized void message(LocoNetMessage m){
  int opCode=m.getOpCode();
switch (opCode) {
case LnConstants.OPC_PEER_XFER:
    int src=m.getElement(2);
  int dst=m.getElement(3) + m.getElement(4) * 256;
int[] packet=m.getPeerXfrData();
if (src == lowPart(LocoBufferAddress)) {
String lbv=((packet[2] != 0) ? dotme(packet[2]) : "1.0");
setLBVersion(lbv);
}
if (dst == LocoBufferAddress && src == lowPart(unitAddress) && (packet[4] == unitSubAddress)) {
stopTimer();
replyReceived();
String fw=((packet[2] != 0) ? dotme(packet[2]) : "1.3.2");
setLIOVersion(fw);
if (packet[0] == LocoIO.LOCOIO_SV_READ || reading) {
if (lastOpCv >= 0 && lastOpCv <= 50) {
  int data=(packet[2] != 0) ? packet[5] : packet[7];
  int channel=(lastOpCv / 3) - 1;
  if (channel < 0) {
    log.warn("... channel is less than zero!!!");
    channel=0;
  }
  int type=lastOpCv - (channel * 3 + 3);
  log.debug("... updating port " + channel + " SV"+ type+ "("+ (type == 1 ? "value1" : type == 2 ? "value2" : type == 0 ? "mode" : "unknown")+ ") = 0x"+ Integer.toHexString(data));
  if (type == 2) {
    setV2(channel,data);
    setMode(channel,"<none>");
  }
 else   if (type == 1) {
    setV1(channel,data);
    setMode(channel,"<none>");
  }
 else   if (type == 0) {
    setSV(channel,data);
    LocoIOMode lim=validmodes.getLocoIOModeFor(getSV(channel),getV1(channel),getV2(channel));
    if (lim == null) {
      setMode(channel,"<none>");
      setAddr(channel,0);
      log.debug("Could not find mode!");
    }
 else {
      setMode(channel,lim.getFullMode());
      setAddr(channel,validmodes.valuesToAddress(lim.getOpcode(),getSV(channel),getV1(channel),getV2(channel)));
    }
    log.debug("... decoded address (" + "cv=" + Integer.toHexString(getSV(channel)) + " "+ "v1="+ Integer.toHexString(getV1(channel))+ " "+ "v2="+ Integer.toHexString(getV2(channel))+ ") "+ "is "+ getAddr(channel)+ "(0x"+ Integer.toHexString(getAddr(channel))+ ")");
  }
 else {
    log.warn("OPC_PEER_XFR: Type (" + type + ") is not {0,1,2} for channel "+ channel);
  }
}
 else {
}
}
issueNextOperation();
return;
}
 else {
return;
}
case LnConstants.OPC_INPUT_REP:
if (log.isDebugEnabled()) {
log.debug(LnConstants.OPC_NAME(opCode) + " received");
}
for (int i=0; i < _numRows; i++) {
if (capture[i]) {
if (log.isDebugEnabled()) {
log.debug("row set for capture: " + i);
}
int val1=m.getElement(1);
int val2=m.getElement(2);
setAddr(i,((val2 & 0x0F) << 5) * 256 + ((val1 & 0x7f) << 1) | (((val2 & LnConstants.OPC_SW_REQ_DIR) == LnConstants.OPC_SW_REQ_DIR) ? 0x01 : 0x00));
capture[i]=false;
}
}
return;
case LnConstants.OPC_SW_REQ:
if (log.isDebugEnabled()) {
log.debug(LnConstants.OPC_NAME(opCode) + " received");
}
for (int i=0; i < _numRows; i++) {
if (capture[i]) {
if (log.isDebugEnabled()) {
log.debug("row set for capture: " + i);
}
int val1=m.getElement(1);
int val2=m.getElement(2);
int addr=LocoIO.SENSOR_ADR(val1,val2);
setAddr(i,addr);
capture[i]=false;
}
}
return;
default :
}
}

@Override public String toString(){
  return buf.toString();
}

public void test_fill$ZIIZ(){
  boolean val=true;
  boolean d[]=new boolean[1000];
  Arrays.fill(d,400,d.length,val);
  for (int i=0; i < 400; i++)   assertTrue("Filled elements not in range",!(d[i] == val));
  for (int i=400; i < d.length; i++)   assertTrue("Failed to fill boolean array correctly",d[i] == val);
  try {
    Arrays.fill(d,10,0,val);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Arrays.fill(d,-10,0,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    Arrays.fill(d,10,d.length + 1,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
}

protected void linearLayout(VisualTable labels){
  Rectangle2D b=getLayoutBounds();
  double breadth=getBreadth(b);
  double span=m_hi - m_lo;
  double pspan=m_prevhi - m_prevlo;
  double vlo=0;
  if (m_lo >= 0) {
    vlo=Math.pow(10,Math.floor(MathLib.log10(m_lo)));
  }
 else {
    vlo=-Math.pow(10,1 + Math.floor(MathLib.log10(-m_lo)));
  }
  Iterator iter=labels.tuples();
  while (iter.hasNext()) {
    VisualItem item=(VisualItem)iter.next();
    reset(item);
    double v=item.getDouble(VALUE);
    double x=span == 0 ? 0 : ((v - m_lo) / span) * breadth;
    set(item,x,b);
  }
  Index index=labels.index(VALUE);
  double step=getLinearStep(span,span == 0 ? 0 : breadth / span);
  if (step == 0)   step=1;
  int r;
  for (double x, v=vlo; v <= m_hi; v+=step) {
    x=((v - m_lo) / span) * breadth;
    if (x < -0.5) {
      continue;
    }
 else     if ((r=index.get(v)) >= 0) {
      VisualItem item=labels.getItem(r);
      item.setVisible(true);
      item.setEndVisible(true);
    }
 else {
      VisualItem item=labels.addItem();
      item.set(LABEL,m_nf.format(v));
      item.setDouble(VALUE,v);
      double f=pspan == 0 ? 0 : ((v - m_prevlo) / pspan);
      if (f <= 0 || f >= 1.0)       item.setStartVisible(true);
      set(item,f * breadth,b);
      set(item,x,b);
    }
  }
}

@Override public synchronized boolean addAll(Collection<? extends E> collection){
  return addAll(elementCount,collection);
}

public boolean handleExceptionFromServer(Writer writer,Reader reader,Throwable ex){
  if (ex instanceof ClosedChannelException) {
    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Connection with client closed from [" + writer.getEndPointAddress() + "] endpoint.");
    return true;
  }
  if (ex instanceof MarshalContextClearedException) {
    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Marshal context have been cleared, probably because the exported service class loader has been unloaded, service incoming invocation from [" + writer.getEndPointAddress() + "] endpoint.");
    return true;
  }
  try {
    String msg="LRMI Transport Protocol caught server exception caused by [" + writer.getEndPointAddress() + "] client.";
    if (ex instanceof LRMIUnhandledException) {
      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);
      LRMIUnhandledException lrmiue=(LRMIUnhandledException)ex;
      if (lrmiue.getStage() == Stage.DESERIALIZATION) {
        reader.resetContext();
      }
      if (writer.isOpen())       writer.writeReply(new ReplyPacket(null,lrmiue));
      return false;
    }
 else     if (ex instanceof RuntimeException || ex instanceof InvalidClassException) {
      if (_logger.isLoggable(Level.SEVERE))       _logger.log(Level.SEVERE,msg,ex);
    }
 else     if (ex instanceof UnmarshalException) {
      if (_logger.isLoggable(Level.WARNING))       _logger.log(Level.WARNING,msg,ex);
    }
 else {
      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);
    }
    if (writer.isOpen())     writer.writeReply(new ReplyPacket(null,new ProtocolException(msg,ex)));
    return true;
  }
 catch (  Exception ex2) {
    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Failed to send handledServerException to endpoint [" + writer.getEndPointAddress() + "] , the client disconnected from the server.",ex);
    return true;
  }
}

public String sprintf(){
  final Iterator<ConversionSpecification> e=vFmt.iterator();
  ConversionSpecification cs;
  char c;
  final StringBuilder sb=new StringBuilder();
  while (e.hasNext()) {
    cs=e.next();
    c=cs.getConversionCharacter();
    if (c == '\0') {
      sb.append(cs.getLiteral());
    }
 else     if (c == '%') {
      sb.append('%');
    }
  }
  return sb.toString();
}

default String resourceName(String tableName,String type){
  return String.format(RESOURCE_NAME,tableName,type);
}

protected void updateComboBoxesLoadChange(){
  if (autoTrackCheckBox.isSelected()) {
    updateLocationTrackComboBox();
  }
  if (autoDestinationTrackCheckBox.isSelected()) {
    updateDestinationTrackComboBox();
  }
  if (autoFinalDestTrackCheckBox.isSelected()) {
    updateFinalDestination();
  }
}

public String removeClassColumnTipText(){
  return "Remove the class column (if set) from the data.";
}

public static String join(NamedValue[] values,String separator){
  StringBuilder buff=new StringBuilder();
  for (int i=0; i < values.length; i++) {
    buff.append(values[i]);
    if (i < values.length - 1)     buff.append(separator);
  }
  return buff.toString();
}

private int currentDepth(){
  try {
    Integer oneBased=((Integer)DEPTH_FIELD.get(this));
    return oneBased - 1;
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
}

protected LocPathIterator changePartToRef(final QName uniquePseudoVarName,WalkingIterator wi,final int numSteps,final boolean isGlobal){
  Variable var=new Variable();
  var.setQName(uniquePseudoVarName);
  var.setIsGlobal(isGlobal);
  if (isGlobal) {
    ElemTemplateElement elem=getElemFromExpression(wi);
    StylesheetRoot root=elem.getStylesheetRoot();
    Vector vars=root.getVariablesAndParamsComposed();
    var.setIndex(vars.size() - 1);
  }
  AxesWalker walker=wi.getFirstWalker();
  for (int i=0; i < numSteps; i++) {
    assertion(null != walker,"Walker should not be null!");
    walker=walker.getNextWalker();
  }
  if (null != walker) {
    FilterExprWalker few=new FilterExprWalker(wi);
    few.setInnerExpression(var);
    few.exprSetParent(wi);
    few.setNextWalker(walker);
    walker.setPrevWalker(few);
    wi.setFirstWalker(few);
    return wi;
  }
 else {
    FilterExprIteratorSimple feis=new FilterExprIteratorSimple(var);
    feis.exprSetParent(wi.exprGetParent());
    return feis;
  }
}

protected String sourceClass(Attribute c,double[] dist){
  if (c.isNominal()) {
    return Integer.toString(Utils.maxIndex(dist));
  }
 else {
    return Double.toString(dist[0]);
  }
}

public void done() throws IOException {
  printer.flush();
}

int requestGroupData(char groupNum){
  setCurrDataGroup(groupNum);
  currGrpItems=knownGrpItems.get(Integer.valueOf(getCurrDataGroup()));
  char[] payLoad={groupNum};
  return (writeTelegram(payLoad,CMD_GROUP_READ,null));
}

protected String computeFullUrl(URL baseUrl,String link){
  if (link == null || link.length() == 0) {
    return null;
  }
  if (!link.startsWith("http")) {
    if (link.startsWith("/")) {
      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ link;
    }
 else {
      if (link.contains(":")) {
        return null;
      }
      String path=baseUrl.getPath();
      if (!path.endsWith("/")) {
        int sep=path.lastIndexOf("/");
        String file=path.substring(sep + 1);
        if (file.contains(".") || file.contains("?"))         path=path.substring(0,sep);
      }
      link=baseUrl.getProtocol() + "://" + baseUrl.getAuthority()+ path+ "/"+ link;
    }
  }
  link=normalizeUrlEnding(link);
  String l=link.toLowerCase(Locale.ROOT);
  if (l.endsWith(".jpg") || l.endsWith(".jpeg") || l.endsWith(".png")|| l.endsWith(".gif")) {
    return null;
  }
  return link;
}

protected String encodeCookie(SerializableHttpCookie cookie){
  if (cookie == null)   return null;
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  try {
    ObjectOutputStream outputStream=new ObjectOutputStream(os);
    outputStream.writeObject(cookie);
  }
 catch (  IOException e) {
    Log.d(LOG_TAG,"IOException in encodeCookie",e);
    return null;
  }
  return byteArrayToHexString(os.toByteArray());
}

public long skip(long bytes) throws IOException {
  if (closed) {
    throw new IOException("The stream is closed.");
  }
  int av=available();
  if (av == 0) {
    av=makeAvailable();
    if (av == 0) {
      return 0;
    }
  }
  long res=Math.min(av,bytes);
  head+=res;
  return res;
}

public void resume(){
  mPaused=false;
  mLastFrameTime=System.currentTimeMillis();
  invalidate();
}

protected void drawCenterText(Canvas c){
  CharSequence centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    PointF center=mChart.getCenterCircleBox();
    float innerRadius=mChart.isDrawHoleEnabled() && !mChart.isDrawSlicesUnderHoleEnabled() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=center.x - innerRadius;
    holeRect.top=center.y - innerRadius;
    holeRect.right=center.x + innerRadius;
    holeRect.bottom=center.y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent() / 100f;
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    if (Build.VERSION.SDK_INT >= 18) {
      Path path=new Path();
      path.addOval(holeRect,Path.Direction.CW);
      c.clipPath(path);
    }
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
  }
}

public void testSubtractDiffScaleNegPos(){
  String a="1231212478987482988429808779810457634781384756794987";
  int aScale=-15;
  String b="747233429293018787918347987234564568";
  int bScale=10;
  String c="1231212478987482988429808779810457634781310033452057698121208165201.2765435432";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.subtract(bNumber);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",cScale,result.scale());
}

void addToPrototypeCallback();

public AllToAllPanel(AllToAll connector,NetworkPanel networkPanel){
  super();
  this.connection=connector;
  allowSelfConnectPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  allowSelfConnectPanel.add(new JLabel(" Allow Self Connections: "));
  allowSelfConnectPanel.add(allowSelfConnectChkBx);
  fillFieldValues();
  add(allowSelfConnectPanel);
}

public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {
  try {
    if (funcName == null) {
      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});
      throw new NullPointerException(fmsg);
    }
    javax.xml.namespace.QName myQName=new QName(ns,funcName);
    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,0);
    if (xpathFunction == null) {
      return false;
    }
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}

private void allocate_sections(int p_section_count){
  section_list.ensureCapacity(p_section_count);
  while (section_list.size() < p_section_count) {
    section_list.add(new MazeSearchElement());
  }
}

public boolean refreshNeeded(){
  return this.softTtl < System.currentTimeMillis();
}

public static byte[] randomBytes(int length){
  byte[] bytes=new byte[length];
  SEEDED_RANDOM.nextBytes(bytes);
  return bytes;
}

public WeightDistribution(ColumnExampleTable columnTable,int[] selection,int attributeNumber){
  calculateLabelWeights(columnTable,selection,attributeNumber);
  leftLabelWeights=new double[totalLabelWeights.length];
  leftWeight=0;
  totalWeight=getTotalWeight(totalLabelWeights);
  if (hasMissings) {
    missingsWeight=getTotalWeight(missingsLabelWeights);
    rightWeight=totalWeight - missingsWeight;
    rightLabelWeights=arrayDifference(totalLabelWeights,missingsLabelWeights);
  }
 else {
    missingsWeight=0;
    rightWeight=totalWeight;
    rightLabelWeights=new double[totalLabelWeights.length];
    System.arraycopy(totalLabelWeights,0,rightLabelWeights,0,totalLabelWeights.length);
  }
}

public static String removeExtension(String fileName){
  int index=fileName.lastIndexOf('.');
  if (index == -1) {
    return fileName;
  }
 else {
    return fileName.substring(0,index);
  }
}

public void delete(String name) throws IOException {
  if (name.equalsIgnoreCase(KEY_ID)) {
    id=null;
  }
 else {
    throw new IOException("Attribute name not recognized by " + "CertAttrSet:SubjectKeyIdentifierExtension.");
  }
  encodeThis();
}

public static DataFrame normalize(DataFrame dataFrame,double min,double max){
  return normalize(dataFrame,min,max,Collections.<String>emptyList());
}

boolean isSocketScheme(String scheme){
  for (  String p : URIHelper.SOCKET_SCHEMES) {
    if (p.equals(scheme)) {
      return true;
    }
  }
  return false;
}

private static void addLeafWithNonExistingParents(Spatial root,Spatial leaf){
  if (!(root instanceof Node)) {
    logger.log(Level.WARNING,"Cannot add new Leaf {0} to {1}, is not a Node!",new Object[]{leaf.getName(),root.getName()});
    return;
  }
  for (Spatial s=leaf; s.getParent() != null; s=s.getParent()) {
    Spatial parent=s.getParent();
    Spatial other=findTaggedSpatial(root,parent);
    if (other == null) {
      continue;
    }
    if (other instanceof Node) {
      logger.log(Level.INFO,"Attaching {0} to {1} in root {2} to add leaf {3}",new Object[]{s,other,root,leaf});
      for (Spatial spt=leaf; spt != parent; spt=spt.getParent()) {
        spt.setUserData(ORIGINAL_NAME,spt.getName());
        spt.setUserData(ORIGINAL_PATH,getSpatialPath(spt));
        spt=spt.getParent();
      }
      Node otherNode=(Node)other;
      otherNode.attachChild(s);
      logger.log(LogLevel.USERINFO,"Attached Node {0} with leaf {0}",new Object[]{other.getName(),leaf.getName()});
      return;
    }
 else {
      logger.log(Level.WARNING,"Cannot attach leaf {0} to found spatial {1} in root {2}, not a node.",new Object[]{leaf,other,root});
    }
  }
  logger.log(Level.WARNING,"Could not attach new Leaf {0}, no root node found.",leaf.getName());
}

private void adjustBlockListeners(List<OBlock> oldRange,List<OBlock> newRange,Tracker tracker){
  Iterator<OBlock> iter=newRange.iterator();
  while (iter.hasNext()) {
    OBlock b=iter.next();
    if (oldRange.contains(b)) {
      oldRange.remove(b);
      continue;
    }
    addBlockListener(b,tracker);
  }
  iter=oldRange.iterator();
  while (iter.hasNext()) {
    removeBlockListener(iter.next(),tracker);
  }
}

public static String dbNameToVarName(String columnName){
  if (columnName == null)   return null;
  StringBuilder fieldName=new StringBuilder(columnName.length());
  boolean toUpper=false;
  for (int i=0; i < columnName.length(); i++) {
    char ch=columnName.charAt(i);
    if (ch == '_') {
      toUpper=true;
    }
 else     if (toUpper) {
      fieldName.append(Character.toUpperCase(ch));
      toUpper=false;
    }
 else {
      fieldName.append(Character.toLowerCase(ch));
    }
  }
  return fieldName.toString();
}

static public String hexEncode(byte[] aInput){
  StringBuffer result=new StringBuffer();
  final char[] digits={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
  for (int idx=0; idx < aInput.length; ++idx) {
    byte b=aInput[idx];
    result.append(digits[(b & 0xf0) >> 4]);
    result.append(digits[b & 0x0f]);
  }
  return result.toString();
}

private static Size clampSize(Size original,double maxArea,Size maxSize){
  if (original.getWidth() * original.getHeight() < maxArea && original.getWidth() < maxSize.getWidth() && original.getHeight() < maxSize.getHeight()) {
    return original;
  }
  double ratio=Math.min(Math.sqrt(maxArea / original.area()),1.0f);
  int width=(int)Math.round(original.width() * ratio);
  int height=(int)Math.round(original.height() * ratio);
  if (width > maxSize.width() || height > maxSize.height()) {
    return computeFitWithinSize(original,maxSize);
  }
  return new Size(width,height);
}

TCPChannel(TCPTransport tr,TCPEndpoint ep){
  this.tr=tr;
  this.ep=ep;
}

@Override public final String toString(){
  StringBuilder buffer=new StringBuilder();
  buffer.append("Document<");
  for (int i=0; i < fields.size(); i++) {
    IndexableField field=fields.get(i);
    buffer.append(field.toString());
    if (i != fields.size() - 1) {
      buffer.append(" ");
    }
  }
  buffer.append(">");
  return buffer.toString();
}

public static byte[] encode(byte[] data){
  ByteArrayOutputStream bOut=new ByteArrayOutputStream();
  try {
    encoder.encode(data,0,data.length,bOut);
  }
 catch (  IOException e) {
    throw new RuntimeException("exception encoding base64 string: " + e);
  }
  return bOut.toByteArray();
}

public static Face drawDir(Direction dir,MeshModel model,double minX,double minY,double minZ,double maxX,double maxY,double maxZ,CubeTextureCoordinates textureCoordinates){
switch (dir) {
case DOWN:
    return drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
case UP:
  return drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
case NORTH:
return drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
case SOUTH:
return drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
case EAST:
return drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
case WEST:
return drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,textureCoordinates);
}
throw new RenderException("Invalid draw direction!");
}

public void addObserver(final FileAlterationObserver observer){
  if (observer != null) {
    observers.add(observer);
  }
}

public MAVLinkMessage(MAVLinkSchema schema,ByteBuffer buffer) throws MAVLinkProtocolException, MAVLinkUnknownMessage, BufferUnderflowException {
  if (buffer.remaining() < NON_PAYLOAD_LENGTH) {
    throw new BufferUnderflowException();
  }
  int startPos=buffer.position();
  byte startSign=buffer.get();
  if (startSign != START_OF_FRAME) {
    throw new MAVLinkProtocolException(String.format("Invalid start sign: %02x, should be %02x",startSign,START_OF_FRAME));
  }
  int payloadLen=buffer.get() & 0xff;
  if (buffer.remaining() < payloadLen + NON_PAYLOAD_LENGTH - 2) {
    buffer.position(startPos);
    throw new BufferUnderflowException();
  }
  sequence=buffer.get();
  systemID=buffer.get() & 0xff;
  componentID=buffer.get() & 0xff;
  msgID=buffer.get() & 0xff;
  this.schema=schema;
  this.definition=schema.getMessageDefinition(msgID);
  if (definition == null) {
    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);
    throw new MAVLinkUnknownMessage(String.format("Unknown message: %s",msgID));
  }
  if (payloadLen != definition.payloadLength) {
    buffer.position(buffer.position() + payloadLen + CRC_LENGTH);
    throw new MAVLinkUnknownMessage(String.format("Invalid payload len for msg %s (%s): %s, should be %s",definition.name,msgID,payloadLen,definition.payloadLength));
  }
  this.payload=new byte[definition.payloadLength];
  buffer.get(payload);
  crc=Short.reverseBytes(buffer.getShort()) & 0xffff;
  int endPos=buffer.position();
  buffer.position(startPos);
  int crcCalc=calculateCRC(buffer);
  buffer.position(endPos);
  if (crc != crcCalc) {
    throw new MAVLinkUnknownMessage(String.format("CRC error for msg %s (%s): %02x, should be %02x",definition.name,msgID,crc,crcCalc));
  }
  this.payloadBB=ByteBuffer.wrap(payload);
  payloadBB.order(schema.getByteOrder());
}

public static double log1p(final double x){
  if (x == -1) {
    return Double.NEGATIVE_INFINITY;
  }
  if (x == Double.POSITIVE_INFINITY) {
    return Double.POSITIVE_INFINITY;
  }
  if (x > 1e-6 || x < -1e-6) {
    final double xpa=1 + x;
    final double xpb=-(xpa - 1 - x);
    final double[] hiPrec=new double[2];
    final double lores=log(xpa,hiPrec);
    if (Double.isInfinite(lores)) {
      return lores;
    }
    final double fx1=xpb / xpa;
    final double epsilon=0.5 * fx1 + 1;
    return epsilon * fx1 + hiPrec[1] + hiPrec[0];
  }
 else {
    final double y=(x * F_1_3 - F_1_2) * x + 1;
    return y * x;
  }
}

protected ScriptBuilder bigNum(long num){
  return bigNum(chunks.size(),num);
}

Callbacks tryGetCallbacks(Callbacks oldCallbacks){
synchronized (mLock) {
    if (mStopped) {
      return null;
    }
    if (mCallbacks == null) {
      return null;
    }
    final Callbacks callbacks=mCallbacks.get();
    if (callbacks != oldCallbacks) {
      return null;
    }
    if (callbacks == null) {
      Log.w(TAG,"no mCallbacks");
      return null;
    }
    return callbacks;
  }
}

public final void change_entries(BrdTracep p_obj,Polyline p_new_polyline,int p_keep_at_start_count,int p_keep_at_end_count){
  int compensated_half_width=p_obj.get_half_width() + get_clearance_compensation(p_obj.clearance_idx(),p_obj.get_layer());
  ArrayList<ShapeTile> changed_shapes=offset_shapes(p_new_polyline,compensated_half_width,p_keep_at_start_count,p_new_polyline.plaline_len(-1) - p_keep_at_end_count);
  int old_shape_count=p_obj.tree_shape_count(this);
  int new_shape_count=changed_shapes.size() + p_keep_at_start_count + p_keep_at_end_count;
  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[new_shape_count];
  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[new_shape_count];
  AwtreeNodeLeaf[] old_entries=p_obj.get_search_tree_entries(this);
  for (int index=0; index < p_keep_at_start_count; ++index) {
    new_leaf_arr[index]=old_entries[index];
    new_precalculated_tree_shapes[index]=p_obj.get_tree_shape(this,index);
  }
  for (int index=p_keep_at_start_count; index < old_shape_count - p_keep_at_end_count; ++index) {
    remove_leaf(old_entries[index]);
  }
  for (int i=0; i < p_keep_at_end_count; ++i) {
    int new_index=new_shape_count - p_keep_at_end_count + i;
    int old_index=old_shape_count - p_keep_at_end_count + i;
    new_leaf_arr[new_index]=old_entries[old_index];
    new_leaf_arr[new_index].shape_index_in_object=new_index;
    new_precalculated_tree_shapes[new_index]=p_obj.get_tree_shape(this,old_index);
  }
  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {
    new_precalculated_tree_shapes[index]=changed_shapes.get(index - p_keep_at_start_count);
  }
  p_obj.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);
  for (int index=p_keep_at_start_count; index < new_shape_count - p_keep_at_end_count; ++index) {
    new_leaf_arr[index]=insert(p_obj,index);
  }
  p_obj.set_search_tree_entries(this,new_leaf_arr);
}

static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {
  try {
    Class providerClass=findProviderClass(className,cl,doFallback);
    Object instance=providerClass.newInstance();
    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);
    return instance;
  }
 catch (  ClassNotFoundException x) {
    throw new ConfigurationError("Provider " + className + " not found",x);
  }
catch (  Exception x) {
    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);
  }
}

public void paintComponentBackground(Graphics g){
  super.paintComponentBackground(g);
  int clipX=g.getClipX();
  int clipY=g.getClipY();
  int clipW=g.getClipWidth();
  int clipH=g.getClipHeight();
  int width=getWidth();
  int height=getHeight();
  int y=getY();
  if (infinite) {
    int blockSize=getWidth() / 5;
    int x=getX() + (int)((((float)value) / ((float)maxValue - minValue)) * (getWidth() - blockSize));
    g.clipRect(x,y,blockSize,height - 1);
  }
 else {
    if (vertical) {
      int actualHeight=(int)((((float)value) / ((float)maxValue - minValue)) * getHeight());
      y+=height - actualHeight;
    }
 else {
      width=(int)((((float)value) / ((float)maxValue - minValue)) * getWidth());
    }
    g.clipRect(getX(),y,width,height);
  }
  paintingFull=true;
  super.paintComponentBackground(g);
  paintingFull=false;
  g.setClip(clipX,clipY,clipW,clipH);
  if (thumbImage != null && !infinite) {
    if (!vertical) {
      int xPos=getX() + width - thumbImage.getWidth() / 2;
      xPos=Math.max(getX(),xPos);
      xPos=Math.min(getX() + getWidth() - thumbImage.getWidth(),xPos);
      g.drawImage(thumbImage,xPos,y + height / 2 - thumbImage.getHeight() / 2);
    }
 else {
      int yPos=y;
      g.drawImage(thumbImage,getX() + width / 2 - thumbImage.getWidth() / 2,yPos);
    }
  }
}

public void addAction(EntityAction ea){
  actions.addElement(ea);
  processGameEvent(new GameNewActionEvent(this,ea));
}

public Polygon(PolygonPoint p1,PolygonPoint p2,PolygonPoint p3){
  p1._next=p2;
  p2._next=p3;
  p3._next=p1;
  p1._previous=p3;
  p2._previous=p1;
  p3._previous=p2;
  _points.add(p1);
  _points.add(p2);
  _points.add(p3);
}

public static JSONObject readJSONObject(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getJSONObject(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  JSONObject value=null;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getJSONObject(index);
  }
  return value;
}

public static void waitElementToNotBePresent(SearchContext parent,By by,int waitInSeconds){
  Preconditions.checkNotNull(parent);
  Preconditions.checkNotNull(by);
  try {
    WebElementWait wait=new WebElementWait(parent,waitInSeconds);
    wait.until(null);
  }
 catch (  TimeoutException e) {
    throw new TimeoutException(String.format("Element %s is still present after %s seconds",by,waitInSeconds),e);
  }
}

public final TestSubscriber assertTerminated(){
  if (done.getCount() != 0) {
    fail("","Subscriber still running!",errors);
  }
  long c=completions;
  if (c > 1) {
    fail("","Terminated with multiple completions: " + c,errors);
  }
  int s=errors.size();
  if (s > 1) {
    fail("","Terminated with multiple errors: " + s,errors);
  }
  if (c != 0 && s != 0) {
    fail("","Terminated with multiple completions and errors: " + c,errors);
  }
  return this;
}

public boolean isVimeoURLValid(){
  String videoID=getExtractedIdentifier();
  return videoID.length() > 0 && TextUtils.isDigitsOnly(videoID);
}

public boolean isCancelled(){
  return mState.get() == STATE_CANCELLED;
}

public final void pushSubContextList(SubContextList iter){
  m_axesIteratorStack.push(iter);
}

static void checkDesc(final String desc,final boolean canBeVoid){
  int end=checkDesc(desc,0,canBeVoid);
  if (end != desc.length()) {
    throw new IllegalArgumentException("Invalid descriptor: " + desc);
  }
}

private void updateDownloadedFiles(SQLiteDatabase db,String newAccountName,String oldAccountName){
  String whereClause=ProviderTableMeta.FILE_ACCOUNT_OWNER + "=? AND " + ProviderTableMeta.FILE_STORAGE_PATH+ " IS NOT NULL";
  Cursor c=db.query(ProviderTableMeta.FILE_TABLE_NAME,null,whereClause,new String[]{newAccountName},null,null,null);
  try {
    if (c.moveToFirst()) {
      String oldAccountPath=FileStorageUtils.getSavePath(oldAccountName);
      String newAccountPath=FileStorageUtils.getSavePath(newAccountName);
      File oldAccountFolder=new File(oldAccountPath);
      File newAccountFolder=new File(newAccountPath);
      oldAccountFolder.renameTo(newAccountFolder);
      do {
        String oldPath=c.getString(c.getColumnIndex(ProviderTableMeta.FILE_STORAGE_PATH));
        OCFile file=new OCFile(c.getString(c.getColumnIndex(ProviderTableMeta.FILE_PATH)));
        String newPath=FileStorageUtils.getDefaultSavePathFor(newAccountName,file);
        ContentValues cv=new ContentValues();
        cv.put(ProviderTableMeta.FILE_STORAGE_PATH,newPath);
        db.update(ProviderTableMeta.FILE_TABLE_NAME,cv,ProviderTableMeta.FILE_STORAGE_PATH + "=?",new String[]{oldPath});
        Log_OC.v("SQL","Updated path of downloaded file: old file name == " + oldPath + ", new file name == "+ newPath);
      }
 while (c.moveToNext());
    }
  }
  finally {
    c.close();
  }
}

public void dumpOptions(){
  logger.info("");
  for (  Method getter : GetConfigurationInterface.class.getMethods()) {
    String getterName=getter.getName();
    try {
      Object result=getter.invoke(ConfigurationManager.getCurrentProfile());
      if (result instanceof Boolean) {
        result=LocalizationHelper.getYesOrNo((Boolean)result);
      }
      if (result instanceof List) {
        for (int i=0; i < ((List)result).size(); i++) {
          assert ((List)result).get(i) instanceof CustomCatalogEntry;
          CustomCatalogEntry c=((List<CustomCatalogEntry>)result).get(i);
          String OptionName=Helper.pad(Localization.Main.getText("gui.tab6.label") + " [" + (i + 1)+ "], "+ c.getAtTop().toString(),' ',50) + " : ";
          logger.info(OptionName + c.getLabel() + " ("+ c.getValue().toString()+ "), "+ c.getAtTop().toString());
        }
      }
 else {
        String optionName=getterName.substring(3);
        dumpOption(optionName,result);
      }
    }
 catch (    IllegalAccessException e) {
      logger.warn("",e);
    }
catch (    InvocationTargetException e) {
      logger.warn("",e);
    }
  }
  logger.info("");
}

private JsonNode parseLanguageResource(Resource resource) throws IOException {
  InputStream stream=resource.asStream();
  if (stream == null)   return null;
  try {
    JsonNode tree=mapper.readTree(stream);
    return tree;
  }
  finally {
    stream.close();
  }
}

public Collection<Tuple2<TransitionState,Double>> startStates(){
  List<Tuple2<TransitionState,Double>> result=new ArrayList<Tuple2<TransitionState,Double>>();
{
    double score=Math.log(LINE_MRGN_PROB);
    addNoSubGlyphStartState(result,new int[0],TransitionStateType.LMRGN,-1,score);
  }
  for (int destLanguage=0; destLanguage < numLanguages; ++destLanguage) {
    SingleLanguageModel destLM=lm.get(destLanguage);
    double destLanguagePrior=lm.languagePrior(destLanguage);
    for (    int c : destLM.getActiveCharacters()) {
      if (c != spaceCharIndex) {
        double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(getNgramProb(destLM,new int[0],c)) + Math.log(destLanguagePrior);
        addGlyphStartStates(result,c,new int[]{c},TransitionStateType.TMPL,destLanguage,score);
      }
    }
  }
{
    double totalSpaceProb=0.0;
    for (int language=0; language < numLanguages; ++language)     totalSpaceProb+=getNgramProb(lm.get(language),new int[0],spaceCharIndex) * lm.languagePrior(language);
    double score=Math.log(1.0 - LINE_MRGN_PROB) + Math.log(totalSpaceProb);
    addNoSubGlyphStartState(result,new int[]{spaceCharIndex},TransitionStateType.TMPL,-1,score);
  }
  return result;
}

public boolean removeContainerAndCancelIfNecessary(ImageContainer container){
  mContainers.remove(container);
  if (mContainers.isEmpty()) {
    mRequest.cancel();
    return true;
  }
  return false;
}

public KernelDensityFunction(Collection<double[]> points){
  this(points.toArray(new double[points.size()][]));
}

private static Object cloneSerializableObject(Object o) throws IOException, ClassNotFoundException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  ObjectOutputStream out=new ObjectOutputStream(b);
  out.writeObject(o);
  out.flush();
  out.close();
  ByteArrayInputStream bi=new ByteArrayInputStream(b.toByteArray());
  ObjectInputStream in=new ObjectInputStream(bi);
  return in.readObject();
}

public boolean hasThree(){
  return points.size() > 2;
}

public ZipEntry(String name){
  Objects.requireNonNull(name,"name");
  if (name.length() > 0xFFFF) {
    throw new IllegalArgumentException("entry name too long");
  }
  this.name=name;
}

public void _testStatements() throws Exception {
  Connection connection=getConnectionViaDriverManager();
  connection.setAutoCommit(false);
  try {
    Statement stmt=connection.createStatement();
    ResultSet rs=stmt.executeQuery("SELECT * FROM rdb$database");
    rs.close();
    RandomSelector selector1=new RandomSelector(stmt,SELECT_TABLE_1,RECORD_COUNT);
    RandomSelector selector2=new RandomSelector(stmt,SELECT_TABLE_2,RECORD_COUNT);
    Thread thread1=new Thread(selector1,"Selector 1");
    Thread thread2=new Thread(selector2,"Selector 2");
    thread1.start();
    thread2.start();
    Thread.sleep(TEST_TIME_SECONDS * 1000);
    selector1.stop();
    selector2.stop();
    thread1.join();
    thread2.join();
    stmt.close();
  }
  finally {
    connection.close();
  }
}

void readDictionary(String filename,String suffix,InputStream res) throws IOException {
  DictionaryNames nms=new DictionaryNames(filename,suffix);
  BufferedReader in=new BufferedReader(new InputStreamReader(res));
  String line;
  while ((line=in.readLine()) != null) {
    String[] terms=splitter.split(line);
    if (terms.length > maxPhraseLength)     continue;
    if (terms.length == 0)     continue;
    GazEntry ge=gaz.get(terms[0]);
    if (ge == null) {
      gaz.put(terms[0],new GazEntry(terms,1,nms));
    }
 else {
      ge.addChild(terms,1,nms);
    }
  }
  in.close();
}

private T matchTokens(String targetToken,String requestToken){
  int wildcardIndex=0;
  if (targetToken == null && requestToken == null) {
    return exactMatch;
  }
  if (targetToken == null || requestToken == null) {
    return noMatch;
  }
  int beginTargetIndex=0;
  int beginRequestIndex=0;
  String substr=null;
  int targetTokenLength=targetToken.length();
  int requestTokenLength=requestToken.length();
  if (targetToken.indexOf(oneLevelWildcard,beginTargetIndex) != -1) {
    while ((wildcardIndex=targetToken.indexOf(oneLevelWildcard,beginTargetIndex)) != -1) {
      if (wildcardIndex > beginTargetIndex) {
        substr=targetToken.substring(beginTargetIndex,wildcardIndex);
        if ((beginRequestIndex=requestToken.indexOf(substr,beginRequestIndex)) == -1) {
          return noMatch;
        }
        beginTargetIndex=beginTargetIndex + substr.length() + oneLevelWildcardLength;
        beginRequestIndex=beginRequestIndex + substr.length();
      }
 else {
        if (wildcardIndex == beginTargetIndex) {
          if (targetTokenLength == oneLevelWildcardLength) {
            return wildcardMatch;
          }
 else {
            beginTargetIndex=beginTargetIndex + oneLevelWildcardLength;
            continue;
          }
        }
      }
    }
    if (beginTargetIndex >= targetTokenLength) {
      return wildcardMatch;
    }
    String targetStr=targetToken.substring(beginTargetIndex,targetTokenLength);
    String remRequest=requestToken.substring(beginRequestIndex,requestTokenLength);
    int remRequestIndex=-1;
    if ((remRequestIndex=remRequest.lastIndexOf(targetStr,remRequest.length() - 1)) == -1) {
      return noMatch;
    }
 else {
      beginRequestIndex=beginRequestIndex + remRequestIndex;
      if (beginRequestIndex + targetStr.length() >= requestTokenLength) {
        return wildcardMatch;
      }
 else {
        return noMatch;
      }
    }
  }
 else {
    if (targetToken.equals(requestToken)) {
      return exactMatch;
    }
  }
  return noMatch;
}

public void addVertex(ValueGraphVertex v){
  if (vertices.add(v)) {
    if (v.representsParameter()) {
      nParameter++;
    }
    if (representativeV == null) {
      representativeV=v;
    }
  }
}

private void createViewToModel(int rowCount){
  int recreateFrom=0;
  if (viewToModel != null) {
    recreateFrom=Math.min(rowCount,viewToModel.length);
    if (viewToModel.length != rowCount) {
      Row[] oldViewToModel=viewToModel;
      viewToModel=new Row[rowCount];
      System.arraycopy(oldViewToModel,0,viewToModel,0,recreateFrom);
    }
  }
 else {
    viewToModel=new Row[rowCount];
  }
  int i;
  for (i=0; i < recreateFrom; i++) {
    viewToModel[i].modelIndex=i;
  }
  for (i=recreateFrom; i < rowCount; i++) {
    viewToModel[i]=new Row(this,i);
  }
}

public Set<String> files(){
  if (setFiles == null) {
    throw new IllegalStateException("files were not computed yet");
  }
  return Collections.unmodifiableSet(setFiles);
}

public static boolean isMac(){
  String osName=System.getProperty("os.name");
  osName=osName.toLowerCase();
  return osName.indexOf("mac") != -1;
}

private boolean isAssignableFrom(Throwable concreteThrowable,Set<Class<? extends Throwable>> throwableClasses){
  for (  Class<? extends Throwable> t : throwableClasses) {
    if (t.isAssignableFrom(concreteThrowable.getClass())) {
      return true;
    }
  }
  return false;
}

public String popAndEncode(boolean fromOnlineEvent){
synchronized (this) {
    if (activeBridgeMode == null) {
      return null;
    }
    activeBridgeMode.notifyOfFlush(this,fromOnlineEvent);
    if (queue.isEmpty()) {
      return null;
    }
    int totalPayloadLen=0;
    int numMessagesToSend=0;
    for (    JsMessage message : queue) {
      int messageSize=calculatePackedMessageLength(message);
      if (numMessagesToSend > 0 && totalPayloadLen + messageSize > MAX_PAYLOAD_SIZE && MAX_PAYLOAD_SIZE > 0) {
        break;
      }
      totalPayloadLen+=messageSize;
      numMessagesToSend+=1;
    }
    StringBuilder sb=new StringBuilder(totalPayloadLen);
    for (int i=0; i < numMessagesToSend; ++i) {
      JsMessage message=queue.removeFirst();
      packMessage(message,sb);
    }
    if (!queue.isEmpty()) {
      sb.append('*');
    }
    String ret=sb.toString();
    return ret;
  }
}

protected void print(int v) throws IOException {
  print(String.valueOf(v));
}

public Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap(){
  List<ItemSet> itemSets=learn();
  Object2DoubleOpenHashMap<IntRBTreeSet> confidenceMap=new Object2DoubleOpenHashMap<>(itemSets.size());
  for (  ItemSet itemSet : itemSets) {
    IntRBTreeSet itemSetCopy=new IntRBTreeSet(itemSet.items);
    confidenceMap.put(itemSetCopy,itemSet.support / (double)setCount);
  }
  return confidenceMap;
}

public static boolean isAllAlpha(String str){
  if (str == null)   return false;
  for (int i=str.length() - 1; i >= 0; i--) {
    if (!Character.isLetter(str.charAt(i)))     return false;
  }
  return true;
}

private void extract(int minsupp,int minlength,int maxlength,int item,int[] postfix,int plen,int[] buf2,int[] buf3,boolean destruct,Collector col){
  if (header[item] == null) {
    return;
  }
  if (header[item].sibling == null) {
    if (header[item].count < minsupp) {
      return;
    }
    extractLinear(header[item].count,minsupp,minlength,maxlength,item,postfix,plen,buf2,col);
    if (destruct) {
      Arrays.fill(header,null);
    }
    return;
  }
  int support=0;
  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {
    support+=cur.count;
  }
  if (support < minsupp) {
    return;
  }
  Arrays.fill(buf3,0);
  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {
    for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) {
      buf3[parent.key]+=cur.count;
    }
  }
  final int mminlength=minlength - (plen + 1);
  if (mminlength > 0) {
    int fparents=0;
    for (int i=0; i < item; i++) {
      if (buf3[i] >= minsupp) {
        fparents+=1;
      }
    }
    if (fparents < mminlength) {
      return;
    }
  }
  final int last=item - 1;
  FPTree proj=new FPTree(item);
  for (FPNode cur=header[item]; cur != null; cur=cur.sibling) {
    int j=buf2.length;
    for (FPNode parent=cur.parent; parent.key >= 0; parent=parent.parent) {
      if (buf3[parent.key] >= minsupp) {
        buf2[--j]=parent.key;
      }
    }
    if (buf2.length - j >= mminlength) {
      proj.insert(proj,buf2,j,buf2.length,cur.count);
    }
  }
  proj.reduceMemory();
  postfix[plen++]=item;
  if (plen >= minlength && plen <= maxlength) {
    col.collect(support,postfix,0,plen);
  }
  for (int j=last; j >= 0; j--) {
    proj.extract(minsupp,minlength,maxlength,j,postfix,plen,buf2,buf3,destruct,col);
  }
  if (destruct) {
    header[item]=null;
  }
}

public void updatePosition(Particle particle,long elapsedTime){
  Vector3f speed=particle.getSpeed();
  float delta=elapsedTime / 1000.0f;
  float dx=speed.x * delta;
  float dy=speed.y * delta;
  float dz=speed.z * delta;
  Vector3f pos=particle.getPosition();
  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);
}

protected static int toDigit(char ch,int index) throws DSSException {
  int digit=Character.digit(ch,16);
  if (digit == -1) {
    throw new DSSException("Illegal hexadecimal character " + ch + " at index "+ index);
  }
  return digit;
}

static void loadLibraryWithPath(String libName,ClassLoader loader,String libraryPath){
  throw new Error("TODO - no reference DRLVM code");
}

public Enumeration listOptions(){
  Vector newVector=new Vector();
  newVector.addElement(new Option("\tSpecify list of columns to use as MEKA class attributes. 'first' and 'last' are valid\n" + "\tindexes. (default: last)","R",1,"-R <index1,index2-index4,...>"));
  return newVector.elements();
}

public void testConstructorSignBytesPositive7(){
  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,23,-101};
  int aSign=1;
  byte rBytes[]={0,-12,56,100,-2,-76,89,45,91,3,-15,23,-101};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,aNumber.signum());
}

public void save(File keyStore,String type,char[] password,char[] keyPassword,String caAlias) throws GeneralSecurityException, IOException {
  KeyStore store=KeyStore.getInstance(type);
  store.load(null,password);
  store.setKeyEntry(caAlias,caKey,keyPassword,caCerts);
  OutputStream out=new FileOutputStream(keyStore);
  try {
    store.store(out,password);
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
 finally {
    out.close();
  }
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public OrQueryBuilder add(QueryBuilder filterBuilder){
  filters.add(filterBuilder);
  return this;
}

public static void d(String tag,String msg,Object... args){
  if (sLevel > LEVEL_DEBUG) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.d(tag,msg);
}

public static byte[] randomBytes(int length){
  byte[] bytes=new byte[length];
  SEEDED_RANDOM.nextBytes(bytes);
  return bytes;
}

void update(long timeNanos,int rows){
  count++;
  executionTimeMinNanos=Math.min(timeNanos,executionTimeMinNanos);
  executionTimeMaxNanos=Math.max(timeNanos,executionTimeMaxNanos);
  rowCountMin=Math.min(rows,rowCountMin);
  rowCountMax=Math.max(rows,rowCountMax);
  double rowDelta=rows - rowCountMean;
  rowCountMean+=rowDelta / count;
  rowCountM2+=rowDelta * (rows - rowCountMean);
  double timeDelta=timeNanos - executionTimeMeanNanos;
  executionTimeMeanNanos+=timeDelta / count;
  executionTimeM2Nanos+=timeDelta * (timeNanos - executionTimeMeanNanos);
  executionTimeCumulativeNanos+=timeNanos;
  rowCountCumulative+=rows;
  lastUpdateTime=System.currentTimeMillis();
}

public void test_ctor_2() throws SailException {
  final File file=new File(getName() + Options.JNL);
  if (file.exists()) {
    if (!file.delete()) {
      fail("Could not delete file before test: " + file);
    }
  }
  final Properties properties=new Properties();
  properties.setProperty(Options.FILE,file.toString());
  final BigdataSail sail=new BigdataSail(properties);
  try {
    sail.initialize();
    sail.shutDown();
  }
  finally {
    if (!file.exists()) {
      fail("Could not locate store: " + file);
      if (!file.delete()) {
        fail("Could not delete file after test: " + file);
      }
    }
  }
}

@Override public String toString(){
  String result;
  result=null;
  if (isObject()) {
    if (isRoot()) {
      result="JSON";
    }
 else     if (m_Name == null) {
      result="<object>";
    }
 else {
      result=escape(m_Name) + " (Object)";
    }
  }
 else   if (isArray()) {
    if (m_Name == null) {
      result="<array>";
    }
 else {
      result=escape(m_Name) + " (Array)";
    }
  }
 else {
    if (m_Name != null) {
      result=escape(m_Name) + ": " + escape(m_Value);
    }
 else {
      result="" + m_Value;
    }
  }
  return result;
}

public final boolean split_traces_keep_point(){
  if (keep_point == null)   return false;
  ItemSelectionFilter filter=new ItemSelectionFilter(ItemSelectionChoice.TRACES);
  Collection<BrdItem> picked_items=r_board.pick_items(keep_point.keep_point,keep_point.on_layer,filter);
  for (  BrdItem curr_item : picked_items) {
    BrdTracep a_trace=(BrdTracep)curr_item;
    int line_idx=a_trace.polyline_find_line_idx(keep_point.keep_point);
    if (line_idx < 1)     continue;
    ArrayList<BrdTracep> clean_list=a_trace.split_with_end_point(line_idx,keep_point.keep_point);
    return clean_list.size() > 0;
  }
  return false;
}

public static byte[] flipAllBitsInPlace(byte[] bytes,int index,int length){
  int endIndex=Math.min(bytes.length,index + length);
  for (int i=index; i < endIndex; i++) {
    bytes[i]=(byte)(bytes[i] ^ 0xff);
  }
  return bytes;
}

public CreateIndexRequest source(String source){
  return source(source.getBytes(Charsets.UTF_8));
}

private void addUsers(User[] users,LocalConfiguration configuration){
  for (  User user : users) {
    configuration.addUser(user.createUser());
  }
}

void tryToDrainBuffers(){
  if (evictionLock.tryLock()) {
    try {
      drainStatus.lazySet(PROCESSING);
      drainBuffers();
    }
  finally {
      drainStatus.compareAndSet(PROCESSING,IDLE);
      evictionLock.unlock();
    }
  }
}

public void remove(int i){
  individuals.remove(i);
}

public static boolean copyFile(File source,File dest){
  File parentDest=dest.getParentFile();
  if (!parentDest.exists()) {
    if (!createDirectory(parentDest.getAbsolutePath())) {
      return false;
    }
  }
  try {
    Files.copy(source.toPath(),dest.toPath());
    return true;
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
}

public static String propertiesEncode(Properties pp){
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  try {
    pp.store(bos,"adempiere");
  }
 catch (  IOException e) {
    log.log(Level.SEVERE,"store",e);
  }
  String result=new String(bos.toByteArray());
  try {
    result=URLEncoder.encode(result,MobileEnv.ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    log.log(Level.SEVERE,"encode" + MobileEnv.ENCODING,e);
    String enc=System.getProperty("file.encoding");
    try {
      result=URLEncoder.encode(result,enc);
      log.info("encode: " + enc);
    }
 catch (    Exception ex) {
      log.log(Level.SEVERE,"encode",ex);
    }
  }
  return result;
}

@Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {
  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);
  if (mimeType != null) {
    attrs.add(new XmlWriter.Attribute("type",mimeType.getMediaType()));
  }
  if (uri != null) {
    attrs.add(new XmlWriter.Attribute("url",uri));
  }
  if (length != -1) {
    attrs.add(new XmlWriter.Attribute("length",Long.toString(length)));
  }
  w.simpleElement(Namespaces.rssNs,"enclosure",attrs,null);
}

public void testSortsElementsByName() throws Exception {
  XppDom dom1=XppFactory.buildDom("<dom><a/></dom>");
  XppDom dom2=XppFactory.buildDom("<dom><b/></dom>");
  assertEquals(-1,comparator.compare(dom1,dom2));
  assertEquals("/dom/a[0]?",xpath.get());
  assertEquals(1,comparator.compare(dom2,dom1));
  assertEquals("/dom/b[0]?",xpath.get());
}

public static boolean deleteDirectory(final File path){
  if (path.exists()) {
    File[] files=path.listFiles();
    for (    File file : files) {
      if (file.isDirectory()) {
        deleteDirectory(file);
      }
 else {
        file.delete();
      }
    }
  }
  return path.delete();
}

public void morph(Component source,Component destination,int duration,Runnable onCompletion){
  morph(source,destination,duration,false,onCompletion);
}

public static Timestamp stringToTimeStamp(String dateTimeString,String dateTimeFormat,TimeZone tz,Locale locale) throws ParseException {
  DateFormat dateFormat=toDateTimeFormat(dateTimeFormat,tz,locale);
  Date parsedDate=dateFormat.parse(dateTimeString);
  return new Timestamp(parsedDate.getTime());
}

private boolean startsNewHunk(String string){
  if (string.length() == 0)   return true;
  return isLegalChar(string.charAt(0));
}

public void clearValues(){
  valueMap.clear();
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

private HashMap<String,byte[]> readChars(byte[] d){
  HashMap<String,byte[]> hm=new HashMap<String,byte[]>();
  int i=findSlashName(d,"CharStrings");
  if (i < 0) {
    return hm;
  }
  PSParser psp=new PSParser(d,i);
  while (true) {
    String s=psp.readThing();
    char c=s.charAt(0);
    if (c == '/') {
      int len=Integer.parseInt(psp.readThing());
      String go=psp.readThing();
      if (go.equals("-|") || go.equals("RD")) {
        psp.setLoc(psp.getLoc() + 1);
        byte[] line=psp.getNEncodedBytes(len,password,lenIV);
        hm.put(s.substring(1),line);
      }
    }
 else     if (s.equals("end")) {
      break;
    }
  }
  return hm;
}

public static byte[] stringToByteArray(String input){
  char chars[]=input.toCharArray();
  byte bytes[]=new byte[chars.length];
  for (int i=0; i < chars.length; i++) {
    bytes[i]=(byte)chars[i];
  }
  return bytes;
}

public void playFileForUser(String fileName,String userName) throws SoundPlaybackException {
  if (userName == null || userName.isEmpty()) {
    userName=appProperties.getProperty("username_to_join_channel");
  }
  try {
    Guild guild=getUsersGuild(userName);
    joinUsersCurrentChannel(userName);
    playFile(fileName,guild);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}

@Deprecated public static void runFinalizersOnExit(boolean run){
  SecurityManager sm=System.getSecurityManager();
  if (sm != null) {
    sm.checkExit(0);
  }
synchronized (hooksList) {
    finalizeOnExit=run;
  }
}

public double[][] predictIntervals(double conf){
  updateMeanAndVariance();
  double val=Statistics.normalInverse(1.0 - (1.0 - conf) / 2.0);
  double[][] arr=new double[1][2];
  arr[0][1]=m_Mean + val * Math.sqrt(m_Variance);
  arr[0][0]=m_Mean - val * Math.sqrt(m_Variance);
  return arr;
}

public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){
  if (comparator == null) {
    @SuppressWarnings("unchecked") T result=(T)min((Collection<java.lang.Comparable>)collection);
    return result;
  }
  Iterator<? extends T> it=collection.iterator();
  T min=it.next();
  while (it.hasNext()) {
    T next=it.next();
    if (comparator.compare(min,next) > 0) {
      min=next;
    }
  }
  return min;
}

public static boolean checkSHA(final String shaHash,final File file){
  if (TextUtils.isEmpty(shaHash) || file == null || !FileUtils.isReadable(file)) {
    Log.e("Given String is NULL or File is NULL or File is not readable");
    return false;
  }
  final String hash=getSHA(file);
  if (hash == null) {
    Log.e("calculated hash is NULL");
    return false;
  }
  return hash.equalsIgnoreCase(shaHash);
}

public void addValueKeyName(String key){
  valueKeyNames.add(key);
}

public Assignment update(Border border){
  Arrays.sort(cs);
  int j=1;
  boolean found=(cs[0].core == border.core);
  for (int i=1; i < cs.length; i++) {
    if (cs[i].core != cs[i - 1].core) {
      cs[j++]=cs[i];
    }
    found|=(cs[i].core == border.core);
  }
  if (found) {
    if (j == 1) {
      Border r=cs[0];
      cs=null;
      return r;
    }
    if (j < cs.length) {
      cs=Arrays.copyOf(cs,j);
    }
    return this;
  }
  if (j + 1 != cs.length) {
    cs=Arrays.copyOf(cs,j + 1);
  }
  cs[j]=border;
  return this;
}

public static String fromChar(int value){
  if (value > 0xffff)   return null;
  String name;
  initialize();
  name=(String)_byChar.get(new Integer(value));
  return name;
}

public static List<String> splitLines(final String content){
  if (content == null || content.length() == 0)   return Collections.emptyList();
  String[] lines=content.split("[\\r]?\\n");
  return Arrays.asList(lines);
}

@Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState state,PlotRenderingInfo info){
  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);
  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);
  if (b1 || b2) {
    return;
  }
  if (info != null) {
    info.setPlotArea(area);
  }
  RectangleInsets insets=getInsets();
  insets.trim(area);
  drawChipGrid(g2,area);
  drawWaferEdge(g2,area);
}

public void addHole(EdgeRing holeER){
  holeER.setShell(this);
  LinearRing hole=holeER.getRing();
  if (holes == null)   holes=new ArrayList();
  holes.add(hole);
}

private static void registerComponents(){
  registerComponent(BarChartComponent.class,BarChartGui.class);
  registerComponent(DocViewerComponent.class,DocViewerDesktopComponent.class);
  registerComponent(ConsoleComponent.class,ConsoleDesktopComponent.class);
  registerComponent(DisplayComponent.class,DisplayComponentDesktopGui.class);
  registerComponent(DataWorldComponent.class,DataWorldDesktopComponent.class);
  registerComponent(HistogramComponent.class,HistogramGui.class);
  registerComponent(NetworkComponent.class,NetworkDesktopComponent.class);
  registerComponent(OdorWorldComponent.class,OdorWorldDesktopComponent.class);
  registerComponent(PieChartComponent.class,PieChartGui.class);
  registerComponent(ProjectionComponent.class,ProjectionGui.class);
  registerComponent(ReaderComponent.class,ReaderComponentDesktopGui.class);
  registerComponent(ScatterPlotComponent.class,ScatterPlotGui.class);
  registerComponent(TimeSeriesPlotComponent.class,TimeSeriesPlotGui.class);
  registerComponent(RasterPlotComponent.class,RasterPlotGui.class);
  registerComponent(VisionWorldComponent.class,VisionWorldDesktopComponent.class);
  registerComponent(GameComponent.class,GameDesktopComponent.class);
  registerComponent(DeviceInteractionComponent.class,DeviceInteractionDesktopComponent.class);
}

public void addContainer(ImageContainer container){
  mContainers.add(container);
}

private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {
  mOpsInstance=opsType.newInstance();
  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);
  mOpsInstance.onConfiguration(instance,true);
}

private long skipInputBytes(long n) throws IOException {
  cbLock.lock();
  try {
    return iis.skipBytes(n);
  }
  finally {
    cbLock.unlock();
  }
}

public byte[] generate64BitHashId() throws CryptoException {
  try {
    DERBitString publicKeyBitString=encodePublicKeyAsBitString(publicKey);
    byte[] hash=DigestUtil.getMessageDigest(publicKeyBitString.getBytes(),DigestType.SHA1);
    byte[] subHash=Arrays.copyOfRange(hash,12,20);
    subHash[0]&=0x0F;
    subHash[0]|=0x40;
    return subHash;
  }
 catch (  IOException ex) {
    throw new CryptoException(res.getString("NoGenerateKeyIdentifier.exception.message"),ex);
  }
}

public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<C,S> r) throws ArgumentException {
  return new CreateSubCommandHandler<>(parser,p,r,null,p.child(r));
}

public DSubjectInformationAccess(JDialog parent,byte[] value) throws IOException {
  super(parent);
  setTitle(res.getString("DSubjectInformationAccess.Title"));
  initComponents();
  prepopulateWithValue(value);
}

public void testSignerStringIdentityScope() throws Exception {
  Signer s=new SignerStub("sss4",IdentityScope.getSystemScope());
  assertNotNull(s);
  assertEquals("sss4",s.getName());
  assertSame(IdentityScope.getSystemScope(),s.getScope());
  assertNull(s.getPrivateKey());
  try {
    Signer s2=new SignerStub("sss4",IdentityScope.getSystemScope());
    fail("expected KeyManagementException not thrown");
  }
 catch (  KeyManagementException e) {
  }
  Signer s2=new SignerStub(null);
  assertNull(s2.getName());
}

private Figure readLineElement(IXMLElement elem) throws IOException {
  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();
  readCoreAttributes(elem,a);
  readTransformAttribute(elem,a);
  readOpacityAttribute(elem,a);
  readLineAttributes(elem,a);
  if (FILL_COLOR.get(a) != null && STROKE_COLOR.get(a) == null) {
    STROKE_COLOR.put(a,FILL_COLOR.get(a));
  }
  if (FILL_GRADIENT.get(a) != null && STROKE_GRADIENT.get(a) == null) {
    STROKE_GRADIENT.put(a,FILL_GRADIENT.get(a));
  }
  FILL_COLOR.put(a,null);
  FILL_GRADIENT.put(a,null);
  double x1=toNumber(elem,readAttribute(elem,"x1","0"));
  double y1=toNumber(elem,readAttribute(elem,"y1","0"));
  double x2=toNumber(elem,readAttribute(elem,"x2","0"));
  double y2=toNumber(elem,readAttribute(elem,"y2","0"));
  Figure figure=factory.createLine(x1,y1,x2,y2,a);
  elementObjects.put(elem,figure);
  return figure;
}

public ListModel(final Object[] items){
  for (int i=0; i < items.length; ++i)   m_items.add(items[i]);
}

public boolean isSetCallType(){
  return __isset_bit_vector.get(__CALLTYPE_ISSET_ID);
}

private IBuffer mapSource(SourceMapper mapper,IBinaryType info,IClassFile bufferOwner){
  char[] contents=mapper.findSource(getType(),info);
  if (contents != null) {
    IBuffer buffer=BufferManager.createBuffer(bufferOwner);
    if (buffer == null)     return null;
    BufferManager bufManager=getBufferManager();
    bufManager.addBuffer(buffer);
    if (buffer.getCharacters() == null) {
      buffer.setContents(contents);
    }
    buffer.addBufferChangedListener(this);
    mapper.mapSource(getOuterMostEnclosingType(),contents,info);
    return buffer;
  }
 else {
    IBuffer buffer=BufferManager.createNullBuffer(bufferOwner);
    if (buffer == null)     return null;
    BufferManager bufManager=getBufferManager();
    bufManager.addBuffer(buffer);
    buffer.addBufferChangedListener(this);
    return buffer;
  }
}

public JFileDataStoreChooser(Shell parent,int style,final List<String> extensions){
  this(parent,style,associations(extensions));
}

private void computeStaticLoadMetrics(AccessProfile accessProfile) throws BaseCollectionException {
  URI storageSystemId=accessProfile.getSystemId();
  StorageSystem storageSystem=null;
  try {
    storageSystem=_dbClient.queryObject(StorageSystem.class,storageSystemId);
    _logger.info("started computeStaticLoadMetrics for storagesystem: {}",storageSystem.getLabel());
    VNXeApiClient client=getVnxUnityClient(accessProfile);
    List<VNXeNasServer> nasServers=client.getNasServers();
    for (    VNXeNasServer nasServer : nasServers) {
      if ((nasServer.getMode() == VNXeNasServer.NasServerModeEnum.DESTINATION) || nasServer.getIsReplicationDestination()) {
        _logger.debug("Found a replication destination NasServer");
        continue;
      }
      if (nasServer.getIsSystem()) {
        continue;
      }
      VirtualNAS virtualNAS=findvNasByNativeId(storageSystem,nasServer.getId());
      if (virtualNAS != null) {
        _logger.info("Process db metrics for nas server : {}",nasServer.getName());
        StringMap dbMetrics=virtualNAS.getMetrics();
        if (dbMetrics == null) {
          dbMetrics=new StringMap();
        }
        StringMap tmpDbMetrics=populateDbMetrics(nasServer,client);
        dbMetrics.putAll(tmpDbMetrics);
        virtualNAS.setMetrics(dbMetrics);
        _dbClient.updateObject(virtualNAS);
      }
    }
  }
 catch (  Exception e) {
    _logger.error("CollectStatisticsInformation failed. Storage system: {}",storageSystemId,e);
  }
}

public final short readShort() throws java.io.IOException {
  readFully(scratch,0,2);
  return (short)((scratch[0] << 8) | (scratch[1] & 0xff));
}

public ReplicationJob createJobForCopyPartition(long auditLogId,long auditLogEntryCreateTime,HiveObjectSpec spec) throws StateUpdateException {
  Map<String,String> extras=new HashMap<>();
  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));
  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));
  List<String> partitionNames=new ArrayList<>();
  partitionNames.add(spec.getPartitionName());
  ReplicationOperation replicationOperation=ReplicationOperation.COPY_PARTITION;
  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,Optional.empty(),srcCluster.getName(),spec,partitionNames,Optional.empty(),Optional.empty(),Optional.empty(),extras);
  ReplicationTask replicationTask=new CopyPartitionTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,spec,Optional.<Path>empty(),Optional.<Path>empty(),directoryCopier,true);
  return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo);
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

public static void main(String... args) throws Exception {
  String[] pages={"quickstart.html","installation.html","tutorial.html","features.html","performance.html","advanced.html","grammar.html","functions.html","datatypes.html","build.html","history.html","faq.html"};
  StringBuilder buff=new StringBuilder();
  for (  String fileName : pages) {
    String text=getContent(fileName);
    for (    String page : pages) {
      text=StringUtils.replaceAll(text,page + "#","#");
    }
    text=disableRailroads(text);
    text=removeHeaderFooter(fileName,text);
    buff.append(text);
  }
  String finalText=buff.toString();
  File output=new File(BASE_DIR,"onePage.html");
  PrintWriter writer=new PrintWriter(new FileWriter(output));
  writer.println("<html><head><meta http-equiv=\"Content-Type\" " + "content=\"text/html;charset=utf-8\" /><title>");
  writer.println("H2 Documentation");
  writer.println("</title><link rel=\"stylesheet\" type=\"text/css\" " + "href=\"stylesheetPdf.css\" /></head><body>");
  writer.println("<h1>H2 Database Engine</h1>");
  writer.println("<p>Version " + Constants.getFullVersion() + "</p>");
  writer.println(finalText);
  writer.println("</body></html>");
  writer.close();
}

public static Map<String,Object> findOrders(DispatchContext dctx,Map<String,? extends Object> context){
  return findOrders(dctx,context,false);
}

public static boolean isFileExist(String filePath){
  if (StringUtils.isBlank(filePath)) {
    return false;
  }
  File file=new File(filePath);
  return (file.exists() && file.isFile());
}

public static PronghornStage findStageByPath(GraphManager m,int... path){
  int ordinal=path[0];
  int i=0;
  int limit=m.stageIdToStage.length;
  while (i < limit) {
    if (null != m.stageIdToStage[i]) {
      if (-1 == m.multInputIds[m.stageIdToInputsBeginIdx[m.stageIdToStage[i].stageId]]) {
        if (--ordinal <= 0) {
          return findStageByPath(m,m.stageIdToStage[i],1,path);
        }
      }
    }
    i++;
  }
  throw new UnsupportedOperationException("Unable to find ordinal input stage of " + path[0]);
}

public static double[] calculateTStats(double[] coef,double[] stderror,int k){
  double[] result=new double[k];
  for (int i=0; i < k; i++) {
    result[i]=coef[i] / stderror[i];
  }
  return result;
}

static void runBootstrappers(final CoreEarlyComponent early,final List<HeroicBootstrap> bootstrappers) throws Exception {
  for (  final HeroicBootstrap bootstrap : bootstrappers) {
    try {
      bootstrap.run(early);
    }
 catch (    Exception e) {
      throw new Exception("Failed to run bootstrapper " + bootstrap,e);
    }
  }
}

public static byte[] checkIndexHeaderID(DataInput in,byte[] expectedID) throws IOException {
  byte id[]=new byte[StringHelper.ID_LENGTH];
  in.readBytes(id,0,id.length);
  if (!Arrays.equals(id,expectedID)) {
    throw new CorruptIndexException("file mismatch, expected id=" + StringHelper.idToString(expectedID) + ", got="+ StringHelper.idToString(id),in);
  }
  return id;
}

public byte[] toByteArray(){
  byte[] b=output.toByteArray();
  ByteArray.write16bit(numOfEntries,b,0);
  return b;
}

protected void saveBuffer(String name){
  StringBuffer sb=m_History.getNamedBuffer(name);
  if (sb != null) {
    if (m_SaveOut.save(sb)) {
      m_Log.logMessage("Save successful.");
    }
  }
}

public List<Recommendation> scheduleStorage(VirtualArray srcVarray,Set<URI> requestedVPlexSystems,URI srcStorageSystem,VirtualPool srcVpool,boolean isHARequest,VirtualArray requestedHaVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,Project project,VpoolUse vpoolUse,Map<VpoolUse,List<Recommendation>> currentRecommendations){
  _log.info("Executing VPlex high availability placement strategy");
  if (!isHARequest) {
    return scheduleStorageForLocalVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,capabilities,project,vpoolUse,currentRecommendations);
  }
 else {
    return scheduleStorageForDistributedVPLEXVolume(srcVarray,requestedVPlexSystems,srcStorageSystem,srcVpool,requestedHaVarray,haVpool,capabilities,project,vpoolUse,currentRecommendations);
  }
}

@NotNull public static List<String> completeRelativePath(@NotNull String baseDir,@NotNull String shownBaseDir,@NotNull String relativePath){
  List<String> result=Lists.newLinkedList();
  String bashBaseDir=OSUtil.toBashCompatible(baseDir);
  for (  String path : completeAbsolutePath(baseDir + File.separator + relativePath,Predicates.<File>alwaysTrue())) {
    if (path.startsWith(bashBaseDir)) {
      result.add(shownBaseDir + path.substring(bashBaseDir.length()));
    }
  }
  return result;
}

protected boolean isFileSpecifyingModuleSpecifier(String specifier){
  return specifier.length() > 0 && specifier.charAt(specifier.length() - 1) != IPath.SEPARATOR;
}

private void insertExpectedPoolSettingsPerTier(CIMObjectPath capabilitiesPath,Map<String,Object> keyMap){
  List<String> expectedPoolSettingsTier=(List<String>)keyMap.get(Constants.VNXPOOLCAPABILITIES_TIER);
  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.NO_DATA_MOVEMENT);
  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.AUTO_TIER);
  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.HIGH_AVAILABLE_TIER);
  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.LOW_AVAILABLE_TIER);
  expectedPoolSettingsTier.add(capabilitiesPath.toString() + Constants.HYPHEN + Constants.START_HIGH_THEN_AUTO_TIER);
}

private static final void transferStreams(InputStream source,OutputStream destination,String path,IProgressMonitor monitor) throws CoreException {
  monitor=Policy.monitorFor(monitor);
  try {
synchronized (buffer) {
      while (true) {
        int bytesRead=-1;
        try {
          bytesRead=source.read(buffer);
        }
 catch (        IOException e) {
          String msg=NLS.bind(Messages.failedReadDuringWrite,path);
          Policy.error(EFS.ERROR_READ,msg,e);
        }
        try {
          if (bytesRead == -1) {
            destination.close();
            break;
          }
          destination.write(buffer,0,bytesRead);
        }
 catch (        IOException e) {
          String msg=NLS.bind(Messages.couldNotWrite,path);
          Policy.error(EFS.ERROR_WRITE,msg,e);
        }
        monitor.worked(1);
      }
    }
  }
  finally {
    Policy.safeClose(source);
    Policy.safeClose(destination);
  }
}

private int pathPositionAtLevel(int orgUnitLevel){
  return (orgUnitLevel - 1) * 12 + 2;
}

private int makeAvailable(){
  if (pos != -1) {
    return 0;
  }
  total+=tail - head - pad;
  System.arraycopy(buffer,tail - pad,buffer,0,pad);
  head=0;
  tail=pad;
  for (; ; ) {
    int bytesRead=0;
    try {
      bytesRead=input.read(buffer,tail,bufSize - tail);
    }
 catch (    IOException e) {
      throw new RuntimeException("Error while reading multipart stream");
    }
    if (bytesRead == -1) {
      final String msg="Stream ended unexpectedly";
      throw new MalformedStreamException(msg);
    }
    tail+=bytesRead;
    findSeparator();
    int av=available();
    if (av > 0 || pos != -1) {
      return av;
    }
  }
}

protected void addNumericTrainClass(double classValue,double weight){
  if (classValue > m_MaxTarget) {
    m_MaxTarget=classValue;
  }
  if (classValue < m_MinTarget) {
    m_MinTarget=classValue;
  }
  if (m_TrainClassVals == null) {
    m_TrainClassVals=new double[100];
    m_TrainClassWeights=new double[100];
  }
  if (m_NumTrainClassVals == m_TrainClassVals.length) {
    double[] temp=new double[m_TrainClassVals.length * 2];
    System.arraycopy(m_TrainClassVals,0,temp,0,m_TrainClassVals.length);
    m_TrainClassVals=temp;
    temp=new double[m_TrainClassWeights.length * 2];
    System.arraycopy(m_TrainClassWeights,0,temp,0,m_TrainClassWeights.length);
    m_TrainClassWeights=temp;
  }
  m_TrainClassVals[m_NumTrainClassVals]=classValue;
  m_TrainClassWeights[m_NumTrainClassVals]=weight;
  m_NumTrainClassVals++;
}

private List<Group> parseGroups(JSONArray groups,String groupType) throws JSONException, AdeUsageException {
  if (groups.length() == 0)   throw new AdeUsageException("No groups specified for group of type " + groupType);
  List<Group> currentGroups=new ArrayList<Group>();
  for (int i=0; i < groups.length(); i++) {
    JSONObject group=groups.getJSONObject(i);
    String name=group.getString("name");
    String dataType=group.getString("dataType");
    short evalOrder=group.getShort("evaluationOrder");
    String ruleName=group.getString("ruleName");
    if (!verifyStringParam(name,200,"[a-zA-Z0-9_ ]*") || name.equalsIgnoreCase("unassigned") || !validateDataType(dataType)|| evalOrder < 1 || !verifyStringParam(ruleName,200,"[a-zA-Z0-9_ ]*")) {
      throw new AdeUsageException("Invalid parameters for a group of type " + groupType + " was specified");
    }
    currentGroups.add(new Group(name,GroupType.valueOf(groupType),DataType.valueOf(dataType.toUpperCase()),evalOrder,ruleName));
  }
  validateEvaluationOrderAndName(currentGroups);
  return currentGroups;
}

private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){
  if (imageSize < viewSize) {
    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
  }
 else   if (trans > 0) {
    m[axis]=-((imageSize - viewSize) * 0.5f);
  }
 else {
    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));
  }
}

public DoubleFft1d(int n){
  if (n < 1) {
    throw new IllegalArgumentException("n must be greater than 0");
  }
  this.n=n;
  if (!ConcurrencyUtils.isPowerOf2(n)) {
    if (getReminder(n,factors) >= 211) {
      plan=Plans.BLUESTEIN;
      nBluestein=ConcurrencyUtils.nextPow2(n * 2 - 1);
      bk1=new double[2 * nBluestein];
      bk2=new double[2 * nBluestein];
      this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(nBluestein + 0.5) / Math.log(2)) / 2))];
      this.w=new double[nBluestein];
      int twon=2 * nBluestein;
      nw=ip[0];
      if (twon > (nw << 2)) {
        nw=twon >> 2;
        makewt(nw);
      }
      nc=ip[1];
      if (nBluestein > (nc << 2)) {
        nc=nBluestein >> 2;
        makect(nc,w,nw);
      }
      bluesteini();
    }
 else {
      plan=Plans.MIXED_RADIX;
      wtable=new double[4 * n + 15];
      wtable_r=new double[2 * n + 15];
      cffti();
      rffti();
    }
  }
 else {
    plan=Plans.SPLIT_RADIX;
    this.ip=new int[2 + (int)Math.ceil(2 + (1 << (int)(Math.log(n + 0.5) / Math.log(2)) / 2))];
    this.w=new double[n];
    int twon=2 * n;
    nw=ip[0];
    if (twon > (nw << 2)) {
      nw=twon >> 2;
      makewt(nw);
    }
    nc=ip[1];
    if (n > (nc << 2)) {
      nc=n >> 2;
      makect(nc,w,nw);
    }
  }
}

@Override public void dragGestureRecognized(DragGestureEvent evt){
  DragEntry dragEntry=kseFrame.dragSelectedEntry();
  if (dragEntry == null) {
    return;
  }
  ImageIcon icon=dragEntry.getImage();
  Toolkit toolkit=Toolkit.getDefaultToolkit();
  Dimension dim=toolkit.getBestCursorSize(icon.getIconWidth(),icon.getIconHeight());
  BufferedImage buffImage=new BufferedImage(dim.width,dim.height,BufferedImage.TYPE_INT_ARGB_PRE);
  icon.paintIcon(evt.getComponent(),buffImage.getGraphics(),0,0);
  cursor=toolkit.createCustomCursor(buffImage,new Point(0,0),"keystore-entry");
  evt.startDrag(cursor,new KeyStoreEntryTransferable(dragEntry),this);
}

public static boolean isIdentifierHelperChar(char ch){
  return ':' == ch || '.' == ch || '-' == ch || '_' == ch;
}

public void addHeader(String line){
  header.add(line);
}

public static IAddress loadAddress(final ResultSet resultSet,final String columnName) throws SQLException {
  Preconditions.checkNotNull(resultSet,"IE00500: Result set argument can not be null");
  Preconditions.checkNotNull(columnName,"IE00501: Column name argument can not be null");
  final String addressString=readString(resultSet,columnName);
  return resultSet.wasNull() ? null : new CAddress(new BigInteger(addressString));
}

private static String encode(String stringToEncode){
  String encoded;
  try {
    encoded=URLEncoder.encode(stringToEncode,UTF_8);
  }
 catch (  UnsupportedEncodingException e) {
    throw new MCApiRuntimeException(e);
  }
  encoded=encoded.replace("*","%2A");
  encoded=encoded.replace("~","%7E");
  encoded=encoded.replace("+","%20");
  return encoded;
}

public static String toGetUrl(String url,Bundle params){
  if (params != null) {
    if (!url.endsWith("?")) {
      url=url + "?";
    }
    for (    String key : params.keySet()) {
      url=url + key + "="+ params.getString(key)+ "&";
    }
  }
  return url;
}

public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {
  if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null) {
    String prefix1=getPrefixPart(m_firstElementName);
    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {
      m_firstElementURI=uri;
    }
  }
  startPrefixMapping(prefix,uri,false);
}

protected static String guessType(File file){
  String name=file.getName();
  String suffix=name.substring(name.lastIndexOf(".") + 1);
  return mimeMap.get(suffix.toLowerCase(Locale.ROOT));
}

public void testAdvanceAllTerms() throws Exception {
  List<String> termsList=new ArrayList<>();
  termsList.addAll(Arrays.asList(commonTerms));
  termsList.addAll(Arrays.asList(mediumTerms));
  termsList.addAll(Arrays.asList(rareTerms));
  String terms[]=termsList.toArray(new String[0]);
  for (int amount=25; amount < 200; amount+=25) {
    for (int minNrShouldMatch=1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {
      Scorer expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);
      Scorer actual=scorer(terms,minNrShouldMatch,Mode.SCORER);
      assertAdvance(expected,actual,amount);
      expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);
      actual=scorer(terms,minNrShouldMatch,Mode.BULK_SCORER);
      assertAdvance(expected,actual,amount);
    }
  }
}

public boolean isPublic(){
  return Modifier.isPublic(getAccessFlags());
}

public boolean releaseEncumbranceBudget(final Map<String,Object> detailsMap){
  if (detailsMap == null)   throw new ValidationException(Arrays.asList(new ValidationError("required input is null","required input is null")));
  detailsMap.put(Constants.CONSUMEORRELEASE,false);
  final BigDecimal bd=getDetails(detailsMap);
  return bd.intValue() == 1;
}

protected Transferable createLocaleTransferable(long[] formats) throws IOException {
  return null;
}

public void putLength(int len) throws IOException {
  if (len < 128) {
    write((byte)len);
  }
 else   if (len < (1 << 8)) {
    write((byte)0x081);
    write((byte)len);
  }
 else   if (len < (1 << 16)) {
    write((byte)0x082);
    write((byte)(len >> 8));
    write((byte)len);
  }
 else   if (len < (1 << 24)) {
    write((byte)0x083);
    write((byte)(len >> 16));
    write((byte)(len >> 8));
    write((byte)len);
  }
 else {
    write((byte)0x084);
    write((byte)(len >> 24));
    write((byte)(len >> 16));
    write((byte)(len >> 8));
    write((byte)len);
  }
}

public void putGenericFontFamily(String familyName,Font font){
  genericFontFamilies.put(familyName.toLowerCase(),font);
}

private boolean writeReference(Object value,NodeMap node){
  String name=get(value);
  int size=size();
  if (name != null) {
    node.put(refer,name);
    return true;
  }
  String unique=String.valueOf(size);
  node.put(mark,unique);
  put(value,unique);
  return false;
}

private NSObject parseData() throws ParseException {
  NSObject obj=null;
  skip();
  if (accept(DATA_GSOBJECT_BEGIN_TOKEN)) {
    skip();
    expect(DATA_GSBOOL_BEGIN_TOKEN,DATA_GSDATE_BEGIN_TOKEN,DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN);
    if (accept(DATA_GSBOOL_BEGIN_TOKEN)) {
      skip();
      expect(DATA_GSBOOL_TRUE_TOKEN,DATA_GSBOOL_FALSE_TOKEN);
      if (accept(DATA_GSBOOL_TRUE_TOKEN)) {
        obj=new NSNumber(true);
      }
 else {
        obj=new NSNumber(false);
      }
      skip();
    }
 else     if (accept(DATA_GSDATE_BEGIN_TOKEN)) {
      skip();
      String dateString=readInputUntil(DATA_END_TOKEN);
      obj=new NSDate(dateString);
    }
 else     if (accept(DATA_GSINT_BEGIN_TOKEN,DATA_GSREAL_BEGIN_TOKEN)) {
      skip();
      String numberString=readInputUntil(DATA_END_TOKEN);
      obj=new NSNumber(numberString);
    }
    read(DATA_END_TOKEN);
  }
 else {
    String dataString=readInputUntil(DATA_END_TOKEN);
    dataString=dataString.replaceAll("\\s+","");
    int numBytes=dataString.length() / 2;
    byte[] bytes=new byte[numBytes];
    for (int i=0; i < bytes.length; i++) {
      String byteString=dataString.substring(i * 2,i * 2 + 2);
      int byteValue=Integer.parseInt(byteString,16);
      bytes[i]=(byte)byteValue;
    }
    obj=new NSData(bytes);
    skip();
  }
  return obj;
}

public boolean empty(){
  return individuals.size() == 0;
}

@Override public String format(DateTimeFormatter formatter){
  Objects.requireNonNull(formatter,"formatter");
  return formatter.format(this);
}

public @DottedClassName String toDottedClassName(){
  return ClassName.toDottedClassName(className);
}

public DAddExtensions(JFrame parent,String title,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  setTitle(res.getString("DAddExtensions.Title"));
  this.extensions=extensions;
  this.authorityPublicKey=authorityPublicKey;
  this.authorityCertName=authorityCertName;
  this.authorityCertSerialNumber=authorityCertSerialNumber;
  this.subjectPublicKey=subjectPublicKey;
  initComponents();
}

private void playNext(){
  if (mediaType == Config.YOUTUBE_MEDIA_TYPE_VIDEO) {
    seekVideo(0);
    restartVideo();
    return;
  }
  if (previousWasCalled) {
    previousWasCalled=false;
    iterator.next();
  }
  if (!iterator.hasNext()) {
    iterator=youTubeVideos.listIterator();
  }
  videoItem=iterator.next();
  nextWasCalled=true;
  playVideo();
}

public static <T>T invokeMethod(Object obj,String name,Object... params) throws NoSuchMethodException {
  Class[] paramTypes=getParamTypes(params);
  final Class<?> aClass=obj.getClass();
  Method method;
  try {
    method=aClass.getDeclaredMethod(name,paramTypes);
  }
 catch (  NoSuchMethodException e) {
    method=aClass.getMethod(name,paramTypes);
  }
  method.setAccessible(true);
  try {
    return (T)method.invoke(obj,params);
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}

public void addNodes(NodeIterator iterator){
  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));
  if (null != iterator) {
    Node obj;
    while (null != (obj=iterator.nextNode())) {
      addElement(obj);
    }
  }
}

public static RotateStream create(Path path){
synchronized (_streams) {
    WeakReference<RotateStream> ref=_streams.get(path);
    RotateStream stream=ref != null ? ref.get() : null;
    if (stream == null) {
      stream=new RotateStream(path);
      _streams.put(path,new WeakReference<>(stream));
    }
    return stream;
  }
}

private void cleanUpHistory(){
  if (!mHistoryOfNumbers.isEmpty() && mHistoryOfNumbers.size() >= MAX_HISTORY_SIZE) {
    for (int i=0; i < Math.max(1,MAX_HISTORY_SIZE / 2); i++) {
      mPreviousNumbers.remove(mHistoryOfNumbers.removeFirst());
    }
  }
}

@SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){
  float targetAspectRatioX=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_x,DEFAULT_ASPECT_RATIO));
  float targetAspectRatioY=Math.abs(a.getFloat(R.styleable.ucrop_UCropView_ucrop_aspect_ratio_y,DEFAULT_ASPECT_RATIO));
  if (targetAspectRatioX == SOURCE_IMAGE_ASPECT_RATIO || targetAspectRatioY == SOURCE_IMAGE_ASPECT_RATIO) {
    mTargetAspectRatio=SOURCE_IMAGE_ASPECT_RATIO;
  }
 else {
    mTargetAspectRatio=targetAspectRatioX / targetAspectRatioY;
  }
}

public LogMessage(String template,int code){
  this(template,null,EMPTY_STRING_ARRAY,code,Optional.empty());
}

protected String action_translate(String act_string,int act_pos,Hashtable label_map,Hashtable label_types){
  int id_start;
  int pos;
  int len;
  String id_str;
  boolean in_id;
  StringBuffer result;
  char buffer[];
  if (act_string == null || act_string.length() == 0)   return act_string;
  len=act_string.length();
  result=new StringBuffer(len + 50);
  buffer=new char[len + 1];
  act_string.getChars(0,len,buffer,0);
  buffer[len]='\0';
  in_id=false;
  for (pos=id_start=0; pos <= len; pos++) {
    if (in_id) {
      if (!is_id_char(buffer[pos])) {
        id_str=new String(buffer,id_start,pos - id_start);
        result.append(label_translate(id_str,act_pos,label_map,label_types));
        if (buffer[pos] != '\0')         result.append(buffer,pos,1);
        in_id=false;
      }
 else {
      }
    }
 else {
      if (is_id_start(buffer[pos])) {
        in_id=true;
        id_start=pos;
      }
 else {
        if (buffer[pos] != '\0')         result.append(buffer,pos,1);
      }
    }
  }
  return result.toString();
}

public boolean canLoad(){
  return true;
}

public boolean bool(){
  return (Double.isNaN(m_val) || (m_val == 0.0)) ? false : true;
}

public String generateXML(String sessionID,String versionName,long installAge,RequestData data) throws RequestFailureException {
  XmlSerializer serializer=Xml.newSerializer();
  StringWriter writer=new StringWriter();
  try {
    serializer.setOutput(writer);
    serializer.startDocument("UTF-8",true);
    serializer.startTag(null,"request");
    serializer.attribute(null,"protocol","3.0");
    serializer.attribute(null,"version","Android-1.0.0.0");
    serializer.attribute(null,"ismachine","1");
    serializer.attribute(null,"requestid","{" + data.getRequestID() + "}");
    serializer.attribute(null,"sessionid","{" + sessionID + "}");
    serializer.attribute(null,"installsource",data.getInstallSource());
    appendExtraAttributes("request",serializer);
    serializer.startTag(null,"os");
    serializer.attribute(null,"platform","android");
    serializer.attribute(null,"version",Build.VERSION.RELEASE);
    serializer.attribute(null,"arch","arm");
    serializer.endTag(null,"os");
    serializer.startTag(null,"app");
    serializer.attribute(null,"brand",getBrand());
    serializer.attribute(null,"client",getClient());
    serializer.attribute(null,"appid",getAppId());
    serializer.attribute(null,"version",versionName);
    serializer.attribute(null,"nextversion","");
    serializer.attribute(null,"lang",getLanguage());
    serializer.attribute(null,"installage",String.valueOf(installAge));
    serializer.attribute(null,"ap",getAdditionalParameters());
    appendExtraAttributes("app",serializer);
    if (data.isSendInstallEvent()) {
      serializer.startTag(null,"event");
      serializer.attribute(null,"eventtype","2");
      serializer.attribute(null,"eventresult","1");
      serializer.endTag(null,"event");
    }
 else {
      serializer.startTag(null,"updatecheck");
      serializer.endTag(null,"updatecheck");
      serializer.startTag(null,"ping");
      serializer.attribute(null,"active","1");
      serializer.endTag(null,"ping");
    }
    serializer.endTag(null,"app");
    serializer.endTag(null,"request");
    serializer.endDocument();
  }
 catch (  IOException e) {
    throw new RequestFailureException("Caught an IOException creating the XML: ",e);
  }
catch (  IllegalArgumentException e) {
    throw new RequestFailureException("Caught an IllegalArgumentException creating the XML: ",e);
  }
catch (  IllegalStateException e) {
    throw new RequestFailureException("Caught an IllegalStateException creating the XML: ",e);
  }
  return writer.toString();
}

protected boolean strictParseBoolean(String s){
  if (s == null || s.isEmpty()) {
    throw new IllegalArgumentException("empty string does not represent a valid boolean");
  }
  if (s.equalsIgnoreCase("true")) {
    return true;
  }
  if (s.equalsIgnoreCase("false")) {
    return false;
  }
  throw new IllegalArgumentException("Invalid string representing a boolean: " + s);
}

@Override public boolean eIsSet(int featureID){
switch (featureID) {
case FunctionblockPackage.EVENT__NAME:
    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case FunctionblockPackage.EVENT__PROPERTIES:
  return properties != null && !properties.isEmpty();
}
return super.eIsSet(featureID);
}

public String format(DateTimeFormatter formatter){
  Objects.requireNonNull(formatter,"formatter");
  return formatter.format(this);
}

private void initializeSourceCodeMap(String adaptedContent){
  sourceCodeWithLine=new LinkedHashMap<>();
  int lineNumber=1;
  StringReader sr=new StringReader(adaptedContent);
  BufferedReader br=new BufferedReader(sr);
  String line;
  try {
    while ((line=br.readLine()) != null) {
      sourceCodeWithLine.put(lineNumber,line);
      lineNumber++;
    }
  }
 catch (  IOException ex) {
    LOGGER.error("Error occured while initialize source code map " + ex.getMessage());
  }
}

@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion != newVersion) {
    if (newVersion == 2 && oldVersion == 1) {
      WXLogUtils.d(TAG_STORAGE,"storage is updating from version " + oldVersion + " to version "+ newVersion);
      boolean updateResult=true;
      try {
        long start=System.currentTimeMillis();
        db.beginTransaction();
        String SQL_ADD_COLUMN_TIMESTAMP="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_TIMESTAMP+ " TEXT;";
        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_TIMESTAMP);
        db.execSQL(SQL_ADD_COLUMN_TIMESTAMP);
        String SQL_ADD_COLUMN_PERSISTENT="ALTER TABLE " + TABLE_STORAGE + " ADD COLUMN "+ COLUMN_PERSISTENT+ " INTEGER;";
        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_ADD_COLUMN_PERSISTENT);
        db.execSQL(SQL_ADD_COLUMN_PERSISTENT);
        String SQL_UPDATE_TABLE="UPDATE " + TABLE_STORAGE + " SET "+ COLUMN_TIMESTAMP+ " = '"+ sDateFormatter.format(new Date())+ "' , "+ COLUMN_PERSISTENT+ " = 0";
        WXLogUtils.d(TAG_STORAGE,"exec sql : " + SQL_UPDATE_TABLE);
        db.execSQL(SQL_UPDATE_TABLE);
        db.setTransactionSuccessful();
        long time=System.currentTimeMillis() - start;
        WXLogUtils.d(TAG_STORAGE,"storage updated success (" + time + "ms)");
      }
 catch (      Exception e) {
        WXLogUtils.d(TAG_STORAGE,"storage updated failed from version " + oldVersion + " to version "+ newVersion+ ","+ e.getMessage());
        updateResult=false;
      }
 finally {
        db.endTransaction();
      }
      if (!updateResult) {
        WXLogUtils.d(TAG_STORAGE,"storage is rollback,all data will be removed");
        deleteDB();
        onCreate(db);
      }
    }
 else {
      deleteDB();
      onCreate(db);
    }
  }
}

public Matrix U(){
  return U.clone();
}

protected Set<String> allowedDuplicateErrorCodes(){
  return Collections.emptySet();
}

private boolean isFieldVisited(Object object,Field objectField,Field field){
  Map<String,Set<String>> bag=visitedFields.get(object);
  if (bag == null) {
    return false;
  }
  String objectFiledKey=objectField == null ? "" : objectField.toGenericString();
  Set<String> fields=bag.get(objectFiledKey);
  return fields != null && fields.contains(field);
}

public void removeFromCompletedList(DownloadInfoRunnable downloadInfoRunnable){
  mCompletedList.remove(downloadInfoRunnable);
}

protected void addShingledPhraseQueries(final BooleanQuery mainQuery,final List<Clause> clauses,final Collection<FieldParams> fields,int shingleSize,final float tiebreaker,final int slop) throws SyntaxError {
  if (null == fields || fields.isEmpty() || null == clauses || clauses.size() < shingleSize)   return;
  if (0 == shingleSize)   shingleSize=clauses.size();
  final int lastClauseIndex=shingleSize - 1;
  StringBuilder userPhraseQuery=new StringBuilder();
  for (int i=0; i < clauses.size() - lastClauseIndex; i++) {
    userPhraseQuery.append('"');
    for (int j=0; j <= lastClauseIndex; j++) {
      userPhraseQuery.append(clauses.get(i + j).val);
      userPhraseQuery.append(' ');
    }
    userPhraseQuery.append('"');
    userPhraseQuery.append(' ');
  }
  ExtendedSolrQueryParser pp=createEdismaxQueryParser(this,IMPOSSIBLE_FIELD_NAME);
  pp.addAlias(IMPOSSIBLE_FIELD_NAME,tiebreaker,getFieldBoosts(fields));
  pp.setPhraseSlop(slop);
  pp.setRemoveStopFilter(true);
  pp.makeDismax=true;
  pp.minClauseSize=2;
  Query phrase=pp.parse(userPhraseQuery.toString());
  if (phrase != null) {
    mainQuery.add(phrase,BooleanClause.Occur.SHOULD);
  }
}

public String asXmlId(){
  return DatatypeConverter.printHexBinary(tokenDigest.getValue());
}

private void updateInfo(){
  m_updating=true;
  nameField.setText(m_cc.getName());
  appsHostField.setText(m_cc.getAppsHost());
  appsPortField.setText(String.valueOf(m_cc.getAppsPort()));
  bTestApps.setIcon(getStatusIcon(m_cc.isAppsServerOK(false)));
  boolean rw=CConnection.isServerEmbedded() ? true : !m_cc.isAppsServerOK(false);
  dbTypeLabel.setReadWrite(rw);
  dbTypeField.setReadWrite(rw);
  dbTypeField.setSelectedItem(m_cc.getType());
  hostLabel.setReadWrite(rw);
  hostField.setReadWrite(rw);
  hostField.setText(m_cc.getDbHost());
  portLabel.setReadWrite(rw);
  dbPortField.setReadWrite(rw);
  dbPortField.setText(String.valueOf(m_cc.getDbPort()));
  sidLabel.setReadWrite(rw);
  sidField.setReadWrite(rw);
  sidField.setText(m_cc.getDbName());
  dbUidLabel.setReadWrite(rw);
  dbUidField.setReadWrite(rw);
  dbUidField.setText(m_cc.getDbUid());
  dbPwdField.setEditable(rw);
  dbPwdField.setText(m_cc.getDbPwd());
  cbBequeath.setReadWrite(rw);
  cbBequeath.setEnabled(m_cc.isOracle());
  cbBequeath.setSelected(m_cc.isBequeath());
  boolean fwEnabled=rw && m_cc.isViaFirewall() && m_cc.isOracle();
  cbFirewall.setReadWrite(rw && m_cc.isOracle());
  cbFirewall.setSelected(m_cc.isViaFirewall());
  fwHostLabel.setReadWrite(fwEnabled);
  fwHostField.setReadWrite(fwEnabled);
  fwHostField.setText(m_cc.getFwHost());
  fwPortLabel.setReadWrite(fwEnabled);
  fwPortField.setReadWrite(fwEnabled);
  fwPortField.setText(String.valueOf(m_cc.getFwPort()));
  bTestDB.setToolTipText(m_cc.getConnectionURL());
  bTestDB.setIcon(getStatusIcon(m_cc.isDatabaseOK()));
  m_updating=false;
}

public void createSnapshot() throws BackupException {
  logger.debug("Creating snapshot: " + this.snapshotName);
  processHelper.exec("Creating file system snapshot",lvcreateCmd);
}

public final Uri storeLogFile(final LogFile logFile,final int sessionId){
  final ContentValues values=new ContentValues();
  values.put(Schema.COL_MANUFACTURER,logFile.getManufacturer());
  values.put(Schema.COL_MODEL,logFile.getModel());
  values.put(Schema.COL_REVISION,logFile.getRevision());
  values.put(Schema.COL_SWID,logFile.getSwid());
  values.put(Schema.COL_SWVER,logFile.getSwVersion());
  values.put(Schema.COL_TIMESTAMP,System.currentTimeMillis());
  values.put(Schema.COL_SESSION_ID,sessionId);
  return contentResolver.insert(ContentProvider.CONTENT_URI_LOGFILE,values);
}

public Map<String,String> merge(Map<String,String> curProps,Map<String,String> newProps) throws IOException {
  Map<String,String> props=new HashMap<>(newProps);
  for (  Map.Entry<String,String> e : curProps.entrySet()) {
    String name=e.getKey();
    String curValue=e.getValue();
    if (props.containsKey(name)) {
      props.put(name,curValue);
    }
  }
  return props;
}

@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  final int focusableCount=views.size();
  final int descendantFocusability=getDescendantFocusability();
  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {
    for (int i=0; i < getChildCount(); i++) {
      final View child=getChildAt(i);
      if (child.getVisibility() == VISIBLE) {
        ItemInfo ii=infoForChild(child);
        if (ii != null && ii.position == mCurItem) {
          child.addFocusables(views,direction,focusableMode);
        }
      }
    }
  }
  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {
    if (!isFocusable()) {
      return;
    }
    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
      return;
    }
    if (views != null) {
      views.add(this);
    }
  }
}

public Builder deletePreferredLanguage(){
  deleteFields.add("preferredLanguage");
  return this;
}

public void onPrepared(MediaPlayer player){
  mState=State.PLAYING;
  updateNotification(String.format(getString(R.string.media_state_playing),mFile.getFileName()));
  if (mMediaController != null) {
    mMediaController.setEnabled(true);
  }
  player.seekTo(mStartPosition);
  configAndStartMediaPlayer();
  if (!mPlayOnPrepared) {
    processPauseRequest();
  }
  if (mMediaController != null) {
    mMediaController.updatePausePlay();
  }
}

private void parseParameter(String token,String value){
  if (token != null && value != null) {
    if (token.equalsIgnoreCase(NONCE_TOKEN)) {
      mNonce=value;
      return;
    }
    if (token.equalsIgnoreCase(STALE_TOKEN)) {
      parseStale(value);
      return;
    }
    if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {
      mOpaque=value;
      return;
    }
    if (token.equalsIgnoreCase(QOP_TOKEN)) {
      mQop=value.toLowerCase();
      return;
    }
    if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {
      mAlgorithm=value.toLowerCase();
      return;
    }
  }
}

public List<String> makeURLList(String shard){
  List<String> urls=StrUtils.splitSmart(shard,"|",true);
  for (int i=0; i < urls.size(); i++) {
    urls.set(i,buildUrl(urls.get(i)));
  }
  if (urls.size() > 1)   Collections.shuffle(urls,r);
  return urls;
}

public void skip(int n) throws IOException {
  dis.skip(n);
}

public void addContainer(ImageContainer container){
  mContainers.add(container);
}

public void toAllInRadius(WorldServer world,Vec3d pos,double radius){
  double maxDistance=radius * radius + radius * radius + radius * radius;
  toAll(world.getPlayers(EntityPlayerMP.class,null));
}

public static ECDHECryptography fromNamedCurveId(int supportedGroupId){
  SupportedGroup group=SupportedGroup.fromId(supportedGroupId);
  if (group == null) {
    return null;
  }
 else {
    try {
      return new ECDHECryptography(group.name());
    }
 catch (    GeneralSecurityException e) {
      LOGGER.log(Level.WARNING,"Cannot create ephemeral keys for group [{0}]: {1}",new Object[]{group.name(),e.getMessage()});
      return null;
    }
  }
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

private static void addHeader(Message message,String name,String value){
  Map<String,List<String>> protocolHeaders=CastUtils.cast((Map<?,?>)message.get(Message.PROTOCOL_HEADERS));
  if (protocolHeaders == null) {
    protocolHeaders=new TreeMap<String,List<String>>(String.CASE_INSENSITIVE_ORDER);
    message.put(Message.PROTOCOL_HEADERS,protocolHeaders);
  }
  List<String> header=CastUtils.cast((List<?>)protocolHeaders.get(name));
  if (header == null) {
    header=new ArrayList<String>();
    protocolHeaders.put(name,header);
  }
  if (header.size() == 0) {
    header.add(value);
  }
 else {
    header.set(0,header.get(0) + "," + value);
  }
}

private static void swilk(boolean[] init,double[] x,int n,int n1,int n2,double[] a,double[] w,double[] pw,int[] ifault){
  pw[0]=1.0;
  if (w[0] >= 0.0) {
    w[0]=1.0;
  }
  double an=n;
  ifault[0]=3;
  int nn2=n / 2;
  if (n2 < nn2) {
    return;
  }
  ifault[0]=1;
  if (n < 3) {
    return;
  }
  if (!init[0]) {
    if (n == 3) {
      a[1]=SQRTH;
    }
 else {
      double an25=an + 0.25;
      double summ2=0.0;
      for (int i=1; i <= n2; ++i) {
        a[i]=ppnd((i - TH) / an25);
        summ2+=a[i] * a[i];
      }
      summ2*=2.0;
      double ssumm2=Math.sqrt(summ2);
      double rsn=1.0 / Math.sqrt(an);
      double a1=poly(C1,6,rsn) - a[1] / ssumm2;
      int i1;
      double fac;
      if (n > 5) {
        i1=3;
        double a2=-a[2] / ssumm2 + poly(C2,6,rsn);
        fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1] - 2.0 * a[2] * a[2]) / (1.0 - 2.0 * a1 * a1 - 2.0 * a2 * a2));
        a[1]=a1;
        a[2]=a2;
      }
 else {
        i1=2;
        fac=Math.sqrt((summ2 - 2.0 * a[1] * a[1]) / (1.0 - 2.0 * a1 * a1));
        a[1]=a1;
      }
      for (int i=i1; i <= nn2; ++i) {
        a[i]=-a[i] / fac;
      }
    }
    init[0]=true;
  }
  if (n1 < 3) {
    return;
  }
  int ncens=n - n1;
  ifault[0]=4;
  if (ncens < 0 || (ncens > 0 && n < 20)) {
    return;
  }
  ifault[0]=5;
  double delta=ncens / an;
  if (delta > 0.8) {
    return;
  }
  double w1, xx;
  if (w[0] < 0.0) {
    w1=1.0 + w[0];
    ifault[0]=0;
  }
 else {
    ifault[0]=6;
    double range=x[n1] - x[1];
    if (range < SMALL) {
      return;
    }
    ifault[0]=7;
    xx=x[1] / range;
    double sx=xx;
    double sa=-a[1];
    int j=n - 1;
    for (int i=2; i <= n1; ++i) {
      double xi=x[i] / range;
      sx+=xi;
      if (i != j) {
        sa+=sign(1,i - j) * a[Math.min(i,j)];
      }
      xx=xi;
      --j;
    }
    ifault[0]=0;
    if (n > 5000) {
      ifault[0]=2;
    }
    sa/=n1;
    sx/=n1;
    double ssa=0.0;
    double ssx=0.0;
    double sax=0.0;
    j=n;
    double asa;
    for (int i=1; i <= n1; ++i) {
      if (i != j) {
        asa=sign(1,i - j) * a[Math.min(i,j)] - sa;
      }
 else {
        asa=-sa;
      }
      double xsx=x[i] / range - sx;
      ssa+=asa * asa;
      ssx+=xsx * xsx;
      sax+=asa * xsx;
      --j;
    }
    double ssassx=Math.sqrt(ssa * ssx);
    w1=(ssassx - sax) * (ssassx + sax) / (ssa * ssx);
  }
  w[0]=1.0 - w1;
  if (n == 3) {
    pw[0]=PI6 * (Math.asin(Math.sqrt(w[0])) - STQR);
    return;
  }
  double y=Math.log(w1);
  xx=Math.log(an);
  double m=0.0;
  double s=1.0;
  if (n <= 11) {
    double gamma=poly(G,2,an);
    if (y >= gamma) {
      pw[0]=SMALL;
      return;
    }
    y=-Math.log(gamma - y);
    m=poly(C3,4,an);
    s=Math.exp(poly(C4,4,an));
  }
 else {
    m=poly(C5,4,xx);
    s=Math.exp(poly(C6,3,xx));
  }
  if (ncens > 0) {
    double ld=-Math.log(delta);
    double bf=1.0 + xx * BF1;
    double z90f=Z90 + bf * Math.pow(poly(C7,2,Math.pow(XX90,xx)),ld);
    double z95f=Z95 + bf * Math.pow(poly(C8,2,Math.pow(XX95,xx)),ld);
    double z99f=Z99 + bf * Math.pow(poly(C9,2,xx),ld);
    double zfm=(z90f + z95f + z99f) / 3.0;
    double zsd=(Z90 * (z90f - zfm) + Z95 * (z95f - zfm) + Z99 * (z99f - zfm)) / ZSS;
    double zbar=zfm - zsd * ZM;
    m+=zbar * s;
    s*=zsd;
  }
  pw[0]=alnorm((y - m) / s,UPPER);
}

public String asString(){
  StringBuilder buff=new StringBuilder();
  for (int i=0; i < arrayLevel; i++) {
    if (refCount) {
      buff.append("ptr< ");
    }
    buff.append("array< ");
  }
  if (refCount) {
    if (!classObj.isPrimitive) {
      buff.append("ptr< ");
    }
  }
  buff.append(classObj.toString());
  if (refCount) {
    if (!classObj.isPrimitive) {
      buff.append(" >");
    }
  }
  for (int i=0; i < arrayLevel; i++) {
    if (refCount) {
      buff.append(" >");
    }
 else {
      if (!classObj.isPrimitive) {
        buff.append("*");
      }
    }
    buff.append(" >");
  }
  if (!refCount) {
    if (isObject()) {
      buff.append("*");
    }
  }
  return buff.toString();
}

public boolean recreateWorkspaceTable(SQLiteDatabase db){
  db.beginTransaction();
  try {
    Cursor c=db.query(TABLE_WORKSPACE_SCREENS,new String[]{LauncherSettings.WorkspaceScreens._ID},null,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK);
    ArrayList<Long> sortedIDs=new ArrayList<Long>();
    long maxId=0;
    try {
      while (c.moveToNext()) {
        Long id=c.getLong(0);
        if (!sortedIDs.contains(id)) {
          sortedIDs.add(id);
          maxId=Math.max(maxId,id);
        }
      }
    }
  finally {
      c.close();
    }
    db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);
    addWorkspacesTable(db,false);
    int total=sortedIDs.size();
    for (int i=0; i < total; i++) {
      ContentValues values=new ContentValues();
      values.put(LauncherSettings.WorkspaceScreens._ID,sortedIDs.get(i));
      values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i);
      addModifiedTime(values);
      db.insertOrThrow(TABLE_WORKSPACE_SCREENS,null,values);
    }
    db.setTransactionSuccessful();
    mMaxScreenId=maxId;
  }
 catch (  SQLException ex) {
    Log.e(TAG,ex.getMessage(),ex);
    return false;
  }
 finally {
    db.endTransaction();
  }
  return true;
}

public List<JsonObject> executeParametrizedStatement(String statement,List<String> parameterNames,List<Object> parameterValues){
  JsonObject namedParams=JsonObject.create();
  for (int param=0; param < parameterNames.size(); param++) {
    namedParams.put(parameterNames.get(param),parameterValues.get(param));
  }
  ParameterizedN1qlQuery query=N1qlQuery.parameterized(statement,namedParams);
  return executeQuery(query);
}

public final T endAll(){
  while (!tagStack.isEmpty()) {
    end();
  }
  return getSelf();
}

public void entityReference(String name) throws org.xml.sax.SAXException {
  append(m_doc.createEntityReference(name));
}

public static Table createPartitionedTable(Configuration conf,HiveMetastoreClient ms,HiveObjectSpec tableSpec,TableType tableType,Path warehouseRoot) throws IOException, HiveMetastoreException {
  Path tableLocation=getPathForHiveObject(warehouseRoot,tableSpec);
  Table table=new Table();
  table.setDbName(tableSpec.getDbName());
  table.setTableName(tableSpec.getTableName());
  Map<String,String> parameters=new HashMap<>();
  parameters.put(HiveParameterKeys.TLDT,Long.toString(System.currentTimeMillis()));
  table.setParameters(parameters);
  table.setTableType(tableType.toString());
  List<FieldSchema> partitionCols=new ArrayList<>();
  partitionCols.add(new FieldSchema("ds","string","my ds comment"));
  partitionCols.add(new FieldSchema("hr","string","my hr comment"));
  table.setPartitionKeys(partitionCols);
  StorageDescriptor sd=new StorageDescriptor();
  List<FieldSchema> columns=new ArrayList<>();
  columns.add(new FieldSchema("key","string","my comment"));
  sd.setCols(columns);
  if (tableType == TableType.MANAGED_TABLE || tableType == TableType.EXTERNAL_TABLE) {
    sd.setLocation(tableLocation.toString());
  }
  sd.setSerdeInfo(new SerDeInfo("LazySimpleSerde","org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe",new HashMap<>()));
  table.setSd(sd);
  if (!ms.existsDb(table.getDbName())) {
    ms.createDatabase(new Database(table.getDbName(),null,null,null));
  }
  ms.createTable(table);
  return table;
}

private boolean linkLast(Node<E> node){
  if (count >= capacity)   return false;
  Node<E> l=last;
  node.prev=l;
  last=node;
  if (first == null)   first=node;
 else   l.next=node;
  ++count;
  notEmpty.signal();
  return true;
}

void drawDivider(Canvas canvas,Rect bounds,int childIndex){
  final Drawable divider=mDivider;
  final boolean clipDivider=mClipDivider;
  if (!clipDivider) {
    divider.setBounds(bounds);
  }
 else {
    canvas.save();
    canvas.clipRect(bounds);
  }
  divider.draw(canvas);
  if (clipDivider) {
    canvas.restore();
  }
}

protected FormSpec(DefaultAlignment defaultAlignment,String encodedDescription){
  this(defaultAlignment,Sizes.DEFAULT,NO_GROW);
  parseAndInitValues(encodedDescription.toLowerCase(Locale.ENGLISH));
}

public static <T>List<T> decode(InputStream data,Parser<T> parser) throws IOException {
  CodedInputStream stream=CodedInputStream.newInstance(data);
  List<T> list=new ArrayList<>();
  while (!stream.isAtEnd()) {
    int size=stream.readRawVarint32();
    byte[] element=stream.readRawBytes(size);
    T decoded=parser.parseFrom(element);
    list.add(decoded);
  }
  return list;
}

@Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){
  if ((!getPlotLines()) || ((!(domainAxis instanceof CyclicNumberAxis)) && (!(rangeAxis instanceof CyclicNumberAxis))) || (item <= 0)) {
    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);
    return;
  }
  double xn=dataset.getXValue(series,item - 1);
  double yn=dataset.getYValue(series,item - 1);
  if (Double.isNaN(yn)) {
    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);
    return;
  }
  double[] x=new double[2];
  double[] y=new double[2];
  x[0]=xn;
  y[0]=yn;
  xn=dataset.getXValue(series,item);
  yn=dataset.getYValue(series,item);
  if (Double.isNaN(yn)) {
    return;
  }
  x[1]=xn;
  y[1]=yn;
  double xcycleBound=Double.NaN;
  double ycycleBound=Double.NaN;
  boolean xBoundMapping=false, yBoundMapping=false;
  CyclicNumberAxis cnax=null, cnay=null;
  if (domainAxis instanceof CyclicNumberAxis) {
    cnax=(CyclicNumberAxis)domainAxis;
    xcycleBound=cnax.getCycleBound();
    xBoundMapping=cnax.isBoundMappedToLastCycle();
    if ((x[0] != x[1]) && ((xcycleBound >= x[0]) && (xcycleBound <= x[1]) || (xcycleBound >= x[1]) && (xcycleBound <= x[0]))) {
      double[] nx=new double[3];
      double[] ny=new double[3];
      nx[0]=x[0];
      nx[2]=x[1];
      ny[0]=y[0];
      ny[2]=y[1];
      nx[1]=xcycleBound;
      ny[1]=(y[1] - y[0]) * (xcycleBound - x[0]) / (x[1] - x[0]) + y[0];
      x=nx;
      y=ny;
    }
  }
  if (rangeAxis instanceof CyclicNumberAxis) {
    cnay=(CyclicNumberAxis)rangeAxis;
    ycycleBound=cnay.getCycleBound();
    yBoundMapping=cnay.isBoundMappedToLastCycle();
    if ((y[0] != y[1]) && ((ycycleBound >= y[0]) && (ycycleBound <= y[1]) || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) {
      double[] nx=new double[x.length + 1];
      double[] ny=new double[y.length + 1];
      nx[0]=x[0];
      nx[2]=x[1];
      ny[0]=y[0];
      ny[2]=y[1];
      ny[1]=ycycleBound;
      nx[1]=(x[1] - x[0]) * (ycycleBound - y[0]) / (y[1] - y[0]) + x[0];
      if (x.length == 3) {
        nx[3]=x[2];
        ny[3]=y[2];
      }
      x=nx;
      y=ny;
    }
 else     if ((x.length == 3) && (y[1] != y[2]) && ((ycycleBound >= y[1]) && (ycycleBound <= y[2]) || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) {
      double[] nx=new double[4];
      double[] ny=new double[4];
      nx[0]=x[0];
      nx[1]=x[1];
      nx[3]=x[2];
      ny[0]=y[0];
      ny[1]=y[1];
      ny[3]=y[2];
      ny[2]=ycycleBound;
      nx[2]=(x[2] - x[1]) * (ycycleBound - y[1]) / (y[2] - y[1]) + x[1];
      x=nx;
      y=ny;
    }
  }
  if (x.length == 2) {
    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,dataset,series,item,crosshairState,pass);
    return;
  }
  OverwriteDataSet newset=new OverwriteDataSet(x,y,dataset);
  if (cnax != null) {
    if (xcycleBound == x[0]) {
      cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);
    }
    if (xcycleBound == x[1]) {
      cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound);
    }
  }
  if (cnay != null) {
    if (ycycleBound == y[0]) {
      cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound);
    }
    if (ycycleBound == y[1]) {
      cnay.setBoundMappedToLastCycle(y[0] <= ycycleBound);
    }
  }
  super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,1,crosshairState,pass);
  if (cnax != null) {
    if (xcycleBound == x[1]) {
      cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound);
    }
    if (xcycleBound == x[2]) {
      cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);
    }
  }
  if (cnay != null) {
    if (ycycleBound == y[1]) {
      cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound);
    }
    if (ycycleBound == y[2]) {
      cnay.setBoundMappedToLastCycle(y[1] <= ycycleBound);
    }
  }
  super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,2,crosshairState,pass);
  if (x.length == 4) {
    if (cnax != null) {
      if (xcycleBound == x[2]) {
        cnax.setBoundMappedToLastCycle(x[3] <= xcycleBound);
      }
      if (xcycleBound == x[3]) {
        cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound);
      }
    }
    if (cnay != null) {
      if (ycycleBound == y[2]) {
        cnay.setBoundMappedToLastCycle(y[3] <= ycycleBound);
      }
      if (ycycleBound == y[3]) {
        cnay.setBoundMappedToLastCycle(y[2] <= ycycleBound);
      }
    }
    super.drawItem(g2,state,dataArea,info,plot,domainAxis,rangeAxis,newset,series,3,crosshairState,pass);
  }
  if (cnax != null) {
    cnax.setBoundMappedToLastCycle(xBoundMapping);
  }
  if (cnay != null) {
    cnay.setBoundMappedToLastCycle(yBoundMapping);
  }
}

public static void writeInt(DataOutput out,int v) throws IOException {
  out.writeByte(0xff & v);
  out.writeByte(0xff & (v >>> 8));
  out.writeByte(0xff & (v >>> 16));
  out.writeByte(0xff & (v >>> 24));
}

public void writeField(final String name,final double value) throws java.io.IOException {
  writeField(name,Double.toString(value));
}

public Creature calculateNextCreature(final int questLevel){
  final List<Creature> possibleCreaturesToSpawn=new ArrayList<Creature>();
  int lastLevel=0;
  for (  final Creature creature : sortedCreatures) {
    if (creature.getLevel() > questLevel) {
      break;
    }
    if (creature.getLevel() > lastLevel) {
      possibleCreaturesToSpawn.clear();
      lastLevel=creature.getLevel();
    }
    possibleCreaturesToSpawn.add(creature);
  }
  Creature creatureToSpawn=null;
  if (possibleCreaturesToSpawn.size() == 0) {
    creatureToSpawn=sortedCreatures.get(sortedCreatures.size() - 1);
  }
 else {
    Collections.shuffle(possibleCreaturesToSpawn);
    creatureToSpawn=possibleCreaturesToSpawn.get(0);
  }
  return creatureToSpawn;
}

@Override public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){
  String newIntervalStr=newProps.getProperty(BackupConstants.SCHEDULE_INTERVAL);
  String newStartTimeStr=newProps.getProperty(BackupConstants.SCHEDULE_TIME);
  if ((newIntervalStr == null || newIntervalStr.isEmpty()) && (newStartTimeStr == null || newStartTimeStr.isEmpty())) {
    _log.info("No changes in backup interval and start time");
    return;
  }
  String intervalStr=(newIntervalStr == null || newIntervalStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_INTERVAL) : newIntervalStr;
  String startTimeStr=(newStartTimeStr == null || newStartTimeStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_TIME) : newStartTimeStr;
  _log.info("intervalStr={}, startTimeStr={}",intervalStr,startTimeStr);
  validateBackupIntervalAndStartTime(intervalStr,startTimeStr);
}

@Override public void deleteTrait(String guid,String traitNameToBeDeleted) throws AtlasException {
  guid=ParamChecker.notEmpty(guid,"entity id");
  traitNameToBeDeleted=ParamChecker.notEmpty(traitNameToBeDeleted,"trait name");
  if (!typeSystem.isRegistered(traitNameToBeDeleted)) {
    final String msg=String.format("trait=%s should be defined in type system before it can be deleted",traitNameToBeDeleted);
    LOG.error(msg);
    throw new TypeNotFoundException(msg);
  }
  repository.deleteTrait(guid,traitNameToBeDeleted);
  onTraitDeletedFromEntity(repository.getEntityDefinition(guid),traitNameToBeDeleted);
}

public void addTables(Collection<Table> tables){
  for (Iterator<Table> it=tables.iterator(); it.hasNext(); ) {
    addTable((Table)it.next());
  }
}

protected void writeFile(String template,Writer writer){
  if (template == null) {
    throw new IllegalArgumentException("template content can not be null.");
  }
  BufferedWriter bufferedWriter=new BufferedWriter(writer);
  String output=replace(template,null);
  try {
    bufferedWriter.append(output);
  }
 catch (  IOException e) {
    logger.log(Diagnostic.Kind.ERROR,"write file failed");
    e.printStackTrace();
  }
 finally {
    try {
      bufferedWriter.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}

public static String slurpURLNoExceptions(URL u,String encoding){
  try {
    return slurpURL(u,encoding);
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}

public synchronized boolean clear(){
  if (isLoading()) {
    return false;
  }
  loader=new Thread(null);
  loader.start();
  return true;
}

public int indexOf(final RoundedToolItem item){
  checkWidget();
  return items.indexOf(item);
}

public void addAttribute(String alias,String typeUri,boolean required,int count) throws MessageException {
  if (alias.indexOf(',') > -1 || alias.indexOf('.') > -1 || alias.indexOf(':') > -1 || alias.indexOf('\n') > -1)   throw new MessageException("Characters [.,:\\n] are not allowed in attribute aliases: " + alias);
  _parameters.set(new Parameter("type." + alias,typeUri));
  String level=required ? "required" : "if_available";
  Parameter levelParam=_parameters.getParameter(level);
  Parameter newParam;
  if (levelParam == null) {
    newParam=new Parameter(level,alias);
  }
 else {
    newParam=new Parameter(level,levelParam.getValue() + "," + alias);
    _parameters.removeParameters(level);
  }
  _parameters.set(newParam);
  setCount(alias,count);
  if (DEBUG)   _log.debug("Added new attribute to fetch request; type: " + typeUri + " alias: "+ alias+ " count: "+ count+ " required: "+ required);
}

public Void call() throws Exception {
  final List<Future<Void>> tasks=new LinkedList<Future<Void>>();
  try {
    for (    IV<?,?> termId : graphs) {
      final FutureTask<Void> ft=new FutureTask<Void>(new DrainIteratorTask(termId));
      tasks.add(ft);
      executor.execute(ft);
    }
    for (    Future<Void> f : tasks) {
      f.get();
    }
  }
 catch (  Throwable ex) {
    for (    Future<Void> f : tasks)     f.cancel(true);
    throw new RuntimeException(ex);
  }
 finally {
    buffer.close();
  }
  return null;
}

protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception {
  HashMap<String,String> params=new HashMap<>();
  params.put("command","full-import");
  params.put("debug","on");
  params.put("dataConfig",dataConfig);
  params.put("clean","true");
  params.put("commit","true");
  params.putAll(extraParams);
  NamedList l=new NamedList();
  for (  Map.Entry<String,String> e : params.entrySet()) {
    l.add(e.getKey(),e.getValue());
  }
  LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l);
  h.query("/dataimport",request);
}

public String userIdFromRange(Object ominId,Object omaxId){
  int minId=FunctionHandler.getInt(ominId);
  int maxId=FunctionHandler.getInt(omaxId);
  Stack<Integer> stack=getStack(minId,maxId);
  if (stack.size() > 0) {
    return Integer.toString(stack.pop());
  }
  throw new IllegalArgumentException("Exhausted random User Ids. Range not large enough for the number of calls.");
}

public void start(){
  if (isStarted) {
    log.info("Coordinator stream consumer already started");
    return;
  }
  log.info("Starting coordinator stream system consumer.");
  systemConsumer.start();
  isStarted=true;
}

public static void generateBinaryOperationFlags(final ITranslationEnvironment environment,final long nextOffset,final String result,final OperandSize resultSize,final List<ReilInstruction> instructions) throws IllegalArgumentException {
  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");
  Preconditions.checkNotNull(result,"Error: Argument result can't be null");
  Preconditions.checkNotNull(resultSize,"Error: Argument resultSize can't be null");
  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");
  final long baseOffset=nextOffset - instructions.size();
  long offset=nextOffset;
  generateSignFlagCode(environment,offset,result,resultSize,instructions);
  offset=(baseOffset + instructions.size()) - 1;
  instructions.add(ReilHelpers.createBisz(offset + 1,resultSize,result,OperandSize.BYTE,Helpers.ZERO_FLAG));
  instructions.add(ReilHelpers.createStr(offset + 2,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.CARRY_FLAG));
  instructions.add(ReilHelpers.createStr(offset + 3,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
}

public boolean isLabelMovable(){
  mxGraph graph=graphComponent.getGraph();
  String label=graph.getLabel(state.getCell());
  return graph.isLabelMovable(state.getCell()) && label != null && label.length() > 0;
}

public int writeTypeList(TypeList typeList){
  int off=data.position();
  short[] types=typeList.types;
  writeInt(types.length);
  for (  short type : types) {
    writeShort(type);
  }
  return off;
}

public static void loadConfigResource(String resourceName) throws IOException {
  config.clear();
  config.putAll(loadPropertiesFromResource(resourceName));
}

public static void safeCloseStream(InputStream in){
  if (in != null) {
    try {
      in.close();
    }
 catch (    Exception e) {
      log.error(e.getMessage(),e);
    }
  }
}

private Transaction createTransaction() throws LeaseDeniedException, RemoteException, TransactionException {
  ITransactionManagerProvider transactionManagerProvider=getTransactionManagerProvider();
  return (TransactionFactory.create(transactionManagerProvider.getTransactionManager(),_config.getTransactionTimeout())).transaction;
}

public void skipWhile(String skip) throws IOException {
  char ch;
  do {
    ch=read();
  }
 while (skip.indexOf(ch) > -1);
  unreadCharacter(ch);
}

public static String packageToPath(String packageName){
  return packageName.replace('.',File.separatorChar);
}

@Override public boolean containsKey(Object key){
  if (key == null) {
    return entryForNullKey != null;
  }
  int hash=key.hashCode();
  hash^=(hash >>> 20) ^ (hash >>> 12);
  hash^=(hash >>> 7) ^ (hash >>> 4);
  HashMapEntry<K,V>[] tab=table;
  for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) {
    K eKey=e.key;
    if (eKey == key || (e.hash == hash && key.equals(eKey))) {
      return true;
    }
  }
  return false;
}

protected boolean isValidFragment(String fragment){
  if (fragment == null) {
    return true;
  }
  return isOff(NO_FRAGMENTS);
}

private void rehash(){
  int oldCapacity=m_capacity;
  HashEntry[] oldTable=m_table;
  int newCapacity=2 * oldCapacity + 1;
  m_capacity=newCapacity;
  m_threshold=(int)(newCapacity * m_loadFactor);
  m_table=new HashEntry[newCapacity];
  for (int i=oldCapacity - 1; i >= 0; i--) {
    for (HashEntry old=oldTable[i]; old != null; ) {
      HashEntry e=old;
      old=old.next;
      int newIndex=e.hash % newCapacity;
      if (newIndex < 0)       newIndex=-newIndex;
      e.next=m_table[newIndex];
      m_table[newIndex]=e;
    }
  }
}

public void savePoisFromAssets(){
  List<Poi> pois=poiAssetLoader.loadPoisFromAssets();
  Timber.d("Loaded %s poi, trying to insert them",pois.size());
  for (  Poi poi : pois) {
    Timber.d("saving poi %s",poi);
    savePoi(poi);
    Timber.d("poi saved");
  }
}

private void createElement(Document doc,Element parentElement,String elementName,Color value){
  Element element=doc.createElement(elementName);
  element.appendChild(doc.createTextNode(ColourUtils.fromColour(value)));
  parentElement.appendChild(element);
}

public static boolean beenDone(@Scope int scope,String tag,CountChecker numberOfTimes){
  List<Long> tagSeenDates=tagLastSeenMap.get(tag);
  if (tagSeenDates.isEmpty()) {
    return false;
  }
  if (scope == THIS_APP_INSTALL) {
    return numberOfTimes.check(tagSeenDates.size());
  }
 else   if (scope == THIS_APP_SESSION) {
    int counter=0;
    for (    String tagFromList : sessionList) {
      if (tagFromList.equals(tag)) {
        counter++;
      }
    }
    return numberOfTimes.check(counter);
  }
 else {
    int counter=0;
    for (    Long seenDate : tagSeenDates) {
      if (seenDate > lastAppUpdatedTime) {
        counter++;
      }
    }
    return numberOfTimes.check(counter);
  }
}

void variableOperatorChanged(int row,String oper){
  ConditionalVariable variable=_variableList.get(row);
  int oldOper=variable.getOpern();
  if (row > 0) {
    if (oper.equals(Bundle.getMessage("LogicOR"))) {
      variable.setOpern(Conditional.OPERATOR_OR);
    }
 else {
      variable.setOpern(Conditional.OPERATOR_AND);
    }
  }
 else {
    variable.setOpern(Conditional.OPERATOR_NONE);
  }
  if (variable.getOpern() != oldOper) {
    makeAntecedent();
  }
}

public void addHeader(String name,String val){
  mMsgHeader=mMsgHeader + name + ": "+ val+ mLineDelimiter;
  addInternalHeaderFields(name,val);
}

public static void checkDuplicateRequest(RedisClient redisClient,String uri,Buffer buffer,String ttl,Handler<Boolean> callback){
  Integer timeToLive=parseTimeToLive(ttl);
  String redisKey=getRedisKey(uri,HashCodeGenerator.createHashCode(uri,buffer.toString()));
  handleStorage(redisClient,redisKey,timeToLive,callback);
}

boolean isHidden(View view){
  return mHiddenViews.contains(view);
}

public void writeExif(InputStream jpegStream,OutputStream exifOutStream) throws IOException {
  if (jpegStream == null || exifOutStream == null) {
    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);
  }
  OutputStream s=getExifWriterStream(exifOutStream);
  doExifStreamIO(jpegStream,s);
  s.flush();
}

public static void deleteRecursive(@NonNull File fileOrDirectory){
  deleteRecursive(fileOrDirectory,Collections.EMPTY_LIST);
}

static boolean doesMenuBarBorderToolBar(JMenuBar c){
  JToolBar tb=(JToolBar)MetalToolBarUI.findRegisteredComponentOfType(c,JToolBar.class);
  if (tb != null && tb.getOrientation() == JToolBar.HORIZONTAL) {
    JRootPane rp=SwingUtilities.getRootPane(c);
    Point point=new Point(0,0);
    point=SwingUtilities.convertPoint(c,point,rp);
    int menuX=point.x;
    int menuY=point.y;
    point.x=point.y=0;
    point=SwingUtilities.convertPoint(tb,point,rp);
    return (point.x == menuX && menuY + c.getHeight() == point.y && c.getWidth() == tb.getWidth());
  }
  return false;
}

void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {
  boolean shouldAddAttrs;
  try {
    SerializationHandler rhandler=transformer.getResultTreeHandler();
    if (null == nodeName) {
      shouldAddAttrs=false;
    }
 else {
      if (null != prefix) {
        rhandler.startPrefixMapping(prefix,nodeNamespace,true);
      }
      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);
      super.execute(transformer);
      shouldAddAttrs=true;
    }
    transformer.executeChildTemplates(this,shouldAddAttrs);
    if (null != nodeName) {
      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);
      if (null != prefix) {
        rhandler.endPrefixMapping(prefix);
      }
    }
  }
 catch (  SAXException se) {
    throw new TransformerException(se);
  }
}

private PriorityQueue<USField> createQueue(String fieldName,Map<String,Flt> words) throws IOException {
  int numDocs=ir.numDocs();
  FreqQ res=new FreqQ(words.size());
  for (  String word : words.keySet()) {
    float tf=words.get(word).x;
    if (minTermFreq > 0 && tf < minTermFreq) {
      continue;
    }
    int docFreq=ir.docFreq(new Term(fieldName,word));
    if (minDocFreq > 0 && docFreq < minDocFreq) {
      continue;
    }
    if (docFreq == 0 || docFreq > maxDocFreq) {
      continue;
    }
    float idf=similarity.idf(docFreq,numDocs);
    float score=0;
    if (isLogTf()) {
      score=(float)(Math.log(tf + 1) * idf);
    }
 else {
      score=tf * idf;
    }
    USField mltField;
    if (isPayloadField(fieldName)) {
      mltField=new USField(word,fieldName,score,tf,idf,docFreq,1.01f);
    }
 else {
      mltField=new USField(word,fieldName,score,tf,idf,docFreq);
    }
    res.insertWithOverflow(mltField);
  }
  return res;
}

private synchronized void rebuildJournal() throws IOException {
  if (journalWriter != null) {
    journalWriter.close();
  }
  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));
  try {
    writer.write(MAGIC);
    writer.write("\n");
    writer.write(VERSION_1);
    writer.write("\n");
    writer.write(Integer.toString(appVersion));
    writer.write("\n");
    writer.write(Integer.toString(valueCount));
    writer.write("\n");
    writer.write("\n");
    for (    Entry entry : lruEntries.values()) {
      if (entry.currentEditor != null) {
        writer.write(DIRTY + ' ' + entry.key+ '\n');
      }
 else {
        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');
      }
    }
  }
  finally {
    writer.close();
  }
  if (journalFile.exists()) {
    renameTo(journalFile,journalFileBackup,true);
  }
  renameTo(journalFileTmp,journalFile,false);
  journalFileBackup.delete();
  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));
}

public static void eachObject(ObjectInputStream ois,Closure closure) throws IOException, ClassNotFoundException {
  try {
    while (true) {
      try {
        Object obj=ois.readObject();
        closure.call(obj);
      }
 catch (      EOFException e) {
        break;
      }
    }
    InputStream temp=ois;
    ois=null;
    temp.close();
  }
  finally {
    closeWithWarning(ois);
  }
}

private static int exitWithStatus(int status){
  if (ToolIO.getMode() == ToolIO.SYSTEM) {
    System.exit(status);
  }
  return status;
}

public static double distanceInMeters(final double latP1,final double latP2,final double lonP1,final double lonP2){
  double distRad=Math.acos(Math.sin(toRadians(latP1)) * Math.sin(toRadians(latP2)) + Math.cos(toRadians(latP1)) * Math.cos(toRadians(latP2)) * Math.cos(toRadians(lonP1 - lonP2)));
  final double distAsDegree=toDegrees(distRad);
  return distAsDegree * 60 * 1.1515* 1609.344;
}

public void processChallenge(final String challenge) throws MalformedChallengeException {
  String s=AuthChallengeParser.extractScheme(challenge);
  if (!s.equalsIgnoreCase(getSchemeName())) {
    throw new MalformedChallengeException("Invalid NTLM challenge: " + challenge);
  }
  int i=challenge.indexOf(' ');
  if (i != -1) {
    s=challenge.substring(i,challenge.length());
    this.ntlmchallenge=s.trim();
    this.state=TYPE2_MSG_RECEIVED;
  }
 else {
    this.ntlmchallenge="";
    if (this.state == UNINITIATED) {
      this.state=INITIATED;
    }
 else {
      this.state=FAILED;
    }
  }
}

public static BigInteger calculateA(BigInteger p,BigInteger q,BigInteger gA,BigInteger x2s){
  return gA.modPow(x2s,p);
}

public static MCostQueue add(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID,int M_CostElement_ID,BigDecimal amt,BigDecimal qty,int precision,MCostDetail cd,String trxName){
  if (CLogMgt.isLevelFine())   s_log.fine("Entering: org=" + AD_Org_ID + ", product="+ product.get_ID()+ ", asi="+ M_AttributeSetInstance_ID+ ", amt="+ amt+ ", qty="+ qty+ ", precision="+ precision);
  MCostQueue cq=new MCostQueue(product,M_AttributeSetInstance_ID,as,AD_Org_ID,M_CostElement_ID,trxName);
  cq.setCosts(amt,qty,precision);
  cq.setDateAcct(cd.getDateAcct());
  cq.saveEx();
  if (CLogMgt.isLevelFine())   s_log.fine("Leaving: " + cq);
  return cq;
}

public void addUndoEvent(UndoInterface event){
  if (shouldProcessUndoRedoAction()) {
    boolean atEndOfList=(currentIndex >= undoList.size());
    if (!atEndOfList) {
      while (undoList.size() > currentIndex) {
        int lastIndex=undoList.size() - 1;
        undoList.remove(lastIndex);
      }
    }
    undoList.add(event);
    currentIndex=undoList.size();
    updateMenuItems();
    logger.debug(event.getStringRepresentation());
  }
}

public static Exception establishCacheIfNeeded(PrintStream... progress){
  if (m_offline) {
    return null;
  }
  if (REP_MIRROR == null) {
    establishMirror();
  }
  Exception problem=null;
  if (INITIAL_CACHE_BUILD_NEEDED) {
    for (    PrintStream p : progress) {
      p.println("Caching repository meta data, please wait...");
    }
    problem=refreshCache(progress);
    INITIAL_CACHE_BUILD_NEEDED=false;
  }
  return problem;
}

public Spanny append(CharSequence text,ImageSpan imageSpan){
  text="." + text;
  append(text);
  setSpan(imageSpan,length() - text.length(),length() - text.length() + 1);
  return this;
}

public static boolean validatePassword(String password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException {
  return validatePassword(password.toCharArray(),correctHash);
}

public List<Snapshot> currentSnapshots(String repositoryName){
  List<Snapshot> snapshotList=new ArrayList<>();
  List<SnapshotsInProgress.Entry> entries=currentSnapshots(repositoryName,null);
  for (  SnapshotsInProgress.Entry entry : entries) {
    snapshotList.add(inProgressSnapshot(entry));
  }
  CollectionUtil.timSort(snapshotList);
  return Collections.unmodifiableList(snapshotList);
}

public void addCertificate(X509CertificateHolder certificate) throws CMSException {
  certs.add(certificate.toASN1Structure());
}

public void testCase8(){
  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};
  int aSign=1;
  byte rBytes[]={0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=BigInteger.ZERO;
  BigInteger result=aNumber.multiply(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,result.signum());
}

private void cleanStatic(MethodNode method){
}

@Override protected void paintTabBackground(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){
  if (isSelected) {
    if (tabPlacement == TOP) {
      g.setColor(Color.white);
      g.fillRoundRect(x,y,w,h + R + R,R,R);
    }
  }
 else {
  }
}

public void push(final float value){
  int bits=Float.floatToIntBits(value);
  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {
    mv.visitInsn(Opcodes.FCONST_0 + (int)value);
  }
 else {
    mv.visitLdcInsn(value);
  }
}

private Automaton buildAutomaton(BytesRefHash termBytesHash){
  final TreeSet<BytesRef> terms=new TreeSet<BytesRef>();
  for (int i=0; i < termBytesHash.size(); i++) {
    BytesRef ref=new BytesRef();
    termBytesHash.get(i,ref);
    terms.add(ref);
  }
  final Automaton a=DaciukMihovAutomatonBuilder.build(terms);
  return a;
}

protected Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){
  if (dataset == null) {
    return null;
  }
  if (getDataBoundsIncludesVisibleSeriesOnly()) {
    List visibleSeriesKeys=new ArrayList();
    int seriesCount=dataset.getRowCount();
    for (int s=0; s < seriesCount; s++) {
      if (isSeriesVisible(s)) {
        visibleSeriesKeys.add(dataset.getRowKey(s));
      }
    }
    return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,includeInterval);
  }
 else {
    return DatasetUtilities.findRangeBounds(dataset,includeInterval);
  }
}

protected String adminShutdown(){
  server.shutdown();
  return "admin.jsp";
}

public long num_threads(){
  return Long.parseLong(fields[19]);
}

public void assignRole(AMRole role) throws AMException, SSOException {
  assignRole(role.getDN());
}

public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize){
  this(corePoolSize,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);
}

protected void writeInitialStyles() throws IOException {
  out.flushBits();
  fillBits=OutStream.determineUnsignedBitSize(fillStyles.size());
  lineBits=OutStream.determineUnsignedBitSize(lineStyles.size());
  if (!hasStyle) {
    fillBits=1;
  }
 else {
    writeStyles(fillStyles);
    writeStyles(lineStyles);
    out.flushBits();
  }
  out.writeUBits(4,fillBits);
  out.writeUBits(4,lineBits);
}

public static <T extends Map.Entry<String,String>>String formEncode(Collection<T> parameters) throws IOException {
  ByteArrayOutputStream b=new ByteArrayOutputStream();
  formEncode(parameters,b);
  return new String(b.toByteArray());
}

public void test_singleResourceLocking_serialized_lowConcurrency2() throws Exception {
  Properties properties=new Properties();
  properties.setProperty(TestOptions.NTHREADS,"2");
  properties.setProperty(TestOptions.NTASKS,"1000");
  properties.setProperty(TestOptions.NRESOURCES,"1");
  properties.setProperty(TestOptions.MIN_LOCKS,"1");
  properties.setProperty(TestOptions.MAX_LOCKS,"1");
  properties.setProperty(TestOptions.PREDECLARE_LOCKS,"false");
  properties.setProperty(TestOptions.SORT_LOCK_REQUESTS,"false");
  doComparisonTest(properties);
}

public void runNextPendingCommand(){
  Runnable runnable=deltaQueue.pop();
  runnable.run();
}

public void stop(int timeout) throws InterruptedException {
  if (!isclosed.compareAndSet(false,true)) {
    return;
  }
  List<WebSocket> socketsToClose=null;
synchronized (connections) {
    socketsToClose=new ArrayList<WebSocket>(connections);
  }
  for (  WebSocket ws : socketsToClose) {
    ws.close(CloseFrame.GOING_AWAY);
  }
synchronized (this) {
    if (selectorthread != null && selectorthread != Thread.currentThread()) {
      selector.wakeup();
      selectorthread.interrupt();
      selectorthread.join(timeout);
    }
  }
}

private static Document loadDocument(Resource xmlFile) throws SAXException, IOException {
  DOMParser parser=new DOMParser();
  InputStream is=null;
  try {
    is=IOUtil.toBufferedInputStream(xmlFile.getInputStream());
    InputSource source=new InputSource(is);
    parser.parse(source);
  }
  finally {
    IOUtil.closeEL(is);
  }
  return parser.getDocument();
}

public void test_DivideBigDecimalRoundingModeDOWN(){
  String a="-37361671119238118911893939591735";
  String b="74723342238476237823787879183470";
  RoundingMode rm=RoundingMode.DOWN;
  String c="0";
  BigDecimal aNumber=new BigDecimal(new BigInteger(a));
  BigDecimal bNumber=new BigDecimal(new BigInteger(b));
  BigDecimal result=aNumber.divide(bNumber,rm);
  assertEquals("incorrect value",c,result.toString());
}

public void removeAnnotation(int index){
  mAnnotations.remove(index);
  mStringXY.removeByIndex(index);
}

public String replace(char oldChar,char newChar){
  char[] buffer=value;
  int _offset=offset;
  int _count=count;
  int idx=_offset;
  int last=_offset + _count;
  boolean copied=false;
  while (idx < last) {
    if (buffer[idx] == oldChar) {
      if (!copied) {
        char[] newBuffer=new char[_count];
        System.arraycopy(buffer,_offset,newBuffer,0,_count);
        buffer=newBuffer;
        idx-=_offset;
        last-=_offset;
        copied=true;
      }
      buffer[idx]=newChar;
    }
    idx++;
  }
  return copied ? new String(0,count,buffer) : this;
}

public static void touch(File file) throws IOException {
  if (!file.exists()) {
    OutputStream out=openOutputStream(file);
    IOUtils.closeQuietly(out);
  }
  boolean success=file.setLastModified(System.currentTimeMillis());
  if (!success) {
    throw new IOException("Unable to set the last modification time for " + file);
  }
}

private <Type extends Message>RpcCallback<Type> wrapsCallback(MockCallback<?> callback){
  EasyMock.reportMatcher(new WrapsCallback(callback));
  return null;
}

public boolean shouldSelectCell(EventObject e){
  log.finest(m_mField.getColumnName());
  return true;
}

public static void prepareUnicode(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){
  Reject.ifNull(buffer,sequence);
  final int length=sequence.length();
  for (int i=0; i < length; i++) {
    final byte b=sequence.byteAt(i);
    if ((b & 0x7F) != b) {
      MappingTable.map(buffer,sequence.subSequence(i,length),trim,foldCase);
      String normalizedForm=Normalizer.normalize(buffer,Form.NFKD);
      buffer.setLength(0);
      buffer.append(normalizedForm);
      break;
    }
switch (b) {
case ' ':
      if (canMapToSpace(buffer,trim)) {
        buffer.append(' ');
      }
    break;
default :
  if (b >= '\u0009' && b < '\u000E') {
    if (canMapToSpace(buffer,trim)) {
      buffer.append(SPACE_CHAR);
    }
  }
 else   if ((b >= '\u0000' && b <= '\u0008') || (b >= '\u000E' && b <= '\u001F') || b == '\u007F') {
    break;
  }
 else   if (foldCase && b >= 'A' && b <= 'Z') {
    buffer.append((char)(b + 32));
  }
 else {
    buffer.append((char)b);
  }
break;
}
}
if (trim) {
for (int i=buffer.length() - 1; i > 0; i--) {
if (buffer.charAt(i) == SPACE_CHAR) {
buffer.delete(i,i + 1);
}
 else {
break;
}
}
}
}

public void testCase18(){
  byte aBytes[]={0};
  byte bBytes[]={0};
  byte rBytes[]={0};
  int aSign=1;
  int bSign=1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.add(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",0,result.signum());
}

@Nonnull public BugInstance addClass(ClassNode classNode){
  String dottedClassName=ClassName.toDottedClassName(classNode.name);
  ClassAnnotation classAnnotation=new ClassAnnotation(dottedClassName);
  add(classAnnotation);
  return this;
}

public static void tryFormatSatisfiability(String format) throws IllegalFormatException {
  MessageFormat.format(format,(Object[])null);
}

public static int parseUpperMap(String s) throws NumberFormatException {
  int upperCase=MAP_UNDEFINED;
  int length=s.length();
  if (length >= 4 && length <= 6) {
    upperCase=Integer.parseInt(s,16);
  }
 else   if (s.length() != 0) {
    throw new NumberFormatException();
  }
  return upperCase;
}

@Override public void run(){
  while (!isInterrupted()) {
    try {
      Reference ref=_queue.remove();
      _entryInfos.remove(ref);
    }
 catch (    InterruptedException e) {
      interrupt();
      break;
    }
  }
}

private File createZipFile(int entryCount,int entrySize) throws IOException {
  File result=createTemporaryZipFile();
  byte[] writeBuffer=new byte[8192];
  Random random=new Random();
  ZipOutputStream out=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(result)));
  for (int entry=0; entry < entryCount; ++entry) {
    ZipEntry ze=new ZipEntry(Integer.toHexString(entry));
    out.putNextEntry(ze);
    for (int i=0; i < entrySize; i+=writeBuffer.length) {
      random.nextBytes(writeBuffer);
      int byteCount=Math.min(writeBuffer.length,entrySize - i);
      out.write(writeBuffer,0,byteCount);
    }
    out.closeEntry();
  }
  out.close();
  return result;
}

private boolean isValidPlaylistName(String newName){
  Playlist blankPlaylist=new Playlist(newName,false);
  return !newName.isEmpty() && !musicLibrary.containsPlaylist(blankPlaylist);
}

public String importXML(String fileName,Properties ctx,String trxName) throws Exception {
  log.info("importXML:" + fileName);
  File in=new File(fileName);
  if (!in.exists()) {
    String msg="File does not exist: " + fileName;
    log.info("importXML:" + msg);
    return msg;
  }
  try {
    log.info("starting");
    System.setProperty("javax.xml.parsers.SAXParserFactory","org.apache.xerces.jaxp.SAXParserFactoryImpl");
    PackInHandler handler=new PackInHandler();
    handler.set_TrxName(trxName);
    handler.setCtx(ctx);
    handler.setProcess(this);
    SAXParserFactory factory=SAXParserFactory.newInstance();
    SAXParser parser=factory.newSAXParser();
    String msg="Start Parser";
    log.info(msg);
    parser.parse(in,handler);
    msg="End Parser";
    log.info(msg);
    return "OK.";
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"importXML:",e);
    throw e;
  }
}

public synchronized void logAddOrRemoveRow(Session session,int tableId,Row row,boolean add){
  if (logMode != LOG_MODE_OFF) {
    if (!recoveryRunning) {
      log.logAddOrRemoveRow(session,tableId,row,add);
    }
  }
}

public org.smpte_ra.schemas.st2067_2_2016.DigestMethodType buildDefaultDigestMethodType(){
  org.smpte_ra.schemas.st2067_2_2016.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.DigestMethodType();
  digestMethodType.setAlgorithm(CompositionPlaylistBuilder_2016.defaultHashAlgorithm);
  return digestMethodType;
}

public static <V extends SampledVertex>Set<V> createSampledPartition(Collection<V> vertices){
  Set<V> partition=new HashSet<V>();
  for (  V vertex : vertices) {
    if (vertex.isSampled())     partition.add(vertex);
  }
  return partition;
}

public GremlinTransactionManager(GremlinGraphFactory graphFactory){
  super();
  this.graphFactory=graphFactory;
}

public void shiftBeans(BeanInstance toShiftTo,boolean save){
  if (save) {
    m_originalCoords=new Vector<Point>();
  }
  int targetX=toShiftTo.getX();
  int targetY=toShiftTo.getY();
  for (int i=0; i < m_subFlow.size(); i++) {
    BeanInstance temp=(BeanInstance)m_subFlow.elementAt(i);
    if (save) {
      Point p=new Point(temp.getX() - targetX,temp.getY() - targetY);
      m_originalCoords.add(p);
    }
    temp.setX(targetX);
    temp.setY(targetY);
  }
}

@Override protected final List<LatLong> doInBackground(final Object... args){
  List<LatLong> points=new ArrayList<>();
  DataHelper dbHelper=new DataHelper(mContext);
  final ArrayList<PositionRecord> positions=dbHelper.loadPositions((Integer)args[SESSION_ID],(Double)args[MIN_LAT_COL],(Double)args[MAX_LAT_COL],(Double)args[MIN_LON_COL],(Double)args[MAX_LON_COL]);
  for (  PositionRecord position : positions) {
    points.add(new LatLong(position.getLatitude(),position.getLongitude()));
  }
  return points;
}

public void make() throws Exception {
  for (int i=0; i < _makeList.size(); i++) {
    Make make=_makeList.get(i);
    make.make();
  }
}

@Override void deletedText(CharacterDataImpl node,int offset,int count){
  if (ranges != null) {
    notifyRangesDeletedText(node,offset,count);
  }
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

private ApplicationEnvironment(){
  try {
    if (System.getProperty(BootstrapProperties.IS_UBERJAR) != null) {
      this.mode=Mode.UBERJAR;
      if (!loadWildFlySwarmApplicationManifestFromClasspath()) {
        loadWildFlySwarmApplicationManifestFromTCCL();
      }
    }
 else {
      this.mode=Mode.CLASSPATH;
      loadFractionManifestsFromClasspath();
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

public ProducerWorker(String topic,String message){
  this._topic=topic;
  this._message=message;
}

private void tabCreatedInForeground(int id,int sourceId,boolean newIsIncognito,float originX,float originY){
  LayoutTab newLayoutTab=createLayoutTab(id,newIsIncognito,NO_CLOSE_BUTTON,NO_TITLE);
  if (mLayoutTabs == null || mLayoutTabs.length == 0) {
    mLayoutTabs=new LayoutTab[]{newLayoutTab};
  }
 else {
    mLayoutTabs=new LayoutTab[]{mLayoutTabs[0],newLayoutTab};
  }
  updateCacheVisibleIds(new LinkedList<Integer>(Arrays.asList(id,sourceId)));
  newLayoutTab.setBorderAlpha(0.0f);
  newLayoutTab.setStaticToViewBlend(1.f);
  forceAnimationToFinish();
  Interpolator interpolator=BakedBezierInterpolator.TRANSFORM_CURVE;
  addToAnimation(newLayoutTab,LayoutTab.Property.SCALE,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);
  addToAnimation(newLayoutTab,LayoutTab.Property.ALPHA,0.f,1.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);
  addToAnimation(newLayoutTab,LayoutTab.Property.X,originX,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);
  addToAnimation(newLayoutTab,LayoutTab.Property.Y,originY,0.f,FOREGROUND_ANIMATION_DURATION,0,false,interpolator);
  mTabModelSelector.selectModel(newIsIncognito);
  startHiding(id,false);
}

private static boolean functionsAreAllowed(boolean isAddAllFunction,boolean isPutAllFunction,Class<?> classD,Class<?> classS){
  if (isAddAllFunction)   return collectionIsAssignableFrom(classD) && collectionIsAssignableFrom(classS);
  if (isPutAllFunction)   return mapIsAssignableFrom(classD) && mapIsAssignableFrom(classS);
  return isAssignableFrom(classD,classS);
}

private void loadOrgAccessUser(ArrayList<OrgAccess> list){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  String sql="SELECT * FROM AD_User_OrgAccess " + "WHERE AD_User_ID=? AND IsActive='Y'";
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    pstmt.setInt(1,getAD_User_ID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      MUserOrgAccess oa=new MUserOrgAccess(getCtx(),rs,get_TrxName());
      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
 finally {
    DB.close(rs,pstmt);
  }
}

public void close(){
synchronized (mDiskCacheLock) {
    if (mDiskLruCache != null) {
      try {
        if (!mDiskLruCache.isClosed()) {
          mDiskLruCache.close();
        }
      }
 catch (      Throwable e) {
        LogUtils.e(e.getMessage(),e);
      }
      mDiskLruCache=null;
    }
  }
}

private Map<URI,Integer> createVolumeMapForExportMask(ExportMask exportMask){
  Map<URI,Integer> map=new HashMap<>();
  for (  URI uri : ExportMaskUtils.getVolumeURIs(exportMask)) {
    map.put(uri,ExportGroup.LUN_UNASSIGNED);
  }
  return map;
}

@Override public void close() throws IOException {
  SocketChannel s=_channel;
  _channel=null;
  SSLSocket sslSocket=_sslSocket;
  _sslSocket=null;
  if (sslSocket != null) {
    try {
      sslSocket.close();
    }
 catch (    Exception e) {
    }
  }
  if (s != null) {
    try {
      s.close();
    }
 catch (    Exception e) {
    }
  }
}

public static Vector3D max(Vector3D a,Vector3D b){
  return new Vector3D(FastMath.max(a.getX(),b.getX()),FastMath.max(a.getY(),b.getY()),FastMath.max(a.getZ(),b.getZ()));
}

public static void waitForProcessOutput(Process self,OutputStream output,OutputStream error){
  Thread tout=consumeProcessOutputStream(self,output);
  Thread terr=consumeProcessErrorStream(self,error);
  try {
    tout.join();
  }
 catch (  InterruptedException ignore) {
  }
  try {
    terr.join();
  }
 catch (  InterruptedException ignore) {
  }
  try {
    self.waitFor();
  }
 catch (  InterruptedException ignore) {
  }
  closeStreams(self);
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public void or(Criteria criteria){
  oredCriteria.add(criteria);
}

public CommandLine add(String... args){
  if (args != null && args.length > 0) {
    Collections.addAll(line,args);
  }
  return this;
}

@Override final Node<V> find(int h,long k){
  for (Node<V> e=first; e != null; ) {
    int s;
    if (((s=lockState) & (WAITER | WRITER)) != 0) {
      if ((e.key == k)) {
        return e;
      }
      e=e.next;
    }
 else     if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {
      TreeNode<V> r;
      TreeNode<V> p;
      try {
        p=((r=root) == null ? null : r.findTreeNode(h,k));
      }
  finally {
        Thread w;
        if (getAndAddInt(this,LOCKSTATE,-READER) == (READER | WAITER) && (w=waiter) != null) {
          LockSupport.unpark(w);
        }
      }
      return p;
    }
  }
  return null;
}

@Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){
  AxisState axisState=new AxisState(cursor);
  if (isAxisLineVisible()) {
    drawAxisLine(g2,cursor,dataArea,edge);
  }
  if (isTickMarksVisible()) {
    drawTickMarks(g2,axisState,dataArea,edge);
  }
  if (isTickLabelsVisible()) {
    for (int band=0; band < this.labelInfo.length; band++) {
      axisState=drawTickLabels(band,g2,axisState,dataArea,edge);
    }
  }
  if (getAttributedLabel() != null) {
    axisState=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,axisState);
  }
 else {
    axisState=drawLabel(getLabel(),g2,plotArea,dataArea,edge,axisState);
  }
  return axisState;
}

private ArrayList<URLCrawlDatum> readContents(Path fetchlist) throws IOException {
  SequenceFile.Reader reader=new SequenceFile.Reader(fs,fetchlist,conf);
  ArrayList<URLCrawlDatum> l=new ArrayList<URLCrawlDatum>();
  READ:   do {
    Text key=new Text();
    CrawlDatum value=new CrawlDatum();
    if (!reader.next(key,value)) {
      break READ;
    }
    l.add(new URLCrawlDatum(key,value));
  }
 while (true);
  reader.close();
  return l;
}

public void playTogether(Collection<Animator> items){
  if (items != null && items.size() > 0) {
    mNeedsSort=true;
    Builder builder=null;
    for (    Animator anim : items) {
      if (builder == null) {
        builder=play(anim);
      }
 else {
        builder.with(anim);
      }
    }
  }
}

public static Color createRandomColour(){
  float r=rand.nextFloat();
  float g=rand.nextFloat();
  float b=rand.nextFloat();
  Color randomColor=new Color(r,g,b);
  return randomColor;
}

private static Pair<DiagnosticKind,Boolean> parseCategoryString(String category){
  final String fixable="fixable-";
  final boolean isFixable=category.startsWith(fixable);
  if (isFixable) {
    category=category.substring(fixable.length());
  }
  DiagnosticKind categoryEnum=DiagnosticKind.fromParseString(category);
  return Pair.of(categoryEnum,isFixable);
}

public void legacyProcess(Class clazz,Method m,MethodAppearanceDecision decision){
  if (m.getDeclaringClass() != Object.class && m.getReturnType() != void.class && m.getParameterTypes().length == 0) {
    String mName=m.getName();
    if (!looksLikePropertyReadMethod(mName)) {
      decision.setExposeMethodAs(null);
      try {
        decision.setExposeAsProperty(new PropertyDescriptor(mName,clazz,mName,null));
      }
 catch (      IntrospectionException e) {
        throw new RuntimeException(e);
      }
    }
  }
}

public SPTKPitchReaderWriter(String lf0SPTKFile,float windowSizeInSeconds,float skipSizeInSeconds,int samplingRate){
  contour=null;
  header=new PitchFileHeader();
  header.windowSizeInSeconds=windowSizeInSeconds;
  header.skipSizeInSeconds=skipSizeInSeconds;
  header.fs=samplingRate;
  try {
    contour=readSPTKF0Data(lf0SPTKFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}

public void abort(){
  cleanUp();
  if (mFuture != null) {
    mFuture.cancel(true);
    mFuture=null;
  }
  if (mExecutorService != null) {
    mExecutorService.shutdownNow();
    mExecutorService=null;
  }
  mListener=null;
}

public void addCSPStateListener(CSPStateListener listener){
  listeners.add(listener);
}

public static void printWrappedText(final PrintStream stream,final String message){
  if (stream != null && message != null && !message.isEmpty()) {
    stream.println(wrapText(message,MAX_LINE_WIDTH));
  }
}

public void removeAtRange(int index,int size){
  final int end=Math.min(mSize,index + size);
  for (int i=index; i < end; i++) {
    removeAt(i);
  }
}

public static void assertNullability(ResultSet rs,boolean[] nullability) throws SQLException {
  ResultSetMetaData rsmd=rs.getMetaData();
  int actualCols=rsmd.getColumnCount();
  assertEquals("Unexpected column count:",nullability.length,rsmd.getColumnCount());
  for (int i=0; i < actualCols; i++) {
    int expected=nullability[i] ? ResultSetMetaData.columnNullable : ResultSetMetaData.columnNoNulls;
    assertEquals("Column nullability do not match for column " + (i + 1),expected,rsmd.isNullable(i + 1));
  }
}

private synchronized Rect[] computeBoundingBoxes(){
  if (!boundingBoxes.isPresent()) {
    Rect[] bb=new Rect[(int)contours.size()];
    for (int i=0; i < contours.size(); i++) {
      bb[i]=boundingRect(contours.get(i));
    }
    boundingBoxes=Optional.of(bb);
  }
  return boundingBoxes.get();
}

public void addTimeline(final JSONObject timeline){
  TimelineChannel.notifyTimeline(timeline);
  timelines.addFirst(timeline);
  final int maxCnt=Symphonys.getInt("timelineCnt");
  if (timelines.size() > maxCnt) {
    timelines.remove(maxCnt);
  }
}

private boolean loadLOBData(){
  if (isStoreAttachmentsOnFileSystem) {
    return loadLOBDataFromFileSystem();
  }
  return loadLOBDataFromDB();
}

protected void paintComponent(Graphics g){
  backgroundPainter.paint(g,getVisibleRect());
  TextUI ui=getUI();
  if (ui != null) {
    Graphics scratchGraphics=g.create();
    try {
      ui.update(scratchGraphics,this);
    }
  finally {
      scratchGraphics.dispose();
    }
  }
}

public static <T>List<T> copyToArrayListWithExtraCapacity(T[] elements,int extraCapacity){
  List<T> asList;
  if (elements != null) {
    asList=new ArrayList<T>(elements.length + extraCapacity);
    asList.addAll(Arrays.asList(elements));
  }
 else {
    asList=new ArrayList<T>(extraCapacity);
  }
  return asList;
}

private boolean sendEventToListeners(ClusterEvent event){
  boolean success=true;
  for (  String listenerId : Collections.unmodifiableSet(listeners.keySet())) {
    logger.debug("Notifying listener {} of event {} for instance {}",listenerId,event.getType(),instanceId);
    ClusterEventListener listener=listeners.get(listenerId);
    if (listener != null && !listener.handleEvent(event)) {
      success=false;
    }
  }
  return success;
}

@RequestMapping(method=RequestMethod.PUT,value="/{region}/{keys}",consumes={MediaType.APPLICATION_JSON_VALUE},produces={MediaType.APPLICATION_JSON_VALUE}) @ApiOperation(value="update data for key",notes="Update or insert (put) data for key in region." + "op=REPLACE, update (replace) data with key if and only if the key exists in region" + "op=CAS update (compare-and-set) value having key with a new value if and only if the \"@old\" value sent matches the current value for the key in region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=400,message="Bad Request."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist or if key is not mapped to some value for REPLACE or CAS."),@ApiResponse(code=409,message="For CAS, @old value does not match to the current value in region"),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('WRITE', #region, #keys)") public ResponseEntity<?> update(@PathVariable("region") String region,@PathVariable("keys") final String[] keys,@RequestParam(value="op",defaultValue="PUT") final String opValue,@RequestBody final String json){
  logger.debug("updating key(s) for region ({}) ",region);
  region=decode(region);
  if (keys.length > 1) {
    return updateMultipleKeys(region,keys,json);
  }
 else {
    return updateSingleKey(region,keys[0],json,opValue);
  }
}

public void load(X509Extension extensions){
  Set<String> critExts=extensions.getCriticalExtensionOIDs();
  Set<String> nonCritExts=extensions.getNonCriticalExtensionOIDs();
  List<X509Ext> sortedExts=new ArrayList<X509Ext>();
  for (Iterator<String> itr=critExts.iterator(); itr.hasNext(); ) {
    String extOid=itr.next();
    byte[] value=extensions.getExtensionValue(extOid);
    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,true);
    sortedExts.add(ext);
  }
  for (Iterator<String> itr=nonCritExts.iterator(); itr.hasNext(); ) {
    String extOid=itr.next();
    byte[] value=extensions.getExtensionValue(extOid);
    X509Ext ext=new X509Ext(new ASN1ObjectIdentifier(extOid),value,false);
    sortedExts.add(ext);
  }
  Collections.sort(sortedExts,new ExtensionNameComparator());
  data=new Object[sortedExts.size()][3];
  int i=0;
  for (Iterator<X509Ext> itrSortedExts=sortedExts.iterator(); itrSortedExts.hasNext(); ) {
    X509Ext ext=itrSortedExts.next();
    loadRow(ext,i);
    i++;
  }
  fireTableDataChanged();
}

public Builder deleteAddresses(){
  deleteFields.add("addresses");
  return this;
}

public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {
  String str=data == null ? null : data.toString();
  writeStringToFile(file,str,encoding,append);
}

public Query limit(int limit){
  return limit(limit < 0 ? NO_LIMIT : Field.<Integer>field(Integer.toString(limit)));
}

public static boolean fileExists(String fName){
  boolean result=false;
  File file=new File(fName);
  if (file != null) {
    result=file.exists() && file.isFile();
  }
  return result;
}

@Override public void write(byte[] b,int off,int len){
  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {
    throw new IndexOutOfBoundsException();
  }
 else   if (len == 0) {
    return;
  }
synchronized (this) {
    int newcount=count + len;
    int remaining=len;
    int inBufferPos=count - filledBufferSum;
    while (remaining > 0) {
      int part=Math.min(remaining,currentBuffer.length - inBufferPos);
      System.arraycopy(b,off + len - remaining,currentBuffer,inBufferPos,part);
      remaining-=part;
      if (remaining > 0) {
        needNewBuffer(newcount);
        inBufferPos=0;
      }
    }
    count=newcount;
  }
}

public long skip(long n){
  if (position + n <= document.getLength()) {
    position+=n;
    return n;
  }
  long temp=position;
  position=document.getLength();
  return document.getLength() - temp;
}

private static void _init(){
  addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo6());
  addMethod("iConomy",new com.earth2me.essentials.register.payment.methods.iCo5());
  addMethod("BOSEconomy",new com.earth2me.essentials.register.payment.methods.BOSE7());
  addMethod("Currency",new com.earth2me.essentials.register.payment.methods.MCUR());
  Dependencies.add("MultiCurrency");
  addMethod("Vault",new com.earth2me.essentials.register.payment.methods.VaultEco());
}

public static String convertFileName(String name,int maxBytes){
  try {
    return convertFileName(name,maxBytes,Charset.defaultCharset());
  }
 catch (  CharacterCodingException cce) {
    try {
      return convertFileName(name,maxBytes,Charset.forName("UTF-8"));
    }
 catch (    CharacterCodingException e) {
      throw new RuntimeException("UTF-8 should have encoded: " + name,e);
    }
  }
}

public static void copy(URL url,File file) throws IOException {
  InputStream is=url.openStream();
  try {
    OutputStream os=new FileOutputStream(file);
    try {
      byte[] buffer=new byte[8192];
      int read;
      while ((read=is.read(buffer)) > 0) {
        os.write(buffer,0,read);
      }
    }
  finally {
      os.close();
    }
  }
  finally {
    is.close();
  }
}

public void updateDeltas(int deltaX,int deltaY){
  if (mLeftBorderActive) {
    mDeltaX=Math.max(-mBaselineX,deltaX);
    mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX);
  }
 else   if (mRightBorderActive) {
    mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX);
    mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX);
  }
  if (mTopBorderActive) {
    mDeltaY=Math.max(-mBaselineY,deltaY);
    mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY);
  }
 else   if (mBottomBorderActive) {
    mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY);
    mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY);
  }
}

public void createAuthConfiguration(String name) throws AMConsoleException {
  if ((name == null) || (name.length() == 0)) {
    throw new AMConsoleException(getLocalizedString("authentication.config.missing.name"));
  }
  String[] params={currentRealm,name};
  logEvent("ATTEMPT_CREATE_AUTH_CONFIG",params);
  String errorMsg=null;
  try {
    AMAuthConfigUtils.createNamedConfig(name,0,new HashMap(),currentRealm,getUserSSOToken());
    logEvent("SUCCEED_CREATE_AUTH_CONFIG",params);
  }
 catch (  SMSException e) {
    errorMsg=getErrorString(e);
    String[] paramsEx={currentRealm,name,errorMsg};
    logEvent("SMS_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);
    debug.warning("problem creating auth instance",e);
  }
catch (  SSOException e) {
    errorMsg=getErrorString(e);
    String[] paramsEx={currentRealm,name,errorMsg};
    logEvent("SSO_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);
    debug.warning("problem creating auth instance",e);
  }
catch (  AMConfigurationException e) {
    errorMsg=getErrorString(e);
    String[] paramsEx={currentRealm,name,errorMsg};
    logEvent("AUTH_CONFIGURATION_EXCEPTION_CREATE_AUTH_CONFIG",paramsEx);
    debug.warning("problem creating auth instance",e);
  }
  if (errorMsg != null) {
    throw new AMConsoleException(errorMsg);
  }
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

public void trim(String aText,int[] aSpan){
  int begin=aSpan[0];
  int end=aSpan[1] - 1;
  String data=aText;
  while ((begin < (data.length() - 1)) && trimChar(data.charAt(begin))) {
    begin++;
  }
  while ((end > 0) && trimChar(data.charAt(end))) {
    end--;
  }
  end++;
  aSpan[0]=begin;
  aSpan[1]=end;
}

public String classifierTipText(){
  return "The base classifier to be used.";
}

public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){
  if (x < this.minX) {
    throw new RasterFormatException("x lies outside the raster");
  }
  if (y < this.minY) {
    throw new RasterFormatException("y lies outside the raster");
  }
  if ((x + width < x) || (x + width > this.minX + this.width)) {
    throw new RasterFormatException("(x + width) is outside of Raster");
  }
  if ((y + height < y) || (y + height > this.minY + this.height)) {
    throw new RasterFormatException("(y + height) is outside of Raster");
  }
  SampleModel sm;
  if (bandList != null) {
    sm=sampleModel.createSubsetSampleModel(bandList);
  }
 else {
    sm=sampleModel;
  }
  int deltaX=x0 - x;
  int deltaY=y0 - y;
  return new BytePackedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);
}

private void sendBuffer() throws IOException {
  buf.flip();
  send(buf,buf.remaining());
  buf=null;
}

private void ensureCapacity(int n){
  if (n <= 0) {
    return;
  }
  int max;
  if (data == null || data.length == 0) {
    max=25;
  }
 else   if (data.length >= n * 5) {
    return;
  }
 else {
    max=data.length;
  }
  while (max < n * 5) {
    max*=2;
  }
  String newData[]=new String[max];
  if (length > 0) {
    System.arraycopy(data,0,newData,0,length * 5);
  }
  data=newData;
}

public void callEvent(Event event){
  if (event.isAsynchronous()) {
    if (Thread.holdsLock(this)) {
      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");
    }
    if (server.isPrimaryThread()) {
      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");
    }
    fireEvent(event);
  }
 else {
synchronized (this) {
      fireEvent(event);
    }
  }
}

@Nullable private static PsiFile findFileToOpen(@NotNull List<PsiFile> files){
  PsiFile bestFile=null;
  FolderConfiguration bestConfig=null;
  for (  PsiFile file : files) {
    PsiDirectory qualifiedDirectory=file.getParent();
    assert qualifiedDirectory != null : "Resource file's parent directory cannot be null";
    FolderConfiguration config=FolderConfiguration.getConfigForFolder(qualifiedDirectory.getName());
    if (bestConfig == null || config == null || config.compareTo(bestConfig) < 0) {
      bestConfig=config;
      bestFile=file;
    }
  }
  return bestFile;
}

protected boolean areEqual(String string1,String string2,boolean caseMatters){
  return (caseMatters && string1.equals(string2)) || (!caseMatters && string1.equalsIgnoreCase(string2));
}

public static CommandResult execCommand(List<String> commands,boolean isRoot){
  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);
}

protected void populateBlob(int id,byte[] baseContent,int requiredSize) throws SQLException {
  Connection con=getConnectionViaDriverManager();
  CallableStatement cstmt=null;
  try {
    cstmt=con.prepareCall(EXECUTE_FILL_BINARY_BLOB);
    cstmt.setInt(1,id);
    cstmt.setBytes(2,baseContent);
    cstmt.setInt(3,requiredSize);
    cstmt.execute();
  }
  finally {
    closeQuietly(cstmt);
    closeQuietly(con);
  }
}

private void removeObservedFile(String localPath){
  File file=new File(localPath);
  String parentPath=file.getParent();
  FolderObserver observer=mFolderObserversMap.get(parentPath);
  if (observer != null) {
    observer.stopWatching(file.getName());
    if (observer.isEmpty()) {
      mFolderObserversMap.remove(parentPath);
      Log_OC.d(TAG,"Observer removed for parent folder " + parentPath + "/");
    }
  }
 else {
    Log_OC.d(TAG,"No observer to remove for path " + localPath);
  }
}

public void makeImmutable(){
  if (mutable) {
    if (results != null) {
      int length=results.size();
      for (int i=0; i < length; i++) {
        Result result=(Result)results.get(i);
        result.makeImmutable();
      }
      results=Collections.unmodifiableList(results);
    }
    mutable=false;
  }
}

public Statement isNull(){
  statement.append(" IS NULL");
  return this;
}

public void clear(){
  processQueue();
  hash.clear();
}

private void updateFavoriteStation(){
  String showString=null;
  if (FmRadioStation.isFavoriteStation(mContext,mCurrentStation)) {
    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);
    FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_SEARCHED,mCurrentStation);
    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector);
    mTextStationName.setText("");
    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_deleted,R.string.toast_channel_deleted1);
  }
 else {
    String stationName=FmRadioStation.getStationName(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED);
    if (FmRadioStation.isStationExist(mContext,mCurrentStation,FmRadioStation.STATION_TYPE_SEARCHED)) {
      FmRadioStation.updateStationToDb(mContext,stationName,FmRadioStation.STATION_TYPE_FAVORITE,mCurrentStation);
    }
 else {
      FmRadioStation.insertStationToDb(mContext,stationName,mCurrentStation,FmRadioStation.STATION_TYPE_FAVORITE);
    }
    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector);
    mTextStationName.setText(stationName);
    showString=mProjectStringExt.getProjectString(mContext,R.string.toast_channel_added,R.string.toast_channel_added1);
  }
  showToast(showString);
}

public int addAllAbsent(Collection<? extends E> c){
  Object[] cs=c.toArray();
  if (cs.length == 0)   return 0;
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    Object[] elements=getArray();
    int len=elements.length;
    int added=0;
    for (int i=0; i < cs.length; ++i) {
      Object e=cs[i];
      if (indexOf(e,elements,0,len) < 0 && indexOf(e,cs,0,added) < 0)       cs[added++]=e;
    }
    if (added > 0) {
      Object[] newElements=Arrays.copyOf(elements,len + added);
      System.arraycopy(cs,0,newElements,len,added);
      setArray(newElements);
    }
    return added;
  }
  finally {
    lock.unlock();
  }
}

public Analyzer saveAnalysis(File file) throws IOException {
  PrintStream ps=null;
  try {
    ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file)));
    printAnalysis(ps);
  }
  finally {
    if (ps != null) {
      ps.close();
    }
  }
  return this;
}

public Iterator<Capability> dependencies(){
  return m_Dependencies.iterator();
}

public static void notifyTicket(Context c,@NonNull Ticket t,boolean keepNotification){
  String text;
  String ticker;
  int smallIcon;
  int largeIcon;
  int status;
switch (TicketsAdapter.getValidityStatus(t.getStatus(),t.getValidTo())) {
case TicketProvider.Tickets.STATUS_VALID:
case TicketProvider.Tickets.STATUS_VALID_EXPIRING:
    text=c.getString(R.string.notif_valid_text,FormatUtil.formatDateTimeDifference(t.getValidTo()));
  ticker=c.getString(R.string.notif_valid_ticker);
smallIcon=R.drawable.notification_small_ready;
largeIcon=R.drawable.notification_big_ready;
status=TicketProvider.Tickets.STATUS_VALID_EXPIRING;
break;
case TicketProvider.Tickets.STATUS_EXPIRING:
case TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED:
text=c.getString(R.string.notif_expiring_text,FormatUtil.formatTime(t.getValidTo()));
ticker=c.getString(R.string.notif_expiring_ticker);
smallIcon=R.drawable.notification_small_warning;
largeIcon=R.drawable.notification_big_warning;
status=TicketProvider.Tickets.STATUS_EXPIRING_EXPIRED;
break;
case TicketProvider.Tickets.STATUS_EXPIRED:
text=c.getString(R.string.notif_expired_text,FormatUtil.formatTime(t.getValidTo()));
ticker=c.getString(R.string.notif_expired_ticker);
smallIcon=R.drawable.notification_small_expired;
largeIcon=R.drawable.notification_big_expired;
status=TicketProvider.Tickets.STATUS_EXPIRED;
break;
default :
return;
}
Intent intent=new Intent(c,WearableService.class);
intent.setAction("sent_notification_to_wear");
intent.putExtra("ticket",t);
intent.putExtra("status",status);
c.startService(intent);
Intent i=new Intent(c,MainActivity.class);
i.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
i.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());
PendingIntent openIntent=PendingIntent.getActivity(c,t.getNotificationId(),i,PendingIntent.FLAG_CANCEL_CURRENT);
Intent i2=new Intent(c,MainActivity.class);
i2.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
i2.putExtra(MainActivity.EXTRA_TICKET_ID,t.getId());
i2.putExtra(MainActivity.EXTRA_SHOW_SMS,true);
PendingIntent showSmsIntent=PendingIntent.getActivity(c,t.getNotificationId() + 1000,i2,PendingIntent.FLAG_CANCEL_CURRENT);
List<Action> actions=new ArrayList<Action>();
actions.add(new Action(R.drawable.notification_show_sms,R.string.notif_show_sms,showSmsIntent));
List<String> rows=new ArrayList<String>();
rows.add(text);
rows.add(c.getString(R.string.tickets_valid_from) + ": " + FormatUtil.formatDateTime(t.getValidFrom()));
rows.add(c.getString(R.string.tickets_code) + ": " + t.getHash());
fireNotification(c,t.getNotificationId(),openIntent,c.getString(R.string.application_name),text,rows,t.getCity(),ticker,smallIcon,largeIcon,actions,keepNotification);
}

public final static int parseInt(String str){
  char c=str.charAt(0);
  int length=str.length();
  boolean negative=(c == '-');
  int offset=1;
  if (negative) {
    if (length == 1 || length > 10) {
      return Integer.parseInt(str);
    }
    c=str.charAt(offset++);
  }
 else {
    if (length > 9) {
      return Integer.parseInt(str);
    }
  }
  if (c > '9' || c < '0') {
    return Integer.parseInt(str);
  }
  int num=c - '0';
  if (offset < length) {
    c=str.charAt(offset++);
    if (c > '9' || c < '0') {
      return Integer.parseInt(str);
    }
    num=(num * 10) + (c - '0');
    if (offset < length) {
      c=str.charAt(offset++);
      if (c > '9' || c < '0') {
        return Integer.parseInt(str);
      }
      num=(num * 10) + (c - '0');
      if (offset < length) {
        do {
          c=str.charAt(offset++);
          if (c > '9' || c < '0') {
            return Integer.parseInt(str);
          }
          num=(num * 10) + (c - '0');
        }
 while (offset < length);
      }
    }
  }
  return negative ? -num : num;
}

public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {
  super();
  if (buffer == null) {
    throw new IllegalArgumentException("Char array buffer may not be null");
  }
  int colon=buffer.indexOf(':');
  if (colon == -1) {
    throw new ParseException("Invalid header: " + buffer.toString());
  }
  String s=buffer.substringTrimmed(0,colon);
  if (s.length() == 0) {
    throw new ParseException("Invalid header: " + buffer.toString());
  }
  this.buffer=buffer;
  this.name=s;
  this.valuePos=colon + 1;
}

public synchronized void returnBuf(byte[] buf){
  if (buf == null || buf.length > mSizeLimit) {
    return;
  }
  mBuffersByLastUse.add(buf);
  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);
  if (pos < 0) {
    pos=-pos - 1;
  }
  mBuffersBySize.add(pos,buf);
  mCurrentSize+=buf.length;
  trim();
}

public static String toDateString(java.util.Date date,String format){
  if (date == null)   return "";
  SimpleDateFormat dateFormat=null;
  if (format != null) {
    dateFormat=new SimpleDateFormat(format);
  }
 else {
    dateFormat=new SimpleDateFormat();
  }
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  return dateFormat.format(date);
}

@Deprecated public static <T>T executeWithBackOff(AbstractGoogleClientRequest<T> client,String error,Object... errorArgs) throws IOException, InterruptedException {
  return executeWithBackOff(client,String.format(error,errorArgs));
}

private void checkServerResponseCode(HttpURLConnection urlConnection) throws RequestFailureException {
  try {
    if (urlConnection.getResponseCode() != 200) {
      throw new RequestFailureException("Received " + urlConnection.getResponseCode() + " code instead of 200 (OK) from the server.  Aborting.");
    }
  }
 catch (  IOException e) {
    throw new RequestFailureException("Failed to read response code from server: ",e);
  }
}

public static void addResourceSource(ResourceSource source){
  ALL_RESOURCE_SOURCES.add(source);
}

private void commitChanges(){
  hopfieldPropsPanel.commitChanges();
  inputPanel.commitChanges();
}

private boolean connect_to_target(PlaPointInt p_from_point){
  if (nearest_target_item != null && target_set != null && !target_set.contains(nearest_target_item)) {
    nearest_target_item=null;
  }
  if (nearest_target_item == null || !nearest_target_item.shares_net_no(net_nos)) {
    return false;
  }
  boolean route_completed=false;
  PlaPointInt connection_point=null;
  if (nearest_target_item instanceof BrdAbit) {
    BrdAbit target=(BrdAbit)nearest_target_item;
    connection_point=target.center_get();
  }
 else   if (nearest_target_item instanceof BrdTracep) {
    return r_board.connect_to_trace(p_from_point,(BrdTracep)nearest_target_item,pen_half_width_arr[layer_active_no],clearance_class);
  }
 else   if (nearest_target_item instanceof BrdAreaConduction) {
    connection_point=p_from_point;
  }
  if (connection_point != null) {
    route_completed=itera_connect(p_from_point,connection_point);
  }
  return route_completed;
}

public boolean onGenericMotionEvent(MotionEvent ev){
  if ((ev.getSource() & InputDevice.SOURCE_CLASS_POINTER) == InputDevice.SOURCE_CLASS_POINTER) {
    int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_SCROLL:
      float vScroll=ev.getAxisValue(MotionEvent.AXIS_VSCROLL);
    if (vScroll > 0) {
      if (mDeckView.ensureFocusedTask()) {
        mDeckView.focusNextTask(true,false);
      }
    }
 else {
      if (mDeckView.ensureFocusedTask()) {
        mDeckView.focusNextTask(false,false);
      }
    }
  return true;
}
}
return false;
}

public boolean addClass(OwlClass targetClass){
  targetClass.addQCRestriction(this);
  return qcClasses.add(targetClass);
}

public void editElement(final Object element,final String columnPropertyName){
  final int columnIndex=TableViewerUtils.columnPropertyNameToColumnIndex(columnPropertyName,true,viewer);
  viewer.editElement(element,columnIndex);
}

public Fp(ECCurve curve,ECFieldElement x,ECFieldElement y){
  this(curve,x,y,false);
}

private static String serializeDocumentInt(Document doc) throws TransformerException, IOException {
  ByteArrayOutputStream s=new ByteArrayOutputStream();
  TransformerFactory factory=TransformerFactory.newInstance();
  Transformer transformer=factory.newTransformer();
  transformer.setOutputProperty(OutputKeys.METHOD,"xml");
  transformer.setOutputProperty(OutputKeys.INDENT,"yes");
  DOMSource source=new DOMSource(doc);
  StreamResult outputTarget=new StreamResult(s);
  transformer.transform(source,outputTarget);
  return s.toString("UTF8");
}

void addFillComponents(Container panel,int[] cols,int[] rows){
  Dimension filler=new Dimension(10,10);
  boolean filled_cell_11=false;
  CellConstraints cc=new CellConstraints();
  if (cols.length > 0 && rows.length > 0) {
    if (cols[0] == 1 && rows[0] == 1) {
      panel.add(Box.createRigidArea(filler),cc.xy(1,1));
      filled_cell_11=true;
    }
  }
  for (int index=0; index < cols.length; index++) {
    if (cols[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));
  }
  for (int index=0; index < rows.length; index++) {
    if (rows[index] == 1 && filled_cell_11) {
      continue;
    }
    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));
  }
}

@Override public boolean useBufferPerWindow(){
  return !Win32GraphicsEnvironment.isDWMCompositionEnabled();
}

static double area(S2Point a,S2Point b,S2Point c){
  final double sa=b.angle(c);
  final double sb=c.angle(a);
  final double sc=a.angle(b);
  final double s=0.5 * (sa + sb + sc);
  if (s >= 3e-4) {
    double s2=s * s;
    double dmin=s - Math.max(sa,Math.max(sb,sc));
    if (dmin < 1e-2 * s * s2* s2) {
      double area=girardArea(a,b,c);
      if (dmin < s * (0.1 * area)) {
        return area;
      }
    }
  }
  return 4 * Math.atan(Math.sqrt(Math.max(0.0,Math.tan(0.5 * s) * Math.tan(0.5 * (s - sa)) * Math.tan(0.5 * (s - sb))* Math.tan(0.5 * (s - sc)))));
}

private void hqr2(){
  int nn=this.n;
  int n=nn - 1;
  int low=0;
  int high=nn - 1;
  double eps=Math.pow(2.0,-52.0);
  double exshift=0.0;
  double p=0, q=0, r=0, s=0, z=0, t, w, x, y;
  double norm=0.0;
  for (int i=0; i < nn; i++) {
    if (i < low | i > high) {
      d[i]=H[i][i];
      e[i]=0.0;
    }
    for (int j=Math.max(i - 1,0); j < nn; j++) {
      norm=norm + Math.abs(H[i][j]);
    }
  }
  int iter=0;
  while (n >= low) {
    int l=n;
    while (l > low) {
      s=Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);
      if (s == 0.0) {
        s=norm;
      }
      if (Math.abs(H[l][l - 1]) < eps * s) {
        break;
      }
      l--;
    }
    if (l == n) {
      H[n][n]=H[n][n] + exshift;
      d[n]=H[n][n];
      e[n]=0.0;
      n--;
      iter=0;
    }
 else     if (l == n - 1) {
      w=H[n][n - 1] * H[n - 1][n];
      p=(H[n - 1][n - 1] - H[n][n]) / 2.0;
      q=p * p + w;
      z=Math.sqrt(Math.abs(q));
      H[n][n]=H[n][n] + exshift;
      H[n - 1][n - 1]=H[n - 1][n - 1] + exshift;
      x=H[n][n];
      if (q >= 0) {
        if (p >= 0) {
          z=p + z;
        }
 else {
          z=p - z;
        }
        d[n - 1]=x + z;
        d[n]=d[n - 1];
        if (z != 0.0) {
          d[n]=x - w / z;
        }
        e[n - 1]=0.0;
        e[n]=0.0;
        x=H[n][n - 1];
        s=Math.abs(x) + Math.abs(z);
        p=x / s;
        q=z / s;
        r=Math.sqrt(p * p + q * q);
        p=p / r;
        q=q / r;
        for (int j=n - 1; j < nn; j++) {
          z=H[n - 1][j];
          H[n - 1][j]=q * z + p * H[n][j];
          H[n][j]=q * H[n][j] - p * z;
        }
        for (int i=0; i <= n; i++) {
          z=H[i][n - 1];
          H[i][n - 1]=q * z + p * H[i][n];
          H[i][n]=q * H[i][n] - p * z;
        }
        for (int i=low; i <= high; i++) {
          z=V[i][n - 1];
          V[i][n - 1]=q * z + p * V[i][n];
          V[i][n]=q * V[i][n] - p * z;
        }
      }
 else {
        d[n - 1]=x + p;
        d[n]=x + p;
        e[n - 1]=z;
        e[n]=-z;
      }
      n=n - 2;
      iter=0;
    }
 else {
      x=H[n][n];
      y=0.0;
      w=0.0;
      if (l < n) {
        y=H[n - 1][n - 1];
        w=H[n][n - 1] * H[n - 1][n];
      }
      if (iter == 10) {
        exshift+=x;
        for (int i=low; i <= n; i++) {
          H[i][i]-=x;
        }
        s=Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);
        x=y=0.75 * s;
        w=-0.4375 * s * s;
      }
      if (iter == 30) {
        s=(y - x) / 2.0;
        s=s * s + w;
        if (s > 0) {
          s=Math.sqrt(s);
          if (y < x) {
            s=-s;
          }
          s=x - w / ((y - x) / 2.0 + s);
          for (int i=low; i <= n; i++) {
            H[i][i]-=s;
          }
          exshift+=s;
          x=y=w=0.964;
        }
      }
      iter=iter + 1;
      int m=n - 2;
      while (m >= l) {
        z=H[m][m];
        r=x - z;
        s=y - z;
        p=(r * s - w) / H[m + 1][m] + H[m][m + 1];
        q=H[m + 1][m + 1] - z - r- s;
        r=H[m + 2][m + 1];
        s=Math.abs(p) + Math.abs(q) + Math.abs(r);
        p=p / s;
        q=q / s;
        r=r / s;
        if (m == l) {
          break;
        }
        if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {
          break;
        }
        m--;
      }
      for (int i=m + 2; i <= n; i++) {
        H[i][i - 2]=0.0;
        if (i > m + 2) {
          H[i][i - 3]=0.0;
        }
      }
      for (int k=m; k <= n - 1; k++) {
        boolean notlast=(k != n - 1);
        if (k != m) {
          p=H[k][k - 1];
          q=H[k + 1][k - 1];
          r=(notlast ? H[k + 2][k - 1] : 0.0);
          x=Math.abs(p) + Math.abs(q) + Math.abs(r);
          if (x != 0.0) {
            p=p / x;
            q=q / x;
            r=r / x;
          }
        }
        if (x == 0.0) {
          break;
        }
        s=Math.sqrt(p * p + q * q + r * r);
        if (p < 0) {
          s=-s;
        }
        if (s != 0) {
          if (k != m) {
            H[k][k - 1]=-s * x;
          }
 else           if (l != m) {
            H[k][k - 1]=-H[k][k - 1];
          }
          p=p + s;
          x=p / s;
          y=q / s;
          z=r / s;
          q=q / p;
          r=r / p;
          for (int j=k; j < nn; j++) {
            p=H[k][j] + q * H[k + 1][j];
            if (notlast) {
              p=p + r * H[k + 2][j];
              H[k + 2][j]=H[k + 2][j] - p * z;
            }
            H[k][j]=H[k][j] - p * x;
            H[k + 1][j]=H[k + 1][j] - p * y;
          }
          for (int i=0; i <= Math.min(n,k + 3); i++) {
            p=x * H[i][k] + y * H[i][k + 1];
            if (notlast) {
              p=p + z * H[i][k + 2];
              H[i][k + 2]=H[i][k + 2] - p * r;
            }
            H[i][k]=H[i][k] - p;
            H[i][k + 1]=H[i][k + 1] - p * q;
          }
          for (int i=low; i <= high; i++) {
            p=x * V[i][k] + y * V[i][k + 1];
            if (notlast) {
              p=p + z * V[i][k + 2];
              V[i][k + 2]=V[i][k + 2] - p * r;
            }
            V[i][k]=V[i][k] - p;
            V[i][k + 1]=V[i][k + 1] - p * q;
          }
        }
      }
    }
  }
  if (norm == 0.0) {
    return;
  }
  for (n=nn - 1; n >= 0; n--) {
    p=d[n];
    q=e[n];
    if (q == 0) {
      int l=n;
      H[n][n]=1.0;
      for (int i=n - 1; i >= 0; i--) {
        w=H[i][i] - p;
        r=0.0;
        for (int j=l; j <= n; j++) {
          r=r + H[i][j] * H[j][n];
        }
        if (e[i] < 0.0) {
          z=w;
          s=r;
        }
 else {
          l=i;
          if (e[i] == 0.0) {
            if (w != 0.0) {
              H[i][n]=-r / w;
            }
 else {
              H[i][n]=-r / (eps * norm);
            }
          }
 else {
            x=H[i][i + 1];
            y=H[i + 1][i];
            q=(d[i] - p) * (d[i] - p) + e[i] * e[i];
            t=(x * s - z * r) / q;
            H[i][n]=t;
            if (Math.abs(x) > Math.abs(z)) {
              H[i + 1][n]=(-r - w * t) / x;
            }
 else {
              H[i + 1][n]=(-s - y * t) / z;
            }
          }
          t=Math.abs(H[i][n]);
          if ((eps * t) * t > 1) {
            for (int j=i; j <= n; j++) {
              H[j][n]=H[j][n] / t;
            }
          }
        }
      }
    }
 else     if (q < 0) {
      int l=n - 1;
      if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {
        H[n - 1][n - 1]=q / H[n][n - 1];
        H[n - 1][n]=-(H[n][n] - p) / H[n][n - 1];
      }
 else {
        cdiv(0.0,-H[n - 1][n],H[n - 1][n - 1] - p,q);
        H[n - 1][n - 1]=cdivr;
        H[n - 1][n]=cdivi;
      }
      H[n][n - 1]=0.0;
      H[n][n]=1.0;
      for (int i=n - 2; i >= 0; i--) {
        double ra, sa, vr, vi;
        ra=0.0;
        sa=0.0;
        for (int j=l; j <= n; j++) {
          ra=ra + H[i][j] * H[j][n - 1];
          sa=sa + H[i][j] * H[j][n];
        }
        w=H[i][i] - p;
        if (e[i] < 0.0) {
          z=w;
          r=ra;
          s=sa;
        }
 else {
          l=i;
          if (e[i] == 0) {
            cdiv(-ra,-sa,w,q);
            H[i][n - 1]=cdivr;
            H[i][n]=cdivi;
          }
 else {
            x=H[i][i + 1];
            y=H[i + 1][i];
            vr=(d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;
            vi=(d[i] - p) * 2.0 * q;
            if (vr == 0.0 & vi == 0.0) {
              vr=eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x)+ Math.abs(y)+ Math.abs(z));
            }
            cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi);
            H[i][n - 1]=cdivr;
            H[i][n]=cdivi;
            if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {
              H[i + 1][n - 1]=(-ra - w * H[i][n - 1] + q * H[i][n]) / x;
              H[i + 1][n]=(-sa - w * H[i][n] - q * H[i][n - 1]) / x;
            }
 else {
              cdiv(-r - y * H[i][n - 1],-s - y * H[i][n],z,q);
              H[i + 1][n - 1]=cdivr;
              H[i + 1][n]=cdivi;
            }
          }
          t=Math.max(Math.abs(H[i][n - 1]),Math.abs(H[i][n]));
          if ((eps * t) * t > 1) {
            for (int j=i; j <= n; j++) {
              H[j][n - 1]=H[j][n - 1] / t;
              H[j][n]=H[j][n] / t;
            }
          }
        }
      }
    }
  }
  for (int i=0; i < nn; i++) {
    if (i < low | i > high) {
      for (int j=i; j < nn; j++) {
        V[i][j]=H[i][j];
      }
    }
  }
  for (int j=nn - 1; j >= low; j--) {
    for (int i=low; i <= high; i++) {
      z=0.0;
      for (int k=low; k <= Math.min(j,high); k++) {
        z=z + V[i][k] * H[k][j];
      }
      V[i][j]=z;
    }
  }
}

private void serializable(final IsolationLevels level) throws Exception {
  clear(store);
  final ValueFactory vf=store.getValueFactory();
  final IRI subj=vf.createIRI("http://test#s");
  final IRI pred=vf.createIRI("http://test#p");
  RepositoryConnection prep=store.getConnection();
  try {
    prep.begin(level);
    prep.add(subj,pred,vf.createLiteral(1));
    prep.commit();
  }
  finally {
    prep.close();
  }
  final CountDownLatch start=new CountDownLatch(2);
  final CountDownLatch observed=new CountDownLatch(2);
  Thread t1=incrementBy(start,observed,level,vf,subj,pred,3);
  Thread t2=incrementBy(start,observed,level,vf,subj,pred,5);
  t2.start();
  t1.start();
  t2.join();
  t1.join();
  assertNotFailed();
  RepositoryConnection check=store.getConnection();
  try {
    check.begin(level);
    Literal lit=readLiteral(check,subj,pred);
    int val=lit.intValue();
    if (val != 4 && val != 6) {
      assertEquals(9,val);
    }
    check.commit();
  }
  finally {
    check.close();
  }
}

public static Array listToArrayRemoveEmpty(String list,char delimiter){
  int len=list.length();
  ArrayImpl array=new ArrayImpl();
  if (len == 0)   return array;
  int last=0;
  for (int i=0; i < len; i++) {
    if (list.charAt(i) == delimiter) {
      if (last < i)       array._append(list.substring(last,i));
      last=i + 1;
    }
  }
  if (last < len)   array._append(list.substring(last));
  return array;
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public static <T extends Object & java.lang.Comparable<? super T>>T min(Collection<? extends T> collection){
  Iterator<? extends T> it=collection.iterator();
  T min=it.next();
  while (it.hasNext()) {
    T next=it.next();
    if (min.compareTo(next) > 0) {
      min=next;
    }
  }
  return min;
}

@Override public ServerHeartbeat server(String address,int port,boolean isSSL,String clusterId,String displayName,boolean isDynamic){
  Objects.requireNonNull(address);
  Objects.requireNonNull(clusterId);
  if (address.isEmpty()) {
    address="127.0.0.1";
  }
  ClusterHeartbeat cluster=createCluster(clusterId);
  ServerHeartbeat server;
  if (isDynamic) {
    server=cluster.createDynamicServer(address,port,isSSL);
  }
 else {
    server=cluster.createServer(address,port,isSSL);
  }
  if (displayName != null) {
    server.setDisplayName(displayName);
  }
  if (!isDynamic) {
    cluster.addSeedServer(server);
  }
  return server;
}

public void testToString(){
  LinkedBlockingQueue q=populatedQueue(SIZE);
  String s=q.toString();
  for (int i=0; i < SIZE; ++i) {
    assertTrue(s.indexOf(String.valueOf(i)) >= 0);
  }
}

private void findClub(){
  if (ce() == null) {
    return;
  }
  String title=Messages.getString("FiringDisplay.FindClubDialog.title");
  String body=Messages.getString("FiringDisplay.FindClubDialog.message");
  if (!clientgui.doYesNoDialog(title,body)) {
    return;
  }
  attacks.removeAllElements();
  attacks.addElement(new FindClubAction(cen));
  ready();
}

public void test_allocationContexts() throws IOException {
  final Journal store=(Journal)getStore();
  try {
    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();
    final RWStore rw=bs.getStore();
    final IAllocationContext allocContext1=rw.newAllocationContext(true);
    final IAllocationContext allocContext2=rw.newAllocationContext(true);
    final int sze=650;
    final byte[] buf=new byte[sze + 4];
    r.nextBytes(buf);
    final long addr1a=bs.write(ByteBuffer.wrap(buf),allocContext1);
    final long addr1b=bs.write(ByteBuffer.wrap(buf),allocContext1);
    rw.detachContext(allocContext1);
    final long addr2a=bs.write(ByteBuffer.wrap(buf),allocContext2);
    final long addr2b=bs.write(ByteBuffer.wrap(buf),allocContext2);
    rw.detachContext(allocContext2);
    try {
      bs.write(ByteBuffer.wrap(buf),allocContext1);
      fail("Should have failed to re-use detached context");
    }
 catch (    IllegalStateException ise) {
    }
    final IAllocationContext allocContext3=rw.newAllocationContext(true);
    final long addr1c=bs.write(ByteBuffer.wrap(buf),allocContext3);
    assertTrue("allocator re-use",bs.getPhysicalAddress(addr1c) > bs.getPhysicalAddress(addr2b));
    bs.delete(addr1c,allocContext3);
    final long addr1d=bs.write(ByteBuffer.wrap(buf),allocContext3);
    assertTrue("re-allocation",addr1c == addr1d);
    rw.detachContext(allocContext3);
    store.commit();
    bs.delete(addr1d);
    final long addr1e=bs.write(ByteBuffer.wrap(buf));
    assertTrue("deferred-delete",addr1e != addr1d);
    store.commit();
  }
  finally {
    store.destroy();
  }
}

public PDFXref(byte[] line){
  if (line == null) {
    id=-1;
    generation=-1;
  }
 else {
    id=Integer.parseInt(new String(line,0,10));
    generation=Integer.parseInt(new String(line,11,5));
  }
  compressed=false;
}

public static String[] makeStrings(Collection<InetAddress> addrs){
  String[] result=new String[addrs.size()];
  int i=0;
  for (  InetAddress addr : addrs) {
    result[i++]=addr.getHostAddress();
  }
  return result;
}

public static void showProfile(Activity activity,String pilotId,@Nullable HashMap<String,String> extras){
  if ((pilotId == null || pilotId.isEmpty()) && AirMap.hasValidAuthenticatedUser()) {
    pilotId=AirMap.getUserId();
  }
  Intent intent=new Intent(activity,ProfileActivity.class);
  intent.putExtra(ProfileActivity.ARG_PILOT_ID,pilotId);
  if (extras != null) {
    intent.putExtra(CreateFlightActivity.KEY_VALUE_EXTRAS,extras);
  }
  activity.startActivity(intent);
}

public SmoothMoves(){
  cycleStart=System.nanoTime() / 1000000;
  startTimer(currentResolution);
}

public static void updatePriceLists(Properties ctx,ProductBean productBean,String trxName) throws OperationException {
  ArrayList<ProductBean> list=productBean.getProductBeanList();
  if (list != null) {
    int productId=productBean.getProductId();
    Iterator<ProductBean> iter=list.iterator();
    while (iter.hasNext()) {
      ProductBean bean=iter.next();
      int priceListId=bean.getPriceListId();
      BigDecimal stdPrice=bean.getStdPrice();
      BigDecimal listPrice=bean.getListPrice();
      BigDecimal limitPrice=bean.getLimitPrice();
      MPriceList priceList=MPriceList.get(ctx,priceListId,trxName);
      if (priceList.isTaxIncluded()) {
        stdPrice=bean.getStdPriceIncl();
        listPrice=bean.getListPriceIncl();
        limitPrice=bean.getLimitPriceIncl();
      }
      updatePriceLists(ctx,productId,priceListId,stdPrice,listPrice,limitPrice,trxName);
    }
  }
}

private String checkDependencies(ModuleDescriptor md,HashMap<String,ModuleDescriptor> modlist){
  logger.debug("Checking dependencies of " + md.getId());
  ModuleInterface[] requires=md.getRequires();
  if (requires != null) {
    for (    ModuleInterface req : requires) {
      String res=checkOneDependency(md,req,modlist);
      if (!res.isEmpty()) {
        return res;
      }
    }
  }
  return "";
}

public void testClearBitPositiveInside1(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=20;
  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-31,35,26};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.clearBit(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public void deserializeFunnel(List<Object> serializedFunnel){
  Set<Object> funnelStepAccumulator=new HashSet<>();
  for (  Object e : serializedFunnel) {
    if (e != null) {
      funnelStepAccumulator.add(e);
    }
 else {
      funnelSteps.add(new HashSet<>(funnelStepAccumulator));
      funnelStepAccumulator.clear();
    }
  }
}

public static String appendParameter(CtClass type,String descriptor){
  int i=descriptor.indexOf(')');
  if (i < 0)   return descriptor;
 else {
    StringBuffer newdesc=new StringBuffer();
    newdesc.append(descriptor.substring(0,i));
    toDescriptor(newdesc,type);
    newdesc.append(descriptor.substring(i));
    return newdesc.toString();
  }
}

public void addCatchClause(CatchClause clause){
  assertNotNull(clause);
  if (catchClauses == null) {
    catchClauses=new ArrayList<CatchClause>();
  }
  catchClauses.add(clause);
  clause.setParent(this);
}

public static void streamContentToBrowser(HttpServletResponse response,byte[] bytes,String contentType,String fileName) throws IOException {
  setResponseBrowserProxyNoCache(response);
  response.setContentLength(bytes.length);
  if (contentType != null) {
    response.setContentType(contentType);
  }
  if (fileName != null) {
    response.setHeader("Content-Disposition","attachment;filename=\"" + fileName + "\"");
  }
  OutputStream out=response.getOutputStream();
  InputStream in=new ByteArrayInputStream(bytes);
  try {
    streamContent(out,in,bytes.length);
  }
 catch (  IOException e) {
    in.close();
    out.close();
    throw e;
  }
  in.close();
  out.flush();
  out.close();
}

public void unlock(Object key){
  String uid=String.valueOf(key);
  Transaction tr=lockedUIDHashMap.get(uid);
  if (tr == null) {
    return;
  }
  try {
    tr.commit();
  }
 catch (  Exception e) {
    logger.warn("Failed to commit transaction and unlocking the object, ignoring",e);
  }
 finally {
    lockedUIDHashMap.remove(uid);
  }
}

public List<Order> fetchOrders(int startIndex,int num){
  int endIndex=startIndex + num > orders.size() ? orders.size() : startIndex + num;
  return orders.subList(startIndex,endIndex);
}

public boolean ensureSchemaAgreement(){
  long start=System.currentTimeMillis();
  Map<String,List<String>> schemas=null;
  while (System.currentTimeMillis() - start < DbClientContext.MAX_SCHEMA_WAIT_MS) {
    try {
      log.info("sleep for {} seconds before checking schema versions.",DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS / 1000);
      Thread.sleep(DbClientContext.SCHEMA_RETRY_SLEEP_MILLIS);
    }
 catch (    InterruptedException ex) {
      log.warn("Interrupted during sleep");
    }
    schemas=getSchemaVersions();
    if (schemas.size() > 2) {
      continue;
    }
    if (schemas.size() == 1) {
      if (!schemas.containsKey(StorageProxy.UNREACHABLE)) {
        return false;
      }
 else {
        continue;
      }
    }
    if (schemas.containsKey(StorageProxy.UNREACHABLE)) {
      return true;
    }
  }
  log.error("Unable to converge schema versions {}",schemas);
  throw new IllegalStateException("Unable to converge schema versions");
}

void clear(){
  stack.clear();
}

private TileStore(final SpriteStore store){
  this.store=store;
  tiles=new ArrayList<Sprite>();
  tiles.add(store.getEmptySprite());
}

public static String comparableQualifier(String qualifier){
  int i=_QUALIFIERS.indexOf(qualifier);
  return i == -1 ? _QUALIFIERS.size() + "-" + qualifier : String.valueOf(i);
}

public boolean moreWorkThan(StoredBlock other){
  return chainWork.compareTo(other.chainWork) > 0;
}

public static Object evaluate(Object context,Object self,String expr,List<String> engineConfigs) throws CWLExpressionException {
  String trimmedExpr=StringUtils.trim(expr);
  if (trimmedExpr.startsWith("$")) {
    trimmedExpr=trimmedExpr.substring(1);
  }
  String function=trimmedExpr;
  if (trimmedExpr.startsWith("{")) {
    function="(function()%expr)()";
    function=function.replace("%expr",trimmedExpr);
  }
  Context cx=Context.enter();
  cx.setOptimizationLevel(OPTIMIZATION_LEVEL);
  cx.setMaximumInterpreterStackDepth(MAX_STACK_DEPTH);
  cx.setClassShutter(new CWLExpressionDenyAllClassShutter());
  try {
    Scriptable globalScope=cx.initStandardObjects();
    if (engineConfigs != null) {
      for (int i=0; i < engineConfigs.size(); i++) {
        Reader engineConfigReader=new StringReader(engineConfigs.get(i));
        cx.evaluateReader(globalScope,engineConfigReader,"engineConfig_" + i + ".js",1,null);
      }
    }
    putToScope(EXPR_CONTEXT_NAME,context,cx,globalScope);
    putToScope(EXPR_SELF_NAME,self,cx,globalScope);
    Scriptable resultScope=cx.newObject(globalScope);
    resultScope.setPrototype(globalScope);
    resultScope.setParentScope(globalScope);
    Object result=cx.evaluateString(resultScope,function,"script",1,null);
    if (result == null || result instanceof Undefined) {
      return null;
    }
    Object wrappedResult=Context.javaToJS(result,globalScope);
    putToScope("$result",wrappedResult,cx,globalScope);
    ScriptableObject.putProperty(globalScope,"$result",wrappedResult);
    String finalFunction="(function() { " + "           var result = $result;" + "           var type = result instanceof Array? \"array\" : typeof result;"+ "           return JSON.stringify({ \"result\" : result, \"type\" : type }); "+ "     })()";
    Scriptable wrapScope=cx.newObject(globalScope);
    wrapScope.setPrototype(globalScope);
    wrapScope.setParentScope(globalScope);
    result=cx.evaluateString(wrapScope,finalFunction,"script",1,null);
    return castResult(result);
  }
 catch (  Exception e) {
    String msg=String.format("Failed evaluating expression %s.",expr);
    throw new CWLExpressionException(msg,e);
  }
 finally {
    Context.exit();
  }
}

private void token(char c) throws ConfigurationException, IOException {
  int t=st.nextToken();
  if (t != c) {
    if (c == '"') {
      syntax("a String");
    }
 else {
      syntax(new String(new char[]{'\'',c,+'\''}));
    }
  }
}

public static boolean isJarURL(URL url){
  String protocol=url.getProtocol();
  return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol)|| URL_PROTOCOL_WSJAR.equals(protocol));
}

public boolean equals(Object o){
  if (o instanceof LDAPUsers) {
    LDAPUsers g=(LDAPUsers)o;
    if ((selectedUserDNs != null) && (g.selectedUserDNs != null) && (selectedUserDNs.equals(g.selectedUserDNs))) {
      return true;
    }
  }
  return false;
}

protected void applySetTimestamp(Long timestamp) throws SQLException {
  if (timestamp != null && conn.supportsControlTimestamp()) {
    if (timestamp.longValue() != currentTimestamp) {
      currentTimestamp=timestamp.longValue();
      statement.addBatch(conn.getControlTimestampQuery(timestamp));
    }
  }
}

private void addReference(final int sourcePosition,final int referencePosition){
  if (srcAndRefPositions == null) {
    srcAndRefPositions=new int[6];
  }
  if (referenceCount >= srcAndRefPositions.length) {
    int[] a=new int[srcAndRefPositions.length + 6];
    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);
    srcAndRefPositions=a;
  }
  srcAndRefPositions[referenceCount++]=sourcePosition;
  srcAndRefPositions[referenceCount++]=referencePosition;
}

public Accessor(String className,ClassLoader classLoader,Class[] constructorTypes,Object[] constructorArgs){
  try {
    fClass=Class.forName(className,true,classLoader);
  }
 catch (  ClassNotFoundException e) {
    fail();
  }
catch (  ExceptionInInitializerError e) {
    fail();
  }
  Constructor constructor=null;
  try {
    constructor=fClass.getDeclaredConstructor(constructorTypes);
  }
 catch (  SecurityException e2) {
    fail();
  }
catch (  NoSuchMethodException e2) {
    fail();
  }
  Assert.isNotNull(constructor);
  constructor.setAccessible(true);
  try {
    fInstance=constructor.newInstance(constructorArgs);
  }
 catch (  IllegalArgumentException e) {
    fail();
  }
catch (  InvocationTargetException e) {
    fail();
  }
catch (  InstantiationException e) {
    fail();
  }
catch (  IllegalAccessException e) {
    fail();
  }
}

public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException {
  try {
    final long startTime=TimeUtils.getMonotonicTime();
    final int items=messages.size();
    final long chunkSize=items / 10;
    final MqttMessageLogParser parser=new MqttMessageLogParser();
    final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>();
    long item=0;
    long reportAt=1;
    for (int i=0; i < items; i++) {
      final String message=messages.get(i);
      if (progress != null) {
        if (progress.isCancelled()) {
          logger.info("Task cancelled!");
          return null;
        }
        item++;
        if (item % 1000 == 0) {
          progress.update(current + item,max);
        }
      }
      if ((i > 0) && (i == (chunkSize * reportAt))) {
        final long currentTime=TimeUtils.getMonotonicTime();
        final long timeTaken=currentTime - startTime;
        final long totalTimeExpected=timeTaken * items / i;
        if (timeTaken > 1000) {
          logger.info("Processed {}%, estimated time left = {}s",reportAt * 10,(totalTimeExpected - timeTaken) / 1000);
        }
        reportAt++;
      }
      try {
        list.add(parser.parse(message));
      }
 catch (      XMLException e) {
        logger.error("Can't process message " + message,e);
      }
    }
    logger.info("Message audit log - parsed {} XML messages",list.size());
    return list;
  }
 catch (  XMLException e) {
    throw new SpyException("Can't parse the message audit log file",e);
  }
}

public void stop(){
  duration+=System.currentTimeMillis() - start;
}

public void addRow(Object[] row) throws CarbonSortKeyAndGroupByException {
  int currentSize=entryCount;
  if (sortBufferSize == currentSize) {
    LOGGER.debug("************ Writing to temp file ********** ");
    File[] fileList;
    if (procFiles.size() >= numberOfIntermediateFileToBeMerged) {
synchronized (lockObject) {
        fileList=procFiles.toArray(new File[procFiles.size()]);
        this.procFiles=new ArrayList<File>(1);
      }
      LOGGER.debug("Sumitting request for intermediate merging no of files: " + fileList.length);
      startIntermediateMerging(fileList);
    }
    Object[][] recordHolderListLocal=recordHolderList;
    try {
      semaphore.acquire();
      dataSorterAndWriterExecutorService.submit(new DataSorterAndWriter(recordHolderListLocal));
    }
 catch (    InterruptedException e) {
      LOGGER.error("exception occurred while trying to acquire a semaphore lock: " + e.getMessage());
      throw new CarbonSortKeyAndGroupByException(e.getMessage());
    }
    this.recordHolderList=new Object[this.sortBufferSize][];
    this.entryCount=0;
  }
  recordHolderList[entryCount++]=row;
}

public static byte[] decode(String data){
  int len=data.length() / 4 * 3;
  ByteArrayOutputStream bOut=new ByteArrayOutputStream(len);
  try {
    encoder.decode(data,bOut);
  }
 catch (  Exception e) {
    throw new DecoderException("unable to decode base64 string: " + e.getMessage(),e);
  }
  return bOut.toByteArray();
}

@Uninterruptible public static Address unwindNativeStackFrame(Address currfp){
  if (VM.BuildForIA32) {
    return currfp;
  }
  Address callee_fp;
  Address fp=Magic.getCallerFramePointer(currfp);
  Address ip;
  do {
    callee_fp=fp;
    ip=Magic.getReturnAddressUnchecked(fp);
    fp=Magic.getCallerFramePointer(fp);
  }
 while (!MemoryManager.addressInVM(ip) && fp.NE(StackFrameLayout.getStackFrameSentinelFP()));
  if (VM.BuildForPowerPC) {
    return fp;
  }
 else {
    return callee_fp;
  }
}

@Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String filePath,int offset){
  String canonicalPath;
  if (offset < filePath.length() && (filePath.charAt(offset) == '/' || filePath.charAt(offset) == _separatorChar))   canonicalPath=normalizePath("/",filePath,offset,_separatorChar);
 else   canonicalPath=normalizePath(_pathname,filePath,offset,_separatorChar);
  return fsWalk(userPath,attributes,canonicalPath);
}

public static boolean isMimeTypeImage(String mimeType){
  return mimeType != null && mimeType.startsWith("image/");
}

public FXMessageDialog(final Stage parent,final Parent group){
  this(parent);
  content.setCenter(group);
}

@Override protected int sizeOf(String key,BitmapDrawable value){
  final int bitmapSize=getBitmapSize(value) / 1024;
  return bitmapSize == 0 ? 1 : bitmapSize;
}

public Matrix abs(){
  Matrix result=new Matrix(m,n);
  for (int i=0; i < result.A.length; i++) {
    for (int j=0; j < result.A[i].length; j++)     result.A[i][j]=Math.abs(A[i][j]);
  }
  return result;
}

public void removeAttribute(String attrName) throws SMSException {
  Set attribute=(Set)attrSet.get(attrName);
  if (attribute == null) {
    throw (new SMSException(LdapException.newLdapException(ResultCode.ATTRIBUTE_OR_VALUE_EXISTS,getBundleString(IUMSConstants.SMS_ATTR_OR_VAL_EXISTS)),"sms-ATTR_OR_VAL_EXISTS"));
  }
  attrSet.remove(attrName);
  if (modSet == null) {
    modSet=new HashSet();
  }
  BasicAttribute ba=new BasicAttribute(attrName,attribute);
  for (Iterator items=attribute.iterator(); items.hasNext(); )   ba.add(items.next());
  modSet.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,ba));
}

@TargetApi(Build.VERSION_CODES.HONEYCOMB) public void snapshot(int cameraId){
  final int encWidth=768;
  final int encHeight=432;
  if (enable.containsKey(cameraId) && !enable.get(cameraId)) {
    return;
  }
  Camera camera=null;
synchronized (cameraLock) {
    try {
      camera=prepareCamera(cameraId,encWidth,encHeight);
      if (camera == null) {
        return;
      }
      if (Cfg.DEBUG) {
        Check.log(TAG + " (snapshot), cameraId: " + cameraId);
      }
      if (this.surface == null) {
        int[] surfaceparams=new int[1];
        GLES20.glGenTextures(1,surfaceparams,0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,surfaceparams[0]);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);
        this.surface=new SurfaceTexture(surfaceparams[0]);
      }
      camera.setPreviewTexture(surface);
      camera.startPreview();
      camera.setOneShotPreviewCallback(previewCallback);
      cameraLock.wait();
    }
 catch (    Exception e) {
      if (Cfg.DEBUG) {
        Check.log(TAG + " (snapshot) ERROR: " + e);
      }
    }
  }
}

private static DebuggerException parseExceptionOption(Node node){
  return new DebuggerException(parseStringOption(node,"exceptionName"),parseLongOption(node,"exceptionCode"),DebuggerExceptionHandlingAction.convertToHandlingAction(parseIntOption(node,"handlingAction")));
}

public Image rotate180Degrees(Image image,boolean maintainOpacity){
  int[] rgb=image.getRGB();
  int[] newRGB=new int[rgb.length];
  int width=image.getWidth();
  int height=image.getHeight();
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      int destX=width - x - 1;
      newRGB[destX + (height - y - 1) * width]=rgb[x + y * width];
    }
  }
  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);
}

public static void updateFinantare(SetGetModel m,String changedColumnName){
  BigDecimal valCofinantare=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Cofinantare);
  BigDecimal assetCost=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Asset_Cost);
  BigDecimal valTert=SetGetUtil.get_AttrValueAsBigDecimal(m,COLUMNNAME_A_Valoare_Tert);
  if (valCofinantare.signum() == 0 && valTert.signum() == 0) {
    valCofinantare=assetCost;
    valTert=Env.ZERO;
  }
 else   if (COLUMNNAME_A_Asset_Cost.equals(changedColumnName)) {
    valCofinantare=assetCost.subtract(valTert);
  }
 else   if (COLUMNNAME_A_Valoare_Cofinantare.equals(changedColumnName)) {
    valTert=assetCost.subtract(valCofinantare);
  }
 else   if (COLUMNNAME_A_Valoare_Tert.equals(changedColumnName)) {
    valCofinantare=assetCost.subtract(valTert);
  }
 else {
    valTert=assetCost.subtract(valCofinantare);
  }
  String tipFinantare=A_TIP_FINANTARE_Cofinantare;
  if (valTert.signum() == 0) {
    tipFinantare=A_TIP_FINANTARE_Proprie;
  }
 else   if (valCofinantare.signum() == 0) {
    tipFinantare=A_TIP_FINANTARE_Terti;
  }
  m.set_AttrValue(COLUMNNAME_A_Tip_Finantare,tipFinantare);
  m.set_AttrValue(COLUMNNAME_A_Valoare_Cofinantare,valCofinantare);
  m.set_AttrValue(COLUMNNAME_A_Valoare_Tert,valTert);
  if (A_TIP_FINANTARE_Proprie.equals(tipFinantare) && SetGetUtil.isPersistent(m)) {
    m.set_AttrValue(COLUMNNAME_A_FundingMode_ID,null);
  }
}

private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException {
  if (!xmldecl) {
    read('<');
  }
  name=readName();
  attributeCount=0;
  while (true) {
    skip();
    if (position >= limit && !fillBuffer(1)) {
      checkRelaxed(UNEXPECTED_EOF);
      return;
    }
    int c=buffer[position];
    if (xmldecl) {
      if (c == '?') {
        position++;
        read('>');
        return;
      }
    }
 else {
      if (c == '/') {
        degenerated=true;
        position++;
        skip();
        read('>');
        break;
      }
 else       if (c == '>') {
        position++;
        break;
      }
    }
    String attrName=readName();
    int i=(attributeCount++) * 4;
    attributes=ensureCapacity(attributes,i + 4);
    attributes[i]="";
    attributes[i + 1]=null;
    attributes[i + 2]=attrName;
    skip();
    if (position >= limit && !fillBuffer(1)) {
      checkRelaxed(UNEXPECTED_EOF);
      return;
    }
    if (buffer[position] == '=') {
      position++;
      skip();
      if (position >= limit && !fillBuffer(1)) {
        checkRelaxed(UNEXPECTED_EOF);
        return;
      }
      char delimiter=buffer[position];
      if (delimiter == '\'' || delimiter == '"') {
        position++;
      }
 else       if (relaxed) {
        delimiter=' ';
      }
 else {
        throw new XmlPullParserException("attr value delimiter missing!",this,null);
      }
      attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE);
      if (delimiter != ' ' && peekCharacter() == delimiter) {
        position++;
      }
    }
 else     if (relaxed) {
      attributes[i + 3]=attrName;
    }
 else {
      checkRelaxed("Attr.value missing f. " + attrName);
      attributes[i + 3]=attrName;
    }
  }
  int sp=depth++ * 4;
  elementStack=ensureCapacity(elementStack,sp + 4);
  elementStack[sp + 3]=name;
  if (depth >= nspCounts.length) {
    int[] bigger=new int[depth + 4];
    System.arraycopy(nspCounts,0,bigger,0,nspCounts.length);
    nspCounts=bigger;
  }
  nspCounts[depth]=nspCounts[depth - 1];
  if (processNsp) {
    adjustNsp();
  }
 else {
    namespace="";
  }
  if (defaultAttributes != null) {
    Map<String,String> elementDefaultAttributes=defaultAttributes.get(name);
    if (elementDefaultAttributes != null) {
      for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) {
        if (getAttributeValue(null,entry.getKey()) != null) {
          continue;
        }
        int i=(attributeCount++) * 4;
        attributes=ensureCapacity(attributes,i + 4);
        attributes[i]="";
        attributes[i + 1]=null;
        attributes[i + 2]=entry.getKey();
        attributes[i + 3]=entry.getValue();
      }
    }
  }
  elementStack[sp]=namespace;
  elementStack[sp + 1]=prefix;
  elementStack[sp + 2]=name;
}

private void displayCalendar(){
  ListItem listItem=fieldResource.getSelectedItem();
  if (listItem == null)   return;
  KeyNamePair pp=new KeyNamePair((Integer)listItem.getValue(),listItem.getLabel());
  int S_Resource_ID=pp.getKey();
  m_mAssignment.setS_Resource_ID(S_Resource_ID);
  Date date=fieldDate.getValue();
  if (date == null)   date=new Timestamp(System.currentTimeMillis());
  m_loading=true;
  schedulePane.recreate(S_Resource_ID,date);
  m_loading=false;
  invalidate();
}

public LineString createLineString(CoordinateSequence coordinates){
  return new LineString(coordinates,this);
}

public static final float[] trim(float[] a,int size){
  if (a.length == size) {
    return a;
  }
 else {
    float[] b=new float[size];
    System.arraycopy(a,0,b,0,size);
    return b;
  }
}

public void close(){
  if (closed.compareAndSet(false,true)) {
    doClose();
  }
}

@Override public boolean connectionAllowed(String eventName){
  if (!eventName.equals("instance")) {
    return false;
  }
  if (m_listenee != null) {
    return false;
  }
  return true;
}

void subtractFlakes(int quantity){
  for (int i=0; i < quantity; ++i) {
    int index=numFlakes - i - 1;
    flakes.remove(index);
  }
  setNumFlakes(numFlakes - quantity);
}

public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {
  if (len < 0) {
    throw new IllegalArgumentException("Can't have a negative input length!");
  }
  int blockSize=getBlockSize();
  int length=getUpdateOutputSize(len);
  if (length > 0) {
    if ((outOff + length) > out.length) {
      throw new OutputLengthException("output buffer too short");
    }
  }
  int resultLen=0;
  int gapLen=buf.length - bufOff;
  if (len > gapLen) {
    System.arraycopy(in,inOff,buf,bufOff,gapLen);
    resultLen+=cipher.processBlock(buf,0,out,outOff);
    bufOff=0;
    len-=gapLen;
    inOff+=gapLen;
    while (len > buf.length) {
      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);
      len-=blockSize;
      inOff+=blockSize;
    }
  }
  System.arraycopy(in,inOff,buf,bufOff,len);
  bufOff+=len;
  return resultLen;
}

public boolean requiredResourceName(Policy policy,String realmName,String name){
  getSvcTypeNameToActionsMap(policy,realmName);
  return requiredResourceNameService.contains(name);
}

public static void main(String args[]){
  boolean ok=parseOptions(args);
  if (!ok || !stripFiles(infiles,outfiles)) {
    System.exit(1);
  }
}

protected String a(String s,int v,String u) throws Exception {
  char sign=v >= 0 ? '+' : '-';
  Date dt=DateMathParser.parseMath(null,s + 'Z' + sign+ Math.abs(v)+ u);
  return fmt.format(dt.toInstant());
}

public AuthorityKeyIdentifierStructure(X509Certificate certificate) throws CertificateParsingException {
  super(fromCertificate(certificate));
}

JarFile open(final File jarFile) throws IOException {
  isTrue(jarFile.exists(),"The JAR file must exists.");
  return new JarFile(jarFile);
}

public void removeAllEmails(){
  emails.clear();
}

@Override public synchronized void initialize(){
  if (!mRootDirectory.exists()) {
    if (!mRootDirectory.mkdirs()) {
      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());
    }
    return;
  }
  File[] files=mRootDirectory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    BufferedInputStream fis=null;
    try {
      fis=new BufferedInputStream(new FileInputStream(file));
      CacheHeader entry=CacheHeader.readHeader(fis);
      entry.size=file.length();
      putEntry(entry.key,entry);
    }
 catch (    IOException e) {
      if (file != null) {
        file.delete();
      }
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}

protected void drawPath(Canvas canvas,List<Float> points,Paint paint,boolean circular){
  Path path=new Path();
  int height=canvas.getHeight();
  int width=canvas.getWidth();
  float[] tempDrawPoints;
  if (points.size() < 4) {
    return;
  }
  tempDrawPoints=calculateDrawPoints(points.get(0),points.get(1),points.get(2),points.get(3),height,width);
  path.moveTo(tempDrawPoints[0],tempDrawPoints[1]);
  path.lineTo(tempDrawPoints[2],tempDrawPoints[3]);
  int length=points.size();
  for (int i=4; i < length; i+=2) {
    if ((points.get(i - 1) < 0 && points.get(i + 1) < 0) || (points.get(i - 1) > height && points.get(i + 1) > height)) {
      continue;
    }
    tempDrawPoints=calculateDrawPoints(points.get(i - 2),points.get(i - 1),points.get(i),points.get(i + 1),height,width);
    if (!circular) {
      path.moveTo(tempDrawPoints[0],tempDrawPoints[1]);
    }
    path.lineTo(tempDrawPoints[2],tempDrawPoints[3]);
  }
  if (circular) {
    path.lineTo(points.get(0),points.get(1));
  }
  canvas.drawPath(path,paint);
}

@KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_unwrap_02() throws SSLException {
  String host="new host";
  int port=8080;
  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};
  ByteBuffer bb=ByteBuffer.allocate(10);
  SSLEngine sse=getEngine(host,port);
  sse.setUseClientMode(true);
  try {
    sse.unwrap(bb,bbA,-1,3);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.unwrap(bb,bbA,0,-3);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.unwrap(bb,bbA,bbA.length + 1,bbA.length);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
  try {
    sse.unwrap(bb,bbA,0,bbA.length + 1);
    fail("IndexOutOfBoundsException wasn't thrown");
  }
 catch (  IndexOutOfBoundsException iobe) {
  }
}

public PWResetAdminLog(SSOToken token){
  this.token=token;
  if (logStatus) {
    logger=(com.sun.identity.log.Logger)Logger.getLogger(logFile);
  }
  String lstr=SystemProperties.get(Constants.AM_LOCALE);
  init(lstr);
}

public static boolean isLetter(Character self){
  return Character.isLetter(self);
}

public void callArgVisitors(XPathVisitor visitor){
  for (int i=0; i < m_argVec.size(); i++) {
    Expression exp=(Expression)m_argVec.elementAt(i);
    exp.callVisitors(new ArgExtOwner(exp),visitor);
  }
}

public static String createLink(String uri,String label){
  return "<a href='" + uri + "'>"+ label+ "</a>";
}

public static boolean isExpression(String token,boolean isXml){
  String openExpr;
  String closeExpr;
  if (isXml) {
    openExpr=OPEN_EXPR_XML;
    closeExpr=CLOSE_EXPR_XML;
  }
 else {
    openExpr=OPEN_EXPR;
    closeExpr=CLOSE_EXPR;
  }
  if (token.startsWith(openExpr) && token.endsWith(closeExpr)) {
    return true;
  }
 else {
    return false;
  }
}

public void destroy(){
  this.isInitialized=false;
  this.isFinished=false;
  this.firstNode=null;
  this.tailLength=0;
  this.firstNodeHeight=-1;
}

public static Uri fromFile(File file){
  if (file == null) {
    throw new NullPointerException("file");
  }
  PathPart path=PathPart.fromDecoded(file.getAbsolutePath());
  return new HierarchicalUri("file",Part.EMPTY,path,Part.NULL,Part.NULL);
}

protected Object readFixedType(BinaryReaderExImpl reader) throws BinaryObjectException {
  Object val=null;
switch (mode) {
case BYTE:
    val=reader.readByteNullable(id);
  break;
case SHORT:
val=reader.readShortNullable(id);
break;
case INT:
val=reader.readIntNullable(id);
break;
case LONG:
val=reader.readLongNullable(id);
break;
case FLOAT:
val=reader.readFloatNullable(id);
break;
case DOUBLE:
val=reader.readDoubleNullable(id);
break;
case CHAR:
val=reader.readCharNullable(id);
break;
case BOOLEAN:
val=reader.readBooleanNullable(id);
break;
case DECIMAL:
val=reader.readDecimal(id);
break;
case STRING:
val=reader.readString(id);
break;
case UUID:
val=reader.readUuid(id);
break;
case DATE:
val=reader.readDate(id);
break;
case TIMESTAMP:
val=reader.readTimestamp(id);
break;
case BYTE_ARR:
val=reader.readByteArray(id);
break;
case SHORT_ARR:
val=reader.readShortArray(id);
break;
case INT_ARR:
val=reader.readIntArray(id);
break;
case LONG_ARR:
val=reader.readLongArray(id);
break;
case FLOAT_ARR:
val=reader.readFloatArray(id);
break;
case DOUBLE_ARR:
val=reader.readDoubleArray(id);
break;
case CHAR_ARR:
val=reader.readCharArray(id);
break;
case BOOLEAN_ARR:
val=reader.readBooleanArray(id);
break;
case DECIMAL_ARR:
val=reader.readDecimalArray(id);
break;
case STRING_ARR:
val=reader.readStringArray(id);
break;
case UUID_ARR:
val=reader.readUuidArray(id);
break;
case DATE_ARR:
val=reader.readDateArray(id);
break;
case TIMESTAMP_ARR:
val=reader.readTimestampArray(id);
break;
case OBJECT_ARR:
val=reader.readObjectArray(id);
break;
case COL:
val=reader.readCollection(id,null);
break;
case MAP:
val=reader.readMap(id,null);
break;
case BINARY_OBJ:
val=reader.readBinaryObject(id);
break;
case ENUM:
val=reader.readEnum(id,field.getType());
break;
case ENUM_ARR:
val=reader.readEnumArray(id,field.getType().getComponentType());
break;
case BINARY:
case OBJECT:
val=reader.readObject(id);
break;
case CLASS:
val=reader.readClass(id);
break;
default :
assert false : "Invalid mode: " + mode;
}
return val;
}

protected void processPlayRequest(){
  tryToGetAudioFocus();
  if (mState == State.STOPPED) {
    playMedia();
  }
 else   if (mState == State.PAUSED) {
    mState=State.PLAYING;
    setUpAsForeground(String.format(getString(R.string.media_state_playing),mFile.getFileName()));
    configAndStartMediaPlayer();
  }
}

@SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){
  if (comparator == null) {
    return Collections.binarySearch((List<? extends java.lang.Comparable<? super T>>)list,object);
  }
  if (!(list instanceof RandomAccess)) {
    ListIterator<? extends T> it=list.listIterator();
    while (it.hasNext()) {
      int result;
      if ((result=-comparator.compare(it.next(),object)) <= 0) {
        if (result == 0) {
          return it.previousIndex();
        }
        return -it.previousIndex() - 1;
      }
    }
    return -list.size() - 1;
  }
  int low=0, mid=list.size(), high=mid - 1, result=-1;
  while (low <= high) {
    mid=(low + high) >> 1;
    if ((result=-comparator.compare(list.get(mid),object)) > 0) {
      low=mid + 1;
    }
 else     if (result == 0) {
      return mid;
    }
 else {
      high=mid - 1;
    }
  }
  return -mid - (result < 0 ? 1 : 2);
}

public void finish(){
  m_bias=0;
  m_out.flush();
}

@Override public Vector whatCanGoHere(int[] state){
  Vector ret=new Vector();
  for (int i=0; i < fNumElements; i++) {
    if (state[i + 1] == STATE_START)     ret.addElement(fAllElements[i]);
  }
  return ret;
}

public void remove(RegionEntry entry,Object value){
  Object object=map.get(entry);
  if (object == null)   return;
  if (object instanceof Collection) {
    Collection coll=(Collection)object;
    boolean removed=false;
    if (useList) {
synchronized (coll) {
        removed=coll.remove(value);
      }
    }
 else {
      removed=coll.remove(value);
    }
    if (removed) {
      if (coll.size() == 0) {
        map.remove(entry);
      }
      atomicUpdater.decrementAndGet(this);
    }
  }
 else {
    if (object.equals(value)) {
      map.remove(entry);
    }
    atomicUpdater.decrementAndGet(this);
  }
}

private HashDataCache(DataCache<Pair<String,T>> cache,String algorithm){
  this.cache=cache;
  this.algorithm=algorithm;
  try {
    MessageDigest.getInstance(algorithm);
  }
 catch (  NoSuchAlgorithmException e) {
    String msg="Unable to get hash generator with algorithm: " + algorithm;
    LOG.warn(msg,e);
    throw new SystemConfigException(e);
  }
}

private void marshallEnum(Object value,EnumType enumType) throws IOException {
  LOG.debug("Enum value: {} of type: {}",value,enumType);
  jsonGenerator.writeString(value.toString());
}

public CholeskyDecomposition(Matrix Arg){
  double[][] A=Arg.getArray();
  n=Arg.getRowDimension();
  L=new double[n][n];
  isspd=(Arg.getColumnDimension() == n);
  for (int j=0; j < n; j++) {
    double[] Lrowj=L[j];
    double d=0.0;
    for (int k=0; k < j; k++) {
      double[] Lrowk=L[k];
      double s=0.0;
      for (int i=0; i < k; i++) {
        s+=Lrowk[i] * Lrowj[i];
      }
      Lrowj[k]=s=(A[j][k] - s) / L[k][k];
      d=d + s * s;
      isspd=isspd & (A[k][j] == A[j][k]);
    }
    d=A[j][j] - d;
    isspd=isspd & (d > 0.0);
    L[j][j]=Math.sqrt(Math.max(d,0.0));
    for (int k=j + 1; k < n; k++) {
      L[j][k]=0.0;
    }
  }
}

private void initEvents(){
  setSelectionSounds(play,hScore,credits,quit,quitY,quitN);
  play.setOnAction(null);
  hScore.setOnAction(null);
  credits.setOnAction(null);
  quit.setOnAction(null);
  quitY.setOnAction(null);
  quitN.setOnAction(null);
  scene.setOnKeyPressed(null);
  scene.setOnKeyReleased(null);
}

public static boolean isFileTypeSupported(int fileType,Sequence sequence){
  List providers=getMidiFileWriters();
  for (int i=0; i < providers.size(); i++) {
    MidiFileWriter writer=(MidiFileWriter)providers.get(i);
    if (writer.isFileTypeSupported(fileType,sequence)) {
      return true;
    }
  }
  return false;
}

public byte[] windowNaf(byte width,BigInteger k){
  byte[] wnaf=new byte[k.bitLength() + 1];
  short pow2wB=(short)(1 << width);
  BigInteger pow2wBI=BigInteger.valueOf(pow2wB);
  int i=0;
  int length=0;
  while (k.signum() > 0) {
    if (k.testBit(0)) {
      BigInteger remainder=k.mod(pow2wBI);
      if (remainder.testBit(width - 1)) {
        wnaf[i]=(byte)(remainder.intValue() - pow2wB);
      }
 else {
        wnaf[i]=(byte)remainder.intValue();
      }
      k=k.subtract(BigInteger.valueOf(wnaf[i]));
      length=i;
    }
 else {
      wnaf[i]=0;
    }
    k=k.shiftRight(1);
    i++;
  }
  length++;
  byte[] wnafShort=new byte[length];
  System.arraycopy(wnaf,0,wnafShort,0,length);
  return wnafShort;
}

private String mapCollectionName(String collectionName,boolean dest){
  if ((collectionRules.size() == 0) && (StringUtils.isBlank(defaultCollectionAppend))) {
    return collectionName;
  }
  for (  String[] rule : collectionRules) {
    String match=(dest) ? rule[0] : rule[1];
    String replace=(dest) ? rule[1] : rule[0];
    if (collectionName.contains(match)) {
      return collectionName.replace(match,replace);
    }
  }
  if (dest) {
    return collectionName + defaultCollectionAppend;
  }
 else {
    return collectionName.replace(defaultCollectionAppend,"");
  }
}

void fullyLock(){
  putLock.lock();
  takeLock.lock();
}

static public void fillRandomIntegerUniform(IDoubleVector vec,Random rand,int min,int max){
  final int delta=max - min;
  for (int i=0; i < vec.getLength(); ++i) {
    vec.set(i,min + rand.nextInt(delta));
  }
}

@Override public int hashCode(){
  return Arrays.hashCode(data);
}

private static void stoppingAnimation(Thread me){
  final FetcherInfo info=FetcherInfo.getFetcherInfo();
synchronized (info.waitList) {
    int index=-1;
    for (int i=0; i < info.fetchers.length; i++) {
      if (info.fetchers[i] == me) {
        return;
      }
      if (info.fetchers[i] == null) {
        index=i;
      }
    }
    if (index >= 0) {
      info.fetchers[index]=me;
      info.numFetchers++;
      me.setName("Image Fetcher " + index);
      return;
    }
  }
}

public boolean name_is_equal(String p_name){
  if (p_name == null)   return false;
  return p_name.equalsIgnoreCase(pkg_name);
}

protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){
  XYItemRenderer r=getRenderer(index);
  if (r == null) {
    return;
  }
  if (index >= getDatasetCount()) {
    return;
  }
  Collection markers=getRangeMarkers(index,layer);
  ValueAxis axis=getRangeAxisForDataset(index);
  if (markers != null && axis != null) {
    Iterator iterator=markers.iterator();
    while (iterator.hasNext()) {
      Marker marker=(Marker)iterator.next();
      r.drawRangeMarker(g2,this,axis,marker,dataArea);
    }
  }
}

static byte[] decryptData(byte[] password,byte[] encryptedData){
  try {
    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);
    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);
    return c.doFinal(encryptedData);
  }
 catch (  Exception e) {
    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e);
  }
}

public VPFLayer(){
  setProjectionChangePolicy(new com.bbn.openmap.layer.policy.ListResetPCPolicy(this));
  setMouseModeIDsForEvents(new String[]{"Gestures"});
}

private void emitCode(){
  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();
  worklist.add(new Instantiation(null,mainSubroutine));
  InsnList newInstructions=new InsnList();
  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();
  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();
  while (!worklist.isEmpty()) {
    Instantiation inst=worklist.removeFirst();
    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);
  }
  instructions=newInstructions;
  tryCatchBlocks=newTryCatchBlocks;
  localVariables=newLocalVariables;
}

protected boolean shouldClose(PooledConnection con,int action){
  if (con.getConnectionVersion() < getPoolVersion())   return true;
  if (con.isDiscarded())   return true;
  if (isClosed())   return true;
  if (!con.validate(action))   return true;
  if (!terminateTransaction(con))   return true;
  if (con.isMaxAgeExpired())   return true;
 else   return false;
}

public Vector3D hsl(){
  float r=redf();
  float g=greenf();
  float b=bluef();
  float min=Math.min(Math.min(r,g),b);
  float max=Math.max(Math.max(r,g),b);
  float l=lighting(min,max);
  float s=saturation(min,max,l);
  float h=hue(r,g,b,min,max);
  return new Vector3D(h,s,l);
}

public Future<Boolean> shutdownAwaiting(long timeoutForEach){
  ExecutorService executor=Executors.newScheduledThreadPool(0);
  return executor.submit(createShutdown(timeoutForEach));
}

public boolean isUnused(){
  return (numEntries < 1) && waitingThreads.isEmpty();
}

public void changeDirectory(String path) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
synchronized (lock) {
    if (!connected) {
      throw new IllegalStateException("Client not connected");
    }
    if (!authenticated) {
      throw new IllegalStateException("Client not authenticated");
    }
    communication.sendFTPCommand("CWD " + path);
    FTPReply r=communication.readFTPReply();
    touchAutoNoopTimer();
    if (!r.isSuccessCode()) {
      throw new FTPException(r);
    }
  }
}

private String removeQuote(String column){
  return column != null ? column.replaceAll(statementBuilder.getColumnQuote(),StringUtils.EMPTY) : null;
}

private boolean scrolledUpTimeout(){
  if (fixedChat || pauseKeyPressed) {
    return false;
  }
  if (!styles.autoScroll()) {
    return false;
  }
  long timePassed=System.currentTimeMillis() - lastChanged;
  if (timePassed > 1000 * styles.autoScrollTimeout()) {
    LOGGER.info("ScrolledUp Timeout (" + timePassed + ")");
    return true;
  }
  return false;
}

private boolean zzRefill() throws java.io.IOException {
  if (zzStartRead > 0) {
    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);
    zzEndRead-=zzStartRead;
    zzCurrentPos-=zzStartRead;
    zzMarkedPos-=zzStartRead;
    zzStartRead=0;
  }
  if (zzCurrentPos >= zzBuffer.length) {
    char newBuffer[]=new char[zzCurrentPos * 2];
    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);
    zzBuffer=newBuffer;
  }
  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);
  if (numRead > 0) {
    zzEndRead+=numRead;
    return false;
  }
  if (numRead == 0) {
    int c=zzReader.read();
    if (c == -1) {
      return true;
    }
 else {
      zzBuffer[zzEndRead++]=(char)c;
      return false;
    }
  }
  return true;
}

public List<Document> search(Query query,boolean prefixWildCard){
  List<Document> documents=new ArrayList<Document>();
  try {
    IndexSearcher searcher=getSearcher();
    TopDocs search=searcher.search(query,10000);
    for (    ScoreDoc scoreDoc : search.scoreDocs) {
      Document doc=searcher.doc(scoreDoc.doc);
      documents.add(doc);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
  return documents;
}

public void writeListEnd() throws IOException {
  os.write('z');
}

public static List<? extends Element> childElementList(Element element,Set<String> childElementNames){
  if (element == null)   return null;
  List<Element> elements=new LinkedList<Element>();
  if (childElementNames == null)   return elements;
  Node node=element.getFirstChild();
  if (node != null) {
    do {
      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {
        Element childElement=(Element)node;
        elements.add(childElement);
      }
    }
 while ((node=node.getNextSibling()) != null);
  }
  return elements;
}

protected synchronized byte[] engineGenerateSeed(int numBytes){
  byte[] myBytes;
  if (numBytes < 0) {
    throw new NegativeArraySizeException(Integer.toString(numBytes));
  }
  if (numBytes == 0) {
    return EmptyArray.BYTE;
  }
  if (myRandom == null) {
    myRandom=new SHA1PRNG_SecureRandomImpl();
    myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH));
  }
  myBytes=new byte[numBytes];
  myRandom.engineNextBytes(myBytes);
  return myBytes;
}

public String numArcsTipText(){
  return "The number of arcs in the bayesian net, at most: n * (n - 1) / 2 and at least: (n - 1); with n = numAttributes";
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 168) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

@RequestMapping(value="",method={RequestMethod.GET}) @ResponseBody public List<JobInstance> list(JobListRequest jobRequest){
  List<JobInstance> jobInstanceList=Collections.emptyList();
  List<JobStatusEnum> statusList=new ArrayList<JobStatusEnum>();
  if (null != jobRequest.getStatus()) {
    for (    int status : jobRequest.getStatus()) {
      statusList.add(JobStatusEnum.getByCode(status));
    }
  }
  JobTimeFilterEnum timeFilter=JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());
  try {
    jobInstanceList=jobService.listAllJobs(jobRequest.getCubeName(),jobRequest.getProjectName(),statusList,jobRequest.getLimit(),jobRequest.getOffset(),timeFilter);
  }
 catch (  Exception e) {
    logger.error(e.getLocalizedMessage(),e);
    throw new InternalErrorException(e);
  }
  return jobInstanceList;
}

public byte[] toBinary(int q){
  return ArrayEncoder.encodeModQ(coeffs,q);
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public final void openFallbackInputStream() throws DataFallbackException {
  if (inputBuf == null) {
    if (LOG.isDebugEnabled())     LOG.debug("openFallbackInputStream() : Opening the reader for the " + dataFile.getName() + "file");
    try {
      setInput(new BufferedReader(new FileReader(dataFile)));
    }
 catch (    IOException e) {
      throw new DataFallbackException(e.getMessage());
    }
  }
}

public void addCaretListener(final ICaretListener listener){
  Preconditions.checkNotNull(listener,"Error: Listener can't be null");
  if (!m_listeners.contains(listener)) {
    m_listeners.add(listener);
  }
}

@Deprecated static public SerialSensorManager instance(){
  return null;
}

public void testIsCurrency(){
  try {
    assertFalse(rsmd.isCurrency(1));
  }
 catch (  SQLException e1) {
    fail("ResultSetMetaDataTest.testGetScale()" + e1.getMessage());
    e1.printStackTrace();
  }
  try {
    rsmd.isCurrency(0);
    fail("SQLException is not thrown");
  }
 catch (  SQLException e) {
  }
  try {
    rsmd.isCurrency(5);
    fail("SQLException is not thrown");
  }
 catch (  SQLException e) {
  }
  try {
    rs.close();
    rsmd.isCurrency(1);
    fail("Exception expected");
  }
 catch (  SQLException e) {
  }
}

public String encodeBuffer(byte aBuffer[]){
  ByteArrayOutputStream outStream=new ByteArrayOutputStream();
  ByteArrayInputStream inStream=new ByteArrayInputStream(aBuffer);
  try {
    encodeBuffer(inStream,outStream);
  }
 catch (  Exception IOException) {
    throw new Error("CharacterEncoder.encodeBuffer internal error");
  }
  return (outStream.toString());
}

void checkFrameValue(final Object value){
  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {
    return;
  }
  if (value instanceof String) {
    checkInternalName((String)value,"Invalid stack frame value");
    return;
  }
  if (!(value instanceof Label)) {
    throw new IllegalArgumentException("Invalid stack frame value: " + value);
  }
 else {
    usedLabels.add((Label)value);
  }
}

public void test_ConstructorIIIII(){
  Date d1=new Date(70,0,1,1,1);
  Date d2=new Date(0 + d1.getTimezoneOffset() * 60 * 1000 + 60 * 60 * 1000 + 60 * 1000);
  assertTrue("Created incorrect date",d1.equals(d2));
}

protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){
  IDevice srcDevice=null;
  IDevice dstDevice=null;
  Collection<? extends IDevice> allDevices=deviceManager.getAllDevices();
  for (  IDevice d : allDevices) {
    for (int j=0; j < d.getIPv4Addresses().length; j++) {
      if (srcDevice == null && client.ipAddress == d.getIPv4Addresses()[j])       srcDevice=d;
      if (dstDevice == null && member.address == d.getIPv4Addresses()[j]) {
        dstDevice=d;
        member.macString=dstDevice.getMACAddressString();
      }
      if (srcDevice != null && dstDevice != null)       break;
    }
  }
  if (srcDevice == null || dstDevice == null)   return;
  Long srcIsland=topology.getL2DomainId(sw.getId());
  if (srcIsland == null) {
    log.debug("No openflow island found for source {}/{}",sw.getStringId(),pi.getInPort());
    return;
  }
  boolean on_same_island=false;
  boolean on_same_if=false;
  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {
    long dstSwDpid=dstDap.getSwitchDPID();
    Long dstIsland=topology.getL2DomainId(dstSwDpid);
    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {
      on_same_island=true;
      if ((sw.getId() == dstSwDpid) && (pi.getInPort() == dstDap.getPort())) {
        on_same_if=true;
      }
      break;
    }
  }
  if (!on_same_island) {
    if (log.isTraceEnabled()) {
      log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice);
    }
    return;
  }
  if (on_same_if) {
    if (log.isTraceEnabled()) {
      log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort());
    }
    return;
  }
  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();
  Arrays.sort(srcDaps,clusterIdComparator);
  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();
  Arrays.sort(dstDaps,clusterIdComparator);
  int iSrcDaps=0, iDstDaps=0;
  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {
    SwitchPort srcDap=srcDaps[iSrcDaps];
    SwitchPort dstDap=dstDaps[iDstDaps];
    Long srcCluster=topology.getL2DomainId(srcDap.getSwitchDPID());
    Long dstCluster=topology.getL2DomainId(dstDap.getSwitchDPID());
    int srcVsDest=srcCluster.compareTo(dstCluster);
    if (srcVsDest == 0) {
      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {
        Route routeIn=routingEngine.getRoute(srcDap.getSwitchDPID(),(short)srcDap.getPort(),dstDap.getSwitchDPID(),(short)dstDap.getPort(),0);
        Route routeOut=routingEngine.getRoute(dstDap.getSwitchDPID(),(short)dstDap.getPort(),srcDap.getSwitchDPID(),(short)srcDap.getPort(),0);
        if (routeIn != null) {
          pushStaticVipRoute(true,routeIn,client,member,sw.getId());
        }
        if (routeOut != null) {
          pushStaticVipRoute(false,routeOut,client,member,sw.getId());
        }
      }
      iSrcDaps++;
      iDstDaps++;
    }
 else     if (srcVsDest < 0) {
      iSrcDaps++;
    }
 else {
      iDstDaps++;
    }
  }
  return;
}

public static String parseIdFromSameDocumentURI(String uri){
  if (uri.length() == 0) {
    return null;
  }
  String id=uri.substring(1);
  if (id != null && id.startsWith("xpointer(id(")) {
    int i1=id.indexOf('\'');
    int i2=id.indexOf('\'',i1 + 1);
    id=id.substring(i1 + 1,i2);
  }
  return id;
}

public void markUsed(long pos,int length){
  int start=getBlock(pos);
  int blocks=getBlockCount(length);
  set.set(start,start + blocks);
}

public CholMatrix(Matrix Arg){
  final double[][] A=Arg.toDoubleArray();
  n=(int)Arg.getRowCount();
  L=new double[n][n];
  isspd=(Arg.getColumnCount() == n);
  double[] Lrowj=null;
  double[] Lrowk=null;
  double[] Aj=null;
  for (int j=0; j < n; j++) {
    Lrowj=L[j];
    Aj=A[j];
    double d=0.0;
    for (int k=0; k < j; k++) {
      Lrowk=L[k];
      double s=0.0;
      for (int i=0; i < k; i++) {
        s+=Lrowk[i] * Lrowj[i];
      }
      Lrowj[k]=s=(Aj[k] - s) / Lrowk[k];
      d=d + s * s;
      isspd=isspd & (A[k][j] == Aj[k]);
    }
    d=Aj[j] - d;
    isspd=isspd & (d > 0.0);
    Lrowj[j]=Math.sqrt(Math.max(d,0.0));
    for (int k=j + 1; k < n; k++) {
      Lrowj[k]=0.0;
    }
  }
}

public static String readStringNZ(Memory mem,int address,int n){
  address&=Memory.addressMask;
  if (address + n > MemoryMap.END_RAM) {
    n=MemoryMap.END_RAM - address + 1;
    if (n < 0) {
      n=0;
    }
  }
  byte[] bytes=new byte[Math.min(n,10000)];
  int length=0;
  IMemoryReader memoryReader=MemoryReader.getMemoryReader(address,n,1);
  for (; n > 0; n--) {
    int b=memoryReader.readNext();
    if (b == 0) {
      break;
    }
    if (length >= bytes.length) {
      byte[] newBytes=new byte[bytes.length + 10000];
      System.arraycopy(bytes,0,newBytes,0,bytes.length);
      bytes=newBytes;
    }
    bytes[length]=(byte)b;
    length++;
  }
  return new String(bytes,0,length,Constants.charset);
}

static boolean shiftRight(int[] result,int resultLen,int[] source,int intCount,int count){
  int i;
  boolean allZero=true;
  for (i=0; i < intCount; i++)   allZero&=source[i] == 0;
  if (count == 0) {
    System.arraycopy(source,intCount,result,0,resultLen);
    i=resultLen;
  }
 else {
    int leftShiftCount=32 - count;
    allZero&=(source[i] << leftShiftCount) == 0;
    for (i=0; i < resultLen - 1; i++) {
      result[i]=(source[i + intCount] >>> count) | (source[i + intCount + 1] << leftShiftCount);
    }
    result[i]=(source[i + intCount] >>> count);
    i++;
  }
  return allZero;
}

@Override public void agg(Object newVal){
  valueSet.add(newVal instanceof Long ? (Long)newVal : Long.valueOf(newVal.toString()));
  firstTime=false;
}

private boolean removeLegionMember(String charName,boolean kick,String playerName){
  LegionMemberEx legionMember=getLegionMemberEx(charName);
  if (legionMember == null) {
    log.error("Char name does not exist in legion member table: " + charName);
    return false;
  }
  deleteLegionMemberFromDB(legionMember);
  Player player=world.findPlayer(charName);
  if (player != null) {
    PacketSendUtility.broadcastPacket(player,new SM_LEGION_UPDATE_TITLE(player.getObjectId(),0,"",2),true);
  }
  if (kick) {
    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(1300247,legionMember.getObjectId(),playerName,legionMember.getName()));
  }
 else {
    PacketSendUtility.broadcastPacketToLegion(legionMember.getLegion(),new SM_LEGION_LEAVE_MEMBER(900699,legionMember.getObjectId(),charName));
  }
  return true;
}

synchronized void printBuffer() throws IOException {
  int len=sb.length();
  if (len > 0) {
    char[] chars=new char[len];
    sb.getChars(0,len,chars,0);
    sb.setLength(0);
    super.write(chars,0,chars.length);
  }
}

Calendar toCalendar(String value,String pattern,Locale locale){
  Calendar calendar=null;
  try {
    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);
    format.setLenient(false);
    format.parse(value);
    calendar=format.getCalendar();
  }
 catch (  Exception e) {
    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());
  }
  return calendar;
}

public boolean containsBafBody(){
  Iterator<SootMethod> methodIt=methodIterator();
  while (methodIt.hasNext()) {
    SootMethod m=methodIt.next();
    if (m.hasActiveBody() && m.getActiveBody() instanceof soot.baf.BafBody) {
      return true;
    }
  }
  return false;
}

public static String retainAllChars(String str,String retainChars){
  int pos=indexOfChars(str,retainChars);
  if (pos == -1) {
    return "";
  }
  StringBuilder buf=new StringBuilder();
  do {
    buf.append(str.charAt(pos));
    pos=indexOfChars(str,retainChars,pos + 1);
  }
 while (pos != -1);
  return buf.toString();
}

public synchronized void deleteLeastUsedConnection(){
  final HttpConnection connection=(HttpConnection)freeConnections.removeFirst();
  if (connection != null) {
    deleteConnection(connection);
  }
 else   if (LOG.isDebugEnabled()) {
    LOG.debug("Attempted to reclaim an unused connection but there were none.");
  }
}

private int binarySearch(T x,int from,int to){
  while (from <= to) {
    int m=(from + to) >>> 1;
    if (comp.compare(x,data[m]) >= 0) {
      from=m + 1;
    }
 else {
      to=m - 1;
    }
  }
  return from;
}

private TransitSchedule cleanUpSchedule(TransitSchedule newTransitSchedule){
  newTransitSchedule=TransitScheduleCleaner.removeRoutesWithoutDepartures(newTransitSchedule);
  newTransitSchedule=TransitScheduleCleaner.removeEmptyLines(newTransitSchedule);
  newTransitSchedule=TransitScheduleCleaner.removeStopsNotUsed(newTransitSchedule);
  return newTransitSchedule;
}

protected static boolean match(Object ref,Object test){
  if (ref == null) {
    return false;
  }
  if (ref == test) {
    return true;
  }
  if (ref instanceof LabelList && test instanceof LabelList) {
    final LabelList lref=(LabelList)ref;
    final LabelList ltest=(LabelList)test;
    final int s1=lref.size(), s2=ltest.size();
    if (s1 == 0 || s2 == 0) {
      return false;
    }
    for (int i=0; i < s1; i++) {
      String l1=lref.get(i);
      if (l1 == null) {
        continue;
      }
      for (int j=0; j < s2; j++) {
        if (l1.equals(ltest.get(j))) {
          return true;
        }
      }
    }
  }
  return ref.equals(test);
}

private boolean step1(){
  if (CT == null)   return false;
  if (suffix(CT,"uciones") && suffix(R2,"uciones")) {
    CT=replaceSuffix(CT,"uciones","u");
    return true;
  }
  if (CT.length() >= 6) {
    if (suffix(CT,"imentos") && suffix(R2,"imentos")) {
      CT=removeSuffix(CT,"imentos");
      return true;
    }
    if (suffix(CT,"amentos") && suffix(R2,"amentos")) {
      CT=removeSuffix(CT,"amentos");
      return true;
    }
    if (suffix(CT,"adores") && suffix(R2,"adores")) {
      CT=removeSuffix(CT,"adores");
      return true;
    }
    if (suffix(CT,"adoras") && suffix(R2,"adoras")) {
      CT=removeSuffix(CT,"adoras");
      return true;
    }
    if (suffix(CT,"logias") && suffix(R2,"logias")) {
      replaceSuffix(CT,"logias","log");
      return true;
    }
    if (suffix(CT,"encias") && suffix(R2,"encias")) {
      CT=replaceSuffix(CT,"encias","ente");
      return true;
    }
    if (suffix(CT,"amente") && suffix(R1,"amente")) {
      CT=removeSuffix(CT,"amente");
      return true;
    }
    if (suffix(CT,"idades") && suffix(R2,"idades")) {
      CT=removeSuffix(CT,"idades");
      return true;
    }
  }
  if (CT.length() >= 5) {
    if (suffix(CT,"acoes") && suffix(R2,"acoes")) {
      CT=removeSuffix(CT,"acoes");
      return true;
    }
    if (suffix(CT,"imento") && suffix(R2,"imento")) {
      CT=removeSuffix(CT,"imento");
      return true;
    }
    if (suffix(CT,"amento") && suffix(R2,"amento")) {
      CT=removeSuffix(CT,"amento");
      return true;
    }
    if (suffix(CT,"adora") && suffix(R2,"adora")) {
      CT=removeSuffix(CT,"adora");
      return true;
    }
    if (suffix(CT,"ismos") && suffix(R2,"ismos")) {
      CT=removeSuffix(CT,"ismos");
      return true;
    }
    if (suffix(CT,"istas") && suffix(R2,"istas")) {
      CT=removeSuffix(CT,"istas");
      return true;
    }
    if (suffix(CT,"logia") && suffix(R2,"logia")) {
      CT=replaceSuffix(CT,"logia","log");
      return true;
    }
    if (suffix(CT,"ucion") && suffix(R2,"ucion")) {
      CT=replaceSuffix(CT,"ucion","u");
      return true;
    }
    if (suffix(CT,"encia") && suffix(R2,"encia")) {
      CT=replaceSuffix(CT,"encia","ente");
      return true;
    }
    if (suffix(CT,"mente") && suffix(R2,"mente")) {
      CT=removeSuffix(CT,"mente");
      return true;
    }
    if (suffix(CT,"idade") && suffix(R2,"idade")) {
      CT=removeSuffix(CT,"idade");
      return true;
    }
  }
  if (CT.length() >= 4) {
    if (suffix(CT,"acao") && suffix(R2,"acao")) {
      CT=removeSuffix(CT,"acao");
      return true;
    }
    if (suffix(CT,"ezas") && suffix(R2,"ezas")) {
      CT=removeSuffix(CT,"ezas");
      return true;
    }
    if (suffix(CT,"icos") && suffix(R2,"icos")) {
      CT=removeSuffix(CT,"icos");
      return true;
    }
    if (suffix(CT,"icas") && suffix(R2,"icas")) {
      CT=removeSuffix(CT,"icas");
      return true;
    }
    if (suffix(CT,"ismo") && suffix(R2,"ismo")) {
      CT=removeSuffix(CT,"ismo");
      return true;
    }
    if (suffix(CT,"avel") && suffix(R2,"avel")) {
      CT=removeSuffix(CT,"avel");
      return true;
    }
    if (suffix(CT,"ivel") && suffix(R2,"ivel")) {
      CT=removeSuffix(CT,"ivel");
      return true;
    }
    if (suffix(CT,"ista") && suffix(R2,"ista")) {
      CT=removeSuffix(CT,"ista");
      return true;
    }
    if (suffix(CT,"osos") && suffix(R2,"osos")) {
      CT=removeSuffix(CT,"osos");
      return true;
    }
    if (suffix(CT,"osas") && suffix(R2,"osas")) {
      CT=removeSuffix(CT,"osas");
      return true;
    }
    if (suffix(CT,"ador") && suffix(R2,"ador")) {
      CT=removeSuffix(CT,"ador");
      return true;
    }
    if (suffix(CT,"ivas") && suffix(R2,"ivas")) {
      CT=removeSuffix(CT,"ivas");
      return true;
    }
    if (suffix(CT,"ivos") && suffix(R2,"ivos")) {
      CT=removeSuffix(CT,"ivos");
      return true;
    }
    if (suffix(CT,"iras") && suffix(RV,"iras") && suffixPreceded(CT,"iras","e")) {
      CT=replaceSuffix(CT,"iras","ir");
      return true;
    }
  }
  if (CT.length() >= 3) {
    if (suffix(CT,"eza") && suffix(R2,"eza")) {
      CT=removeSuffix(CT,"eza");
      return true;
    }
    if (suffix(CT,"ico") && suffix(R2,"ico")) {
      CT=removeSuffix(CT,"ico");
      return true;
    }
    if (suffix(CT,"ica") && suffix(R2,"ica")) {
      CT=removeSuffix(CT,"ica");
      return true;
    }
    if (suffix(CT,"oso") && suffix(R2,"oso")) {
      CT=removeSuffix(CT,"oso");
      return true;
    }
    if (suffix(CT,"osa") && suffix(R2,"osa")) {
      CT=removeSuffix(CT,"osa");
      return true;
    }
    if (suffix(CT,"iva") && suffix(R2,"iva")) {
      CT=removeSuffix(CT,"iva");
      return true;
    }
    if (suffix(CT,"ivo") && suffix(R2,"ivo")) {
      CT=removeSuffix(CT,"ivo");
      return true;
    }
    if (suffix(CT,"ira") && suffix(RV,"ira") && suffixPreceded(CT,"ira","e")) {
      CT=replaceSuffix(CT,"ira","ir");
      return true;
    }
  }
  return false;
}

public final CharSequence yytext(){
  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);
}

public String patch_toText(List<Patch> patches){
  StringBuilder text=new StringBuilder();
  for (  Patch aPatch : patches) {
    text.append(aPatch);
  }
  return text.toString();
}

void close(int contextPrec,int ownPrec) throws IOException {
  if (ownPrec < contextPrec)   out.write(")");
}

private void validateSortSize(){
  String sortSizeStr=carbonProperties.getProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);
  try {
    int sortSize=Integer.parseInt(sortSizeStr);
    if (sortSize < CarbonCommonConstants.SORT_SIZE_MIN_VAL) {
      LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);
      carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);
    }
  }
 catch (  NumberFormatException e) {
    LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);
    carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);
  }
}

public void finishPainting(boolean useCache){
  DataBufferInt dataBuffer=new DataBufferInt(w0 * h0);
  int transparency=nativeFinishPainting(SunWritableRaster.stealData(dataBuffer,0),w0,h0);
  SunWritableRaster.markDirty(dataBuffer);
  int[] bands=BAND_OFFSETS[transparency - 1];
  WritableRaster raster=Raster.createPackedRaster(dataBuffer,w0,h0,w0,bands,null);
  ColorModel cm=COLOR_MODELS[transparency - 1];
  Image img=new BufferedImage(cm,raster,false,null);
  if (useCache) {
    cache.setImage(getClass(),null,w0,h0,cacheArgs,img);
  }
  graphics.drawImage(img,x0,y0,null);
}

public boolean deletePanel(){
  if (!super.deletePanel()) {
    return false;
  }
  turnoutList.clear();
  trackList.clear();
  pointList.clear();
  xingList.clear();
  slipList.clear();
  turntableList.clear();
  return true;
}

@Override default CompletableFuture<OptionalDouble> averageDouble(final ToDoubleFunction<? super T> fn){
  return CompletableFuture.supplyAsync(null,getExec());
}

public String next(){
  return next(ANY_PATTERN);
}

public XercesHTMLDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {
  super(settings);
  try {
    ClassLoader classLoader=ClassLoader.getSystemClassLoader();
    Class htmlBuilderClass=classLoader.loadClass("org.apache.html.dom.HTMLBuilder");
    htmlBuilderConstructor=htmlBuilderClass.getConstructor(NO_CLASSES);
    getHTMLDocumentMethod=htmlBuilderClass.getMethod("getHTMLDocument",NO_CLASSES);
    Class htmlDOMImpl=classLoader.loadClass("org.apache.html.dom.HTMLDOMImplementationImpl");
    Method method=htmlDOMImpl.getMethod("getHTMLDOMImplementation",NO_CLASSES);
    domImpl=(DOMImplementation)method.invoke(null,NO_OBJECTS);
    Class saxFactoryClass=classLoader.loadClass("org.apache.xerces.jaxp.SAXParserFactoryImpl");
    factory=(SAXParserFactory)saxFactoryClass.newInstance();
  }
 catch (  InvocationTargetException ex) {
    throw new DOMTestIncompatibleException(ex.getTargetException(),null);
  }
catch (  Exception ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
  if (settings != null) {
    for (int i=0; i < settings.length; i++) {
    }
  }
  try {
    factory.newSAXParser();
  }
 catch (  ParserConfigurationException ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
catch (  SAXException ex) {
    throw new DOMTestIncompatibleException(ex,null);
  }
}

@Override public final String toString(){
  StringBuilder cab=new StringBuilder(50 + getHopCount() * 30);
  cab.append("HttpRoute[");
  if (this.localAddress != null) {
    cab.append(this.localAddress);
    cab.append("->");
  }
  cab.append('{');
  if (this.tunnelled == TunnelType.TUNNELLED)   cab.append('t');
  if (this.layered == LayerType.LAYERED)   cab.append('l');
  if (this.secure)   cab.append('s');
  cab.append("}->");
  if (this.proxyChain != null) {
    for (    HttpHost aProxyChain : this.proxyChain) {
      cab.append(aProxyChain);
      cab.append("->");
    }
  }
  cab.append(this.targetHost);
  cab.append(']');
  return cab.toString();
}

private void push(final int type){
  if (outputStack == null) {
    outputStack=new int[10];
  }
  int n=outputStack.length;
  if (outputStackTop >= n) {
    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];
    System.arraycopy(outputStack,0,t,0,n);
    outputStack=t;
  }
  outputStack[outputStackTop++]=type;
  int top=owner.inputStackTop + outputStackTop;
  if (top > owner.outputStackMax) {
    owner.outputStackMax=top;
  }
}

public Macro(File file) throws EOFException, FileNotFoundException, IOException {
  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
  DocumentBuilder db=null;
  Document doc=null;
  try {
    db=dbf.newDocumentBuilder();
    InputSource is=new InputSource(new UnicodeReader(new FileInputStream(file),FILE_ENCODING));
    is.setEncoding(FILE_ENCODING);
    doc=db.parse(is);
  }
 catch (  Exception e) {
    e.printStackTrace();
    String desc=e.getMessage();
    if (desc == null) {
      desc=e.toString();
    }
    throw new IOException("Error parsing XML: " + desc);
  }
  macroRecords=new ArrayList();
  boolean parsedOK=initializeFromXMLFile(doc.getDocumentElement());
  if (parsedOK == false) {
    name=null;
    macroRecords.clear();
    macroRecords=null;
    throw new IOException("Error parsing XML!");
  }
}

public static void deleteESInput(){
  String esPIRIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + ":" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ "/"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY);
  logger.info("ES input being deleted at " + esPIRIndex);
  ProcessBuilder pDeletePIR=new ProcessBuilder("curl","-XDELETE",esPIRIndex);
  try {
    TestUtils.executeCommand(pDeletePIR);
    logger.info("ES input deleted!");
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}

private boolean add(int part){
  if (!parts.contains(part)) {
    parts.add(part);
    return true;
  }
  return false;
}

private void terminateAndWaitFsyncService() throws Exception {
  if (fsyncService.isTerminated())   return;
  fsyncService.shutdown();
  fsyncService.awaitTermination(3600,TimeUnit.SECONDS);
  Exception fsyncExceptionCopy=fsyncException;
  if (fsyncExceptionCopy != null)   throw fsyncExceptionCopy;
}

private Location findFarthestLocation(Location location,Direction direction){
  Location farthest;
  do {
    farthest=location;
    location=farthest.offset(direction);
  }
 while (gridOperator.isValidLocation(location) && gameGrid.get(location) == null);
  return farthest;
}

public static int computeMinImageSampleSize(ImageSize srcSize){
  int srcWidth=srcSize.getWidth();
  int srcHeight=srcSize.getHeight();
  int targetWidth=maxBitmapSize.getWidth();
  int targetHeight=maxBitmapSize.getHeight();
  int widthScale=(int)Math.ceil((float)srcWidth / targetWidth);
  int heightScale=(int)Math.ceil((float)srcHeight / targetHeight);
  return Math.max(widthScale,heightScale);
}

private JSplitPane createMainSplitPane(){
  final JSplitPane mainSplitPane=new JSplitPane();
  mainSplitPane.setOneTouchExpandable(true);
  mainSplitPane.setDividerLocation(250);
  mainSplitPane.setResizeWeight(0.33);
  mainSplitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
  m_componentPanel.setBackground(Color.WHITE);
  mainSplitPane.setLeftComponent(createProjectTreePanel());
  mainSplitPane.setRightComponent(m_componentPanel);
  mainSplitPane.setBorder(new LineBorder(Color.GRAY));
  return mainSplitPane;
}

private DigicoreChain cleanChain(DigicoreChain chain){
  return chain;
}

private boolean checkSetup(){
  this.txmgr=TransactionManagerImp.getTransactionManager();
  if (this.txmgr == null) {
    try {
      Hashtable<String,String> env=new Hashtable<String,String>();
      env.put(Context.INITIAL_CONTEXT_FACTORY,this.initialContextFactory);
      env.put(Context.PROVIDER_URL,this.providerUrl);
      Context ctx=new InitialContext(env);
      this.txmgrServer=(UserTransactionServer)PortableRemoteObject.narrow(ctx.lookup(this.userTransactionServerLookupName),UserTransactionServer.class);
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw new RuntimeException(getNotFoundMessage());
    }
    if (this.txmgrServer == null)     throw new RuntimeException(getNotFoundMessage());
  }
  return this.txmgr != null;
}

public static final boolean givesCheck(Position pos,Move m){
  boolean wtm=pos.whiteMove;
  int oKingSq=pos.getKingSq(!wtm);
  int oKing=wtm ? Piece.BKING : Piece.WKING;
  int p=Piece.makeWhite(m.promoteTo == Piece.EMPTY ? pos.getPiece(m.from) : m.promoteTo);
  int d1=BitBoard.getDirection(m.to,oKingSq);
switch (d1) {
case 8:
case -8:
case 1:
case -1:
    if ((p == Piece.WQUEEN) || (p == Piece.WROOK))     if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))     return true;
  break;
case 9:
case 7:
case -9:
case -7:
if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {
  if ((d1 != 0) && (MoveGen.nextPiece(pos,m.to,d1) == oKing))   return true;
}
 else if (p == Piece.WPAWN) {
  if (((d1 > 0) == wtm) && (pos.getPiece(m.to + d1) == oKing))   return true;
}
break;
default :
if (d1 != 0) {
if (p == Piece.WKNIGHT) return true;
}
}
int d2=BitBoard.getDirection(m.from,oKingSq);
if ((d2 != 0) && (d2 != d1) && (MoveGen.nextPiece(pos,m.from,d2) == oKing)) {
int p2=MoveGen.nextPieceSafe(pos,m.from,-d2);
switch (d2) {
case 8:
case -8:
case 1:
case -1:
if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;
break;
case 9:
case 7:
case -9:
case -7:
if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;
break;
}
}
if ((m.promoteTo != Piece.EMPTY) && (d1 != 0) && (d1 == d2)) {
switch (d1) {
case 8:
case -8:
case 1:
case -1:
if ((p == Piece.WQUEEN) || (p == Piece.WROOK)) if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;
break;
case 9:
case 7:
case -9:
case -7:
if ((p == Piece.WQUEEN) || (p == Piece.WBISHOP)) {
if ((d1 != 0) && (MoveGen.nextPiece(pos,m.from,d1) == oKing)) return true;
}
break;
}
}
if (p == Piece.WKING) {
if (m.to - m.from == 2) {
if (MoveGen.nextPieceSafe(pos,m.from,-1) == oKing) return true;
if (MoveGen.nextPieceSafe(pos,m.from + 1,wtm ? 8 : -8) == oKing) return true;
}
 else if (m.to - m.from == -2) {
if (MoveGen.nextPieceSafe(pos,m.from,1) == oKing) return true;
if (MoveGen.nextPieceSafe(pos,m.from - 1,wtm ? 8 : -8) == oKing) return true;
}
}
 else if (p == Piece.WPAWN) {
if (pos.getPiece(m.to) == Piece.EMPTY) {
int dx=Position.getX(m.to) - Position.getX(m.from);
if (dx != 0) {
int epSq=m.from + dx;
int d3=BitBoard.getDirection(epSq,oKingSq);
switch (d3) {
case 9:
case 7:
case -9:
case -7:
if (MoveGen.nextPiece(pos,epSq,d3) == oKing) {
int p2=MoveGen.nextPieceSafe(pos,epSq,-d3);
if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WBISHOP : Piece.BBISHOP))) return true;
}
break;
case 1:
if (MoveGen.nextPiece(pos,Math.max(epSq,m.from),d3) == oKing) {
int p2=MoveGen.nextPieceSafe(pos,Math.min(epSq,m.from),-d3);
if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;
}
break;
case -1:
if (MoveGen.nextPiece(pos,Math.min(epSq,m.from),d3) == oKing) {
int p2=MoveGen.nextPieceSafe(pos,Math.max(epSq,m.from),-d3);
if ((p2 == (wtm ? Piece.WQUEEN : Piece.BQUEEN)) || (p2 == (wtm ? Piece.WROOK : Piece.BROOK))) return true;
}
break;
}
}
}
}
return false;
}

public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz,Path path) throws ReflectiveOperationException {
  return newFSDirectory(clazz,path,FSLockFactory.getDefault());
}

private static Element addElement(Document doc,Node parent,String tagName,String attr1,String val1,String attr2,String val2){
  Element elem=doc.createElement(tagName);
  if (attr1 != null)   elem.setAttribute(attr1,val1);
  if (attr2 != null)   elem.setAttribute(attr2,val2);
  parent.appendChild(elem);
  return elem;
}

public static String stream2String(InputStream is,int maxLength) throws IOException {
  byte[] buffer=new byte[4096];
  StringWriter sw=new StringWriter();
  int totalRead=0;
  int read=0;
  do {
    sw.write(new String(buffer,0,read));
    totalRead+=read;
    read=is.read(buffer,0,buffer.length);
  }
 while (((-1 == maxLength) || (totalRead < maxLength)) && (read != -1));
  return sw.toString();
}

private static Couple<String> splitNameOfRemoteBranch(String branchName){
  int firstSlash=branchName.indexOf('/');
  String remoteName=firstSlash > -1 ? branchName.substring(0,firstSlash) : branchName;
  String remoteBranchName=branchName.substring(firstSlash + 1);
  return Couple.of(remoteName,remoteBranchName);
}

private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {
  int[] cValues=new int[3];
  do {
    if (bits.available() == 8) {
      return;
    }
    int firstByte=bits.readBits(8);
    if (firstByte == 254) {
      return;
    }
    parseTwoBytes(firstByte,bits.readBits(8),cValues);
    for (int i=0; i < 3; i++) {
      int cValue=cValues[i];
      if (cValue == 0) {
        result.append('\r');
      }
 else       if (cValue == 1) {
        result.append('*');
      }
 else       if (cValue == 2) {
        result.append('>');
      }
 else       if (cValue == 3) {
        result.append(' ');
      }
 else       if (cValue < 14) {
        result.append((char)(cValue + 44));
      }
 else       if (cValue < 40) {
        result.append((char)(cValue + 51));
      }
 else {
        throw FormatException.getFormatInstance();
      }
    }
  }
 while (bits.available() > 0);
}

public static OutputStream encrypt(OutputStream unencryptedOutputStream,char[] password) throws EncryptionException, IOException {
  OutputStream encryptedOutputStream=null;
  PBEKeySpec pbeKeySpec=new PBEKeySpec(password);
  PBEParameterSpec pbeParameterSpec=new PBEParameterSpec(SALT,ITERATION_COUNT);
  try {
    SecretKeyFactory secretKeyFactory=SecretKeyFactory.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);
    SecretKey pbeKey=secretKeyFactory.generateSecret(pbeKeySpec);
    Cipher cipher=Cipher.getInstance(ENCRYPTION_ALGORITHM,CRYPTOPROVIDER);
    cipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParameterSpec);
    encryptedOutputStream=new CipherOutputStream(unencryptedOutputStream,cipher);
  }
 catch (  GeneralSecurityException e) {
    throw new EncryptionException("There was a problem during the encryption process. See the stacktrace for details.",e);
  }
  return encryptedOutputStream;
}

public static String rightPad(String original,int length,char padChar){
  if (original.length() >= length) {
    return original;
  }
  return original + stringOfChar(padChar,length - original.length());
}

private boolean checkSelectForSwipe(int action,MotionEvent motionEvent,int pointerIndex){
  if (mSelected != null || action != MotionEvent.ACTION_MOVE || mActionState == ACTION_STATE_DRAG || !mCallback.isItemViewSwipeEnabled()) {
    return false;
  }
  if (mRecyclerView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING) {
    return false;
  }
  final ViewHolder vh=findSwipedView(motionEvent);
  if (vh == null) {
    return false;
  }
  final int movementFlags=mCallback.getAbsoluteMovementFlags(mRecyclerView,vh);
  final int swipeFlags=(movementFlags & ACTION_MODE_SWIPE_MASK) >> (DIRECTION_FLAG_COUNT * ACTION_STATE_SWIPE);
  if (swipeFlags == 0) {
    return false;
  }
  final float x=MotionEventCompat.getX(motionEvent,pointerIndex);
  final float y=MotionEventCompat.getY(motionEvent,pointerIndex);
  final float dx=x - mInitialTouchX;
  final float dy=y - mInitialTouchY;
  final float absDx=Math.abs(dx);
  final float absDy=Math.abs(dy);
  if (absDx < mSlop && absDy < mSlop) {
    return false;
  }
  if (absDx > absDy) {
    if (dx < 0 && (swipeFlags & LEFT) == 0) {
      return false;
    }
    if (dx > 0 && (swipeFlags & RIGHT) == 0) {
      return false;
    }
  }
 else {
    if (dy < 0 && (swipeFlags & UP) == 0) {
      return false;
    }
    if (dy > 0 && (swipeFlags & DOWN) == 0) {
      return false;
    }
  }
  mDx=mDy=0f;
  mActivePointerId=MotionEventCompat.getPointerId(motionEvent,0);
  select(vh,ACTION_STATE_SWIPE);
  if (mPreOpened != null && mPreOpened != vh && vh != null) {
    closeOpenedPreItem();
  }
  return true;
}

protected void reloadSwipeStateInView(View frontView,int position){
  if (!opened.get(position)) {
    ViewCompat.setTranslationX(frontView,0.0f);
  }
 else {
    if (openedRight.get(position)) {
      ViewCompat.setTranslationX(frontView,swipeListView.getWidth());
    }
 else {
      ViewCompat.setTranslationX(frontView,-swipeListView.getWidth());
    }
  }
}

public final void pushPair(int v1,int v2){
  if (null == m_map) {
    m_map=new int[m_blocksize];
    m_mapSize=m_blocksize;
  }
 else {
    if ((m_firstFree + 2) >= m_mapSize) {
      m_mapSize+=m_blocksize;
      int newMap[]=new int[m_mapSize];
      System.arraycopy(m_map,0,newMap,0,m_firstFree);
      m_map=newMap;
    }
  }
  m_map[m_firstFree]=v1;
  m_map[m_firstFree + 1]=v2;
  m_firstFree+=2;
}

void reset(){
  System.arraycopy(iv,0,k,0,blockSize);
}

public Matrix3 multiplyByVerticalFlip(){
  double[] m=this.m;
  m[2]+=m[1];
  m[5]+=m[4];
  m[8]+=m[7];
  m[1]=-m[1];
  m[4]=-m[4];
  m[7]=-m[7];
  return this;
}

public void shutdown() throws DataSourceException {
  if (createdSessionFactory) {
    if (sessionFactory != null && !sessionFactory.isClosed()) {
      try {
        sessionFactory.close();
      }
  finally {
        sessionFactory=null;
      }
    }
  }
}

private String stringifyIP(byte[] ip){
  String temp="";
  for (int i=0; i < ip.length / 2; i++) {
    temp+=Integer.toString(ip[i] & 0x00FF) + ".";
  }
  temp=temp.substring(0,temp.length() - 1);
  temp+="/";
  for (int i=ip.length / 2; i < ip.length; i++) {
    temp+=Integer.toString(ip[i] & 0x00FF) + ".";
  }
  temp=temp.substring(0,temp.length() - 1);
  return temp;
}

public COpenFunctionAction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){
  super(String.format("Open function %s",function.getName()));
  Preconditions.checkNotNull(parent,"IE02163: Parent argument can not be null");
  Preconditions.checkNotNull(container,"IE02164: Container argument can not be null");
  m_parent=parent;
  m_container=container;
  m_function=function;
}

public static byte[] hexStringToBytes(String hexString){
  if (hexString == null || hexString.equals("")) {
    return null;
  }
  hexString=hexString.toUpperCase();
  int length=hexString.length() / 2;
  char[] hexChars=hexString.toCharArray();
  byte[] d=new byte[length];
  for (int i=0; i < length; i++) {
    int pos=i * 2;
    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
  }
  return d;
}

public void writeString(final String s){
  final byte[] bytes=s.getBytes();
  final int len=bytes.length;
  writeInt(len);
  System.arraycopy(bytes,0,buffer,offset,len);
  offset+=len;
  pad();
}

private static PermissionCollection createAllPermissions(){
  Permissions permissions=new Permissions();
  permissions.add(new AllPermission());
  return permissions;
}

private void mergeNetworks(Network tzone,Network sZone){
  List<String> addedEndPoints=new ArrayList<String>(sZone.retrieveEndpoints());
  StringSet newEndPoints=sZone.retrieveEndpoints();
  for (  String endpoint : tzone.retrieveEndpoints()) {
    if (newEndPoints.contains(endpoint)) {
      addedEndPoints.remove(endpoint);
    }
  }
  if (!addedEndPoints.isEmpty()) {
    tzone.addEndpoints(addedEndPoints,true);
  }
  tzone.setNativeGuid(sZone.getNativeGuid());
}

static public void println(String msg){
  println(msg,CLLogLevel.normal);
}

private static ByteString readChunk(InputStream in,final int chunkSize) throws IOException {
  final byte[] buf=new byte[chunkSize];
  int bytesRead=0;
  while (bytesRead < chunkSize) {
    final int count=in.read(buf,bytesRead,chunkSize - bytesRead);
    if (count == -1) {
      break;
    }
    bytesRead+=count;
  }
  if (bytesRead == 0) {
    return null;
  }
 else {
    return ByteString.copyFrom(buf,0,bytesRead);
  }
}

private List<FacetResult> sumAssociations() throws IOException {
  DirectoryReader indexReader=DirectoryReader.open(indexDir);
  IndexSearcher searcher=new IndexSearcher(indexReader);
  TaxonomyReader taxoReader=new DirectoryTaxonomyReader(taxoDir);
  FacetsCollector fc=new FacetsCollector();
  FacetsCollector.search(searcher,new MatchAllDocsQuery(),10,fc);
  Facets tags=new TaxonomyFacetSumIntAssociations("$tags",taxoReader,config,fc);
  Facets genre=new TaxonomyFacetSumFloatAssociations("$genre",taxoReader,config,fc);
  List<FacetResult> results=new ArrayList<>();
  results.add(tags.getTopChildren(10,"tags"));
  results.add(genre.getTopChildren(10,"genre"));
  indexReader.close();
  taxoReader.close();
  return results;
}

public ReverseGeoCode(InputStream placenames,boolean majorOnly) throws IOException {
  createKdTree(placenames,majorOnly);
}

protected String patchName(String qname){
  final int lastColon=qname.lastIndexOf(':');
  if (lastColon > 0) {
    final int firstColon=qname.indexOf(':');
    final String prefix=qname.substring(0,firstColon);
    final String localName=qname.substring(lastColon + 1);
    final String uri=m_prefixMap.lookupNamespace(prefix);
    if (uri != null && uri.length() == 0) {
      return localName;
    }
 else     if (firstColon != lastColon) {
      return prefix + ':' + localName;
    }
  }
  return qname;
}

public static String fromTag(ListTag<Tag> tag){
  StringBuilder builder=new StringBuilder();
  builder.append(ARRAY_START);
  boolean start=true;
  for (  Tag value : tag.getValue()) {
    if (start) {
      start=false;
    }
 else {
      builder.append(ELEMENT_SEPERATOR);
    }
    builder.append(fromGenericTag(value));
  }
  builder.append(ARRAY_END);
  return builder.toString();
}

private XMLElement2 createAnotherElement(){
  return new XMLElement2(this.entities,this.ignoreWhitespace,false,this.ignoreCase);
}

public synchronized void reset(){
  labels.clear();
  labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);
  labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);
  for (int i=0; i < this.counters.length; i++) {
    if (null == this.counters[i]) {
      continue;
    }
    labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(i));
    Sensision.clear(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET,labels);
    this.counters[i]=null;
  }
}

public Vector rotateInRadian(double radians){
  final double length=length();
  double angle=angleInRadian();
  angle+=radians;
  final Vector result=new Vector(Math.cos(angle),Math.sin(angle));
  return result.multiply(length);
}

public void connectionLost(java.lang.Throwable cause){
  int rc=-1;
  led.setAmber();
  led.setFlash();
  setTitleText("Connection Lost!....Reconnecting");
synchronized (this) {
    writeLogln("MQTT Connection Lost!....Reconnecting to " + mqtt.getServerURI());
  }
  try {
    while ((rc == -1) && connected) {
      try {
synchronized (connLostWait) {
          connLostWait.wait(10000);
        }
      }
 catch (      InterruptedException iex) {
      }
synchronized (this) {
        if (connected) {
          writeLog("MQTT reconnecting......");
          try {
            connect(mqtt.getServerURI(),optionsComp.isPersistenceSelected());
            rc=0;
          }
 catch (          MqttException mqte) {
            rc=-1;
          }
          if (rc == -1) {
            writeLogln("failed");
          }
 else {
            writeLogln("success !");
          }
        }
      }
    }
    setTitleText("");
  }
 catch (  Exception ex) {
    setTitleText("MQTT connection broken !");
    ex.printStackTrace();
    disconnect();
  }
 finally {
    if (led.isFlashing()) {
      led.setFlash();
    }
  }
  if (connected) {
    led.setGreen();
    setConnected(true);
  }
 else {
    led.setRed();
    setConnected(false);
  }
}

private Rect calcBounds(int index,Paint paint){
  Rect bounds=new Rect();
  CharSequence title=getTitle(index);
  bounds.right=(int)paint.measureText(title,0,title.length());
  bounds.bottom=(int)(paint.descent() - paint.ascent());
  return bounds;
}

public String headerOut(String name){
  ArrayList<String> keys=_headerKeysOut;
  int headerSize=keys.size();
  for (int i=0; i < headerSize; i++) {
    String oldKey=keys.get(i);
    if (oldKey.equalsIgnoreCase(name)) {
      return (String)_headerValuesOut.get(i);
    }
  }
  if (name.equalsIgnoreCase("content-length")) {
    return _contentLengthOut >= 0 ? String.valueOf(_contentLengthOut) : null;
  }
  if (name.equalsIgnoreCase("content-type")) {
    return _contentTypeOut;
  }
  return null;
}

private static Map<String,Set<String>> parseSparseFields(MultivaluedMap<String,String> queryParams){
  Map<String,Set<String>> result=new HashMap<>();
  for (  Map.Entry<String,List<String>> kv : queryParams.entrySet()) {
    String key=kv.getKey();
    if (key.startsWith("fields[") && key.endsWith("]")) {
      String type=key.substring(7,key.length() - 1);
      LinkedHashSet<String> filters=new LinkedHashSet<>();
      for (      String filterParams : kv.getValue()) {
        Collections.addAll(filters,filterParams.split(","));
      }
      if (!filters.isEmpty()) {
        result.put(type,filters);
      }
    }
  }
  return result;
}

public Element signWithWSSSAMLTokenProfile(Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,List ids) throws XMLSignatureException {
  return signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,SOAPBindingConstants.WSF_10_VERSION);
}

@Override public void stateChanged(ChangeEvent e){
  updateFrameTitle();
  updateMenu();
  if (e.getSource() instanceof JComponent) {
    setTabTitle((JComponent)e.getSource());
  }
}

@Override public void addURL(URL url,boolean isScanned){
  if (containsURL(url)) {
    return;
  }
  super.addURL(url,isScanned);
  if (isScanned)   _pendingScanRoots.add(new ScanRoot(url,null));
}

public void add(final int start,final int end,final byte status){
  final int s=start - mStart;
  if (s < mInterval.length && end > mStart) {
    Arrays.fill(mInterval,Math.max(s,0),Math.min(end - mStart,mInterval.length),status);
  }
}

public void reset(){
  alpha=initAlpha;
  neighborhoodSize=initNeighborhoodSize;
}

private void reload(){
  Document doc=textPane.getDocument();
  doc.putProperty(Document.StreamDescriptionProperty,null);
  reference=currentReference;
  loadPage(currentPage);
}

protected void drawHexagon(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow,String direction){
  Polygon hexagon=new Polygon();
  if (direction.equals(mxConstants.DIRECTION_NORTH) || direction.equals(mxConstants.DIRECTION_SOUTH)) {
    hexagon.addPoint(x + (int)(0.5 * w),y);
    hexagon.addPoint(x + w,y + (int)(0.25 * h));
    hexagon.addPoint(x + w,y + (int)(0.75 * h));
    hexagon.addPoint(x + (int)(0.5 * w),y + h);
    hexagon.addPoint(x,y + (int)(0.75 * h));
    hexagon.addPoint(x,y + (int)(0.25 * h));
  }
 else {
    hexagon.addPoint(x + (int)(0.25 * w),y);
    hexagon.addPoint(x + (int)(0.75 * w),y);
    hexagon.addPoint(x + w,y + (int)(0.5 * h));
    hexagon.addPoint(x + (int)(0.75 * w),y + h);
    hexagon.addPoint(x + (int)(0.25 * w),y + h);
    hexagon.addPoint(x,y + (int)(0.5 * h));
  }
  drawPolygon(hexagon,fillColor,fillPaint,penColor,shadow);
}

private boolean isStatic(Field field){
  int modifier=field.getModifiers();
  if (Modifier.isStatic(modifier)) {
    return true;
  }
  return false;
}

public int outstandingRequests(){
  return outstanding.get();
}

final public static String toString(final byte[] key,final int off,final int len){
  if (key == null)   return NULL;
  final StringBuilder sb=new StringBuilder(len * 4 + 2);
  sb.append("[");
  for (int i=off; i < off + len; i++) {
    if (i > 0)     sb.append(",");
    sb.append(Integer.toString(key[i] & 0xff));
  }
  sb.append("]");
  return sb.toString();
}

public void init(String componentName) throws LogException {
  accessLogger=Logger.getLogger(componentName + ".access");
  errorLogger=Logger.getLogger(componentName + ".error");
}

private View fillLeft(int pos,int nextRight){
  if (DEBUG)   Log.i(TAG,"fillLeft() pos: " + pos + " nextRight: "+ nextRight+ M_FIRST_POSITION+ mFirstPosition);
  View selectedView=null;
  final int end=mListPadding.left;
  while (nextRight > end && pos >= 0) {
    View temp=makeColumn(pos,nextRight,false);
    if (temp != null) {
      selectedView=temp;
    }
    nextRight=mReferenceView.getLeft() - mHorizontalSpacing;
    mFirstPosition=pos;
    pos-=mNumRows;
  }
  if (mStackFromBottom) {
    mFirstPosition=Math.max(0,pos + 1);
  }
  return selectedView;
}

public void removeDefaultValue(String value) throws SMSException, SSOException {
  Set defaultValues=getDefaultValues();
  if (defaultValues != Collections.EMPTY_SET) {
    defaultValues.remove(value);
    updateDefaultValues(defaultValues);
  }
}

public static int keyBindingDescriptionToKeyCode(String keyBindingDescription){
  if (StringUtils.isBlank(keyBindingDescription)) {
    return 0;
  }
 else   if (keyBindingDescription.equals("ESC")) {
    return SWT.ESC;
  }
 else   if (keyBindingDescription.equals("F1")) {
    return SWT.F1;
  }
 else   if (keyBindingDescription.equals("F2")) {
    return SWT.F2;
  }
 else   if (keyBindingDescription.equals("F3")) {
    return SWT.F3;
  }
 else   if (keyBindingDescription.equals("F4")) {
    return SWT.F4;
  }
 else   if (keyBindingDescription.equals("F5")) {
    return SWT.F5;
  }
 else   if (keyBindingDescription.equals("F6")) {
    return SWT.F6;
  }
 else   if (keyBindingDescription.equals("F7")) {
    return SWT.F7;
  }
 else   if (keyBindingDescription.equals("F8")) {
    return SWT.F8;
  }
 else   if (keyBindingDescription.equals("F9")) {
    return SWT.F9;
  }
 else   if (keyBindingDescription.equals("F10")) {
    return SWT.F10;
  }
 else   if (keyBindingDescription.equals("F11")) {
    return SWT.F11;
  }
 else   if (keyBindingDescription.equals("F12")) {
    return SWT.F12;
  }
 else   if (keyBindingDescription.equals("SCRLOCK")) {
    return SWT.SCROLL_LOCK;
  }
 else   if (VALID_ACTION_KEY_CODES.indexOf(keyBindingDescription.charAt(keyBindingDescription.length() - 1)) != -1) {
    return keyBindingDescription.charAt(keyBindingDescription.length() - 1);
  }
 else {
    return 0;
  }
}

public void testPutCauseEviction(){
  List<String> log=new ArrayList<String>();
  LruCache<String,String> cache=newRemovalLogCache(log);
  cache.put("a","A");
  cache.put("b","B");
  cache.put("c","C");
  cache.put("b","B2");
  assertEquals(Arrays.asList("b=B>B2"),log);
  assertSnapshot(cache,"a","A","c","C","b","B2");
}

protected Signature mergeSignatures(Signature first,Signature second,int numBins){
  int d2=-1;
  for (int i=0; i < second.spec.length; i+=2) {
    if (second.spec[i] >= 0) {
      assert (d2 == -1) : "Merging with non-1-signature?!?";
      d2=i;
    }
  }
  assert (d2 >= 0) : "Merging with empty signature?";
  if (first.spec[d2] >= 0) {
    return null;
  }
  final ModifiableDBIDs intersection=DBIDUtil.intersection(first.ids,second.ids);
  final int support=intersection.size();
  double width=(second.spec[d2 + 1] - second.spec[d2] + 1.) / (double)numBins;
  double expect=first.ids.size() * width;
  if (support <= expect || support < minClusterSize) {
    return null;
  }
  final double test=PoissonDistribution.rawProbability(support,expect);
  if ((poissonThreshold) <= test) {
    return null;
  }
  int[] spec=first.spec.clone();
  spec[d2]=second.spec[d2];
  spec[d2 + 1]=second.spec[d2];
  final Signature newsig=new Signature(spec,intersection);
  if (LOG.isDebugging()) {
    LOG.debug(newsig.toString());
  }
  return newsig;
}

@Override public int hashCode(){
  return super.hashCode();
}

public IgniteDeploymentException(Throwable cause){
  this(cause.getMessage(),cause);
}

public synchronized boolean enter(CnATreeElement obj) throws TransactionAbortedException {
  if (aborted) {
    throw new TransactionAbortedException();
  }
  visited.add(obj);
  if (this.initiator != null) {
    return false;
  }
  this.initiator=obj;
  aborted=false;
  return true;
}

public Options addOption(Option opt){
  String key=opt.getKey();
  if (opt.hasLongOpt()) {
    longOpts.put(opt.getLongOpt(),opt);
  }
  if (opt.isRequired()) {
    if (requiredOpts.contains(key)) {
      requiredOpts.remove(requiredOpts.indexOf(key));
    }
    requiredOpts.add(key);
  }
  shortOpts.put(key,opt);
  return this;
}

private void pauseForClientToJoin(){
  Wait.pause(2000);
}

public void propertyChange(PropertyChangeEvent pce){
  if (pce.getPropertyName() == MapBean.BackgroundProperty && backgroundSlave) {
    map.setBckgrnd((Paint)pce.getNewValue());
  }
}

public TransitionBuilder addFrame(int imageResource){
  mFrames.add(imageResource);
  return this;
}

public Class<?>[] scanForClasses(String location,Class<?> implementedInterface) throws Exception {
  LOG.debug("Scanning for classes at '" + location + "' (Implementing: '"+ implementedInterface.getName()+ "')");
  List<Class<?>> classes=new ArrayList<Class<?>>();
  Set<String> resourceNames=findResourceNames(location,"",".class");
  for (  String resourceName : resourceNames) {
    String className=toClassName(resourceName);
    Class<?> clazz=classLoader.loadClass(className);
    if (Modifier.isAbstract(clazz.getModifiers()) || clazz.isEnum() || clazz.isAnonymousClass()) {
      LOG.debug("Skipping non-instantiable class: " + className);
      continue;
    }
    if (!implementedInterface.isAssignableFrom(clazz)) {
      continue;
    }
    try {
      ClassUtils.instantiate(className,classLoader);
    }
 catch (    Exception e) {
      throw new CassandraMigrationException("Unable to instantiate class: " + className,e);
    }
    classes.add(clazz);
    LOG.debug("Found class: " + className);
  }
  return classes.toArray(new Class<?>[classes.size()]);
}

public String nextCDATA() throws JSONException {
  char c;
  int i;
  StringBuffer sb=new StringBuffer();
  for (; ; ) {
    c=next();
    if (end()) {
      throw syntaxError("Unclosed CDATA");
    }
    sb.append(c);
    i=sb.length() - 3;
    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {
      sb.setLength(i);
      return sb.toString();
    }
  }
}

private static boolean needsSkylightUpdate(FastCubeBlockAccess access,MutableBlockPos pos){
  if (access.getBlockLightOpacity(pos) >= 15) {
    return false;
  }
  int computedLight=access.computeLightValue(pos);
  for (  EnumFacing facing : EnumFacing.values()) {
    pos.move(facing);
    int currentLight=access.getLightFor(EnumSkyBlock.SKY,pos);
    int currentOpacity=Math.max(1,access.getBlockLightOpacity(pos));
    pos.move(facing.getOpposite());
    if (computedLight == currentLight - currentOpacity) {
      return true;
    }
  }
  return false;
}

public static void expand(Rectangle2D r,double amount){
  r.setRect(r.getX() - amount,r.getY() - amount,r.getWidth() + 2 * amount,r.getHeight() + 2 * amount);
}

static void stringToPacket(String s,DatagramPacket packet){
  byte[] bytes=s.getBytes();
  System.arraycopy(bytes,0,packet.getData(),0,bytes.length);
  packet.setLength(bytes.length);
}

@Override public String toString(){
  StringBuffer buffer=new StringBuffer("CellConstraints");
  buffer.append("[x=");
  buffer.append(gridX);
  buffer.append("; y=");
  buffer.append(gridY);
  buffer.append("; w=");
  buffer.append(gridWidth);
  buffer.append("; h=");
  buffer.append(gridHeight);
  buffer.append("; hAlign=");
  buffer.append(hAlign);
  buffer.append("; vAlign=");
  buffer.append(vAlign);
  if (!EMPTY_INSETS.equals(insets)) {
    buffer.append("; insets=");
    buffer.append(insets);
  }
  buffer.append("; honorsVisibility=");
  buffer.append(honorsVisibility);
  buffer.append(']');
  return buffer.toString();
}

private ArrayList<PROCLUSCluster> assignPoints(ArrayDBIDs m_current,long[][] dimensions,Relation<V> database){
  ModifiableDBIDs[] clusterIDs=new ModifiableDBIDs[dimensions.length];
  for (int i=0; i < m_current.size(); i++) {
    clusterIDs[i]=DBIDUtil.newHashSet();
  }
  DBIDArrayIter m_i=m_current.iter();
  for (DBIDIter it=database.iterDBIDs(); it.valid(); it.advance()) {
    V p=database.get(it);
    double minDist=Double.NaN;
    int best=-1, i=0;
    for (m_i.seek(0); m_i.valid(); m_i.advance(), i++) {
      V m=database.get(m_i);
      double currentDist=manhattanSegmentalDistance(p,m,dimensions[i]);
      if (!(minDist <= currentDist)) {
        minDist=currentDist;
        best=i;
      }
    }
    assert best >= 0;
    ModifiableDBIDs ids=clusterIDs[best];
    ids.add(it);
  }
  ArrayList<PROCLUSCluster> clusters=new ArrayList<>(m_current.size());
  for (int i=0; i < dimensions.length; i++) {
    ModifiableDBIDs objectIDs=clusterIDs[i];
    if (!objectIDs.isEmpty()) {
      long[] clusterDimensions=dimensions[i];
      double[] centroid=Centroid.make(database,objectIDs).getArrayRef();
      clusters.add(new PROCLUSCluster(objectIDs,clusterDimensions,centroid));
    }
 else {
      clusters.add(null);
    }
  }
  if (LOG.isDebugging()) {
    StringBuilder msg=new StringBuilder();
    msg.append('\n');
    msg.append("clusters ").append(clusters).append('\n');
    LOG.debugFine(msg.toString());
  }
  return clusters;
}

public double slideSubtree(MutableTree tree){
  double logHastingsRatio;
  NodeRef i, newParent, newChild;
  do {
    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));
  }
 while (tree.getRoot() == i);
  NodeRef iP=tree.getParent(i);
  NodeRef CiP=getOtherChild(tree,iP,i);
  NodeRef PiP=tree.getParent(iP);
  double delta=getDelta();
  double oldHeight=tree.getNodeHeight(iP);
  double newHeight=oldHeight + delta;
  if (delta > 0) {
    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {
      newParent=PiP;
      newChild=iP;
      while (tree.getNodeHeight(newParent) < newHeight) {
        newChild=newParent;
        newParent=tree.getParent(newParent);
        if (newParent == null)         break;
      }
      tree.beginTreeEdit();
      if (tree.isRoot(newChild)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.setRoot(iP);
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);
      logHastingsRatio=Math.log(1.0 / (double)possibleSources);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logHastingsRatio=0.0;
    }
  }
 else {
    if (tree.getNodeHeight(i) > newHeight) {
      return Double.NEGATIVE_INFINITY;
    }
    if (tree.getNodeHeight(CiP) > newHeight) {
      ArrayList newChildren=new ArrayList();
      int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);
      if (newChildren.size() == 0) {
        return Double.NEGATIVE_INFINITY;
      }
      int childIndex=MathUtils.nextInt(newChildren.size());
      newChild=(NodeRef)newChildren.get(childIndex);
      newParent=tree.getParent(newChild);
      tree.beginTreeEdit();
      if (tree.isRoot(iP)) {
        tree.removeChild(iP,CiP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(newParent,iP);
        tree.setRoot(CiP);
      }
 else {
        tree.removeChild(iP,CiP);
        tree.removeChild(PiP,iP);
        tree.removeChild(newParent,newChild);
        tree.addChild(iP,newChild);
        tree.addChild(PiP,CiP);
        tree.addChild(newParent,iP);
      }
      tree.setNodeHeight(iP,newHeight);
      tree.endTreeEdit();
      logHastingsRatio=Math.log((double)possibleDestinations);
    }
 else {
      tree.setNodeHeight(iP,newHeight);
      logHastingsRatio=0.0;
    }
  }
  return logHastingsRatio;
}

public boolean isInitialized(){
  return _initialized;
}

public boolean removeShutdownHook(Thread hook){
  if (hook == null) {
    throw new NullPointerException("hook == null");
  }
  if (shuttingDown) {
    throw new IllegalStateException("VM already shutting down");
  }
synchronized (shutdownHooks) {
    return shutdownHooks.remove(hook);
  }
}

private ResultPointsAndTransitions transitionsBetween(ResultPoint from,ResultPoint to){
  int fromX=(int)from.getX();
  int fromY=(int)from.getY();
  int toX=(int)to.getX();
  int toY=(int)to.getY();
  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);
  if (steep) {
    int temp=fromX;
    fromX=fromY;
    fromY=temp;
    temp=toX;
    toX=toY;
    toY=temp;
  }
  int dx=Math.abs(toX - fromX);
  int dy=Math.abs(toY - fromY);
  int error=-dx / 2;
  int ystep=fromY < toY ? 1 : -1;
  int xstep=fromX < toX ? 1 : -1;
  int transitions=0;
  boolean inBlack=image.get(steep ? fromY : fromX,steep ? fromX : fromY);
  for (int x=fromX, y=fromY; x != toX; x+=xstep) {
    boolean isBlack=image.get(steep ? y : x,steep ? x : y);
    if (isBlack != inBlack) {
      transitions++;
      inBlack=isBlack;
    }
    error+=dy;
    if (error > 0) {
      if (y == toY) {
        break;
      }
      y+=ystep;
      error-=dx;
    }
  }
  return new ResultPointsAndTransitions(from,to,transitions);
}

public String toString(){
  return Double.toString(get());
}

boolean checkCameraSize(CameraOptions cameraId){
  boolean sizeAvailable=false;
  Camera camera=null;
  Method method=getCameraOpenMethod();
  if (method != null) {
    try {
      camera=(Camera)method.invoke(camera,new Object[]{cameraId.getValue()});
    }
 catch (    Exception e) {
      camera=Camera.open();
    }
  }
 else {
    camera=Camera.open();
  }
  if (camera == null) {
    return false;
  }
  Parameters param=camera.getParameters();
  List<Camera.Size> sizes=param.getSupportedPreviewSizes();
  for (  Camera.Size size : sizes) {
    if ((size.width == H264Config.QVGA_WIDTH && size.height == H264Config.QVGA_HEIGHT) || (size.width == H264Config.CIF_WIDTH && size.height == H264Config.CIF_HEIGHT) || (size.width == H264Config.VGA_WIDTH && size.height == H264Config.VGA_HEIGHT)) {
      sizeAvailable=true;
      break;
    }
  }
  camera.release();
  return sizeAvailable;
}

ConfigurationError(String msg,Exception x){
  super(msg);
  this.exception=x;
}

public void append(final String s){
  if (first) {
    first=false;
  }
 else {
    builder.append(space);
  }
  builder.append(s);
}

public static ByteArrayOutputStream encode(String plaintext) throws IOException, MessagingException {
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  byte[] in=plaintext.getBytes();
  ByteArrayOutputStream inStream=new ByteArrayOutputStream();
  inStream.write(in,0,in.length);
  if ((in.length % 3) == 1) {
    inStream.write(0);
    inStream.write(0);
  }
 else   if ((in.length % 3) == 2) {
    inStream.write(0);
  }
  inStream.writeTo(MimeUtility.encode(out,"base64"));
  return out;
}

public LookupListTable lookupList(){
  if (lookupListTable.get() == null) {
    lookupListTable.compareAndSet(null,gsub.createLookupList());
  }
  return lookupListTable.get();
}

public long sum(){
  return deltaSum.get();
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

private static boolean isWordBoundary(CharSequence singleChar,String wordSeparators){
  return TextUtils.isEmpty(singleChar) || wordSeparators.contains(singleChar);
}

public void executeBlocking(String desc,BlockingConsumer<MongoClient> operation) throws InterruptedException {
  while (true) {
    MongoClient primary=primaryConnectionSupplier.get();
    try {
      operation.accept(primary);
      return;
    }
 catch (    Throwable t) {
      errorHandler.accept(desc,t);
    }
  }
}

public void write(char[] cbuf) throws java.io.IOException {
  write(cbuf,0,cbuf.length);
}

protected TableViewer createTable(Composite parent,int span){
  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);
  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);
  data.horizontalSpan=span;
  table.setLayoutData(data);
  TableLayout layout=new TableLayout();
  layout.addColumnData(new ColumnWeightData(100,true));
  table.setLayout(layout);
  TableColumn col=new TableColumn(table,SWT.NONE);
  col.setResizable(true);
  return new TableViewer(table);
}

public String typeAsString(){
  String typeStr="?";
  String subtypeStr="?";
switch (this.type) {
case ETYPE_CONTROL:
    typeStr=" control/";
switch (this.subtype) {
case ESTYPE_HEADER:
    subtypeStr="header";
  break;
case ESTYPE_FOOTER:
subtypeStr="footer";
break;
}
break;
case ETYPE_TRANSACTIONS:
typeStr=" transaction/";
switch (this.subtype) {
case ESTYPE_TRAN_START:
subtypeStr="start";
break;
case ESTYPE_TRAN_COMMIT:
subtypeStr="commit";
break;
case ESTYPE_TRAN_ROLLBACK:
subtypeStr="rollback";
break;
case ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT:
subtypeStr="rollback_to_savepoint";
break;
case ESTYPE_TRAN_AUDIT:
subtypeStr="audit";
break;
}
break;
case ETYPE_LCR_DATA:
typeStr=" LCR data/";
switch (this.subtype) {
case ESTYPE_LCR_INSERT:
subtypeStr="insert";
break;
case ESTYPE_LCR_DELETE:
subtypeStr="delete";
break;
case ESTYPE_LCR_UPDATE:
subtypeStr="update";
break;
case ESTYPE_LCR_LOB_WRITE:
subtypeStr="LOB write";
break;
case ESTYPE_LCR_LOB_TRIM:
subtypeStr="LOB trim";
break;
case ESTYPE_LCR_LOB_ERASE:
subtypeStr="LOB erase";
break;
case ESTYPE_LCR_DDL:
subtypeStr="DDL";
break;
}
break;
case ETYPE_LCR_PLOG:
typeStr=" LCR plog/";
switch (this.subtype) {
case ESTYPE_LCR_PLOG_IFILE:
subtypeStr="include plog file";
break;
case ESTYPE_LCR_PLOG_IFILE_STATS:
subtypeStr="include plog file - rowcount";
break;
}
break;
default :
typeStr=" ?" + this.type + "/";
subtypeStr="?" + this.subtype;
}
return typeStr + subtypeStr;
}

public void lineTo(float x,float y){
  mPoints.add(PathPoint.lineTo(x,y));
}

public void flagActionItems(){
  if (!mIsActionItemsStale) {
    return;
  }
  boolean flagged=false;
  for (  WeakReference<MenuPresenter> ref : mPresenters) {
    final MenuPresenter presenter=ref.get();
    if (presenter == null) {
      mPresenters.remove(ref);
    }
 else {
      flagged|=presenter.flagActionItems();
    }
  }
  if (flagged) {
    mActionItems.clear();
    mNonActionItems.clear();
    ArrayList<MenuItemImpl> visibleItems=getVisibleItems();
    final int itemsSize=visibleItems.size();
    for (int i=0; i < itemsSize; i++) {
      MenuItemImpl item=visibleItems.get(i);
      if (item.isActionButton()) {
        mActionItems.add(item);
      }
 else {
        mNonActionItems.add(item);
      }
    }
  }
 else {
    mActionItems.clear();
    mNonActionItems.clear();
    mNonActionItems.addAll(getVisibleItems());
  }
  mIsActionItemsStale=false;
}

protected boolean[] canHandleMissing(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing,int missingLevel){
  if (missingLevel == 100) {
    print("100% ");
  }
  print("missing");
  if (predictorMissing) {
    print(" predictor");
    if (classMissing) {
      print(" and");
    }
  }
  if (classMissing) {
    print(" class");
  }
  print(" values");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  ArrayList<String> accepts=new ArrayList<String>();
  accepts.add("missing");
  accepts.add("value");
  accepts.add("train");
  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2;
  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,numClasses,accepts);
}

private void disableButtons(){
  for (  DeployCommand cmd : DeployCommand.values()) {
    setButtonEnabled(cmd,false);
  }
  butDone.setEnabled(false);
  setLoadEnabled(false);
  setUnloadEnabled(false);
  setAssaultDropEnabled(false);
}

public Artifact load(File path) throws IOException {
  return load(new ArtifactName(path.getName()),path);
}

protected final boolean tryAcquire(int acquires){
  final Thread current=Thread.currentThread();
  int c=getState();
  if (c == 0) {
    if (!hasQueuedPredecessors() && compareAndSetState(0,acquires)) {
      setExclusiveOwnerThread(current);
      return true;
    }
  }
 else   if (current == getExclusiveOwnerThread()) {
    int nextc=c + acquires;
    if (nextc < 0)     throw new Error("Maximum lock count exceeded");
    setState(nextc);
    return true;
  }
  return false;
}

private static final boolean isHeaderEnd(StringBuilder sb){
  int len=sb.length();
  if (len > 2) {
    if (LF2.equals(sb.substring(len - 2))) {
      return true;
    }
  }
  if (len > 4) {
    if (CRLF2.equals(sb.substring(len - 4))) {
      return true;
    }
  }
  return false;
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> result=new Vector<Option>();
  result.addElement(new Option("\tSQL query to execute.","Q",1,"-Q <query>"));
  result.addElement(new Option("\tReturn sparse rather than normal instances.","S",0,"-S"));
  result.addElement(new Option("\tThe username to use for connecting.","U",1,"-U <username>"));
  result.addElement(new Option("\tThe password to use for connecting.","P",1,"-P <password>"));
  result.add(new Option("\tThe custom properties file to use instead of default ones,\n" + "\tcontaining the database parameters.\n" + "\t(default: none)","custom-props",1,"-custom-props <file>"));
  result.addElement(new Option("\tEnables debug output.","D",0,"-D"));
  return result.elements();
}

public TSActionDelay(TransitSectionAction tsa,int delay){
  _tsa=tsa;
  _delay=delay;
}

public DAddExtensions(JDialog parent,X509ExtensionSet extensions,PublicKey authorityPublicKey,X500Name authorityCertName,BigInteger authorityCertSerialNumber,PublicKey subjectPublicKey){
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  setTitle(res.getString("DAddExtensions.Title"));
  this.extensions=(X509ExtensionSet)extensions.clone();
  this.authorityPublicKey=authorityPublicKey;
  this.authorityCertName=authorityCertName;
  this.authorityCertSerialNumber=authorityCertSerialNumber;
  this.subjectPublicKey=subjectPublicKey;
  initComponents();
}

public void add(IMultiPoint pt){
  if (inProgress) {
    throw new ConcurrentModificationException("Can't add point while iterator in progress");
  }
  points.add(pt);
}

public static boolean isCglibProxyClass(Class<?> clazz){
  return (clazz != null && isCglibProxyClassName(clazz.getName()));
}

private DiscoveryInformation verifyDiscovered(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException {
  if (authResp == null || authResp.getIdentity() == null) {
    _log.info("Assertion is not about an identifier");
    return null;
  }
  if (authResp.isVersion2())   return verifyDiscovered2(authResp,discovered);
 else   return verifyDiscovered1(authResp,discovered);
}

public boolean generate(ReportDescription description,Date date){
  try {
    Integer targetDateInt=Integer.parseInt(format.format(date));
    AnalysisResultSet logAggregation=makeLogAnal(description,targetDateInt);
    Report report=new Report();
    report.setSendTime(new Date());
    report.setTargetDate(date);
    report.setLogReport(logAggregation);
    report.setTargets(description.getTargets());
    logger.debug("generated > " + report);
    reportRepository.save(report);
    return true;
  }
 catch (  Exception e) {
    logger.error(e.getMessage(),e);
    return false;
  }
}

@Override public void updateTextViews(Recharge recharge){
  unitTypeTextView.setText(recharge.getUnits());
  unitValueTextView.setText(String.valueOf(recharge.getCurrentAmount()));
  costTextView.setText(Currency.localize(recharge.getCurrentCost(),true));
  rechargeName.setText(recharge.getTitle());
  confirmationTextView.setText("Add " + recharge.getCurrentAmount() + " extra "+ recharge.getUnits()+ " for the month?");
  if (recharge.getCurrentAmount() == recharge.getInitialAmount()) {
    downArrow.setVisibility(View.INVISIBLE);
  }
 else {
    downArrow.setVisibility(View.VISIBLE);
  }
}

private ConcurrentMap<GridCacheVersion,IgniteInternalTx> transactionMap(IgniteInternalTx tx){
  return (tx.near() && !tx.local()) ? nearIdMap : idMap;
}

public void stop(){
synchronized (this) {
    mStopped=true;
    if (mListenerThread == null) {
      return;
    }
  }
  mListenerThread.interrupt();
  try {
    if (mServerSocket != null) {
      mServerSocket.close();
    }
  }
 catch (  IOException e) {
  }
}

public static byte[] decode(byte[] data,String pri_key){
  try {
    Cipher cipher=Cipher.getInstance("RSA/ECB/PKCS1Padding");
    java.security.Key k=getPrivateKey(pri_key);
    cipher.init(Cipher.DECRYPT_MODE,k);
    byte[] deBytes=cipher.doFinal(data);
    return deBytes;
  }
 catch (  Exception e) {
    log.error(pri_key,e);
  }
  return null;
}

public static int deriveARGB(Color color1,Color color2,float midPoint){
  int r=color1.getRed() + (int)((color2.getRed() - color1.getRed()) * midPoint + 0.5f);
  int g=color1.getGreen() + (int)((color2.getGreen() - color1.getGreen()) * midPoint + 0.5f);
  int b=color1.getBlue() + (int)((color2.getBlue() - color1.getBlue()) * midPoint + 0.5f);
  int a=color1.getAlpha() + (int)((color2.getAlpha() - color1.getAlpha()) * midPoint + 0.5f);
  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| (b & 0xFF);
}

public void addLandingPad(int x,int z){
  BlockPosition pos=new BlockPosition(x,0,z);
  if (!spawnLocations.contains(pos)) {
    spawnLocations.add(pos);
    occupiedLandingPads.put(pos,false);
  }
}

static AttackStrategy create(String params){
  String[] arg=params.split(",",-1);
  if (arg.length != 3) {
    throw new IllegalArgumentException("Invalid compound description: '" + params + "'");
  }
  Pair<String,String> desc=parseStrategy(arg[1]);
  TargetSelectionStrategy targeter=TargetSelectionStrategyFactory.get(desc.first(),desc.second());
  desc=parseStrategy(arg[2]);
  PositioningStrategy positioner=PositioningStrategyFactory.get(desc.first(),desc.second());
  return new CompoundAttackStrategy(getSubStrategy(arg[0]),targeter,positioner);
}

public OrderedThreadPoolExecutor(){
  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,DEFAULT_MAX_THREAD_POOL,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);
}

public void addPropertyChangeListener(PropertyChangeListener pcl){
  m_pcSupport.addPropertyChangeListener(pcl);
}

final public void writeChunk(L locator,KVO<O>[] chunk) throws MockStaleLocatorException {
synchronized (this) {
    if (staleLocators.contains(locator.getPartitionId())) {
      throw new MockStaleLocatorException(locator);
    }
    if (!knownLocators.contains(locator.getPartitionId())) {
      throw new RuntimeException("Locator not registered on DS: " + locator);
    }
  }
  acceptWrite(locator,chunk);
}

public Event event(int id){
  if (!host) {
    return (Event)events.get(new Integer(id));
  }
  return null;
}

private void initValues(){
  IPreferenceStore store=doGetPreferenceStore();
  final String storedItems=store.getString(CheckerPreferences.PREF_CHECKER_CUSTOM_CLASSES);
  if (!storedItems.equals("")) {
    customCheckers.setItems(storedItems.split(","));
  }
}

private void loadProperties(){
  String property=System.getProperty("carbon.properties.filepath");
  if (null == property) {
    property=CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH;
  }
  File file=new File(property);
  LOGGER.info("Property file path: " + file.getAbsolutePath());
  FileInputStream fis=null;
  try {
    if (file.exists()) {
      fis=new FileInputStream(file);
      carbonProperties.load(fis);
    }
  }
 catch (  FileNotFoundException e) {
    LOGGER.error("The file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH + " does not exist");
  }
catch (  IOException e) {
    LOGGER.error("Error while reading the file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);
  }
 finally {
    if (null != fis) {
      try {
        fis.close();
      }
 catch (      IOException e) {
        LOGGER.error("Error while closing the file stream for file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);
      }
    }
  }
  print();
}

void sync(int sourceRepoIndex,int destRepoIndex,AuthenticationInfo subject) throws IOException {
  LOG.info("Sync started");
  NotebookAuthorization auth=NotebookAuthorization.getInstance();
  NotebookRepo srcRepo=getRepo(sourceRepoIndex);
  NotebookRepo dstRepo=getRepo(destRepoIndex);
  List<NoteInfo> allSrcNotes=srcRepo.list(subject);
  List<NoteInfo> srcNotes=auth.filterByUser(allSrcNotes,subject);
  List<NoteInfo> dstNotes=dstRepo.list(subject);
  Map<String,List<String>> noteIds=notesCheckDiff(srcNotes,srcRepo,dstNotes,dstRepo,subject);
  List<String> pushNoteIds=noteIds.get(pushKey);
  List<String> pullNoteIds=noteIds.get(pullKey);
  List<String> delDstNoteIds=noteIds.get(delDstKey);
  if (!pushNoteIds.isEmpty()) {
    LOG.info("Notes with the following IDs will be pushed");
    for (    String id : pushNoteIds) {
      LOG.info("ID : " + id);
    }
    pushNotes(subject,pushNoteIds,srcRepo,dstRepo,false);
  }
 else {
    LOG.info("Nothing to push");
  }
  if (!pullNoteIds.isEmpty()) {
    LOG.info("Notes with the following IDs will be pulled");
    for (    String id : pullNoteIds) {
      LOG.info("ID : " + id);
    }
    pushNotes(subject,pullNoteIds,dstRepo,srcRepo,true);
  }
 else {
    LOG.info("Nothing to pull");
  }
  if (!delDstNoteIds.isEmpty()) {
    LOG.info("Notes with the following IDs will be deleted from dest");
    for (    String id : delDstNoteIds) {
      LOG.info("ID : " + id);
    }
    deleteNotes(subject,delDstNoteIds,dstRepo);
  }
 else {
    LOG.info("Nothing to delete from dest");
  }
  LOG.info("Sync ended");
}

public void list(PrintStream out){
  out.println("-- listing properties --");
  Hashtable<String,Object> h=new Hashtable<>();
  enumerate(h);
  for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) {
    String key=e.nextElement();
    String val=(String)h.get(key);
    if (val.length() > 40) {
      val=val.substring(0,37) + "...";
    }
    out.println(key + "=" + val);
  }
}

public static Date stringToDate(String strdate,@SuppressWarnings("SameParameterValue") String format){
  Date date=null;
  SimpleDateFormat formatter=new SimpleDateFormat(format);
  try {
    date=formatter.parse(strdate);
  }
 catch (  ParseException e) {
    e.printStackTrace();
  }
  return date;
}

@Nullable public static String md5(@Nullable File file,@Nullable IgniteLogger log){
  if (file != null)   return file.isFile() ? fileMd5(file,log) : directoryMd5(file,log);
  return null;
}

public void init(int size,int certainty,SecureRandom random){
  this.size=size;
  this.certainty=certainty;
  this.random=random;
}

@Override public boolean hasNext(){
  if (allRowsResult.size() == 0) {
    return false;
  }
  totalRecordCounter++;
  listRecordCounter++;
  if (listRecordCounter == 0 || (listRecordCounter >= currentRowPointer.size() && currentListCounter < allRowsResult.size())) {
    listRecordCounter=0;
    currentRowPointer=allRowsResult.get(currentListCounter);
    currentListCounter++;
  }
  return totalRecordCounter < totalNumberOfRecords;
}

public void trimToSize(){
  delegate.trimToSize();
}

JSONStringer open(Scope empty,String openBracket) throws JSONException {
  if (stack.isEmpty() && out.length() > 0) {
    throw new JSONException("Nesting problem: multiple top-level roots");
  }
  beforeValue();
  stack.add(empty);
  out.append(openBracket);
  return this;
}

public static final String asciiBoard(Position pos){
  StringBuilder ret=new StringBuilder(400);
  String nl=String.format(Locale.US,"%n");
  ret.append("    +----+----+----+----+----+----+----+----+");
  ret.append(nl);
  for (int y=7; y >= 0; y--) {
    ret.append("    |");
    for (int x=0; x < 8; x++) {
      ret.append(' ');
      int p=pos.getPiece(Position.getSquare(x,y));
      if (p == Piece.EMPTY) {
        boolean dark=Position.darkSquare(x,y);
        ret.append(dark ? ".. |" : "   |");
      }
 else {
        ret.append(Piece.isWhite(p) ? ' ' : '*');
        String pieceName=pieceToChar(p);
        if (pieceName.length() == 0)         pieceName="P";
        ret.append(pieceName);
        ret.append(" |");
      }
    }
    ret.append(nl);
    ret.append("    +----+----+----+----+----+----+----+----+");
    ret.append(nl);
  }
  return ret.toString();
}

public final void clear(){
  caches.clear();
  sections.clear();
}

static Set<Node> toNodeSet(Iterator<Node> i){
  Set<Node> nodeSet=new HashSet<Node>();
  while (i.hasNext()) {
    Node n=i.next();
    nodeSet.add(n);
    if (n.getNodeType() == Node.ELEMENT_NODE) {
      NamedNodeMap nnm=n.getAttributes();
      for (int j=0, length=nnm.getLength(); j < length; j++) {
        nodeSet.add(nnm.item(j));
      }
    }
  }
  return nodeSet;
}

public static void runConcurrently(final Callable<Void> task,final int times) throws Exception {
  final ExecutorService service=Executors.newFixedThreadPool(5);
  final List<Future<?>> futures=new ArrayList<Future<?>>();
  for (int i=0; i < times; i++) {
    futures.add(service.submit(task));
  }
  for (  final Future<?> future : futures) {
    future.get();
  }
}

private static ArrayList<ContainerVm> createVmList(int brokerId,int containerVmsNumber){
  ArrayList<ContainerVm> containerVms=new ArrayList<ContainerVm>();
  for (int i=0; i < containerVmsNumber; ++i) {
    ArrayList<ContainerPe> peList=new ArrayList<ContainerPe>();
    int vmType=i / (int)Math.ceil((double)containerVmsNumber / 4.0D);
    for (int j=0; j < ConstantsExamples.VM_PES[vmType]; ++j) {
      peList.add(new ContainerPe(j,new CotainerPeProvisionerSimple((double)ConstantsExamples.VM_MIPS[vmType])));
    }
    containerVms.add(new PowerContainerVm(IDs.pollId(ContainerVm.class),brokerId,(double)ConstantsExamples.VM_MIPS[vmType],(float)ConstantsExamples.VM_RAM[vmType],ConstantsExamples.VM_BW,ConstantsExamples.VM_SIZE,"Xen",new ContainerSchedulerTimeSharedOverSubscription(peList),new ContainerRamProvisionerSimple(ConstantsExamples.VM_RAM[vmType]),new ContainerBwProvisionerSimple(ConstantsExamples.VM_BW),peList,ConstantsExamples.SCHEDULING_INTERVAL));
  }
  return containerVms;
}

public static void addPortUse(Map<StoragePort,Integer> portUseCounts,StoragePort port){
  if (!portUseCounts.containsKey(port)) {
    portUseCounts.put(port,1);
  }
 else {
    Integer newCount=portUseCounts.get(port) + 1;
    portUseCounts.put(port,newCount);
  }
}

public void popElemAttributeSet(){
  m_attrSetStack.pop();
}

private byte[] createPreviewBuffer(Size previewSize){
  int bitsPerPixel=ImageFormat.getBitsPerPixel(ImageFormat.NV21);
  long sizeInBits=previewSize.getHeight() * previewSize.getWidth() * bitsPerPixel;
  int bufferSize=(int)Math.ceil(sizeInBits / 8.0d) + 1;
  byte[] byteArray=new byte[bufferSize];
  ByteBuffer buffer=ByteBuffer.wrap(byteArray);
  if (!buffer.hasArray() || (buffer.array() != byteArray)) {
    throw new IllegalStateException("Failed to create valid buffer for camera source.");
  }
  mBytesToByteBuffer.put(byteArray,buffer);
  return byteArray;
}

@Override public synchronized CacheObject<V> put(K key,CacheObject<V> value){
  if (cache.size() >= maxSize) {
    if (removeExpired() <= 0) {
      if (cacheFullRemoveType instanceof RemoveTypeNotRemove) {
        return null;
      }
      if (fullRemoveOne() == null) {
        return null;
      }
    }
  }
  value.setEnterTime(System.currentTimeMillis());
  cache.put(key,value);
  return value;
}

public Criteria createCriteria(){
  Criteria criteria=createCriteriaInternal();
  if (oredCriteria.size() == 0) {
    oredCriteria.add(criteria);
  }
  return criteria;
}

public void removeModelChange(String tableName,ModelValidator listener){
  if (tableName == null || listener == null)   return;
  String propertyName=m_globalValidators.contains(listener) ? tableName + "*" : tableName + listener.getAD_Client_ID();
  ArrayList<ModelValidator> list=m_modelChangeListeners.get(propertyName);
  if (list == null)   return;
  list.remove(listener);
  if (list.size() == 0)   m_modelChangeListeners.remove(propertyName);
}

protected void fireChangeEvent(){
  Iterator iter=m_listeners.iterator();
  ChangeEvent evt=new ChangeEvent(this);
  while (iter.hasNext()) {
    ChangeListener cl=(ChangeListener)iter.next();
    cl.stateChanged(evt);
  }
}

private String createConnectionName(){
  StringBuilder nameBuffer=new StringBuilder();
  nameBuffer.append(getConnectionType());
  nameBuffer.append("-");
  nameBuffer.append(_host);
  nameBuffer.append("-");
  nameBuffer.append(_port);
  return nameBuffer.toString();
}

public Query execute(PageContext pc,SQL sql,int maxrows,int fetchsize,TimeSpan timeout) throws PageException {
  Stopwatch stopwatch=new Stopwatch(Stopwatch.UNIT_NANO);
  stopwatch.start();
  String prettySQL=null;
  Selects selects=null;
  try {
    SelectParser parser=new SelectParser();
    selects=parser.parse(sql.getSQLString());
    Query q=qoq.execute(pc,sql,selects,maxrows);
    q.setExecutionTime(stopwatch.time());
    return q;
  }
 catch (  SQLParserException spe) {
    prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());
    try {
      Query query=executer.execute(pc,sql,prettySQL,maxrows);
      query.setExecutionTime(stopwatch.time());
      return query;
    }
 catch (    PageException ex) {
    }
  }
catch (  PageException e) {
  }
  try {
    boolean isUnion=false;
    Set<String> tables=null;
    if (selects != null) {
      HSQLUtil2 hsql2=new HSQLUtil2(selects);
      isUnion=hsql2.isUnion();
      tables=hsql2.getInvokedTables();
    }
 else {
      if (prettySQL == null)       prettySQL=SQLPrettyfier.prettyfie(sql.getSQLString());
      HSQLUtil hsql=new HSQLUtil(prettySQL);
      tables=hsql.getInvokedTables();
      isUnion=hsql.isUnion();
    }
    String strSQL=StringUtil.replace(sql.getSQLString(),"[","",false);
    strSQL=StringUtil.replace(strSQL,"]","",false);
    sql.setSQLString(strSQL);
    return _execute(pc,sql,maxrows,fetchsize,timeout,stopwatch,tables,isUnion);
  }
 catch (  ParseException e) {
    throw new DatabaseException(e.getMessage(),null,sql,null);
  }
}

@POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep discoverHost(@PathParam("id") URI id){
  ArgValidator.checkFieldUriType(id,Host.class,"id");
  Host host=queryObject(Host.class,id,true);
  return doDiscoverHost(host);
}

public static final void readFully(InputStream i,byte b[],int off,int len) throws IOException {
  if (len < 0) {
    throw new IndexOutOfBoundsException();
  }
  int n=0;
  while (n < len) {
    int count=i.read(b,off + n,len - n);
    if (count < 0) {
      throw new EOFException();
    }
    n+=count;
  }
}

private void drawLines(Canvas canvas){
  for (int i=0; i < connectionOrder.size() - 1; i++) {
    drawLine(canvas,circles[connectionOrder.get(i)],circles[connectionOrder.get(i + 1)]);
  }
}

private void addOrUpdateNode(AStarNode newNode){
  boolean found=false;
  for (  AStarNode toUpdate : closedNodes) {
    if (newNode.equals(toUpdate)) {
      toUpdate.updateDistance(newNode.getG(),newNode.parent);
      found=true;
      break;
    }
  }
  if (!found) {
    openQueue.offer(newNode);
  }
}

public static File toFile(JavaFileObject javaFileObject){
  return new File(javaFileObject.getName());
}

private void signalNotEmpty(){
  final ReentrantLock takeLock=this.takeLock;
  takeLock.lock();
  try {
    notEmpty.signal();
  }
  finally {
    takeLock.unlock();
  }
}

public WritableRaster createCompatibleWritableRaster(int w,int h){
  int[] bOffs={2,1,0};
  return Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,w,h,w * 3,3,bOffs,null);
}

public static MultiSegmentPowerLawBipartiteGraph buildRandomMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int leftSize,int rightSize,double edgeProbability,Random random){
  MultiSegmentPowerLawBipartiteGraph multiSegmentPowerLawBipartiteGraph=new MultiSegmentPowerLawBipartiteGraph(maxNumSegments,maxNumEdgesPerSegment,leftSize / 2,(int)(rightSize * edgeProbability / 2),2.0,rightSize / 2,(int)(leftSize * edgeProbability / 2),2.0,new IdentityEdgeTypeMask(),new NullStatsReceiver());
  for (int i=0; i < leftSize; i++) {
    for (int j=0; j < rightSize; j++) {
      if (random.nextDouble() < edgeProbability) {
        multiSegmentPowerLawBipartiteGraph.addEdge(i,j,(byte)0);
      }
    }
  }
  return multiSegmentPowerLawBipartiteGraph;
}

public static String execute(String command){
  return SubprocessUttility.execute(command);
}

public synchronized void updateProgress(final int value){
  final Thread t=Thread.currentThread();
  final MyInteger v=mIndividualThreadProgress.get(t);
  if (v == null) {
    mIndividualThreadProgress.put(t,new MyInteger(value));
  }
 else {
    v.setValue(value);
  }
  if (value > mLastReportedProgress) {
    int min=Integer.MAX_VALUE;
    for (    final MyInteger m : mIndividualThreadProgress.values()) {
      if (m.getValue() < min) {
        min=m.getValue();
      }
    }
    if (min > mLastReportedProgress) {
      mLastReportedProgress=min;
      Diagnostic.progress("Processed " + min + "% of "+ mName);
    }
  }
}

private ContextHandler createContextHandler(String directory,boolean isInJar,File installRootDirectory,int expiresInSeconds){
  final ContextHandler contextHandler=new ContextHandler();
  final ResourceHandler resourceHandler=new ExpiresResourceHandler(expiresInSeconds);
  final String directoryWithSlash="/" + directory;
  contextHandler.setContextPath(directoryWithSlash);
  Resource directoryResource=getDirectoryResource(directory,isInJar,installRootDirectory);
  directoryResource=new JsMinifyingResource(directoryResource);
  if (isInJar) {
    directoryResource=new CachingResource(directoryResource,directoryWithSlash);
  }
  resourceHandler.setBaseResource(directoryResource);
  if (!isInJar) {
    resourceHandler.setMinMemoryMappedContentLength(0);
  }
  contextHandler.setHandler(resourceHandler);
  return contextHandler;
}

public boolean startsWith(java.lang.CharSequence prefix){
  return startsWith(prefix,0);
}

private List<ContainerInitializer> jspInitializers(){
  JettyJasperInitializer sci=new JettyJasperInitializer();
  ContainerInitializer initializer=new ContainerInitializer(sci,null);
  List<ContainerInitializer> initializers=new ArrayList<ContainerInitializer>();
  initializers.add(initializer);
  return initializers;
}

public static TempPath createDirectory() throws IOException {
  return wrap(Files.createTempDirectory(PREFIX));
}

public static String toString(int partition[][]){
  StringBuilder sb=new StringBuilder();
  sb.append("{");
  for (int i=0; i < partition.length; i++) {
    sb.append(" " + Arrays.toString(partition[i]));
  }
  sb.append(" }");
  return sb.toString();
}

public static boolean isCategoryChildOf(ServletRequest request,String parentProductCategoryId,String productCategoryId){
  return isCategoryChildOf((Delegator)request.getAttribute("delegator"),(LocalDispatcher)request.getAttribute("dispatcher"),parentProductCategoryId,productCategoryId);
}

@Override public boolean input(Instance instance){
  if (getInputFormat() == null) {
    throw new IllegalStateException("No input instance format defined");
  }
  if (m_NewBatch) {
    resetQueue();
    m_NewBatch=false;
  }
  push((Instance)instance.copy());
  return true;
}

public Collection<String> listColumns(String table) throws DatabaseException {
  Collection<String> result=new ArrayList<String>();
  ResultSet rs=null;
  try {
    DatabaseMetaData dbm=connection.getMetaData();
    rs=dbm.getColumns(null,null,table,null);
    while (rs.next()) {
      result.add(rs.getString("COLUMN_NAME"));
    }
  }
 catch (  SQLException e) {
    throw new DatabaseException(e);
  }
 finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
  }
  return result;
}

public void addCreatedResource(Location location,Resource resource){
  resourceList.add(resource);
  locationToResourceMap.put(location,resource);
}

public void signalEvent(){
  Collection<Semaphore> semaphores=_semaphores.values();
  for (  Semaphore semaphore : semaphores) {
    semaphore.release();
    semaphores.remove(semaphore);
  }
}

@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof KeyedObjects)) {
    return false;
  }
  KeyedObjects that=(KeyedObjects)obj;
  int count=getItemCount();
  if (count != that.getItemCount()) {
    return false;
  }
  for (int i=0; i < count; i++) {
    Comparable k1=getKey(i);
    Comparable k2=that.getKey(i);
    if (!k1.equals(k2)) {
      return false;
    }
    Object o1=getObject(i);
    Object o2=that.getObject(i);
    if (o1 == null) {
      if (o2 != null) {
        return false;
      }
    }
 else {
      if (!o1.equals(o2)) {
        return false;
      }
    }
  }
  return true;
}

protected boolean isQuorumMaintained(){
  if (nodeCount == 1) {
    log.info("There's no way to maintain quorum on single node deployments. Proceed anyway.");
    return true;
  }
  int quorumNodeCnt=nodeCount / 2 + 1;
  CoordinatorClient coordinatorClient=coordinator.getCoordinatorClient();
  List<Service> allActiveDbsvcs=coordinatorClient.locateAllSvcsAllVers(Constants.DBSVC_NAME);
  List<String> otherActiveDbsvcIds=new ArrayList<>();
  String mySvcId=coordinator.getMySvcId();
  String localDbSvcId="db" + mySvcId.substring(mySvcId.lastIndexOf("-"));
  for (  Service activeDbsvc : allActiveDbsvcs) {
    if (!localDbSvcId.equals(activeDbsvc.getId())) {
      otherActiveDbsvcIds.add(activeDbsvc.getId());
    }
  }
  log.info("List of active dbsvc instances on other nodes: {}, expect {} instances to maintain quorum",otherActiveDbsvcIds,quorumNodeCnt);
  boolean isMaintained=otherActiveDbsvcIds.size() >= quorumNodeCnt;
  if (!isMaintained) {
    log.info("quorum would lost if reboot the current node. Retrying...");
  }
  return isMaintained;
}

public static void scheduleNextAlarm(Context context){
  scheduleNextAlarm(context,AlertUtils.createAlarmManager(context),REMINDER_QUERY_BATCH_SIZE,System.currentTimeMillis());
}

public void requestStop(){
  stopRequested.set(true);
}

public void test_engineCreateSSLEngine_02(){
  int[] invalid_port={Integer.MIN_VALUE,-65535,-1,65536,Integer.MAX_VALUE};
  SSLContextSpiImpl ssl=new SSLContextSpiImpl();
  try {
    SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",1080);
    fail("RuntimeException wasn't thrown");
  }
 catch (  RuntimeException re) {
    String str=re.getMessage();
    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);
  }
catch (  Exception e) {
    fail("Incorrect exception " + e + " was thrown");
  }
  for (int i=0; i < invalid_port.length; i++) {
    try {
      SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",invalid_port[i]);
      fail("IllegalArgumentException wasn't thrown");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
}

@SafeVarargs public static <T>T[] join(IntFunction<T[]> arrayFunction,T[]... arrays){
  if (arrays.length == 0) {
    return arrayFunction.apply(0);
  }
  if (arrays.length == 1) {
    return arrays[0];
  }
  if (arrays.length == 2) {
    return join(arrayFunction,arrays[0],arrays[1]);
  }
  T[] notNull=null;
  int finalSize=0;
  int nullArrays=0;
  List<T> list=new ArrayList<>(arrays.length * 10);
  for (  T[] array : arrays) {
    if ((array == null) || (array.length == 0)) {
      nullArrays++;
    }
 else {
      notNull=array;
      finalSize+=array.length;
      Collections.addAll(list,array);
    }
  }
  if (nullArrays == arrays.length) {
    return arrayFunction.apply(0);
  }
  if (nullArrays == (arrays.length - 1)) {
    return notNull;
  }
  return list.toArray(arrayFunction.apply(list.size()));
}

private static Set<String> splitPath(RelaxedURL url){
  Set<String> results=new HashSet<String>();
  Set<String> queries=normalizeQuery(url.getQuery());
  results.add("/");
  for (  String q : queries) {
    results.add("/?" + q);
  }
  Set<String> paths=splitPath(url.getPath());
  results.addAll(paths);
  for (  String p : paths) {
    for (    String q : queries) {
      results.add(p + "?" + q);
    }
  }
  return results;
}

public ActionForward initBestSellingReport(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ApplicationException, OperationException {
  ActionForward fwd=init(mapping,form,request,response);
  if (fwd != null)   return fwd;
  SellingItemForm reportForm=(SellingItemForm)form;
  String timePeriod=ReportDateManager.TODAY;
  String dateRange=Constants.FIXED_DATE_RANGE;
  reportForm.setTimePeriod(timePeriod);
  reportForm.setDateRange(dateRange);
  reportForm.setFromDate("");
  reportForm.setToDate("");
  reportForm.validate(mapping,request);
  return mapping.findForward(INIT_BEST_SELLING_REPORT);
}

@Override public void transactionBegin(){
  for (  BigdataGraphListener listener : listeners) {
    listener.transactionBegin();
  }
}

public synchronized void add(Job job){
  boolean canRunImmediately=dagManager.addJob(job);
  if (canRunImmediately) {
    LOG.debug("Job " + job + " is ready to run.");
    jobsToRun.add(job);
  }
  incrementSubmittedJobCount();
}

public void reset(String latex){
  parseString=new StringBuffer(latex);
  len=parseString.length();
  formula.root=null;
  pos=0;
  spos=0;
  line=0;
  col=0;
  group=0;
  insertion=false;
  atIsLetter=0;
  arrayMode=false;
  ignoreWhiteSpace=true;
  firstpass();
}

public void addConstant(ConstantPoolEntry entry){
  if (entry instanceof Utf8Constant) {
    Utf8Constant utf8=(Utf8Constant)entry;
    _utf8Map.put(utf8.getValue(),utf8);
  }
  _entries.add(entry);
}

public void addData(ArrayList<ChartSet> data){
  this.data=data;
}

public final double infoGain(){
  return m_infoGain;
}

static void writeRule(ZoneOffsetTransitionRule rule,DataOutput out) throws IOException {
  int month=rule.month;
  byte dom=rule.dom;
  int dow=rule.dow;
  LocalTime time=rule.time;
  boolean timeEndOfDay=rule.timeEndOfDay;
  TimeDefinition timeDefinition=rule.timeDefinition;
  ZoneOffset standardOffset=rule.standardOffset;
  ZoneOffset offsetBefore=rule.offsetBefore;
  ZoneOffset offsetAfter=rule.offsetAfter;
  int timeSecs=(timeEndOfDay ? 86400 : time.toSecondOfDay());
  int stdOffset=standardOffset.getTotalSeconds();
  int beforeDiff=offsetBefore.getTotalSeconds() - stdOffset;
  int afterDiff=offsetAfter.getTotalSeconds() - stdOffset;
  int timeByte=(timeSecs % 3600 == 0 ? (timeEndOfDay ? 24 : time.getHour()) : 31);
  int stdOffsetByte=(stdOffset % 900 == 0 ? stdOffset / 900 + 128 : 255);
  int beforeByte=(beforeDiff == 0 || beforeDiff == 1800 || beforeDiff == 3600 ? beforeDiff / 1800 : 3);
  int afterByte=(afterDiff == 0 || afterDiff == 1800 || afterDiff == 3600 ? afterDiff / 1800 : 3);
  int dowByte=(dow == -1 ? 0 : dow);
  int b=(month << 28) + ((dom + 32) << 22) + (dowByte << 19)+ (timeByte << 14)+ (timeDefinition.ordinal() << 12)+ (stdOffsetByte << 4)+ (beforeByte << 2)+ afterByte;
  out.writeInt(b);
  if (timeByte == 31) {
    out.writeInt(timeSecs);
  }
  if (stdOffsetByte == 255) {
    out.writeInt(stdOffset);
  }
  if (beforeByte == 3) {
    out.writeInt(offsetBefore.getTotalSeconds());
  }
  if (afterByte == 3) {
    out.writeInt(offsetAfter.getTotalSeconds());
  }
}

boolean cancel(int propertyConstant){
  if ((mPropertyMask & propertyConstant) != 0 && mNameValuesHolder != null) {
    int count=mNameValuesHolder.size();
    for (int i=0; i < count; ++i) {
      NameValuesHolder nameValuesHolder=mNameValuesHolder.get(i);
      if (nameValuesHolder.mNameConstant == propertyConstant) {
        mNameValuesHolder.remove(i);
        mPropertyMask&=~propertyConstant;
        return true;
      }
    }
  }
  return false;
}

@SuppressWarnings("unchecked typecast") public static <T>TypeSerializer<T> deserialize(byte[] bytes) throws IOException {
  ByteArrayInputStream bis=new ByteArrayInputStream(bytes);
  ObjectInput in=null;
  try {
    in=new ObjectInputStream(bis);
    return (TypeSerializer<T>)in.readObject();
  }
 catch (  ClassNotFoundException e) {
    throw new IOException("Could not deserialize class");
  }
 finally {
    try {
      bis.close();
    }
 catch (    IOException ex) {
    }
    try {
      if (in != null) {
        in.close();
      }
    }
 catch (    IOException ex) {
    }
  }
}

public void testRemainderKnuthMultiDigitsByOneDigit(){
  byte aBytes[]={113,-83,123,-5,18,-34,67,39,-29};
  byte bBytes[]={2,-3,-4,-50};
  int aSign=1;
  int bSign=-1;
  byte rBytes[]={2,-37,-60,59};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.remainder(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public void showSelectedNeuronProperties(){
  NeuronDialog dialog=NeuronDialog.createNeuronDialog(getSelectedNeurons());
  dialog.setModalityType(Dialog.ModalityType.MODELESS);
  dialog.pack();
  dialog.setLocationRelativeTo(null);
  dialog.setVisible(true);
}

public void encrypt(byte[] in,int length){
  int pos=0;
  while (pos < in.length && pos < length) {
    encryptBlock(in,pos,length);
    pos+=blockSize;
  }
}

private static boolean hasChangesOfChildren(long last,PageContext pc,Class clazz){
  java.lang.reflect.Method[] methods=clazz.getMethods();
  java.lang.reflect.Method method;
  Class[] params;
  for (int i=0; i < methods.length; i++) {
    method=methods[i];
    if (method.getDeclaringClass() == clazz) {
      if (_hasChangesOfChildren(pc,last,method.getReturnType()))       return true;
      params=method.getParameterTypes();
      for (int y=0; y < params.length; y++) {
        if (_hasChangesOfChildren(pc,last,params[y]))         return true;
      }
    }
  }
  return false;
}

private WindowStuffHelper(){
}

public static String removeSpecialChar(String tempStr){
  if (tempStr != null) {
    tempStr=replace(tempStr,",","",true,true);
    tempStr=replace(tempStr,".","",true,true);
    tempStr=replace(tempStr,"!","",true,true);
    tempStr=replace(tempStr,"?","",true,true);
    tempStr=replace(tempStr,"'","",true,true);
    tempStr=replace(tempStr,":","",true,true);
    tempStr=replace(tempStr,"(","",true,true);
    tempStr=replace(tempStr,")","",true,true);
    tempStr=replace(tempStr,"+","",true,true);
    tempStr=replace(tempStr,"-","",true,true);
    tempStr=replace(tempStr,">","",true,true);
    tempStr=replace(tempStr,"<","",true,true);
    tempStr=replace(tempStr,"/","",true,true);
    while (tempStr.indexOf("  ") > 0) {
      tempStr=replace(tempStr,"  "," ",true,true);
    }
    tempStr=replace(tempStr,"	"," ",true,true);
  }
  return tempStr;
}

public RunScriptAction(NetworkPanel networkPanel){
  super("Run Script...");
  putValue(SMALL_ICON,ResourceManager.getImageIcon("Script.png"));
  putValue(SHORT_DESCRIPTION,"Open and apply a network .bsh script to this network");
  this.networkPanel=networkPanel;
}

public T webImage(String url){
  return webImage(url,true,false,0xFF000000);
}

private Map<Installment,List<Receipt>> consolidateTuplesInstallmentWise(final List<InstallmentReceiptTuple> tuples){
  final Map<Installment,List<Receipt>> consolidated=new HashMap<Installment,List<Receipt>>();
  for (  final InstallmentReceiptTuple t : tuples) {
    List<Receipt> receiptsForInstallment=consolidated.get(t.installment);
    if (receiptsForInstallment == null) {
      receiptsForInstallment=new ArrayList<Receipt>();
      consolidated.put(t.installment,receiptsForInstallment);
    }
    if (!receiptsForInstallment.contains(t.receipt))     receiptsForInstallment.add(t.receipt);
  }
  LOGGER.info("consolidateTuplesInstallmentWise() returned: " + consolidated);
  return consolidated;
}

public static boolean isValidEmail(String email){
  final String emailPattern="^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
  Matcher matcher;
  Pattern pattern=Pattern.compile(emailPattern);
  matcher=pattern.matcher(email);
  if (matcher != null)   return matcher.matches();
 else   return false;
}

public void add(LineMergeDirectedEdge directedEdge){
  directedEdges.add(directedEdge);
}

public static ApplicationXml parseApplicationXmlFromFile(File file,EntityResolver entityResolver) throws IOException, JDOMException {
  InputStream in=null;
  try {
    in=new FileInputStream(file);
    return parseApplicationXml(in,entityResolver);
  }
  finally {
    if (in != null) {
      try {
        in.close();
      }
 catch (      IOException ioe) {
      }
    }
  }
}

public ChannelEntry newConnection(ReadSelectorThread readHandler,SelectionKey key){
  SocketChannel channel=(SocketChannel)key.channel();
  WriteSelectorThread writeHandler=_selectorManager.getWriteHandler(key.channel());
  Socket socket=channel.socket();
  InetSocketAddress socketAddress=(InetSocketAddress)(socket == null ? null : socket.getRemoteSocketAddress());
  ChannelEntry channelEntry=new ChannelEntry(writeHandler,readHandler,key,socketAddress,this);
  m_Channels.put(channel,channelEntry);
  if (socketAddress != null) {
    _clientToChannel.put(socketAddress,channelEntry);
  }
  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Connected new client from [" + channelEntry.getClientEndPointAddress() + "] endpoint.");
  return channelEntry;
}

public static boolean isExtension(String filename,String extension){
  if (filename == null) {
    return false;
  }
  if (extension == null || extension.length() == 0) {
    return indexOfExtension(filename) == -1;
  }
  String fileExt=getExtension(filename);
  return fileExt.equals(extension);
}

public String report(){
  StringBuffer report=new StringBuffer();
  intHashTable=new int[table.tableSize];
  calculateSlotUsage();
  int max=maxCollisions();
  int[] slotUsageCount=new int[max + 1];
  for (  int i : intHashTable) {
    slotUsageCount[i]++;
  }
  report.append("Total number of entries: " + numEntries + "\n");
  report.append("   Load factor:" + (numEntries / (1.0f * table.tableSize) + "\n\n"));
  float weightedAvg=0.0f;
  int numNonEmpty=0;
  report.append("Number of hits\tNumber of slots\n");
  for (int j=0; j <= max; j++) {
    if (slotUsageCount[j] != 0) {
      report.append(j + "\t" + slotUsageCount[j]+ "\n");
      if (j != 0) {
        weightedAvg+=slotUsageCount[j] * j;
        numNonEmpty+=slotUsageCount[j];
      }
    }
  }
  weightedAvg/=numNonEmpty;
  report.append("\n  Slot statistics: min=" + minCollisions() + ", max="+ max+ ", weightedAvg:"+ weightedAvg);
  return report.toString();
}

public void addSubscriptionToStore(final String topic,final String clientId){
  final ClientTopicCouple subscription=new ClientTopicCouple(clientId,topic);
  if (!topics.contains(subscription)) {
    logger.debug("Added subscription " + topic + " ("+ clientId+ ") to store");
    subscriptionsStore.add(subscription);
    topics.add(topic);
  }
}

public boolean zip(String zipLocation,String toBeZippedName){
  boolean ret=false;
  if (verbose)   Debug.put("zip");
  File toBeZipped=new File(toBeZippedName);
  if (toBeZipped.exists()) {
    try {
      FileUtils.saveZipFile(zipLocation,toBeZipped);
      ret=true;
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return ret;
}

private HashMap<Integer,Boolean> generateExpandedStateMap(){
  HashMap<Integer,Boolean> parentListItemHashMap=new HashMap<>();
  int childCount=0;
  Object listItem;
  ParentWrapper parentWrapper;
  int listItemCount=mItemList.size();
  for (int i=0; i < listItemCount; i++) {
    if (mItemList.get(i) != null) {
      listItem=getListItem(i);
      if (listItem instanceof ParentWrapper) {
        parentWrapper=(ParentWrapper)listItem;
        parentListItemHashMap.put(i - childCount,parentWrapper.isExpanded());
      }
 else {
        childCount++;
      }
    }
  }
  return parentListItemHashMap;
}

public void addAudioPacketListener(Listener<AudioPacket> listener){
  mAudioPacketBroadcaster.addListener(listener);
}

public static boolean decodeToFile(String dataToDecode,String filename){
  boolean success=false;
  Base64.OutputStream bos=null;
  try {
    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);
    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));
    success=true;
  }
 catch (  java.io.IOException e) {
    success=false;
  }
 finally {
    try {
      bos.close();
    }
 catch (    Exception e) {
    }
  }
  return success;
}

public DeltaCRLIndicatorExtension(Boolean critical,Object value) throws IOException {
  super(PKIXExtensions.DeltaCRLIndicator_Id,critical.booleanValue(),value,NAME,LABEL);
}

public JavaEnvironment(File javaPath){
  Objects.requireNonNull(javaPath);
  this.javaPath=javaPath;
}

private String printOFormat(final long x){
  String sx=null;
  if (x == Long.MIN_VALUE) {
    sx="1000000000000000000000";
  }
 else   if (x < 0) {
    final String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,8);
switch (t.length()) {
case 1:
      sx="100000000000000000000" + t;
    break;
case 2:
  sx="10000000000000000000" + t;
break;
case 3:
sx="1000000000000000000" + t;
break;
case 4:
sx="100000000000000000" + t;
break;
case 5:
sx="10000000000000000" + t;
break;
case 6:
sx="1000000000000000" + t;
break;
case 7:
sx="100000000000000" + t;
break;
case 8:
sx="10000000000000" + t;
break;
case 9:
sx="1000000000000" + t;
break;
case 10:
sx="100000000000" + t;
break;
case 11:
sx="10000000000" + t;
break;
case 12:
sx="1000000000" + t;
break;
case 13:
sx="100000000" + t;
break;
case 14:
sx="10000000" + t;
break;
case 15:
sx="1000000" + t;
break;
case 16:
sx="100000" + t;
break;
case 17:
sx="10000" + t;
break;
case 18:
sx="1000" + t;
break;
case 19:
sx="100" + t;
break;
case 20:
sx="10" + t;
break;
case 21:
sx='1' + t;
break;
}
}
 else {
sx=Long.toString(x,8);
}
return printOFormat(sx);
}

void addCallback(JSObject source,String method,JSFunction callback,boolean async){
  String key=source.toJSPointer() + "." + method;
  callbacks.put(key,callback);
  String id=JSObject.ID_KEY;
  String self=source.toJSPointer();
  String js=self + "." + method+ "=function(){"+ "var len=arguments.length;var url='/!cn1command/"+ self+ "."+ method+ "?'; "+ "for (var i=0; i<len; i++){"+ "var val = arguments[i]; var strval=val;"+ "if ( (typeof(val) == 'object') || (typeof(val) == 'function')){ "+ "var id = val."+ id+ "; "+ "if (typeof(id)=='undefined' || typeof("+ jsLookupTable+ "[id]) == 'undefined' || "+ jsLookupTable+ "[id]."+ id+ "!=id){"+ jsLookupTable+ ".push(val); id="+ jsLookupTable+ ".indexOf(val); Object.defineProperty(val,\""+ id+ "\",{value:id, enumerable:false});"+ "}"+ "strval='"+ jsLookupTable+ "['+id+']'"+ "}"+ "url += encodeURIComponent(typeof(val))+'='+encodeURIComponent(strval);"+ "if (i < len-1){ url += '&';}"+ "} window.location.href=url;"+ "}";
  exec(js,async);
}

public void removeAllBlocksFromSection(){
  for (int i=mBlockEntries.size(); i > 0; i--) {
    Block b=mBlockEntries.get(i - 1);
    if (b != null) {
      b.removePropertyChangeListener(mBlockListeners.get(i - 1));
    }
    mBlockListeners.remove(i - 1);
    mBlockEntries.remove(i - 1);
  }
  for (int i=mForwardEntryPoints.size(); i > 0; i--) {
    mForwardEntryPoints.remove(i - 1);
  }
  for (int i=mReverseEntryPoints.size(); i > 0; i--) {
    mReverseEntryPoints.remove(i - 1);
  }
  initializationNeeded=false;
}

public static void writeStringToFile(Path file,String text) throws IOException {
  byte[] buf=text.getBytes(StandardCharsets.UTF_8);
  Files.write(file,buf);
}

private static boolean isOperatorVariableAccess(final INaviOperandTreeNode node){
  final List<INaviOperandTreeNode> children=node.getChildren();
  if (children.size() == 2) {
    final INaviOperandTreeNode child0=children.get(0);
    final INaviOperandTreeNode child1=children.get(1);
    return isVariable(child0) ^ isVariable(child1);
  }
 else {
    return false;
  }
}

@Override public void onValueSelected(int pickerIndex,int newValue,boolean autoAdvance){
  if (pickerIndex == HOUR_INDEX) {
    setHour(newValue,false);
    String announcement=String.format("%d",newValue);
    if (mAllowAutoAdvance && autoAdvance) {
      setCurrentItemShowing(MINUTE_INDEX,true,true,false);
      announcement+=". " + mSelectMinutes;
    }
 else {
      mTimePicker.setContentDescription(mHourPickerDescription + ": " + newValue);
    }
    Utils.tryAccessibilityAnnounce(mTimePicker,announcement);
  }
 else   if (pickerIndex == MINUTE_INDEX) {
    setMinute(newValue);
    mTimePicker.setContentDescription(mMinutePickerDescription + ": " + newValue);
  }
 else   if (pickerIndex == HALF_DAY_INDEX) {
    updateHalfDay(newValue);
  }
 else   if (pickerIndex == ENABLE_PICKER_INDEX) {
    if (!isTypedTimeFullyLegal()) {
      mTypedTimes.clear();
    }
    finishKbMode(true);
  }
}

public static final List<Geo> segmentNearPoly(Geo s1,Geo s2,GeoArray r,double near){
  int rlen=r.getSize();
  Geo pl0=r.get(rlen - 1,new Geo());
  Geo pl1=new Geo();
  List<Geo> list=null;
  Geo check=new Geo();
  for (int j=0; j < rlen; j++) {
    r.get(j,pl1);
    Geo ret=segmentsIntersectOrNear(s1,s2,pl0,pl1,near,check);
    if (ret != null) {
      if (list == null) {
        list=new LinkedList<Geo>();
      }
      list.add(ret);
      check=new Geo();
    }
    pl0.initialize(pl1);
  }
  return list;
}

public void addAction(UpdateAction action){
  actionList.add(action);
  for (  UpdateManagerListener listener : listeners) {
    listener.actionAdded(action);
  }
}

public void load(DataInput rafIn) throws IOException, MaryConfigurationException {
  int numIdx=rafIn.readInt();
  idxInterval=rafIn.readInt();
  if (idxInterval <= 0) {
    throw new MaryConfigurationException("read negative index interval -- file seems corrupt");
  }
  bytePtrs=new long[numIdx];
  timePtrs=new long[numIdx];
  int numBytesToRead=16 * numIdx + 16;
  byte[] data=new byte[numBytesToRead];
  rafIn.readFully(data);
  DataInput bufIn=new DataInputStream(new ByteArrayInputStream(data));
  for (int i=0; i < numIdx; i++) {
    bytePtrs[i]=bufIn.readLong();
    timePtrs[i]=bufIn.readLong();
    if (i > 0) {
      if (bytePtrs[i] < bytePtrs[i - 1] || timePtrs[i] < timePtrs[i - 1]) {
        throw new MaryConfigurationException("File seems corrupt: Pointer positions in index fields are not strictly monotonously rising");
      }
    }
  }
  bufIn.readLong();
  bufIn.readLong();
}

public URL find(String classname){
  String jarname="/" + classname.replace('.','/') + ".class";
  return thisClass.getResource(jarname);
}

public void signoff(String uniqueID){
  Debug.message("crfp","CRFPServer: Client" + uniqueID + " signing off!");
  caches.remove(uniqueID);
  viewAttributeLists.remove(uniqueID);
  timestamps.remove(uniqueID);
}

private String createNonCGSrdfPairStepsOnEmptyGroup(List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,RemoteDirectorGroup group,Map<URI,Volume> uriVolumeMap,String waitFor,Workflow workflow){
  StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());
  URI vpoolChangeUri=getVirtualPoolChangeVolume(sourceDescriptors);
  log.info("VPoolChange URI {}",vpoolChangeUri);
  List<URI> sourceURIs=VolumeDescriptor.getVolumeURIs(sourceDescriptors);
  List<URI> targetURIs=new ArrayList<>();
  for (  URI sourceURI : sourceURIs) {
    Volume source=uriVolumeMap.get(sourceURI);
    StringSet srdfTargets=source.getSrdfTargets();
    for (    String targetStr : srdfTargets) {
      URI targetURI=URI.create(targetStr);
      targetURIs.add(targetURI);
    }
  }
  Method createListMethod=createListReplicasMethod(system.getId(),sourceURIs,targetURIs,vpoolChangeUri,true);
  Method rollbackMethod=rollbackSRDFLinksMethod(system.getId(),sourceURIs,targetURIs,false);
  String stepId=workflow.createStep(CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_GROUP,CREATE_SRDF_ACTIVE_VOLUME_PAIR_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),createListMethod,rollbackMethod,null);
  return stepId;
}

public static Long downsamplerTimestamp(Long millitimestamp,long windowSize){
  return millitimestamp - (millitimestamp % windowSize);
}

public boolean isNavigationAtBottom(){
  return (mSmallestWidthDp >= 600 || mInPortrait);
}

@Override public String toString(){
  if (points == null || points.length() == 0) {
    return idx + "";
  }
  StringBuffer bf=new StringBuffer();
  try {
    bf.append(idx + " p: ");
    ListNode temp;
    for (int i=0; i < points.size(); i++) {
      temp=points.get(i);
      if (i == 0) {
        bf.append("" + temp.idx);
      }
 else {
        bf.append(", " + temp.idx);
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  return bf.toString();
}

public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {
  String formattedMsg=e.getMessage();
  SAXSourceLocator locator=getLocator();
  ErrorListener handler=m_stylesheetProcessor.getErrorListener();
  try {
    handler.error(new TransformerException(formattedMsg,locator));
  }
 catch (  TransformerException te) {
    throw new org.xml.sax.SAXException(te);
  }
}

private void putHead(String key,TemplateSubPatternAssociation assoc){
  if (key.equals(PsuedoNames.PSEUDONAME_TEXT))   m_textPatterns=assoc;
 else   if (key.equals(PsuedoNames.PSEUDONAME_ROOT))   m_docPatterns=assoc;
 else   if (key.equals(PsuedoNames.PSEUDONAME_COMMENT))   m_commentPatterns=assoc;
  m_patternTable.put(key,assoc);
}

public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {
  super();
  opPos=OpMap.getFirstChildPos(opPos);
  loadLocationPaths(compiler,opPos,0);
}

public IStatus run(IProgressMonitor monitor) throws InvocationTargetException {
  ZipFile zipFile=null;
  FileOutputStream fos=null;
  BufferedOutputStream dest=null;
  BufferedInputStream is=null;
  jobStatus=Status.OK_STATUS;
  try {
    zipFile=new ZipFile(archive);
    monitor.beginTask("Uncompressing " + archive.getName(),zipFile.size());
    Enumeration<? extends ZipEntry> entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry zipEntry=entries.nextElement();
      String currentEntry=zipEntry.getName();
      File destFile=new File(targetDir,currentEntry);
      File destinationParent=destFile.getParentFile();
      if (!zipEntry.isDirectory()) {
        destinationParent.mkdirs();
        is=new BufferedInputStream(zipFile.getInputStream(zipEntry));
        int numBytesRead;
        byte bytes[]=new byte[BUFSIZE];
        fos=new FileOutputStream(destFile);
        dest=new BufferedOutputStream(fos,BUFSIZE);
        while ((numBytesRead=is.read(bytes,0,BUFSIZE)) != -1) {
          dest.write(bytes,0,numBytesRead);
        }
        dest.flush();
      }
 else {
        destFile.mkdirs();
      }
      monitor.worked(1);
      if (monitor.isCanceled()) {
        jobStatus=Status.CANCEL_STATUS;
        break;
      }
    }
    if (!monitor.isCanceled()) {
      jobStatus=Status.OK_STATUS;
    }
  }
 catch (  ZipException ze) {
    String errormsg=errorMessage("It may be corrupted?");
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);
    CorePluginLog.logError(ze,errormsg);
  }
catch (  IOException ioe) {
    String errormsg=errorMessage();
    jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);
    CorePluginLog.logError(ioe,errormsg);
  }
 finally {
    try {
      if (zipFile != null) {
        zipFile.close();
      }
      if (is != null) {
        is.close();
      }
      if (dest != null) {
        dest.close();
      }
    }
 catch (    IOException ioe) {
      String errormsg=errorMessage();
      jobStatus=new Status(Status.ERROR,CorePlugin.PLUGIN_ID,errormsg);
      CorePluginLog.logError(ioe,errormsg);
    }
  }
  return jobStatus;
}

public int read(String table,String key,Set<String> fields,HashMap<String,ByteIterator> result){
  long st=System.nanoTime();
  int res=_db.read(table,key,fields,result);
  long en=System.nanoTime();
  _measurements.measure("READ",(int)((en - st) / 1000));
  _measurements.reportReturnCode("READ",res);
  return res;
}

protected void errorMessage(String msg) throws IOException {
  String str=msg + ", read " + m_Tokenizer.toString();
  if (m_Lines > 0) {
    int line=Integer.parseInt(str.replaceAll(".* line ",""));
    str=str.replaceAll(" line .*"," line " + (m_Lines + line - 1));
  }
  throw new IOException(str);
}

public static void spooky4(final BitVector bv,final long prefixLength,final long seed,final long[] state,final long[] tuple){
  long h0, h1, h2, h3;
  h0=seed;
  h1=seed;
  h2=ARBITRARY_BITS;
  h3=ARBITRARY_BITS;
  long pos;
  if (prefixLength >= 2 * Long.SIZE) {
    final int p=4 * (int)((prefixLength - 2 * Long.SIZE) / (4 * Long.SIZE));
    h0=state[p + 0];
    h1=state[p + 1];
    h2=state[p + 2];
    h3=state[p + 3];
    pos=p * Long.SIZE + 2 * Long.SIZE;
  }
 else   pos=0;
  long remaining=prefixLength - pos;
  if (remaining >= Long.SIZE * 2) {
    h0+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);
    h1+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);
    remaining-=2 * Long.SIZE;
    pos+=2 * Long.SIZE;
  }
  if (remaining > Long.SIZE) {
    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);
    h3+=bv.getLong(pos + 1 * Long.SIZE,prefixLength);
  }
 else   if (remaining > 0) {
    h2+=bv.getLong(pos,prefixLength);
  }
 else {
    h2+=ARBITRARY_BITS;
    h3+=ARBITRARY_BITS;
  }
  h0+=prefixLength;
  h3^=h2;
  h2=Long.rotateLeft(h2,15);
  h3+=h2;
  h0^=h3;
  h3=Long.rotateLeft(h3,52);
  h0+=h3;
  h1^=h0;
  h0=Long.rotateLeft(h0,26);
  h1+=h0;
  h2^=h1;
  h1=Long.rotateLeft(h1,51);
  h2+=h1;
  h3^=h2;
  h2=Long.rotateLeft(h2,28);
  h3+=h2;
  h0^=h3;
  h3=Long.rotateLeft(h3,9);
  h0+=h3;
  h1^=h0;
  h0=Long.rotateLeft(h0,47);
  h1+=h0;
  h2^=h1;
  h1=Long.rotateLeft(h1,54);
  h2+=h1;
  h3^=h2;
  h2=Long.rotateLeft(h2,32);
  h3+=h2;
  h0^=h3;
  h3=Long.rotateLeft(h3,25);
  h0+=h3;
  h1^=h0;
  h0=Long.rotateLeft(h0,63);
  h1+=h0;
switch (tuple.length) {
case 4:
    tuple[3]=h3;
case 3:
  tuple[2]=h2;
case 2:
tuple[1]=h1;
case 1:
tuple[0]=h0;
}
}

public boolean hasNext(){
  if (deal > 32000) {
    sc.close();
  }
  return (deal <= 32000);
}

public void addIssuer(X500Principal issuer){
  if (issuer == null) {
    throw new NullPointerException("issuer == null");
  }
  if (issuerNames == null) {
    issuerNames=new ArrayList<String>();
  }
  String name=issuer.getName(X500Principal.CANONICAL);
  if (!issuerNames.contains(name)) {
    issuerNames.add(name);
  }
  if (issuerPrincipals == null) {
    issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size());
  }
  int size=issuerNames.size() - 1;
  for (int i=issuerPrincipals.size(); i < size; i++) {
    issuerPrincipals.add(new X500Principal(issuerNames.get(i)));
  }
  issuerPrincipals.add(issuer);
}

static String buildKeySelection(int selectionCount){
  String[] list=new String[selectionCount];
  Arrays.fill(list,"?");
  return KEY_COLUMN + " IN (" + TextUtils.join(", ",list)+ ")";
}

private void filterNodeMap(ConcurrentMap<String,Collection<ClusterNode>> map,final ClusterNode exclNode){
  for (  String cacheName : registeredCaches.keySet()) {
    String maskedName=maskNull(cacheName);
    while (true) {
      Collection<ClusterNode> oldNodes=map.get(maskedName);
      if (oldNodes == null || oldNodes.isEmpty())       break;
      Collection<ClusterNode> newNodes=new ArrayList<>(oldNodes);
      if (!newNodes.remove(exclNode))       break;
      if (map.replace(maskedName,oldNodes,newNodes))       break;
    }
  }
}

public void storeDevice(Device d){
  if (!isMaster)   return;
  if (d == null)   return;
  long now=System.nanoTime();
  writeUpdatedDeviceToStorage(d);
  lastWriteTimes.put(d.getDeviceKey(),now);
}

public void testCreateElementNS1() throws Throwable {
  String namespaceURI="http://www.ecommerce.org/";
  String malformedName="prefix::local";
  Document doc;
  doc=(Document)load("staffNS",builder);
{
    boolean success=false;
    try {
      doc.createElementNS(namespaceURI,malformedName);
    }
 catch (    DOMException ex) {
      success=(ex.code == DOMException.NAMESPACE_ERR);
    }
    assertTrue("throw_NAMESPACE_ERR",success);
  }
}

private static void adjustAbs(double[] array,int lower,int upper){
  int j, k;
  double temp;
  j=lower;
  k=lower * 2;
  while (k <= upper) {
    if ((k < upper) && (Math.abs(array[k - 1]) < Math.abs(array[k]))) {
      k+=1;
    }
    if (Math.abs(array[j - 1]) < Math.abs(array[k - 1])) {
      temp=array[j - 1];
      array[j - 1]=array[k - 1];
      array[k - 1]=temp;
    }
    j=k;
    k*=2;
  }
}

public synchronized IAudioProcessor remove(int index){
  IAudioProcessor processor=processors.remove(index);
  buildFinalProcessor();
  return processor;
}

LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){
  LinkedList<TrieNode<T>> result=new LinkedList<>();
  String rootPrefix=root.getPrefix();
  for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) {
    String newPrefix=rootPrefix + suffix.substring(0,i);
    TrieNode<T> newNode=TrieNode.makeNode(newPrefix);
    result.add(newNode);
    root.addChild(newNode);
    root=newNode;
  }
  root.setValue(value);
  return result;
}

private static By byFromLocator(String locator){
  if (locator.startsWith("//")) {
    return By.xpath(locator);
  }
  if (locator.startsWith("id=")) {
    return By.id(locator.replaceFirst("id=",""));
  }
  if (locator.startsWith("css=")) {
    return By.cssSelector(locator.replaceFirst("css=",""));
  }
  if (locator.startsWith("xpath=")) {
    return By.xpath(locator.replaceFirst("xpath=",""));
  }
  if (locator.startsWith("name=")) {
    return By.name(locator.replaceFirst("name=",""));
  }
  if (locator.startsWith("link=")) {
    return By.linkText(locator.replaceFirst("link=",""));
  }
  if (locator.startsWith("linkpartial=")) {
    return By.partialLinkText(locator.replaceFirst("linkpartial=",""));
  }
  throw new IllegalArgumentException("Locator not supported: " + locator);
}

private static void taskStarted(ProgressThread task){
  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {
    l.progressThreadStarted(task);
  }
}

public static final void isCommentWF(DOMErrorHandler errorHandler,DOMErrorImpl error,DOMLocatorImpl locator,String datavalue,boolean isXML11Version){
  if (datavalue == null || (datavalue.length() == 0)) {
    return;
  }
  char[] dataarray=datavalue.toCharArray();
  int datalength=dataarray.length;
  if (isXML11Version) {
    int i=0;
    while (i < datalength) {
      char c=dataarray[i++];
      if (XML11Char.isXML11Invalid(c)) {
        if (XMLChar.isHighSurrogate(c) && i < datalength) {
          char c2=dataarray[i++];
          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {
            continue;
          }
        }
        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)});
        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");
      }
 else       if (c == '-' && i < datalength && dataarray[i] == '-') {
        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null);
        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");
      }
    }
  }
 else {
    int i=0;
    while (i < datalength) {
      char c=dataarray[i++];
      if (XMLChar.isInvalid(c)) {
        if (XMLChar.isHighSurrogate(c) && i < datalength) {
          char c2=dataarray[i++];
          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {
            continue;
          }
        }
        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"InvalidCharInComment",new Object[]{Integer.toString(dataarray[i - 1],16)});
        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");
      }
 else       if (c == '-' && i < datalength && dataarray[i] == '-') {
        String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.XML_DOMAIN,"DashDashInComment",null);
        reportDOMError(errorHandler,error,locator,msg,DOMError.SEVERITY_ERROR,"wf-invalid-character");
      }
    }
  }
}

private void throwExceptionIfDestroyed(String method) throws DeepstreamRecordDestroyedException {
  if (this.isDestroyed) {
    throw new DeepstreamRecordDestroyedException(method);
  }
}

public void upload(final InputStream in,String artifact,String version,String fileName,Properties props) throws IOException {
  props.put(FILE_NAME_PROPERTY,fileName);
  props.put(VERSION_PROPERTY,version);
  props.put(ARTIFACT_PROPERTY,artifact);
  storeProperties(artifact,version,props);
  try (OutputStream out=newOutputStream(getArtifact(artifact,version,fileName))){
    IOUtils.copyLarge(in,out);
  }
  finally {
    in.close();
  }
}

static String escapeBytes(final ByteString input){
  final StringBuilder builder=new StringBuilder(input.size());
  for (int i=0; i < input.size(); i++) {
    final byte b=input.byteAt(i);
switch (b) {
case 0x07:
      builder.append("\\a");
    break;
case '\b':
  builder.append("\\b");
break;
case '\f':
builder.append("\\f");
break;
case '\n':
builder.append("\\n");
break;
case '\r':
builder.append("\\r");
break;
case '\t':
builder.append("\\t");
break;
case 0x0b:
builder.append("\\v");
break;
case '\\':
builder.append("\\\\");
break;
case '\'':
builder.append("\\\'");
break;
case '"':
builder.append("\\\"");
break;
default :
if (b >= 0x20) {
builder.append((char)b);
}
 else {
builder.append('\\');
builder.append((char)('0' + ((b >>> 6) & 3)));
builder.append((char)('0' + ((b >>> 3) & 7)));
builder.append((char)('0' + (b & 7)));
}
break;
}
}
return builder.toString();
}

public void load() throws IOException {
  if (magicNumber == 0) {
    try (InputReaderLittleEndian ins=new InputReaderLittleEndian(new FileInputStreamAdapter(fileName))){
      magicNumber=ins.readLong();
      if (magicNumber != MAGIC_NUMBER)       throw new IOException("Input file is not a DAA file.");
      version=ins.readLong();
      if (version > DAA_VERSION)       throw new IOException("DAA version requires later version of MEGAN.");
      diamondBuild=ins.readLong();
      dbSeqs=ins.readLong();
      dbSeqsUsed=ins.readLong();
      dbLetters=ins.readLong();
      flags=ins.readLong();
      queryRecords=ins.readLong();
      modeRank=ins.readInt();
      gapOpen=ins.readInt();
      gapExtend=ins.readInt();
      reward=ins.readInt();
      penalty=ins.readInt();
      reserved1=ins.readInt();
      reserved2=ins.readInt();
      reserved3=ins.readInt();
      k=ins.readDouble();
      lambda=ins.readDouble();
      reserved4=ins.readDouble();
      reserved5=ins.readDouble();
      for (int i=0; i < scoreMatrix.length; i++) {
        scoreMatrix[i]=(byte)ins.read();
      }
      scoreMatrixName=Basic.toString(scoreMatrix);
      for (int i=0; i < blockSize.length; i++)       blockSize[i]=ins.readLong();
      if (blockSize[0] == 0)       throw new IOException("Invalid DAA file. DIAMOND run probably has not completed successfully.");
      for (int i=0; i < blockTypeRank.length; i++) {
        blockTypeRank[i]=(byte)ins.read();
switch (BlockType.value(blockTypeRank[i])) {
case ref_names:
          if (refNamesBlockIndex != -1)           throw new IOException("DAA file contains multiple ref_names blocks, not implemented.");
        refNamesBlockIndex=i;
      break;
case ref_lengths:
    if (refLengthsBlockIndex != -1)     throw new IOException("DAA file contains multiple ref_lengths blocks, not implemented.");
  refLengthsBlockIndex=i;
break;
case alignments:
if (alignmentsBlockIndex != -1) throw new IOException("DAA file contains multiple alignments blocks, not implemented.");
alignmentsBlockIndex=i;
break;
}
}
if (refNamesBlockIndex == -1) throw new IOException("DAA file contains 0 ref_names blocks, not implemented.");
if (refLengthsBlockIndex == -1) throw new IOException("DAA file contains 0 ref_lengths blocks, not implemented.");
if (alignmentsBlockIndex == -1) throw new IOException("DAA file contains 0 alignments blocks, not implemented.");
if (refLengthsBlockIndex < refNamesBlockIndex) throw new IOException("DAA file contains ref_lengths block before ref_names block, not implemented.");
headerSize=ins.getPosition();
lnK=Math.log(k);
}
 }
}

private static Class<?>[] types(Object... values){
  if (values == null) {
    return new Class[0];
  }
  Class<?>[] result=new Class[values.length];
  for (int i=0; i < values.length; i++) {
    Object value=values[i];
    result[i]=value == null ? NULL.class : value.getClass();
  }
  return result;
}

private final void countAll() throws IOException {
  MultiDocValues.OrdinalMap ordinalMap;
  if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {
    ordinalMap=((MultiSortedSetDocValues)dv).mapping;
  }
 else {
    ordinalMap=null;
  }
  IndexReader origReader=state.getOrigReader();
  for (  LeafReaderContext context : origReader.leaves()) {
    LeafReader reader=context.reader();
    SortedSetDocValues segValues=reader.getSortedSetDocValues(field);
    if (segValues == null) {
      continue;
    }
    Bits liveDocs=reader.getLiveDocs();
    if (ordinalMap != null) {
      final LongValues ordMap=ordinalMap.getGlobalOrds(context.ord);
      int numSegOrds=(int)segValues.getValueCount();
      final int[] segCounts=new int[numSegOrds];
      int docID;
      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        if (liveDocs == null || liveDocs.get(docID)) {
          int term=(int)segValues.nextOrd();
          while (term != SortedSetDocValues.NO_MORE_ORDS) {
            segCounts[term]++;
            term=(int)segValues.nextOrd();
          }
        }
      }
      for (int ord=0; ord < numSegOrds; ord++) {
        int count=segCounts[ord];
        if (count != 0) {
          counts[(int)ordMap.get(ord)]+=count;
        }
      }
    }
 else {
      int docID;
      while ((docID=segValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {
        if (liveDocs == null || liveDocs.get(docID)) {
          int term=(int)segValues.nextOrd();
          while (term != SortedSetDocValues.NO_MORE_ORDS) {
            counts[term]++;
            term=(int)segValues.nextOrd();
          }
        }
      }
    }
  }
}

public void addToParent(Element headerE) throws Exception {
  Document doc=headerE.getOwnerDocument();
  Element securityE=doc.createElementNS(wsseNS,WSSEConstants.TAG_WSSE + ":" + WSSEConstants.TAG_SECURITYT);
  securityE.setAttributeNS(SOAPBindingConstants.NS_XML,WSSEConstants.TAG_XML_WSSE,wsseNS);
  headerE.appendChild(securityE);
  Document binaryTokenD=XMLUtils.toDOMDocument(toString(),debug);
  Element binaryTokenE=binaryTokenD.getDocumentElement();
  securityE.appendChild(doc.importNode(binaryTokenE,true));
}

public final static int skipSpaces(final String in,final int start){
  int pos=start;
  while (pos < in.length() && (in.charAt(pos) == ' ' || in.charAt(pos) == '\n')) {
    pos++;
  }
  return pos < in.length() ? pos : -1;
}

public void update(){
  if (amplitude > 0) {
    long elapsed=System.currentTimeMillis() - timestamp;
    double delta=amplitude * Math.exp(-elapsed / timeConstant);
    if (Math.abs(delta) > 0.5) {
      viewpointNode.drag(lastDx * delta,lastDy * delta);
    }
 else {
      amplitude=0;
      updateLookAt();
    }
  }
}

@Override public Assignment sample(){
  if (!samples.isEmpty()) {
    int selection=sampler.nextInt(samples.size());
    Assignment selected=samples.get(selection);
    return selected;
  }
 else {
    log.warning("distribution has no samples");
    return new Assignment();
  }
}

@SneakyThrows public static X509Certificate readCertificate(InputStream is){
  return (X509Certificate)CERT_FACTORY.generateCertificate(is);
}

public GuacamoleHTTPTunnelMap(){
  executor.scheduleAtFixedRate(new TunnelTimeoutTask(TUNNEL_TIMEOUT * 1000l),TUNNEL_TIMEOUT,TUNNEL_TIMEOUT,TimeUnit.SECONDS);
}

default B with(String key,Class<?> value){
  return with(key,value != null ? value.getName() : null);
}

private void rename(Table table){
  if (renameDefinitions != null) {
    for (    Column col : table.getAllColumns()) {
      String newColName=renameDefinitions.getNewColumnName(table.getSchema(),table.getName(),col.getName());
      if (newColName != null)       col.setName(newColName);
    }
    String newTableName=renameDefinitions.getNewTableName(table.getSchema(),table.getName());
    String newSchemaName=renameDefinitions.getNewSchemaName(table.getSchema(),table.getName());
    if (newTableName != null)     table.setTable(newTableName);
    if (newSchemaName != null)     table.setSchema(newSchemaName);
  }
}

private void handleReadLastConfirmedError(int rc){
  if (BKException.Code.NoSuchLedgerExistsException == rc) {
    if (bkcNoLedgerExceptionsOnReadLAC.incrementAndGet() > noLedgerExceptionOnReadLACThreshold) {
      LOG.info("{} No entries published to ledger {} yet for {} millis.",new Object[]{fullyQualifiedName,currentLH,conf.getReadAheadNoSuchLedgerExceptionOnReadLACErrorThresholdMillis()});
      bkcNoLedgerExceptionsOnReadLAC.set(0);
      if (closeCurrentLedgerHandle()) {
        next.process(BKException.Code.OK);
      }
      return;
    }
 else {
      if (LOG.isTraceEnabled()) {
        LOG.info("{} No entries published to ledger {} yet. Backoff reading ahead for {} ms.",new Object[]{fullyQualifiedName,currentLH,conf.getReadAheadWaitTime()});
      }
      schedule(ReadAheadWorker.this,conf.getReadAheadWaitTime());
      return;
    }
  }
 else   if (BKException.Code.OK != rc) {
    handleException(ReadAheadPhase.READ_LAST_CONFIRMED,rc);
    return;
  }
}

public synchronized boolean put(long fp){
  int index=(int)(fp & this.mask);
  long[] list=this.table[index];
  if (list != null) {
    int listlen=list.length;
    for (int i=0; i < listlen; i++) {
      if (list[i] == fp)       return true;
    }
  }
  if (count >= threshold) {
    rehash();
    index=(int)(fp & this.mask);
    list=this.table[index];
  }
  int len=(list == null ? 0 : list.length);
  long[] newList=new long[len + 1];
  if (list != null)   System.arraycopy(list,0,newList,0,len);
  newList[len]=fp;
  this.table[index]=newList;
  this.count++;
  return false;
}

public boolean isEmpty(){
  return extOrdering.isEmpty();
}

public void applyLayout(){
  layout.setInitialLocation(getPosition());
  layout.layoutNeurons(getNeuronList());
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public int nice(){
  return Integer.parseInt(fields[18]);
}

float layerSize(int p_76490_1_){
  if ((float)p_76490_1_ < (float)this.heightLimit * 0.3F) {
    return -1.0F;
  }
 else {
    float f=(float)this.heightLimit / 2.0F;
    float f1=f - (float)p_76490_1_;
    float f2=MathHelper.sqrt_float(f * f - f1 * f1);
    if (f1 == 0.0F) {
      f2=f;
    }
 else     if (Math.abs(f1) >= f) {
      return 0.0F;
    }
    return f2 * 0.5F;
  }
}

public static Method findStaticMethod(Class<?> type,String name,Class<?>... args) throws NoSuchMethodException {
  Method method=findMethod(type,name,args);
  if (!Modifier.isStatic(method.getModifiers())) {
    throw new NoSuchMethodException("Method '" + name + "' is not static");
  }
  return method;
}

private void fetchSearchServiceCardsFromServer(String keyword,String categoryId){
  final Map<String,String> params=new HashMap<String,String>(5);
  params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude));
  params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude));
  params.put(HttpConstants.TYPE,HttpConstants.SearchType.SERVICE_CARD);
  params.put(HttpConstants.GROUP_ID,categoryId);
  params.put(HttpConstants.PER,"20");
  params.put(HttpConstants.RADIUS,"50");
  params.put(HttpConstants.TITLE,keyword);
  RetroCallback retroCallback;
  retroCallback=new RetroCallback(this);
  retroCallback.setRequestId(HttpConstants.ApiResponseCodes.SEARCH_SERVICES);
  retroCallbackList.add(retroCallback);
  params.put(HttpConstants.PAGE,"1");
  mYeloApi.getServiceCards(params,retroCallback);
  mSwipeRefreshLayout.setRefreshing(true);
}

public void addPhonenumber(String aPhonenumber){
  if (mPhoneNumbers.indexOf(aPhonenumber) < 0) {
    mPhoneNumbers.add(aPhonenumber);
  }
}

public static final String digitsAndPlusOnly(Matcher matcher){
  StringBuilder buffer=new StringBuilder();
  String matchingRegion=matcher.group();
  for (int i=0, size=matchingRegion.length(); i < size; i++) {
    char character=matchingRegion.charAt(i);
    if (character == '+' || Character.isDigit(character)) {
      buffer.append(character);
    }
  }
  return buffer.toString();
}

boolean compareMethods(Method a,Method b){
  if ((a == null) != (b == null)) {
    return false;
  }
  if (a != null && b != null) {
    if (!a.equals(b)) {
      return false;
    }
  }
  return true;
}

MarkerSegment findMarkerSegment(int tag){
  Iterator iter=markerSequence.iterator();
  while (iter.hasNext()) {
    MarkerSegment seg=(MarkerSegment)iter.next();
    if (seg.tag == tag) {
      return seg;
    }
  }
  return null;
}

private static Reader openInput(String from){
  try {
    return CliUtils.reader(from);
  }
 catch (  IOException e) {
    log.error("Error finding input",e);
    System.exit(1);
    return null;
  }
}

public PublisherConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){
  int n=array.length;
  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];
  System.arraycopy(array,0,newArray,1,n);
  newArray[0]=source;
  return new PublisherConcatArray<>(delayError,newArray);
}

protected void doPublish(String tenantId,List<T> items,String subscriber,int retryCount,long delay) throws Exception {
  String data=mapper.writeValueAsString(items);
  TextMessage tm=session.createTextMessage(data);
  if (tenantId != null) {
    tm.setStringProperty("tenant",tenantId);
  }
  if (subscriber != null) {
    tm.setStringProperty("subscriber",subscriber);
  }
  tm.setIntProperty("retryCount",retryCount);
  if (delay > 0) {
    tm.setLongProperty("_AMQ_SCHED_DELIVERY",System.currentTimeMillis() + delay);
  }
  if (log.isLoggable(Level.FINEST)) {
    log.finest("Publish: " + tm);
  }
  producer.send(tm);
}

@Override public boolean eIsSet(int featureID){
switch (featureID) {
case MappingPackage.ATTRIBUTE__NAME:
    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
case MappingPackage.ATTRIBUTE__VALUE:
  return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);
}
return super.eIsSet(featureID);
}

protected void checkValid() throws URIException {
  if (!(equals(_scheme,DEFAULT_SCHEME) || _scheme == null)) {
    throw new URIException(URIException.PARSING,"wrong class use");
  }
}

public PrivateKeyUsageExtension(Boolean critical,Object value) throws CertificateException, IOException {
  this.extensionId=PKIXExtensions.PrivateKeyUsage_Id;
  this.critical=critical.booleanValue();
  this.extensionValue=(byte[])value;
  DerInputStream str=new DerInputStream(this.extensionValue);
  DerValue[] seq=str.getSequence(2);
  for (int i=0; i < seq.length; i++) {
    DerValue opt=seq[i];
    if (opt.isContextSpecific(TAG_BEFORE) && !opt.isConstructed()) {
      if (notBefore != null) {
        throw new CertificateParsingException("Duplicate notBefore in PrivateKeyUsage.");
      }
      opt.resetTag(DerValue.tag_GeneralizedTime);
      str=new DerInputStream(opt.toByteArray());
      notBefore=str.getGeneralizedTime();
    }
 else     if (opt.isContextSpecific(TAG_AFTER) && !opt.isConstructed()) {
      if (notAfter != null) {
        throw new CertificateParsingException("Duplicate notAfter in PrivateKeyUsage.");
      }
      opt.resetTag(DerValue.tag_GeneralizedTime);
      str=new DerInputStream(opt.toByteArray());
      notAfter=str.getGeneralizedTime();
    }
 else     throw new IOException("Invalid encoding of " + "PrivateKeyUsageExtension");
  }
}

@Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){
  Calendar cal=getCalendar();
  dateTimeUnit.setMonth(1);
  dateTimeUnit.setDay(1);
  List<Period> periods=Lists.newArrayList();
  int year=dateTimeUnit.getYear();
  while (dateTimeUnit.getYear() == year) {
    periods.add(createPeriod(dateTimeUnit,cal));
    dateTimeUnit=cal.plusMonths(dateTimeUnit,2);
  }
  return periods;
}

public static SecretKey createAESKey(){
  try {
    final KeyGenerator kgen=KeyGenerator.getInstance("AES");
    final int keySize=256;
    kgen.init(keySize);
    return kgen.generateKey();
  }
 catch (  final NoSuchAlgorithmException e) {
    e.printStackTrace();
  }
  return null;
}

@Override public void valueChange(ValueChangeEvent e){
  String name=e.getPropertyName();
  Object value=e.getNewValue();
  log.config(name + "=" + value);
  if (value == null)   return;
}

@Deprecated public static JSONObject parseJson(String response) throws JSONException, FacebookError {
  if (response.equals("false")) {
    throw new FacebookError("request failed");
  }
  if (response.equals("true")) {
    response="{value : true}";
  }
  JSONObject json=new JSONObject(response);
  if (json.has("error")) {
    JSONObject error=json.getJSONObject("error");
    throw new FacebookError(error.getString("message"),error.getString("type"),0);
  }
  if (json.has("error_code") && json.has("error_msg")) {
    throw new FacebookError(json.getString("error_msg"),"",Integer.parseInt(json.getString("error_code")));
  }
  if (json.has("error_code")) {
    throw new FacebookError("request failed","",Integer.parseInt(json.getString("error_code")));
  }
  if (json.has("error_msg")) {
    throw new FacebookError(json.getString("error_msg"));
  }
  if (json.has("error_reason")) {
    throw new FacebookError(json.getString("error_reason"));
  }
  return json;
}

public SpyVersions loadVersions() throws XMLException {
  setLoading(true);
  final String urlString=propertyLoader.getProperty(BasePropertyNames.VERSION_INFO_URL) + "?current=" + currentRelease;
  try {
    final URL url=new URL(urlString);
    final String xml=IOUtils.toString(url.openStream());
    versions=(SpyVersions)loadFromString(xml);
  }
 catch (  IOException|NullPointerException e) {
    throw new XMLException("Cannot read version info from " + urlString,e);
  }
  setLoading(false);
  return versions;
}

@RequestMapping(value="/page",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<PageResponse<UserDTO>> findAll(@RequestBody PageRequestByExample<UserDTO> prbe) throws URISyntaxException {
  PageResponse<UserDTO> pageResponse=userDTOService.findAll(prbe);
  return new ResponseEntity<>(pageResponse,new HttpHeaders(),HttpStatus.OK);
}

public void addFooterView(View view){
  mFooterViews.add(view);
  notifyDataSetChanged();
}

public void addFirst(String seq){
  queue=seq + queue.substring(pos);
  pos=0;
}

public boolean isReadOnly(boolean useSessionStatus) throws SQLException {
  if (useSessionStatus && !this.isClosed && versionMeetsMinimum(5,6,5)&& !getUseLocalSessionState()&& getReadOnlyPropagatesToServer()) {
    java.sql.Statement stmt=null;
    java.sql.ResultSet rs=null;
    try {
      try {
        stmt=getMetadataSafeStatement();
        rs=stmt.executeQuery("select @@session.tx_read_only");
        if (rs.next()) {
          return rs.getInt(1) != 0;
        }
      }
 catch (      SQLException ex1) {
        if (ex1.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {
          throw SQLError.createSQLException("Could not retrieve transation read-only status server",SQLError.SQL_STATE_GENERAL_ERROR,ex1,getExceptionInterceptor());
        }
      }
    }
  finally {
      if (rs != null) {
        try {
          rs.close();
        }
 catch (        Exception ex) {
        }
        rs=null;
      }
      if (stmt != null) {
        try {
          stmt.close();
        }
 catch (        Exception ex) {
        }
        stmt=null;
      }
    }
  }
  return this.readOnly;
}

public void testConsume(){
  AtomicInteger sum=new AtomicInteger();
  SubmissionPublisher<Integer> p=basicPublisher();
  CompletableFuture<Void> f=p.consume(null);
  int n=20;
  for (int i=1; i <= n; ++i)   p.submit(i);
  p.close();
  f.join();
  assertEquals((n * (n + 1)) / 2,sum.get());
}

public void exprSetParent(ExpressionNode n){
  super.exprSetParent(n);
  int nArgs=m_argVec.size();
  for (int i=0; i < nArgs; i++) {
    Expression arg=(Expression)m_argVec.elementAt(i);
    arg.exprSetParent(n);
  }
}

public static void cleanDirectory(File directory) throws IOException {
  if (!directory.exists()) {
    String message=directory + " does not exist";
    throw new IllegalArgumentException(message);
  }
  if (!directory.isDirectory()) {
    String message=directory + " is not a directory";
    throw new IllegalArgumentException(message);
  }
  File[] files=directory.listFiles();
  if (files == null) {
    throw new IOException("Failed to list contents of " + directory);
  }
  IOException exception=null;
  for (  File file : files) {
    try {
      forceDelete(file);
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
  }
  if (null != exception) {
    throw exception;
  }
}

public final boolean isRegistered(){
  return !canonicalName.startsWith("x-") && !canonicalName.startsWith("X-");
}

private static DownscaleQuality addConstant(String type){
  init();
  if (constList.containsKey(type)) {
    throw new RuntimeException("Type strings for DownscaleQuality should be unique; " + type + " is declared twice");
  }
  DownscaleQuality q=new DownscaleQuality(type);
  constList.put(type,q);
  return q;
}

public void bail(String message,boolean printUsageStatement){
  Debug.output(message);
  if (printUsageStatement)   printUsage();
  System.exit(0);
}

private void assertTimestampsEqualWithEpsilon(long expected,long actual,int epsilon,String desc){
  assertTrue("Expected a " + desc + " time within "+ epsilon+ "ms of "+ expected+ " but got "+ actual,Math.abs(actual - expected) < epsilon);
}

public SpiderSitemapXMLParser(SpiderParam params){
  super();
  if (params == null) {
    throw new IllegalArgumentException("Parameter params must not be null.");
  }
  this.params=params;
}

public boolean flush(boolean deaccelerated);

public void addHop(int id){
  if (entities == null) {
    return;
  }
  hopsNumber++;
  entities.add(Integer.valueOf(id));
}

protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){
  print("associator doesn't alter original datasets");
  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);
  print("...");
  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;
  boolean[] result=new boolean[2];
  Instances train=null;
  Associator associator=null;
  try {
    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);
    if (missingLevel > 0) {
      addMissing(train,missingLevel,predictorMissing,classMissing);
    }
    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];
  }
 catch (  Exception ex) {
    throw new Error("Error setting up for tests: " + ex.getMessage());
  }
  try {
    Instances trainCopy=new Instances(train);
    associator.buildAssociations(trainCopy);
    compareDatasets(train,trainCopy);
    println("yes");
    result[0]=true;
  }
 catch (  Exception ex) {
    println("no");
    result[0]=false;
    if (m_Debug) {
      println("\n=== Full Report ===");
      print("Problem during building");
      println(": " + ex.getMessage() + "\n");
      println("Here is the dataset:\n");
      println("=== Train Dataset ===\n" + train.toString() + "\n");
    }
  }
  return result;
}

public boolean isEmpty(){
  return mEventQueue.isEmpty();
}

public static void testPrimitiveInstantiation(){
  testPrimitiveInstantiation(false);
}

public void readEntries(TableKelp table,InSegment reader,SegmentEntryCallback cb){
  TempBuffer tBuf=TempBuffer.createLarge();
  byte[] buffer=tBuf.buffer();
  InStore sIn=reader.getStoreRead();
  byte[] tableKey=new byte[TableKelp.TABLE_KEY_SIZE];
  for (int ptr=length() - BLOCK_SIZE; ptr > 0; ptr-=BLOCK_SIZE) {
    sIn.read(getAddress() + ptr,buffer,0,buffer.length);
    int index=0;
    long seq=BitsUtil.readLong(buffer,index);
    index+=8;
    if (seq != getSequence()) {
      log.warning(L.l("Invalid sequence {0} expected {1} at 0x{2}",seq,getSequence(),Long.toHexString(getAddress() + ptr)));
      break;
    }
    System.arraycopy(buffer,index,tableKey,0,tableKey.length);
    index+=tableKey.length;
    if (!Arrays.equals(tableKey,_tableKey)) {
      log.warning(L.l("Invalid table {0} table {1} at 0x{2}",Hex.toShortHex(tableKey),Hex.toShortHex(_tableKey),Long.toHexString(getAddress() + ptr)));
      break;
    }
    int head=index;
    while (head < BLOCK_SIZE && buffer[head] != 0) {
      head=readEntry(table,buffer,head,cb,getAddress());
    }
    boolean isCont=buffer[head + 1] != 0;
    if (!isCont) {
      break;
    }
  }
  tBuf.free();
}

static int numberOfHosts(Map<URI,List<Initiator>> net2InitiatorsMap){
  Set<URI> hostSet=new HashSet<URI>();
  for (  List<Initiator> initiators : net2InitiatorsMap.values()) {
    for (    Initiator init : initiators) {
      hostSet.add(init.getHost());
    }
  }
  return hostSet.size();
}

public void addCertificates(Store certStore) throws CMSException {
  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));
}

protected void processLob(LobMetadata lob,DatabaseMapping mapping,MetadataClass referenceClass,boolean isForMapKey){
  lob.process(mapping,this,referenceClass,isForMapKey);
}

protected AttributesImpl startPrefixMapping(Element element,NamespaceStack namespaceStack) throws SAXException {
  AttributesImpl namespaceAttributes=null;
  Namespace elementNamespace=element.getNamespace();
  if ((elementNamespace != null) && !isIgnoreableNamespace(elementNamespace,namespaceStack)) {
    namespaceStack.push(elementNamespace);
    contentHandler.startPrefixMapping(elementNamespace.getPrefix(),elementNamespace.getURI());
    namespaceAttributes=addNamespaceAttribute(namespaceAttributes,elementNamespace);
  }
  List<Namespace> declaredNamespaces=element.declaredNamespaces();
  for (  Namespace namespace : declaredNamespaces) {
    if (!isIgnoreableNamespace(namespace,namespaceStack)) {
      namespaceStack.push(namespace);
      contentHandler.startPrefixMapping(namespace.getPrefix(),namespace.getURI());
      namespaceAttributes=addNamespaceAttribute(namespaceAttributes,namespace);
    }
  }
  return namespaceAttributes;
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public void printStackTrace(java.io.PrintWriter pw){
  if (rootCause != null) {
    String superString=super.toString();
synchronized (pw) {
      pw.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");
      rootCause.printStackTrace(pw);
    }
  }
 else {
    super.printStackTrace(pw);
  }
}

private static DataFlavor[] convertToArray(List<DataFlavor> dataFlavourList){
  DataFlavor[] array=new DataFlavor[dataFlavourList.size()];
  dataFlavourList.toArray(array);
  return array;
}

public void testChoiceEmptyIconErrorHandling(){
  String xml="";
  xml+=createStartMissionXml("start","Name");
  xml+=createStartChoiceMomentXml("start",0.5,"Example ChoiceMoment Description","choice_2");
  xml+=createChoiceXml("fire","Example Choice Description 1","start",true,false,"test_icon");
  xml+=createChoiceXml("choice_2","Example Choice Description 2","start",false,false,"");
  xml+=createEndChoiceMomentXml();
  xml+=createEndChoiceMomentXml();
  xml+=createEndMissionXml();
  Utils.logDebug(TAG,xml);
  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());
  mMission=new Mission(mMissionData);
  boolean didMissionParseFail=false;
  try {
    mMission.readMoments(momentInputStream);
  }
 catch (  MissionParseException e) {
    e.printStackTrace();
    didMissionParseFail=true;
  }
  Assert.assertEquals(true,didMissionParseFail);
}

public static String translateAttribute(String attributes) throws IOException {
  short[] flags=strAttrToBooleanFlags(attributes);
  StringBuilder sb=new StringBuilder();
  if (flags[READ_ONLY] == YES)   sb.append(" +R");
 else   if (flags[READ_ONLY] == NO)   sb.append(" -R");
  if (flags[HIDDEN] == YES)   sb.append(" +H");
 else   if (flags[HIDDEN] == NO)   sb.append(" -H");
  if (flags[SYSTEM] == YES)   sb.append(" +S");
 else   if (flags[SYSTEM] == NO)   sb.append(" -S");
  if (flags[ARCHIVE] == YES)   sb.append(" +A");
 else   if (flags[ARCHIVE] == NO)   sb.append(" -A");
  return sb.toString();
}

public static int nextIndexId(){
  return msgIdx.getAndIncrement();
}

private void fillFieldValues(){
  if (isCreationPanel) {
    phrase.setText("" + Hearing.DEFAULT_PHRASE);
    outputAmount.setText("" + Hearing.DEFAULT_OUTPUT_AMOUNT);
  }
 else {
    phrase.setText("" + hearingSensor.getPhrase());
    outputAmount.setText("" + hearingSensor.getOutputAmount());
  }
}

public static boolean checkSecurityInfos(String endpoint,Identity clientIdentity,List<SecurityInfo> securityInfos){
  if (clientIdentity.isSecure()) {
    if (securityInfos == null || securityInfos.isEmpty()) {
      LOG.warn("Client '{}' without security info try to connect through the secure endpoint",endpoint);
      return false;
    }
 else {
      for (      SecurityInfo securityInfo : securityInfos) {
        if (checkSecurityInfo(endpoint,clientIdentity,securityInfo)) {
          return true;
        }
      }
      return false;
    }
  }
 else   if (securityInfos != null && !securityInfos.isEmpty()) {
    LOG.warn("Client '{}' must connect using DTLS",endpoint);
    return false;
  }
  return true;
}

public boolean retainAll(AbstractIntList other){
  if (other.size() == 0) {
    if (size == 0)     return false;
    setSize(0);
    return true;
  }
  int limit=other.size() - 1;
  int j=0;
  for (int i=0; i < size; i++) {
    if (other.indexOfFromTo(getQuick(i),0,limit) >= 0)     setQuick(j++,getQuick(i));
  }
  boolean modified=(j != size);
  setSize(j);
  return modified;
}

public static ArrayList<ByteString> byteArraysToStrings(ArrayList<byte[]> byteArrays){
  if (byteArrays == null) {
    return null;
  }
  ArrayList<ByteString> byteStrings=new ArrayList<ByteString>();
  for (  byte[] bytes : byteArrays) {
    byteStrings.add(ByteString.of(bytes));
  }
  return byteStrings;
}

void addIndex(IndexType type,List<String> columnNames){
  IndexDefinition index=new IndexDefinition();
  index.indexName=tableName + "_" + indexes.size();
  index.columnNames=New.arrayList(columnNames);
  index.type=type;
  indexes.add(index);
}

public Builder withKeyStoreKeyPassword(String keyStoreKeyPassword){
  properties.setProperty(NettyOptions.SSL_KEY_STORE_KEY_PASSWORD,Assert.notNull(keyStoreKeyPassword,"trustStorePassword"));
  return this;
}

public ZookeeperStateMachineEnsemble(CuratorFramework curatorClient,String basePath){
  this(curatorClient,basePath,true,DEFAULT_LOGSIZE);
}

public static CustomShortcutSet createShortcut(char ch){
  Character mnemonic=Character.valueOf(ch);
  String shortcut=SystemInfo.isMac && SystemInfo.isJavaVersionAtLeast("1.7") ? "control alt pressed " + mnemonic : "alt pressed " + mnemonic;
  return CustomShortcutSet.fromString(shortcut);
}

public void gc(){
  System.gc();
}

private Node deleteMin(Node x){
  if (x.left == null)   return x.right;
  x.left=deleteMin(x.left);
  x.size=1 + size(x.left) + size(x.right);
  x.height=1 + Math.max(height(x.left),height(x.right));
  return balance(x);
}

public static void resetCounters(){
  errors=0;
  warnings=0;
}

public void write(CeylonConfig config,File source,OutputStream out) throws IOException {
  if (source.isFile()) {
    InputStream in=null;
    try {
      in=new FileInputStream(source);
      write(config,in,out);
    }
  finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
 else {
    throw new FileNotFoundException("Couldn't open source configuration file");
  }
}

protected Map<TargetClass,List<Attribute.TypeCompound>> sift(final Iterable<Attribute.TypeCompound> typeCompounds){
  final Map<TargetClass,List<Attribute.TypeCompound>> targetClassToCompound=new EnumMap<>(TargetClass.class);
  for (  TargetClass targetClass : TargetClass.values()) {
    targetClassToCompound.put(targetClass,new ArrayList<TypeCompound>());
  }
  for (  final Attribute.TypeCompound typeCompound : typeCompounds) {
    final TargetType typeCompoundTarget=typeCompound.position.type;
    final List<Attribute.TypeCompound> destList;
    if (ElementAnnotationUtil.contains(typeCompoundTarget,annotatedTargets())) {
      destList=targetClassToCompound.get(TargetClass.TARGETED);
    }
 else     if (ElementAnnotationUtil.contains(typeCompoundTarget,validTargets())) {
      destList=targetClassToCompound.get(TargetClass.VALID);
    }
 else {
      destList=targetClassToCompound.get(TargetClass.INVALID);
    }
    destList.add(typeCompound);
  }
  return targetClassToCompound;
}

protected synchronized void updateLocation(Point newLocn){
  prev=locn;
  locn=newLocn;
  if (Math.abs(locn.x - prev.x) > hysteresis || Math.abs(locn.y - prev.y) > hysteresis) {
    if (timer.isRunning())     timer.stop();
  }
 else {
    if (!timer.isRunning())     timer.start();
  }
}

@Override public int compareTo(Value o){
  if (o instanceof StringVal) {
    return str.compareTo(((StringVal)o).str);
  }
 else {
    return 0;
  }
}

public void bind(IntegerProperty property,int value){
  if (isAchieved())   return;
  bind(property.greaterThanOrEqualTo(value));
  BooleanBinding bb=property.greaterThanOrEqualTo(value / 2);
  progressListener=null;
  bb.addListener(progressListener);
}

public void removeColumn(Column c){
  int idx=m_columns.indexOf(c);
  if (idx < 0) {
    throw new IllegalArgumentException("No such column.");
  }
  removeColumn(idx);
}

public synchronized void write(String logData){
  if (logEnabled) {
    histData.append(logData);
    histData.revalidate();
synchronized (histData) {
      histData.notify();
    }
  }
}

public void closeConnection(){
  try {
    if (m_connection != null) {
      m_connection.close();
    }
  }
 catch (  final SQLException exception) {
    NaviLogger.severe("Error: Closing the database connection failed with exception: %s",exception);
  }
  m_connection=null;
}

public StructEmBayesSearchEditor(StructEmBayesSearchRunner semBayesEstWrapper){
  this(semBayesEstWrapper.getEstimatedBayesIm(),semBayesEstWrapper.getDataSet());
}

public void removeActionListener(ActionListener listener){
  forwardProjectionButton.addActionListener(listener);
  backProjectionButton.addActionListener(listener);
}

public static void f(String tag,String msg,Object... args){
  if (sLevel > LEVEL_FATAL) {
    return;
  }
  if (args.length > 0) {
    msg=String.format(msg,args);
  }
  Log.wtf(tag,msg);
}

boolean isLiteral(int index){
  if (isValidMask() && index < string.length()) {
    return literalMask.get(index);
  }
  return false;
}

protected Granularity generateGranularity(String granularity,GranularityParser granularityParser) throws BadApiRequestException {
  try {
    return granularityParser.parseGranularity(granularity);
  }
 catch (  GranularityParseException e) {
    LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity);
    throw new BadApiRequestException(e.getMessage());
  }
}

public WordIterator(){
  this(Locale.getDefault());
}

@Override public void close(){
  if (leaf != null) {
    leaf.close();
    leaf=null;
  }
  ccMgr.releaseIndexLocks();
  dirsMayBeUpdated=null;
}

public void pushFile(String local,String remote,ISyncProgressMonitor monitor) throws SyncException, IOException, TimeoutException {
  File f=new File(local);
  if (!f.exists()) {
    throw new SyncException(SyncError.NO_LOCAL_FILE);
  }
  if (f.isDirectory()) {
    throw new SyncException(SyncError.LOCAL_IS_DIRECTORY);
  }
  monitor.start((int)f.length());
  doPushFile(local,remote,monitor);
  monitor.stop();
}

public String process(Item seg) throws ProcessException {
  return segCodaCtype(seg,"f");
}

public void resize(int size){
  if (buffer != null) {
    if (size >= 0 && size < buffer.size()) {
      int oldLastIndex=buffer.size() - 1;
      int newLastIndex=size - 1;
      for (int i=oldLastIndex; i > newLastIndex; i--) {
        buffer.remove(i);
      }
    }
  }
 else {
    if (size >= 0 && size < offsets.size()) {
      long offset=offsets.get(size);
      byteCache.resize(key,offset);
      ArrayList<Long> newOffsets=new ArrayList<Long>(size);
      for (int i=0; i < size; i++) {
        newOffsets.add(offsets.get(i));
      }
      offsets=newOffsets;
    }
  }
}

public static byte[] splitUint8To2bytes(char uint8){
  if (uint8 < 0 || uint8 > 0xff) {
    throw new RuntimeException("Out of Boundary");
  }
  String hexString=Integer.toHexString(uint8);
  byte low;
  byte high;
  if (hexString.length() > 1) {
    high=(byte)Integer.parseInt(hexString.substring(0,1),16);
    low=(byte)Integer.parseInt(hexString.substring(1,2),16);
  }
 else {
    high=0;
    low=(byte)Integer.parseInt(hexString.substring(0,1),16);
  }
  byte[] result=new byte[]{high,low};
  return result;
}

protected void sprint(short shortField){
  sprint(String.valueOf(shortField));
}

protected void initFromDir(String prefix,File dir){
  File[] files;
  files=dir.listFiles(new ClassFileFilter());
  for (  File file : files) {
    if (prefix == null) {
      add(file.getName());
    }
 else {
      add(prefix + "." + file.getName());
    }
  }
  files=dir.listFiles(new DirectoryFilter());
  for (  File file : files) {
    if (prefix == null) {
      initFromDir(file.getName(),file);
    }
 else {
      initFromDir(prefix + "." + file.getName(),file);
    }
  }
}

public void removeBandwidth(String name){
  if (name != null)   if (bandwidthList != null) {
    for (int i=0; i < bandwidthList.size(); i++) {
      Object o=bandwidthList.elementAt(i);
      if (o instanceof BandwidthField) {
        BandwidthField b=(BandwidthField)o;
        try {
          String type=b.getType();
          if (type != null) {
            if (name.equals(type)) {
              bandwidthList.remove(b);
            }
          }
        }
 catch (        SdpParseException e) {
        }
      }
    }
  }
}

protected static void succeed(){
  System.exit(0);
}

public static long now(){
  return System.currentTimeMillis();
}

public static String collapseNewlines(String argStr){
  char last=argStr.charAt(0);
  StringBuffer argBuf=new StringBuffer();
  for (int cIdx=0; cIdx < argStr.length(); cIdx++) {
    char ch=argStr.charAt(cIdx);
    if (ch != '\n' || last != '\n') {
      argBuf.append(ch);
      last=ch;
    }
  }
  return argBuf.toString();
}

LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root,String suffix,T value){
  LinkedList<TrieNode<T>> result=new LinkedList<>();
  String rootPrefix=root.getPrefix();
  for (int i=1, suffixSize=suffix.length(); i <= suffixSize; i++) {
    String newPrefix=rootPrefix + suffix.substring(0,i);
    TrieNode<T> newNode=TrieNode.makeNode(newPrefix);
    result.add(newNode);
    root.addChild(newNode);
    root=newNode;
  }
  root.setValue(value);
  return result;
}

@Override protected String generateJavadoc(int index) throws Exception {
  throw new Exception("Not used!");
}

public Properties extractProperties(Iterable<Map.Entry<String,String>> propSrc){
  Properties result=new Properties();
  for (  Map.Entry<String,String> entry : propSrc) {
    String name=entry.getKey();
    if (isNamespacedProperty(name)) {
      String val=entry.getValue();
      result.setProperty(name,val);
    }
  }
  return result;
}

public T removeLast(){
  if (rows.size() != 0)   rows.remove(rows.size() - 1);
  return instance();
}

public static void ensureVisible(String componentName){
  if (verbose) {
    log("ensureVisible(" + componentName + ")");
  }
  ensureVisible(findByName(componentName));
}

public char next(){
  return pos < in.length() ? in.charAt(pos++) : '\0';
}

public void endRepresentation(){
  if (!representationProtectionsSet) {
    if (currentRepresentationProtections != null) {
      Collections.sort(currentRepresentationProtections,this);
    }
    representationProtections=currentRepresentationProtections;
    representationProtectionsSet=true;
  }
 else {
    if (currentRepresentationProtections == null) {
      Assertions.checkState(representationProtections == null);
    }
 else {
      Collections.sort(currentRepresentationProtections,this);
      Assertions.checkState(currentRepresentationProtections.equals(representationProtections));
    }
  }
  currentRepresentationProtections=null;
}

public StandardPieSectionLabelGenerator(String labelFormat){
  this(labelFormat,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance());
}

public static CharSequence[] split(CharSequence line,int delimiter){
  CharSequence[] tokens0=split(line,delimiter,N);
  if (tokens0.length < N) {
    return tokens0;
  }
 else {
    CharSequence[] tokens1=split(tokens0[N - 1],delimiter);
    CharSequence[] tokens2=new CharSequence[tokens0.length + tokens1.length - 1];
    System.arraycopy(tokens0,0,tokens2,0,tokens0.length - 1);
    System.arraycopy(tokens1,0,tokens2,tokens0.length - 1,tokens1.length);
    return tokens2;
  }
}

public CCTimer(Object t,String s,float seconds){
  target=t;
  selector=s;
  interval=seconds;
  elapsed=-1;
  try {
    Class<?> cls=target.getClass();
    invocation=cls.getMethod(s,Float.TYPE);
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}

public Tuple read() throws IOException {
  try {
    Map fields=jsonTupleStream.next();
    if (fields == null) {
      Map m=new HashMap();
      m.put("EOF",true);
      return new Tuple(m);
    }
 else {
      String msg=(String)fields.get("EXCEPTION");
      if (msg != null) {
        HandledException ioException=new HandledException(msg);
        throw ioException;
      }
      if (trace) {
        fields.put("_CORE_",this.baseUrl);
        if (slice != null) {
          fields.put("_SLICE_",slice);
        }
      }
      if (fieldMappings != null) {
        fields=mapFields(fields,fieldMappings);
      }
      return new Tuple(fields);
    }
  }
 catch (  HandledException e) {
    throw new IOException("--> " + this.baseUrl + ":"+ e.getMessage());
  }
catch (  Exception e) {
    throw new IOException("--> " + this.baseUrl + ": An exception has occurred on the server, refer to server log for details.",e);
  }
}

private String compute(String left,double right,boolean isInteger){
  if (left == null && Double.isNaN(right)) {
    return null;
  }
  if (isInteger && right == (int)right) {
    return (left == null ? "" : left) + (int)right;
  }
 else   if (Double.isInfinite(right)) {
    return (left == null ? "" : left) + Tools.formatNumber(right);
  }
 else {
    return (left == null ? "" : left) + (Double.isNaN(right) ? "" : right);
  }
}

public void removePropertyChangeListener(final PropertyChangeListener listener){
  propertyChangeSupport.removePropertyChangeListener(listener);
}

public void loadXML(Node stepnode,List<DatabaseMeta> databases,Map<String,Counter> counters) throws KettleXMLException {
  try {
    this.tabelName=XMLHandler.getTagValue(stepnode,"TableName");
    this.outputRowSize=XMLHandler.getTagValue(stepnode,"outputRowSize");
    this.factDimLensString=XMLHandler.getTagValue(stepnode,"factDimLensString");
    this.tableName=XMLHandler.getTagValue(stepnode,"tableName");
    this.databaseName=XMLHandler.getTagValue(stepnode,"databaseName");
    this.dimensionCount=XMLHandler.getTagValue(stepnode,"dimensionCount");
    this.noDictionaryDims=XMLHandler.getTagValue(stepnode,"noDictionaryDims");
    this.noDictionaryDimsMapping=XMLHandler.getTagValue(stepnode,"noDictionaryDimsMapping");
    this.complexDimensionCount=XMLHandler.getTagValue(stepnode,"complexDimensionCount");
    this.measureCount=XMLHandler.getTagValue(stepnode,"measureCount");
    this.updateMemberRequest=XMLHandler.getTagValue(stepnode,"isUpdateMemberRequest");
    this.measureDataType=XMLHandler.getTagValue(stepnode,"measureDataType");
    this.partitionID=XMLHandler.getTagValue(stepnode,"partitionID");
    this.segmentId=XMLHandler.getTagValue(stepnode,"segmentId");
    this.taskNo=XMLHandler.getTagValue(stepnode,"taskNo");
  }
 catch (  Exception e) {
    throw new KettleXMLException("Unable to read step info from XML node",e);
  }
}

public final int[] hashSignature(final int[] signature){
  int[] hash=new int[stages];
  int rows=signature.length / stages;
  for (int i=0; i < signature.length; i++) {
    int stage=Math.min(i / rows,stages - 1);
    hash[stage]=(int)((hash[stage] + (long)signature[i] * LARGE_PRIME) % buckets);
  }
  return hash;
}

void onConsumeFinished(Purchase purchase,IabResult result);

public void cast(final Type from,final Type to){
  if (from != to) {
    if (from == Type.DOUBLE_TYPE) {
      if (to == Type.FLOAT_TYPE) {
        mv.visitInsn(Opcodes.D2F);
      }
 else       if (to == Type.LONG_TYPE) {
        mv.visitInsn(Opcodes.D2L);
      }
 else {
        mv.visitInsn(Opcodes.D2I);
        cast(Type.INT_TYPE,to);
      }
    }
 else     if (from == Type.FLOAT_TYPE) {
      if (to == Type.DOUBLE_TYPE) {
        mv.visitInsn(Opcodes.F2D);
      }
 else       if (to == Type.LONG_TYPE) {
        mv.visitInsn(Opcodes.F2L);
      }
 else {
        mv.visitInsn(Opcodes.F2I);
        cast(Type.INT_TYPE,to);
      }
    }
 else     if (from == Type.LONG_TYPE) {
      if (to == Type.DOUBLE_TYPE) {
        mv.visitInsn(Opcodes.L2D);
      }
 else       if (to == Type.FLOAT_TYPE) {
        mv.visitInsn(Opcodes.L2F);
      }
 else {
        mv.visitInsn(Opcodes.L2I);
        cast(Type.INT_TYPE,to);
      }
    }
 else {
      if (to == Type.BYTE_TYPE) {
        mv.visitInsn(Opcodes.I2B);
      }
 else       if (to == Type.CHAR_TYPE) {
        mv.visitInsn(Opcodes.I2C);
      }
 else       if (to == Type.DOUBLE_TYPE) {
        mv.visitInsn(Opcodes.I2D);
      }
 else       if (to == Type.FLOAT_TYPE) {
        mv.visitInsn(Opcodes.I2F);
      }
 else       if (to == Type.LONG_TYPE) {
        mv.visitInsn(Opcodes.I2L);
      }
 else       if (to == Type.SHORT_TYPE) {
        mv.visitInsn(Opcodes.I2S);
      }
    }
  }
}

private void addTriggerGroupName(String groupName) throws JobPersistenceException, ResourceException {
  addRepoListName(groupName,TRIGGER_GROUP_NAMES_RESOURCE_PATH,"names");
}

public String readString() throws IOException {
  int firstByte=readByte();
  int length=readInt(firstByte,PREFIX_8_BITS);
  byte[] encoded=new byte[length];
  bytesLeft-=length;
  in.readFully(encoded);
  return new String(encoded,"UTF-8");
}

private synchronized void clearTempFiles(){
  if ((tempFiles != null) && (tempFiles.size() > 0)) {
    Iterator it=tempFiles.iterator();
    File file=null;
    while (it.hasNext()) {
      file=(File)it.next();
      file.delete();
    }
    tempFiles.clear();
  }
}

private Bitmap readAndDecompressThumbnail(File file){
  try {
    if (file.length() > 0) {
      FileInputStream instream=new FileInputStream(file);
      ReadableByteChannel bytechan=Channels.newChannel(instream);
      ByteBuffer buff=ByteBuffer.allocateDirect((int)file.length());
      if (buff != null) {
        bytechan.read(buff);
        instream.close();
        buff.rewind();
        PDQImage pthumb=DecompressionService.decompressThumbnailImage(buff);
        if (pthumb != null) {
          Bitmap bm=ConversionService.convertPDQImageToBitmap(pthumb,false);
          pthumb.close();
          return bm;
        }
      }
    }
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  return null;
}

public void testSubmitRunnable() throws Throwable {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    Future<?> future=e.submit(new NoOpRunnable());
    assertNull(future.get());
    assertTrue(future.isDone());
    assertFalse(future.isCancelled());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}

public Rectangle2D shrink(Rectangle2D area,Rectangle2D result){
  if (result == null) {
    result=new Rectangle2D.Double();
  }
  result.setRect(area.getX() + this.left,area.getY() + this.top,area.getWidth() - this.left - this.right,area.getHeight() - this.top - this.bottom);
  return result;
}

public static String assertJQ(SolrQueryRequest req,String... tests) throws Exception {
  return assertJQ(req,JSONTestUtil.DEFAULT_DELTA,tests);
}

protected void buildAbsoluteStats(String name,long value,long time) throws InterruptedException {
  List<XYDataItem> stats=statsCollection.getStats(name);
  if (stats == null) {
    stats=statsCollection.newStats(name,maxSeries);
  }
 else {
    XYDataItem data=new XYDataItem(time,value);
    statsCollection.lockForUpdate();
    try {
      stats.add(data);
      houseKeepStats(stats);
    }
  finally {
      statsCollection.releaseLock();
    }
    if (listeners != null) {
      StatsCollectionEvent event=new StatsCollectionEvent(name,data);
      for (      StatsCollectionListener listener : listeners) {
        if (listener.isEnabled()) {
          listener.statsCollected(event);
        }
      }
    }
  }
}

@Override public void run(){
  amIActive=true;
  String demHeader=null;
  String streamHeadsHeader=null;
  String elevationModifiedHeader=null;
  String correctedDemHeader=null;
  List<StreamHead> streamHeadList=new ArrayList<>();
  int counter=0;
  float progress=0;
  if (args.length <= 0) {
    showFeedback("Plugin parameters have not been set.");
    return;
  }
  for (int i=0; i < args.length; i++) {
    if (i == 0) {
      demHeader=args[i];
    }
 else     if (i == 1) {
      streamHeadsHeader=args[i];
    }
 else     if (i == 2) {
      elevationModifiedHeader=args[i];
    }
 else     if (i == 3) {
      correctedDemHeader=args[i];
    }
 else     if (i == 4) {
      maxRadius=Double.parseDouble(args[i]);
    }
  }
  if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) {
    showFeedback("One or more of the input parameters have not been set properly.");
    return;
  }
  try {
    dem=new WhiteboxRaster(demHeader,"r");
    streamHeads=new WhiteboxRaster(streamHeadsHeader,"r");
    numRows=dem.getNumberRows();
    numCols=dem.getNumberColumns();
    noData=dem.getNoDataValue();
    gridRes=dem.getCellSizeX();
    elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);
    elevationModified.setPreferredPalette("blueyellow.pal");
    elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);
    elevationModified.setZUnits("dimensionless");
    correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);
    correctedDEM.setPreferredPalette("blueyellow.pal");
    correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);
    correctedDEM.setZUnits("dimensionless");
    if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) {
      showFeedback("Input images must have the same dimensions.");
      return;
    }
    updateProgress("Loop 1 of 4:",0);
    for (int row=0; row < numRows; row++) {
      for (int col=0; col < numCols; col++) {
        if (dem.getValue(row,col) != noData) {
          elevationModified.setValue(row,col,0);
        }
 else {
          elevationModified.setValue(row,col,noData);
        }
      }
      if (cancelOp) {
        cancelOperation();
        return;
      }
      progress=(float)(100f * row / (numRows - 1));
      updateProgress("Loop 1 of 4:",(int)progress);
    }
    updateProgress("Loop 2 of 4:",0);
    for (int row=0; row < numRows; row++) {
      for (int col=0; col < numCols; col++) {
        if (streamHeads.getValue(row,col) == 1) {
          streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col)));
        }
      }
      if (cancelOp) {
        cancelOperation();
        return;
      }
      progress=(float)(100f * row / (numRows - 1));
      updateProgress("Loop 2 of 4:",(int)progress);
    }
    streamHeadList=OrderStreamHeads(streamHeadList);
    updateProgress("Loop 3 of 4:",0);
    for (    StreamHead streamHead : streamHeadList) {
      CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord());
      counter=counter + 1;
      if (cancelOp) {
        cancelOperation();
        return;
      }
      progress=(float)(100f * counter / streamHeadList.size());
      updateProgress("Loop 3 of 4:",(int)progress);
    }
    updateProgress("Loop 4 of 4:",0);
    for (int row=0; row < numRows; row++) {
      for (int col=0; col < numCols; col++) {
        if (elevationModified.getValue(row,col) != noData) {
          correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col));
        }
 else {
          correctedDEM.setValue(row,col,noData);
        }
      }
      if (cancelOp) {
        cancelOperation();
        return;
      }
      progress=(float)(100f * row / (numRows - 1));
      updateProgress("Loop 4 of 4:",(int)progress);
    }
    elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");
    elevationModified.addMetadataEntry("Created on " + new Date());
    correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");
    correctedDEM.addMetadataEntry("Created on " + new Date());
    dem.close();
    streamHeads.close();
    elevationModified.close();
    correctedDEM.close();
    returnData(correctedDemHeader);
  }
 catch (  Exception e) {
    showFeedback(e.getMessage());
  }
 finally {
    updateProgress("Progress: ",0);
    amIActive=false;
    myHost.pluginComplete();
  }
}

protected void serialize(String filename){
  classifier.serializeClassifier(filename);
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return BEGIN_IN_BOTH;
case 2:
  return NEWINT;
case 3:
return NEWBYTE;
case 4:
return NEWSHORT;
case 5:
return NEWLONG;
case 6:
return NEWDOUBLE;
case 7:
return NEWSTRUCT;
case 8:
return NEWLIST;
case 9:
return NEWSET;
case 10:
return NEWMAP;
case 11:
return NEWSTRING;
case 12:
return END_IN_BOTH;
default :
return null;
}
}

public boolean isPartitionTag(String field){
  if (partitions == null || (!isTag(field))) {
    return false;
  }
  for (  String partition : partitions) {
    if (partition.equals(field)) {
      return true;
    }
  }
  return false;
}

protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){
  List blocks=container.getBlocks();
  Block b=(Block)blocks.get(0);
  Size2D s=b.arrange(g2,RectangleConstraint.NONE);
  double width=constraint.getWidth();
  Rectangle2D bounds=new Rectangle2D.Double((width - s.width) / 2.0,0.0,s.width,s.height);
  b.setBounds(bounds);
  return new Size2D((width - s.width) / 2.0,s.height);
}

private Object processExecute(Statement proxy,Method method,Object[] args) throws Throwable {
  long startTime=logSlowQuery ? System.currentTimeMillis() : 0L;
  try {
    if (method.getName() == "executeQuery")     return newProxiedResultSet(proxy,method,args);
    return targetInvoke(method,args);
  }
  finally {
    if (logSlowQuery)     logQuery(proxy,args,startTime);
  }
}

int boundedIndexOf(String string,char search,int start,int end){
  int retValue=string.indexOf(search,start);
  if (retValue >= end) {
    return -1;
  }
  return retValue;
}

public int incr(T k,int delta){
  Integer i=counts.get(k);
  if (i == null) {
    i=0;
  }
  int next=i.intValue() + delta;
  if (next < 0) {
    throw new java.lang.ArithmeticException();
  }
  if (next == 0) {
    counts.remove(k);
  }
 else {
    counts.put(k,i + delta);
  }
  return i;
}

public void send(final OscPacket thePacket,final TcpClient theClient){
  theClient.send(thePacket.getBytes());
}

@Override @SuppressWarnings("unchecked") public void keyTyped(KeyEvent evt){
  int modifiers=evt.getModifiers();
  char c=evt.getKeyChar();
  if (c != KeyEvent.CHAR_UNDEFINED && (modifiers & InputEvent.ALT_MASK) == 0) {
    if (c >= 0x20 && c != 0x7f) {
      KeyStroke keyStroke=KeyStroke.getKeyStroke(Character.toUpperCase(c));
      Object o=currentBindings.get(keyStroke);
      if (o instanceof Hashtable) {
        currentBindings=(Hashtable)o;
        return;
      }
 else       if (o instanceof ActionListener) {
        currentBindings=bindings;
        executeAction((ActionListener)o,evt.getSource(),String.valueOf(c));
        return;
      }
      currentBindings=bindings;
      if (grabAction != null) {
        handleGrabAction(evt);
        return;
      }
      if (repeat && Character.isDigit(c)) {
        repeatCount*=10;
        repeatCount+=(c - '0');
        return;
      }
      executeAction(INSERT_CHAR,evt.getSource(),String.valueOf(evt.getKeyChar()));
      repeatCount=0;
      repeat=false;
    }
  }
}

public static Map<String,MappedClass> fillInTheGaps(Map<String,MappedClass> mappedClasses,MappingMode mode){
  for (  String originalName : mappedClasses.keySet()) {
    mappedClasses=fillGap(mappedClasses.get(originalName),mappedClasses,mode);
  }
  return mappedClasses;
}

private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  if (name == null) {
    if (types != null) {
      throw new InvalidObjectException("cannot have types with null name");
    }
  }
 else {
    try {
      check();
    }
 catch (    RuntimeException e) {
      rethrow(e);
    }
  }
  if (constraints != null && constraints.isEmpty()) {
    throw new InvalidObjectException("constraints cannot be empty");
  }
}

public static Script createMultiSigInputScriptBytes(List<byte[]> signatures){
  checkArgument(signatures.size() <= 16);
  ScriptBuilder builder=new ScriptBuilder();
  builder.smallNum(0);
  for (  byte[] signature : signatures)   builder.data(signature);
  return builder.build();
}

public void deleteInstances(int[] rowIndices){
  int i;
  Arrays.sort(rowIndices);
  addUndoPoint();
  m_IgnoreChanges=true;
  for (i=rowIndices.length - 1; i >= 0; i--) {
    deleteInstanceAt(rowIndices[i],false);
  }
  m_IgnoreChanges=false;
  notifyListener(new TableModelEvent(this,rowIndices[0],rowIndices[rowIndices.length - 1],TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));
}

public synchronized <T extends EventListener>void add(Class<T> t,T l){
  if (l == null) {
    return;
  }
  if (!t.isInstance(l)) {
    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);
  }
  if (listenerList == NULL_ARRAY) {
    listenerList=new Object[]{t,l};
  }
 else {
    int i=listenerList.length;
    Object[] tmp=new Object[i + 2];
    System.arraycopy(listenerList,0,tmp,0,i);
    tmp[i]=t;
    tmp[i + 1]=l;
    listenerList=tmp;
  }
}

public static void gc2gc(double c1[],int m1,double g1,double c2[],int m2,double g2){
  double[] gc2gc_buff=Arrays.copyOf(c1,m1 + 1);
  c2[0]=gc2gc_buff[0];
  for (int i=1; i <= m2; i++) {
    double ss1=0.0;
    double ss2=0.0;
    int min=m1 < i ? m1 : i - 1;
    for (int k=1; k <= min; k++) {
      int mk=i - k;
      double cc=gc2gc_buff[k] * c2[mk];
      ss2+=k * cc;
      ss1+=mk * cc;
    }
    if (i <= m1)     c2[i]=gc2gc_buff[i] + (g2 * ss2 - g1 * ss1) / i;
 else     c2[i]=(g2 * ss2 - g1 * ss1) / i;
  }
}

public static boolean between(Date baseDate,Date startDate,Date endDate){
  if (startDate.equals(endDate) || endDate.before(startDate)) {
    return false;
  }
  if ((startDate.before(baseDate) || startDate.equals(baseDate)) && (endDate.after(baseDate) || endDate.equals(baseDate))) {
    return true;
  }
  return false;
}

public void addListener(final TimeoutEventListener listener){
  final long timeout=listener.getTimeout();
  if (timeout > 0) {
    listeners.add(listener);
synchronized (stateLock) {
      pendingListenerMinDelay=Math.min(pendingListenerMinDelay,timeout);
      stateLock.notifyAll();
    }
  }
}

public static String[] convertStrings(List<String> strings){
  String[] ret=new String[strings.size()];
  for (int i=0; i < ret.length; i++) {
    ret[i]=strings.get(i);
  }
  return ret;
}

public static String transformToolTipText(final String description,final boolean addHTMLTags,final int lineLength,final boolean escapeSlashes,final boolean escapeHTML){
  String completeText=description.trim();
  if (escapeHTML) {
    completeText=Tools.escapeHTML(completeText);
  }
  if (escapeSlashes) {
    completeText=completeText.replaceAll("/","&#47;");
  }
  StringBuffer result=new StringBuffer();
  if (addHTMLTags) {
    result.append("<html>");
  }
  completeText=Tools.transformAllLineSeparators(completeText);
  String[] lines=completeText.split("\n");
  for (  String text : lines) {
    boolean first=true;
    while (text.length() > lineLength) {
      int spaceIndex=text.indexOf(" ",lineLength);
      if (!first) {
        result.append("<br>");
      }
      first=false;
      if (spaceIndex >= 0) {
        result.append(text.substring(0,spaceIndex));
        text=text.substring(spaceIndex + 1);
      }
 else {
        result.append(text);
        text="";
      }
    }
    if (!first && text.length() > 0) {
      result.append("<br>");
    }
    result.append(text);
    result.append("<br>");
  }
  if (addHTMLTags) {
    result.append("</html>");
  }
  return result.toString();
}

@Override public void write(byte[] buffer,int offset,int length){
  if (isClosed() || isHead()) {
    return;
  }
  int byteLength=_offset;
  while (true) {
    int sublen=Math.min(length,SIZE - byteLength);
    System.arraycopy(buffer,offset,_buffer,byteLength,sublen);
    offset+=sublen;
    length-=sublen;
    byteLength+=sublen;
    if (length <= 0) {
      break;
    }
    _offset=byteLength;
    flushByteBuffer();
    byteLength=_offset;
  }
  _offset=byteLength;
}

public ClientHttpRequest(URLConnection connection) throws IOException {
  this.connection=connection;
  connection.setDoOutput(true);
  connection.setDoInput(true);
  connection.setRequestProperty("Content-Type","multipart/form-data; boundary=" + boundary);
}

public void characters(String characters) throws SAXException {
  final int len=characters.length();
  if (len > m_charsBuff.length) {
    m_charsBuff=new char[len * 2 + 1];
  }
  characters.getChars(0,len,m_charsBuff,0);
  characters(m_charsBuff,0,len);
}

private void appendTag(String tagName,String value){
  xml.append("\n<");
  xml.append(tagName);
  xml.append("><![CDATA[");
  xml.append(value);
  xml.append("]]></");
  xml.append(tagName);
  xml.append(">");
}

@Override public CertificateTokenValidationExtraInfo extraInfo(){
  return extraInfo;
}

public void addTopLevelContents(Collection<ContentElement> contents){
  topLevelContents.addAll(contents);
}

public static void withInstance(Map<String,Object> args,Closure c) throws SQLException, ClassNotFoundException {
  Sql sql=null;
  try {
    sql=newInstance(args);
    c.call(sql);
  }
  finally {
    if (sql != null)     sql.close();
  }
}

public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {
  throw new UnsupportedOperationException(String.valueOf(this));
}

private boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName) throws PolicyException {
  ResourceIndex resourceIndex=(ResourceIndex)resourceIndices.get(resourceType.getName());
  if (resourceIndex == null) {
    resourceIndex=refreshResourceIndexFromDataStore(resourceType);
  }
  return resourceIndex.addIndexEntry(resourceName,policyName);
}

public void ddSolve(Set<Node> qryNodes){
  long solve_time=0, prepare_time=0;
  if (hasExecuted == false)   solve();
  if (ddPrepared == false || offlineProcessor == null) {
    offlineProcessor=new OfflineProcessor(this);
    IFigureManager.cleanCache();
    ddPrepared=true;
    ps.println();
    ps.println("==> Entering demand-driven mode (experimental).");
  }
  int init_size=qryNodes.size();
  if (init_size == 0) {
    ps.println("Please provide at least one pointer.");
    return;
  }
  Date prepare_begin=new Date();
  offlineProcessor.init();
  offlineProcessor.addUserDefPts(qryNodes);
  offlineProcessor.runOptimizations();
  Date prepare_end=new Date();
  prepare_time+=prepare_end.getTime() - prepare_begin.getTime();
  Date begin=new Date();
  prepareNextRun();
  nodeGenerator.initFlowGraph(this);
  solveConstraints();
  Date end=new Date();
  solve_time+=end.getTime() - begin.getTime();
  ps.println();
  ps.printf("[ddGeom] Preprocessing time: %.2f seconds\n",(double)prepare_time / 1000);
  ps.printf("[ddGeom] Main propagation time: %.2f seconds\n",(double)solve_time / 1000);
}

private static void deleteFrom(int deleteAt,int[] starts,int numStarts){
  while (starts[--numStarts] > deleteAt) {
    starts[numStarts]-=1;
  }
}

public static EventTypeMetadata createBeanType(String name,Class clazz,boolean isPreConfiguredStatic,boolean isPreConfigured,boolean isConfigured,TypeClass typeClass){
  Set<String> secondaryNames=null;
  if (name == null) {
    name=clazz.getName();
  }
 else {
    if (!name.equals(clazz.getName())) {
      secondaryNames=new LinkedHashSet<String>();
      secondaryNames.add(clazz.getName());
    }
  }
  return new EventTypeMetadata(name,secondaryNames,typeClass,isPreConfiguredStatic,isPreConfigured,isConfigured,ApplicationType.CLASS,false);
}

private boolean reverseIt(){
  if (!isActive())   throw new IllegalStateException("Allocation already reversed (not active)");
  MPeriod.testPeriodOpen(getCtx(),getDateTrx(),MPeriodControl.DOCBASETYPE_PaymentAllocation,getAD_Org_ID());
  setIsActive(false);
  if (!isPosted())   setPosted(true);
  setDocumentNo(getDocumentNo() + "^");
  setDocStatus(DOCSTATUS_Reversed);
  if (!save() || isActive())   throw new IllegalStateException("Cannot de-activate allocation");
  MFactAcct.deleteEx(MAllocationHdr.Table_ID,getC_AllocationHdr_ID(),get_TrxName());
  getLines(true);
  HashSet<Integer> bps=new HashSet<Integer>();
  for (int i=0; i < m_lines.length; i++) {
    MAllocationLine line=m_lines[i];
    line.setIsActive(false);
    line.saveEx();
    bps.add(new Integer(line.processIt(true)));
  }
  updateBP(bps);
  return true;
}

public static boolean useSubjectCredsOnly(GSSCaller caller){
  if (caller instanceof HttpCaller) {
    return false;
  }
  String propValue=AccessController.doPrivileged(new GetPropertyAction("javax.security.auth.useSubjectCredsOnly","true"));
  return (!propValue.equalsIgnoreCase("false"));
}

private void readEntityDeclaration() throws IOException, XmlPullParserException {
  read(START_ENTITY);
  boolean generalEntity=true;
  skip();
  if (peekCharacter() == '%') {
    generalEntity=false;
    position++;
    skip();
  }
  String name=readName();
  skip();
  int quote=peekCharacter();
  String entityValue;
  if (quote == '"' || quote == '\'') {
    position++;
    entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION);
    if (peekCharacter() == quote) {
      position++;
    }
  }
 else   if (readExternalId(true,false)) {
    entityValue="";
    skip();
    if (peekCharacter() == NDATA[0]) {
      read(NDATA);
      skip();
      readName();
    }
  }
 else {
    throw new XmlPullParserException("Expected entity value or external ID",this,null);
  }
  if (generalEntity && processDocDecl) {
    if (documentEntities == null) {
      documentEntities=new HashMap<String,char[]>();
    }
    documentEntities.put(name,entityValue.toCharArray());
  }
  skip();
  read('>');
}

public void add(String fieldName,String value){
  if (fieldName == null)   throw new IllegalArgumentException("fieldname == null");
  if (value == null)   throw new IllegalArgumentException("value == null");
  if (fieldName.length() == 0 || fieldName.indexOf('\0') != -1 || value.indexOf('\0') != -1) {
    throw new IllegalArgumentException("Unexpected header: " + fieldName + ": "+ value);
  }
  addLenient(fieldName,value);
}

public void deleteStorage(StorageData storageData) throws BusinessException, IOException {
  StorageData local=getLocalStorageDataObject(storageData);
synchronized (local) {
    if ((storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) && Objects.equals(local,recorderStorageData)) {
      throw new BusinessException("Delete the storage " + local + ".",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED);
    }
    if (local.isStorageOpened()) {
      StorageWriter writer=openedStoragesMap.get(local);
      if (writer != null) {
        writer.cancel();
      }
      openedStoragesMap.remove(local);
    }
    deleteCompleteStorageDataFromDisk(local);
    existingStoragesSet.remove(local);
  }
}

public CoapResponse advanced(Request request){
  assignClientUriIfEmpty(request);
  return synchronous(request);
}

public void visitErrorNode(ErrorNode node){
  ProgressIndicatorProvider.checkCanceled();
  Token badToken=node.getSymbol();
  boolean isConjuredToken=badToken.getTokenIndex() < 0;
  int nodeStartIndex=badToken.getStartIndex();
  SyntaxError error=tokenToErrorMap.get(nodeStartIndex);
  if (error != null) {
    PsiBuilder.Marker errorMarker=builder.mark();
    if (badToken.getStartIndex() >= 0 && badToken.getType() != Token.EOF && !isConjuredToken) {
      builder.advanceLexer();
    }
    String message=String.format("%s%n",error.getMessage());
    errorMarker.error(message);
  }
 else {
    if (isConjuredToken) {
      PsiBuilder.Marker errorMarker=builder.mark();
      errorMarker.error(badToken.getText());
    }
 else {
      builder.advanceLexer();
    }
  }
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

@Override public boolean conditionOk(Example example){
  boolean isOk=true;
  for (  Attribute attribute : checkedAttributes) {
    isOk&=!Double.isNaN(example.getValue(attribute));
  }
  return isOk;
}

private void loadBinary(InputStream is) throws IOException {
  if (useNewIO && is instanceof FileInputStream) {
    FileInputStream fis=(FileInputStream)is;
    if (useIndexing) {
      loadBinaryIndex(new URL(indexName));
      mapDatabase(fis);
    }
 else {
      loadMappedBinary(fis);
    }
  }
 else {
    DataInputStream dis=new DataInputStream(new BufferedInputStream(is));
    loadBinary(dis);
  }
}

public VNXeCommandJob deleteLunsFromLunGroup(String lunGroupId,List<String> luns){
  LunGroupModifyParam param=new LunGroupModifyParam();
  List<LunAddParam> lunDelete=new ArrayList<LunAddParam>();
  for (  String lunId : luns) {
    VNXeBase lun=new VNXeBase(lunId);
    LunAddParam lunAdd=new LunAddParam();
    lunAdd.setLun(lun);
    lunDelete.add(lunAdd);
  }
  param.setLunDelete(lunDelete);
  LunGroupRequests req=new LunGroupRequests(_khClient);
  return req.modifyLunGroupAsync(lunGroupId,param);
}

public void removeLocators(LookupLocator[] locators){
  testSetForNull(locators);
synchronized (this) {
    if (terminated) {
      throw new IllegalStateException("discovery terminated");
    }
    HashMap groupsMap=new HashMap(1);
    for (int i=0; i < locators.length; i++) {
      LocatorReg reg=removeDiscoveredLocator(locators[i]);
      if (reg != null) {
        groupsMap.put(reg.proxy,reg.memberGroups);
        continue;
      }
      reg=findReg(locators[i]);
      if (reg != null) {
        undiscoveredLocators.remove(reg);
      }
    }
    if (!groupsMap.isEmpty() && !listeners.isEmpty()) {
      addNotify((ArrayList)listeners.clone(),groupsMap,true);
    }
  }
}

public boolean is_selected(ItemSelectionChoice p_choice){
  return sel_array[p_choice.ordinal()];
}

private void add(final IProgressOperation operation){
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.gridy=counter++;
  constraints.gridx=0;
  constraints.weightx=1;
  constraints.weighty=1;
  m_progressPanel.add(operation.getProgressPanel(),constraints);
}

public KeyStoreBuilder withProvider(final String providerName){
  Provider provider=Security.getProvider(providerName);
  if (provider == null) {
    throw new IllegalArgumentException("No such provider: " + providerName);
  }
  return withProvider(provider);
}

private boolean compareAndDecrementWorkerCount(int expect){
  return ctl.compareAndSet(expect,expect - 1);
}

public static HttpURLConnection toHttpConnection(Request... requests){
  return toHttpConnection(Arrays.asList(requests));
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 198) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public CompositeRouteFinder(final GameMap map,final HashMap<Match<Territory>,Integer> matches){
  m_map=map;
  m_matches=matches;
  s_logger.finer("Initializing CompositeRouteFinderClass...");
}

public TCPEndpoint(String host,int port){
  this(host,port,null,null);
}

public void testBug22613() throws Exception {
  createTable("bug22613","( s set('a','bc','def','ghij') default NULL, t enum('a', 'ab', 'cdef'), s2 SET('1','2','3','4','1585','ONE','TWO','Y','N','THREE'))");
  checkMetadataForBug22613(this.conn);
  if (versionMeetsMinimum(5,0)) {
    Connection infoSchemConn=null;
    try {
      Properties props=new Properties();
      props.setProperty("useInformationSchema","true");
      infoSchemConn=getConnectionWithProps(props);
      checkMetadataForBug22613(infoSchemConn);
    }
  finally {
      if (infoSchemConn != null) {
        infoSchemConn.close();
      }
    }
  }
}

public long stime(){
  return Long.parseLong(fields[14]);
}

public ProgramRewriter(ArrayList<HopRewriteRule> hRewrites,ArrayList<StatementBlockRewriteRule> sbRewrites){
  _dagRuleSet=new ArrayList<HopRewriteRule>();
  _dagRuleSet.addAll(hRewrites);
  _sbRuleSet=new ArrayList<StatementBlockRewriteRule>();
  _sbRuleSet.addAll(sbRewrites);
}

private JMenu createSettingsMenu(){
  final JMenu menu=new JMenu("Settings");
  menu.setMnemonic('S');
  menu.add(new CActionShowSettingsDialog(getParent()));
  menu.add(new JSeparator());
  menu.add(new CActionInitialCallgraphSettings(getParent()));
  menu.add(new CActionInitialFlowgraphSettings(getParent()));
  return menu;
}

public static void writeString(DataOutputStream os,String s) throws IOException {
  if (s == null) {
    os.writeInt(-1);
  }
 else {
    byte array[]=s.getBytes();
    os.writeInt(array.length);
    os.write(array);
  }
}

public static boolean isJavaValidName(String str){
  if (str.isEmpty())   return false;
  if (javaKeys.contains(str))   return false;
  char first=str.charAt(0);
  if (isValidNameStartChar(first)) {
    for (int i=1; i < str.length(); ++i) {
      char c=str.charAt(i);
      if (!isValidNameChar(c))       return false;
    }
    return true;
  }
 else {
    return false;
  }
}

private List<String> createCommands(){
  List<String> commands=createNodeCommands(nodejsFile,tsFile);
  List<String> args=createNodeArgs();
  if (args != null) {
    commands.addAll(args);
  }
  return commands;
}

private void parsePackages(SensorContext sensorContext){
  for (  Directory directory : packageList) {
    sensorContext.saveMeasure(directory,CoreMetrics.DIRECTORIES,1.0);
    sensorContext.saveMeasure(directory,CoreMetrics.FILES,(double)filesCount.get(directory));
  }
}

public static Thread consumeProcessErrorStream(Process self,Appendable error){
  Thread thread=new Thread(new TextDumper(self.getErrorStream(),error));
  thread.start();
  return thread;
}

public StrBuilder deleteFirst(final String str){
  final int len=(str == null ? 0 : str.length());
  if (len > 0) {
    final int index=indexOf(str,0);
    if (index >= 0) {
      deleteImpl(index,index + len,len);
    }
  }
  return this;
}

@Reference(authors="D. Pelleg, A. Moore",booktitle="X-means: Extending K-means with Efficient Estimation on the Number of Clusters",title="Proceedings of the 17th International Conference on Machine Learning (ICML 2000)",url="http://www.pelleg.org/shared/hp/download/xmeans.ps") public static <V extends NumberVector>double logLikelihood(Relation<V> relation,Clustering<? extends MeanModel> clustering,NumberVectorDistanceFunction<? super V> distanceFunction){
  List<? extends Cluster<? extends MeanModel>> clusters=clustering.getAllClusters();
  final int dim=RelationUtil.dimensionality(relation);
  final int m=clusters.size();
  int n=0;
  int[] n_i=new int[m];
  double d=0.;
  double[] d_i=new double[m];
  Iterator<? extends Cluster<? extends MeanModel>> it=clusters.iterator();
  for (int i=0; it.hasNext(); ++i) {
    Cluster<? extends MeanModel> cluster=it.next();
    n+=n_i[i]=cluster.size();
    d+=d_i[i]=varianceOfCluster(cluster,distanceFunction,relation);
  }
  if (n <= m) {
    return Double.NEGATIVE_INFINITY;
  }
  final double v=d / (n - m), logv=Math.log(v);
  double logLikelihood=0.;
  for (int i=0; i < m; i++) {
    logLikelihood+=n_i[i] * Math.log(n_i[i]) - n_i[i] * .5 * MathUtil.LOGTWOPI - n_i[i] * dim * .5* logv - (d_i[i] - m) * .5;
  }
  logLikelihood-=n * Math.log(n);
  return logLikelihood;
}

private static Class<?>[] classesForParams(List<String> params){
  Class<?>[] result=new Class<?>[params.size()];
  for (int i=0; i < params.size(); i++) {
    result[i]=classForParam(params.get(i));
  }
  return result;
}

private boolean announce(String[] groups){
  if (dataPackets == null || !lastLocator.equals(myLocator) || !Arrays.equals(lastGroups,groups)) {
    List<DatagramPacket> packets=new ArrayList<DatagramPacket>();
    Discovery disco;
    try {
      disco=getDiscovery(multicastAnnouncementConstraints.chooseProtocolVersion());
    }
 catch (    DiscoveryProtocolException e) {
      throw new AssertionError(e);
    }
    EncodeIterator ei=disco.encodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++,myLocator.getHost(),myLocator.getPort(),groups,myServiceID),multicastAnnouncementConstraints.getMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE),multicastAnnouncementConstraints.getUnfulfilledConstraints());
    while (ei.hasNext()) {
      try {
        packets.addAll(Arrays.asList(ei.next()));
      }
 catch (      Exception e) {
        logger.log((e instanceof UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO,"exception encoding multicast" + " announcement",e);
      }
    }
    lastLocator=myLocator;
    lastGroups=groups;
    dataPackets=packets.toArray(new DatagramPacket[packets.size()]);
  }
  try {
    send(dataPackets);
  }
 catch (  InterruptedIOException e) {
    return false;
  }
  return true;
}

public static String encodeLines(byte[] in,int iOff,int iLen,int lineLen,String lineSeparator){
  int blockLen=(lineLen * 3) / 4;
  if (blockLen <= 0)   throw new IllegalArgumentException();
  int lines=(iLen + blockLen - 1) / blockLen;
  int bufLen=((iLen + 2) / 3) * 4 + lines * lineSeparator.length();
  StringBuilder buf=new StringBuilder(bufLen);
  int ip=0;
  while (ip < iLen) {
    int l=Math.min(iLen - ip,blockLen);
    buf.append(encode(in,iOff + ip,l));
    buf.append(lineSeparator);
    ip+=l;
  }
  return buf.toString();
}

final public void trimToSize(){
  for (  GazEntry ge : gaz.values()) {
    ge.trimToSize();
  }
}

public boolean containsSelectAccount(){
  return prompts.contains(PROMPT_SELECT_ACCOUNT);
}

protected static void quickSort(Instances insts,int[] indices,int attidx,int left,int right){
  if (left < right) {
    int middle=partition(insts,indices,attidx,left,right);
    quickSort(insts,indices,attidx,left,middle);
    quickSort(insts,indices,attidx,middle + 1,right);
  }
}

public Image flipImageHorizontally(Image image,boolean maintainOpacity){
  int[] rgb=image.getRGB();
  int[] newRGB=new int[rgb.length];
  int width=image.getWidth();
  int height=image.getHeight();
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      newRGB[(width - x - 1) + y * width]=rgb[x + y * width];
    }
  }
  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);
}

public static boolean audit(){
  return audit.get() == null ? true : audit.get();
}

public static boolean isTermsRequest(SipRequest request){
  String contentType=request.getContentType();
  return (contentType != null && contentType.startsWith("application/end-user"));
}

private void readSegments() throws IOException {
  for (  SegmentExtent10 extent : _segmentExtents) {
    try (ReadStream is=openRead(extent.address(),extent.length())){
      is.skip(extent.length() - BLOCK_SIZE);
      long sequence=BitsUtil.readLong(is);
      byte[] tableKey=new byte[TABLE_KEY_SIZE];
      is.readAll(tableKey,0,tableKey.length);
      if (sequence > 0) {
        Segment10 segment=new Segment10(sequence,tableKey,extent);
        _segments.add(segment);
      }
    }
   }
}

public static double projectTimeWithin24Hours(double time){
  double secondsInOneDay=60 * 60 * 24;
  if (time == Double.NEGATIVE_INFINITY || time == Double.POSITIVE_INFINITY) {
    DebugLib.stopSystemAndReportInconsistency("time is not allowed to be minus or plus infinity");
  }
  while (time < 0) {
    time+=secondsInOneDay;
  }
  if (time < secondsInOneDay) {
    return time;
  }
 else {
    return ((time / secondsInOneDay) - (Math.floor(time / secondsInOneDay))) * secondsInOneDay;
  }
}

private byte[] updateMinMaxForNoDictionary(byte[] valueWithLength){
  ByteBuffer buffer=ByteBuffer.wrap(valueWithLength);
  byte[] actualValue=new byte[buffer.getShort()];
  buffer.get(actualValue);
  return actualValue;
}

void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {
  boolean shouldAddAttrs;
  try {
    SerializationHandler rhandler=transformer.getResultTreeHandler();
    if (null == nodeName) {
      shouldAddAttrs=false;
    }
 else {
      if (null != prefix) {
        rhandler.startPrefixMapping(prefix,nodeNamespace,true);
      }
      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);
      super.execute(transformer);
      shouldAddAttrs=true;
    }
    transformer.executeChildTemplates(this,shouldAddAttrs);
    if (null != nodeName) {
      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);
      if (null != prefix) {
        rhandler.endPrefixMapping(prefix);
      }
    }
  }
 catch (  SAXException se) {
    throw new TransformerException(se);
  }
}

@SuppressWarnings("unchecked") public static void checkType(Map<String,Object> map,String name){
  Map<String,Object> tmap;
  if (map.get(MetamodelGenerator.KEY_TYPE) instanceof Map) {
    tmap=(Map<String,Object>)map.get(MetamodelGenerator.KEY_TYPE);
  }
 else   if (map.get(MetamodelGenerator.KEY_TYPE) instanceof String) {
    tmap=new HashMap<String,Object>();
    tmap.put(MetamodelGenerator.KEY_NAME,map.get(MetamodelGenerator.KEY_TYPE));
  }
 else {
    tmap=map;
  }
  int join=name.indexOf('&');
  if (join > 0) {
    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {
      join=name.indexOf('&',join + 1);
    }
    if (join > 0) {
      Assert.assertEquals("not an intersection type","i",tmap.get("comp"));
      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));
      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));
      return;
    }
  }
  join=name.indexOf('|');
  if (join > 0) {
    while (join > 0 && !pointyBracketsEven(name.substring(0,join))) {
      join=name.indexOf('|',join + 1);
    }
    if (join > 0) {
      Assert.assertEquals("not a union type","u",tmap.get("comp"));
      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(0,join));
      checkTypeParameters(-1,(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPES),name.substring(join + 1));
      return;
    }
  }
  int sep=name.indexOf('<');
  String typeParams=null;
  if (sep > 0) {
    typeParams=name.substring(sep + 1,name.length() - 1);
    name=name.substring(0,sep);
  }
  if (tmap.containsKey(MetamodelGenerator.KEY_PACKAGE)) {
    Assert.assertEquals(name,String.format("%s::%s",packageName(tmap),tmap.get(MetamodelGenerator.KEY_NAME)));
  }
 else {
    Assert.assertEquals(name,tmap.get(MetamodelGenerator.KEY_NAME));
  }
  if (typeParams != null) {
    List<Map<String,Object>> tparms=(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPE_PARAMS);
    Assert.assertFalse("Type parameters shouldn't be empty",tparms.isEmpty());
    checkTypeParameters(0,tparms,typeParams);
  }
}

private Object _deserializeStruct(Element elStruct) throws ConverterException {
  String type=elStruct.getAttribute("type");
  Struct struct=new StructImpl();
  NodeList list=elStruct.getChildNodes();
  int len=list.getLength();
  for (int i=0; i < len; i++) {
    Node node=list.item(i);
    if (node instanceof Element) {
      Element var=(Element)node;
      Element value=getChildElement((Element)node);
      if (value != null) {
        struct.setEL(var.getAttribute("name"),_deserialize(value));
      }
    }
  }
  if (struct.size() == 0 && type != null && type.length() > 0) {
    return "";
  }
  return struct;
}

public QuerierCLI(String[] args){
  cliOptions=createOptions();
  try {
    CommandLineParser parser=new GnuParser();
    commandLine=parser.parse(cliOptions,args,true);
    if (hasOption("h")) {
      printHelp();
      System.exit(1);
    }
    if (!parseOptions()) {
      logger.info("The provided options are not valid");
      printHelp();
      System.exit(1);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    System.exit(1);
  }
}

private static byte[] concatBytes(byte[] array1,byte[] array2){
  byte[] cBytes=new byte[array1.length + array2.length];
  try {
    System.arraycopy(array1,0,cBytes,0,array1.length);
    System.arraycopy(array2,0,cBytes,array1.length,array2.length);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  return cBytes;
}

public In(File file){
  if (file == null)   throw new NullPointerException("argument is null");
  try {
    FileInputStream fis=new FileInputStream(file);
    scanner=new Scanner(new BufferedInputStream(fis),CHARSET_NAME);
    scanner.useLocale(LOCALE);
  }
 catch (  IOException ioe) {
    throw new IllegalArgumentException("Could not open " + file);
  }
}

protected ExtendedDismaxConfiguration createConfiguration(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){
  return new ExtendedDismaxConfiguration(localParams,params,req);
}

void writeValueProperties(String fullId,long dbId,String localId,JsonValue value,Connection connection) throws SQLException {
  if (cfg.hasPossibleSearchableProperties()) {
    Integer batchingCount=0;
    PreparedStatement propCreateStatement=getPreparedStatement(connection,QueryDefinition.PROPCREATEQUERYSTR);
    try {
      batchingCount=writeValueProperties(fullId,dbId,localId,value,connection,propCreateStatement,batchingCount);
      if (enableBatching && batchingCount > 0) {
        int[] numUpdates=propCreateStatement.executeBatch();
        logger.debug("Batch update of objectproperties updated: {}",numUpdates);
        if (logger.isDebugEnabled()) {
          logger.debug("Writing batch of objectproperties, updated: {}",Arrays.asList(numUpdates));
        }
        propCreateStatement.clearBatch();
      }
    }
  finally {
      CleanupHelper.loggedClose(propCreateStatement);
    }
  }
}

protected double computeMaxYAxisValueLogScale(double maxValue){
  double v=0;
  int mantisse=0;
  int exponent=0;
  while (v < maxValue) {
    if (mantisse < 9)     mantisse++;
 else {
      mantisse=1;
      exponent++;
    }
    v=mantisse * Math.pow(10,exponent);
  }
  return Math.log10(v);
}

public void addFocusClearedListener(FocusClearedListener focusClearedListener){
  mFocusClearedListeners.add(focusClearedListener);
}

public void addItemListener(ItemListener aListener){
  listenerList.add(ItemListener.class,aListener);
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> result;
  result=new Vector<Option>();
  result.addElement(new Option("\tThe range of attributes to print in addition to the classification.\n" + "\t(default: none)","p",1,"-p <range>"));
  result.addElement(new Option("\tWhether to turn on the output of the class distribution.\n" + "\tOnly for nominal class attributes.\n" + "\t(default: off)","distribution",0,"-distribution"));
  result.addElement(new Option("\tThe number of digits after the decimal point.\n" + "\t(default: " + getDefaultNumDecimals() + ")","decimals",1,"-decimals <num>"));
  result.addElement(new Option("\tThe file to store the output in, instead of outputting it on stdout.\n" + "\tGets ignored if the supplied path is a directory.\n" + "\t(default: .)","file",1,"-file <path>"));
  result.addElement(new Option("\tIn case the data gets stored in a file, then this flag can be used\n" + "\tto suppress the regular output.\n" + "\t(default: not suppressed)","suppress",0,"-suppress"));
  return result.elements();
}

public static MosaicLevy createMosaicLevy(final MosaicId mosaicId){
  return new MosaicLevy(MosaicTransferFeeType.Absolute,generateRandomAccount(),mosaicId,Quantity.fromValue(123));
}

public int rankOf(double value){
  int ret=0;
  if (!hasCapacity()) {
    ret=Arrays.binarySearch(data,value);
    if (ret < 0) {
      return -ret - 1;
    }
 else {
      return ret;
    }
  }
 else {
    for (int i=0; i < next; i++) {
      if (data[i] < value) {
        ret++;
      }
    }
    return ret;
  }
}

@Override protected int sizeOf(String key,BitmapDrawable value){
  final int bitmapSize=getBitmapSize(value) / 1024;
  return bitmapSize == 0 ? 1 : bitmapSize;
}

public static <T>Predicate<T> not(Predicate<T> predicate){
  return predicate.negate();
}

private static void addMarginTopToContentChild(View mContentChild,int statusBarHeight){
  if (mContentChild == null) {
    return;
  }
  if (!TAG_MARGIN_ADDED.equals(mContentChild.getTag())) {
    FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams();
    lp.topMargin+=statusBarHeight;
    mContentChild.setLayoutParams(lp);
    mContentChild.setTag(TAG_MARGIN_ADDED);
  }
}

static byte[] hexStringToByteArray(String hexString){
  String s=hexString;
  int len=s.length();
  if (len % 2 == 1) {
    s="0" + s;
    len++;
  }
  byte[] data=new byte[len / 2];
  for (int i=0; i < len; i+=2) {
    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));
  }
  return data;
}

public int send(byte[] buffer,int offset,int count){
  checkArrayBounds(buffer,offset,count);
  if (count == 0) {
    return 0;
  }
  byte[] data=buffer;
  if (offset > 0) {
    data=new byte[count];
    System.arraycopy(buffer,offset,data,0,count);
  }
  IntOut bytesSentOut=new IntOut();
  try {
    IDevice.checkResult(LibIMobileDevice.idevice_connection_send(getRef(),data,count,bytesSentOut));
    return bytesSentOut.getValue();
  }
  finally {
    bytesSentOut.delete();
  }
}

private void fetchSchema() throws ExecutionException, RpcException, TimeoutException {
  Message schema=Rpc.get(myClient.getSchema(),FETCH_SCHEMA_TIMEOUT_MS,TimeUnit.MILLISECONDS);
  LOG.info("Schema with " + schema.entities.length + " classes, "+ schema.constants.length+ " constant sets");
  int atoms=0;
  for (  Entity type : schema.entities) {
    if (AtomMetadata.find(type) != null) {
      atoms++;
    }
    Dynamic.register(type);
  }
  LOG.info("Schema with " + atoms + " atoms");
  for (  ConstantSet set : schema.constants) {
    ConstantSet.register(set);
  }
}

private void append(StringBuilder buffer,double[] data,String prefix,String separator,String suffix){
  buffer.append(prefix);
  for (int i=0; i < data.length; ++i) {
    if (i > 0) {
      buffer.append(separator);
    }
    buffer.append(data[i]);
  }
  buffer.append(suffix);
}

public T toRealArray(){
  return _outputArrayType.cast(ArrayMultidimensionalizer.multidimensionalize(_real,_dimensions));
}

private ArrayList<WritableComparable> readPartitions(FileSystem fs,Path p,JobConf job) throws IOException {
  SequenceFile.Reader reader=new SequenceFile.Reader(fs,p,job);
  ArrayList<WritableComparable> parts=new ArrayList<WritableComparable>();
  try {
    DoubleWritable key=new DoubleWritable();
    NullWritable value=NullWritable.get();
    while (reader.next(key,value)) {
      parts.add(key);
      key=new DoubleWritable();
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    IOUtilFunctions.closeSilently(reader);
  }
  reader.close();
  return parts;
}

public boolean pollSeqno(long seqno){
  return seqno <= diskLog.getMaxSeqno();
}

public void addSlide(@NonNull Fragment fragment){
  fragments.add(fragment);
  addBackgroundColor(Color.TRANSPARENT);
  pagerAdapter.notifyDataSetChanged();
}

private static void drawLine(int x0,int y0,int x1,int y1,boolean[][] pic){
  final int xres=pic.length, yres=pic[0].length;
  y0=(y0 < 0) ? 0 : (y0 >= yres) ? (yres - 1) : y0;
  y1=(y1 < 0) ? 0 : (y1 >= yres) ? (yres - 1) : y1;
  x0=(x0 < 0) ? 0 : (x0 >= xres) ? (xres - 1) : x0;
  x1=(x1 < 0) ? 0 : (x1 >= xres) ? (xres - 1) : x1;
  final int dx=+Math.abs(x1 - x0), sx=x0 < x1 ? 1 : -1;
  final int dy=-Math.abs(y1 - y0), sy=y0 < y1 ? 1 : -1;
  int err=dx + dy;
  for (; ; ) {
    pic[x0][y0]=true;
    if (x0 == x1 && y0 == y1) {
      break;
    }
    final int e2=err << 1;
    if (e2 > dy) {
      err+=dy;
      x0+=sx;
    }
    if (e2 < dx) {
      err+=dx;
      y0+=sy;
    }
  }
}

public String process(Item item) throws ProcessException {
  int count=0;
  Item inPhrase=SUB_PHRASE_PATH.findItem(item);
  for (Item p=inPhrase; p != null; p=p.getPrevious()) {
    count++;
  }
  return Integer.toString(rail(count));
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public E push(E value){
  elements.add(value);
  return value;
}

public long cardinality(final int tailIndex){
  return rangeCount(tailIndex);
}

public static void createResponse(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties cookieProperties,WebDoc doc,boolean debug) throws IOException {
  response.setHeader("Cache-Control","no-cache");
  response.setContentType("text/html; charset=UTF-8");
  if (cookieProperties != null) {
    Cookie cookie=new Cookie(WebEnv.COOKIE_INFO,propertiesEncode(cookieProperties));
    cookie.setComment("(c) adempiere, Inc - Jorg Janke");
    cookie.setSecure(false);
    cookie.setPath("/");
    if (cookieProperties.size() == 0)     cookie.setMaxAge(0);
 else     cookie.setMaxAge(2592000);
    response.addCookie(cookie);
  }
  if (debug && WebEnv.DEBUG) {
    WebEnv.addFooter(request,response,servlet,doc.getBody());
  }
  PrintWriter out=response.getWriter();
  doc.output(out);
  out.flush();
  if (out.checkError())   log.log(Level.SEVERE,"error writing");
  out.close();
}

public static Long toLong(Object o) throws PageException {
  if (o instanceof Long)   return (Long)o;
  return Long.valueOf(toLongValue(o));
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

protected void finishGridRow(){
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridwidth=GridBagConstraints.REMAINDER;
  constraints.weightx=0;
  final JLabel icon;
  if (param.isOptional()) {
    if (param.isDefined() && param.tookDefaultValue() && !(param instanceof Flag)) {
      icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_INFORMATION));
      icon.setToolTipText("Default value: " + param.getDefaultValueAsString());
    }
 else {
      icon=new JLabel();
      icon.setMinimumSize(new Dimension(16,16));
    }
  }
 else {
    if (!param.isDefined()) {
      icon=new JLabel(StockIcon.getStockIcon(StockIcon.DIALOG_ERROR));
      icon.setToolTipText("Missing value.");
    }
 else {
      icon=new JLabel();
      icon.setMinimumSize(new Dimension(16,16));
    }
  }
  parent.add(icon,constraints);
}

public final void testIsStatePreserved1(){
  byte[] encodedKey=new byte[]{(byte)1,(byte)2,(byte)3,(byte)4};
  byte[] encodedKeyCopy=encodedKey.clone();
  X509EncodedKeySpec meks=new X509EncodedKeySpec(encodedKeyCopy);
  encodedKeyCopy[3]=(byte)5;
  byte[] ek=meks.getEncoded();
  assertTrue(Arrays.equals(encodedKey,ek));
}

@Override public void shutdown(){
  if (!shouldKeepAdbAlive) {
    AndroidDebugBridge.disconnectBridge();
    AndroidDebugBridge.terminate();
  }
  logger.info("stopping Device Manager");
}

public void pingReceived(Ping pong){
  long now=System.currentTimeMillis();
  long previousReceived=(int)(lastPingSent.get() & 0xffffffff);
  log.debug("Pong from client id {} at {} with value {}, previous received at {}",new Object[]{getId(),now,pong.getValue2(),previousReceived});
  if (pong.getValue2() == previousReceived) {
    lastPingTime.set((int)(now & 0xffffffff) - pong.getValue2());
  }
  lastPongReceived.set(now);
}

public static int findObjectLiteral(Object literal){
synchronized (objectLiterals) {
    Integer result=objectLiterals.get(literal);
    return result == null ? 0 : result.intValue();
  }
}

@Override public void resetViewableArea(){
  throw new RuntimeException("resetViewableArea called in PdfDecoderFx");
}

public static Lexicon buildWumpusLex(){
  Lexicon l=new Lexicon();
  ArrayList<LexWord> list=new ArrayList<LexWord>();
  list.add(new LexWord("stench",(float)0.05));
  list.add(new LexWord("breeze",(float)0.10));
  list.add(new LexWord("wumpus",(float)0.15));
  list.add(new LexWord("pits",(float)0.05));
  list.add(new LexWord("friend",(float)0.10));
  list.add(new LexWord("enemy",(float)0.10));
  list.add(new LexWord("dog",(float)0.10));
  list.add(new LexWord("superhero",(float)0.20));
  list.add(new LexWord("virus",(float)0.15));
  l.put("NOUN",list);
  ArrayList<LexWord> verbList=new ArrayList<LexWord>();
  verbList.add(new LexWord("is",(float)0.10));
  verbList.add(new LexWord("feel",(float)0.10));
  verbList.add(new LexWord("smells",(float)0.10));
  verbList.add(new LexWord("stinks",(float)0.05));
  verbList.add(new LexWord("wants",(float)0.20));
  verbList.add(new LexWord("flies",(float)0.10));
  verbList.add(new LexWord("keeps",(float)0.05));
  verbList.add(new LexWord("leaves",(float)0.10));
  verbList.add(new LexWord("throws",(float)0.20));
  l.put("VERB",verbList);
  ArrayList<LexWord> adjList=new ArrayList<LexWord>();
  adjList.add(new LexWord("right",(float)0.10));
  adjList.add(new LexWord("dead",(float)0.05));
  adjList.add(new LexWord("smelly",(float)0.02));
  adjList.add(new LexWord("breezy",(float)0.02));
  adjList.add(new LexWord("foul",(float)0.10));
  adjList.add(new LexWord("black",(float)0.05));
  adjList.add(new LexWord("white",(float)0.05));
  adjList.add(new LexWord("callous",(float)0.10));
  adjList.add(new LexWord("proud",(float)0.10));
  adjList.add(new LexWord("right",(float)0.10));
  adjList.add(new LexWord("gold",(float)0.06));
  adjList.add(new LexWord("normal",(float)0.25));
  l.put("ADJS",adjList);
  l.addLexWords("ADVERB","here","0.05","ahead","0.05","nearby","0.02","quickly","0.05","badly","0.05","slowly","0.08","sadly","0.10","silently","0.10","easily","0.10","seldom","0.10","sometimes","0.10","loudly","0.10","cordially","0.05","frequently","0.05");
  l.addLexWords("PRONOUN","me","0.10","you","0.03","i","0.10","it","0.10","us","0.07","they","0.20","he","0.20","she","0.20");
  l.addLexWords("RELPRO","that","0.40","which","0.15","who","0.20","whom","0.02","whose","0.08","whabt","0.15");
  l.addLexWords(buildNameLexicon());
  l.addLexWords("ARTICLE","the","0.40","a","0.30","an","0.10","every","0.05","some","0.15");
  l.addLexWords("PREP","to","0.20","in","0.10","on","0.05","near","0.10","after","0.10","among","0.05","around","0.20","against","0.10","across","0.10");
  l.addLexWords("CONJ","and","0.50","or","0.10","but","0.20","yet","0.02","since","0.08","unless","0.10");
  l.addLexWords("DIGIT","0","0.20","1","0.20","2","0.20","3","0.20","4","0.20");
  return l;
}

private void testTransferRate(){
  Assert.assertNotNull(mExpectedTransferRateOps);
  Assert.assertNotNull(mExpectedTransferRateBps);
  Assert.assertTrue(mExpectedTransferRateBps.intValue() > 0);
  Assert.assertTrue(mExpectedTransferRateOps.intValue() > 0);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("staff",true);
  elementList=doc.getElementsByTagName("address");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.replaceData(5,5,"South");
  childData=child.getData();
  assertEquals("characterdataReplaceDataMiddleAssert","1230 South Ave. Dallas, Texas 98551",childData);
}

public void add(X509TrustManager mgr){
  if (mgr instanceof X509Extensions) {
    managers.add((X509Extensions)mgr);
  }
 else {
    managers.add(new X509ExtensionsWrapper(mgr));
  }
}

public Iterator<TreeNode> findChildren(){
  List<TreeNode> nodes;
  if (children == null)   nodes=Collections.emptyList();
 else   nodes=children;
  return nodes.iterator();
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 164) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

private int createFolder(){
  if (mNewDirectoryName != null && mSelectedDir != null && mSelectedDir.canWrite()) {
    File newDir=new File(mSelectedDir,mNewDirectoryName);
    if (!newDir.exists()) {
      boolean result=newDir.mkdir();
      if (result) {
        changeDirectory(newDir);
        return R.string.create_folder_success;
      }
 else {
        return R.string.create_folder_error;
      }
    }
 else {
      return R.string.create_folder_error_already_exists;
    }
  }
 else   if (mSelectedDir != null && !mSelectedDir.canWrite()) {
    return R.string.create_folder_error_no_write_access;
  }
 else {
    return R.string.create_folder_error;
  }
}

public static double I(double P[][],int j,int k){
  double I=0.0;
  double p_x=P[j][j];
  double p_y=P[k][k];
  double p_xy=P[j][k];
  I+=p_xy * Math.log(p_xy / (p_x * p_y));
  I+=(1. - p_xy) * Math.log((1. - p_xy) / ((1. - p_x) * (1. - p_y)));
  return I;
}

public Result doComparisonTest(Properties properties) throws Exception {
  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));
  final int nclients=Integer.parseInt(properties.getProperty(TestOptions.NCLIENTS));
  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));
  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));
  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));
  final double insertRate=Integer.parseInt(properties.getProperty(TestOptions.INSERT_RATE));
  final int nindices=Integer.parseInt(properties.getProperty(TestOptions.NINDICES));
  final boolean testCorrectness=Boolean.parseBoolean(properties.getProperty(TestOptions.TEST_CORRECTNESS));
  Result result=doConcurrentClientTest(client,nclients,timeout,ntrials,keyLen,nops,insertRate,nindices,testCorrectness);
  return result;
}

public void testGetScale() throws SQLException {
  try {
    int scale=3;
    String createTable="create table DecimalNumbers ( valueDouble DOUBLE," + "valueFloat FLOAT , scaleTest NUMERIC(10," + scale + ")  );";
    String insert="insert into DecimalNumbers values (1.5, 20.55, 30.666);";
    String select="select * from DecimalNumbers;";
    Statement st=conn.createStatement();
    st.executeUpdate(createTable);
    st.executeUpdate(insert);
    rs=st.executeQuery(select);
    ResultSetMetaData rsmd2=rs.getMetaData();
    assertNotNull(rsmd2);
    assertEquals(scale,rsmd2.getScale(3));
    assertTrue(rsmd2.getScale(1) > 0);
    assertTrue(rsmd2.getScale(2) > 0);
    try {
      rsmd.getScale(0);
      fail("SQLException is not thrown");
    }
 catch (    SQLException e) {
    }
    try {
      rsmd.getScale(5);
      fail("SQLException is not thrown");
    }
 catch (    SQLException e) {
    }
    try {
      conn.close();
      rsmd.getScale(1);
      fail("Exception expected");
    }
 catch (    SQLException e) {
    }
  }
  finally {
    st.cancel();
  }
}

static String valueToString(Object value,int indentFactor,int indent){
  if (value == null || value.equals(null)) {
    return "null";
  }
  try {
    if (value instanceof String) {
      return quote((String)value);
    }
  }
 catch (  Exception e) {
  }
  if (value instanceof Float || value instanceof Double || value instanceof Byte|| value instanceof Short|| value instanceof Integer|| value instanceof Long) {
    return numberToString(value);
  }
  if (value instanceof Boolean) {
    return value.toString();
  }
  if (value instanceof Map) {
    return print((Map)value,indentFactor,indent);
  }
  if (value instanceof List) {
    return print((List)value,indentFactor,indent);
  }
  return quote(value.toString());
}

public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType){
  Retention retention=annotationType.getAnnotation(Retention.class);
  return retention != null && retention.value() == RetentionPolicy.RUNTIME;
}

public void testProcessMsg5(){
  byte[] pdu=createPDU(2);
  int headerLen=pdu.length - (mGsmHeader.length + mUserDataHeader.length + mMessageBody.length);
  int pduType=6;
  int tranId=0;
  String originalPackageName=mPackageName;
  String originalClassName=mClassName;
  try {
    mClassName="com.android.smspush.unitTests.ReceiverActivity";
    IWapPushManager iwapman=getInterface();
    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,WapPushManagerParams.APP_TYPE_ACTIVITY,false,false);
    assertTrue((iwapman.processMessage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),createIntent(pduType,tranId)) & WapPushManagerParams.MESSAGE_HANDLED) == WapPushManagerParams.MESSAGE_HANDLED);
    iwapman.deletePackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName);
  }
 catch (  RemoteException e) {
    assertTrue(false);
  }
  mPackageName=originalPackageName;
  mClassName=originalClassName;
}

public void addClassPath(String classpath){
  char sep=CauchoUtil.getPathSeparatorChar();
  int head=0;
  int tail=0;
  while (head < classpath.length()) {
    tail=classpath.indexOf(sep,head);
    String segment=null;
    if (tail < 0) {
      segment=classpath.substring(head);
      head=classpath.length();
    }
 else {
      segment=classpath.substring(head,tail);
      head=tail + 1;
    }
    if (segment.equals(""))     continue;
 else     if (segment.endsWith(".jar") || segment.endsWith(".zip"))     addMergePath(JarPath.create(VfsOld.lookup(segment)));
 else     addMergePath(VfsOld.lookup(segment));
  }
}

@Singleton public static synchronized void loadDirectories(String firstOption) throws InvalidConfigException {
  if (userIdDirectories == null) {
    userIdDirectories=new TreeMap<String,String>();
    userIdDirectories.put("",(firstOption == null) ? "-" : firstOption);
    Properties properties=directoriesProperties();
    for (    Map.Entry<Object,Object> entry : properties.entrySet()) {
      String key=StringUtils.trim((String)entry.getKey());
      String value=StringUtils.trim((String)entry.getValue());
      if (key != null && value != null) {
        userIdDirectories.put(key,value);
      }
 else {
        String error=DIRECTORIES_PROPFILE_PATH + " has been been configured wrong.";
        LOG.error(error);
        throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);
      }
    }
    if ((userIdDirectories.size() - 1) == 0) {
      String error="No licenses could be loaded from " + DIRECTORIES_PROPFILE_PATH + ". Please check configuration.";
      LOG.error(error);
      throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,error);
    }
  }
}

public static Individuum nullIndividuum(int dim){
  short[] gene=new short[dim];
  Arrays.fill(gene,DONT_CARE);
  return new Individuum(0.0,gene);
}

public List<Class<?>> findAllClasses(String uri) throws IOException, ClassNotFoundException {
  List<Class<?>> classes=new ArrayList<>();
  List<String> strings=findAllStrings(uri);
  for (  String className : strings) {
    Class<?> clazz=_classLoader.loadClass(className);
    classes.add(clazz);
  }
  return classes;
}

private boolean isSlavoGermanic(String value){
  return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf("CZ") > -1 || value.indexOf("WITZ") > -1;
}

public void shuffleInventory(@Nonnull IInventory inv,@Nonnull Random random){
  final List<ItemStack> list=getInventoryList(inv);
  Collections.shuffle(list,random);
  for (int i=0; i < inv.getSizeInventory(); ++i) {
    inv.setInventorySlotContents(i,list.get(i));
  }
}

protected ChromeAnimation<?> createUpdateDiscardAnimatorSet(StackTab[] tabs,int spacing,float warpSize,float discardRange){
  ChromeAnimation<Animatable<?>> set=new ChromeAnimation<Animatable<?>>();
  int dyingTabsCount=0;
  float firstDyingTabOffset=0;
  for (int i=0; i < tabs.length; ++i) {
    StackTab tab=tabs[i];
    addTiltScrollAnimation(set,tab.getLayoutTab(),0.0f,UNDISCARD_ANIMATION_DURATION,0);
    if (tab.isDying()) {
      dyingTabsCount++;
      if (dyingTabsCount == 1) {
        firstDyingTabOffset=getScreenPositionInScrollDirection(tab);
      }
    }
  }
  Interpolator interpolator=BakedBezierInterpolator.FADE_OUT_CURVE;
  int newIndex=0;
  for (int i=0; i < tabs.length; ++i) {
    StackTab tab=tabs[i];
    long startTime=(long)Math.max(0,TAB_REORDER_START_SPAN / getScreenSizeInScrollDirection() * (getScreenPositionInScrollDirection(tab) - firstDyingTabOffset));
    if (tab.isDying()) {
      float discard=tab.getDiscardAmount();
      if (discard == 0.0f)       discard=isDefaultDiscardDirectionPositive() ? 0.0f : -0.0f;
      float s=Math.copySign(1.0f,discard);
      long duration=(long)(DISCARD_ANIMATION_DURATION * (1.0f - Math.abs(discard / discardRange)));
      addAnimation(set,tab,DISCARD_AMOUNT,discard,discardRange * s,duration,startTime,false,interpolator);
    }
 else {
      if (tab.getDiscardAmount() != 0.f) {
        addAnimation(set,tab,DISCARD_AMOUNT,tab.getDiscardAmount(),0.0f,UNDISCARD_ANIMATION_DURATION,0);
      }
      float newScrollOffset=StackTab.screenToScroll(spacing * newIndex,warpSize);
      if (tab.getDiscardAmount() >= discardRange) {
        tab.setScrollOffset(newScrollOffset);
        tab.setScale(SCALE_AMOUNT);
      }
 else {
        float start=tab.getScrollOffset();
        if (start != newScrollOffset) {
          addAnimation(set,tab,SCROLL_OFFSET,start,newScrollOffset,TAB_REORDER_DURATION,startTime);
        }
      }
      newIndex++;
    }
  }
  return set;
}

@Override public String format(double value,int formatNumber){
  if (formatNumber % 2 == 0) {
    return format.format(value);
  }
 else {
    return null;
  }
}

public static String toLowerCase(String string){
  boolean changed=false;
  char[] chars=string.toCharArray();
  for (int i=0; i != chars.length; i++) {
    char ch=chars[i];
    if ('A' <= ch && 'Z' >= ch) {
      changed=true;
      chars[i]=(char)(ch - 'A' + 'a');
    }
  }
  if (changed) {
    return new String(chars);
  }
  return string;
}

public void runAsserts(List<Step> list,int size,Boolean needAssignee){
  assertEquals(size,list.size());
  for (int i=0; i < size; i++) {
    runAsserts(list.get(i),i,needAssignee);
  }
}

protected void onException(final WroRuntimeException e){
  throw e;
}

public static boolean registerTransform(final String transformURI){
  final boolean added=transforms.add(transformURI);
  return added;
}

public synchronized void co_exit(int thisCoroutine){
  m_activeIDs.clear(thisCoroutine);
  m_nextCoroutine=NOBODY;
  notify();
}

public void shrink(){
  if (c.length == length) {
    return;
  }
  char[] newc=new char[length];
  System.arraycopy(c,0,newc,0,length);
  c=newc;
}

public ANDCondition(Condition... conditions){
  Reject.ifNull(conditions);
  this.conditions=Arrays.asList(conditions);
}

private void dropDownstreamTo(long absolutePosition){
  int relativePosition=(int)(absolutePosition - totalBytesDropped);
  int allocationIndex=relativePosition / allocationLength;
  for (int i=0; i < allocationIndex; i++) {
    allocator.release(dataQueue.remove());
    totalBytesDropped+=allocationLength;
  }
}

public HopImpl(String hostName,int portNumber,String trans){
  host=hostName;
  if (host.indexOf(":") >= 0)   if (host.indexOf("[") < 0)   host="[" + host + "]";
  port=portNumber;
  transport=trans;
}

private void updateControls(){
  Spinner difficulty=(Spinner)findViewById(R.id.spinner_difficultyLevel);
  difficulty.setSelection(GameActivity.getDifficultyIndex());
  Button resume=(Button)findViewById(R.id.button_resumeGame);
  resume.setEnabled(GameActivity.canResumeFromSave());
  CheckBox neverLoseBall=(CheckBox)findViewById(R.id.checkbox_neverLoseBall);
  neverLoseBall.setChecked(GameActivity.getNeverLoseBall());
  CheckBox soundEffectsEnabled=(CheckBox)findViewById(R.id.checkbox_soundEffectsEnabled);
  soundEffectsEnabled.setChecked(GameActivity.getSoundEffectsEnabled());
  TextView highScore=(TextView)findViewById(R.id.text_highScore);
  highScore.setText(String.valueOf(mHighScore));
}

public static void write(OutputStream out,int c){
  if (out == null) {
    throw new IllegalArgumentException("output stream null.");
  }
  try {
    out.write(c);
  }
 catch (  IOException e) {
    throw new RuntimeException(e.getMessage(),e);
  }
}

public void message(LocoNetMessage m){
  if (m.getNumDataElements() != 6) {
    return;
  }
  int b1=m.getElement(0) & 0xFF;
  int b2=m.getElement(1) & 0xFF;
  int b3=m.getElement(2) & 0xFF;
  int b4=m.getElement(3) & 0x07;
  if ((b1 == 0xD7) && ((b2 == 0x12) || (b2 == 0x17) || (b2 == 0x1F)) && (b3 == 0x00)) {
    idBox.setSelectedIndex(b4 + 1);
  }
}

public Void call() throws Exception {
  byte[][] keys=new byte[nops][];
  byte[][] vals=new byte[nops][];
  if (r.nextDouble() <= insertRate) {
    for (int i=0; i < nops; i++) {
      keys[i]=nextKey();
      vals[i]=new byte[5];
      r.nextBytes(vals[i]);
    }
    lock.lock();
    try {
      ndx.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);
      if (groundTruth != null) {
        groundTruth.submit(0,nops,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);
      }
    }
  finally {
      lock.unlock();
    }
  }
 else {
    for (int i=0; i < nops; i++) {
      keys[i]=nextKey();
    }
    lock.lock();
    try {
      ndx.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null);
      if (groundTruth != null) {
        groundTruth.submit(0,nops,keys,null,BatchRemoveConstructor.RETURN_MUTATION_COUNT,null);
      }
    }
  finally {
      lock.unlock();
    }
  }
  return null;
}

public boolean allowMultipleAdditions(String systemName){
  return true;
}

protected static boolean isObjectClassPresent(Set objectClasses,String objectClass){
  if (objectClasses != null && !objectClasses.isEmpty()) {
    Iterator itr=objectClasses.iterator();
    while (itr.hasNext()) {
      String serviceOC=(String)itr.next();
      if (serviceOC.equalsIgnoreCase(objectClass)) {
        return true;
      }
    }
  }
  return false;
}

public void writeField(final String name,final int value) throws java.io.IOException {
  writeField(name,Integer.toString(value));
}

public static double lnFactorial(int x){
  if (x < 0)   throw new IllegalArgumentException("Invalid input to factorial: " + x);
 else   if (x > 32)   return lnGamma(x + 1);
 else {
    int l=factorialsBuffer.size();
    for (int i=l; i <= x; i++) {
      factorialsBuffer.add(log(i) + factorialsBuffer.get(i - 1));
    }
    return factorialsBuffer.get(x);
  }
}

public void sync() throws IOException {
  try {
    latch.await();
  }
 catch (  InterruptedException e) {
    Thread.interrupted();
    throw IOExceptionSupport.create(e);
  }
  failOnError();
}

public int addAndGet(T obj,int delta){
  for (; ; ) {
    int current=get(obj);
    int next=current + delta;
    if (compareAndSet(obj,current,next))     return next;
  }
}

public static void closeSilently(Closeable closeable){
  if (closeable == null) {
    return;
  }
  try {
    closeable.close();
  }
 catch (  RuntimeException rethrown) {
    throw rethrown;
  }
catch (  Exception ignored) {
  }
}

public synchronized boolean append(final byte[] data){
  if (data == null) {
    if (Cfg.DEBUG) {
      Check.log(TAG + " (append) null data");
    }
    return true;
  }
  FileOutputStream fout=null;
  OutputStream out=null;
  try {
    fout=new FileOutputStream(file,true);
    out=new BufferedOutputStream(fout,data.length);
    out.write(data);
    out.flush();
  }
 catch (  final Exception ex) {
    return false;
  }
 finally {
    if (fout != null) {
      try {
        fout.close();
      }
 catch (      final IOException e) {
        if (Cfg.EXCEPTION) {
          Check.log(e);
        }
        if (Cfg.DEBUG) {
          Check.log(TAG + " Error: " + e.toString());
        }
      }
    }
    if (out != null) {
      try {
        out.close();
      }
 catch (      final IOException e) {
        if (Cfg.EXCEPTION) {
          Check.log(e);
        }
        if (Cfg.DEBUG) {
          Check.log(TAG + " Error: " + e.toString());
        }
      }
    }
  }
  return true;
}

@SuppressWarnings({"unchecked","rawtypes"}) private void notifyListListeners(){
  if (!listListeners.isEmpty()) {
    List temp=new ArrayList(sensorDataObjects.values());
    temp.addAll(objectStorages.values());
    for (    ListListener<?> listListener : listListeners) {
      listListener.contentChanged(temp);
    }
  }
}

public static InetAddress intToInetAddress(int hostAddress){
  if (hostAddress == 0)   return null;
  byte[] addressBytes={(byte)(0xff & hostAddress),(byte)(0xff & (hostAddress >> 8)),(byte)(0xff & (hostAddress >> 16)),(byte)(0xff & (hostAddress >> 24))};
  try {
    return InetAddress.getByAddress(addressBytes);
  }
 catch (  UnknownHostException e) {
    throw new AssertionError();
  }
}

private AFTPClient actionOpen() throws IOException, PageException {
  required("server",server);
  required("username",username);
  required("password",password);
  AFTPClient client=getClient();
  writeCfftp(client);
  return client;
}

public void testPlusMathContextPositive(){
  String a="92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=41;
  int precision=37;
  RoundingMode rm=RoundingMode.FLOOR;
  MathContext mc=new MathContext(precision,rm);
  String c="929487820944884782312124789.8748298842";
  int cScale=10;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal res=aNumber.plus(mc);
  assertEquals("incorrect value",c,res.toString());
  assertEquals("incorrect scale",cScale,res.scale());
}

private static char[] zzUnpackCMap(String packed){
  int size=0;
  for (int i=0, length=packed.length(); i < length; i+=2) {
    size+=packed.charAt(i);
  }
  char[] map=new char[size];
  int i=0;
  int j=0;
  while (i < packed.length()) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public V putIfAbsent(final K k,final V v){
  final WeakReference<V> ref=newWeakRef(k,v,referenceQueue);
  final WeakReference<V> oldRef=map.putIfAbsent(k,ref);
  final V oldVal=oldRef == null ? null : oldRef.get();
  if (oldRef != null && oldVal == null) {
    if (map.replace(k,oldRef,ref)) {
      if (queue.add(v) && DEBUG) {
        log.debug("put: key=" + k + ", val="+ v);
      }
      didUpdate(k,ref,oldRef);
      return null;
    }
  }
  if (oldVal == null) {
    if (queue.add(v) && DEBUG) {
      log.debug("put: key=" + k + ", val="+ v);
    }
    didUpdate(k,ref,null);
    return null;
  }
  return oldVal;
}

public int diff_commonSuffix(String text1,String text2){
  int text1_length=text1.length();
  int text2_length=text2.length();
  int n=Math.min(text1_length,text2_length);
  for (int i=1; i <= n; i++) {
    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {
      return i - 1;
    }
  }
  return n;
}

public void close(){
  if (elementLayers != null) {
    elementLayers.clear();
    elementLayers=null;
  }
  inputSource=null;
  curListener=null;
}

public void start(){
  if (monitorThread != null) {
    if (!monitorThread.isAlive()) {
      startMonitorThread();
    }
 else {
      LOG.error("The monitor thread is already running");
    }
  }
 else {
    startMonitorThread();
  }
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 164) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

@HLEUnimplemented @HLEFunction(nid=0x41E73E95,version=271) public int sceUsbCamPollReadVideoFrameEnd(){
  if (jpegBuffer == null || jpegBuffer.isNull()) {
    return SceKernelErrors.ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME;
  }
  if (currentVideoFrameCount <= lastVideoFrameCount) {
    if (log.isDebugEnabled()) {
      log.debug(String.format("sceUsbCamPollReadVideoFrameEnd not frame end (%d - %d)",currentVideoFrameCount,lastVideoFrameCount));
    }
    return SceKernelErrors.ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE;
  }
  return writeCurrentVideoImage(jpegBuffer,jpegBufferSize);
}

public void scale(int factor){
  if (m_icon != null) {
    removeAll();
    Image pic=m_icon.getImage();
    int width=m_icon.getIconWidth();
    int height=m_icon.getIconHeight();
    int reduction=width / factor;
    width-=reduction;
    height-=reduction;
    pic=pic.getScaledInstance(width,height,Image.SCALE_SMOOTH);
    m_icon=new ImageIcon(pic);
    m_visualLabel=new JLabel(m_icon);
    add(m_visualLabel,BorderLayout.CENTER);
    Dimension d=m_visualLabel.getPreferredSize();
    Dimension d2=new Dimension((int)d.getWidth() + 10,(int)d.getHeight() + 10);
    setMinimumSize(d2);
    setPreferredSize(d2);
    setMaximumSize(d2);
  }
}

private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  try {
    initFromName(getName());
  }
 catch (  RuntimeException e) {
    if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {
      InvalidObjectException ee=new InvalidObjectException(e.getMessage());
      ee.initCause(e);
      throw ee;
    }
    throw e;
  }
}

public String toLowerCamel(){
  return toCamel(CaseFormat.LOWER_CAMEL);
}

public static byte[] decode(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % FOURBYTE != 0) {
    return null;
  }
  int numberQuadruple=(len / FOURBYTE);
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte decodedData[]=null;
  byte b1=0, b2=0, b3=0, b4=0;
  char d1=0, d2=0, d3=0, d4=0;
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[(numberQuadruple) * 3];
  for (; i < numberQuadruple - 1; i++) {
    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[dataIndex++];
  d4=base64Data[dataIndex++];
  if (!isData((d3)) || !isData((d4))) {
    if (isPad(d3) && isPad(d4)) {
      if ((b2 & 0xf) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
 else     if (!isPad(d3) && isPad(d4)) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0) {
        return null;
      }
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
      return tmp;
    }
 else {
      return null;
    }
  }
 else {
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));
    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);
  }
  return decodedData;
}

protected List<BlockObject> sortFullCopySourceList(List<BlockObject> fcSourceObjects){
  List<BlockObject> sortedSourceObjects=new ArrayList<BlockObject>();
  Map<String,BlockObject> fcSourcObjectsMap=new HashMap<String,BlockObject>();
  for (  BlockObject fcSourceObject : fcSourceObjects) {
    fcSourcObjectsMap.put(fcSourceObject.getLabel(),fcSourceObject);
  }
  List<String> fcSourceLabels=new ArrayList<String>(fcSourcObjectsMap.keySet());
  Collections.sort(fcSourceLabels);
  for (  String fcSourceLabel : fcSourceLabels) {
    sortedSourceObjects.add(fcSourcObjectsMap.get(fcSourceLabel));
  }
  return sortedSourceObjects;
}

public E poll(){
  if (isEmpty()) {
    return null;
  }
  E result=elements[0];
  removeAt(0);
  return result;
}

public MovieSetAddAction(boolean withTitle){
  if (withTitle) {
    putValue(NAME,BUNDLE.getString("movieset.add.desc"));
  }
  putValue(LARGE_ICON_KEY,IconManager.LIST_ADD);
  putValue(SMALL_ICON,IconManager.LIST_ADD);
  putValue(SHORT_DESCRIPTION,BUNDLE.getString("movieset.add.desc"));
}

protected void createRegistry(int port){
  if (rmiRegistry == null) {
    try {
      if (logger.isDebugEnabled()) {
        logger.debug("Starting RMI registry on registryPort: " + port);
      }
      rmiRegistry=LocateRegistry.createRegistry(port);
    }
 catch (    Throwable e) {
      throw new ServerRuntimeException("Unable to start rmi registry on registryPort: " + port,e);
    }
  }
}

public void poll(final UdpSocketStatisticsHandler handler){
  this.statisticsHandler=handler;
  try {
    fileLoader.load();
    final ByteBuffer buffer=fileLoader.getBuffer();
    lineParser.reset();
    lineParser.handleToken(buffer,buffer.position(),buffer.limit());
  }
  finally {
    this.statisticsHandler=null;
  }
  monitoredSockets.purgeEntriesOlderThan(updateCount);
  updateCount++;
}

public static boolean isBookSearchUrl(String url){
  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");
}

private void resetInternal(){
  mTransitionState=TRANSITION_NONE;
  Arrays.fill(mStartAlphas,0);
  mStartAlphas[0]=255;
  Arrays.fill(mAlphas,0);
  mAlphas[0]=255;
  Arrays.fill(mIsLayerOn,false);
  mIsLayerOn[0]=true;
}

void fixWhiteSpace(){
  final int index=mOutputBuilder.length() - 1;
  if (index >= 0) {
    final char lastCharacter=mOutputBuilder.charAt(index);
    if (!Character.isWhitespace(lastCharacter)) {
      mOutputBuilder.append(" ");
    }
  }
}

public void handleTblRequestHandlerListHrefDupActionRequest(RequestInvocationEvent event) throws ModelControlException {
  try {
    Map values=getValues();
    onBeforeSaveProfile(values);
    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);
    SCSOAPBindingRequestHandlerListDupViewBean vb=(SCSOAPBindingRequestHandlerListDupViewBean)getViewBean(SCSOAPBindingRequestHandlerListDupViewBean.class);
    unlockPageTrail();
    passPgSessionMap(vb);
    int idx=Integer.parseInt((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION));
    vb.setDupIndex(idx);
    vb.forwardTo(getRequestContext());
  }
 catch (  AMConsoleException e) {
    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());
  }
}

public boolean expired(long expire){
  long mod=time.getTime();
  long now=System.currentTimeMillis();
  long diff=now - mod;
  if (diff > expire && getSource() != NETWORK) {
    return true;
  }
  return false;
}

@Override public void accept(final MethodVisitor mv){
switch (type) {
case Opcodes.F_NEW:
case Opcodes.F_FULL:
    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));
  break;
case Opcodes.F_APPEND:
mv.visitFrame(type,local.size(),asArray(local),0,null);
break;
case Opcodes.F_CHOP:
mv.visitFrame(type,local.size(),null,0,null);
break;
case Opcodes.F_SAME:
mv.visitFrame(type,0,null,0,null);
break;
case Opcodes.F_SAME1:
mv.visitFrame(type,0,null,1,asArray(stack));
break;
}
}

private static native String[] specialProperties();

private void handleDoneQuery(final UUID queryId,final Future<Void> doneQueryFuture){
  try {
    doneQueryFuture.get();
    throw new InterruptedException();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
catch (  ExecutionException e) {
    throw new RuntimeException(e);
  }
}

public void storeDevice(Device d){
  if (!isMaster)   return;
  if (d == null)   return;
  long now=System.nanoTime();
  writeUpdatedDeviceToStorage(d);
  lastWriteTimes.put(d.getDeviceKey(),now);
}

synchronized public static List<String> formerIdentities(){
  if (instance == null) {
    instance=new NodeIdentity();
    log.info("Using {} as the JMRI Node identity",instance.getIdentity());
  }
  return instance.getFormerIdentities();
}

public final double doOperation(){
  final int dim=parameter.getDimension();
  double sum=0.0;
  if (usesPriorOnSum) {
    for (int i=0; i < dim; i++) {
      sum+=Math.abs(parameter.getParameterValue(i));
    }
  }
  final int pos=MathUtils.nextInt(dim);
  final int value=(int)parameter.getParameterValue(pos);
  double logq=0.0;
  if (value == 0) {
    logq=bitFlipHelper.flipZero(pos,dim,sum);
  }
 else   if (value == 1) {
    logq=bitFlipHelper.flipOne(pos,dim,sum);
  }
 else   if (value == -1) {
    logq=bitFlipHelper.flipNegOne(pos,dim,sum);
  }
 else {
    throw new RuntimeException("expected 1 or 0 or -1");
  }
  if (!usesPriorOnSum) {
    logq=0;
  }
  return logq;
}

@After public void tearDown(){
  webClient.closeAllWindows();
}

@Override public void chartProgress(ChartProgressEvent event){
}

public void init(Object o,int depth,int traversal){
  m_queue.clear();
  m_depth=depth;
  if (traversal < 0 || traversal >= Constants.TRAVERSAL_COUNT)   throw new IllegalArgumentException("Unrecognized traversal type: " + traversal);
  m_traversal=traversal;
  m_includeNodes=(traversal == Constants.NODE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);
  m_includeEdges=(traversal == Constants.EDGE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);
  if (m_includeNodes) {
    if (o instanceof Node) {
      m_queue.add(o,0);
    }
 else {
      Iterator tuples=(Iterator)o;
      while (tuples.hasNext())       m_queue.add(tuples.next(),0);
    }
  }
 else {
    if (o instanceof Node) {
      Node n=(Node)o;
      m_queue.visit(n,0);
      Iterator edges=getEdges(n);
      while (edges.hasNext()) {
        Edge e=(Edge)edges.next();
        Node nn=e.getAdjacentNode(n);
        m_queue.visit(nn,1);
        if (m_queue.getDepth(e) < 0)         m_queue.add(e,1);
      }
    }
 else {
      Iterator tuples=(Iterator)o;
      while (tuples.hasNext()) {
        Node n=(Node)tuples.next();
        m_queue.visit(n,0);
        Iterator edges=getEdges(n);
        while (edges.hasNext()) {
          Edge e=(Edge)edges.next();
          Node nn=e.getAdjacentNode(n);
          m_queue.visit(nn,1);
          if (m_queue.getDepth(e) < 0)           m_queue.add(e,1);
        }
      }
    }
  }
}

@Override public JapaneseDate dateEpochDay(long epochDay){
  return new JapaneseDate(LocalDate.ofEpochDay(epochDay));
}

public long convertTransverseMercatorToGeodetic(double Easting,double Northing){
  double c;
  double de;
  double dlam;
  double eta;
  double eta2;
  double eta3;
  double eta4;
  double ftphi;
  int i;
  double sn;
  double sr;
  double t;
  double tan2;
  double tan4;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double tmd;
  double tmdo;
  long Error_Code=TRANMERC_NO_ERROR;
  if ((Easting < (TranMerc_False_Easting - TranMerc_Delta_Easting)) || (Easting > (TranMerc_False_Easting + TranMerc_Delta_Easting))) {
    Error_Code|=TRANMERC_EASTING_ERROR;
  }
  if ((Northing < (TranMerc_False_Northing - TranMerc_Delta_Northing)) || (Northing > (TranMerc_False_Northing + TranMerc_Delta_Northing))) {
    Error_Code|=TRANMERC_NORTHING_ERROR;
  }
  if (Error_Code == TRANMERC_NO_ERROR) {
    tmdo=TranMerc_ap * TranMerc_Origin_Lat - TranMerc_bp * Math.sin(2.0 * TranMerc_Origin_Lat) + TranMerc_cp * Math.sin(4.0 * TranMerc_Origin_Lat) - TranMerc_dp * Math.sin(6.0 * TranMerc_Origin_Lat) + TranMerc_ep * Math.sin(8.0 * TranMerc_Origin_Lat);
    tmd=tmdo + (Northing - TranMerc_False_Northing) / TranMerc_Scale_Factor;
    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(0.e0),2)),3);
    ftphi=tmd / sr;
    for (i=0; i < 5; i++) {
      t10=TranMerc_ap * ftphi - TranMerc_bp * Math.sin(2.0 * ftphi) + TranMerc_cp * Math.sin(4.0 * ftphi) - TranMerc_dp * Math.sin(6.0 * ftphi) + TranMerc_ep * Math.sin(8.0 * ftphi);
      sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);
      ftphi=ftphi + (tmd - t10) / sr;
    }
    sr=TranMerc_a * (1.e0 - TranMerc_es) / Math.pow(Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2)),3);
    sn=TranMerc_a / Math.sqrt(1.e0 - TranMerc_es * Math.pow(Math.sin(ftphi),2));
    c=Math.cos(ftphi);
    t=Math.tan(ftphi);
    tan2=t * t;
    tan4=tan2 * tan2;
    eta=TranMerc_ebs * Math.pow(c,2);
    eta2=eta * eta;
    eta3=eta2 * eta;
    eta4=eta3 * eta;
    de=Easting - TranMerc_False_Easting;
    if (Math.abs(de) < 0.0001)     de=0.0;
    t10=t / (2.e0 * sr * sn* Math.pow(TranMerc_Scale_Factor,2));
    t11=t * (5.e0 + 3.e0 * tan2 + eta - 4.e0 * Math.pow(eta,2) - 9.e0 * tan2 * eta) / (24.e0 * sr * Math.pow(sn,3)* Math.pow(TranMerc_Scale_Factor,4));
    t12=t * (61.e0 + 90.e0 * tan2 + 46.e0 * eta + 45.E0 * tan4 - 252.e0 * tan2 * eta - 3.e0 * eta2 + 100.e0 * eta3 - 66.e0 * tan2 * eta2 - 90.e0 * tan4 * eta + 88.e0 * eta4 + 225.e0 * tan4 * eta2 + 84.e0 * tan2 * eta3 - 192.e0 * tan2 * eta4) / (720.e0 * sr * Math.pow(sn,5)* Math.pow(TranMerc_Scale_Factor,6));
    t13=t * (1385.e0 + 3633.e0 * tan2 + 4095.e0 * tan4 + 1575.e0 * Math.pow(t,6)) / (40320.e0 * sr * Math.pow(sn,7)* Math.pow(TranMerc_Scale_Factor,8));
    Latitude=ftphi - Math.pow(de,2) * t10 + Math.pow(de,4) * t11 - Math.pow(de,6) * t12 + Math.pow(de,8) * t13;
    t14=1.e0 / (sn * c * TranMerc_Scale_Factor);
    t15=(1.e0 + 2.e0 * tan2 + eta) / (6.e0 * Math.pow(sn,3) * c* Math.pow(TranMerc_Scale_Factor,3));
    t16=(5.e0 + 6.e0 * eta + 28.e0 * tan2 - 3.e0 * eta2 + 8.e0 * tan2 * eta + 24.e0 * tan4 - 4.e0 * eta3 + 4.e0 * tan2 * eta2 + 24.e0 * tan2 * eta3) / (120.e0 * Math.pow(sn,5) * c* Math.pow(TranMerc_Scale_Factor,5));
    t17=(61.e0 + 662.e0 * tan2 + 1320.e0 * tan4 + 720.e0 * Math.pow(t,6)) / (5040.e0 * Math.pow(sn,7) * c* Math.pow(TranMerc_Scale_Factor,7));
    dlam=de * t14 - Math.pow(de,3) * t15 + Math.pow(de,5) * t16 - Math.pow(de,7) * t17;
    Longitude=TranMerc_Origin_Long + dlam;
    if (Math.abs(Latitude) > (90.0 * PI / 180.0))     Error_Code|=TRANMERC_NORTHING_ERROR;
    if ((Longitude) > (PI)) {
      Longitude-=(2 * PI);
      if (Math.abs(Longitude) > PI)       Error_Code|=TRANMERC_EASTING_ERROR;
    }
    if (Math.abs(dlam) > (9.0 * PI / 180) * Math.cos(Latitude)) {
      Error_Code|=TRANMERC_LON_WARNING;
    }
    if (Latitude > 1.0e10)     Error_Code|=TRANMERC_LON_WARNING;
  }
  return (Error_Code);
}

private void checkEmpty(){
  for (int i=0; i < gridCount(); i++) {
    IgniteCache<Integer,String> cache=jcache(i);
    assertEquals(0,cache.localSize());
    assertEquals(0,cache.size());
    for (    CachePeekMode peekMode : CachePeekMode.values()) {
      assertEquals(0,cache.localSize(peekMode));
      assertEquals(0,cache.size(peekMode));
    }
  }
  checkPrimarySize(0);
}

Node<K,V> find(int h,Object k){
  Node<K,V> e=this;
  if (k != null) {
    do {
      K ek;
      if (e.hash == h && ((ek=e.key) == k || ek != null && myHashingStrategy.equals((K)k,ek))) {
        return e;
      }
    }
 while ((e=e.next) != null);
  }
  return null;
}

@Override public synchronized void put(String key,Entry entry){
  pruneIfNeeded(entry.data.length);
  File file=getFileForKey(key);
  try {
    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));
    CacheHeader e=new CacheHeader(key,entry);
    boolean success=e.writeHeader(fos);
    if (!success) {
      fos.close();
      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());
      throw new IOException();
    }
    fos.write(entry.data);
    fos.close();
    putEntry(key,e);
    return;
  }
 catch (  IOException e) {
  }
  boolean deleted=file.delete();
  if (!deleted) {
    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());
  }
}

@LoopProcessorAnnotations(loopProcessorAnnotations={@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR}),@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.INTERFACES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR})},aspect=LoopAspectConstants.AFTER) public static void operationsProcessor(@GenerationRegistry GenerationPolicyRegistry generationValueGetter,@GenerationBaseElement Object element,@GenerationLoopElement Object modelPackage,@GenerationLoopElement(id={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.INTERFACES_PROCESSOR}) Object parent){
  List<Object> userAddedDependTypes=generationValueGetter.getValues(DEPEND_TYPES_TRACKER,parent);
  List<Object> parametersArgument=generationValueGetter.getValues(IModelingDecisions.OPERATION_PARAMETER_ARGUMENT,element,parent);
  for (  Object item : parametersArgument) {
    if (item instanceof SimpleEntry == false) {
      continue;
    }
    SimpleEntry<?,?> simpleEntry=(SimpleEntry<?,?>)item;
    Object type=simpleEntry.getKey();
    if (!userAddedDependTypes.contains(type)) {
      List<Object> types=generationValueGetter.getValues(IModelingConstants.TYPES_TRACKER,modelPackage,type);
      if (types.isEmpty()) {
        continue;
      }
      addDepend(generationValueGetter,parent,type);
    }
  }
}

public static void addLanguage(Language language){
  if (language == null)   return;
  ArrayList<Language> list=new ArrayList<Language>(Arrays.asList(s_languages));
  list.add(language);
  s_languages=new Language[list.size()];
  list.toArray(s_languages);
}

public static int binarySearchCeil(long[] a,long key,boolean inclusive,boolean stayInBounds){
  int index=Arrays.binarySearch(a,key);
  index=index < 0 ? ~index : (inclusive ? index : (index + 1));
  return stayInBounds ? Math.min(a.length - 1,index) : index;
}

protected void doAddUser(User user) throws UsersRepositoryException {
  Connection conn=null;
  PreparedStatement addUserStatement=null;
  try {
    conn=openConnection();
    addUserStatement=conn.prepareStatement(m_insertUserSql);
    setUserForInsertStatement(user,addUserStatement);
    addUserStatement.execute();
  }
 catch (  SQLException sqlExc) {
    sqlExc.printStackTrace();
    throw new UsersRepositoryException("Error accessing database",sqlExc);
  }
 finally {
    theJDBCUtil.closeJDBCStatement(addUserStatement);
    theJDBCUtil.closeJDBCConnection(conn);
  }
}

void blockMix128(long k1,long k2){
  h1^=mixK1(k1);
  h1=Long.rotateLeft(h1,27);
  h1+=h2;
  h1=(h1 * 5) + 0x52dce729;
  h2^=mixK2(k2);
  h2=Long.rotateLeft(h2,31);
  h2+=h1;
  h2=(h2 * 5) + 0x38495ab5;
}

private void registerHost(SimEvent ev){
  NetworkHost hs=(NetworkHost)ev.getData();
  hostlist.put(hs.getId(),hs);
}

@Override public void reconcileFlow(OFMatchReconcile ofmRcIn,EventPriority priority){
  if (ofmRcIn == null)   return;
  OFMatchReconcile myOfmRc=new OFMatchReconcile(ofmRcIn);
  flowQueue.offer(myOfmRc,priority);
  ctrFlowReconcileRequest.increment();
  Date currTime=new Date();
  long delay=0;
  if (currTime.after(new Date(lastReconcileTime.getTime() + 1000))) {
    delay=0;
  }
 else {
    delay=FLOW_RECONCILE_DELAY_MILLISEC;
  }
  flowReconcileTask.reschedule(delay,TimeUnit.MILLISECONDS);
  if (logger.isTraceEnabled()) {
    logger.trace("Reconciling flow: {}, total: {}",myOfmRc.toString(),flowQueue.size());
  }
}

public Format(String pFormatString){
  String formatVars[]=pFormatString.split("/");
  mId=Integer.parseInt(formatVars[0]);
}

@Override public synchronized void put(String key,Entry entry){
  pruneIfNeeded(entry.data.length);
  File file=getFileForKey(key);
  try {
    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));
    CacheHeader e=new CacheHeader(key,entry);
    boolean success=e.writeHeader(fos);
    if (!success) {
      fos.close();
      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());
      throw new IOException();
    }
    fos.write(entry.data);
    fos.close();
    putEntry(key,e);
    return;
  }
 catch (  IOException e) {
  }
  boolean deleted=file.delete();
  if (!deleted) {
    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());
  }
}

void createJar(FileOutputStream outStream,Map<String,byte[]> all) throws IOException {
  JarOutputStream jar=new JarOutputStream(outStream);
  for (  Entry<String,byte[]> entry : all.entrySet()) {
    String name=entry.getKey();
    JarEntry jar_entry=new JarEntry(name);
    jar.putNextEntry(jar_entry);
    jar.write(entry.getValue());
    jar.closeEntry();
  }
  jar.flush();
  jar.close();
}

public void appendCell(int value){
  appendCell(String.valueOf(value));
}

public void expectServerProxyFailed(){
  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED));
}

protected final void refreshLoadingViewsSize(){
  final int maximumPullScroll=(int)(getMaximumPullScroll() * 1.2f);
  int pLeft=getPaddingLeft();
  int pTop=getPaddingTop();
  int pRight=getPaddingRight();
  int pBottom=getPaddingBottom();
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    if (mMode.showHeaderLoadingLayout()) {
      mHeaderLayout.setWidth(maximumPullScroll);
      pLeft=-maximumPullScroll;
    }
 else {
      pLeft=0;
    }
  if (mMode.showFooterLoadingLayout()) {
    mFooterLayout.setWidth(maximumPullScroll);
    pRight=-maximumPullScroll;
  }
 else {
    pRight=0;
  }
break;
case VERTICAL:
if (mMode.showHeaderLoadingLayout()) {
mHeaderLayout.setHeight(maximumPullScroll);
pTop=-maximumPullScroll;
}
 else {
pTop=0;
}
if (mMode.showFooterLoadingLayout()) {
mFooterLayout.setHeight(maximumPullScroll);
pBottom=-maximumPullScroll;
}
 else {
pBottom=0;
}
break;
}
if (DEBUG) {
Log.d(LOG_TAG,String.format("Setting Padding. L: %d, T: %d, R: %d, B: %d",pLeft,pTop,pRight,pBottom));
}
setPadding(pLeft,pTop,pRight,pBottom);
}

public Object remove(final Object key){
  return parameters.remove(key);
}

@Override public void recalculateAttributeStatistics(Attribute attribute){
  List<Attribute> allAttributes=new ArrayList<Attribute>();
  allAttributes.add(attribute);
  recalculateAttributeStatistics(allAttributes);
}

public boolean isEmpty(){
  return children.isEmpty();
}

public void insertColumn(int columnIndex,ColumnSpec columnSpec){
  if (columnIndex < 1 || columnIndex > getColumnCount()) {
    throw new IndexOutOfBoundsException("The column index " + columnIndex + "must be in the range [1, "+ getColumnCount()+ "].");
  }
  colSpecs.add(columnIndex - 1,columnSpec);
  shiftComponentsHorizontally(columnIndex,false);
  adjustGroupIndices(colGroupIndices,columnIndex,false);
}

public int match(String s){
  String rep=new String(_dataChars,0,_nDataChars);
  return rep.indexOf(s);
}

private int calcRhsSize(Production production){
  int result=production.getRHSSizeWithoutEpsilon();
  if (production.getLHS() instanceof AuxiliaryLHS4SemanticShiftAction) {
    final AuxiliaryLHS4SemanticShiftAction auxAction=(AuxiliaryLHS4SemanticShiftAction)production.getLHS();
    result+=auxAction.numPrecedingSymbolsNotEpsilon;
  }
  return result;
}

private BshMethod loadScriptedCommand(InputStream in,String name,Class[] argTypes,String resourcePath,Interpreter interpreter) throws UtilEvalError {
  try {
    interpreter.eval(new InputStreamReader(in),this,resourcePath);
  }
 catch (  EvalError e) {
    Interpreter.debug(e.toString());
    throw new UtilEvalError("Error loading script: " + e.getMessage());
  }
  BshMethod meth=getMethod(name,argTypes);
  return meth;
}

public static Object invokeCompiledCommand(Class commandClass,Object[] args,Interpreter interpreter,CallStack callstack) throws UtilEvalError {
  Object[] invokeArgs=new Object[args.length + 2];
  invokeArgs[0]=interpreter;
  invokeArgs[1]=callstack;
  System.arraycopy(args,0,invokeArgs,2,args.length);
  BshClassManager bcm=interpreter.getClassManager();
  try {
    return Reflect.invokeStaticMethod(bcm,commandClass,"invoke",invokeArgs);
  }
 catch (  InvocationTargetException e) {
    throw new UtilEvalError("Error in compiled command: " + e.getTargetException());
  }
catch (  ReflectError e) {
    throw new UtilEvalError("Error invoking compiled command: " + e);
  }
}

private static void computeProbabilitiesMultinomialLogistic(double[] responses){
  double[] r=responses.clone();
  for (int j=0; j < r.length; j++) {
    double sum=0;
    boolean overflow=false;
    for (int k=0; k < r.length; k++) {
      if (r[k] - r[j] > 700) {
        overflow=true;
        break;
      }
      sum+=Math.exp(r[k] - r[j]);
    }
    if (overflow) {
      responses[j]=0.0;
    }
 else {
      responses[j]=1.0 / sum;
    }
  }
}

public int addClientExternal(SSOToken token,Map props) throws AMClientCapException {
synchronized (externalClientData) {
    extCapInstance.addClient(token,props);
    String ct=getClientType(props);
    Map eMap=mergeWithParent(props);
    externalClientData.put(ct,eMap);
    addToIndexes(ct,eMap);
  }
  return 0;
}

public static void delete(File resourceToDelete) throws IOException {
  if (resourceToDelete.exists()) {
    delete(resourceToDelete.toPath());
  }
}

private void addExportRemoveVolumeSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID,List<URI> boIDs) throws InternalException {
  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);
  String exportStep=workflow.createStepId();
  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"export remove volumes (that contain RP snapshots)");
  Map<URI,List<URI>> deviceToBlockObjects=new HashMap<URI,List<URI>>();
  for (  URI snapshotID : boIDs) {
    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,snapshotID);
    List<BlockObject> objectsToRemove=getExportObjectsForBookmark(snapshot);
    for (    BlockObject blockObject : objectsToRemove) {
      List<URI> blockObjects=deviceToBlockObjects.get(blockObject.getStorageController());
      if (blockObjects == null) {
        blockObjects=new ArrayList<URI>();
        deviceToBlockObjects.put(blockObject.getStorageController(),blockObjects);
      }
      blockObjects.add(blockObject.getId());
    }
  }
  for (  Map.Entry<URI,List<URI>> deviceEntry : deviceToBlockObjects.entrySet()) {
    _log.info(String.format("Adding workflow step to remove RP bookmarks and associated target volumes from export.  ExportGroup: %s, Storage System: %s, BlockObjects: %s",exportGroup.getId(),deviceEntry.getKey(),deviceEntry.getValue()));
    _exportWfUtils.generateExportGroupRemoveVolumes(workflow,STEP_EXPORT_REMOVE_SNAPSHOT,STEP_EXPORT_GROUP_DISABLE,deviceEntry.getKey(),exportGroupID,deviceEntry.getValue());
  }
  _log.info(String.format("Created export group remove snapshot steps in workflow: %s",exportGroup.getId()));
}

public double inferenceByGibbsSampling(Document d,double[] pzd,int numBurnIn,int numSampling){
  Arrays.fill(pzd,0);
  double loglikelihood=0.0;
  for (int i=0; i < numBurnIn + numSampling; i++) {
    loglikelihood+=gibbsSampling(d);
    if (i >= numBurnIn) {
      for (      int topic : d.topics) {
        if (topic != NO_TOPIC)         pzd[topic]++;
      }
    }
 else {
      loglikelihood=0;
    }
  }
  normalize(pzd,alpha);
  return loglikelihood / numSampling;
}

public static void remove(String dbgToken){
  dbgTable.remove(dbgToken);
}

protected void checkSAXVersion(Hashtable h){
  if (null == h)   h=new Hashtable();
  final String SAX_VERSION1_CLASS="org.xml.sax.Parser";
  final String SAX_VERSION1_METHOD="parse";
  final String SAX_VERSION2_CLASS="org.xml.sax.XMLReader";
  final String SAX_VERSION2_METHOD="parse";
  final String SAX_VERSION2BETA_CLASSNF="org.xml.sax.helpers.AttributesImpl";
  final String SAX_VERSION2BETA_METHODNF="setAttributes";
  final Class oneStringArg[]={java.lang.String.class};
  final Class attributesArg[]={org.xml.sax.Attributes.class};
  try {
    Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2BETA_CLASSNF,ObjectFactory.findClassLoader(),true);
    Method method=clazz.getMethod(SAX_VERSION2BETA_METHODNF,attributesArg);
    h.put(VERSION + "SAX","2.0");
  }
 catch (  Exception e) {
    h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());
    h.put(ERROR,ERROR_FOUND);
    try {
      Class clazz=ObjectFactory.findProviderClass(SAX_VERSION2_CLASS,ObjectFactory.findClassLoader(),true);
      Method method=clazz.getMethod(SAX_VERSION2_METHOD,oneStringArg);
      h.put(VERSION + "SAX-backlevel","2.0beta2-or-earlier");
    }
 catch (    Exception e2) {
      h.put(ERROR + VERSION + "SAX","ERROR attempting to load SAX version 2 class: " + e.toString());
      h.put(ERROR,ERROR_FOUND);
      try {
        Class clazz=ObjectFactory.findProviderClass(SAX_VERSION1_CLASS,ObjectFactory.findClassLoader(),true);
        Method method=clazz.getMethod(SAX_VERSION1_METHOD,oneStringArg);
        h.put(VERSION + "SAX-backlevel","1.0");
      }
 catch (      Exception e3) {
        h.put(ERROR + VERSION + "SAX-backlevel","ERROR attempting to load SAX version 1 class: " + e3.toString());
      }
    }
  }
}

protected boolean isRecompilationNeeded(int[] loadedChecksums){
  this.checksums[0]=calculateChecksum();
  if (this.checksums[0] != loadedChecksums[0]) {
    if (Trace.swcChecksum) {
      Trace.trace("isRecompilationNeeded: calculated checksum differs from last checksum, recompile");
    }
    return true;
  }
  if (!isSwcChecksumEnabled) {
    if (Trace.swcChecksum) {
      Trace.trace("isRecompilationNeeded: checksums equal, swc-checksum disabled, incremental compile");
    }
    return false;
  }
  Map<QName,Long> signatureChecksums=swcDefSignatureChecksums;
  if (signatureChecksums == null) {
    if (Trace.swcChecksum) {
      Trace.trace("isRecompilationNeeded: checksums equal, signatureChecksums is null, incremental compile");
    }
  }
 else {
    for (    Map.Entry<QName,Long> entry : signatureChecksums.entrySet()) {
      QName qName=(QName)entry.getKey();
      Long dataSignatureChecksum=(Long)entry.getValue();
      Long swcSignatureChecksum=swcContext.getChecksum(qName);
      if (swcSignatureChecksum == null && qName != null) {
        Source source=swcContext.getSource(qName.getNamespace(),qName.getLocalPart());
        if (source != null) {
          swcSignatureChecksum=new Long(source.getLastModified());
        }
      }
      if (Trace.swcChecksum) {
        if (dataSignatureChecksum == null) {
          throw new IllegalStateException("dataSignatureChecksum should never be null");
        }
      }
      if (dataSignatureChecksum != null && swcSignatureChecksum == null) {
        if (Trace.swcChecksum) {
          Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile");
          Trace.trace("compare " + entry.getKey());
          Trace.trace("data =  " + dataSignatureChecksum);
          Trace.trace("swc  =  " + swcSignatureChecksum);
        }
        return true;
      }
      if (dataSignatureChecksum != null) {
        if (dataSignatureChecksum.longValue() != swcSignatureChecksum.longValue()) {
          if (Trace.swcChecksum) {
            Trace.trace("isRecompilationNeeded: signature checksums not equal, recompile");
            Trace.trace("compare " + entry.getKey());
            Trace.trace("data =  " + dataSignatureChecksum);
            Trace.trace("swc  =  " + swcSignatureChecksum);
          }
          return true;
        }
      }
 else {
        return true;
      }
    }
  }
  boolean result=!areSwcFileChecksumsEqual();
  if (Trace.swcChecksum) {
    Trace.trace("isRecompilationNeeded: " + (result ? "recompile" : "incremental compile"));
  }
  return result;
}

private void adjustMinPrefForSpanningComps(DimConstraint[] specs,Float[] defPush,FlowSizeSpec fss,ArrayList<LinkedDimGroup>[] groupsLists){
  for (int r=groupsLists.length - 1; r >= 0; r--) {
    ArrayList<LinkedDimGroup> groups=groupsLists[r];
    for (    LinkedDimGroup group : groups) {
      if (group.span == 1) {
        continue;
      }
      int[] sizes=group.getMinPrefMax();
      for (int s=LayoutUtil.MIN; s <= LayoutUtil.PREF; s++) {
        int cSize=sizes[s];
        if (cSize == LayoutUtil.NOT_SET) {
          continue;
        }
        int rowSize=0;
        int sIx=(r << 1) + 1;
        int len=Math.min((group.span << 1),fss.sizes.length - sIx) - 1;
        for (int j=sIx; j < sIx + len; j++) {
          int sz=fss.sizes[j][s];
          if (sz != LayoutUtil.NOT_SET) {
            rowSize+=sz;
          }
        }
        if (rowSize < cSize && len > 0) {
          for (int eagerness=0, newRowSize=0; eagerness < 4 && newRowSize < cSize; eagerness++) {
            newRowSize=fss.expandSizes(specs,defPush,cSize,sIx,len,s,eagerness);
          }
        }
      }
    }
  }
}

public static String dumpAsHex(byte[] byteBuffer,int length){
  StringBuilder outputBuilder=new StringBuilder(length * 4);
  int p=0;
  int rows=length / 8;
  for (int i=0; (i < rows) && (p < length); i++) {
    int ptemp=p;
    for (int j=0; j < 8; j++) {
      String hexVal=Integer.toHexString(byteBuffer[ptemp] & 0xff);
      if (hexVal.length() == 1) {
        hexVal="0" + hexVal;
      }
      outputBuilder.append(hexVal + " ");
      ptemp++;
    }
    outputBuilder.append("    ");
    for (int j=0; j < 8; j++) {
      int b=0xff & byteBuffer[p];
      if (b > 32 && b < 127) {
        outputBuilder.append((char)b + " ");
      }
 else {
        outputBuilder.append(". ");
      }
      p++;
    }
    outputBuilder.append("\n");
  }
  int n=0;
  for (int i=p; i < length; i++) {
    String hexVal=Integer.toHexString(byteBuffer[i] & 0xff);
    if (hexVal.length() == 1) {
      hexVal="0" + hexVal;
    }
    outputBuilder.append(hexVal + " ");
    n++;
  }
  for (int i=n; i < 8; i++) {
    outputBuilder.append("   ");
  }
  outputBuilder.append("    ");
  for (int i=p; i < length; i++) {
    int b=0xff & byteBuffer[i];
    if (b > 32 && b < 127) {
      outputBuilder.append((char)b + " ");
    }
 else {
      outputBuilder.append(". ");
    }
  }
  outputBuilder.append("\n");
  return outputBuilder.toString();
}

public void parseFile(ChatEventParseListener listener){
synchronized (this) {
    @SuppressWarnings("unused") long startTime=System.currentTimeMillis();
    BufferedReader reader=null;
    try {
      reader=new BufferedReader(new FileReader(pathToFile));
      String currentLine=reader.readLine();
      while (currentLine != null) {
        try {
          ChatEvent event=ChatEventUtils.deserializeChatEvent(currentLine);
          if (!listener.onNewEventParsed(event)) {
            break;
          }
        }
 catch (        Throwable t) {
          LOG.warn("Error reading chat event line " + currentLine + " skipping ChatEvent",t);
        }
        currentLine=reader.readLine();
      }
      listener.onParseCompleted();
    }
 catch (    IOException ioe) {
      throw new RuntimeException(ioe);
    }
 finally {
      if (reader != null) {
        try {
          reader.close();
        }
 catch (        Throwable t) {
        }
      }
    }
  }
}

private CoderResult escapeSequenceOther(short newByte){
  if (newByte >= 0x20 && newByte <= 0x2F) {
    state=ESCAPE_SEQUENCE_OTHER;
    versionSequenceAllowed=false;
    queue.write(newByte);
  }
 else   if (newByte >= 0x30 && newByte <= 0x7E) {
    state=NORMAL_BYTES;
    versionSequenceAllowed=false;
    queue.reset();
  }
 else {
    return malformedInput(ERR_ESCBYTE);
  }
  return CoderResult.UNDERFLOW;
}

@Nullable public static NetworkParameters fromID(String id){
  if (id.equals(ID_MAINNET)) {
    return MainNetParams.get();
  }
 else   if (id.equals(ID_TESTNET)) {
    return TestNet3Params.get();
  }
 else   if (id.equals(ID_UNITTESTNET)) {
    return UnitTestParams.get();
  }
 else   if (id.equals(ID_REGTEST)) {
    return RegTestParams.get();
  }
 else   if (id.equals(ID_ALPHANET)) {
    return AlphaNetParams.get();
  }
 else {
    return null;
  }
}

public void addCertificatesAndCRLs(CertStore certStore) throws CertStoreException, CMSException {
  certs.addAll(CMSUtils.getCertificatesFromStore(certStore));
  crls.addAll(CMSUtils.getCRLsFromStore(certStore));
}

protected abstract void storeBody(DataOutputStream dos) throws IOException ;

private double findAngle(Point originPoint,Point targetPoint){
  int x1=originPoint.x;
  int y1=originPoint.y;
  int x2=targetPoint.x;
  int y2=targetPoint.y;
  double angle=0.0;
  double offset=0.0;
  double sideA=x2 - x1;
  double sideB=0.0;
  if (y1 >= y2) {
    sideB=y1 - y2;
    offset=Math.toRadians(-90);
  }
 else {
    sideB=-(y2 - y1);
    offset=Math.toRadians(90);
  }
  if (sideB == 0) {
    return angle;
  }
  angle=Math.atan(sideA / sideB);
  return angle + offset;
}

public void appendWhitespace(Appendable writer) throws IOException {
  writer.append(whiteSpace);
}

void clearResourceIndex(String resourceTypeName){
  Set resourceTypes=new HashSet();
  resourceTypes.addAll(resourceIndices.keySet());
  Iterator iter=resourceTypes.iterator();
  while (iter.hasNext()) {
    String resourceType=(String)iter.next();
    if (resourceType.equalsIgnoreCase(resourceTypeName)) {
      resourceIndices.remove(resourceType);
      break;
    }
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

@Override public byte[] bitcoinSerialize(){
  if (headerBytesValid && transactionBytesValid) {
    Preconditions.checkNotNull(payload,"Bytes should never be null if headerBytesValid && transactionBytesValid");
    if (length == payload.length) {
      return payload;
    }
 else {
      byte[] buf=new byte[length];
      System.arraycopy(payload,offset,buf,0,length);
      return buf;
    }
  }
  ByteArrayOutputStream stream=new UnsafeByteArrayOutputStream(length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength() : length);
  try {
    writeHeader(stream);
    writeTransactions(stream);
  }
 catch (  IOException e) {
  }
  return stream.toByteArray();
}

@Override public List<Period> generateRollingPeriods(DateTimeUnit dateTimeUnit){
  Calendar calendar=getCalendar();
  List<Period> periods=Lists.newArrayList();
  dateTimeUnit=calendar.minusDays(dateTimeUnit,calendar.weekday(dateTimeUnit) - 1);
  dateTimeUnit=calendar.minusDays(dateTimeUnit,357);
  for (int i=0; i < 52; i++) {
    periods.add(createPeriod(dateTimeUnit,calendar));
    dateTimeUnit=calendar.plusWeeks(dateTimeUnit,1);
  }
  return periods;
}

@Override public Set<String> vertexMatchPatternLabels(){
  return Collections.emptySet();
}

public boolean resetUnreadCounts(int aSection){
  boolean retCode=false;
  ArrayList<RoomSummary> summariesList=mSummaryListByGroupPosition.get(aSection);
  if (null != summariesList) {
    for (int summaryIdx=0; summaryIdx < summariesList.size(); summaryIdx++) {
      retCode|=resetUnreadCount(aSection,summaryIdx);
    }
  }
 else {
    Log.w(DBG_CLASS_NAME,"## resetUnreadCounts(): section " + aSection + " was not found in the sections summary list");
  }
  return retCode;
}

public static void addCategory(LexiconCategory category){
  categories.add(category);
}

private static int CallNonvirtualObjectMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {
  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualObjectMethodV  \n");
  RuntimeEntrypoints.checkJNICountDownToGC();
  try {
    Object obj=env.getJNIRef(objJREF);
    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,null,true);
    return env.pushJNIRef(returnObj);
  }
 catch (  Throwable unexpected) {
    if (traceJNI)     unexpected.printStackTrace(System.err);
    env.recordException(unexpected);
    return 0;
  }
}

private Tuple<Message,Connection> tryOtherMessages(){
  List<Tuple<Message,Connection>> messages=new ArrayList<Tuple<Message,Connection>>();
  Collection<Message> msgCollection=getMessageCollection();
  for (  Connection con : getConnections()) {
    DTNHost other=con.getOtherNode(getHost());
    ProphetV2Router othRouter=(ProphetV2Router)other.getRouter();
    if (othRouter.isTransferring()) {
      continue;
    }
    for (    Message m : msgCollection) {
      if (othRouter.hasMessage(m.getId())) {
        continue;
      }
      if ((othRouter.getPredFor(m.getTo()) >= getPredFor(m.getTo()))) {
        messages.add(new Tuple<Message,Connection>(m,con));
      }
    }
  }
  if (messages.size() == 0) {
    return null;
  }
  Collections.sort(messages,new TupleComparator());
  return tryMessagesForConnected(messages);
}

protected int makePressColor(){
  int r=(this.backgroundColor >> 16) & 0xFF;
  int g=(this.backgroundColor >> 8) & 0xFF;
  int b=(this.backgroundColor >> 0) & 0xFF;
  r=(r - 30 < 0) ? 0 : r - 30;
  g=(g - 30 < 0) ? 0 : g - 30;
  b=(b - 30 < 0) ? 0 : b - 30;
  return Color.rgb(r,g,b);
}

private void testStreamsFromValues(){
  Stream<String> movieNames=Stream.of("Gods Must Be Crazy","Fiddler On The Roof","Ben-Hur");
  movieNames.forEach(null);
  String[] movieNames2={"Gods Must Be Crazy","Fiddler On The Roof"};
  Stream<String> mNames2=Stream.of(movieNames2);
  mNames2.forEach(null);
  List<String> moviesList=new ArrayList<>();
  moviesList.add("The Sound of Music");
  moviesList.add("Gone with the Wind");
  Stream<List<String>> fromList=Stream.of(moviesList);
  fromList.forEach(null);
}

public static void cacheClientUserId(ConsumerBean consumerBean,Long internalId,String clientId){
  cacheClientUserId(consumerBean.getShort_name(),internalId,clientId);
}

protected void processEntity(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {
  if (!XMLUtil.checkLiteral(reader,"NTITY")) {
    XMLUtil.skipTag(reader);
    return;
  }
  XMLUtil.skipWhitespace(reader,null);
  char ch=XMLUtil.readChar(reader,'\0');
  if (ch == '%') {
    XMLUtil.skipWhitespace(reader,null);
    entityResolver=this.parameterEntityResolver;
  }
 else {
    reader.unread(ch);
  }
  String key=XMLUtil.scanIdentifier(reader);
  XMLUtil.skipWhitespace(reader,null);
  ch=XMLUtil.readChar(reader,'%');
  String systemID=null;
  String publicID=null;
switch (ch) {
case 'P':
    if (!XMLUtil.checkLiteral(reader,"UBLIC")) {
      XMLUtil.skipTag(reader);
      return;
    }
  XMLUtil.skipWhitespace(reader,null);
publicID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);
XMLUtil.skipWhitespace(reader,null);
systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);
XMLUtil.skipWhitespace(reader,null);
XMLUtil.readChar(reader,'%');
break;
case 'S':
if (!XMLUtil.checkLiteral(reader,"YSTEM")) {
XMLUtil.skipTag(reader);
return;
}
XMLUtil.skipWhitespace(reader,null);
systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);
XMLUtil.skipWhitespace(reader,null);
XMLUtil.readChar(reader,'%');
break;
case '"':
case '\'':
reader.unread(ch);
String value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);
entityResolver.addInternalEntity(key,value);
XMLUtil.skipWhitespace(reader,null);
XMLUtil.readChar(reader,'%');
break;
default :
XMLUtil.skipTag(reader);
}
if (systemID != null) {
entityResolver.addExternalEntity(key,publicID,systemID);
}
}

@Override final Node<V> find(int h,int k){
  for (Node<V> e=first; e != null; ) {
    int s;
    if (((s=lockState) & (WAITER | WRITER)) != 0) {
      if ((e.key == k)) {
        return e;
      }
      e=e.next;
    }
 else     if (U.compareAndSwapInt(this,LOCKSTATE,s,s + READER)) {
      TreeNode<V> r;
      TreeNode<V> p;
      try {
        p=((r=root) == null ? null : r.findTreeNode(h,k));
      }
  finally {
        Thread w;
        if (getAndAddInt(this,LOCKSTATE,-READER) == (READER | WAITER) && (w=waiter) != null) {
          LockSupport.unpark(w);
        }
      }
      return p;
    }
  }
  return null;
}

public boolean isPublic(){
  return Modifier.isPublic(flags);
}

@Override public boolean receiveImage(ImageToProcess img,TaskImageContainer task,boolean blockUntilImageRelease,boolean closeOnImageRelease,Optional<Runnable> runnableWhenDone) throws InterruptedException {
  Set<TaskImageContainer> passTasks=new HashSet<TaskImageContainer>(1);
  passTasks.add(task);
  return receiveImage(img,passTasks,blockUntilImageRelease,closeOnImageRelease,runnableWhenDone);
}

protected String doIt() throws Exception {
  log.info("Selection=" + p_Selection + ", DateInvoiced="+ p_DateInvoiced+ ", AD_Org_ID="+ p_AD_Org_ID+ ", C_BPartner_ID="+ p_C_BPartner_ID+ ", M_InOut_ID="+ p_M_InOut_ID+ ", DocAction="+ p_docAction+ ", Consolidate="+ p_ConsolidateDocument);
  String sql=null;
  if (p_Selection) {
    sql="SELECT M_InOut.* FROM M_InOut, T_Selection " + "WHERE M_InOut.DocStatus='CO' AND M_InOut.IsSOTrx='Y' " + " AND M_InOut.M_InOut_ID = T_Selection.T_Selection_ID "+ " AND T_Selection.AD_PInstance_ID=? "+ "ORDER BY M_InOut.M_InOut_ID";
  }
 else {
    sql="SELECT * FROM M_InOut o " + "WHERE DocStatus IN('CO','CL') AND IsSOTrx='Y'";
    if (p_AD_Org_ID != 0)     sql+=" AND AD_Org_ID=?";
    if (p_C_BPartner_ID != 0)     sql+=" AND C_BPartner_ID=?";
    if (p_M_InOut_ID != 0)     sql+=" AND M_InOut_ID=?";
    sql+=" AND EXISTS (SELECT * FROM M_InOutLine ol " + "WHERE o.M_InOut_ID=ol.M_InOut_ID AND ol.IsInvoiced='N') " + "ORDER BY M_InOut_ID";
  }
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,get_TrxName());
    int index=1;
    if (p_Selection) {
      pstmt.setInt(index,getAD_PInstance_ID());
    }
 else {
      if (p_AD_Org_ID != 0)       pstmt.setInt(index++,p_AD_Org_ID);
      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);
      if (p_M_InOut_ID != 0)       pstmt.setInt(index++,p_M_InOut_ID);
    }
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,sql,e);
  }
  return generate(pstmt);
}

protected int match_bitap(String text,String pattern,int loc){
  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";
  Map<Character,Integer> s=match_alphabet(pattern);
  double score_threshold=Match_Threshold;
  int best_loc=text.indexOf(pattern,loc);
  if (best_loc != -1) {
    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);
    best_loc=text.lastIndexOf(pattern,loc + pattern.length());
    if (best_loc != -1) {
      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);
    }
  }
  int matchmask=1 << (pattern.length() - 1);
  best_loc=-1;
  int bin_min, bin_mid;
  int bin_max=pattern.length() + text.length();
  int[] last_rd=new int[0];
  for (int d=0; d < pattern.length(); d++) {
    bin_min=0;
    bin_mid=bin_max;
    while (bin_min < bin_mid) {
      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {
        bin_min=bin_mid;
      }
 else {
        bin_max=bin_mid;
      }
      bin_mid=(bin_max - bin_min) / 2 + bin_min;
    }
    bin_max=bin_mid;
    int start=Math.max(1,loc - bin_mid + 1);
    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();
    int[] rd=new int[finish + 2];
    rd[finish + 1]=(1 << d) - 1;
    for (int j=finish; j >= start; j--) {
      int charMatch;
      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {
        charMatch=0;
      }
 else {
        charMatch=s.get(text.charAt(j - 1));
      }
      if (d == 0) {
        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;
      }
 else {
        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];
      }
      if ((rd[j] & matchmask) != 0) {
        double score=match_bitapScore(d,j - 1,loc,pattern);
        if (score <= score_threshold) {
          score_threshold=score;
          best_loc=j - 1;
          if (best_loc > loc) {
            start=Math.max(1,2 * loc - best_loc);
          }
 else {
            break;
          }
        }
      }
    }
    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {
      break;
    }
    last_rd=rd;
  }
  return best_loc;
}

public static S2CellId fromFaceIJ(int face,int i,int j){
  long n[]={0,face << (POS_BITS - 33)};
  int bits=(face & SWAP_MASK);
  for (int k=7; k >= 0; --k) {
    bits=getBits(n,i,j,k,bits);
  }
  S2CellId s=new S2CellId((((n[1] << 32) + n[0]) << 1) + 1);
  return s;
}

private static boolean hasResponseBody(int requestMethod,int responseCode){
  return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED;
}

private void updateActions(final INaviProject project){
  m_loadProjectAction.setEnabled(!project.isLoaded());
  if (m_addAddressSpaceAction != null) {
    m_addAddressSpaceAction.setEnabled(project.isLoaded());
  }
  m_searchViewAction.setEnabled(project.isLoaded());
  m_forwardAction.setEnabled(project.isLoaded());
}

void close() throws IOException {
  stream.close();
}

public boolean truncateTooLongNumber(PhoneNumber number){
  if (isValidNumber(number)) {
    return true;
  }
  PhoneNumber numberCopy=new PhoneNumber();
  numberCopy.mergeFrom(number);
  long nationalNumber=number.getNationalNumber();
  do {
    nationalNumber/=10;
    numberCopy.setNationalNumber(nationalNumber);
    if (isPossibleNumberWithReason(numberCopy) == ValidationResult.TOO_SHORT || nationalNumber == 0) {
      return false;
    }
  }
 while (!isValidNumber(numberCopy));
  number.setNationalNumber(nationalNumber);
  return true;
}

public static boolean isWithinTimeComparisonEpsilon(long timeMicros){
  long now=Utils.getSystemNowMicrosUtc();
  return Math.abs(timeMicros - now) < timeComparisonEpsilon;
}

public Optional<Histogram> histogram(){
  return Optional.empty();
}

private JLabel createWeekday(String title){
  JLabel label=new JLabel(title);
  label.setHorizontalAlignment(SwingConstants.CENTER);
  label.setHorizontalTextPosition(SwingConstants.CENTER);
  label.setRequestFocusEnabled(false);
  label.setBackground(AdempierePLAF.getPrimary1());
  label.setForeground(Color.white);
  label.setOpaque(true);
  return label;
}

default Path append(String relPath){
  return append(Path.parse(relPath));
}

public static int indexOf(String value,String substring){
  return value != null && substring != null ? value.indexOf(substring) : -1;
}

public void testSubmitNullCallable(){
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    try {
      @SuppressWarnings("unused") Future<String> future=e.submit((Callable<String>)null);
      shouldThrow();
    }
 catch (    NullPointerException success) {
    }
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}

public int readSI32() throws IOException {
  synchBits();
  int b0=in.read();
  if (b0 < 0) {
    throw new IOException("Unexpected end of input");
  }
  int b1=in.read();
  if (b1 < 0) {
    throw new IOException("Unexpected end of input");
  }
  int b2=in.read();
  if (b2 < 0) {
    throw new IOException("Unexpected end of input");
  }
  byte[] aByte=new byte[1];
  int count=in.read(aByte);
  if (count < 1) {
    throw new IOException("Unexpected end of input");
  }
  bytesRead+=4;
  return (int)((aByte[0] * 256 * 256* 256) + (b2 * 256 * 256) + (b1 * 256)+ b0);
}

public boolean isLocked(){
  return !queue.isEmpty();
}

public void addPreprocessorDirective(String directive){
  if (mPreprocessorDirectives == null)   mPreprocessorDirectives=new ArrayList<String>();
  mPreprocessorDirectives.add(directive);
}

public void format(long inDate,StringBuilder buffer){
  buffer.append(format(inDate));
}

public Profiler clearResults(){
  lapped.clear();
  return this;
}

@Override public GraphQuery has(final String key,final Object value){
  criteria.add(new Has(key,value));
  return this;
}

public void addAttributeValue(Principal principal,Guid guid,String name,String value) throws UMSException {
  modifyAttributeValue(ModificationType.ADD,principal,guid,name,value);
}

public static void copyStream(InputStream inputStream,OutputStream outputStream){
  if (inputStream != null && outputStream != null) {
    try {
      int length=-1;
      byte[] buffer=new byte[Constant.Capacity.BYTES_PER_MB];
      while ((length=inputStream.read(buffer,0,buffer.length)) != -1) {
        outputStream.write(buffer,0,length);
        outputStream.flush();
      }
    }
 catch (    Exception e) {
      throw new FileUtilException(e);
    }
  }
}

private void printTypeMembers(List<? extends Element> members,List<TypeElement> innerClass){
  for (  Element element : members) {
    if (isPublicOrProtected(element)) {
      printMember(element,innerClass);
    }
  }
}

private void initializeBasicVariables(final int startColumn){
  basicVariables=new int[getWidth() - 1];
  basicRows=new int[getHeight()];
  Arrays.fill(basicVariables,-1);
  for (int i=startColumn; i < getWidth() - 1; i++) {
    Integer row=findBasicRow(i);
    if (row != null) {
      basicVariables[i]=row;
      basicRows[row]=i;
    }
  }
}

public void mouseReleased(MouseEvent e){
}

long freeSpaceWindows(String path,long timeout) throws IOException {
  path=FilenameUtils.normalize(path,false);
  if (path.length() > 0 && path.charAt(0) != '"') {
    path="\"" + path + "\"";
  }
  String[] cmdAttribs=new String[]{"cmd.exe","/C","dir /a /-c " + path};
  List<String> lines=performCommand(cmdAttribs,Integer.MAX_VALUE,timeout);
  for (int i=lines.size() - 1; i >= 0; i--) {
    String line=lines.get(i);
    if (line.length() > 0) {
      return parseDir(line,path);
    }
  }
  throw new IOException("Command line 'dir /-c' did not return any info " + "for path '" + path + "'");
}

private void attachHeader(SIPHeader h){
  if (h == null)   throw new IllegalArgumentException("null header!");
  try {
    if (h instanceof SIPHeaderList) {
      SIPHeaderList<?> hl=(SIPHeaderList<?>)h;
      if (hl.isEmpty()) {
        return;
      }
    }
    attachHeader(h,false,false);
  }
 catch (  SIPDuplicateHeaderException ex) {
  }
}

public String phonemise(String text,String pos,StringBuilder g2pMethod){
  String result=userdictLookup(text,pos);
  if (result != null) {
    g2pMethod.append("userdict");
    return result;
  }
  result=lexiconLookup(text,pos);
  if (result != null) {
    g2pMethod.append("lexicon");
    return result;
  }
  String normalised=MaryUtils.normaliseUnicodeLetters(text,getLocale());
  if (!normalised.equals(text)) {
    result=userdictLookup(normalised,pos);
    if (result != null) {
      g2pMethod.append("userdict");
      return result;
    }
    result=lexiconLookup(normalised,pos);
    if (result != null) {
      g2pMethod.append("lexicon");
      return result;
    }
  }
  String phones=lts.predictPronunciation(text);
  result=lts.syllabify(phones);
  if (result != null) {
    g2pMethod.append("rules");
    return result;
  }
  return null;
}

public static void stop(int exit_code){
  System.exit(exit_code);
}

private FieldODEStateAndDerivative<Decimal64> state(double t){
  return new FieldODEStateAndDerivative<>(zero.add(t),new Decimal64[0],new Decimal64[0]);
}

public static int hash(Object object){
  return object == null ? 0 : object.hashCode();
}

public void putAll(Map<? extends K,? extends V> m){
  for (  Map.Entry<? extends K,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());
}

private void assertPivot(String field,Object value,int count,PivotField actual){
  assertEquals("FIELD: " + actual.toString(),field,actual.getField());
  assertEquals("VALUE: " + actual.toString(),value,actual.getValue());
  assertEquals("COUNT: " + actual.toString(),count,actual.getCount());
}

public String toXMLString() throws FSMsgException {
  return toXMLString(true,true);
}

public static final void writeStringArrayXml(String[] val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {
  if (val == null) {
    out.startTag(null,"null");
    out.endTag(null,"null");
    return;
  }
  out.startTag(null,"string-array");
  if (name != null) {
    out.attribute(null,"name",name);
  }
  final int n=val.length;
  out.attribute(null,"num",Integer.toString(n));
  for (int i=0; i < n; i++) {
    if (val[i] == null) {
      out.startTag(null,"null");
      out.endTag(null,"null");
    }
 else {
      out.startTag(null,"item");
      out.attribute(null,"value",val[i]);
      out.endTag(null,"item");
    }
  }
  out.endTag(null,"string-array");
}

public static void walkFileTree(File directory,FileTreeVisitor visitor){
  visitor.preVisitDirectory(directory);
  File[] files=directory.listFiles();
  if (files != null) {
    for (    File file : files) {
      if (file.isDirectory()) {
        walkFileTree(file,visitor);
      }
 else {
        visitor.visitFile(file);
      }
    }
  }
  visitor.postVisitDirectory(directory);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

private Spannable highlightHashtags(Spannable text){
  if (text == null) {
    return null;
  }
  final Matcher matcher=PATTERN_HASHTAGS.matcher(text);
  while (matcher.find()) {
    final int start=matcher.start(1);
    final int end=matcher.end(1);
    text.setSpan(new ForegroundColorSpan(mHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    text.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  return text;
}

protected int readBlock(){
  blockSize=read();
  int n=0;
  if (blockSize > 0) {
    try {
      int count;
      while (n < blockSize) {
        count=blockSize - n;
        rawData.get(block,n,count);
        n+=count;
      }
    }
 catch (    final Exception e) {
      Log.w(TAG,"Error Reading Block",e);
      status=STATUS_FORMAT_ERROR;
    }
  }
  return n;
}

public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {
  if ((inOff + blockSize) > in.length) {
    throw new DataLengthException("input buffer too short");
  }
  if ((outOff + blockSize) > out.length) {
    throw new DataLengthException("output buffer too short");
  }
  cipher.processBlock(ofbV,0,ofbOutV,0);
  for (int i=0; i < blockSize; i++) {
    out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]);
  }
  System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize);
  System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize);
  return blockSize;
}

public String commandTopic(String command){
  if (command == null) {
    command="+";
  }
  return cmdTopic.replace("{COMMAND}",command);
}

private static void checkForNullElement(Object[] arg,String argName){
  if ((arg == null) || (arg.length == 0)) {
    throw new IllegalArgumentException("Argument " + argName + "[] cannot be null or empty.");
  }
  for (int i=0; i < arg.length; i++) {
    if (arg[i] == null) {
      throw new IllegalArgumentException("Argument's element " + argName + "["+ i+ "] cannot be null.");
    }
  }
}

public InputStream executeDownload(String url,String cookie) throws IOException {
  String[][] headerParams=new String[][]{{"Cookie",cookie},{"User-Agent","AndroidDownloadManager/6.0.1 (Linux; U; Android 6.0.1; Nexus 6P Build/MTC19T)"}};
  HttpEntity httpEntity=executeGet(url,null,headerParams);
  return httpEntity.getContent();
}

public final void testSetSeedbyteArray02() throws NoSuchFieldException, SecurityException, IllegalAccessException {
  byte[] seed=new byte[LENGTH];
  byte[] bytes1=new byte[LENGTH];
  byte[] bytes2=new byte[LENGTH];
  boolean b;
  for (int i=0; i < seed.length; i++) {
    seed[i]=(byte)i;
  }
  sr.setSeed(seed);
  sr.setSeed(seed);
  sr2.setSeed(seed);
  sr.nextBytes(bytes1);
  sr2.nextBytes(bytes2);
  b=true;
  for (int j=0; j < bytes1.length; j++) {
    b&=bytes1[j] == bytes2[j];
  }
  assertFalse("unexpected: sequences are equal",b);
}

public Image flipImageVertically(Image image,boolean maintainOpacity){
  int[] rgb=image.getRGB();
  int[] newRGB=new int[rgb.length];
  int width=image.getWidth();
  int height=image.getHeight();
  for (int y=0; y < height; y++) {
    for (int x=0; x < width; x++) {
      newRGB[x + (height - y - 1) * width]=rgb[x + y * width];
    }
  }
  return EncodedImage.createFromRGB(newRGB,width,height,!maintainOpacity);
}

public MorfologikFilterFactory(Map<String,String> args){
  super(args);
  final String DICTIONARY_RESOURCE_ATTRIBUTE="dictionary-resource";
  String dictionaryResource=get(args,DICTIONARY_RESOURCE_ATTRIBUTE);
  if (dictionaryResource != null && !dictionaryResource.isEmpty()) {
    throw new IllegalArgumentException("The " + DICTIONARY_RESOURCE_ATTRIBUTE + " attribute is no "+ "longer supported. Use the '"+ DICTIONARY_ATTRIBUTE+ "' attribute instead (see LUCENE-6833).");
  }
  resourceName=get(args,DICTIONARY_ATTRIBUTE);
  if (!args.isEmpty()) {
    throw new IllegalArgumentException("Unknown parameters: " + args);
  }
}

public static <T>T wrapThrow(Callable<T> callable,Code _finally){
  try {
    return callable.call();
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    wrapThrow(_finally);
  }
}

public static String padLeft(String str,int totalChars){
  if (str == null)   str="null";
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < totalChars - str.length(); i++) {
    sb.append(" ");
  }
  sb.append(str);
  return sb.toString();
}

protected void decodeImageData(){
  int NullCode=-1;
  int npix=iw * ih;
  int available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;
  if ((pixels == null) || (pixels.length < npix)) {
    pixels=new byte[npix];
  }
  if (prefix == null)   prefix=new short[MaxStackSize];
  if (suffix == null)   suffix=new byte[MaxStackSize];
  if (pixelStack == null)   pixelStack=new byte[MaxStackSize + 1];
  data_size=read();
  clear=1 << data_size;
  end_of_information=clear + 1;
  available=clear + 2;
  old_code=NullCode;
  code_size=data_size + 1;
  code_mask=(1 << code_size) - 1;
  for (code=0; code < clear; code++) {
    prefix[code]=0;
    suffix[code]=(byte)code;
  }
  datum=bits=count=first=top=pi=bi=0;
  for (i=0; i < npix; ) {
    if (top == 0) {
      if (bits < code_size) {
        if (count == 0) {
          count=readBlock();
          if (count <= 0)           break;
          bi=0;
        }
        datum+=(((int)block[bi]) & 0xff) << bits;
        bits+=8;
        bi++;
        count--;
        continue;
      }
      code=datum & code_mask;
      datum>>=code_size;
      bits-=code_size;
      if ((code > available) || (code == end_of_information))       break;
      if (code == clear) {
        code_size=data_size + 1;
        code_mask=(1 << code_size) - 1;
        available=clear + 2;
        old_code=NullCode;
        continue;
      }
      if (old_code == NullCode) {
        pixelStack[top++]=suffix[code];
        old_code=code;
        first=code;
        continue;
      }
      in_code=code;
      if (code == available) {
        pixelStack[top++]=(byte)first;
        code=old_code;
      }
      while (code > clear) {
        pixelStack[top++]=suffix[code];
        code=prefix[code];
      }
      first=((int)suffix[code]) & 0xff;
      if (available >= MaxStackSize)       break;
      pixelStack[top++]=(byte)first;
      prefix[available]=(short)old_code;
      suffix[available]=(byte)first;
      available++;
      if (((available & code_mask) == 0) && (available < MaxStackSize)) {
        code_size++;
        code_mask+=available;
      }
      old_code=in_code;
    }
    top--;
    pixels[pi++]=pixelStack[top];
    i++;
  }
  for (i=pi; i < npix; i++) {
    pixels[i]=0;
  }
}

public int hashCode(){
  int myhash=37 + policyIdentifier.hashCode();
  myhash=37 * myhash + policyQualifiers.hashCode();
  return myhash;
}

public UnixTerminal() throws IOException {
  this(System.in,System.out,Charset.defaultCharset());
}

public static void v(String tag,String s,Object... args){
  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,String.format(s,args));
}

@Override public boolean isCellEditable(int rowIndex,int columnIndex){
  ProcessFunctionParameterValue value=valueList.get(rowIndex);
switch (columnIndex) {
case COL_OPTIONAL:
    return value.optional;
case COL_VALUE:
  if (value.optional) {
    return value.included;
  }
 else {
    return true;
  }
case COL_PARAMETER:
case COL_TYPE:
default :
return false;
}
}

private void checkStreams(){
  if ((System.currentTimeMillis() - lastChecked) / 1000 < CHECK_DELAY) {
    return;
  }
  lastChecked=System.currentTimeMillis();
  Set<StreamInfo> remove=new HashSet<>();
  for (  StreamInfo info : data) {
    if (!info.isValid() || !info.getOnline()) {
      remove.add(info);
    }
  }
  for (  StreamInfo info : remove) {
    data.remove(info);
    itemRemoved(info);
  }
  if (remove.isEmpty()) {
    listDataChanged();
  }
}

@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  final int focusableCount=views.size();
  final int descendantFocusability=getDescendantFocusability();
  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {
    for (int i=0; i < getChildCount(); i++) {
      final View child=getChildAt(i);
      if (child.getVisibility() == VISIBLE) {
        ItemInfo ii=infoForChild(child);
        if (ii != null && ii.position == mCurItem) {
          child.addFocusables(views,direction,focusableMode);
        }
      }
    }
  }
  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {
    if (!isFocusable()) {
      return;
    }
    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {
      return;
    }
    if (views != null) {
      views.add(this);
    }
  }
}

public void addPriorityPackage(String pkg){
  if (_priorityPackages == null)   _priorityPackages=new String[0];
  int oldLength=_priorityPackages.length;
  String[] newPkgs=new String[oldLength + 1];
  System.arraycopy(_priorityPackages,0,newPkgs,0,oldLength);
  if (!pkg.endsWith("."))   pkg=pkg + '.';
  newPkgs[oldLength]=pkg;
  _priorityPackages=newPkgs;
}

@Override public void actionPerformed(ActionEvent ev){
  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();
  if (remoteServiceBrowser != null) {
    String url=remoteServiceBrowser.getURL();
    String user=remoteServiceBrowser.getUser();
    String password=remoteServiceBrowser.getPasswd();
    String command="openServer url='" + url + "'";
    if (user.length() > 0)     command+=" user='" + user + "'";
    if (password.length() > 0) {
synchronized (syncObject) {
        OpenRemoteServerCommand.hiddenPassword=password;
      }
      command+=" password='" + HIDDEN_PASSWORD + "'";
    }
    command+=";";
    if (url.length() > 0) {
      execute(command);
    }
  }
}

public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls,Calendar calendar){
  if (SignUtils.hasUnsupportedCriticalExtension(cert))   return "Has unsupported critical extension";
  try {
    cert.checkValidity(calendar.getTime());
  }
 catch (  Exception e) {
    return e.getMessage();
  }
  if (crls != null) {
    for (    CRL crl : crls) {
      if (crl.isRevoked(cert))       return "Certificate revoked";
    }
  }
  return null;
}

public static void expand(){
  String[] st=new String[L];
  int i;
  for (i=0; i < R; i++)   st[i]="" + (char)i;
  st[i++]="";
  int codeword=BinaryStdIn.readInt(W);
  if (codeword == R)   return;
  String val=st[codeword];
  while (true) {
    BinaryStdOut.write(val);
    codeword=BinaryStdIn.readInt(W);
    if (codeword == R)     break;
    String s=st[codeword];
    if (i == codeword)     s=val + val.charAt(0);
    if (i < L)     st[i++]=val + s.charAt(0);
    val=s;
  }
  BinaryStdOut.close();
}

AudioCapabilities(int[] supportedEncodings,int maxChannelCount){
  if (supportedEncodings != null) {
    this.supportedEncodings=Arrays.copyOf(supportedEncodings,supportedEncodings.length);
    Arrays.sort(this.supportedEncodings);
  }
 else {
    this.supportedEncodings=new int[0];
  }
  this.maxChannelCount=maxChannelCount;
}

@Override public boolean isRotateEdgeLabels(){
  return graphCreator.isRotatingEdgeLabels();
}

public static ResponseCode createExtension(String name){
  StringBuffer buffer=new StringBuffer(name.length() + 2);
  if (!name.startsWith("X")) {
    buffer.append('X');
  }
  buffer.append(name);
  return new ResponseCode(buffer.toString());
}

@Override public double[] makeInverseCumulativeTestValues(){
  double[] points=makeCumulativeTestPoints();
  double[] points2=new double[points.length - 2];
  System.arraycopy(points,1,points2,0,points2.length);
  return points2;
}

public java.lang.StringBuilder append(boolean b){
  if (b) {
    return append("true");
  }
  return append("false");
}

public void deleteServers(Set servers) throws AMConsoleException {
  if (servers.contains(SystemProperties.getServerInstanceName())) {
    throw new AMConsoleException(getLocalizedString("exception.cannot.delete.this.server.instance"));
  }
  String serverName=null;
  try {
    if ((servers != null) && !servers.isEmpty()) {
      SSOToken token=getUserSSOToken();
      for (Iterator i=servers.iterator(); i.hasNext(); ) {
        serverName=(String)i.next();
        String[] param={serverName};
        logEvent("ATTEMPT_DELETE_SERVER",param);
        ServerConfiguration.deleteServerInstance(token,serverName);
        logEvent("SUCCEED_DELETE_SERVER",param);
      }
    }
  }
 catch (  SMSException e) {
    String[] params={serverName,e.getMessage()};
    logEvent("SMS_EXCEPTION_DELETE_SERVER",params);
    throw new AMConsoleException(getErrorString(e));
  }
catch (  SSOException e) {
    String[] params={serverName,e.getMessage()};
    logEvent("SSO_EXCEPTION_DELETE_SERVER",params);
    throw new AMConsoleException(getErrorString(e));
  }
}

protected void arraycopy(byte[] buf,int pos,int length){
  mMessage.write(buf,pos,length);
  mPosition=mPosition + length;
}

static void sort(float[] a,int left,int right,float[] work,int workBase,int workLen){
  while (left <= right && Float.isNaN(a[right])) {
    --right;
  }
  for (int k=right; --k >= left; ) {
    float ak=a[k];
    if (ak != ak) {
      a[k]=a[right];
      a[right]=ak;
      --right;
    }
  }
  doSort(a,left,right,work,workBase,workLen);
  int hi=right;
  while (left < hi) {
    int middle=(left + hi) >>> 1;
    float middleValue=a[middle];
    if (middleValue < 0.0f) {
      left=middle + 1;
    }
 else {
      hi=middle;
    }
  }
  while (left <= right && Float.floatToRawIntBits(a[left]) < 0) {
    ++left;
  }
  for (int k=left, p=left - 1; ++k <= right; ) {
    float ak=a[k];
    if (ak != 0.0f) {
      break;
    }
    if (Float.floatToRawIntBits(ak) < 0) {
      a[k]=0.0f;
      a[++p]=-0.0f;
    }
  }
}

public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {
  String formattedMsg=e.getMessage();
  SAXSourceLocator locator=getLocator();
  ErrorListener handler=m_stylesheetProcessor.getErrorListener();
  try {
    handler.fatalError(new TransformerException(formattedMsg,locator));
  }
 catch (  TransformerException te) {
    throw new org.xml.sax.SAXException(te);
  }
}

public boolean add(terminal sym) throws internal_error {
  boolean result;
  not_null(sym);
  result=_elements.get(sym.index());
  if (!result)   _elements.set(sym.index());
  return result;
}

private void createRecursivly(String path) throws KeeperException, InterruptedException {
  try {
    if (zk.exists(path,true) == null && path.length() > 0) {
      String temp=path.substring(0,path.lastIndexOf(File.separator));
      createRecursivly(temp);
      zk.create(path,null,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
    }
 else {
      return;
    }
  }
 catch (  KeeperException e) {
    throw e;
  }
catch (  InterruptedException e) {
    throw e;
  }
}

public void stopRecording(){
  mHandler.sendMessage(mHandler.obtainMessage(MSG_STOP_RECORDING));
  mHandler.sendMessage(mHandler.obtainMessage(MSG_QUIT));
}

private void writeTag(String name,Tag tag) throws IOException {
  TagType type=tag.getType();
  byte[] nameBytes=name.getBytes(StandardCharsets.UTF_8);
  if (type == TagType.END) {
    throw new IOException("Named TAG_End not permitted.");
  }
  os.writeByte(type.getId());
  os.writeShort(nameBytes.length);
  os.write(nameBytes);
  writeTagPayload(tag);
}

public int hashCode(){
  if (myhash == -1) {
    if (timestamp == null) {
      myhash=signerCertPath.hashCode();
    }
 else {
      myhash=signerCertPath.hashCode() + timestamp.hashCode();
    }
  }
  return myhash;
}

public TypeVariableBV typeVariable(){
  int id=typeVariableList.size();
  typeVariableList.add(null);
  TypeVariableBV result=new TypeVariableBV(id,this);
  typeVariableList.set(id,result);
  return result;
}

public int process(Callback[] callbacks,int state) throws AuthLoginException {
  initAuthConfig();
  X509Certificate[] allCerts=null;
  try {
    HttpServletRequest servletRequest=getHttpServletRequest();
    if (servletRequest != null) {
      allCerts=(X509Certificate[])servletRequest.getAttribute("javax.servlet.request.X509Certificate");
      if (allCerts == null || allCerts.length == 0) {
        debug.message("Certificate: checking for cert passed in the URL.");
        if (!portal_gw_cert_auth_enabled) {
          debug.error("Certificate: cert passed " + "in URL not enabled for this client");
          throw new AuthLoginException(amAuthCert,"noURLCertAuth",null);
        }
        thecert=getPortalStyleCert(servletRequest);
        allCerts=new X509Certificate[]{thecert};
      }
 else {
        if (portal_gw_cert_auth_enabled && portal_gw_cert_preferred) {
          thecert=getPortalStyleCert(servletRequest);
          allCerts=new X509Certificate[]{thecert};
        }
 else {
          if (debug.messageEnabled()) {
            debug.message("Certificate: got all certs from " + "HttpServletRequest = {}",allCerts.length);
          }
          thecert=allCerts[0];
        }
      }
    }
 else {
      thecert=sendCallback();
    }
    if (thecert == null) {
      debug.message("Certificate: no cert passed in.");
      throw new AuthLoginException(amAuthCert,"noCert",null);
    }
    getTokenFromCert(thecert);
    storeUsernamePasswd(userTokenId,null);
    if (debug.messageEnabled()) {
      debug.message("in Certificate. userTokenId=" + userTokenId + " from getTokenFromCert");
    }
  }
 catch (  AuthLoginException e) {
    setFailureID(userTokenId);
    debug.error("Certificate:  exiting validate with exception",e);
    throw new AuthLoginException(amAuthCert,"noCert",null);
  }
  if (debug.messageEnabled()) {
    debug.message("Got client cert =\n" + thecert.toString());
  }
  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("false") && amAuthCert_chkCRL.equalsIgnoreCase("false") && !ocspEnabled) {
    return ISAuthConstants.LOGIN_SUCCEED;
  }
  if (ldapParam == null) {
    setLdapStoreParam();
  }
  if (amAuthCert_chkCertInLDAP.equalsIgnoreCase("true")) {
    X509Certificate ldapcert=AMCertStore.getRegisteredCertificate(ldapParam,thecert,amAuthCert_chkAttrCertInLDAP);
    if (ldapcert == null) {
      debug.error("X509Certificate: getRegCertificate is null");
      setFailureID(userTokenId);
      throw new AuthLoginException(amAuthCert,"CertNoReg",null);
    }
  }
  int ret=doJCERevocationValidation(allCerts);
  if (ret != ISAuthConstants.LOGIN_SUCCEED) {
    debug.error("X509Certificate:CRL / OCSP verify failed.");
    setFailureID(userTokenId);
    throw new AuthLoginException(amAuthCert,"CertVerifyFailed",null);
  }
  return ISAuthConstants.LOGIN_SUCCEED;
}

public static void downto(Number self,Number to,@ClosureParams(FirstParam.class) Closure closure){
  int self1=self.intValue();
  int to1=to.intValue();
  if (self1 >= to1) {
    for (int i=self1; i >= to1; i--) {
      closure.call(i);
    }
  }
 else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");
}

public void add(SelectClauseElementRaw element){
  selectClauseElements.add(element);
}

public synchronized void removePvChangeListener(PvChangeListener l){
  log.debug("-PvListener:" + String.valueOf(this) + "->"+ String.valueOf(l));
  PvChangeListeners.remove(l);
}

public static boolean isNormal(GeoTimeSerie gts,int buckets,double pcterror,boolean bessel){
  if (0 == gts.values) {
    return true;
  }
  if (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type) {
    return false;
  }
  double[] musigma=musigma(gts,bessel);
  double mu=musigma[0];
  double sigma=musigma[1];
  if (0.0D == sigma) {
    return false;
  }
  double[] bounds=SAXUtils.getBounds(buckets);
  int[] counts=new int[bounds.length + 1];
  for (int i=0; i < gts.values; i++) {
    double v=((double)GTSHelper.valueAtIndex(gts,i) - mu) / sigma;
    int insertion=Arrays.binarySearch(bounds,v);
    if (insertion >= 0) {
      counts[insertion]++;
    }
 else {
      counts[-(1 + insertion)]++;
    }
  }
  double mean=gts.values / counts.length;
  for (int i=0; i < counts.length; i++) {
    if (Math.abs(1.0D - (counts[i] / mean)) > pcterror) {
      return false;
    }
  }
  return true;
}

public void loadFromProperties(Properties properties){
  projected=StringUtil.getBooleanValue(properties,"ProjectionInfo.Projected",false,true);
  tiePoint=StringUtil.getDoubleArray(properties,"ProjectionInfo.TiePoint",null,true);
  scale=StringUtil.getDoubleArray(properties,"ProjectionInfo.Scale",null,true);
  globe=StringUtil.getStringValue(properties,"ProjectionInfo.Globe",null,true);
  rasterWidth=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterWidth",true,0,true);
  rasterLength=StringUtil.getIntegerValue(properties,"ProjectionInfo.RasterLength",true,0,true);
  datumCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false);
  ellipsoidCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.DatumCode",true,0,false);
  semiMajorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMajorAxis",true,Double.NaN,false);
  semiMinorAxis=StringUtil.getDoubleValue(properties,"ProjectionInfo.SemiMinorAxis",true,Double.NaN,false);
  inverseFlattening=StringUtil.getDoubleValue(properties,"ProjectionInfo.InverseFlattening",false,Double.NaN,false);
  gcsPrimeMeridianLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.GCSPrimeMeridianLon",false,Double.NaN,false);
  projCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCode",true,0,false);
  pcsCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.ProjectionCoordinateSystemCode",true,0,false);
  coordTransformCode=StringUtil.getIntegerValue(properties,"ProjectionInfo.CoordTransformCode",true,0,false);
  stdParallel1=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false);
  poleLat=(int)(Math.signum(stdParallel1) * 90);
  stdParallel2=StringUtil.getDoubleValue(properties,"ProjectionInfo.StdParallel1",false,Double.NaN,false);
  naturalOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLon",false,Double.NaN,false);
  naturalOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.NaturalOriginLat",false,Double.NaN,false);
  falseOriginLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLon",false,Double.NaN,false);
  falseOriginLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseOriginLat",false,Double.NaN,false);
  falseEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseEasting",false,Double.NaN,false);
  falseNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.FalseNorthing",false,Double.NaN,false);
  centerEasting=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterEasting",false,Double.NaN,false);
  centerNorthing=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterNorthing",false,Double.NaN,false);
  centerLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLon",false,Double.NaN,false);
  centerLat=StringUtil.getDoubleValue(properties,"ProjectionInfo.CenterLat",false,Double.NaN,false);
  scaleAtNaturalOrigin=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtNaturalOrigin",false,Double.NaN,false);
  scaleAtCenter=StringUtil.getDoubleValue(properties,"ProjectionInfo.ScaleAtCenter",false,Double.NaN,false);
  azimuth=StringUtil.getDoubleValue(properties,"ProjectionInfo.Azimuth",false,Double.NaN,false);
  straightVertPoleLon=StringUtil.getDoubleValue(properties,"ProjectionInfo.StraightVertPoleLon",false,Double.NaN,false);
  gcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.GCSCitation",null,false);
  pcsCitation=StringUtil.getStringValue(properties,"ProjectionInfo.PCSCitation",null,false);
  projLinearUnits=StringUtil.getStringValue(properties,"ProjectionInfo.ProjLinearUnits","meter",false);
  if (coordTransformCode == GeoKey.Code_Undefined) {
    String citation=(pcsCitation == null ? "" : pcsCitation.toLowerCase());
    if (citation.contains("mercator") && (citation.contains("web") || citation.contains("pseudo") || citation.contains("global"))) {
      coordTransformCode=GeoKey.Code_CT_Mercator;
      if (Double.isNaN(naturalOriginLon))       naturalOriginLon=0;
      if (Double.isNaN(falseEasting))       falseEasting=0;
      if (Double.isNaN(falseNorthing))       falseNorthing=0;
      if (citation.contains("auxiliary") && citation.contains("sphere")) {
        if (!Double.isNaN(semiMajorAxis))         semiMinorAxis=semiMajorAxis;
 else {
          semiMajorAxis=SEMI_MAJOR_AXIS[0];
          semiMinorAxis=SEMI_MINOR_AXIS[0];
        }
      }
    }
  }
}

public static double gamma(double x){
  double P[]={1.60119522476751861407E-4,1.19135147006586384913E-3,1.04213797561761569935E-2,4.76367800457137231464E-2,2.07448227648435975150E-1,4.94214826801497100753E-1,9.99999999999999996796E-1};
  double Q[]={-2.31581873324120129819E-5,5.39605580493303397842E-4,-4.45641913851797240494E-3,1.18139785222060435552E-2,3.58236398605498653373E-2,-2.34591795718243348568E-1,7.14304917030273074085E-2,1.00000000000000000320E0};
  double p, z;
  double q=Math.abs(x);
  if (q > 33.0) {
    if (x < 0.0) {
      p=Math.floor(q);
      if (p == q) {
        throw new ArithmeticException("gamma: overflow");
      }
      z=q - p;
      if (z > 0.5) {
        p+=1.0;
        z=q - p;
      }
      z=q * Math.sin(Math.PI * z);
      if (z == 0.0) {
        throw new ArithmeticException("gamma: overflow");
      }
      z=Math.abs(z);
      z=Math.PI / (z * stirlingFormula(q));
      return -z;
    }
 else {
      return stirlingFormula(x);
    }
  }
  z=1.0;
  while (x >= 3.0) {
    x-=1.0;
    z*=x;
  }
  while (x < 0.0) {
    if (x == 0.0) {
      throw new ArithmeticException("gamma: singular");
    }
 else     if (x > -1.E-9) {
      return (z / ((1.0 + 0.5772156649015329 * x) * x));
    }
    z/=x;
    x+=1.0;
  }
  while (x < 2.0) {
    if (x == 0.0) {
      throw new ArithmeticException("gamma: singular");
    }
 else     if (x < 1.e-9) {
      return (z / ((1.0 + 0.5772156649015329 * x) * x));
    }
    z/=x;
    x+=1.0;
  }
  if ((x == 2.0) || (x == 3.0)) {
    return z;
  }
  x-=2.0;
  p=polevl(x,P,6);
  q=polevl(x,Q,7);
  return z * p / q;
}

public ShowProgress(){
  start=last=System.currentTimeMillis();
}

public static RepositoryExpression parseRepositoryExpression(String toParse) throws ParseError {
  StreamTokenizer t=Parser.tokenize(toParse);
  Term creator=Parser.parseTerm(t);
  List<Operation> operations=Parser.parseOperationList(t);
  RepositoryExpression ex=new RepositoryExpression(creator);
  if (!operations.isEmpty()) {
    throw new ParseError("Expression must represent a simple repository, e.g. 'internal(revision=3)'.");
  }
  return ex;
}

@Override public synchronized void close() throws IOException {
  buffer=null;
  notifyAll();
}

public void addSection(SourceSection section){
  sections.add(section);
}

public static GenomeRelationships load(BufferedReader reader) throws IOException {
  final GenomeRelationships ped=new GenomeRelationships();
  String line;
  while ((line=reader.readLine()) != null) {
    line=line.trim();
    if (line.startsWith("#") || line.matches("^\\s*$")) {
      continue;
    }
    if (line.matches("^genome\\s+[-a-zA-Z0-9_]+(\\s+[-a-zA-Z0-9_]+?=[^\\s]*)*$")) {
      parseGenomeLine(ped,line);
      continue;
    }
    if (line.matches("^[a-z]+-[a-z]+\\s+[-a-zA-Z0-9_]+\\s+[-a-zA-Z0-9_]+(\\s+[-a-zA-Z0-9_]+?=[^\\s]*)*$")) {
      parseRelationshipLine(ped,line);
      continue;
    }
    throw new NoTalkbackSlimException("unrecognized line in relationships: '" + line + "'");
  }
  return ped;
}

private int[] versionParts(String version){
  String[] parts=version.split("\\.");
  int[] p=new int[3];
  for (int i=0; i < 3; i++) {
    int pi;
    if (i < parts.length) {
      p[i]=Integer.parseInt(parts[i]);
    }
 else {
      p[i]=-1;
    }
  }
  return p;
}

private FgsRunner.Type computeType(){
  Object model=getDataModel();
  if (model == null && getSourceGraph() != null) {
    model=getSourceGraph();
  }
  if (model == null) {
    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");
  }
  if (model instanceof Graph) {
    type=FgsRunner.Type.GRAPH;
  }
 else   if (model instanceof DataSet) {
    DataSet dataSet=(DataSet)model;
    if (dataSet.isContinuous()) {
      type=FgsRunner.Type.CONTINUOUS;
    }
 else     if (dataSet.isDiscrete()) {
      type=FgsRunner.Type.DISCRETE;
    }
 else {
      throw new IllegalStateException("Data set must either be continuous or discrete.");
    }
  }
 else   if (model instanceof ICovarianceMatrix) {
    type=FgsRunner.Type.CONTINUOUS;
  }
 else   if (model instanceof DataModelList) {
    DataModelList list=(DataModelList)model;
    if (allContinuous(list)) {
      type=FgsRunner.Type.CONTINUOUS;
    }
 else     if (allDiscrete(list)) {
      type=FgsRunner.Type.DISCRETE;
    }
 else {
      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");
    }
  }
  return type;
}

public static boolean approxEquals(final double a,final double b,final double tolerance){
  if (Double.isNaN(a) || Double.isNaN(b)) {
    return false;
  }
  if (a == b) {
    return true;
  }
  if (Double.isInfinite(a) || Double.isInfinite(b)) {
    return false;
  }
  if (a >= (b - tolerance) && a <= (b + tolerance)) {
    return true;
  }
  return false;
}

public static Map<String,Object> loadJsonModel(File jsFile){
  try {
    Map<String,Object> model=JavaScriptResolver.readJsonModel(jsFile);
    if (model == null) {
      throw new CompilerErrorException("Can't find metamodel definition in " + jsFile.getAbsolutePath());
    }
    if (!model.containsKey("$mod-bin")) {
      throw new CeylonRunJsException("The JavaScript module " + jsFile + " is not compatible with the current version of ceylon-js");
    }
    return model;
  }
 catch (  IOException ex) {
    throw new CompilerErrorException("Error loading model from " + jsFile);
  }
}

static String[] splitLine(final String line){
  final int ix0=line.indexOf('#');
  final int ix=ix0 == -1 ? line.length() : ix0;
  final String lessComment=line.substring(0,ix);
  if (lessComment.matches("^\\s*$")) {
    return null;
  }
  return lessComment.split("\\s+");
}

private List<Volume> createVolumeData(String name,int numVolumes){
  List<Volume> volumes=new ArrayList<Volume>();
  URI cgUri=createBlockConsistencyGroup(name + "-cg");
  for (int i=1; i <= numVolumes; i++) {
    Volume volume=new Volume();
    URI volumeURI=URIUtil.createId(Volume.class);
    testVolumeURIs.add(volumeURI);
    volume.setId(volumeURI);
    volume.setLabel(name + i);
    volume.setConsistencyGroup(cgUri);
    _dbClient.createObject(volume);
  }
  return volumes;
}

private static <T>T hashMapToObject(LinkedHashMap map,Class<T> type){
  try {
    return stringToObject(mapper.writeValueAsString(map),type);
  }
 catch (  IOException e) {
    log.warn("Could not create a object of the class " + type.getName() + " out of the map "+ map.toString()+ " :"+ e.getMessage());
    return null;
  }
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 0:
    return SUCCESS;
default :
  return null;
}
}

private void deleteSMS(String cmd,String search){
  int nbDeleted=-2;
  if (cmd.equals("all")) {
    nbDeleted=mSmsManager.deleteAllSms();
  }
 else   if (cmd.equals("sent")) {
    nbDeleted=mSmsManager.deleteSentSms();
  }
 else   if (cmd.startsWith("last")) {
    Integer number=Tools.parseInt(search);
    if (number == null) {
      number=1;
    }
    if (cmd.equals("last")) {
      nbDeleted=mSmsManager.deleteLastSms(number);
    }
 else     if (cmd.equals("lastin")) {
      nbDeleted=mSmsManager.deleteLastInSms(number);
    }
 else     if (cmd.equals("lastout")) {
      nbDeleted=mSmsManager.deleteLastOutSms(number);
    }
 else {
      send(R.string.chat_del_sms_error);
    }
  }
 else   if (cmd.equals("contact") && search != null) {
    ArrayList<Contact> contacts=ContactsManager.getMatchingContacts(sContext,search);
    if (contacts.size() > 1) {
      StringBuilder sb=new StringBuilder(getString(R.string.chat_specify_details));
      sb.append(Tools.LineSep);
      for (      Contact contact : contacts) {
        sb.append(contact.name);
        sb.append(Tools.LineSep);
      }
      send(sb.toString());
    }
 else     if (contacts.size() == 1) {
      Contact contact=contacts.get(0);
      send(R.string.chat_del_sms_from,contact.name);
      nbDeleted=mSmsManager.deleteSmsByContact(contact.rawIds);
    }
 else {
      send(R.string.chat_no_match_for,search);
    }
  }
 else   if (cmd.equals("number") && search != null) {
    send(R.string.chat_del_sms_from,search);
    nbDeleted=mSmsManager.deleteSmsByNumber(search);
    if (nbDeleted <= 0) {
      send(R.string.chat_no_match_for,search);
    }
  }
 else {
    send(R.string.chat_del_sms_syntax);
  }
  if (nbDeleted >= 0) {
    send(R.string.chat_del_sms_nb,nbDeleted);
  }
 else   if (nbDeleted == -1) {
    send(R.string.chat_del_sms_error);
  }
}

private static BlocksRemoveInfo isStartBlock(BlockNode remBlock,BlockNode startBlock){
  List<InsnNode> remInsns=remBlock.getInstructions();
  List<InsnNode> startInsns=startBlock.getInstructions();
  if (remInsns.size() < startInsns.size()) {
    return null;
  }
  int startPos=remInsns.size() - startInsns.size();
  int endPos=0;
  if (!checkInsns(remInsns,startInsns,startPos,null)) {
    if (checkInsns(remInsns,startInsns,0,null)) {
      startPos=0;
      endPos=startInsns.size();
    }
 else {
      boolean found=false;
      for (int i=1; i < startPos; i++) {
        if (checkInsns(remInsns,startInsns,i,null)) {
          startPos=i;
          endPos=startInsns.size() + i;
          found=true;
          break;
        }
      }
      if (!found) {
        return null;
      }
    }
  }
  BlocksPair startPair=new BlocksPair(remBlock,startBlock);
  BlocksRemoveInfo removeInfo=new BlocksRemoveInfo(startPair);
  removeInfo.setStartSplitIndex(startPos);
  removeInfo.setEndSplitIndex(endPos);
  if (endPos != 0) {
    removeInfo.setEnd(startPair);
  }
  if (!checkInsns(remInsns,startInsns,startPos,removeInfo)) {
    return null;
  }
  return removeInfo;
}

public boolean checkError(){
  return pw.checkError();
}

public List<PdfDocument> splitBySize(long size){
  List<PageRange> splitRanges=new ArrayList<>();
  int currentPage=1;
  int numOfPages=pdfDocument.getNumberOfPages();
  while (currentPage <= numOfPages) {
    PageRange nextRange=getNextRange(currentPage,numOfPages,size);
    splitRanges.add(nextRange);
    List<Integer> allPages=nextRange.getAllPages();
    currentPage=(int)allPages.get(allPages.size() - 1) + 1;
  }
  return extractPageRanges(splitRanges);
}

private boolean validateAuthSchemes(Set authSchemeSet) throws PolicyException {
  if (authSchemeSet.isEmpty()) {
    String args[]={AUTH_SCHEME};
    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null);
  }
  Iterator authSchemeSetIter=authSchemeSet.iterator();
  authSchemes.clear();
  while (authSchemeSetIter.hasNext()) {
    try {
      String authScheme=(String)authSchemeSetIter.next();
      authSchemes.add(authScheme);
    }
 catch (    ClassCastException e) {
      String args[]={AUTH_SCHEME};
      throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null);
    }
  }
  return true;
}

public static UUID fromUUIDAsURNStringToUUID(String UUIDasURN){
  if (!UUIDasURN.startsWith(UUIDHelper.UUID_as_a_URN_PREFIX)) {
    IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();
    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.UUID_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,String.format("Input UUID %s " + "does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX));
    throw new IMFException(String.format("Input UUID %s does not start with %s",UUIDasURN,UUIDHelper.UUID_as_a_URN_PREFIX),imfErrorLogger);
  }
  return UUID.fromString(UUIDasURN.split(UUIDHelper.UUID_as_a_URN_PREFIX)[1]);
}

public String readLine(){
  String line;
  try {
    line=scanner.nextLine();
  }
 catch (  NoSuchElementException e) {
    line=null;
  }
  return line;
}

public static byte[] decode(final String s){
  return Base64.decode(s,Base64.NO_OPTIONS);
}

public static GradientPaint makeRedPaint(final double width,final double height){
  return new GradientPaint(0f,0f,new Color(200,50,50),(float)width / 2,(float)height / 2,new Color(255,100,100),true);
}

public static List<String> matchNumbers(String text){
  String pattern="\\d+[0-9]+";
  Pattern pat=Pattern.compile(pattern);
  Matcher m=pat.matcher(text);
  List<String> matches=new ArrayList<String>();
  while (m.find()) {
    matches.add(m.group());
  }
  return matches;
}

private boolean deleteStorage(TrackerServer trackerServer,String groupName,String storageIpAddr) throws IOException {
  byte[] header;
  byte[] bGroupName;
  byte[] bs;
  int len;
  Socket trackerSocket;
  trackerSocket=trackerServer.getSocket();
  OutputStream out=trackerSocket.getOutputStream();
  bs=groupName.getBytes(ClientGlobal.g_charset);
  bGroupName=new byte[ProtoCommon.FDFS_GROUP_NAME_MAX_LEN];
  if (bs.length <= ProtoCommon.FDFS_GROUP_NAME_MAX_LEN) {
    len=bs.length;
  }
 else {
    len=ProtoCommon.FDFS_GROUP_NAME_MAX_LEN;
  }
  Arrays.fill(bGroupName,(byte)0);
  System.arraycopy(bs,0,bGroupName,0,len);
  int ipAddrLen;
  byte[] bIpAddr=storageIpAddr.getBytes(ClientGlobal.g_charset);
  if (bIpAddr.length < ProtoCommon.FDFS_IPADDR_SIZE) {
    ipAddrLen=bIpAddr.length;
  }
 else {
    ipAddrLen=ProtoCommon.FDFS_IPADDR_SIZE - 1;
  }
  header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_DELETE_STORAGE,ProtoCommon.FDFS_GROUP_NAME_MAX_LEN + ipAddrLen,(byte)0);
  byte[] wholePkg=new byte[header.length + bGroupName.length + ipAddrLen];
  System.arraycopy(header,0,wholePkg,0,header.length);
  System.arraycopy(bGroupName,0,wholePkg,header.length,bGroupName.length);
  System.arraycopy(bIpAddr,0,wholePkg,header.length + bGroupName.length,ipAddrLen);
  out.write(wholePkg);
  ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,0);
  this.errno=pkgInfo.errno;
  return pkgInfo.errno == 0;
}

@Override public UUID createEntryNode(UUID parentNode){
  UUID uuid=UUID.randomUUID();
  graphServer.addVertex(uuid);
  graphServer.addEdge(uuid,parentNode);
  return uuid;
}

protected void assertDeliveryStates(final Collection<CustomerOrderDelivery> deliveries,final Map<String,String> expectedState){
  for (  CustomerOrderDelivery delivery : deliveries) {
    assertEquals("Delivery " + delivery.getDeliveryGroup() + ", no "+ delivery.getDeliveryNum(),expectedState.get(delivery.getDeliveryGroup()),delivery.getDeliveryStatus());
  }
}

@Nullable private CompileScope createFacetsCompileScope(@NotNull final CompilerManager compilerManager,@NotNull final VirtualFile[] files){
  final Set<Module> modules=New.set();
  boolean facetsFound=false;
  for (  final VirtualFile file : files) {
    final Module module=ModuleUtilCore.findModuleForFile(file,project);
    if (module != null) {
      modules.add(module);
      if (!facetsFound) {
        facetsFound=hasFacets(module);
      }
    }
  }
  if (facetsFound) {
    return compilerManager.createModulesCompileScope(modules.toArray(Module.EMPTY_ARRAY),true,true);
  }
  return null;
}

@Nullable @WorkerThread static File writeBitmapToFile(@NonNull Bitmap bitmap,@NonNull File file){
  FileOutputStream fileStream=null;
  try {
    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();
    bitmap.compress(Bitmap.CompressFormat.PNG,0,byteStream);
    fileStream=new FileOutputStream(file);
    fileStream.write(byteStream.toByteArray());
    return file;
  }
 catch (  IOException e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    if (fileStream != null) {
      try {
        fileStream.close();
      }
 catch (      IOException e) {
        Log.e(TAG,e.getMessage(),e);
      }
    }
  }
  return null;
}

public static Sentence parse(final String text,final ConversationContext ctx){
  String txt;
  if (text == null) {
    txt="";
  }
 else {
    if ((ctx != null) && ctx.isForMatching()) {
      final ExpressionMatcher matcher=new ExpressionMatcher();
      txt=matcher.readMatchingFlags(text);
      if (matcher.isAnyFlagSet()) {
        return matcher.parseSentence(txt,ctx);
      }
    }
 else {
      txt=text;
    }
  }
  txt=txt.trim();
  final SentenceImplementation sentence=new SentenceImplementation(ctx,txt);
  try {
    final ConversationParser parser=new ConversationParser(sentence);
    sentence.parse(parser);
    sentence.classifyWords(parser);
    if ((ctx != null) && ctx.getMergeExpressions()) {
      sentence.evaluateSentenceType();
      sentence.mergeWords();
      if (!ctx.isForMatching()) {
        sentence.standardizeSentenceType();
        sentence.performaAliasing();
      }
    }
    sentence.setError(parser.getErrorString());
  }
 catch (  final Exception e) {
    LOGGER.error("ConversationParser.parse(): caught Exception while parsing '" + text + '\'');
    sentence.setError(e.getMessage());
    e.printStackTrace();
  }
  return sentence;
}

public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem,ElemTemplateElement oldChildElem){
  if (oldChildElem == null || oldChildElem.getParentElem() != this)   return null;
  ElemTemplateElement prev=oldChildElem.getPreviousSiblingElem();
  if (null != prev)   prev.m_nextSibling=newChildElem;
  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;
  newChildElem.m_parentNode=this;
  oldChildElem.m_parentNode=null;
  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;
  oldChildElem.m_nextSibling=null;
  return newChildElem;
}

protected int hash(Object key1,Object key2,Object key3){
  int h=0;
  if (key1 != null) {
    h^=key1.hashCode();
  }
  if (key2 != null) {
    h^=key2.hashCode();
  }
  if (key3 != null) {
    h^=key3.hashCode();
  }
  h+=~(h << 9);
  h^=(h >>> 14);
  h+=(h << 4);
  h^=(h >>> 10);
  return h;
}

public void flush() throws IOException {
  flushBuffer();
  _outputStream.flush();
}

private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  if (namespace.equals("")) {
    xmlWriter.writeAttribute(attName,attValue);
  }
 else {
    registerPrefix(xmlWriter,namespace);
    xmlWriter.writeAttribute(namespace,attName,attValue);
  }
}

private void addEntryToInfoList(Entry entry,List<EntryInfo> entryInfoList){
  if (entryInfoList != null) {
    String typeToAdd=entry.getType();
    if (typeToAdd.equals(DbLogic.Constants.quotation)) {
      typeToAdd=DbLogic.Constants.note;
    }
    entryInfoList.add(new EntryInfo(entry.getId(),entry.getNoteOrTitle(""),entry.getQuotation(""),entry.getIsPublic(),entry.hasFirstChildId(),entry.hasParentId(),typeToAdd));
  }
}

private void updateSliding(float newPositionNormalized){
  currentSlide=newPositionNormalized;
  state=currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING;
  float slideY=Math.abs((currentSlide * maxSlide) - maxSlide);
  slidableView.setY(slideY);
  invalidate();
  notifyListeners(currentSlide);
}

void flush(VcfWriter writer) throws IOException {
  if (mPrevRecord != null) {
    if (!mPrevDense) {
      writeCount(writer,mPrevRecord);
    }
 else {
      mVcfFilterStatistics.increment(Stat.DENSITY_WINDOW_COUNT);
    }
  }
  mPrevRecord=null;
  mPrevDense=false;
}

public VideoStream(String streamStr){
  String[] args=streamStr.split("&");
  Map<String,String> argMap=new HashMap<String,String>();
  for (  String arg : args) {
    String[] argsValues=arg.split("=");
    if (argsValues != null) {
      if (argsValues.length >= 2) {
        argMap.put(argsValues[0],argsValues[1]);
      }
    }
  }
  mUrl=argMap.get("url");
}

public boolean equals(String str){
  if (str == null)   return false;
  if (_length != str.length())   return false;
  for (int i=_length, j=_offset + _length; --i >= 0; ) {
    if (_array[--j] != str.charAt(i))     return false;
  }
  return true;
}

protected void flush(){
  stream.flush();
}

private ServerStarter startServers() throws Exception {
  ServerStarter srvStarter=new ServerStarter();
  Thread t=new Thread(srvStarter);
  t.setDaemon(true);
  t.setName("Server Starter");
  t.start();
  srvStarter.waitForServerStart();
  return srvStarter;
}

public Pagination evaluate(final Class entityClass){
  Paginate paginate=entityClass != null ? (Paginate)entityClass.getAnnotation(Paginate.class) : null;
  int defaultLimit=paginate != null ? paginate.defaultLimit() : DEFAULT_PAGE_LIMIT;
  int maxLimit=paginate != null ? paginate.maxLimit() : MAX_PAGE_LIMIT;
  evaluate(defaultLimit,maxLimit);
  generateTotals=generateTotals && (paginate == null || paginate.countable());
  return this;
}

public RuntimeCollector(Algorithm algorithm,int frequency,ResultFileWriter writer){
  super(algorithm,frequency,FrequencyType.EVALUATIONS);
  this.writer=writer;
  startTime=System.nanoTime();
}

public boolean deregisterServiceProvider(Object provider){
  Object oprovider=map.get(provider.getClass());
  if (provider == oprovider) {
    map.remove(provider.getClass());
    poset.remove(provider);
    if (provider instanceof RegisterableService) {
      RegisterableService rs=(RegisterableService)provider;
      rs.onDeregistration(registry,category);
    }
    return true;
  }
  return false;
}

public NewestFirstComparator(Date now){
  Preconditions.checkNotNull(now);
  mNow=new Date(now.getTime() + MILLIS_IN_DAY);
}

protected void update(Comparable x,Object y){
  int index=indexOf(x);
  if (index < 0) {
    throw new SeriesException("No observation for x = " + x);
  }
 else {
    ComparableObjectItem item=getDataItem(index);
    item.setObject(y);
    fireSeriesChanged();
  }
}

public void writeField(String name,float value) throws java.io.IOException {
  writeField(name,Float.toString(value));
}

public byte[] decodeData(byte[] data,int numErrorCorrectionBytes) throws ReedSolomonException, DataTooLargeException {
  if (data == null || data.length == 0) {
    return null;
  }
  if (data.length > 256) {
    throw new DataTooLargeException("Data exceeds 256 bytes! Too large");
  }
  int[] dataInts=new int[data.length];
  for (int i=0; i < data.length; i++) {
    dataInts[i]=data[i] & 0xFF;
  }
  int totalBytes=data.length - numErrorCorrectionBytes;
  decoder.decode(dataInts,numErrorCorrectionBytes);
  ByteArrayOutputStream bos=new ByteArrayOutputStream();
  for (int i=0; i < totalBytes && i < dataInts.length; i++) {
    bos.write(dataInts[i]);
  }
  return bos.toByteArray();
}

public static ArrayList<String> stringToArrayList(String string){
  return new ArrayList<>(Arrays.asList(string.split(",")));
}

public Shape createScrollButtonApart(int x,int y,int w,int h){
  path.reset();
  path.moveTo(x,y);
  path.lineTo(x,y + h);
  path.lineTo(x + w,y + h);
  addScrollGapPath(x,y,w,h,true);
  path.closePath();
  return path;
}

void removeAllViewsFromAdapter(ViewPager pager){
  mViews.clear();
  pager.removeAllViews();
  mIsViewPagerInIntentionallyInconsistentState=true;
}

public static boolean isValidMobile(@NonNull String mobile){
  if (!TextUtils.isEmpty(mobile) && mobile.length() == 10) {
    if (mobile.startsWith("9") || mobile.startsWith("8") || mobile.startsWith("7")) {
      return true;
    }
  }
  return false;
}

public String convertError(String filename,int line,int column,String message){
  String srcFilename=null;
  int destLine=0;
  int srcLine=0;
  for (int i=0; i < _lines.size(); i++) {
    Line map=_lines.get(i);
    if (filename != null && !filename.endsWith(_dstFilename)) {
    }
 else     if (map._dstLine <= line && line <= map.getLastDestinationLine()) {
      srcFilename=map._srcFilename;
      srcLine=map.getSourceLine(line);
    }
  }
  if (srcFilename != null)   return srcFilename + ":" + srcLine+ ": "+ message;
 else   return filename + ":" + line+ ": "+ message;
}

public static Number sinh(Number a){
  return Math.sinh(a.doubleValue());
}

public void addNotification(@NotNull Notification notification){
  NotificationItem item=new NotificationItem(resources,notification,delegate,panel);
  notificationWidget.add(notification);
}

protected boolean isAttributesModified(){
  if (attributes != null) {
    return (attributes.isEmpty()) ? false : true;
  }
  return false;
}

public IOUtils(){
  super();
}

@Nullable public static IgnoreDescriptor forMethod(Class cls,Method mthd){
  if (mthd.isAnnotationPresent(IgniteIgnore.class)) {
    IgniteIgnore ignore=mthd.getAnnotation(IgniteIgnore.class);
    String reason=ignore.value();
    if (F.isEmpty(reason))     throw new IllegalArgumentException("Reason is not set for ignored test [class=" + cls.getName() + ", method="+ mthd.getName()+ ']');
    return new IgnoreDescriptor(reason,ignore.forceFailure());
  }
 else   return null;
}

protected void runFullImport(String dataConfig,Map<String,String> extraParams) throws Exception {
  HashMap<String,String> params=new HashMap<>();
  params.put("command","full-import");
  params.put("debug","on");
  params.put("dataConfig",dataConfig);
  params.put("clean","true");
  params.put("commit","true");
  params.putAll(extraParams);
  NamedList l=new NamedList();
  for (  Map.Entry<String,String> e : params.entrySet()) {
    l.add(e.getKey(),e.getValue());
  }
  LocalSolrQueryRequest request=new LocalSolrQueryRequest(h.getCore(),l);
  h.query("/dataimport",request);
}

public static ModifiableDBIDs randomSample(DBIDs source,int k,Random random){
  if (k < 0 || k > source.size()) {
    throw new IllegalArgumentException("Illegal value for size of random sample: " + k + " > "+ source.size()+ " or < 0");
  }
  if (random == null) {
    random=new FastNonThreadsafeRandom();
  }
  if (k < source.size() >> 1) {
    ArrayDBIDs aids=DBIDUtil.ensureArray(source);
    DBIDArrayIter iter=aids.iter();
    HashSetModifiableDBIDs sample=DBIDUtil.newHashSet(k);
    while (sample.size() < k) {
      iter.seek(random.nextInt(aids.size()));
      sample.add(iter);
    }
    return sample;
  }
 else {
    ArrayModifiableDBIDs sample=DBIDUtil.newArray(source);
    randomShuffle(sample,random,k);
    for (int i=sample.size() - 1; i >= k; i--) {
      sample.remove(i);
    }
    return sample;
  }
}

protected int drawMessageSize(){
  int sizeDiff=sizeRange[0] == sizeRange[1] ? 0 : rng.nextInt(sizeRange[1] - sizeRange[0]);
  return sizeRange[0] + sizeDiff;
}

public static String[] grabArgs(String signature){
  Matcher matcher=sigRE.matcher(signature);
  boolean b=matcher.matches();
  if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature);
  String args=matcher.group(4);
  if (args.isEmpty())   return new String[0];
  return args.split(",");
}

public void removeSwipeListener(SwipeListener listener){
  if (mListeners == null) {
    return;
  }
  mListeners.remove(listener);
}

public void test_engineCreateSSLEngine_01(){
  SSLContextSpiImpl ssl=new SSLContextSpiImpl();
  try {
    SSLEngine sleng=ssl.engineCreateSSLEngine();
    fail("RuntimeException wasn't thrown");
  }
 catch (  RuntimeException re) {
    String str=re.getMessage();
    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);
  }
catch (  Exception e) {
    fail("Incorrect exception " + e + " was thrown");
  }
}

public void processDispatch(UniformPair<EventBean[]> events){
  if (!forClauseDelivery) {
    dispatchInternal(events);
    return;
  }
  if ((groupDeliveryExpressions == null) || (groupDeliveryExpressions.length == 0)) {
    UniformPair<EventBean[]> todeliver=new UniformPair<EventBean[]>(null,null);
    if (events != null) {
      if (events.getFirst() != null) {
        for (        EventBean theEvent : events.getFirst()) {
          todeliver.setFirst(new EventBean[]{theEvent});
          dispatchInternal(todeliver);
        }
        todeliver.setFirst(null);
      }
      if (events.getSecond() != null) {
        for (        EventBean theEvent : events.getSecond()) {
          todeliver.setSecond(new EventBean[]{theEvent});
          dispatchInternal(todeliver);
        }
        todeliver.setSecond(null);
      }
    }
    return;
  }
  Map<Object,UniformPair<EventBean[]>> groups;
  try {
    groups=getGroupedResults(events);
  }
 catch (  RuntimeException ex) {
    log.error("Unexpected exception evaluating grouped-delivery expressions: " + ex.getMessage() + ", delivering ungrouped",ex);
    dispatchInternal(events);
    return;
  }
  for (  Map.Entry<Object,UniformPair<EventBean[]>> group : groups.entrySet()) {
    dispatchInternal(group.getValue());
  }
}

public V put(K key,V value){
  final int hash;
  int index;
  if (key == null) {
    hash=0;
    index=indexOfNull();
  }
 else {
    hash=key.hashCode();
    index=indexOf(key,hash);
  }
  if (index >= 0) {
    index=(index << 1) + 1;
    final V old=(V)mArray[index];
    mArray[index]=value;
    return old;
  }
  index=~index;
  if (mSize >= mHashes.length) {
    final int n=mSize >= (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (mSize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);
    final int[] ohashes=mHashes;
    final Object[] oarray=mArray;
    allocArrays(n);
    if (mHashes.length > 0) {
      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);
      System.arraycopy(oarray,0,mArray,0,oarray.length);
    }
    freeArrays(ohashes,oarray,mSize);
  }
  if (index < mSize) {
    System.arraycopy(mHashes,index,mHashes,index + 1,mSize - index);
    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);
  }
  mHashes[index]=hash;
  mArray[index << 1]=key;
  mArray[(index << 1) + 1]=value;
  mSize++;
  return null;
}

protected void reset(){
  Arrays.fill(m_isCandidate,true);
}

protected void redefine(int nodetype,String namespace,String localName){
  this.nodetype=nodetype;
  this.namespace=namespace;
  this.localName=localName;
  this.hash=nodetype + namespace.hashCode() + localName.hashCode();
}

public void putLong(long pos,long val){
  unsafe.putLong(pos + addr,val);
}

public void lineTo(float x,float y){
  mPoints.add(PathPoint.lineTo(x,y));
}

public boolean deleteRSetStep(URI rpSystemId,List<URI> volumeIds,String token) throws InternalException {
  List<String> replicationSetNames=new ArrayList<String>();
  try {
    List<RecoverPointVolumeProtectionInfo> volumeProtectionInfoList=new ArrayList<RecoverPointVolumeProtectionInfo>();
    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,rpSystemId);
    RecoverPointClient rp=RPHelper.getRecoverPointClient(rpSystem);
    for (    URI volumeId : volumeIds) {
      Volume volume=_dbClient.queryObject(Volume.class,volumeId);
      RecoverPointVolumeProtectionInfo volumeProtectionInfo=rp.getProtectionInfoForVolume(RPHelper.getRPWWn(volume.getId(),_dbClient));
      Volume sourceVolume=RPHelper.getRPSourceVolume(_dbClient,volume);
      VirtualPool virtualPool=_dbClient.queryObject(VirtualPool.class,sourceVolume.getVirtualPool());
      volumeProtectionInfo.setMetroPoint(VirtualPool.vPoolSpecifiesMetroPoint(virtualPool));
      volumeProtectionInfoList.add(volumeProtectionInfo);
      replicationSetNames.add(volume.getRSetName());
    }
    if (!volumeProtectionInfoList.isEmpty()) {
      rp.deleteReplicationSets(volumeProtectionInfoList);
    }
    WorkflowStepCompleter.stepSucceded(token);
  }
 catch (  Exception e) {
    _log.error(String.format("deleteRSetStep Failed - Replication Sets: %s",replicationSetNames.toString()));
    return stepFailed(token,e,"deleteRSetStep");
  }
  return true;
}

private void moveToNext(){
  checkMainThread();
  scheduled.set(false);
  Bitmap next=pending.poll();
  if (next != null) {
    if (current != null && !finished.offer(current))     throw new RuntimeException("Could not add image to finished queue");
    current=next;
    invalidateSelf();
    ensureScheduled();
    frameAvailableSubject.onNext(null);
    fpsCounter.update();
  }
}

public void addChangingListener(OnWheelChangedListener listener){
  changingListeners.add(listener);
}

public String rma(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){
  Integer M_RMA_ID=(Integer)value;
  if (M_RMA_ID == null || M_RMA_ID.intValue() == 0)   return "";
  if (isCalloutActive())   return "";
  MRMA rma=new MRMA(ctx,M_RMA_ID.intValue(),null);
  MInOut originalReceipt=rma.getShipment();
  if (rma.get_ID() != 0) {
    mTab.setValue("DateOrdered",originalReceipt.getDateOrdered());
    mTab.setValue("POReference",originalReceipt.getPOReference());
    mTab.setValue("AD_Org_ID",new Integer(originalReceipt.getAD_Org_ID()));
    mTab.setValue("AD_OrgTrx_ID",new Integer(originalReceipt.getAD_OrgTrx_ID()));
    mTab.setValue("C_Activity_ID",new Integer(originalReceipt.getC_Activity_ID()));
    mTab.setValue("C_Campaign_ID",new Integer(originalReceipt.getC_Campaign_ID()));
    mTab.setValue("C_Project_ID",new Integer(originalReceipt.getC_Project_ID()));
    mTab.setValue("User1_ID",new Integer(originalReceipt.getUser1_ID()));
    mTab.setValue("User2_ID",new Integer(originalReceipt.getUser2_ID()));
    mTab.setValue("M_Warehouse_ID",new Integer(originalReceipt.getM_Warehouse_ID()));
    mTab.setValue("DeliveryRule",originalReceipt.getDeliveryRule());
    mTab.setValue("DeliveryViaRule",originalReceipt.getDeliveryViaRule());
    mTab.setValue("M_Shipper_ID",new Integer(originalReceipt.getM_Shipper_ID()));
    mTab.setValue("FreightCostRule",originalReceipt.getFreightCostRule());
    mTab.setValue("FreightAmt",originalReceipt.getFreightAmt());
    mTab.setValue("C_BPartner_ID",new Integer(originalReceipt.getC_BPartner_ID()));
    mTab.setValue("C_BPartner_Location_ID",new Integer(originalReceipt.getC_BPartner_Location_ID()));
    if (originalReceipt.getAD_User_ID() > 0)     mTab.setValue("AD_User_ID",new Integer(originalReceipt.getAD_User_ID()));
 else     mTab.setValue("AD_User_ID",null);
  }
  return "";
}

public final long readLong() throws java.io.IOException {
  readFully(scratch,0,8);
  int h=((scratch[0] & 0xff) << 24) | ((scratch[1] & 0xff) << 16) | ((scratch[2] & 0xff) << 8)| ((scratch[3] & 0xff) << 0);
  int l=((scratch[4] & 0xff) << 24) | ((scratch[5] & 0xff) << 16) | ((scratch[6] & 0xff) << 8)| ((scratch[7] & 0xff) << 0);
  return (((long)h) << 32L) | ((long)l) & 0xffffffffL;
}

public void testGetColumnsMetaData() throws Exception {
  DatabaseMetaData dmd=con.getMetaData();
  ResultSet rs=dmd.getColumns(null,null,"Table doesn't exist",null);
  assertNotNull(rs);
  ResultSetMetaData rsmd=rs.getMetaData();
  assertNotNull(rsmd.getCatalogName(1));
  assertNotNull(rsmd.getColumnClassName(1));
  rsmd.getColumnCount();
  assertTrue(0 != rsmd.getColumnDisplaySize(1));
  assertNotNull(rsmd.getColumnLabel(1));
  assertNotNull(rsmd.getColumnName(1));
  rsmd.getColumnType(1);
  assertNotNull(rsmd.getColumnTypeName(1));
  rsmd.getPrecision(1);
  rsmd.getScale(1);
  assertNotNull(rsmd.getSchemaName(1));
  assertNotNull(rsmd.getTableName(1));
  rsmd.isAutoIncrement(1);
  rsmd.isCaseSensitive(1);
  rsmd.isCurrency(1);
  rsmd.isDefinitelyWritable(1);
  rsmd.isNullable(1);
  rsmd.isReadOnly(1);
  rsmd.isSearchable(1);
  rsmd.isSigned(1);
  rsmd.isWritable(1);
  rs.close();
}

private Log discoverLogImplementation(String logCategory) throws LogConfigurationException {
  if (isDiagnosticsEnabled()) {
    logDiagnostic("Discovering a Log implementation...");
  }
  initConfiguration();
  Log result=null;
  String specifiedLogClassName=findUserSpecifiedLogClassName();
  if (specifiedLogClassName != null) {
    if (isDiagnosticsEnabled()) {
      logDiagnostic("Attempting to load user-specified log class '" + specifiedLogClassName + "'...");
    }
    result=createLogFromClass(specifiedLogClassName,logCategory,true);
    if (result == null) {
      StringBuffer messageBuffer=new StringBuffer("User-specified log class '");
      messageBuffer.append(specifiedLogClassName);
      messageBuffer.append("' cannot be found or is not useable.");
      if (specifiedLogClassName != null) {
        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER);
        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER);
        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER);
        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER);
      }
      throw new LogConfigurationException(messageBuffer.toString());
    }
    return result;
  }
  if (isDiagnosticsEnabled()) {
    logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations...");
  }
  for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) {
    result=createLogFromClass(classesToDiscover[i],logCategory,true);
  }
  if (result == null) {
    throw new LogConfigurationException("No suitable Log implementation");
  }
  return result;
}

public NSData(File file) throws IOException {
  bytes=new byte[(int)file.length()];
  RandomAccessFile raf=new RandomAccessFile(file,"r");
  raf.read(bytes);
  raf.close();
}

public ViaHeader createViaHeader(String host,int port,String transport,String branch) throws ParseException, InvalidArgumentException {
  if (host == null || transport == null)   throw new NullPointerException("null arg");
  Via via=new Via();
  if (branch != null)   via.setBranch(branch);
  if (host.indexOf(':') >= 0 && host.indexOf('[') < 0) {
    if (stripAddressScopeZones) {
      int zoneStart=host.indexOf('%');
      if (zoneStart != -1)       host=host.substring(0,zoneStart);
    }
    host='[' + host + ']';
  }
  via.setHost(host);
  via.setPort(port);
  via.setTransport(transport);
  return via;
}

public String toString(){
  return super.toString() + "{recordCount=" + recordMap.size()+ ",firstOffset="+ firstOffset+ ",releaseBuffer="+ releaseBuffer+ ",prefixWrites="+ prefixWrites+ ",useChecksum="+ useChecksum+ ",bytesWritten="+ bytesWritten()+ ",bytesRemaining="+ remaining()+ ",bytesRemoved="+ m_removed+ "}";
}

public void dispose(){
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
  }
  mDisposed=true;
  mContext=null;
  mServiceConn=null;
  mService=null;
  mPurchaseListener=null;
}

public int find(String string){
  if (string == null) {
    return -1;
  }
  for (int i=0; i != m_stringOffsets.length; ++i) {
    int offset=m_stringOffsets[i];
    int length=getShort(m_strings,offset);
    if (length != string.length()) {
      continue;
    }
    int j=0;
    for (; j != length; ++j) {
      offset+=2;
      if (string.charAt(j) != getShort(m_strings,offset)) {
        break;
      }
    }
    if (j == length) {
      return i;
    }
  }
  return -1;
}

private void handleJsonCreateAccount(RequestAndResponse requestAndResponse) throws IOException, ServletException {
  requestAndResponse.setResponseContentTypeJson();
  String userName, password, password2, email;
  boolean mayContact=false;
  String csrft;
  try {
    final JsonNodeHelper json=getJsonNode(requestAndResponse);
    userName=json.getString("username");
    password=json.getString("password");
    password2=json.getString("password2");
    email=json.getString("email");
    mayContact=json.getBoolean("mayContact");
    csrft=json.getString("csrft");
  }
 catch (  final IOException e) {
    returnJson400(requestAndResponse,servletText.errorJson());
    return;
  }
  if (userName != null) {
    userName=userName.toLowerCase();
  }
  if (isTheCsrftWrong(requestAndResponse,csrft)) {
    returnJson400(requestAndResponse,servletText.errorWrongCsrft());
    return;
  }
  if (!allowSelfSignUp) {
    returnJson400(requestAndResponse,servletText.errorSelfSignUpNotAllowed());
    return;
  }
  if (userName == null || userName.isEmpty()) {
    returnJson400(requestAndResponse,servletText.errorUsernameMustNotBeBlank());
    return;
  }
  if (password == null || password.isEmpty()) {
    returnJson400(requestAndResponse,servletText.errorFirstPasswordMustBeSet(true,null));
    return;
  }
  if (password == null || password2.isEmpty()) {
    returnJson400(requestAndResponse,servletText.errorSecondPasswordMustBeSet(true,null));
    return;
  }
  if (!password2.equals(password)) {
    returnJson400(requestAndResponse,servletText.errorPasswordsMustMatch());
    return;
  }
  if (!AccountAttributeValidator.isUserNameValid(userName)) {
    returnJson400(requestAndResponse,servletText.errorUserNameIsNotValid());
    return;
  }
  if (!AccountAttributeValidator.isPasswordValid(password)) {
    returnJson400(requestAndResponse,servletText.errorPasswordIsNotValid());
    return;
  }
  if (email != null && email.isEmpty()) {
    email=null;
  }
  if (email != null && !AccountAttributeValidator.isEmailValid(email)) {
    returnJson400(requestAndResponse,servletText.errorEmailIsNotValid());
    return;
  }
  try {
    User user=dbLogic.getUserByUserName(userName);
    if (user != null) {
      returnJson400(requestAndResponse,servletText.errorUserNameIsAlreadyTaken());
      return;
    }
    user=dbLogic.createUser(userName);
    if (user == null) {
      returnJson400(requestAndResponse,servletText.errorCouldNotCreateAccount());
      return;
    }
    user.setPassword(DigestUtils.sha1Hex(password));
    user.setEmail(email);
    user.setMayContact(mayContact);
    mapSessionToUser(requestAndResponse,user.getId());
    dbLogic.commit();
    returnJson200(requestAndResponse);
  }
 catch (  final PersistenceException e) {
    logger.log(Level.INFO,"Exception",e);
    returnJson500(requestAndResponse,servletText.errorInternalDatabase());
  }
}

private Object[] resolveParameters(Executable executable,Optional<Object> target,Object outerInstance,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){
  Preconditions.notNull(target,"target must not be null");
  Parameter[] parameters=executable.getParameters();
  Object[] values=new Object[parameters.length];
  int start=0;
  if (outerInstance != null) {
    values[0]=outerInstance;
    start=1;
  }
  for (int i=start; i < parameters.length; i++) {
    ParameterContext parameterContext=new DefaultParameterContext(parameters[i],i,target);
    values[i]=resolveParameter(parameterContext,executable,extensionContext,extensionRegistry);
  }
  return values;
}

public static boolean isValidNameChar(char c){
  return isValidNameStartChar(c) || (c >= '0' && c <= '9');
}

public void supportTlsIntolerantServer(SSLSocket socket){
  socket.setEnabledProtocols(new String[]{"SSLv3"});
}

protected static boolean id_start_char(int ch){
  return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch == '_');
}

public int hashCode(){
  int fhash=(family != null) ? family.hashCode() : 0;
  return fhash ^ style ^ size;
}

private CommandHandlerEnum(final Command command1){
  this.command=command1;
}

public static boolean isFloat(String desc){
  return desc.endsWith("F");
}

public void componentResized(ComponentEvent e){
  JScrollBar bar=getVerticalScrollBar();
  int incr=(int)(getSize().getHeight() - (bar.getUnitIncrement(1) * 3));
  getVerticalScrollBar().setBlockIncrement(incr);
}

public Arg(String aName,String desc,int expectedNumberOfArguments,boolean expectDashedArguments){
  name=aName;
  description=desc;
  numExpectedValues=expectedNumberOfArguments;
  c=name.charAt(0);
  dashedArguments=expectDashedArguments;
}

private boolean remove(Object o,Object[] snapshot,int index){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    Object[] current=getArray();
    int len=current.length;
    if (snapshot != current)     findIndex: {
      int prefix=Math.min(index,len);
      for (int i=0; i < prefix; i++) {
        if (current[i] != snapshot[i] && eq(o,current[i])) {
          index=i;
          break findIndex;
        }
      }
      if (index >= len)       return false;
      if (current[index] == o)       break findIndex;
      index=indexOf(o,current,index,len);
      if (index < 0)       return false;
    }
    Object[] newElements=new Object[len - 1];
    System.arraycopy(current,0,newElements,0,index);
    System.arraycopy(current,index + 1,newElements,index,len - index - 1);
    setArray(newElements);
    return true;
  }
  finally {
    lock.unlock();
  }
}

public void removeModel(Model model){
  models.remove(model);
}

public void readMap(int map_Number){
  InputStream map_file;
  try {
    map_file=new FileInputStream("src/Asset/stage0" + map_Number + ".stg");
    try {
      byte[] data=new byte[map_file.available()];
      map_file.read(data);
      map_file.close();
      String load_data=new String(data,"EUC-KR");
      makeMap(load_data);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
}

public static double hoeffdingLn(double trials,double observed,double prob){
  return -2 * Math.pow(trials * prob - observed,2) / trials;
}

private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){
  if (imageSize < viewSize) {
    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
  }
 else   if (trans > 0) {
    m[axis]=-((imageSize - viewSize) * 0.5f);
  }
 else {
    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));
  }
}

public void run(){
  RandomAccessFile reader=null;
  try {
    long last=0;
    long position=0;
    while (run && reader == null) {
      try {
        reader=new RandomAccessFile(file,RAF_MODE);
      }
 catch (      FileNotFoundException e) {
        listener.fileNotFound();
      }
      if (reader == null) {
        try {
          Thread.sleep(delayMillis);
        }
 catch (        InterruptedException e) {
        }
      }
 else {
        position=end ? file.length() : 0;
        last=System.currentTimeMillis();
        reader.seek(position);
      }
    }
    while (run) {
      boolean newer=FileUtils.isFileNewer(file,last);
      long length=file.length();
      if (length < position) {
        listener.fileRotated();
        try {
          RandomAccessFile save=reader;
          reader=new RandomAccessFile(file,RAF_MODE);
          position=0;
          IOUtils.closeQuietly(save);
        }
 catch (        FileNotFoundException e) {
          listener.fileNotFound();
        }
        continue;
      }
 else {
        if (length > position) {
          position=readLines(reader);
          last=System.currentTimeMillis();
        }
 else         if (newer) {
          position=0;
          reader.seek(position);
          position=readLines(reader);
          last=System.currentTimeMillis();
        }
      }
      if (reOpen) {
        IOUtils.closeQuietly(reader);
      }
      try {
        Thread.sleep(delayMillis);
      }
 catch (      InterruptedException e) {
      }
      if (run && reOpen) {
        reader=new RandomAccessFile(file,RAF_MODE);
        reader.seek(position);
      }
    }
  }
 catch (  Exception e) {
    listener.handle(e);
  }
 finally {
    IOUtils.closeQuietly(reader);
  }
}

@Override public void onNestedPreScroll(View target,int dx,int dy,int[] consumed){
  if ((!mPullRefreshEnable && !mPullLoadEnable)) {
    return;
  }
  if (Math.abs(dy) > 200) {
    return;
  }
  if (!isConfirm) {
    if (dy < 0 && !canChildScrollUp()) {
      mCurrentAction=PULL_REFRESH;
      isConfirm=true;
    }
 else     if (dy > 0 && !canChildScrollDown()) {
      mCurrentAction=LOAD_MORE;
      isConfirm=true;
    }
  }
  if (moveSpinner(-dy)) {
    consumed[1]+=dy;
  }
}

public void testLocalInstances_deterministic(){
  MatsimRandom.reset();
  Random local1a=MatsimRandom.getLocalInstance();
  Random local1b=MatsimRandom.getLocalInstance();
  MatsimRandom.reset();
  Random local2a=MatsimRandom.getLocalInstance();
  Random local2b=MatsimRandom.getLocalInstance();
  assertEqualRandomNumberGenerators(local1a,local2a);
  assertEqualRandomNumberGenerators(local1b,local2b);
}

public void add(Match match,AppliedRegion appliedRegion){
  add(match,appliedRegion,false);
}

public void reset(){
  techTree.checkSubTree(techTree.getPathForRow(0),true);
}

@SuppressWarnings("unchecked") private static <T>void assertThrows(final Consumer<Void> consumer,final Class<T> exceptionClass,final Consumer<T> assertExceptionProperties,final String message){
  final String normalizedMessage=null == message ? "" : String.format("[%s]: ",message);
  try {
    consumer.accept(null);
  }
 catch (  final Exception ex) {
    if (exceptionClass.isAssignableFrom(ex.getClass())) {
      assertExceptionProperties.accept((T)ex);
      return;
    }
    Assert.fail(String.format("%sunexpected exception of type %s was thrown: '%s'",normalizedMessage,ex.getClass(),ex.getMessage()));
  }
  Assert.fail(String.format("%sexpected exception of type %s was not thrown",normalizedMessage,exceptionClass));
}

public boolean isEmpty(){
  return nodes.isEmpty() && ways.isEmpty() && relations.isEmpty();
}

public static void assertBool(boolean b){
  if (verbose) {
    log("assertBool(" + b + ")");
  }
  if (!b) {
    throw new RuntimeException();
  }
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public TagKeyValueMapConverter(boolean nullIfEmpty,String idKey){
  Objects.requireNonNull(idKey);
  this.nullIfEmpty=nullIfEmpty;
  this.addId=true;
  this.idKey=idKey;
}

private static void postInit(){
  debugAll=dbgTable.containsKey(debugAllToken);
}

private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {
  RetryPolicy retryPolicy=request.getRetryPolicy();
  int oldTimeout=request.getTimeoutMs();
  try {
    retryPolicy.retry(exception);
  }
 catch (  VolleyError e) {
    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));
    throw e;
  }
  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));
}

public static List<File> sortInBatch(File file,Comparator<String> cmp) throws IOException {
  return sortInBatch(file,cmp,DEFAULTMAXTEMPFILES);
}

public void addDirectorySet(Context context,String path){
  TinyDB tinydb=new TinyDB(context);
  ArrayList<String> file=tinydb.getListString("directories");
  file.add(path);
  tinydb.putListString("directories",file);
}

private FastConcurrentSkipListMap.Node<K,V> hiNode(){
  if (hi == null)   return m.findLast();
 else   if (hiInclusive)   return m.findNear(hi,m.LT | m.EQ);
 else   return m.findNear(hi,m.LT);
}

protected void processEventProperties(Properties eventProps){
  int status;
  Node node;
  Line line;
  String cmd=eventProps.getProperty(COMMAND_FIELD);
  int index=PropUtils.intFromProperties(eventProps,INDEX_FIELD,ERROR_VALUE_INT);
  if (cmd.equals(NODE_OBJECT)) {
    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);
    if (index == ERROR_VALUE_INT) {
      Debug.error("NMGL: error parsing object index for node.");
      return;
    }
    node=nodeList.get(index);
    if (shape == 11) {
      String icon=eventProps.getProperty(ICON_FIELD);
      if (DEBUG)       Debug.output("NetMapReader: jimage  " + icon);
    }
    if (shape == NODE_DELETE) {
      if (node != null) {
        lineList.del(node);
        nodeList.del(node);
      }
    }
 else     if (shape == NODE_MOVE && node != null) {
      setNodePositionFromEventProps(node,eventProps);
      lineList.move(node);
      node.setTime(Double.parseDouble(eventProps.getProperty(TIME_FIELD,"0")));
    }
 else {
      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);
      int menu=PropUtils.intFromProperties(eventProps,MENU_FIELD,0);
      String label=eventProps.getProperty(LABEL_FIELD);
      if (label == null) {
        label=eventProps.getProperty(INDEX_FIELD);
      }
      String ip=eventProps.getProperty(IP_FIELD);
      boolean isLocalhost=false;
      if (ip != null && localhostIP != null) {
        isLocalhost=localhostIP.equals(ip);
        if (DEBUG) {
          Debug.output("NetMapGraphicLoader displaying a node running on the localhost: " + localhostIP);
        }
      }
      if (DEBUG) {
        Debug.output("Creating node (" + label + ")");
      }
      try {
        if (shape != ERROR_VALUE_INT) {
          node=nodeList.add(label,index,shape,menu,status);
          node.setLocalhost(isLocalhost);
        }
      }
 catch (      Exception e) {
        Debug.error("NMGL: error creating node");
      }
      setNodePositionFromEventProps(node,eventProps);
    }
  }
 else   if (cmd.equals(NODE_OBJECT_STATUS)) {
    if (index == ERROR_VALUE_INT) {
      Debug.error("NMGL: error parsing object index for status update.");
      return;
    }
    node=nodeList.get(index);
    if (node != null) {
      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);
      if (status != ERROR_VALUE_INT) {
        node.setStatus(status);
      }
    }
  }
 else   if (cmd.equals(LINK_OBJECT_STATUS)) {
    if (index == ERROR_VALUE_INT) {
      Debug.error("NMGL: error parsing line index for status update.");
      return;
    }
    line=lineList.get(index);
    if (line != null) {
      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);
      if (status != ERROR_VALUE_INT) {
        line.setStatus(status);
      }
    }
  }
 else   if (cmd.equals(LINK_OBJECT)) {
    if (index == ERROR_VALUE_INT) {
      Debug.error("NMGL: error parsing line index for link.");
      return;
    }
    line=lineList.get(index);
    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);
    if (shape == NODE_DELETE) {
      lineList.del(index);
    }
 else {
      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);
      int node1=PropUtils.intFromProperties(eventProps,LINK_NODE1_FIELD,ERROR_VALUE_INT);
      int node2=PropUtils.intFromProperties(eventProps,LINK_NODE2_FIELD,ERROR_VALUE_INT);
      if (node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT) {
        Debug.error("NMGL: error parsing node indexes for link");
        return;
      }
      Node n1=nodeList.get(node1);
      Node n2=nodeList.get(node2);
      if (n1 != null && n2 != null) {
        lineList.add(String.valueOf(index),index,shape,status,n1,n2);
      }
 else {
        if (DEBUG) {
          Debug.output("NetMapGraphicLoader: can't create lobj, nodes are undefined");
        }
      }
    }
  }
 else   if (cmd.equals(REFRESH) || cmd.equals(UPDATE)) {
  }
 else   if (cmd.equals(CLEAR)) {
    if (nodeList != null) {
      nodeList.flush();
    }
    if (lineList != null) {
      lineList.flush();
    }
  }
 else {
    if (DEBUG) {
      Debug.output("NMGL: received unused event: " + eventProps.toString());
    }
  }
  manageGraphics();
}

protected static void addIdRepoAMSDKPlugin(SSOToken token,String orgName) throws SMSException, SSOException {
  ServiceConfigManager scm=new ServiceConfigManager(ServiceManager.REALM_SERVICE,token);
  ServiceConfig sc=scm.getOrganizationConfig(orgName,null);
  Map attributes=new HashMap();
  Set values=new HashSet();
  values.add("com.iplanet.am.sdk.AMSDKRepo");
  attributes.put("sunIdRepoClass",values);
  values=new HashSet();
  values.add(DNMapper.realmNameToAMSDKName(DNMapper.orgNameToDN(orgName)));
  attributes.put("amSDKOrgName",values);
  sc.addSubConfig("amsdk1","amSDK",0,attributes);
}

@Override public synchronized void initialize(){
  if (!mRootDirectory.exists()) {
    if (!mRootDirectory.mkdirs()) {
      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());
    }
    return;
  }
  File[] files=mRootDirectory.listFiles();
  if (files == null) {
    return;
  }
  for (  File file : files) {
    FileInputStream fis=null;
    try {
      fis=new FileInputStream(file);
      CacheHeader entry=CacheHeader.readHeader(fis);
      entry.size=file.length();
      putEntry(entry.key,entry);
    }
 catch (    IOException e) {
      if (file != null) {
        file.delete();
      }
    }
 finally {
      try {
        if (fis != null) {
          fis.close();
        }
      }
 catch (      IOException ignored) {
      }
    }
  }
}

public static String onKeyPress(String key){
  pin=pin.concat(key);
  return pin;
}

public boolean isHierachic(String string){
  int index=string.indexOf(m_Seperator);
  if ((index == (string.length() - 1)) || (index == -1)) {
    return false;
  }
  return true;
}

public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){
  Color base=getColor();
  Color color=base != null ? new Color(base.getRed(),base.getGreen(),base.getBlue(),255) : null;
  if (color == null) {
    g.setColor(c.getSelectionColor());
  }
 else {
    g.setColor(color);
  }
  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {
    Rectangle alloc;
    if (bounds instanceof Rectangle) {
      alloc=(Rectangle)bounds;
    }
 else {
      alloc=bounds.getBounds();
    }
    g.fillRect(alloc.x,alloc.y,c.getWidth() - alloc.x,alloc.height);
  }
 else {
    try {
      Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);
      Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();
      g.fillRect(0,r.y,c.getWidth(),r.height);
      return r;
    }
 catch (    BadLocationException e) {
    }
  }
  return null;
}

synchronized void receive(char oneChar) throws IOException {
  if (buffer == null) {
    throw new IOException("Pipe is closed");
  }
  if (lastReader != null && !lastReader.isAlive()) {
    throw new IOException("Pipe broken");
  }
  lastWriter=Thread.currentThread();
  try {
    while (buffer != null && out == in) {
      notifyAll();
      wait(1000);
      if (lastReader != null && !lastReader.isAlive()) {
        throw new IOException("Pipe broken");
      }
    }
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
  if (buffer == null) {
    throw new IOException("Pipe is closed");
  }
  if (in == -1) {
    in=0;
  }
  buffer[in++]=oneChar;
  if (in == buffer.length) {
    in=0;
  }
}

public static final ByteBuffer bufferToByteBuffer(final byte[] buffer,final ByteOrder order){
  final ByteBuffer retBuff=ByteBuffer.wrap(buffer);
  retBuff.order(order);
  return retBuff;
}

public static void writeSingleByte(OutputStream out,int b) throws IOException {
  byte[] buffer=new byte[1];
  buffer[0]=(byte)(b & 0xff);
  out.write(buffer);
}

private URI processLocalFiles(URI uri){
  String uriStr=uri.toString();
  if (uriStr.startsWith("file:")) {
    uriStr="file:" + System.getProperty("user.dir") + "/"+ uriStr.substring(5);
    URL url;
    try {
      url=new URL(uriStr);
      return url.toURI();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return uri;
}

private String generateScreenOnOrOffUtternace(int feedbackIndex){
  int resourceId=(feedbackIndex == INDEX_SCREEN_ON) ? R.string.template_screen_on : R.string.template_screen_off;
  String template=mContext.getString(resourceId);
  int currentRingerVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_RING);
  int maxRingerVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);
  int volumePercent=(100 / maxRingerVolume) * currentRingerVolume;
  int adjustment=volumePercent % 10;
  if (adjustment < 5) {
    volumePercent-=adjustment;
  }
 else   if (adjustment > 5) {
    volumePercent+=(10 - adjustment);
  }
  return String.format(template,volumePercent);
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=imageView.getWidth();
  final float viewHeight=imageView.getHeight();
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public void reset(){
  count=0;
  startTime=System.currentTimeMillis();
}

public int readInt() throws IOException {
  length+=4;
  int k1=in.read();
  if (k1 < 0)   return 0;
  int k2=in.read() << 8;
  int k3=in.read() << 16;
  return k1 + k2 + k3+ (in.read() << 24);
}

public void runTest() throws Throwable {
  Document doc;
  NodeList elementList;
  Node nameNode;
  CharacterData child;
  String childData;
  doc=(Document)load("hc_staff",true);
  elementList=doc.getElementsByTagName("strong");
  nameNode=elementList.item(0);
  child=(CharacterData)nameNode.getFirstChild();
  child.insertData(0,"Mss. ");
  childData=child.getData();
  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);
}

public Enumeration listOptions(){
  Vector newVector=new Vector(2);
  newVector.addElement(new Option("\tChange generalization parameter Rho\n","P",0,"-P"));
  newVector.addElement(new Option("\tUse ranking to class function special dev. for ARAM.\n","K",0,"-K"));
  return newVector.elements();
}

public void testAddIssuerLjavax_security_auth_x500_X500Principal02(){
  X509CRLSelector selector=new X509CRLSelector();
  X500Principal iss1=new X500Principal("O=First Org.");
  X500Principal iss2=new X500Principal("O=Second Org.");
  CRL crl1=new TestCRL(iss1);
  CRL crl2=new TestCRL(iss2);
  selector.addIssuer(iss1);
  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));
  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));
  selector.addIssuer(iss2);
  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));
}

public void addTransformation(TagTransformation tagTransformation){
  if (tagTransformation != null) {
    mappings.put(tagTransformation.getSourceTag(),tagTransformation);
  }
}

@Override public boolean isFileModified(long fileTimeStamp,long endOffset){
  boolean isFileModified=false;
  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {
    isFileModified=true;
  }
  return isFileModified;
}

public String nextString(){
  nextClean('"');
  StringBuilder sb=new StringBuilder();
  for (; ; ) {
    char c=next();
switch (c) {
case 0:
case '\n':
case '\r':
      throw syntaxError("Unterminated string");
case '\\':
    c=next();
switch (c) {
case 'b':
    sb.append('\b');
  break;
case 't':
sb.append('\t');
break;
case 'n':
sb.append('\n');
break;
case 'f':
sb.append('\f');
break;
case 'r':
sb.append('\r');
break;
case 'u':
sb.append((char)Integer.parseInt(next(4),16));
break;
default :
sb.append(c);
}
break;
case '"':
return sb.toString();
default :
if (c < ' ') {
throw syntaxError("Unescaped control character (ascii " + ((int)c) + ") in string");
}
sb.append(c);
break;
}
}
}

private void readLyrics3Tag(File file,RandomAccessFile newFile,int loadOptions) throws IOException {
}

public double evaluate(VectorInstance x,VectorInstance y) throws Exception {
  double dotProd=x.dotProduct(y);
  return Math.pow(m_gamma * dotProd + m_coef0,m_degree);
}

private boolean isDbConfigurationPresent(){
  return StringUtils.isNotBlank(selectColumn) && StringUtils.isNotBlank(tableName);
}

public boolean isIncompleteNumericalRun(String pin){
  final int len=pin.length();
  int consecutive=0;
  char last=pin.charAt(0);
  for (int i=1; i < len; i++) {
    final char c=pin.charAt(i);
    if (last == c) {
      consecutive++;
    }
 else {
      consecutive=0;
    }
    last=c;
    if (consecutive >= 2) {
      return true;
    }
  }
  return false;
}

private static void generateJavaScriptLogAlertCloseWindow(Writer writer,String message) throws IOException {
  writer.write("<script language=\"javascript\">alert(\"" + message + "\");");
  writer.write("window.close();");
  writer.write("</script>");
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 190) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,List<String> sentence){
  int cState=maxcChild[start][end][state];
  if (cState == -1) {
    return extractBestMaxRuleParse2(start,end,state,sentence);
  }
 else {
    List<Tree<String>> child=new ArrayList<Tree<String>>();
    child.add(extractBestMaxRuleParse2(start,end,cState,sentence));
    String stateStr=(String)tagNumberer.object(state);
    if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2);
    int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState);
    if (intermediateNode == 0) {
    }
    if (intermediateNode > 0) {
      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();
      String stateStr2=(String)tagNumberer.object(intermediateNode);
      if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);
      restoredChild.add(new Tree<String>(stateStr2,child));
      return new Tree<String>(stateStr,restoredChild);
    }
    return new Tree<String>(stateStr,child);
  }
}

protected void parseDOMAttributes(Element element) throws SAML2Exception {
  super.parseDOMAttributes(element);
}

private static double distance(double x1,double y1,double x2,double y2){
  return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));
}

protected void drawCenterText(Canvas c){
  SpannableString centerText=mChart.getCenterText();
  if (mChart.isDrawCenterTextEnabled() && centerText != null) {
    PointF center=mChart.getCenterCircleBox();
    float innerRadius=mChart.isDrawHoleEnabled() && mChart.isHoleTransparent() ? mChart.getRadius() * (mChart.getHoleRadius() / 100f) : mChart.getRadius();
    RectF holeRect=mRectBuffer[0];
    holeRect.left=center.x - innerRadius;
    holeRect.top=center.y - innerRadius;
    holeRect.right=center.x + innerRadius;
    holeRect.bottom=center.y + innerRadius;
    RectF boundingRect=mRectBuffer[1];
    boundingRect.set(holeRect);
    float radiusPercent=mChart.getCenterTextRadiusPercent();
    if (radiusPercent > 0.0) {
      boundingRect.inset((boundingRect.width() - boundingRect.width() * radiusPercent) / 2.f,(boundingRect.height() - boundingRect.height() * radiusPercent) / 2.f);
    }
    if (!centerText.equals(mCenterTextLastValue) || !boundingRect.equals(mCenterTextLastBounds)) {
      mCenterTextLastBounds.set(boundingRect);
      mCenterTextLastValue=centerText;
      float width=mCenterTextLastBounds.width();
      mCenterTextLayout=new StaticLayout(centerText,0,centerText.length(),mCenterTextPaint,(int)Math.max(Math.ceil(width),1.f),Layout.Alignment.ALIGN_CENTER,1.f,0.f,false);
    }
    float layoutHeight=mCenterTextLayout.getHeight();
    c.save();
    c.translate(boundingRect.left,boundingRect.top + (boundingRect.height() - layoutHeight) / 2.f);
    mCenterTextLayout.draw(c);
    c.restore();
  }
}

public void start(int conditions) throws IOException {
  print("conditions",new String[]{Integer.toBinaryString(conditions)});
  printer.flush();
}

public String pad(String value,int places,String padCharacter){
  StringBuilder sb=new StringBuilder();
  sb.append(value);
  while (sb.length() < places) {
    sb.append(padCharacter);
  }
  return sb.toString();
}

private static ResultCode registerErrorResultCode(final int intValue,final LocalizableMessage name,final Enum resultCodeEnum){
  final ResultCode t=new ResultCode(intValue,name,true,resultCodeEnum);
  ELEMENTS.put(intValue,t);
  return t;
}

public void addAll(ExceptionSet other){
  exceptionSet.or(other.exceptionSet);
  explicitSet.or(other.explicitSet);
  size=countBits(exceptionSet);
  commonSupertype=null;
}

@HLEUnimplemented @HLEFunction(nid=0x574A8C3F,version=271) public int sceUsbCamStartVideo(){
  if (!setupVideo()) {
    log.warn(String.format("Cannot find webcam"));
  }
  return 0;
}

protected ResourceLoaderLicenseLocator(final Charset charset,final String... licenseFiles){
  if (licenseFiles == null || licenseFiles.length == 0) {
    throw new IllegalArgumentException("No license files specified");
  }
  if (charset == null) {
    throw new NullPointerException("Charset is null");
  }
  this.licenseFiles=new ArrayList<String>(Arrays.asList(licenseFiles));
  this.charset=charset;
}

private static boolean isIntendedException(Exception e,Class<?> clazz){
  final String message=e.getMessage();
  return (!TextUtils.isEmpty(message) && message.startsWith(clazz.getName()));
}

@Inject public ProjectTypeRegistry(Set<ProjectTypeDef> types){
  projectTypes=new HashMap<>();
  validatedData=new HashMap<>();
  validate(types);
  for (  ProjectTypeDef type : validatedData.values()) {
    try {
      init(type);
    }
 catch (    ProjectTypeConstraintException e) {
      LOG.error(e.getMessage());
    }
  }
}

static public void addNotificationListener(JMXConnector jmxConnector,Class<?> mbeanInterface,String mbeanName,NotificationListener notificationListener,boolean ignored) throws InstanceNotFoundException, Exception {
  MBeanServerConnection mbsc=jmxConnector.getMBeanServerConnection();
  ObjectName objectName=generateMBeanObjectName(mbeanInterface.getName(),mbeanName);
  mbsc.addNotificationListener(objectName,notificationListener,null,null);
}

public void testCase16(){
  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};
  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};
  int aSign=-1;
  int bSign=-1;
  byte rBytes[]={1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  BigInteger result=aNumber.subtract(bNumber);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals(1,result.signum());
}

private void consume(){
  consumer.subscribe(topics);
  while (running.get()) {
    try {
      ConsumerRecords records=consumer.poll(pollIntervalMs);
      if (records == null) {
        continue;
      }
      Iterator<ConsumerRecord<String,String>> iterator=records.iterator();
      while (iterator.hasNext()) {
        sendMessage(iterator.next());
      }
    }
 catch (    Exception ex) {
      String error="Error consuming messages from kafka";
      logger.error(error,ex);
      bus.send(ConfigConstants.CONSUMER_ERROR_TOPIC,getErrorString(error,ex.getMessage()));
    }
  }
}

private byte[] readRawBytesSlowPath(final int size) throws IOException {
  if (size <= 0) {
    if (size == 0) {
      return Internal.EMPTY_BYTE_ARRAY;
    }
 else {
      throw InvalidProtocolBufferException.negativeSize();
    }
  }
  if (totalBytesRetired + bufferPos + size > currentLimit) {
    skipRawBytes(currentLimit - totalBytesRetired - bufferPos);
    throw InvalidProtocolBufferException.truncatedMessage();
  }
  if (size < BUFFER_SIZE) {
    final byte[] bytes=new byte[size];
    int pos=bufferSize - bufferPos;
    System.arraycopy(buffer,bufferPos,bytes,0,pos);
    bufferPos=bufferSize;
    ensureAvailable(size - pos);
    System.arraycopy(buffer,0,bytes,pos,size - pos);
    bufferPos=size - pos;
    return bytes;
  }
 else {
    final int originalBufferPos=bufferPos;
    final int originalBufferSize=bufferSize;
    totalBytesRetired+=bufferSize;
    bufferPos=0;
    bufferSize=0;
    int sizeLeft=size - (originalBufferSize - originalBufferPos);
    final List<byte[]> chunks=new ArrayList<byte[]>();
    while (sizeLeft > 0) {
      final byte[] chunk=new byte[Math.min(sizeLeft,BUFFER_SIZE)];
      int pos=0;
      while (pos < chunk.length) {
        final int n=(input == null) ? -1 : input.read(chunk,pos,chunk.length - pos);
        if (n == -1) {
          throw InvalidProtocolBufferException.truncatedMessage();
        }
        totalBytesRetired+=n;
        pos+=n;
      }
      sizeLeft-=chunk.length;
      chunks.add(chunk);
    }
    final byte[] bytes=new byte[size];
    int pos=originalBufferSize - originalBufferPos;
    System.arraycopy(buffer,originalBufferPos,bytes,0,pos);
    for (    final byte[] chunk : chunks) {
      System.arraycopy(chunk,0,bytes,pos,chunk.length);
      pos+=chunk.length;
    }
    return bytes;
  }
}

private void deleteAttrs(SvcReg reg,EntryRep entry,boolean checkDups){
  EntryClass eclass=entry.eclass;
  deleteInstance(eclass);
  Object[] fields=entry.fields;
  if (fields.length == 0) {
    ArrayList regs=serviceByEmptyAttr.get(eclass);
    if (regs == null || (checkDups && hasEmptyAttr(reg,eclass)))     return;
    int idx=regs.indexOf(reg);
    if (idx >= 0) {
      regs.remove(idx);
      if (regs.isEmpty())       serviceByEmptyAttr.remove(eclass);
    }
    return;
  }
  for (int fldidx=fields.length; --fldidx >= 0; ) {
    eclass=getDefiningClass(eclass,fldidx);
    HashMap[] attrMaps=serviceByAttr.get(eclass);
    if (attrMaps == null || attrMaps[fldidx] == null || (checkDups && hasAttr(reg,eclass,fldidx,fields[fldidx])))     continue;
    HashMap map=attrMaps[fldidx];
    Object value=fields[fldidx];
    ArrayList regs=(ArrayList)map.get(value);
    if (regs == null)     continue;
    int idx=regs.indexOf(reg);
    if (idx < 0)     continue;
    regs.remove(idx);
    if (!regs.isEmpty())     continue;
    map.remove(value);
    if (!map.isEmpty())     continue;
    attrMaps[fldidx]=null;
    if (allNull(attrMaps))     serviceByAttr.remove(eclass);
  }
}

public void testDSAProvider() throws Exception {
  AlgorithmParameters params=AlgorithmParameters.getInstance("DSA");
  assertEquals("Algorithm","DSA",params.getAlgorithm());
  BigInteger p=BigInteger.ONE;
  BigInteger q=BigInteger.TEN;
  BigInteger g=BigInteger.ZERO;
  params.init(new DSAParameterSpec(p,q,g));
  byte[] enc=params.getEncoded();
  assertNotNull(enc);
  assertNotNull(params.getEncoded("ASN.1"));
  DSAParameterSpec spec=params.getParameterSpec(DSAParameterSpec.class);
  assertEquals("p is wrong ",p,spec.getP());
  assertEquals("q is wrong ",q,spec.getQ());
  assertEquals("g is wrong ",g,spec.getG());
  params=AlgorithmParameters.getInstance("DSA");
  params.init(enc);
  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));
  params=AlgorithmParameters.getInstance("DSA");
  params.init(enc,"ASN.1");
  assertTrue("param encoded is different",Arrays.equals(enc,params.getEncoded()));
  params=AlgorithmParameters.getInstance("DSA");
  try {
    params.init(enc,"DOUGLASMAWSON");
    fail("unsupported format should have raised IOException");
  }
 catch (  IOException e) {
  }
}

public static boolean isClassLiteralPossible(ClassNode classNode){
  return Modifier.isPublic(classNode.getModifiers());
}

private Properties loadLogFile(License license,boolean create){
  Properties log=new Properties();
  File logFile=getLogFile(license);
  try {
    if (create && logFile.createNewFile()) {
      logger.fine("Created license log file: " + logFile.getAbsolutePath());
    }
    final InputStream in=new FileInputStream(logFile);
    try {
      log.load(in);
    }
  finally {
      in.close();
    }
  }
 catch (  FileNotFoundException ex) {
    if (create) {
      logger.log(Level.SEVERE,"Unable to create license log file: " + logFile.getAbsolutePath(),ex);
    }
 else {
      logger.fine("Log file does not yet exist");
    }
  }
catch (  IOException ex) {
    logger.log(Level.WARNING,"Unable to access license log file: " + logFile.getAbsolutePath(),ex);
  }
  return log;
}

public HTMLStripCharFilterFactory(Map<String,String> args){
  super(args);
  escapedTags=getSet(args,"escapedTags");
  if (!args.isEmpty()) {
    throw new IllegalArgumentException("Unknown parameters: " + args);
  }
}

public static int update(long id,V v){
  String passwd=(String)v.value("password");
  if (!X.isEmpty(passwd)) {
    passwd=encrypt(passwd);
    v.set("password",passwd,true);
  }
 else {
    v.remove("password");
  }
  return Helper.update(id,v.set("updated",System.currentTimeMillis()),User.class);
}

public double likelihood(String[] doc,String tag){
  double likelihood=0;
  if (ntw.rowSum(tag) == 0) {
    return likelihood;
  }
  Counter<String> nwd=new Counter<String>();
  for (  String w : doc) {
    nwd.inc(w,1);
  }
  double norm=0;
  Map<String,Double> prwd=new Hashtable<String,Double>();
  for (  Entry<String,Long> e : nwd) {
    double prw=prw(e.getKey());
    norm+=prw;
    prwd.put(e.getKey(),prw);
  }
  for (  Entry<String,Double> e : prwd.entrySet()) {
    double prw=e.getValue() / norm;
    likelihood+=ptr(tag,e.getKey()) * prw * (1.0 - pcm());
  }
  likelihood+=ptr(tag,NOISE) * pcm();
  return likelihood;
}

@Override public String toString(){
  StringBuffer text=new StringBuffer();
  text.append("attributes " + attributesToString() + "\n");
  text.append("number of instances " + getInstNums());
  return text.toString();
}

public boolean isSafeMode(){
  return this.safeMode;
}

public void test_getPutByteArrayWithOffsetAndLength(){
  final int size=200;
  final IDataRecord buf=new FixedByteArrayBuffer(size);
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(size - 1));
  final int pos=1;
  for (int i=0; i < LIMIT; i++) {
    final byte[] expected=new byte[r.nextInt(size - 2)];
    final int off=(expected.length / 2 == 0 ? 0 : r.nextInt(expected.length / 2));
    final int len=(expected.length == 0 ? 0 : r.nextInt(expected.length - off));
    r.nextBytes(expected);
    buf.put(pos,expected,off,len);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(off,len,expected,pos,len,buf.array()));
    final int dstoff=r.nextInt(10);
    final byte[] actual=new byte[expected.length + dstoff];
    buf.get(pos,actual,dstoff,expected.length);
    assertEquals(0,BytesUtil.compareBytesWithLenAndOffset(off,len,expected,dstoff,len,actual));
  }
  assertEquals((byte)0,buf.getByte(0));
  assertEquals((byte)0,buf.getByte(pos + size - 2));
}

public void addLastItem(M model){
  addItem(mDatas.size(),model);
}

static boolean hasLocalizedMessages(){
  return GUIMediator.isEnglishLocale() || !FIRST_MESSAGE.equals(I18n.tr(FIRST_MESSAGE));
}

public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){
  if (!field_146213_o)   return false;
 else switch (p_146201_1_) {
case 1:
    func_146202_e();
  func_146199_i(0);
return true;
case 3:
GuiScreen.setClipboardString(func_146207_c());
return true;
case 22:
if (field_146226_p) func_146191_b(GuiScreen.getClipboardString());
return true;
case 24:
GuiScreen.setClipboardString(func_146207_c());
if (field_146226_p) func_146191_b("");
return true;
default :
switch (p_146201_2_) {
case 14:
if (GuiScreen.isCtrlKeyDown()) {
if (field_146226_p) func_146177_a(-1);
}
 else if (field_146226_p) func_146175_b(-1);
return true;
case 199:
if (GuiScreen.isShiftKeyDown()) func_146199_i(0);
 else func_146196_d();
return true;
case 203:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(-1,func_146186_n()));
 else func_146199_i(func_146186_n() - 1);
}
 else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(-1));
 else func_146182_d(-1);
return true;
case 205:
if (GuiScreen.isShiftKeyDown()) {
if (GuiScreen.isCtrlKeyDown()) func_146199_i(func_146183_a(1,func_146186_n()));
 else func_146199_i(func_146186_n() + 1);
}
 else if (GuiScreen.isCtrlKeyDown()) func_146190_e(func_146187_c(1));
 else func_146182_d(1);
return true;
case 207:
if (GuiScreen.isShiftKeyDown()) func_146199_i(field_146216_j.length());
 else func_146202_e();
return true;
case 211:
if (GuiScreen.isCtrlKeyDown()) {
if (field_146226_p) func_146177_a(1);
}
 else if (field_146226_p) func_146175_b(1);
return true;
default :
if (ChatAllowedCharacters.isAllowedCharacter(p_146201_1_)) {
if (field_146226_p) func_146191_b(Character.toString(p_146201_1_));
return true;
}
 else return false;
}
}
}

public static DockerImage fromImageName(String imageName){
  imageName=prepare(imageName);
  String[] parts=imageName.split(SECTION_SEPARATOR);
switch (parts.length) {
case 1:
    return fromParts(null,null,parts[0]);
case 2:
  if (isValidNamespace(parts[0])) {
    return fromParts(null,parts[0],parts[1]);
  }
 else {
    return fromParts(parts[0],null,parts[1]);
  }
case 3:
return fromParts(parts[0],parts[1],parts[2]);
default :
throw new IllegalArgumentException("Invalid image format: " + imageName);
}
}

public synchronized void listen(final Set<NotificationChannel> channelNames){
  m_channels.addAll(channelNames);
}

public static void deleteDirectory(File directory) throws IOException {
  if (!directory.exists()) {
    return;
  }
  if (!isSymlink(directory)) {
    cleanDirectory(directory);
  }
  if (!directory.delete()) {
    String message="Unable to delete directory " + directory + ".";
    throw new IOException(message);
  }
}

private void displayNonVerbose(ConsoleApplication app,String categoryName,String typeName,Tag tag,Set<String> propertyNames){
  if (!app.isScriptFriendly()) {
    displayPropertyOptionKey(app);
    app.println();
    app.println();
  }
  TableBuilder builder=new TableBuilder();
  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_NAME.get());
  builder.appendHeading(INFO_DSCFG_HEADING_COMPONENT_TYPE.get());
  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_NAME.get());
  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_OPTIONS.get());
  builder.appendHeading(INFO_DSCFG_HEADING_PROPERTY_SYNTAX.get());
  builder.addSortKey(0);
  builder.addSortKey(1);
  builder.addSortKey(2);
  for (  String category : categoryMap.keySet()) {
    if (categoryName != null && !categoryName.equals(category)) {
      continue;
    }
    Map<String,AbstractManagedObjectDefinition<?,?>> subTypes=categoryMap.get(category);
    for (    String type : subTypes.keySet()) {
      if (typeName != null && !typeName.equals(type)) {
        continue;
      }
      AbstractManagedObjectDefinition<?,?> mod=subTypes.get(type);
      if (cannotDisplay(app,mod,tag)) {
        continue;
      }
      Set<PropertyDefinition<?>> pds=getPropertyDefinitions(mod);
      for (      PropertyDefinition<?> pd : pds) {
        if (cannotDisplay(app,pd,propertyNames)) {
          continue;
        }
        builder.startRow();
        builder.appendCell(category);
        builder.appendCell(type);
        builder.appendCell(pd.getName());
        builder.appendCell(getPropertyOptionSummary(pd));
        PropertyDefinitionUsageBuilder v=new PropertyDefinitionUsageBuilder(false);
        builder.appendCell(v.getUsage(pd));
      }
    }
  }
  TablePrinter printer;
  if (app.isScriptFriendly()) {
    printer=createScriptFriendlyTablePrinter(app.getOutputStream());
  }
 else {
    printer=new TextTablePrinter(app.getOutputStream());
  }
  builder.print(printer);
}

public List<Long> deleteEmptyFolders(){
  ArrayList<Long> folderIds=new ArrayList<Long>();
  SQLiteDatabase db=mOpenHelper.getWritableDatabase();
  db.beginTransaction();
  try {
    String selection=LauncherSettings.Favorites.ITEM_TYPE + " = " + LauncherSettings.Favorites.ITEM_TYPE_FOLDER+ " AND "+ LauncherSettings.Favorites._ID+ " NOT IN (SELECT "+ LauncherSettings.Favorites.CONTAINER+ " FROM "+ TABLE_FAVORITES+ ")";
    Cursor c=db.query(TABLE_FAVORITES,new String[]{LauncherSettings.Favorites._ID},selection,null,null,null,null);
    while (c.moveToNext()) {
      folderIds.add(c.getLong(0));
    }
    c.close();
    if (folderIds.size() > 0) {
      db.delete(TABLE_FAVORITES,Utilities.createDbSelectionQuery(LauncherSettings.Favorites._ID,folderIds),null);
    }
    db.setTransactionSuccessful();
  }
 catch (  SQLException ex) {
    Log.e(TAG,ex.getMessage(),ex);
    folderIds.clear();
  }
 finally {
    db.endTransaction();
  }
  return folderIds;
}

@Override default CompletableFuture<Integer> sumInt(final ToIntFunction<? super T> fn){
  return CompletableFuture.supplyAsync(null,getExec());
}

public void testWrite3() throws Exception {
  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};
  TestOutputStream tos=new TestOutputStream();
  CipherOutputStream cos=new CipherOutputStream(tos,new NullCipher());
  for (int i=0; i < data.length; i++) {
    cos.write(data,i,1);
  }
  cos.flush();
  byte[] result=tos.toByteArray();
  if (!Arrays.equals(result,data)) {
    fail("CipherOutputStream wrote incorrect data.");
  }
}

private Document parse(final String data){
  if (docBuilder == null || data == null) {
    return null;
  }
  Document document=null;
  try {
    String buf=BEGINPART + data + ENDPART;
    InputSource inputSource=new InputSource(new StringReader(buf));
    document=docBuilder.parse(inputSource);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return document;
}

public boolean isProductionJournal(Set<String> productionCopies,Volume volume){
  for (  String productionCopy : productionCopies) {
    if (productionCopy.equalsIgnoreCase(volume.getRpCopyName())) {
      return true;
    }
  }
  return false;
}

private void testPoundSymbolInColumnName() throws SQLException {
  deleteDb("oracle");
  Connection conn=getConnection("oracle;MODE=Oracle");
  Statement stat=conn.createStatement();
  stat.execute("CREATE TABLE TEST(ID INT PRIMARY KEY, U##NAME VARCHAR(255))");
  stat.execute("INSERT INTO TEST VALUES(1, 'Hello'), (2, 'HelloWorld'), (3, 'HelloWorldWorld')");
  assertResult("1",stat,"SELECT ID FROM TEST where U##NAME ='Hello'");
  conn.close();
}

public static String decode(final String escaped) throws URIException {
  try {
    final byte[] rawdata=URLCodec.decodeUrl(EncodingUtil.getAsciiBytes(escaped));
    return EncodingUtil.getString(rawdata,URI.getDefaultProtocolCharset());
  }
 catch (  final DecoderException e) {
    throw new URIException(e.getMessage());
  }
}

void waitBeforeNextPoll(int pollingInterval) throws InterruptedException {
synchronized (this) {
    wait(pollingInterval);
  }
  if (!pollOutstanding) {
    return;
  }
  log.debug("--- extra wait");
  for (int i=0; i < 20; i++) {
synchronized (this) {
      wait(pollingInterval / 4);
    }
    log.debug("-------------extra wait");
    if (!pollOutstanding) {
      return;
    }
  }
}

private void shiftMappingVectorTokensLeft(int lineNum,int startCol,int shift){
  boolean lastWasBeginTLAToken=false;
  int lastBeginTLATokCol=-777;
  Vector line=(Vector)mappingVector.elementAt(lineNum);
  for (int i=0; i < line.size(); i++) {
    MappingObject obj=(MappingObject)line.elementAt(i);
    if (obj.getType() == MappingObject.BEGIN_TLATOKEN) {
      MappingObject.BeginTLAToken tobj=(MappingObject.BeginTLAToken)obj;
      int col=tobj.getColumn();
      if (col >= startCol) {
        tobj.setColumn(col - shift);
      }
      lastWasBeginTLAToken=true;
      lastBeginTLATokCol=tobj.getColumn();
    }
 else {
      if (obj.getType() == MappingObject.END_TLATOKEN) {
        MappingObject.EndTLAToken tobj=(MappingObject.EndTLAToken)obj;
        int col=tobj.getColumn();
        if (col >= startCol) {
          tobj.setColumn(col - shift);
        }
        if (lastWasBeginTLAToken && tobj.getColumn() <= lastBeginTLATokCol) {
          PcalDebug.ReportBug("PcalTLAGen.shiftMappingVectorTokensLeft created a null TLA Token");
        }
      }
 else       if (obj.getType() == MappingObject.SOURCE_TOKEN) {
        MappingObject.SourceToken tobj=(MappingObject.SourceToken)obj;
        int col=tobj.getBeginColumn();
        if (col >= startCol) {
          tobj.setBeginColumn(col - shift);
        }
        col=tobj.getEndColumn();
        if (col >= startCol) {
          tobj.setEndColumn(col - shift);
        }
        lastWasBeginTLAToken=false;
      }
    }
  }
}

protected Dimension computeLengths(String annoText){
  String[] lines=Util.splitLines(annoText);
  int lineLength=0;
  for (  String line : lines) {
    if (line.length() > lineLength)     lineLength=line.length();
  }
  return new Dimension(lineLength + 5,lines.length + 1);
}

public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException {
  writer.println(ImageMapUtilities.getImageMap(name,info,toolTipTagFragmentGenerator,urlTagFragmentGenerator));
}

ImportNoteBuilder addMessage(ImportNoteMessage.Type type,String message){
  if (!Strings.isNullOrEmpty(message)) {
    messages.add(new ImportNoteMessage(type,message));
  }
  return this;
}

public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {
  return toXMLString(includeNS,declareNS,false);
}

public static List<String> asStringList(Collection<? extends Object> objects){
  List<String> list=new ArrayList<>();
  for (  Object object : objects) {
    list.add(String.valueOf(object));
  }
  return list;
}

public <E extends T>E min(Iterable<E> iterable){
  Iterator<E> iterator=iterable.iterator();
  E minSoFar=iterator.next();
  while (iterator.hasNext()) {
    minSoFar=min(minSoFar,iterator.next());
  }
  return minSoFar;
}

public synchronized int read(byte b[],int off,int len) throws IOException {
  if (len <= 0)   return 0;
  int moreSpace;
synchronized (lock) {
    if (pos >= present)     pos=present=0;
 else     if (pos >= waterMark) {
      System.arraycopy(buffer,pos,buffer,0,present - pos);
      present-=pos;
      pos=0;
    }
    int freeSpace=buffer.length - present;
    moreSpace=Math.max(freeSpace - requested,0);
  }
  if (moreSpace > 0)   manager.sendRequest(info,moreSpace);
synchronized (lock) {
    requested+=moreSpace;
    while ((pos >= present) && !disconnected) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
      }
    }
    if (disconnected && pos >= present)     return -1;
    int available=present - pos;
    if (len < available) {
      System.arraycopy(buffer,pos,b,off,len);
      pos+=len;
      return len;
    }
 else {
      System.arraycopy(buffer,pos,b,off,available);
      pos=present=0;
      return available;
    }
  }
}

public final void put(String key,int value){
  if ((m_firstFree + 1) >= m_mapSize) {
    m_mapSize+=m_blocksize;
    String newMap[]=new String[m_mapSize];
    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);
    m_map=newMap;
    int newValues[]=new int[m_mapSize];
    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);
    m_values=newValues;
  }
  m_map[m_firstFree]=key;
  m_values[m_firstFree]=value;
  m_firstFree++;
}

public static List<ItemStack> consolidateItemStacks(List<ItemStack> inputStacks){
  List<ItemStack> outputStacks=new ArrayList<ItemStack>();
  for (  ItemStack sourceIS : inputStacks) {
    boolean bFound=false;
    for (    ItemStack destIS : outputStacks) {
      if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) {
        bFound=true;
        destIS.stackSize+=sourceIS.stackSize;
      }
    }
    if (!bFound)     outputStacks.add(sourceIS.copy());
  }
  return outputStacks;
}

public static int howManyDaysOld(long time){
  return (int)((System.currentTimeMillis() - time) / DateUtils.DAY_IN_MILLIS);
}

protected Character isWFXMLChar(String chardata){
  Character refInvalidChar;
  if (chardata == null || (chardata.length() == 0)) {
    return null;
  }
  char[] dataarray=chardata.toCharArray();
  int datalength=dataarray.length;
  if (fIsXMLVersion11) {
    int i=0;
    while (i < datalength) {
      if (XML11Char.isXML11Invalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return refInvalidChar;
      }
    }
  }
 else {
    int i=0;
    while (i < datalength) {
      if (XMLChar.isInvalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return refInvalidChar;
      }
    }
  }
  return null;
}

public void testZeroZero(){
  String numA="0";
  String numB="0";
  String res="0";
  BigInteger aNumber=new BigInteger(numA);
  BigInteger bNumber=new BigInteger(numB);
  BigInteger result=aNumber.xor(bNumber);
  assertTrue(res.equals(result.toString()));
}

public final ParallelFlux<T> doOnNext(Consumer<? super T> onNext){
  Objects.requireNonNull(onNext,"onNext");
  return doOnSignal(this,onNext,null,null,null,null,null,null,null);
}

public void test_fill$CIIC(){
  char val='T';
  char d[]=new char[1000];
  Arrays.fill(d,400,d.length,val);
  for (int i=0; i < 400; i++)   assertTrue("Filled elements not in range",!(d[i] == val));
  for (int i=400; i < d.length; i++)   assertTrue("Failed to fill char array correctly",d[i] == val);
  try {
    Arrays.fill(d,10,0,val);
    fail("IllegalArgumentException expected");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    Arrays.fill(d,-10,0,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  try {
    Arrays.fill(d,10,d.length + 1,val);
    fail("ArrayIndexOutOfBoundsException expected");
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
}

protected void addMissing(Instances data,int level,boolean predictorMissing,boolean classMissing){
  int classIndex=data.classIndex();
  Random random=new Random(1);
  for (int i=0; i < data.numInstances(); i++) {
    Instance current=data.instance(i);
    for (int j=0; j < data.numAttributes(); j++) {
      if (((j == classIndex) && classMissing) || ((j != classIndex) && predictorMissing)) {
        if (Math.abs(random.nextInt()) % 100 < level)         current.setMissing(j);
      }
    }
  }
}

public <T extends DataObject>void insertInBatches(List<T> records,int partitionSize,DbClient dbClient,String type){
  List<List<T>> volume_partitions=Lists.partition(records,partitionSize);
  for (  List<T> partition : volume_partitions) {
    try {
      dbClient.createObject(partition);
      _log.info("{} {} Records inserted to DB",partition.size(),type);
    }
 catch (    DatabaseException e) {
      _log.error("Error inserting {} records into the database:",type,e);
    }
  }
}

public void modify(SSOToken token,String objName,ModificationItem[] mods) throws SMSException, SSOException {
  if ((objName == null) || (objName.length() == 0) || (mods == null)|| (mods.length == 0)) {
    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.modify: " + "One or more arguments is null or empty");
  }
  mRWLock.readRequest();
  try {
    if (!root.isExists(mRootDir,objName)) {
      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
  }
  finally {
    mRWLock.readDone();
  }
  mRWLock.writeRequest();
  try {
    SMSFlatFileTreeNode node=root.getChild(objName);
    if (node == null) {
      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    String filepath=node.getAttributeFilename(mRootDir);
    if (filepath == null) {
      String errmsg="SMSEnhancedFlatFileObject.modify: object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    File filehandle=new File(filepath);
    if (!filehandle.isFile()) {
      String errmsg="SMSEnhancedFlatFileObject.modify: Attributes file for " + "object " + objName + " not found.";
      mDebug.error(errmsg);
      throw new ServiceNotFoundException(errmsg);
    }
    Properties props=loadProperties(filehandle,objName);
    boolean hasSunXmlKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL) != null;
    for (int i=0; i < mods.length; i++) {
      modifyValues(objName,mods[i],props);
    }
    saveProperties(props,filehandle,objName);
    String newSunXMLKeyValue=props.getProperty(SMSEntry.ATTR_XML_KEYVAL);
    if (newSunXMLKeyValue != null) {
      Set xmlKeyVals=toValSet(SMSEntry.ATTR_XML_KEYVAL,newSunXMLKeyValue);
      if (!hasSunXmlKeyValue) {
        deleteSunXmlKeyValFiles(node);
      }
      createSunXmlKeyValFiles(node,xmlKeyVals);
      saveDirectoryTree();
    }
  }
  finally {
    mRWLock.writeDone();
  }
}

public void removeOnTabSelectedListener(OnTabSelectedListener listener){
  if (listener != null) {
    mListeners.remove(listener);
  }
}

public ConnectUriManager(List<String> connectUri) throws THLException {
  this.uriList=connectUri;
  if (connectUri.size() == 0) {
    throw new THLException("Connect URI value is empty; must be a list of one or more THL URIs");
  }
}

private void addVolumesToParkingStorageGroup(StorageSystem storage,String policyName,Set<String> volumeDeviceIds) throws Exception {
  String[] tokens=policyName.split(Constants.SMIS_PLUS_REGEX);
  CIMObjectPath groupPath=_helper.getVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);
  if (groupPath == null) {
    groupPath=_helper.createVolumeGroupBasedOnSLO(storage,storage,tokens[0],tokens[1],tokens[2]);
  }
  CIMArgument[] inArgs=_helper.getAddVolumesToMaskingGroupInputArguments(storage,groupPath,volumeDeviceIds);
  CIMArgument[] outArgs=new CIMArgument[5];
  SmisJob addVolumesToSGJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.ADD_MEMBERS);
  _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),"AddMembers",inArgs,outArgs,addVolumesToSGJob);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public static InputStream toInputStream(String input,Charset encoding){
  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));
}

public boolean exportPkcs8(){
  return jrbPkcs8.isSelected();
}

public static PublicKey generatePublicKey(String encodedPublicKey){
  try {
    byte[] decodedKey=Base64.decode(encodedPublicKey);
    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
catch (  InvalidKeySpecException e) {
    Log.e(TAG,"Invalid key specification.");
    throw new IllegalArgumentException(e);
  }
catch (  Base64DecoderException e) {
    Log.e(TAG,"Base64 decoding failed.");
    throw new IllegalArgumentException(e);
  }
}

public NumberTick(Number number,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){
  super(number.doubleValue(),label,textAnchor,rotationAnchor,angle);
  this.number=number;
}

private boolean isStoppable(){
  return (isRunning() && getCache() != null);
}

private void log(String message,String level,String levelColor,PrintStream ps){
  StringBuilder builder=new StringBuilder();
  if (!level.equals("raw"))   builder.append(getPrefix(level,levelColor));
  builder.append(message);
  String ts=builder.toString();
  ps.println(ts);
  for (  LogHandler hand : handlers)   hand.onLog(level,message,ts,this);
}

public void addGossipMember(GossipMember member){
  gossipMembers.add(member);
}

public static boolean isPublic(int mod){
  return Modifier.isPublic(mod);
}

public static PublicKey generatePublicKey(String encodedPublicKey){
  try {
    byte[] decodedKey=Base64.decode(encodedPublicKey);
    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
catch (  InvalidKeySpecException e) {
    Log.e(TAG,"Invalid key specification.");
    throw new IllegalArgumentException(e);
  }
catch (  Base64DecoderException e) {
    Log.e(TAG,"Base64 decoding failed.");
    throw new IllegalArgumentException(e);
  }
}

public static Map<String,Object> createUserPrefMap(GenericValue rec) throws GeneralException {
  return addPrefToMap(rec,new LinkedHashMap<String,Object>());
}

private int clampMag(int value,int absMin,int absMax){
  final int absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

public JSONBuffer appendString(Object cont){
  if (stack.empty() || stack.peek() != Operand.ARRAY) {
    throw new JSONException("Appending string outside of array context.");
  }
  addQuotedString(cont);
  addSeparator();
  return this;
}

public static void deleteUserFromAuthenticationInfo(AuthenticationInfo authenticationInfo) throws ServerRuntimeException {
  String username=authenticationInfo.getUsername();
  String passwordFileLocation=authenticationInfo.getPasswordFileLocation();
  try {
    PropertiesConfiguration props=new PropertiesConfiguration(passwordFileLocation);
    String usernameInFile=props.getString(username);
    if (usernameInFile == null) {
      throw new ServerRuntimeException(MessageFormat.format("Username does not exist: {0}",username));
    }
    props.clearProperty(username);
    props.save();
  }
 catch (  org.apache.commons.configuration.ConfigurationException ce) {
    logger.error("Error while saving properties for file:" + authenticationInfo.getPasswordFileLocation(),ce);
    throw new ServerRuntimeException("Error while saving Credentials: " + ce.getMessage());
  }
}

public void error(Level level,String messageId,String data[],Object session) throws LogException {
  error(level,messageId,data,session,null);
}

public synchronized void remove(IAudioProcessor processor){
  processors.remove(processor);
  buildFinalProcessor();
}

private float clampMag(float value,float absMin,float absMax){
  final float absValue=Math.abs(value);
  if (absValue < absMin)   return 0;
  if (absValue > absMax)   return value > 0 ? absMax : -absMax;
  return value;
}

private int endRecoverAnimation(ViewHolder viewHolder,boolean override){
  final int recoverAnimSize=mRecoverAnimations.size();
  for (int i=recoverAnimSize - 1; i >= 0; i--) {
    final RecoverAnimation anim=mRecoverAnimations.get(i);
    if (anim.mViewHolder == viewHolder) {
      anim.mOverridden|=override;
      if (!anim.mEnded) {
        anim.cancel();
      }
      mRecoverAnimations.remove(i);
      return anim.mAnimationType;
    }
  }
  return 0;
}

public final void addElement(String value){
  if ((m_firstFree + 1) >= m_mapSize) {
    m_mapSize+=m_blocksize;
    String newMap[]=new String[m_mapSize];
    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);
    m_map=newMap;
  }
  m_map[m_firstFree]=value;
  m_firstFree++;
}

private boolean isMethodContained(Method m,List<Method> wrapperMethods){
  String name=m.getName();
  Class<?>[] paramTypes=m.getParameterTypes();
  Class<?> returnType=m.getReturnType();
  for (  Method wm : wrapperMethods) {
    if (name.equals(wm.getName()) && Arrays.equals(paramTypes,wm.getParameterTypes()) && returnType == wm.getReturnType()) {
      return true;
    }
  }
  return false;
}

public void deleteNode(Node n){
  Assert.check(nodes.contains(n));
  nodes.remove(n);
  notifyUpdate(n,null);
}

void updatePressed(ActionEvent e,boolean newRoute){
  String uName=_userName.getText();
  Route g=checkNamesOK();
  if (g == null) {
    return;
  }
  g.setUserName(uName);
  g.clearOutputTurnouts();
  g.clearOutputSensors();
  g.clearRouteSensors();
  initializeIncludedList();
  setTurnoutInformation(g);
  setSensorInformation(g);
  g.setOutputScriptName(scriptFile.getText());
  g.setOutputSoundName(soundFile.getText());
  setControlInformation(g);
  curRoute=g;
  finishUpdate();
  status1.setText((newRoute ? Bundle.getMessage("RouteAddStatusCreated") : Bundle.getMessage("RouteAddStatusUpdated")) + ": \"" + uName+ "\" ("+ _includedTurnoutList.size()+ " "+ Bundle.getMessage("Turnouts")+ ", "+ _includedSensorList.size()+ " "+ Bundle.getMessage("Sensors")+ ")");
}

public String toString(){
  return m_Attributes.toString();
}

private static void checkForXStream(){
  try {
    Class.forName("com.thoughtworks.xstream.XStream");
    m_Present=true;
  }
 catch (  Exception e) {
    m_Present=false;
  }
}

@TargetApi(Build.VERSION_CODES.GINGERBREAD_MR1) private Response<BitmapDrawable> doParse(NetworkResponse response){
  byte[] data=response.data;
  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();
  decodeOptions.inInputShareable=true;
  decodeOptions.inPurgeable=true;
  decodeOptions.inPreferredConfig=mDecodeConfig;
  Bitmap bitmap;
  if (mMaxWidth == 0 && mMaxHeight == 0) {
    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
  }
 else {
    decodeOptions.inJustDecodeBounds=true;
    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    int actualWidth=decodeOptions.outWidth;
    int actualHeight=decodeOptions.outHeight;
    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);
    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);
    decodeOptions.inJustDecodeBounds=false;
    if (Utils.hasGingerbreadMR1()) {
      decodeOptions.inPreferQualityOverSpeed=PREFER_QUALITY_OVER_SPEED;
    }
    decodeOptions.inSampleSize=ImageUtils.findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);
    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);
    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {
      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);
      tempBitmap.recycle();
    }
 else {
      bitmap=tempBitmap;
    }
  }
  if (bitmap == null) {
    return Response.error(new ParseError(response));
  }
 else {
    BitmapDrawable drawable;
    if (Utils.hasHoneycomb()) {
      drawable=new BitmapDrawable(mResources,bitmap);
    }
 else {
      drawable=new RecyclingBitmapDrawable(mResources,bitmap);
    }
    return Response.success(drawable,HttpHeaderParser.parseCacheHeaders(response));
  }
}

public double evaluate(VectorInstance x,double[] y) throws Exception {
  VectorInstance diff=x.subtract(y);
  double result=-m_gamma * diff.dotProduct(diff);
  return Math.exp(result);
}

@Override public int batchSize(){
  return batchSize;
}

public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {
  if (bytes == null) {
    return null;
  }
  ByteArrayOutputStream buffer=new ByteArrayOutputStream();
  for (int i=0; i < bytes.length; i++) {
    int b=bytes[i];
    if (b == '+') {
      buffer.write(' ');
    }
 else     if (b == '%') {
      try {
        int u=Character.digit((char)bytes[++i],16);
        int l=Character.digit((char)bytes[++i],16);
        if (u == -1 || l == -1) {
          throw new DecoderException("Invalid URL encoding");
        }
        buffer.write((char)((u << 4) + l));
      }
 catch (      ArrayIndexOutOfBoundsException e) {
        throw new DecoderException("Invalid URL encoding");
      }
    }
 else {
      buffer.write(b);
    }
  }
  return buffer.toByteArray();
}

public void clear(){
  mAttachedScrap.clear();
  recycleAndClearCachedViews();
}

public void addDataSet(T d){
  if (d == null)   return;
  mYValCount+=d.getEntryCount();
  mYValueSum+=d.getYValueSum();
  if (mDataSets.size() <= 0) {
    mYMax=d.getYMax();
    mYMin=d.getYMin();
    if (d.getAxisDependency() == AxisDependency.LEFT) {
      mLeftAxisMax=d.getYMax();
      mLeftAxisMin=d.getYMin();
    }
 else {
      mRightAxisMax=d.getYMax();
      mRightAxisMin=d.getYMin();
    }
  }
 else {
    if (mYMax < d.getYMax())     mYMax=d.getYMax();
    if (mYMin > d.getYMin())     mYMin=d.getYMin();
    if (d.getAxisDependency() == AxisDependency.LEFT) {
      if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax();
      if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin();
    }
 else {
      if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax();
      if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin();
    }
  }
  mDataSets.add(d);
  handleEmptyAxis(getFirstLeft(),getFirstRight());
}

public void endElement(String elementName) throws SAXException {
  if (m_firstTagNotEmitted) {
    flush();
  }
  m_handler.endElement(elementName);
}

public LibVLC(ArrayList<String> options){
  boolean setAout=true, setChroma=true;
  if (options != null) {
    for (    String option : options) {
      if (option.startsWith("--aout="))       setAout=false;
      if (option.startsWith("--androidwindow-chroma"))       setChroma=false;
      if (!setAout && !setChroma)       break;
    }
  }
  if (setAout || setChroma) {
    if (options == null)     options=new ArrayList<String>();
    if (setAout) {
      final HWDecoderUtil.AudioOutput hwAout=HWDecoderUtil.getAudioOutputFromDevice();
      if (hwAout == HWDecoderUtil.AudioOutput.OPENSLES)       options.add("--aout=opensles");
 else       options.add("--aout=android_audiotrack");
    }
    if (setChroma) {
      options.add("--androidwindow-chroma");
      options.add("RV32");
    }
  }
  nativeNew(options.toArray(new String[options.size()]));
}

public FPSTextureView addChildAt(int location,@NonNull DisplayBase displayBase){
  displayBase.setUp(mFps);
  mDisplayList.add(location,displayBase);
  return this;
}

private double[] pruneEM(Tree tree,NodeRef node,ColourChangeMatrix mm,MetaPopulation mp){
  double[] p=new double[colourCount];
  if (tree.isExternal(node)) {
    p[getColour(node)]=1.0;
  }
 else {
    NodeRef leftChild=tree.getChild(node,0);
    NodeRef rightChild=tree.getChild(node,1);
    double[] left=pruneEM(tree,leftChild,mm,mp);
    double[] right=pruneEM(tree,rightChild,mm,mp);
    double[] leftBranchPartials=pruneBranchEM(mm,left,node,leftChild,tree,mp);
    double[] rightBranchPartials=pruneBranchEM(mm,right,node,rightChild,tree,mp);
    double maxp=0.0;
    for (int i=0; i < colourCount; i++) {
      p[i]=leftBranchPartials[i] * rightBranchPartials[i];
      if (useNodeBias) {
        p[i]*=mm.getEquilibrium(i) / mp.getDemographic(tree.getNodeHeight(node) - tinyTime,i);
      }
      if (p[i] > maxp) {
        maxp=p[i];
      }
    }
    if (maxp < 1.0e-100) {
      for (int i=0; i < colourCount; i++) {
        p[i]*=1.0e+100;
      }
      logNodePartialsRescaling-=Math.log(1.0e+100);
    }
  }
  nodePartials[node.getNumber()]=p;
  if (debugNodePartials) {
    prettyPrint("Node " + node.getNumber() + " pruneEM=",p);
  }
  return p;
}

public static int minPathSum(int[][] grid){
  if (grid == null || grid.length == 0)   return 0;
  int m=grid.length;
  int n=grid[0].length;
  int[] rowSum=new int[n];
  rowSum[0]=grid[0][0];
  for (int col=1; col < n; col++)   rowSum[col]=rowSum[col - 1] + grid[0][col];
  for (int row=1; row < m; row++) {
    rowSum[0]+=grid[row][0];
    for (int col=1; col < n; col++) {
      rowSum[col]=Math.min(rowSum[col - 1],rowSum[col]) + grid[row][col];
    }
  }
  return rowSum[n - 1];
}

private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {
  boolean isValueNumeric=false;
  try {
    if (value.equals("0") || !value.endsWith("0")) {
      Double.parseDouble(value);
      isValueNumeric=true;
    }
  }
 catch (  NumberFormatException e) {
    isValueNumeric=false;
  }
  if (json.charAt(json.length() - 1) != '{') {
    json.append(',');
  }
  json.append(escapeJSON(key));
  json.append(':');
  if (isValueNumeric) {
    json.append(value);
  }
 else {
    json.append(escapeJSON(value));
  }
}

public Time(Date time){
  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");
  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");
  dateF.setTimeZone(tz);
  String d=dateF.format(time) + "Z";
  int year=Integer.parseInt(d.substring(0,4));
  if (year < 1950 || year > 2049) {
    this.time=new DERGeneralizedTime(d);
  }
 else {
    this.time=new DERUTCTime(d.substring(2));
  }
}

public DCheckUpdate(JFrame parent){
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  initComponents();
}

public static Automaton minimizeSimple(Automaton a){
  Set<Integer> initialSet=new HashSet<Integer>();
  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);
  initialSet.clear();
  a=determinizeSimple(Operations.reverse(a,initialSet),initialSet);
  return a;
}

@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  AbstractItem<?,?> that=(AbstractItem<?,?>)o;
  return mIdentifier == that.mIdentifier;
}

public void addColumn(Column column){
  if (column != null) {
    columns.add(column);
  }
}

public static byte[] decode(String str,int flags){
  return decode(str.getBytes(),flags);
}

private boolean checkForNaNs(NumberVector vec){
  for (int i=0, d=vec.getDimensionality(); i < d; i++) {
    double v=vec.doubleValue(i);
    if (v != v) {
      return true;
    }
  }
  return false;
}

public static void fill(StringBuilder strb,int offset){
  while (strb.length() < offset)   strb.append(' ');
}

public void openForWrite() throws EventException {
  File f=new File(ConfigUtils.getInitialPropertyExpanded(m_address.getPathname()));
  try {
    if (!f.exists()) {
      f.createNewFile();
    }
 else {
      LOGGER.info("appending to file=" + m_address.getPathname());
    }
  }
 catch (  IOException ioe) {
    throw new EventException("failed to create file=" + m_address.getPathname() + ", e="+ ioe);
  }
  try {
    m_fos=new FileOutputStream(f,true);
  }
 catch (  FileNotFoundException fnfe) {
    throw new EventException("failed to open file=" + m_address.getPathname() + ", e="+ fnfe);
  }
}

@Override public double calculate_K(int[] x_index,double[] x_att,int[] y_index,double[] y_att){
  return (Math.exp(gamma * norm2(x_index,x_att,y_index,y_att)));
}

@Override public void close() throws IOException {
  Throwable thrown=null;
  try {
    flush();
  }
 catch (  Throwable e) {
    thrown=e;
  }
  try {
    out.close();
  }
 catch (  Throwable e) {
    if (thrown == null) {
      thrown=e;
    }
  }
}

public static void writeFofn(final File destination,final List<File> files) throws IOException {
  final BufferedWriter bw=new BufferedWriter(new FileWriter(destination));
  try {
    for (    final File file : files) {
      bw.write(wrapArg(file.getAbsolutePath()));
      bw.newLine();
    }
    bw.flush();
  }
  finally {
    bw.close();
  }
}

void markInternalClasses(){
  for (int i=mClassDefs.length - 1; i >= 0; i--) {
    mTypeIds[mClassDefs[i].classIdx].internal=true;
  }
  for (int i=0; i < mTypeIds.length; i++) {
    String className=mStrings[mTypeIds[i].descriptorIdx];
    if (className.length() == 1) {
      mTypeIds[i].internal=true;
    }
 else     if (className.charAt(0) == '[') {
      mTypeIds[i].internal=true;
    }
  }
}

public final double cos(){
  return Math.cos(this.radians);
}

public static double ssError(double[] predictedValues,double[] targetAttribute){
  double ret=0;
  for (int i=0; i < predictedValues.length; i++) {
    ret+=Math.pow(targetAttribute[i] - predictedValues[i],2);
  }
  return ret;
}

public int size(){
  return prefixes.size();
}

@Override public Writer append(CharSequence value){
  builder.append(value);
  return this;
}

public static String timestamp(DateTime ts){
  return Long.toString(ts.getMillis() / 1000);
}

public String consume(String name,boolean required) throws ParseException {
  if (name == null) {
    if (content == null && required) {
      throw new ParseException(CoreErrorDomain.ERR.missingRequiredContent);
    }
    contentConsumed=true;
    return content;
  }
  String value=attrs.get(name);
  if (value == null) {
    if (required) {
      ParseException pe=new ParseException(CoreErrorDomain.ERR.missingAttribute);
      pe.setInternalReason("Missing attribute: '" + name + "'");
      throw pe;
    }
    return null;
  }
  attrs.remove(name);
  return value;
}

public int copy(byte[] bytes,int at){
  System.arraycopy(this.bytes,0,bytes,at,this.length);
  return at + this.length;
}

public void importKey(ECKey key){
  lock.lock();
  try {
    checkKeyEncryptionStateMatches(key);
    if (hasKey(key))     return;
    importKeyLocked(key);
    queueOnKeysAdded(ImmutableList.of(key));
  }
  finally {
    lock.unlock();
  }
}

public ConnectionGroupTree(UserContext userContext,ConnectionGroup root,List<ObjectPermission.Type> permissions) throws GuacamoleException {
  this.rootAPIGroup=new APIConnectionGroup(root);
  retrievedGroups.put(root.getIdentifier(),this.rootAPIGroup);
  User self=userContext.self();
  this.connectionPermissions=self.getConnectionPermissions();
  this.sharingProfilePermissions=self.getSharingProfilePermissions();
  this.connectionDirectory=userContext.getConnectionDirectory();
  this.connectionGroupDirectory=userContext.getConnectionGroupDirectory();
  this.sharingProfileDirectory=userContext.getSharingProfileDirectory();
  addConnectionGroupDescendants(Collections.singleton(root),permissions);
}

private boolean containsSingleMetric(BufferedReader reader) throws FormatParseException {
  try {
    reader.mark(1);
    char firstChar=(char)reader.read();
    reader.reset();
    return firstChar == '{';
  }
 catch (  IOException e) {
    throw new FormatParseException("IOException while determining if single or multiple metrics ",e);
  }
}

public void addButtonPressedListener(FieldConfigStringButtonInterface listener){
  if (buttonPressedListenerList == null) {
    buttonPressedListenerList=new ArrayList<FieldConfigStringButtonInterface>();
  }
  buttonPressedListenerList.add(listener);
}

private String separeMetaTagsContent(String content){
  String result=Utils.pregMatch(content,Constants.METATAG_CONTENT_PATTERN,1);
  return htmlDecode(result);
}

@Override public void removeColumns(Column... columns){
  for (  Column c : columns) {
    columnList.remove(c);
  }
}

private void readServiceConfig() throws SSOException, SMSException {
  if (debug.messageEnabled()) {
    debug.message("G11Settings::ReadServiceConfig");
  }
  SSOToken internalToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());
  serviceSchemaManager=new ServiceSchemaManager(G11N_SETTINGS_SERVICE_NAME,internalToken);
  ServiceSchema gsc=serviceSchemaManager.getGlobalSchema();
  rawServiceData=gsc.getAttributeDefaults();
}

public void refreshPreferences(Context context){
  if (mEnabledResId != 0) {
    final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    if (!prefs.getBoolean(context.getString(mEnabledResId),mEnabledDefault)) {
      setTriggerKeys(Collections.<Long>emptySet());
      return;
    }
  }
  setTriggerKeys(KeyComboPreference.getKeyCodesForPreference(context,mAssignedKeysResId));
}

void addInheritedTypes(TypeMirror typeMirror,Types typesUtils){
  if (!CompilerUtils.typeMirrorInCollection(inheritedTypes,typeMirror,typesUtils)) {
    inheritedTypes.add(typeMirror);
  }
}

public static Histogram multiply(Histogram x,double y){
  return x.modifyEventCounters(null);
}

public void paint(Graphics g){
  if (m_from == null || m_to == null)   return;
  Polygon arrow=new Polygon();
  Point from=null;
  Point to=null;
  if (isRightTop()) {
    from=addPoint(arrow,m_from,SwingConstants.RIGHT,true);
    to=addPoint(arrow,m_to,SwingConstants.TOP,false);
  }
 else   if (isBottomTop()) {
    from=addPoint(arrow,m_from,SwingConstants.BOTTOM,true);
    to=addPoint(arrow,m_to,SwingConstants.TOP,false);
  }
 else   if (isTopBottom()) {
    from=addPoint(arrow,m_from,SwingConstants.TOP,true);
    to=addPoint(arrow,m_to,SwingConstants.BOTTOM,false);
  }
 else   if (isLeftRight()) {
    from=addPoint(arrow,m_from,SwingConstants.LEFT,true);
    to=addPoint(arrow,m_to,SwingConstants.RIGHT,false);
  }
 else {
    from=addPoint(arrow,m_from,SwingConstants.RIGHT,true);
    to=addPoint(arrow,m_to,SwingConstants.LEFT,false);
  }
  if (!m_next.isUnconditional()) {
    g.setColor(Color.red);
    g.fillPolygon(arrow);
  }
  if (m_visited)   g.setColor(Color.green);
 else   g.setColor(Color.black);
  g.drawPolygon(arrow);
  if (m_next.isFromSplitAnd()) {
    g.setColor(Color.magenta);
    g.fillOval(from.x - 3,from.y - 3,6,6);
  }
  if (m_next.isToJoinAnd()) {
    g.setColor(Color.magenta);
    g.fillOval(to.x - 3,to.y - 3,6,6);
  }
  if (m_description != null) {
    Graphics2D g2D=(Graphics2D)g;
    Font font=new Font("Dialog",Font.PLAIN,9);
    if (m_next.isUnconditional())     g2D.setColor(Color.black);
 else     g2D.setColor(Color.red);
    TextLayout layout=new TextLayout(m_description,font,g2D.getFontRenderContext());
    int x=0;
    if (from.x < to.x)     x=from.x + ((to.x - from.x) / 2);
 else     x=to.x + ((from.x - to.x) / 2);
    int y=0;
    if (from.y < to.y)     y=from.y + ((to.y - from.y) / 2);
 else     y=to.y + ((from.y - to.y) / 2);
    y-=(layout.getAscent() - 3);
    x-=(layout.getAdvance() / 2);
    if (x < 2)     x=2;
    layout.draw(g2D,x,y);
  }
}

public void addCacheParticipants(Map<UUID,IgniteUuid> allParticipants,Map<UUID,IgniteUuid> addedParticipants){
  verStore.addParticipants(allParticipants,addedParticipants);
}

public static String toJSONString(Map map){
  final StringWriter writer=new StringWriter();
  try {
    writeJSONString(map,writer);
    return writer.toString();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}

public void printContext(PrintStream out){
  out.println(getMessage());
  out.print(context);
}

public int size(){
  return methods.size();
}

private void storeRequestId(String requestId,String key){
  requestIds.put(requestId,key);
}

private void savepostMni(String mnipostLocation,String mnipostRespLocation,List manageNameIdList,com.sun.identity.saml2.jaxb.metadata.ObjectFactory objFact) throws JAXBException {
  if (mnipostLocation != null && mnipostLocation.length() > 0) {
    ManageNameIDServiceElement slsElemPost=objFact.createManageNameIDServiceElement();
    slsElemPost.setBinding(httpPostBinding);
    slsElemPost.setLocation(mnipostLocation);
    slsElemPost.setResponseLocation(mnipostRespLocation);
    manageNameIdList.add(slsElemPost);
  }
}

public static boolean goToUpdatePage(Context context){
  final Uri playStoreUri=Uri.parse("market://details?id=" + context.getPackageName());
  FreshAirLog.i("Attempting to open Play Store update page at URI: " + playStoreUri.toString());
  final Intent playStoreIntent=new Intent(Intent.ACTION_VIEW,playStoreUri);
  final PackageManager packageManager=context.getPackageManager();
  for (  ResolveInfo resolveInfo : packageManager.queryIntentActivities(playStoreIntent,0)) {
    final ActivityInfo resolveActivity=resolveInfo.activityInfo;
    final String resolvePackageName=resolveActivity.packageName;
    if (resolvePackageName.equals("com.android.vending")) {
      FreshAirLog.i("Opening Play Store update page...");
      playStoreIntent.setComponent(new ComponentName(resolvePackageName,resolveActivity.name));
      context.startActivity(playStoreIntent);
      return true;
    }
  }
  FreshAirLog.e("Failed to find the Play Store as a candidate for the resolution of update URI: " + playStoreUri.toString());
  return false;
}

public IJavaElement createElement(ClassScope scope,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){
  return createElement(scope,scope.referenceContext.sourceStart,unit,existingElements,knownScopes);
}

public static List<String> toRelativeFiles(@NotNull VirtualFile root,@NotNull final Collection<VirtualFile> files){
  ArrayList<String> rc=new ArrayList<String>(files.size());
  for (  VirtualFile file : files) {
    rc.add(relativePath(root,file));
  }
  return rc;
}

synchronized static void ensureSecurityManager(){
  if (System.getSecurityManager() == null) {
    System.setSecurityManager(new RMISecurityManager());
  }
}

public static BigDecimal rate(int p_C_CurrencyFrom_ID,int p_C_CurrencyTo_ID,Timestamp p_ConversionDate,int p_C_ConversionType_ID,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException {
  if (p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID)   return Adempiere.ONE;
  Timestamp ConversionDate=p_ConversionDate;
  if (ConversionDate == null)   ConversionDate=new Timestamp(System.currentTimeMillis());
  ConversionDate=Adempiere.trunc(ConversionDate);
  int C_ConversionType_ID=p_C_ConversionType_ID;
  if (C_ConversionType_ID == 0) {
    String sql="SELECT C_ConversionType_ID " + "FROM C_ConversionType " + "WHERE IsDefault='Y'"+ " AND AD_Client_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC";
    C_ConversionType_ID=Adempiere.getSQLValue(sql,p_AD_Client_ID);
  }
  BigDecimal rate=null;
  String sql="SELECT MultiplyRate " + "FROM C_Conversion_Rate " + "WHERE C_Currency_ID=? AND C_Currency_ID_To=?"+ " AND C_ConversionType_ID=?"+ " AND TRUNC(ValidFrom, 'DD') <= ?"+ " AND TRUNC(ValidTo, 'DD') >= ?"+ " AND AD_Client_ID IN (0,?) AND AD_Org_ID IN (0,?) "+ "ORDER BY AD_Client_ID DESC, AD_Org_ID DESC, ValidFrom DESC";
  PreparedStatement pstmt=Adempiere.prepareStatement(sql);
  pstmt.setInt(1,p_C_CurrencyFrom_ID);
  pstmt.setInt(2,p_C_CurrencyTo_ID);
  pstmt.setInt(3,C_ConversionType_ID);
  pstmt.setTimestamp(4,ConversionDate);
  pstmt.setTimestamp(5,ConversionDate);
  pstmt.setInt(6,p_AD_Client_ID);
  pstmt.setInt(7,p_AD_Org_ID);
  ResultSet rs=pstmt.executeQuery();
  if (rs.next()) {
    rate=rs.getBigDecimal(1);
  }
  rs.close();
  pstmt.close();
  if (rate == null)   return null;
  return rate;
}

public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode,final boolean doAuthentication) throws Throwable {
  clientConnection.setDoInput(true);
  clientConnection.setConnectTimeout(TIMEOUT);
  clientConnection.setReadTimeout(TIMEOUT);
  ServerWork server=new ServerWork(serverSocket,responseCode,doAuthentication);
  ClientConnectionWork client=new ClientConnectionWork(clientConnection);
  ExecutorService executorService=Executors.newFixedThreadPool(2);
  try {
    Future<Void> serverFuture=executorService.submit(server);
    Future<Void> clientFuture=executorService.submit(client);
    Throwable t=null;
    try {
      serverFuture.get(30,TimeUnit.SECONDS);
    }
 catch (    ExecutionException e) {
      t=e.getCause();
    }
    try {
      clientFuture.get(30,TimeUnit.SECONDS);
    }
 catch (    ExecutionException e) {
      if (t != null) {
        t.printStackTrace();
      }
      t=e.getCause();
    }
    if (t != null) {
      throw t;
    }
  }
 catch (  ExecutionException e) {
    throw e.getCause();
  }
 finally {
    executorService.shutdown();
  }
  return server.peerSocket;
}

public static SnmpEngineId createEngineId(int port) throws UnknownHostException {
  int suniana=42;
  InetAddress address=null;
  address=InetAddress.getLocalHost();
  return createEngineId(address,port,suniana);
}

public static List<Rule> parseReferential(String path){
  Ruleset ruleset=DelphiRulesUtils.buildRuleSetFromXml(DelphiRulesUtils.getConfigurationFromFile(path));
  List<Rule> rulesRepository=new ArrayList<Rule>();
  for (  DelphiRule fRule : ruleset.getRules()) {
    rulesRepository.add(createRepositoryRule(fRule));
  }
  return rulesRepository;
}

public void dispose(){
  logDebug("Disposing.");
  mSetupDone=false;
  if (mServiceConn != null) {
    logDebug("Unbinding from service.");
    if (mContext != null)     mContext.unbindService(mServiceConn);
  }
  mDisposed=true;
  mContext=null;
  mServiceConn=null;
  mService=null;
  mPurchaseListener=null;
}

public org.w3c.dom.Document encryptAndReplaceWSSElements(org.w3c.dom.Document doc,java.util.Map elmMap,java.lang.String encDataEncAlg,int encDataEncAlgStrength,String certAlias,int kekStrength,java.lang.String tokenType,java.lang.String providerID) throws EncryptionException {
  return null;
}

public void addIssue(int reason,EObject obj,int featureId){
  issues.add(new TransformationIssue(reason,obj,featureId,null));
}

public void insertChild(Node node,int index){
  node.detachFromParent();
  node.parentNode=this;
  try {
    initChildNodes(node);
    childNodes.add(index,node);
  }
 catch (  IndexOutOfBoundsException ignore) {
    throw new LagartoDOMException("Invalid node index: " + index);
  }
  reindexChildren();
}

private static byte[] ntlmHash(final String password) throws AuthenticationException {
  try {
    final byte[] unicodePassword=password.getBytes("UnicodeLittleUnmarked");
    final MD4 md4=new MD4();
    md4.update(unicodePassword);
    return md4.getOutput();
  }
 catch (  UnsupportedEncodingException e) {
    throw new AuthenticationException("Unicode not supported: " + e.getMessage(),e);
  }
}

private boolean betweenZeroAndOne(final String paramName,final double val){
  if ((val < 0) || (val > 1)) {
    JOptionPane.showMessageDialog(null,paramName + "should be between 0 and 1","Warning!",JOptionPane.WARNING_MESSAGE);
    return false;
  }
  return true;
}

public abstract String substituteMacros(String parameterValue,MacroHandler mh) throws UndefinedParameterError ;

public void powEquals(double exp){
  for (int i=0; i < A.length; i++)   for (int j=0; j < A[i].length; j++)   A[i][j]=Math.pow(A[i][j],exp);
}

private static List<String> splitCamelCase(String className){
  String remaining=className;
  List<String> result=new ArrayList<String>();
  while (!remaining.isEmpty()) {
    boolean found=false;
    for (int i=1; i < remaining.length(); i++) {
      if (Character.isUpperCase(remaining.charAt(i))) {
        result.add(remaining.substring(0,i));
        remaining=remaining.substring(i);
        found=true;
        break;
      }
    }
    if (!found) {
      result.add(remaining);
      remaining="";
    }
  }
  return result;
}

public static NodeList selectNodeList(Node doc,String str,NamespaceContext nsctx) throws XPathException {
  XPathFactory xpf=xpathFactoryCache.getInstanceForCurrentThread();
  XPath xpath=xpf.newXPath();
  xpath.setNamespaceContext(nsctx);
  XPathExpression expr=xpath.compile(str);
  return (NodeList)expr.evaluate(doc,XPathConstants.NODESET);
}

public ResultEntry(NondominatedPopulation population,TypedProperties properties){
  this(population,properties == null ? null : properties.getProperties());
}

private void generateDiscovery() throws SAXException {
  handler.startElement("",LOCATORS,LOCATORS,EMPTY);
  generateLocators();
  handler.endElement("",LOCATORS,LOCATORS);
}

protected BasicType(Class<T> type,int sqlType){
  super(type,sqlType);
  checkNull=!type.isPrimitive();
}

@Override public void actionPerformed(ActionEvent e){
}

public void applyProperties(){
  for (  ParameterType type : allParameterTypes) {
    String value=allParameterValues.getProperty(type.getKey());
    ParameterService.setParameterValue(type,value);
  }
}

private void rotateLeft(Node<K,V> root){
  Node<K,V> left=root.left;
  Node<K,V> pivot=root.right;
  Node<K,V> pivotLeft=pivot.left;
  Node<K,V> pivotRight=pivot.right;
  root.right=pivotLeft;
  if (pivotLeft != null) {
    pivotLeft.parent=root;
  }
  replaceInParent(root,pivot);
  pivot.left=root;
  root.parent=pivot;
  root.height=Math.max(left != null ? left.height : 0,pivotLeft != null ? pivotLeft.height : 0) + 1;
  pivot.height=Math.max(root.height,pivotRight != null ? pivotRight.height : 0) + 1;
}

public void add(ClusterNode newNode){
  if (node != null) {
    nodes=new ArrayList<>(2);
    nodes.add(node);
    node=null;
  }
  nodes.add(newNode);
}

public boolean checkIfBackupSetExists(String setName){
  validateNotNullOrEmpty(setName);
  try {
    File file=new File(getBackupRoot(),setName);
    if (file.exists()) {
      return true;
    }
  }
 catch (  Exception e) {
    log.error("Exception during backup set directory exists check");
  }
  return false;
}

public static String[] toQuotedAndCommaSeparatedArray(String str) throws IOException {
  LinkedList<String> values=new LinkedList<String>();
  StreamTokenizer tt=new StreamTokenizer(new StringReader(str));
  tt.wordChars('a','z');
  tt.wordChars('A','Z');
  tt.wordChars(128 + 32,255);
  tt.whitespaceChars(0,' ');
  tt.quoteChar('"');
  tt.quoteChar('\'');
  while (tt.nextToken() != StreamTokenizer.TT_EOF) {
switch (tt.ttype) {
case StreamTokenizer.TT_WORD:
case '"':
case '\'':
      values.add(tt.sval);
    break;
}
}
return values.toArray(new String[values.size()]);
}

public void writeStringNoCompression(String str) throws IOException {
  if (str == null) {
    writeInt(0);
  }
 else {
    writeInt(str.length());
    for (int i=0; i < str.length(); i++)     io.write((byte)str.charAt(i));
  }
}

public SmartThresholds parse(final Resource thresholdFileResource) throws IOException {
  final SmartThresholds holder=new SmartThresholds();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new InputStreamReader(thresholdFileResource.getInputStream()));
    String line;
    while ((line=reader.readLine()) != null) {
      if (line.startsWith("SM")) {
        String[] lineInput=line.split("\\s+");
        holder.addThreshold(new SmartThreshold(lineInput));
      }
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
  return holder;
}

public void shutdown(){
  ExecutorService executor=Executors.newScheduledThreadPool(0);
  executor.submit(createShutdown(0));
}

@Override public Point drawingToView(Point2D.Double p){
  return new Point((int)(p.x * scaleFactor) - translation.x,(int)(p.y * scaleFactor) - translation.y);
}

protected void onConnect(){
}

public void addDescriptor(final SetupDescriptor desc){
  descriptors.add(desc);
}

public static boolean containIP(int cidrPrefix,int cidrMaskBits,int ip){
  boolean matched=true;
  int bitsToShift=32 - cidrMaskBits;
  if (bitsToShift > 0) {
    cidrPrefix=cidrPrefix >> bitsToShift;
    ip=ip >> bitsToShift;
    cidrPrefix=cidrPrefix << bitsToShift;
    ip=ip << bitsToShift;
  }
  if (cidrPrefix != ip) {
    matched=false;
  }
  return matched;
}

public static String compileProgressSuccessAction(String progressSuccessAction) throws TemplateModelException {
  Environment env=CommonFtlUtil.getCurrentEnvironment();
  return compileProgressSuccessAction(progressSuccessAction,ContextFtlUtil.getRequest(env),ContextFtlUtil.getResponse(env));
}

public static String join(String separator,float... elements){
  if (elements == null || elements.length == 0) {
    return "";
  }
  List<Number> list=new ArrayList<Number>(elements.length);
  for (  Float elem : elements) {
    list.add(elem);
  }
  return join(separator,list);
}

public static void putUnsignedByte(ByteBuffer bb,short v){
  bb.put((byte)(v & 0xff));
}

public static int numOfParameters(String desc){
  int n=0;
  int i=1;
  for (; ; ) {
    char c=desc.charAt(i);
    if (c == ')')     break;
    while (c == '[')     c=desc.charAt(++i);
    if (c == 'L') {
      i=desc.indexOf(';',i) + 1;
      if (i <= 0)       throw new IndexOutOfBoundsException("bad descriptor");
    }
 else     ++i;
    ++n;
  }
  return n;
}

@Override public Trie optimize(Trie orig){
  List<CharSequence> cmds=orig.cmds;
  List<Row> rows=new ArrayList<>();
  List<Row> orows=orig.rows;
  int remap[]=new int[orows.size()];
  for (int j=orows.size() - 1; j >= 0; j--) {
    Row now=new Remap(orows.get(j),remap);
    boolean merged=false;
    for (int i=0; i < rows.size(); i++) {
      Row q=merge(now,rows.get(i));
      if (q != null) {
        rows.set(i,q);
        merged=true;
        remap[j]=i;
        break;
      }
    }
    if (merged == false) {
      remap[j]=rows.size();
      rows.add(now);
    }
  }
  int root=remap[orig.root];
  Arrays.fill(remap,-1);
  rows=removeGaps(root,rows,new ArrayList<Row>(),remap);
  return new Trie(orig.forward,remap[root],cmds,rows);
}

public boolean isAllDenied(){
  int count=0;
  for (int i=0; i < mPerms.size(); i++) {
    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_DENIED)     count++;
  }
  return count == mPerms.size();
}

public String toStringKey(){
  String result;
  int i;
  result="<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n" + "   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n";
  for (i=0; i < getColCount(); i++) {
    if (getColHidden(i))     continue;
    result+="   <tr>" + "<td><b>(" + (i + 1) + ")</b></td>"+ "<td>"+ removeFilterName(m_ColNames[i])+ "</td>"+ "</tr>\n";
  }
  result+="</table>\n";
  return result;
}

private DateTimeFormatter toFormatter(Locale locale,ResolverStyle resolverStyle,Chronology chrono){
  Objects.requireNonNull(locale,"locale");
  while (active.parent != null) {
    optionalEnd();
  }
  CompositePrinterParser pp=new CompositePrinterParser(printerParsers,false);
  return new DateTimeFormatter(pp,locale,DecimalStyle.STANDARD,resolverStyle,null,chrono,null);
}

protected void waitForExternalStoreMount() throws Exception {
  String extStorageState=Environment.getExternalStorageState();
  int currentWaitTime=0;
  while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) {
    Log.i(LOG_TAG,"Waiting for SD card...");
    currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,"Timed out waiting for SD Card to be ready!");
    extStorageState=Environment.getExternalStorageState();
  }
}

public final void push(Node value){
  int ff=m_firstFree;
  if ((ff + 1) >= m_mapSize) {
    if (null == m_map) {
      m_map=new Node[m_blocksize];
      m_mapSize=m_blocksize;
    }
 else {
      m_mapSize+=m_blocksize;
      Node newMap[]=new Node[m_mapSize];
      System.arraycopy(m_map,0,newMap,0,ff + 1);
      m_map=newMap;
    }
  }
  m_map[ff]=value;
  ff++;
  m_firstFree=ff;
}

public boolean uploadAndInstallApk(@NotNull IDevice device,@NotNull String packageName,@NotNull File localFile,@NotNull LaunchStatus launchStatus){
  if (!needsInstall(device,localFile,packageName)) {
    return true;
  }
  String remotePath="/data/local/tmp/" + packageName;
  myPrinter.stdout("$ adb push " + localFile + " "+ remotePath);
  try {
    device.pushFile(localFile.getPath(),remotePath);
    boolean installed=installApp(device,remotePath,packageName,launchStatus);
    if (installed) {
      myInstalledApkCache.setInstalled(device,localFile,packageName);
    }
    return installed;
  }
 catch (  Exception e) {
    myPrinter.stderr(e.toString());
    return false;
  }
}

public static ByteArrayList readAsBytes(InputStream is) throws IOException {
  ByteArrayList buf=new ByteArrayList();
  byte[] b=new byte[8192];
  int nread=-1;
  while ((nread=is.read(b)) >= 0) {
    buf.add(b,0,nread);
  }
  return buf;
}

public static int uninstallSilent(Context context,String packageName){
  return uninstallSilent(context,packageName,true);
}

public void open(final long[] list,final int position){
  launchPlayerActivity=true;
synchronized (this) {
    if (mShuffleMode == SHUFFLE_AUTO) {
      mShuffleMode=SHUFFLE_NORMAL;
    }
    final long oldId=getAudioId();
    final int listlength=list.length;
    boolean newlist=true;
    if (mPlayListLen == listlength) {
      newlist=false;
      for (int i=0; i < listlength; i++) {
        if (list[i] != mPlayList[i]) {
          newlist=true;
          break;
        }
      }
    }
    if (newlist) {
      addToPlayList(list,-1);
      notifyChange(QUEUE_CHANGED);
    }
    if (position >= 0) {
      mPlayPos=position;
    }
 else {
      mPlayPos=mShuffler.nextInt(mPlayListLen);
    }
    mHistory.clear();
    openCurrentAndNext();
    if (oldId != getAudioId()) {
      notifyChange(META_CHANGED);
    }
  }
}

public Builder names(final String... names){
  return names(Arrays.asList(names));
}

public void scheduleAtFixedRate(TimerTask task,Date when,long period){
  if (period <= 0 || when.getTime() < 0) {
    throw new IllegalArgumentException();
  }
  long delay=when.getTime() - System.currentTimeMillis();
  scheduleImpl(task,delay,period,true);
}

public void testNegativeReverseStepByOneWithClosure(){
  final List callLog=new ArrayList();
  final Closure closure=new RecordingClosure(callLog);
  final Range range=createRange(5,1);
  range.step(-1,closure);
  assertEquals("wrong number of calls to closure",5,callLog.size());
  final Iterator iter=callLog.iterator();
  for (int i=1; i <= 5; i++) {
    assertEquals("wrong argument passed to closure",createValue(i),iter.next());
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

public static BigDecimal normalizeDecimalValue(BigDecimal bigDecimal,int allowedPrecision){
  if (bigDecimal.precision() > allowedPrecision) {
    return null;
  }
  return bigDecimal;
}

protected static Node deserializeString(String doc){
  try {
    StringReader reader=new StringReader(doc);
    StreamSource source=new StreamSource(reader);
    DOMResult result=new DOMResult();
    TransformerFactory tf=TransformerFactory.newInstance();
    Transformer transformer=tf.newTransformer();
    transformer.setOutputProperty(OutputKeys.ENCODING,DEFAULT_ENCODING);
    transformer.setOutputProperty(OutputKeys.INDENT,DEFAULT_INDENT);
    transformer.transform(source,result);
    return result.getNode();
  }
 catch (  Throwable e) {
    log.log(Level.SEVERE,"Failed to serialize node",e);
  }
  return null;
}

public static String append(final CharSequence url,final Object... params){
  final String baseUrl=url.toString();
  if (params == null || params.length == 0)   return baseUrl;
  if (params.length % 2 != 0)   throw new IllegalArgumentException("Must specify an even number of parameter names/values");
  final StringBuilder result=new StringBuilder(baseUrl);
  addPathSeparator(baseUrl,result);
  addParamPrefix(baseUrl,result);
  Object value;
  result.append(params[0]);
  result.append('=');
  value=params[1];
  if (value != null)   result.append(value);
  for (int i=2; i < params.length; i+=2) {
    result.append('&');
    result.append(params[i]);
    result.append('=');
    value=params[i + 1];
    if (value != null)     result.append(value);
  }
  return result.toString();
}

public void sendEventToAgent(final String event){
synchronized (eventSocket) {
    eventWriter.print(event);
    eventWriter.flush();
  }
}

private void applyJMSObjects(HashMap<String,String> filters){
  StringWriter writer=new StringWriter();
  PrintWriter printWriter=new PrintWriter(writer);
  printWriter.println();
  for (  String str : getQueueList()) {
    printWriter.println("      <queue name=\"" + str + "\"/>");
  }
  for (  String str : getTopicList()) {
    printWriter.println("      <topic name=\"" + str + "\"/>");
  }
  filters.put("${jms-list.settings}",writer.toString());
}

@Override public Revision next(){
  try {
    int revCount, articleID;
    revCount=result.getInt(3);
    articleID=result.getInt(5);
    if (articleID != this.currentArticleID) {
      this.currentRevCounter=0;
      this.currentArticleID=articleID;
    }
    if (revCount - 1 != this.currentRevCounter) {
      logger.error("\nInvalid RevCounter -" + " [ArticleId " + articleID + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "] - Expected: "+ (this.currentRevCounter + 1));
      this.currentRevCounter=revCount;
      this.previousRevision=null;
      return null;
    }
    this.currentRevCounter=revCount;
    this.primaryKey=result.getInt(1);
    Revision revision=new Revision(revCount);
    revision.setPrimaryKey(this.primaryKey);
    if (!shouldLoadRevisionText) {
      String currentRevision;
      Diff diff;
      RevisionDecoder decoder=new RevisionDecoder(config.getCharacterSet());
      if (binaryData) {
        decoder.setInput(result.getBinaryStream(2),true);
      }
 else {
        decoder.setInput(result.getString(2));
      }
      diff=decoder.decode();
      try {
        currentRevision=diff.buildRevision(previousRevision);
      }
 catch (      Exception e) {
        this.previousRevision=null;
        logger.error("Reconstruction failed -" + " [ArticleId " + result.getInt(5) + ", RevisionId "+ result.getInt(4)+ ", RevisionCounter "+ result.getInt(3)+ "]");
        return null;
      }
      previousRevision=currentRevision;
      revision.setRevisionText(currentRevision);
    }
 else {
      if (revApi == null) {
        revApi=new RevisionApi(config);
      }
      revision.setRevisionApi(revApi);
    }
    revision.setRevisionID(result.getInt(4));
    revision.setArticleID(articleID);
    revision.setTimeStamp(new Timestamp(result.getLong(6)));
    revision.setFullRevisionID(result.getInt(7));
    revision.setContributorName(result.getString(8));
    revision.setContributorId(result.getInt(9));
    revision.setComment(result.getString(10));
    revision.setMinor(result.getBoolean(11));
    revision.setContributorIsRegistered(result.getBoolean(12));
    return revision;
  }
 catch (  DecodingException e) {
    throw new RuntimeException(e);
  }
catch (  SQLException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
catch (  WikiApiException e) {
    throw new RuntimeException(e);
  }
}

public void addSelectionColumn(GridField mField){
  log.config(mField.getHeader());
  int displayLength=mField.getDisplayLength();
  if (displayLength <= 0 || displayLength > FIELDLENGTH)   mField.setDisplayLength(FIELDLENGTH);
 else   displayLength=0;
  WEditor editor=null;
  Label label=null;
  Row panel=new Row();
  contentSimpleRows.appendChild(panel);
  if (mField.isRange()) {
    Hbox box=new Hbox();
    editor=WebEditorFactory.getEditor(mField,false);
    label=editor.getLabel();
    editor.setMandatory(false);
    editor.setReadWrite(true);
    editor.dynamicDisplay();
    Component fieldLabel=editor.getComponent();
    box.appendChild(editor.getComponent());
    rangeFirstEditor.add(mField.getColumnName());
    WEditor toRangeEditor=WebEditorFactory.getEditor(mField,false);
    toRangeEditor.setMandatory(false);
    toRangeEditor.setReadWrite(true);
    toRangeEditor.dynamicDisplay();
    m_sEditors2.add(toRangeEditor);
    Label separator=new Label(" - ");
    box.appendChild(separator);
    Component fieldLabel1=toRangeEditor.getComponent();
    box.appendChild(toRangeEditor.getComponent());
    if (displayLength > 0)     mField.setDisplayLength(displayLength);
    if (isTwoColumns) {
      if (!isPair)       panel=new Row();
    }
 else     panel=new Row();
    panel.appendChild(LayoutUtils.makeRightAlign(label));
    panel.appendChild(box);
    fieldLabel.addEventListener(Events.ON_OK,this);
    fieldLabel1.addEventListener(Events.ON_OK,this);
  }
 else {
    editor=WebEditorFactory.getEditor(mField,false);
    label=editor.getLabel();
    editor.setMandatory(false);
    editor.setReadWrite(true);
    editor.dynamicDisplay();
    Component fieldLabel=editor.getComponent();
    if (displayLength > 0)     mField.setDisplayLength(displayLength);
    panel.appendChild(LayoutUtils.makeRightAlign(label));
    panel.appendChild(fieldLabel);
    fieldLabel.addEventListener(Events.ON_OK,this);
    m_sEditors2.add(null);
  }
  m_sEditors.add(editor);
}

public void index(Iterator tuples,String field){
  while (tuples.hasNext()) {
    Tuple t=(Tuple)tuples.next();
    index(t,field);
  }
}

public final static void closeEL(final OutputStream os){
  try {
    if (os != null)     os.close();
  }
 catch (  final Throwable e) {
  }
}

public void addSearchListener(SearchListener l){
  m_SearchListeners.add(l);
}

public boolean isSingleAttributeContainer(){
  return false;
}

public Process executeAsync(final CommandLine command,Map<String,String> environment) throws IOException {
  if (workingDirectory != null && !workingDirectory.exists()) {
    throw new IOException(workingDirectory + " doesn't exist.");
  }
  return executeInternal(command,environment,workingDirectory,streamHandler,null);
}

public CacheSpan touch(){
  long now=System.currentTimeMillis();
  File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now);
  file.renameTo(newCacheFile);
  return CacheSpan.createCacheEntry(key,position,now,newCacheFile);
}

private static char[] zzUnpackCMap(String packed){
  char[] map=new char[0x10000];
  int i=0;
  int j=0;
  while (i < 1788) {
    int count=packed.charAt(i++);
    char value=packed.charAt(i++);
    do     map[j++]=value;
 while (--count > 0);
  }
  return map;
}

public void open(File file) throws IOException {
  checkAWTPermission();
  checkExec();
  checkActionSupport(Action.OPEN);
  checkFileValidation(file);
  peer.open(file);
}

public static String convertISO8601DurationToNormalTime(String isoTime){
  String formattedTime=new String();
  if (isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) {
    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));
    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));
    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));
    formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":"+ formatTo2Digits(seconds);
  }
 else   if (!isoTime.contains("H") && isoTime.contains("M") && isoTime.contains("S")) {
    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));
    String seconds=isoTime.substring(isoTime.indexOf('M') + 1,isoTime.indexOf('S'));
    formattedTime=minutes + ":" + formatTo2Digits(seconds);
  }
 else   if (isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) {
    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));
    String seconds=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('S'));
    formattedTime=hours + ":00:" + formatTo2Digits(seconds);
  }
 else   if (isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) {
    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));
    String minutes=isoTime.substring(isoTime.indexOf('H') + 1,isoTime.indexOf('M'));
    formattedTime=hours + ":" + formatTo2Digits(minutes)+ ":00";
  }
 else   if (!isoTime.contains("H") && !isoTime.contains("M") && isoTime.contains("S")) {
    String seconds=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('S'));
    formattedTime="0:" + formatTo2Digits(seconds);
  }
 else   if (!isoTime.contains("H") && isoTime.contains("M") && !isoTime.contains("S")) {
    String minutes=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('M'));
    formattedTime=minutes + ":00";
  }
 else   if (isoTime.contains("H") && !isoTime.contains("M") && !isoTime.contains("S")) {
    String hours=isoTime.substring(isoTime.indexOf('T') + 1,isoTime.indexOf('H'));
    formattedTime=hours + ":00:00";
  }
  return formattedTime;
}

@Override public void toggleSelection(T photo){
  if (selectedPhotos.contains(photo)) {
    selectedPhotos.remove(photo);
  }
 else {
    selectedPhotos.add(photo);
  }
}

protected void preTick(){
}

public byte map(byte src){
  char c=map((char)src);
  if (c < Byte.MIN_VALUE || c > Byte.MAX_VALUE) {
    return 0;
  }
  return (byte)c;
}

private void translateMatrixAfterRotate(int axis,float trans,float prevImageSize,float imageSize,int prevViewSize,int viewSize,int drawableSize){
  if (imageSize < viewSize) {
    m[axis]=(viewSize - (drawableSize * m[Matrix.MSCALE_X])) * 0.5f;
  }
 else   if (trans > 0) {
    m[axis]=-((imageSize - viewSize) * 0.5f);
  }
 else {
    float percentage=(Math.abs(trans) + (0.5f * prevViewSize)) / prevImageSize;
    m[axis]=-((percentage * imageSize) - (viewSize * 0.5f));
  }
}

public Object produceEvent() throws InvocationTargetException {
  if (!valid) {
    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");
  }
  try {
    return method.invoke(target);
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
catch (  InvocationTargetException e) {
    if (e.getCause() instanceof Error) {
      throw (Error)e.getCause();
    }
    throw e;
  }
}

public String wrapIfKeywordOrBuiltIn(String name){
  if (KEYWORD_BUILT_IN_SET.contains(name)) {
    return name + "_";
  }
  return name;
}

public IssueMatcher add(){
  IssueMatcher issueMatcher=new IssueMatcher();
  issueMatchers.add(issueMatcher);
  return issueMatcher;
}

private <T>InjectScope<T> findScope(AnnotatedElement annElement){
  for (  Annotation ann : annElement.getAnnotations()) {
    Class<? extends Annotation> annType=ann.annotationType();
    if (annType.isAnnotationPresent(Scope.class)) {
      Supplier<InjectScope<T>> scopeGen=(Supplier)_scopeMap.get(annType);
      if (scopeGen != null) {
        return scopeGen.get();
      }
 else {
        log.fine(L.l("@{0} is an unknown scope",annType.getSimpleName()));
      }
    }
  }
  return new InjectScopeFactory<>();
}

private static native int[] RegOpenKey(int hKey,byte[] subKey,int securityMask);

public void removePropertyChangeListener(IPropertyChangeListener listener){
  listeners.remove(listener);
}

@Override public int previous(){
  CharacterIterator text=getText();
  if (current() == text.getBeginIndex()) {
    return BreakIterator.DONE;
  }
  int start=current();
  int lastResult=cachedLastKnownBreak;
  if (lastResult >= start || lastResult <= BreakIterator.DONE) {
    getPrevious();
    lastResult=handlePrevious();
  }
 else {
    text.setIndex(lastResult);
  }
  int result=lastResult;
  while (result != BreakIterator.DONE && result < start) {
    lastResult=result;
    result=handleNext();
  }
  text.setIndex(lastResult);
  cachedLastKnownBreak=lastResult;
  return lastResult;
}

public DeferredImageReplacedElement(ImageResource imageResource,RepaintListener repaintListener,int w,int h){
  this._imageResource=imageResource;
  _loaded=false;
  this.repaintListener=repaintListener;
  if (w == -1 && h == -1) {
    _doScaleImage=false;
    _targetHeight=1;
    _targetWidth=1;
  }
 else {
    _doScaleImage=true;
    _targetHeight=Math.max(1,h);
    _targetWidth=Math.max(1,w);
  }
  _image=ImageUtil.createCompatibleBufferedImage(_targetWidth,_targetHeight);
}

public boolean startsWith(Name n){
  if (n instanceof CompoundName) {
    return (impl.startsWith(n.size(),n.getAll()));
  }
 else {
    return false;
  }
}

public ParameterizedGenericMethodBinding(MethodBinding originalMethod,TypeBinding[] typeArguments,LookupEnvironment environment){
  this.environment=environment;
  this.modifiers=originalMethod.modifiers;
  this.selector=originalMethod.selector;
  this.declaringClass=originalMethod.declaringClass;
  this.typeVariables=Binding.NO_TYPE_VARIABLES;
  this.typeArguments=typeArguments;
  this.isRaw=false;
  this.tagBits=originalMethod.tagBits;
  this.originalMethod=originalMethod;
  this.parameters=Scope.substitute(this,originalMethod.parameters);
  this.returnType=Scope.substitute(this,originalMethod.returnType);
  this.thrownExceptions=Scope.substitute(this,originalMethod.thrownExceptions);
  if (this.thrownExceptions == null)   this.thrownExceptions=Binding.NO_EXCEPTIONS;
  checkMissingType: {
    if ((this.tagBits & TagBits.HasMissingType) != 0)     break checkMissingType;
    if ((this.returnType.tagBits & TagBits.HasMissingType) != 0) {
      this.tagBits|=TagBits.HasMissingType;
      break checkMissingType;
    }
    for (int i=0, max=this.parameters.length; i < max; i++) {
      if ((this.parameters[i].tagBits & TagBits.HasMissingType) != 0) {
        this.tagBits|=TagBits.HasMissingType;
        break checkMissingType;
      }
    }
    for (int i=0, max=this.thrownExceptions.length; i < max; i++) {
      if ((this.thrownExceptions[i].tagBits & TagBits.HasMissingType) != 0) {
        this.tagBits|=TagBits.HasMissingType;
        break checkMissingType;
      }
    }
  }
  this.wasInferred=true;
}

public void testInvokeAll5() throws Throwable {
  ExecutorService e=new ForkJoinPool(1);
  PoolCleaner cleaner=null;
  try {
    cleaner=cleaner(e);
    List<Callable<String>> l=new ArrayList<Callable<String>>();
    l.add(new StringTask());
    l.add(new StringTask());
    List<Future<String>> futures=e.invokeAll(l);
    assertEquals(2,futures.size());
    for (    Future<String> future : futures)     assertSame(TEST_STRING,future.get());
  }
  finally {
    if (cleaner != null) {
      cleaner.close();
    }
  }
}

public InternalListener(final ConfigManager configFile){
  this.configFile=configFile;
}

public byte[] sign(byte[] hash){
  ECDSASigner signer=new ECDSASigner(new HMacDSAKCalculator(new SHA256Digest()));
  signer.init(true,new ECPrivateKeyParameters(priv,domain));
  BigInteger[] signature=signer.generateSignature(hash);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  try {
    DERSequenceGenerator seq=new DERSequenceGenerator(baos);
    seq.addObject(new ASN1Integer(signature[0]));
    seq.addObject(new ASN1Integer(toCanonicalS(signature[1])));
    seq.close();
    return baos.toByteArray();
  }
 catch (  IOException e) {
  }
  return null;
}

public TimePeriod(Date startTime,Date endTime){
  if (startTime != null && endTime != null && !endTime.after(startTime)) {
    throw new IllegalArgumentException("EndTime: " + endTime + " is not after startTime: "+ startTime);
  }
  this.startTime=startTime;
  this.endTime=endTime;
}

JMenu createEditMenu(){
  JMenu editMenu=new JMenu("Edit");
  editMenu.add(actionManager.getCutAction());
  editMenu.add(actionManager.getCopyAction());
  editMenu.add(actionManager.getPasteAction());
  editMenu.add(actionManager.getDeleteAction());
  editMenu.addSeparator();
  editMenu.add(actionManager.getClearSourceNeuronsAction());
  editMenu.add(actionManager.getSetSourceNeuronsAction());
  editMenu.add(actionManager.getConnectionMenu());
  editMenu.add(actionManager.getAddSynapseGroupAction());
  editMenu.addSeparator();
  editMenu.add(actionManager.getRandomizeObjectsAction());
  editMenu.add(actionManager.getShowAdjustSynapsesDialog());
  editMenu.addSeparator();
  editMenu.add(actionManager.getLayoutMenu());
  editMenu.add(actionManager.getGroupMenu());
  editMenu.addSeparator();
  editMenu.add(createAlignMenu());
  editMenu.add(createSpacingMenu());
  editMenu.addSeparator();
  editMenu.add(actionManager.getSetNeuronPropertiesAction());
  editMenu.add(actionManager.getSetSynapsePropertiesAction());
  editMenu.addSeparator();
  editMenu.add(createSelectionMenu());
  return editMenu;
}

public void removeHistoryChangedListener(HistoryChangedListener l){
  m_HistoryChangedListeners.remove(l);
}

public void currentState(long state,Model currentModel){
  currentState=state;
  if (loggers != null) {
    for (    Logger logger : loggers) {
      logger.log(state);
    }
  }
}

public boolean isBOM(){
  return m_isBOM;
}

public boolean isSigned(){
  return signed;
}

public Object parseText(String text){
  if (text == null || text.length() == 0) {
    throw new IllegalArgumentException("The JSON input text should neither be null nor empty.");
  }
  return parse(new LineColumnReader(new StringReader(text)));
}

public int size(){
  return parts.size();
}

protected <T>Database makeSimpleDatabase(String filename,int expectedSize,ListParameterization params,Class<?>[] filters){
  try (InputStream is=open(filename)){
    List<ObjectFilter> filterlist=new ArrayList<>();
    filterlist.add(new FixedDBIDsFilter(1));
    if (filters != null) {
      for (      Class<?> filtercls : filters) {
        ObjectFilter filter=ClassGenericsUtil.parameterizeOrAbort(filtercls,params);
        filterlist.add(filter);
      }
    }
    NumberVectorLabelParser<DoubleVector> parser=new NumberVectorLabelParser<>(DoubleVector.FACTORY);
    InputStreamDatabaseConnection dbc=new InputStreamDatabaseConnection(is,filterlist,parser);
    params.addParameter(AbstractDatabase.Parameterizer.DATABASE_CONNECTION_ID,dbc);
    Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,params);
    testParameterizationOk(params);
    db.initialize();
    Relation<?> rel=db.getRelation(TypeUtil.ANY);
    assertEquals("Database size does not match.",expectedSize,rel.size());
    return db;
  }
 catch (  IOException e) {
    fail("Test data " + filename + " not found.");
    return null;
  }
}

protected void addChooserFilters(JFileChooser chooser){
  javax.swing.filechooser.FileNameExtensionFilter filter;
  chooser.addChoosableFileFilter(filter=new javax.swing.filechooser.FileNameExtensionFilter("Intel Hex Format Firmware (*.hex)","hex"));
  chooser.setFileFilter(filter);
}

public void onStop(){
  if (null != mService) {
    if (null != mContext) {
      mContext.unbindService(mServiceConnection);
    }
    mServiceConnection=null;
    mService=null;
  }
}

public String peek(){
  String result=null;
  if (isEmpty()) {
    return null;
  }
 else {
    int cachedCurrentIndex=currentIndex;
    if (isEatingBlocksOfDelimiters) {
      trimStartingDelimiters();
    }
    int nearestDelimeter=-1;
    for (int i=0; i < delimiters.length(); i++) {
      int delimiter=source.indexOf(delimiters.charAt(i),currentIndex);
      if (nearestDelimeter == -1 || delimiter != -1 && delimiter < nearestDelimeter) {
        nearestDelimeter=delimiter;
      }
    }
    if (nearestDelimeter == -1) {
      result=source.substring(currentIndex);
    }
 else {
      result=source.substring(currentIndex,nearestDelimeter);
    }
    currentIndex=cachedCurrentIndex;
  }
  return result;
}

private void eliminarUsuariosOrgano(GestionOrganizacionBI organizacionBI,OrganizacionVO organizacionVO){
  organizacionBI.eliminarUsuariosOrgano(organizacionVO.getId());
}

private static void addPreviousLayer(List<List<Neuron>> layers,List<Neuron> sourceLayer,List<Neuron> layerToCheck){
  final int MAXLAYERS=100;
  Set<Neuron> newLayerTemp=new HashSet<Neuron>();
  boolean theNextLayerIsTheSourceLayer=false;
  for (  Neuron neuron : layerToCheck) {
    for (    Synapse synapse : neuron.getFanIn()) {
      Neuron sourceNeuron=synapse.getSource();
      if (sourceLayer.contains(sourceNeuron)) {
        theNextLayerIsTheSourceLayer=true;
      }
      if (sourceNeuron == neuron) {
        continue;
      }
      newLayerTemp.add(synapse.getSource());
    }
  }
  if ((theNextLayerIsTheSourceLayer) || (newLayerTemp.size() == 0) || (layers.size() > MAXLAYERS)) {
    layers.add(sourceLayer);
  }
 else {
    List<Neuron> newLayer=new ArrayList<Neuron>(newLayerTemp);
    Collections.sort(newLayer,OrientationComparator.X_ORDER);
    layers.add(newLayer);
    addPreviousLayer(layers,sourceLayer,newLayer);
  }
}

public void testShiftRight2(){
  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=-27;
  byte rBytes[]={12,1,-61,39,-11,-94,-55,106,-40,31,-119,24,-48,0,0,0};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger result=aNumber.shiftRight(number);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=result.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,result.signum());
}

public static void ignorm(double c1[],double c2[],int m,double ng){
  if (ng != 0.0) {
    double k=Math.pow(c1[0],ng);
    for (int i=m; i >= 1; i--)     c2[i]=k * c1[i];
    c2[0]=(k - 1.0) / ng;
  }
 else {
    System.arraycopy(c1,1,c2,1,m - 1);
    c2[0]=Math.log(c1[0]);
  }
}

public static int findNonwhitespaceCharacter(String s,int index){
  int sLength=s.length();
  while (index < sLength && Character.isWhitespace(s.charAt(index))) {
    index++;
  }
  return index;
}

public void readContent() throws IOException {
  if (offset + length > buffer.length) {
    throw new ASN1Exception("Unexpected end of encoding");
  }
  if (in == null) {
    offset+=length;
  }
 else {
    int bytesRead=in.read(buffer,offset,length);
    if (bytesRead != length) {
      int c=bytesRead;
      do {
        if (c < 1 || bytesRead > length) {
          throw new ASN1Exception("Failed to read encoded content");
        }
        c=in.read(buffer,offset + bytesRead,length - bytesRead);
        bytesRead+=c;
      }
 while (bytesRead != length);
    }
    offset+=length;
  }
}

public Primitive(Object value){
  this.value=value;
  type=(value != null) ? Utilities.getPrimitiveType(value.getClass()) : null;
  if (type == null) {
    throw new IllegalArgumentException("value is not a primitive: " + value);
  }
}

public void createCashBasedJournalEntriesAndReversalsForSavingsTax(final Office office,final String currencyCode,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeDebited,final CASH_ACCOUNTS_FOR_SAVINGS accountTypeToBeCredited,final Long savingsProductId,final Long paymentTypeId,final Long savingsId,final String transactionId,final Date transactionDate,final BigDecimal amount,final Boolean isReversal,final List<TaxPaymentDTO> taxDetails){
  for (  TaxPaymentDTO taxPaymentDTO : taxDetails) {
    if (taxPaymentDTO.getAmount() != null) {
      if (taxPaymentDTO.getCreditAccountId() == null) {
        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeCredited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);
      }
 else {
        createCashBasedCreditJournalEntriesAndReversalsForSavings(office,currencyCode,taxPaymentDTO.getCreditAccountId(),savingsId,transactionId,transactionDate,taxPaymentDTO.getAmount(),isReversal);
      }
    }
  }
  createCashBasedDebitJournalEntriesAndReversalsForSavings(office,currencyCode,accountTypeToBeDebited.getValue(),savingsProductId,paymentTypeId,savingsId,transactionId,transactionDate,amount,isReversal);
}

public int read(ByteBuf dst,int dstStart,int dstLength) throws IOException {
  final int remaining=(int)Math.min(this.length - this.position,Integer.MAX_VALUE);
  final int read=Math.min(remaining,dstLength);
  final int bufferPosition=checkOffset(position,read);
  final long srcAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;
  if (dst.hasMemoryAddress()) {
    final long dstAddress=dst.memoryAddress() + dstStart;
    PlatformDependent.copyMemory(srcAddress,dstAddress,read);
  }
 else   if (dst.hasArray()) {
    final byte[] dstArray=dst.array();
    PlatformDependent.copyMemory(srcAddress,dstArray,dstStart,read);
  }
 else {
    throw new IllegalArgumentException("unsupported byte buffer");
  }
  position+=read;
  return read;
}

public static Calendar clearTime(final Calendar self){
  clearTimeCommon(self);
  return self;
}

public double pdf(int k){
  return Math.exp(k * Math.log(this.mean) - Arithmetic.logFactorial(k) - this.mean);
}

public static void appendUnpaddedInteger(StringBuffer buf,long value){
  int intValue=(int)value;
  if (intValue == value) {
    appendUnpaddedInteger(buf,intValue);
  }
 else {
    buf.append(Long.toString(value));
  }
}

private void drawTextElements(Canvas canvas,float textSize,Typeface typeface,ColorStateList textColor,String[] texts,float[] textX,float[] textY,Paint paint,int alpha,boolean showActivated,int activatedDegrees,boolean activatedOnly){
  paint.setTextSize(textSize);
  paint.setTypeface(typeface);
  final float activatedIndex=activatedDegrees / (360.0f / NUM_POSITIONS);
  final int activatedFloor=(int)activatedIndex;
  final int activatedCeil=((int)Math.ceil(activatedIndex)) % NUM_POSITIONS;
  for (int i=0; i < 12; i++) {
    final boolean activated=(activatedFloor == i || activatedCeil == i);
    if (activatedOnly && !activated) {
      continue;
    }
    final int[] stateMask=new int[]{android.R.attr.state_enabled,(showActivated && activated ? android.R.attr.state_selected : 0)};
    final int color=textColor.getColorForState(stateMask,0);
    paint.setColor(color);
    paint.setAlpha(getMultipliedAlpha(color,alpha));
    canvas.drawText(texts[i],textX[i],textY[i],paint);
  }
}

public void testFindSpringActiveDirectoryWithLimit(){
  LdapProxy proxy=getLdapAD();
  List result=null;
  int limit=1;
  try {
    result=proxy.find(getLdapSearchVO("",limit,"cn","nacho",null,LdapScopeConstants.SCOPE_SUBTREE));
  }
 catch (  Exception e) {
  }
  assertNotNull(result);
  if (result != null) {
    assertEquals(limit,result.size());
  }
}

@Override public void handleKey(int virtualKeyCode,int transitionState,char keyChar){
  switchControlKeys(virtualKeyCode,transitionState);
  inputBuffer.add(new GlobalKeyEvent(this,virtualKeyCode,transitionState,keyChar,menuPressed,shiftPressed,controlPressed,extendedKey));
}

public int hashCode(){
  return alignment ^ leader ^ Math.round(position);
}

public static String stripLeadingPeriod(String s){
  if (null != s && s.startsWith("."))   return s.substring(Math.min(1,s.length()),s.length());
  return s;
}

public static boolean isRequiredConfigDirectory(final String directory){
  return requiredConfigDirectories.contains(directory);
}

protected ConnectionStateSSLv3(SSLSessionImpl session){
  try {
    CipherSuite cipherSuite=session.cipherSuite;
    boolean is_exportabe=cipherSuite.isExportable();
    hash_size=cipherSuite.getMACLength();
    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;
    int iv_size=cipherSuite.ivSize;
    block_size=cipherSuite.getBlockSize();
    String algName=cipherSuite.getBulkEncryptionAlgorithm();
    String hashName=cipherSuite.getHashName();
    if (logger != null) {
      logger.println("ConnectionStateSSLv3.create:");
      logger.println("  cipher suite name: " + session.getCipherSuite());
      logger.println("  encryption alg name: " + algName);
      logger.println("  hash alg name: " + hashName);
      logger.println("  hash size: " + hash_size);
      logger.println("  block size: " + block_size);
      logger.println("  IV size:" + iv_size);
      logger.println("  key size: " + key_size);
    }
    byte[] clientRandom=session.clientRandom;
    byte[] serverRandom=session.serverRandom;
    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];
    byte[] seed=new byte[clientRandom.length + serverRandom.length];
    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);
    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);
    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);
    byte[] client_mac_secret=new byte[hash_size];
    byte[] server_mac_secret=new byte[hash_size];
    byte[] client_key=new byte[key_size];
    byte[] server_key=new byte[key_size];
    boolean is_client=!session.isServer;
    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);
    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);
    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);
    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);
    IvParameterSpec clientIV=null;
    IvParameterSpec serverIV=null;
    if (is_exportabe) {
      if (logger != null) {
        logger.println("ConnectionStateSSLv3: is_exportable");
      }
      MessageDigest md5=MessageDigest.getInstance("MD5");
      md5.update(client_key);
      md5.update(clientRandom);
      md5.update(serverRandom);
      client_key=md5.digest();
      md5.update(server_key);
      md5.update(serverRandom);
      md5.update(clientRandom);
      server_key=md5.digest();
      key_size=cipherSuite.expandedKeyMaterial;
      if (block_size != 0) {
        md5.update(clientRandom);
        md5.update(serverRandom);
        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);
        md5.update(serverRandom);
        md5.update(clientRandom);
        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);
      }
    }
 else     if (block_size != 0) {
      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);
      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);
    }
    if (logger != null) {
      logger.println("is exportable: " + is_exportabe);
      logger.println("master_secret");
      logger.print(session.master_secret);
      logger.println("client_random");
      logger.print(clientRandom);
      logger.println("server_random");
      logger.print(serverRandom);
      logger.println("client_mac_secret");
      logger.print(client_mac_secret);
      logger.println("server_mac_secret");
      logger.print(server_mac_secret);
      logger.println("client_key");
      logger.print(client_key,0,key_size);
      logger.println("server_key");
      logger.print(server_key,0,key_size);
      if (clientIV != null) {
        logger.println("client_iv");
        logger.print(clientIV.getIV());
        logger.println("server_iv");
        logger.print(serverIV.getIV());
      }
 else {
        logger.println("no IV.");
      }
    }
    if (algName == null) {
      encCipher=new NullCipher();
      decCipher=new NullCipher();
    }
 else {
      encCipher=Cipher.getInstance(algName);
      decCipher=Cipher.getInstance(algName);
      if (is_client) {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
      }
 else {
        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);
        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);
      }
    }
    messageDigest=MessageDigest.getInstance(hashName);
    if (is_client) {
      mac_write_secret=client_mac_secret;
      mac_read_secret=server_mac_secret;
    }
 else {
      mac_write_secret=server_mac_secret;
      mac_read_secret=client_mac_secret;
    }
    if (hashName.equals("MD5")) {
      pad_1=SSLv3Constants.MD5pad1;
      pad_2=SSLv3Constants.MD5pad2;
    }
 else {
      pad_1=SSLv3Constants.SHApad1;
      pad_2=SSLv3Constants.SHApad2;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));
  }
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=getImageViewWidth(imageView);
  final float viewHeight=getImageViewHeight(imageView);
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

private void cleanUpLabels(){
  int id=0;
  for (Iterator<Label> i=labels.iterator(); i.hasNext(); ) {
    Label label=i.next();
    if (label.isEmpty()) {
      i.remove();
    }
 else {
      label.compact();
      label.id=id++;
    }
  }
}

void zrot(double theta){
  theta*=(pi / 180);
  double ct=Math.cos(theta);
  double st=Math.sin(theta);
  float Nyx=(float)(yx * ct + xx * st);
  float Nyy=(float)(yy * ct + xy * st);
  float Nyz=(float)(yz * ct + xz * st);
  float Nyo=(float)(yo * ct + xo * st);
  float Nxx=(float)(xx * ct - yx * st);
  float Nxy=(float)(xy * ct - yy * st);
  float Nxz=(float)(xz * ct - yz * st);
  float Nxo=(float)(xo * ct - yo * st);
  yo=Nyo;
  yx=Nyx;
  yy=Nyy;
  yz=Nyz;
  xo=Nxo;
  xx=Nxx;
  xy=Nxy;
  xz=Nxz;
}

public static long nanosFromDate(long ms){
  Calendar cal=getCalendar();
  cal.setTimeInMillis(ms);
  return nanosFromCalendar(cal);
}

@Override default CompletableFuture<OptionalLong> maxLong(final ToLongFunction<? super T> fn){
  return CompletableFuture.supplyAsync(null,getExec());
}

protected BalancedWebResource createHttpsClient(final String username,final String password,List<String> hosts) throws NoSuchAlgorithmException {
  return createHttpsClient(username,password,hosts,true);
}

public static char[] createArraySignature(char[] typeSignature,int arrayCount){
  if (arrayCount == 0)   return typeSignature;
  int sigLength=typeSignature.length;
  char[] result=new char[arrayCount + sigLength];
  for (int i=0; i < arrayCount; i++) {
    result[i]=C_ARRAY;
  }
  System.arraycopy(typeSignature,0,result,arrayCount,sigLength);
  return result;
}

public void println() throws IOException {
  writer.write(format.getLineSeparator());
}

protected void increaseBufferSize(int minSize){
  int newLength=buf.length;
  while (newLength < minSize)   newLength*=2;
  double[] newBuf=new double[newLength];
  int avail=currentlyInBuffer();
  System.arraycopy(buf,readPos,newBuf,0,avail);
  buf=newBuf;
  readPos=0;
  writePos=avail;
}

private void handleEnumeratedAttribute(Instances trainInstances) throws Exception {
  Instance instance;
  m_distribution=new Distribution(m_complexityIndex,trainInstances.numClasses());
  Enumeration<Instance> enu=trainInstances.enumerateInstances();
  while (enu.hasMoreElements()) {
    instance=enu.nextElement();
    if (!instance.isMissing(m_attIndex)) {
      m_distribution.add((int)instance.value(m_attIndex),instance);
    }
  }
  if (m_distribution.check(m_minNoObj)) {
    m_numSubsets=m_complexityIndex;
    m_infoGain=infoGainCrit.splitCritValue(m_distribution,m_sumOfWeights);
    m_gainRatio=gainRatioCrit.splitCritValue(m_distribution,m_sumOfWeights,m_infoGain);
  }
}

private boolean isLoadMore(){
  return mNextLoadEnable && pageSize != -1 && mRequestLoadMoreListener != null && mData.size() >= pageSize;
}

private void addWorkerIfNecessary(){
  if (idleWorkers.get() == 0) {
synchronized (workers) {
      if (workers.isEmpty() || (idleWorkers.get() == 0)) {
        addWorker();
      }
    }
  }
}

@Override protected Node removeFromFrontier(){
  Node result=frontier.remove();
  frontierNodeLookup.remove(result.getState());
  explored.add(result.getState());
  updateMetrics(frontier.size());
  return result;
}

public static String encode(byte[] data){
  int start=0;
  int len=data.length;
  StringBuffer buf=new StringBuffer(data.length * 3 / 2);
  int end=len - 3;
  int i=start;
  int n=0;
  while (i <= end) {
    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 0x0ff) << 8) | (((int)data[i + 2]) & 0x0ff);
    buf.append(legalChars[(d >> 18) & 63]);
    buf.append(legalChars[(d >> 12) & 63]);
    buf.append(legalChars[(d >> 6) & 63]);
    buf.append(legalChars[d & 63]);
    i+=3;
    if (n++ >= 14) {
      n=0;
    }
  }
  if (i == start + len - 2) {
    int d=((((int)data[i]) & 0x0ff) << 16) | ((((int)data[i + 1]) & 255) << 8);
    buf.append(legalChars[(d >> 18) & 63]);
    buf.append(legalChars[(d >> 12) & 63]);
    buf.append(legalChars[(d >> 6) & 63]);
    buf.append("=");
  }
 else   if (i == start + len - 1) {
    int d=(((int)data[i]) & 0x0ff) << 16;
    buf.append(legalChars[(d >> 18) & 63]);
    buf.append(legalChars[(d >> 12) & 63]);
    buf.append("==");
  }
  return buf.toString();
}

public static Font createBitmapFont(String name,Image bitmap,int[] cutOffsets,int[] charWidth,String charsets){
  Font f=createBitmapFont(bitmap,cutOffsets,charWidth,charsets);
  bitmapCache.put(name,f);
  return f;
}

static boolean isTenured(MemoryPoolMXBean memoryPoolMXBean){
  if (memoryPoolMXBean.getType() != MemoryType.HEAP) {
    return false;
  }
  String name=memoryPoolMXBean.getName();
  return name.equals("CMS Old Gen") || name.equals("PS Old Gen") || name.equals("G1 Old Gen")|| name.equals("Old Space")|| name.equals("Tenured Gen")|| name.equals("Java heap")|| name.equals("GenPauseless Old Gen")|| (HEAP_POOL != null && name.equals(HEAP_POOL));
}

public String toSimpleString(){
  StringBuffer buffer=new StringBuffer();
  buffer.append("DataSet, label: " + (mLabel == null ? "" : mLabel) + ", entries: "+ mYVals.size()+ "\n");
  return buffer.toString();
}

public static <T>T interpreterOnly(Callable<T> callable) throws Exception {
  return callable.call();
}

public static List<String> tokenize(String arguments,boolean stringify){
  LinkedList<String> argList=new LinkedList<String>();
  StringBuilder currArg=new StringBuilder();
  boolean escaped=false;
  int state=NO_TOKEN_STATE;
  int len=arguments.length();
  for (int i=0; i < len; i++) {
    char c=arguments.charAt(i);
    if (escaped) {
      escaped=false;
      currArg.append(c);
    }
 else {
switch (state) {
case SINGLE_QUOTE_STATE:
        if (c == '\'') {
          state=NORMAL_TOKEN_STATE;
        }
 else {
          currArg.append(c);
        }
      break;
case DOUBLE_QUOTE_STATE:
    if (c == '"') {
      state=NORMAL_TOKEN_STATE;
    }
 else     if (c == '\\') {
      i++;
      char next=arguments.charAt(i);
      if (next == '"' || next == '\\') {
        currArg.append(next);
      }
 else {
        currArg.append(c);
        currArg.append(next);
      }
    }
 else {
      currArg.append(c);
    }
  break;
case NO_TOKEN_STATE:
case NORMAL_TOKEN_STATE:
switch (c) {
case '\\':
  escaped=true;
state=NORMAL_TOKEN_STATE;
break;
case '\'':
state=SINGLE_QUOTE_STATE;
break;
case '"':
state=DOUBLE_QUOTE_STATE;
break;
default :
if (!Character.isWhitespace(c)) {
currArg.append(c);
state=NORMAL_TOKEN_STATE;
}
 else if (state == NORMAL_TOKEN_STATE) {
argList.add(currArg.toString());
currArg=new StringBuilder();
state=NO_TOKEN_STATE;
}
}
break;
default :
throw new IllegalStateException("ArgumentTokenizer state " + state + " is invalid!");
}
}
}
if (escaped) {
currArg.append('\\');
argList.add(currArg.toString());
}
 else if (state != NO_TOKEN_STATE) {
argList.add(currArg.toString());
}
if (stringify) {
for (int i=0; i < argList.size(); i++) {
argList.set(i,"\"" + _escapeQuotesAndBackslashes(argList.get(i)) + "\"");
}
}
return argList;
}

private void addSelectorForProtocol(Properties settings,String protocol,ProtocolDispatchSelector ps){
  String proxy=settings.getProperty(protocol);
  if (proxy != null) {
    FixedProxySelector protocolSelector=ProxyUtil.parseProxySettings(proxy);
    ps.setSelector(protocol,protocolSelector);
  }
}

public void addHeader(String name,String value){
  header.put(name,value);
}

public static void readSkel(BufferedReader reader) throws IOException {
  List<String> lines=new ArrayList<String>();
  StringBuilder section=new StringBuilder();
  String ln;
  while ((ln=reader.readLine()) != null) {
    if (ln.startsWith("---")) {
      lines.add(section.toString());
      section.setLength(0);
    }
 else {
      section.append(ln);
      section.append(NL);
    }
  }
  if (section.length() > 0)   lines.add(section.toString());
  if (lines.size() != size) {
    Out.error(ErrorMessages.WRONG_SKELETON);
    throw new GeneratorException();
  }
  line=new String[size];
  for (int i=0; i < size; i++)   line[i]=lines.get(i);
}

public static Set<String> nonMonogamousSamples(Collection<Family> families){
  final LinkedHashSet<String> ret=new LinkedHashSet<>();
  final HashSet<String> parents=new HashSet<>();
  for (  Family f : families) {
    if (!parents.add(f.getFather())) {
      ret.add(f.getFather());
    }
    if (!parents.add(f.getMother())) {
      ret.add(f.getMother());
    }
  }
  return ret;
}

private void createSceneVao(){
  int vao=glGenVertexArrays();
  int vbo=glGenBuffers();
  glBindVertexArray(vao);
  glBindBuffer(GL_ARRAY_BUFFER,vbo);
  ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6);
  FloatBuffer fv=bb.asFloatBuffer();
  for (int i=0; i < boxes.length; i+=2) {
    DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv);
  }
  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);
  glEnableVertexAttribArray(0);
  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);
  glEnableVertexAttribArray(1);
  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindVertexArray(0);
  this.vaoScene=vao;
}

public boolean contains(File file,String fileContent){
  if (exists(file)) {
    String content=readFileContent(file);
    return content != null && content.equals(fileContent);
  }
  return false;
}

public static boolean[][] loadImage(File file,char offChar) throws FileNotFoundException, RuntimeException {
  ArrayList<String> rows=loadImagePad(file,offChar);
  String s=rows.get(0);
  boolean[][] img=new boolean[rows.size()][s.length()];
  for (int i=0; i < rows.size(); i++) {
    s=rows.get(i);
    for (int j=0; j < s.length(); j++) {
      char c=s.charAt(j);
      if (c == offChar) {
        img[i][j]=false;
      }
 else {
        img[i][j]=true;
      }
    }
  }
  return img;
}

protected void updateReceiptStatusWhenCancelled(final String receiptNumber){
  final List<EgdmCollectedReceipt> egdmCollectedReceipts=demandGenericDAO.getAllEgdmCollectedReceipts(receiptNumber);
  if (egdmCollectedReceipts != null && !egdmCollectedReceipts.isEmpty())   for (  final EgdmCollectedReceipt egDmCollectedReceipt : egdmCollectedReceipts) {
    egDmCollectedReceipt.setStatus(DemandConstants.CANCELLED_RECEIPT);
    egDmCollectedReceipt.setUpdatedTime(new Date());
    egdmCollectedReceiptDAO.update(egDmCollectedReceipt);
  }
}

public void addAnimation(int id,Animation... animations){
  if (mAnimations.get(id) == null) {
    mAnimations.put(id,new ArrayList<Animation>(animations.length));
    if (id != Animation.FULL_PAGE) {
      mAnimatedViews.add(id);
    }
  }
  ArrayList<Animation> anims=mAnimations.get(id);
  Collections.addAll(anims,animations);
}

private void cleanupDiscovery(StorageSystem system){
  try {
    system.setReachableStatus(false);
    _dbClient.persistObject(system);
  }
 catch (  DatabaseException e) {
    _logger.error("discoverStorage failed. Failed to update discovery status to ERROR.",e);
  }
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

@Override public SSLEngineResult wrap(ByteBuffer[] srcs,int offset,int len,ByteBuffer dst) throws SSLException {
  if (engine_was_shutteddown) {
    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);
  }
  if ((srcs == null) || (dst == null)) {
    throw new IllegalStateException("Some of the input parameters are null");
  }
  if (dst.isReadOnly()) {
    throw new ReadOnlyBufferException();
  }
  if (!handshake_started) {
    beginHandshake();
  }
  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();
  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {
    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);
  }
  int capacity=dst.remaining();
  int produced=0;
  if (alertProtocol.hasAlert()) {
    if (capacity < recordProtocol.getRecordSize(2)) {
      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
    }
    byte[] alert_data=alertProtocol.wrap();
    dst.put(alert_data);
    if (alertProtocol.isFatalAlert()) {
      alertProtocol.setProcessed();
      if (session != null) {
        session.invalidate();
      }
      shutdown();
      return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);
    }
 else {
      alertProtocol.setProcessed();
      if (close_notify_was_sent && close_notify_was_received) {
        shutdown();
        return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,alert_data.length);
      }
      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,alert_data.length);
    }
  }
  if (capacity < recordProtocol.getMinRecordSize()) {
    if (logger != null) {
      logger.println("Capacity of the destination(" + capacity + ") < MIN_PACKET_SIZE("+ recordProtocol.getMinRecordSize()+ ")");
    }
    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
  }
  try {
    if (!handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP)) {
      dataStream.setSourceBuffers(srcs,offset,len);
      if ((capacity < SSLRecordProtocol.MAX_SSL_PACKET_SIZE) && (capacity < recordProtocol.getRecordSize(dataStream.available()))) {
        if (logger != null) {
          logger.println("The destination buffer(" + capacity + ") can not take the resulting packet("+ recordProtocol.getRecordSize(dataStream.available())+ ")");
        }
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
      }
      if (remaining_wrapped_data == null) {
        remaining_wrapped_data=recordProtocol.wrap(ContentType.APPLICATION_DATA,dataStream);
      }
      if (capacity < remaining_wrapped_data.length) {
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,dataStream.consumed(),0);
      }
 else {
        dst.put(remaining_wrapped_data);
        produced=remaining_wrapped_data.length;
        remaining_wrapped_data=null;
        return new SSLEngineResult(getEngineStatus(),handshakeStatus,dataStream.consumed(),produced);
      }
    }
 else {
      if (remaining_hsh_data == null) {
        remaining_hsh_data=handshakeProtocol.wrap();
      }
      if (capacity < remaining_hsh_data.length) {
        return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,handshakeStatus,0,0);
      }
 else {
        dst.put(remaining_hsh_data);
        produced=remaining_hsh_data.length;
        remaining_hsh_data=null;
        handshakeStatus=handshakeProtocol.getStatus();
        if (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.FINISHED)) {
          session=recordProtocol.getSession();
        }
      }
      return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),0,produced);
    }
  }
 catch (  AlertException e) {
    alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());
    engine_was_closed=true;
    if (session != null) {
      session.invalidate();
    }
    throw e.getReason();
  }
}

@Override protected void initialize(){
  List<String> words;
  super.initialize();
  m_Words=new HashSet<String>();
  words=read();
  for (  String word : words) {
    if (!word.startsWith("#"))     m_Words.add(word);
  }
}

protected boolean existsInRange(String x,int minLength,int maxLength){
  x=StringUtils.trimToNull(x);
  return x != null && x.length() >= minLength && x.length() <= maxLength;
}

public synchronized void unwatch(String pathName) throws IOException {
  unregisterAll(Paths.get(pathName));
}

public Criteria addProperty(String name,String value,Operator operator){
  properties.add(new PropertyCriteria(name,value,operator));
  return this;
}

public void removeColumn(final String columnName){
  if (columnName == null) {
    return;
  }
  final List<String> cols=Arrays.asList(getInfo().headers);
  final int colIndex=cols.indexOf(columnName);
  removeColumn(colIndex);
}

public static UnManagedProtectionSet checkUnManagedProtectionSetExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {
  List<UnManagedProtectionSet> cgs=CustomQueryUtility.getUnManagedProtectionSetByNativeGuid(dbClient,nativeGuid);
  Iterator<UnManagedProtectionSet> cgsItr=cgs.iterator();
  if (cgsItr.hasNext()) {
    return cgsItr.next();
  }
  return null;
}

public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){
  for (int i=0; i < count; i++) {
    destbytes[count + i]=srcString.getBytes()[i];
  }
}

private void checkQuery(String expRes,String qry) throws Exception {
  assertEquals(0,executeHiveQuery("drop table if exists result"));
  assertEquals(0,executeHiveQuery("create table result " + "row format delimited fields terminated by ' ' " + "stored as textfile "+ "location '/result' as "+ qry));
  IgfsInputStream in=igfs.open(new IgfsPath("/result/000000_0"));
  byte[] buf=new byte[(int)in.length()];
  in.read(buf);
  assertEquals(expRes,new String(buf));
}

public final V updateAndGet(UnaryOperator<V> updateFunction){
  V prev, next;
  do {
    prev=get();
    next=updateFunction.apply(prev);
  }
 while (!compareAndSet(prev,next));
  return next;
}

public void close(){
  stopTimers();
  closed=true;
  window.dispose();
  if (listener != null) {
    listener.notificationRemoved(this);
  }
  if (activityListener != null) {
    ActivityTracker.removeActivityListener(activityListener);
  }
}

protected boolean shouldMove(final ILoadBalancerService loadBalancerService){
  if (loadBalancerService == null)   throw new IllegalArgumentException();
  final boolean highlyUtilizedService;
  try {
    final UUID serviceUUID=resourceManager.getDataServiceUUID();
    highlyUtilizedService=loadBalancerService.isHighlyUtilizedDataService(serviceUUID);
  }
 catch (  Exception ex) {
    log.warn("Could not determine if this data service is highly utilized");
    return false;
  }
  if (!highlyUtilizedService) {
    if (log.isInfoEnabled())     log.info("Service is not highly utilized.");
    return false;
  }
  final ResourceScores resourceScores=resourceManager.getResourceScores();
  final boolean shouldMove=(resourceScores.percentCPUTime >= resourceManager.movePercentCpuTimeThreshold) || (resourceScores.majorPageFaultsPerSec > 20) || (resourceScores.dataDirBytesFree < Bytes.gigabyte * 5)|| (resourceScores.dataDirBytesFree < Bytes.gigabyte * .5);
  return shouldMove;
}

public static PublicKey generatePublicKey(String encodedPublicKey){
  try {
    byte[] decodedKey=Base64.decode(encodedPublicKey);
    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);
    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));
  }
 catch (  NoSuchAlgorithmException e) {
    throw new RuntimeException(e);
  }
catch (  InvalidKeySpecException e) {
    Log.e(TAG,"Invalid key specification.");
    throw new IllegalArgumentException(e);
  }
catch (  Base64DecoderException e) {
    Log.e(TAG,"Base64 decoding failed.");
    throw new IllegalArgumentException(e);
  }
}

private static Object[] convertThrowableMessages(final Object[] args){
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      if (args[i] instanceof Throwable) {
        Throwable t=(Throwable)args[i];
        if (t.getMessage() != null) {
          args[i]=t.getMessage();
        }
      }
    }
  }
  return args;
}

protected void wrapContent(){
  if (!DO_WRAP) {
    return;
  }
  if (mText == null) {
    return;
  }
  Canvas c=new Canvas();
  c.setFont(mFont);
  FontMetrics fm=c.getFontMetrics(mFont);
  String string=getText();
  if (mToUpperCase) {
    string=string.toUpperCase();
  }
  int tw=fm.stringWidth(string) + 2 * (mHorizontalPadding + mHorizontalMargin);
  int th=fm.getMaxAscent() + 2 * fm.getMaxDescent() + 2 * (mVerticalPadding + mVerticalMargin);
  mWidget.setWrapWidth(tw);
  mWidget.setWrapHeight(th);
  if (tw > mWidget.getMinWidth()) {
    mWidget.setMinWidth(tw);
  }
  if (th > mWidget.getMinHeight()) {
    mWidget.setMinHeight(th);
  }
  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
    mWidget.setWidth(tw);
  }
  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.WRAP_CONTENT) {
    mWidget.setHeight(th);
  }
  if (mWidget.getHorizontalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {
    if (mWidget.getWidth() <= mWidget.getMinWidth()) {
      mWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);
    }
  }
  if (mWidget.getVerticalDimensionBehaviour() == ConstraintWidget.DimensionBehaviour.FIXED) {
    if (mWidget.getHeight() <= mWidget.getMinHeight()) {
      mWidget.setVerticalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.WRAP_CONTENT);
    }
  }
  int baseline=fm.getAscent() + fm.getMaxDescent() + mVerticalPadding+ mVerticalMargin;
  mWidget.setBaselineDistance(baseline);
}

public RAFDirectory(Path path,LockFactory lockFactory) throws IOException {
  super(path,lockFactory);
  path.toFile();
}

public static void addMinutesToList(Context context,ArrayList<Integer> values,ArrayList<String> labels,int minutes){
  int index=values.indexOf(minutes);
  if (index != -1) {
    return;
  }
  String label=constructReminderLabel(context,minutes,false);
  int len=values.size();
  for (int i=0; i < len; i++) {
    if (minutes < values.get(i)) {
      values.add(i,minutes);
      labels.add(i,label);
      return;
    }
  }
  values.add(minutes);
  labels.add(len,label);
}

void recomposeVariables(ElemVariable elemVar){
  if (getVariableOrParamComposed(elemVar.getName()) == null) {
    elemVar.setIsTopLevel(true);
    elemVar.setIndex(m_variables.size());
    m_variables.addElement(elemVar);
  }
}

public void propertyChange(PropertyChangeEvent e){
  String propertyName=e.getPropertyName();
  if (propertyName == "visible") {
    if (e.getOldValue() == Boolean.FALSE && e.getNewValue() == Boolean.TRUE) {
      handlePopupIsVisibleEvent(true);
    }
 else     if (e.getOldValue() == Boolean.TRUE && e.getNewValue() == Boolean.FALSE) {
      handlePopupIsVisibleEvent(false);
    }
  }
}

private static int[] maybeSort(int[] values){
  if (!isSorted(values,0,false)) {
    values=values.clone();
    Arrays.sort(values);
  }
  return values;
}

public int executeUpdate(String sql) throws GenericDataSourceException {
  Statement stmt=null;
  try {
    stmt=_connection.createStatement();
    return stmt.executeUpdate(sql);
  }
 catch (  SQLException sqle) {
    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);
  }
 finally {
    if (stmt != null) {
      try {
        stmt.close();
      }
 catch (      SQLException sqle) {
        Debug.logWarning("Unable to close 'statement': " + sqle.getMessage(),module);
      }
    }
  }
}

private void doTextNormal(final PDFPage cmds,final String text){
  final PointF zero=new PointF();
  final Matrix scale=new Matrix();
  Utils.setMatValues(scale,fsize,0,0,fsize * th,0,tr);
  final Matrix at=new Matrix();
  final List<PDFGlyph> l=(List<PDFGlyph>)font.getGlyphs(text);
  for (  final PDFGlyph glyph : l) {
    at.set(cur);
    at.preConcat(scale);
    final PointF advance=glyph.addCommands(cmds,at,tm);
    float advanceX=(advance.x * fsize) + tc;
    if (glyph.getChar() == ' ') {
      advanceX+=tw;
    }
    advanceX*=th;
    cur.preTranslate(advanceX,advance.y);
  }
  final float[] src={zero.x,zero.y};
  final float[] dst=new float[src.length];
  cur.mapPoints(dst,src);
  prevEnd.set(dst[0],dst[1]);
}

public synchronized static void initialize(Connection conn) throws SQLException {
  if (logHadoopIdPatterns != null && logLineagePatterns != null) {
    return;
  }
  loadLineagePatterns(conn);
  loadHadoopIdPatterns(conn);
}

public void addIndices(Collection<IIndex> indices){
  for (Iterator<IIndex> it=indices.iterator(); it.hasNext(); ) {
    addIndex((IIndex)it.next());
  }
}

public static boolean isCookieSecure(){
  return secureCookie;
}

public static List<ObjectModel> loadJsonStream(InputStream input){
  List<ObjectModel> models=new ArrayList<>();
  Reader reader=new InputStreamReader(input);
  ObjectModel[] objectModels=GSON.fromJson(reader,ObjectModel[].class);
  for (  ObjectModel objectModel : objectModels) {
    models.add(objectModel);
  }
  return models;
}

protected MultistepExprHolder createMultistepExprList(Vector paths){
  MultistepExprHolder first=null;
  int n=paths.size();
  for (int i=0; i < n; i++) {
    ExpressionOwner eo=(ExpressionOwner)paths.elementAt(i);
    if (null == eo)     continue;
    LocPathIterator lpi=(LocPathIterator)eo.getExpression();
    int numPaths=countSteps(lpi);
    if (numPaths > 1) {
      if (null == first)       first=new MultistepExprHolder(eo,numPaths,null);
 else       first=first.addInSortedOrder(eo,numPaths);
    }
  }
  if ((null == first) || (first.getLength() <= 1))   return null;
 else   return first;
}

private int addWordlenWeights(Channel chan,int weightIdx){
  int[] weigthsTab=atrac3p_wl_weights[chan.chNum * 3 + weightIdx - 1];
  for (int i=0; i < ctx.numQuantUnits; i++) {
    chan.quWordlen[i]+=weigthsTab[i];
    if (chan.quWordlen[i] < 0 || chan.quWordlen[i] > 7) {
      log.error(String.format("WL index out of range pos=%d, val=%d",i,chan.quWordlen[i]));
      return AT3P_ERROR;
    }
  }
  return 0;
}

public void testUpdate3() throws SQLException {
  DatabaseCreator.fillFKStrictTable(conn);
  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");
  statement.execute("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");
}

final void pruneExceptionalOut(IR ir){
  int n=getNumberOfExceptionalOut();
  if (n > 0) {
    ComputedBBEnum handlers=new ComputedBBEnum(n);
    Enumeration<Instruction> e=forwardRealInstrEnumerator();
    while (e.hasMoreElements()) {
      Instruction x=e.nextElement();
      Enumeration<BasicBlock> bbs=getApplicableExceptionalOut(x);
      while (bbs.hasMoreElements()) {
        BasicBlock bb=bbs.nextElement();
        handlers.addPossiblyDuplicateElement(bb);
      }
    }
    deleteExceptionalOut();
    for (int i=0; handlers.hasMoreElements(); i++) {
      ExceptionHandlerBasicBlock b=(ExceptionHandlerBasicBlock)handlers.nextElement();
      insertOut(b);
    }
  }
  recomputeNormalOut(ir);
}

private Pair<DBIDVar,Double> singleIteration(Relation<V> relationx,Relation<? extends NumberVector> relationy){
  final int dim=RelationUtil.dimensionality(relationx);
  final int dimy=RelationUtil.dimensionality(relationy);
  assert (dim == 2);
  KNNQuery<V> knnQuery=QueryUtil.getKNNQuery(relationx,getDistanceFunction(),k + 1);
  ArrayModifiableDBIDs ids=DBIDUtil.newArray(relationx.getDBIDs());
  ids.sort();
  double[][] X=new double[ids.size()][6];
  double[][] F=new double[ids.size()][ids.size()];
  double[][] Y=new double[ids.size()][dimy];
{
    int i=0;
    for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {
{
        V vec=relationx.get(id);
        double la=vec.doubleValue(0);
        double lo=vec.doubleValue(1);
        X[i][0]=1.0;
        X[i][1]=la;
        X[i][2]=lo;
        X[i][3]=la * lo;
        X[i][4]=la * la;
        X[i][5]=lo * lo;
      }
{
        final NumberVector vecy=relationy.get(id);
        for (int d=0; d < dimy; d++) {
          double idy=vecy.doubleValue(d);
          Y[i][d]=idy;
        }
      }
{
        KNNList neighbors=knnQuery.getKNNForDBID(id,k + 1);
        ModifiableDBIDs neighborhood=DBIDUtil.newArray(neighbors.size());
        for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {
          if (DBIDUtil.equal(id,neighbor)) {
            continue;
          }
          neighborhood.add(neighbor);
        }
        F[i][i]=1.0;
        final int nweight=-1 / neighborhood.size();
        for (DBIDIter iter=neighborhood.iter(); iter.valid(); iter.advance()) {
          int pos=ids.binarySearch(iter);
          assert (pos >= 0);
          F[pos][i]=nweight;
        }
      }
    }
  }
  double[][] common=times(transposeTimesTranspose(X,F),F);
  double[][] b=times(inverse(times(common,X)),times(common,Y));
  double[][] sigmaMat=times(F,minusEquals(times(X,b),times(F,Y)));
  final double sigma_sum_square=normF(sigmaMat) / (relationx.size() - 6 - 1);
  final double norm=1 / Math.sqrt(sigma_sum_square);
  double[][] E=timesEquals(times(F,minus(Y,times(X,b))),norm);
  DBIDVar worstid=DBIDUtil.newVar();
  double worstscore=Double.NEGATIVE_INFINITY;
  int i=0;
  for (DBIDIter id=ids.iter(); id.valid(); id.advance(), i++) {
    double err=squareSum(getRow(E,i));
    if (err > worstscore) {
      worstscore=err;
      worstid.set(id);
    }
  }
  return new Pair<>(worstid,Math.sqrt(worstscore));
}

public final CharSequence yytext(){
  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);
}

private void cleanupMinidumpFile(){
  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {
    Log.w(TAG,"Unable to mark " + mFileToUpload + " as uploaded.");
    if (!mFileToUpload.delete()) {
      Log.w(TAG,"Cannot delete " + mFileToUpload);
    }
  }
}

public String toSpacedString(){
  final String original=toString();
  final StringBuilder builder=new StringBuilder();
  for (int i=0; i < original.length(); i++) {
    if (i > 0 && (i % 4) == 0)     builder.append(' ');
    builder.append(original.charAt(i));
  }
  return builder.toString();
}

private int parseContentType(final byte[] b,final int off) throws ParseException {
  contentTypeVal_=PrimitivesParser.parseByte(b,off);
  if (ContentType.deserialize(contentTypeVal_) == null) {
    throw new BadCiphertextException("Invalid content type in ciphertext.");
  }
  return 1;
}

@Benchmark public void nonCaching(){
  run();
}

public int decode(String data,OutputStream out) throws IOException {
  byte b1, b2, b3, b4;
  int length=0;
  int end=data.length();
  while (end > 0) {
    if (!ignore(data.charAt(end - 1))) {
      break;
    }
    end--;
  }
  int i=0;
  int finish=end - 4;
  i=nextI(data,i,finish);
  while (i < finish) {
    b1=decodingTable[data.charAt(i++)];
    i=nextI(data,i,finish);
    b2=decodingTable[data.charAt(i++)];
    i=nextI(data,i,finish);
    b3=decodingTable[data.charAt(i++)];
    i=nextI(data,i,finish);
    b4=decodingTable[data.charAt(i++)];
    if ((b1 | b2 | b3| b4) < 0) {
      throw new IOException("invalid characters encountered in base64 data");
    }
    out.write((b1 << 2) | (b2 >> 4));
    out.write((b2 << 4) | (b3 >> 2));
    out.write((b3 << 6) | b4);
    length+=3;
    i=nextI(data,i,finish);
  }
  length+=decodeLastBlock(out,data.charAt(end - 4),data.charAt(end - 3),data.charAt(end - 2),data.charAt(end - 1));
  return length;
}

private void rLineTo(float dx,float dy){
  if (isEmpty()) {
    mPath.moveTo(mLastX=0,mLastY=0);
  }
  dx+=mLastX;
  dy+=mLastY;
  mPath.lineTo(mLastX=dx,mLastY=dy);
}

@Override public ConflictResults parseOutput(final String stdout,final String stderr){
  final List<String> contentConflicts=new ArrayList<String>();
  final List<String> renameConflicts=new ArrayList<String>();
  final List<String> bothConflicts=new ArrayList<String>();
  final String[] lines=getLines(stderr);
  for (  final String line : lines) {
    final int index=line.lastIndexOf(":");
    if (index != -1) {
      if (StringUtils.endsWith(line,BOTH_CONFLICTS_SUFFIX)) {
        bothConflicts.add(line.substring(0,index));
      }
 else       if (StringUtils.endsWith(line,RENAME_CONFLICT_SUFFIX)) {
        renameConflicts.add(line.substring(0,index));
      }
 else {
        contentConflicts.add(line.substring(0,index));
      }
    }
  }
  return new ConflictResults(contentConflicts,renameConflicts,bothConflicts);
}

protected void sendStart(final OutputStream out) throws IOException {
  LOG.trace("enter sendStart(OutputStream out)");
  out.write(EXTRA_BYTES);
  out.write(getPartBoundary());
  out.write(CRLF_BYTES);
}

public void addActualQty(BigDecimal add){
  m_actualQty=m_actualQty.add(add);
}

protected static boolean isVowel(final char c){
  final char l=Character.toLowerCase(c);
  return ((l == 'a') || (l == 'e') || (l == 'i')|| (l == 'o')|| (l == 'u'));
}

private byte[] createPreviewBuffer(Size previewSize){
  int bitsPerPixel=ImageFormat.getBitsPerPixel(ImageFormat.NV21);
  long sizeInBits=previewSize.getHeight() * previewSize.getWidth() * bitsPerPixel;
  int bufferSize=(int)Math.ceil(sizeInBits / 8.0d) + 1;
  byte[] byteArray=new byte[bufferSize];
  ByteBuffer buffer=ByteBuffer.wrap(byteArray);
  if (!buffer.hasArray() || (buffer.array() != byteArray)) {
    throw new IllegalStateException("Failed to create valid buffer for camera source.");
  }
  mBytesToByteBuffer.put(byteArray,buffer);
  return byteArray;
}

void submit(ProcessAndDisplayImageTask task){
  initExecutorsIfNeed();
  taskExecutorForCachedImages.execute(task);
}

public static void printStackTrace(SQLException e,PrintWriter pw){
  SQLException next=e;
  while (next != null) {
    next.printStackTrace(pw);
    next=next.getNextException();
    if (next != null) {
      pw.println("Next SQLException:");
    }
  }
}

protected void initializeWorld(){
  Body ground=new SimulationBody();
{
    Convex c=Geometry.createRectangle(100.0,1.0);
    BodyFixture bf=new BodyFixture(c);
    ground.addFixture(bf);
  }
  ground.translate(new Vector2(0.6875,-8.75));
  ground.setMass(MassType.INFINITE);
  world.addBody(ground);
  Body head=new SimulationBody();
{
    Convex c=Geometry.createCircle(0.25);
    BodyFixture bf=new BodyFixture(c);
    head.addFixture(bf);
  }
  head.setMass(MassType.NORMAL);
  world.addBody(head);
  Body torso=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.5,1.0);
    BodyFixture bf=new BodyFixture(c);
    torso.addFixture(bf);
  }
{
    Convex c=Geometry.createRectangle(1.0,0.25);
    c.translate(new Vector2(0.00390625,0.375));
    BodyFixture bf=new BodyFixture(c);
    torso.addFixture(bf);
  }
  torso.translate(new Vector2(0.0234375,-0.8125));
  torso.setMass(MassType.NORMAL);
  world.addBody(torso);
  Body rightHumerus=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.5);
    BodyFixture bf=new BodyFixture(c);
    rightHumerus.addFixture(bf);
  }
  rightHumerus.translate(new Vector2(0.4375,-0.609375));
  rightHumerus.setMass(MassType.NORMAL);
  world.addBody(rightHumerus);
  Body rightUlna=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.4);
    BodyFixture bf=new BodyFixture(c);
    rightUlna.addFixture(bf);
  }
  rightUlna.translate(new Vector2(0.44140625,-0.98828125));
  rightUlna.setMass(MassType.NORMAL);
  world.addBody(rightUlna);
  Body neck=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.15,0.2);
    BodyFixture bf=new BodyFixture(c);
    neck.addFixture(bf);
  }
  neck.translate(new Vector2(0.015625,-0.2734375));
  neck.setMass(MassType.NORMAL);
  world.addBody(neck);
  Body leftHumerus=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.5);
    BodyFixture bf=new BodyFixture(c);
    leftHumerus.addFixture(bf);
  }
  leftHumerus.translate(new Vector2(-0.3828125,-0.609375));
  leftHumerus.setMass(MassType.NORMAL);
  world.addBody(leftHumerus);
  Body leftUlna=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.4);
    BodyFixture bf=new BodyFixture(c);
    leftUlna.addFixture(bf);
  }
  leftUlna.translate(new Vector2(-0.3828125,-0.9765625));
  leftUlna.setMass(MassType.NORMAL);
  world.addBody(leftUlna);
  Body rightFemur=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.75);
    BodyFixture bf=new BodyFixture(c);
    rightFemur.addFixture(bf);
  }
  rightFemur.translate(new Vector2(0.1796875,-1.5703125));
  rightFemur.setMass(MassType.NORMAL);
  world.addBody(rightFemur);
  Body leftFemur=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.75);
    BodyFixture bf=new BodyFixture(c);
    leftFemur.addFixture(bf);
  }
  leftFemur.translate(new Vector2(-0.1328125,-1.5703125));
  leftFemur.setMass(MassType.NORMAL);
  world.addBody(leftFemur);
  Body rightTibia=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.5);
    BodyFixture bf=new BodyFixture(c);
    rightTibia.addFixture(bf);
  }
  rightTibia.translate(new Vector2(0.18359375,-2.11328125));
  rightTibia.setMass(MassType.NORMAL);
  world.addBody(rightTibia);
  Body leftTibia=new SimulationBody();
{
    Convex c=Geometry.createRectangle(0.25,0.5);
    BodyFixture bf=new BodyFixture(c);
    leftTibia.addFixture(bf);
  }
  leftTibia.translate(new Vector2(-0.1328125,-2.1171875));
  leftTibia.setMass(MassType.NORMAL);
  world.addBody(leftTibia);
  RevoluteJoint headToNeck=new RevoluteJoint(head,neck,new Vector2(0.01,-0.2));
  headToNeck.setLimitEnabled(false);
  headToNeck.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  headToNeck.setReferenceAngle(Math.toRadians(0.0));
  headToNeck.setMotorEnabled(false);
  headToNeck.setMotorSpeed(Math.toRadians(0.0));
  headToNeck.setMaximumMotorTorque(0.0);
  headToNeck.setCollisionAllowed(false);
  world.addJoint(headToNeck);
  RevoluteJoint neckToTorso=new RevoluteJoint(neck,torso,new Vector2(0.01,-0.35));
  neckToTorso.setLimitEnabled(false);
  neckToTorso.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  neckToTorso.setReferenceAngle(Math.toRadians(0.0));
  neckToTorso.setMotorEnabled(false);
  neckToTorso.setMotorSpeed(Math.toRadians(0.0));
  neckToTorso.setMaximumMotorTorque(0.0);
  neckToTorso.setCollisionAllowed(false);
  world.addJoint(neckToTorso);
  RevoluteJoint torsoToLeftHumerus=new RevoluteJoint(torso,leftHumerus,new Vector2(-0.4,-0.4));
  torsoToLeftHumerus.setLimitEnabled(false);
  torsoToLeftHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  torsoToLeftHumerus.setReferenceAngle(Math.toRadians(0.0));
  torsoToLeftHumerus.setMotorEnabled(false);
  torsoToLeftHumerus.setMotorSpeed(Math.toRadians(0.0));
  torsoToLeftHumerus.setMaximumMotorTorque(0.0);
  torsoToLeftHumerus.setCollisionAllowed(false);
  world.addJoint(torsoToLeftHumerus);
  RevoluteJoint torsoToRightHumerus=new RevoluteJoint(torso,rightHumerus,new Vector2(0.4,-0.4));
  torsoToRightHumerus.setLimitEnabled(false);
  torsoToRightHumerus.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  torsoToRightHumerus.setReferenceAngle(Math.toRadians(0.0));
  torsoToRightHumerus.setMotorEnabled(false);
  torsoToRightHumerus.setMotorSpeed(Math.toRadians(0.0));
  torsoToRightHumerus.setMaximumMotorTorque(0.0);
  torsoToRightHumerus.setCollisionAllowed(false);
  world.addJoint(torsoToRightHumerus);
  RevoluteJoint rightHumerusToRightUlna=new RevoluteJoint(rightHumerus,rightUlna,new Vector2(0.43,-0.82));
  rightHumerusToRightUlna.setLimitEnabled(false);
  rightHumerusToRightUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  rightHumerusToRightUlna.setReferenceAngle(Math.toRadians(0.0));
  rightHumerusToRightUlna.setMotorEnabled(false);
  rightHumerusToRightUlna.setMotorSpeed(Math.toRadians(0.0));
  rightHumerusToRightUlna.setMaximumMotorTorque(0.0);
  rightHumerusToRightUlna.setCollisionAllowed(false);
  world.addJoint(rightHumerusToRightUlna);
  RevoluteJoint leftHumerusToLeftUlna=new RevoluteJoint(leftHumerus,leftUlna,new Vector2(-0.4,-0.81));
  leftHumerusToLeftUlna.setLimitEnabled(false);
  leftHumerusToLeftUlna.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  leftHumerusToLeftUlna.setReferenceAngle(Math.toRadians(0.0));
  leftHumerusToLeftUlna.setMotorEnabled(false);
  leftHumerusToLeftUlna.setMotorSpeed(Math.toRadians(0.0));
  leftHumerusToLeftUlna.setMaximumMotorTorque(0.0);
  leftHumerusToLeftUlna.setCollisionAllowed(false);
  world.addJoint(leftHumerusToLeftUlna);
  RevoluteJoint torsoToRightFemur=new RevoluteJoint(torso,rightFemur,new Vector2(0.16,-1.25));
  torsoToRightFemur.setLimitEnabled(false);
  torsoToRightFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  torsoToRightFemur.setReferenceAngle(Math.toRadians(0.0));
  torsoToRightFemur.setMotorEnabled(false);
  torsoToRightFemur.setMotorSpeed(Math.toRadians(0.0));
  torsoToRightFemur.setMaximumMotorTorque(0.0);
  torsoToRightFemur.setCollisionAllowed(false);
  world.addJoint(torsoToRightFemur);
  RevoluteJoint torsoToLeftFemur=new RevoluteJoint(torso,leftFemur,new Vector2(-0.13,-1.25));
  torsoToLeftFemur.setLimitEnabled(false);
  torsoToLeftFemur.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  torsoToLeftFemur.setReferenceAngle(Math.toRadians(0.0));
  torsoToLeftFemur.setMotorEnabled(false);
  torsoToLeftFemur.setMotorSpeed(Math.toRadians(0.0));
  torsoToLeftFemur.setMaximumMotorTorque(0.0);
  torsoToLeftFemur.setCollisionAllowed(false);
  world.addJoint(torsoToLeftFemur);
  RevoluteJoint rightFemurToRightTibia=new RevoluteJoint(rightFemur,rightTibia,new Vector2(0.17,-1.9));
  rightFemurToRightTibia.setLimitEnabled(false);
  rightFemurToRightTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  rightFemurToRightTibia.setReferenceAngle(Math.toRadians(0.0));
  rightFemurToRightTibia.setMotorEnabled(false);
  rightFemurToRightTibia.setMotorSpeed(Math.toRadians(0.0));
  rightFemurToRightTibia.setMaximumMotorTorque(0.0);
  rightFemurToRightTibia.setCollisionAllowed(false);
  world.addJoint(rightFemurToRightTibia);
  RevoluteJoint leftFemurToLeftTibia=new RevoluteJoint(leftFemur,leftTibia,new Vector2(-0.14,-1.9));
  leftFemurToLeftTibia.setLimitEnabled(false);
  leftFemurToLeftTibia.setLimits(Math.toRadians(0.0),Math.toRadians(0.0));
  leftFemurToLeftTibia.setReferenceAngle(Math.toRadians(0.0));
  leftFemurToLeftTibia.setMotorEnabled(false);
  leftFemurToLeftTibia.setMotorSpeed(Math.toRadians(0.0));
  leftFemurToLeftTibia.setMaximumMotorTorque(0.0);
  leftFemurToLeftTibia.setCollisionAllowed(false);
  world.addJoint(leftFemurToLeftTibia);
}

public void readData(DataInput din) throws IOException {
  byteCount=din.readByte();
  status=din.readUnsignedShort();
  eventCount=din.readUnsignedShort();
  messageCount=din.readUnsignedShort();
  events=new byte[byteCount - 6];
  if (events.length > 0) {
    din.readFully(events,0,events.length);
  }
}

public E remove(int index){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    Object[] elements=getArray();
    int len=elements.length;
    E oldValue=get(elements,index);
    int numMoved=len - index - 1;
    if (numMoved == 0)     setArray(Arrays.copyOf(elements,len - 1));
 else {
      Object[] newElements=new Object[len - 1];
      System.arraycopy(elements,0,newElements,0,index);
      System.arraycopy(elements,index + 1,newElements,index,numMoved);
      setArray(newElements);
    }
    return oldValue;
  }
  finally {
    lock.unlock();
  }
}

void createEdges(Number[] v){
  graph.addEdge(new Double(Math.random()),v[0],v[1],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[3],v[0],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[0],v[4],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[4],v[5],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[5],v[3],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[2],v[1],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[4],v[1],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[8],v[2],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[3],v[8],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[6],v[7],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[7],v[5],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[0],v[9],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[9],v[8],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[7],v[6],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[6],v[5],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[4],v[2],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[5],v[4],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[4],v[10],EdgeType.DIRECTED);
  graph.addEdge(new Double(Math.random()),v[10],v[4],EdgeType.DIRECTED);
}

@SuppressWarnings("rawtypes") public DataResponse paginateList(Map<String,String> requestParams,PaginateRequest paginateRequest,Object query,String defaultSort,Map properties){
  if (paginateRequest == null) {
    paginateRequest=new PaginateRequest();
  }
  if (paginateRequest.getStart() == null) {
    paginateRequest.setStart(RequestUtil.getInteger(requestParams,"start",0));
  }
  if (paginateRequest.getSize() == null) {
    paginateRequest.setSize(RequestUtil.getInteger(requestParams,"size",10));
  }
  if (paginateRequest.getOrder() == null) {
    paginateRequest.setOrder(requestParams.get("order"));
  }
  if (paginateRequest.getSort() == null) {
    paginateRequest.setSort(requestParams.get("sort"));
  }
  Integer start=paginateRequest.getStart();
  if (start == null || start < 0) {
    start=0;
  }
  Integer size=paginateRequest.getSize();
  if (size == null || size < 0) {
    size=10;
  }
  String sort=paginateRequest.getSort();
  if (sort == null) {
    sort=defaultSort;
  }
  String order=paginateRequest.getOrder();
  if (order == null) {
    order="asc";
  }
  if (sort != null && !properties.isEmpty()) {
    Object qp=properties.get(sort);
    if (qp == null) {
      throw new ActivitiIllegalArgumentException("Value for param 'sort' is not valid, '" + sort + "' is not a valid property");
    }
    if (query instanceof AbstractQuery) {
      AbstractQuery queryObject=(AbstractQuery)query;
      QueryProperty queryProperty=(QueryProperty)qp;
      queryObject.orderBy(queryProperty);
      if (order.equals("asc")) {
        queryObject.asc();
      }
 else       if (order.equals("desc")) {
        queryObject.desc();
      }
 else {
        throw new ActivitiIllegalArgumentException("Value for param 'order' is not valid : '" + order + "', must be 'asc' or 'desc'");
      }
    }
 else     if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) {
      org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query;
      org.activiti.idm.api.QueryProperty queryProperty=(org.activiti.idm.api.QueryProperty)qp;
      queryObject.orderBy(queryProperty);
      if (order.equals("asc")) {
        queryObject.asc();
      }
 else       if (order.equals("desc")) {
        queryObject.desc();
      }
 else {
        throw new ActivitiIllegalArgumentException("Value for param 'order' is not valid : '" + order + "', must be 'asc' or 'desc'");
      }
    }
  }
  DataResponse response=new DataResponse();
  response.setStart(start);
  response.setSort(sort);
  response.setOrder(order);
  if (query instanceof AbstractQuery) {
    AbstractQuery queryObject=(AbstractQuery)query;
    List list=processList(queryObject.listPage(start,size));
    response.setTotal(queryObject.count());
    response.setSize(list.size());
    response.setData(list);
  }
 else   if (query instanceof org.activiti.idm.engine.impl.AbstractQuery) {
    org.activiti.idm.engine.impl.AbstractQuery queryObject=(org.activiti.idm.engine.impl.AbstractQuery)query;
    List list=processList(queryObject.listPage(start,size));
    response.setTotal(queryObject.count());
    response.setSize(list.size());
    response.setData(list);
  }
  return response;
}

private static <T extends Component>T buildRow(final JPanel panel,final String labelText,final String hint,final T component,final boolean isLast){
  component.setPreferredSize(new Dimension(COLORPANEL_WIDTH,COLORPANEL_HEIGHT));
  final JPanel rowPanel=new JPanel(new BorderLayout());
  rowPanel.setBorder(new EmptyBorder(0,2,isLast ? 2 : 0,2));
  rowPanel.add(new JLabel(labelText),BorderLayout.CENTER);
  rowPanel.add(CHintCreator.createHintPanel(component,hint),BorderLayout.EAST);
  panel.add(rowPanel);
  return component;
}

public Builder addTargetElements(Element... additionalTargets){
  for (int i=0; i < additionalTargets.length; i++) {
    targetElements.add(additionalTargets[i]);
  }
  return this;
}

public void curveTo(double x1,double y1,double x2,double y2,double x3,double y3){
  if (size() == 0) {
    throw new IllegalPathStateException("curveTo only allowed when not empty");
  }
  Node lastPoint=get(size() - 1);
  lastPoint.mask|=C2_MASK;
  lastPoint.x[2]=x1;
  lastPoint.y[2]=y1;
  if ((lastPoint.mask & C1C2_MASK) == C1C2_MASK) {
    lastPoint.keepColinear=Math.abs(Geom.angle(lastPoint.x[0],lastPoint.y[0],lastPoint.x[1],lastPoint.y[1]) - Geom.angle(lastPoint.x[2],lastPoint.y[2],lastPoint.x[0],lastPoint.y[0])) < 0.001;
  }
  add(new Node(C1_MASK,x3,y3,x2,y2,x3,y3));
}

public void testDivideRoundUpNeg(){
  String a="-92948782094488478231212478987482988429808779810457634781384756794987";
  int aScale=-24;
  String b="7472334223847623782375469293018787918347987234564568";
  int bScale=13;
  String c="-1.24390557635720517122423359799284E+53";
  int resScale=-21;
  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);
  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);
  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_UP);
  assertEquals("incorrect value",c,result.toString());
  assertEquals("incorrect scale",resScale,result.scale());
}

private void writeMetaBits() throws IOException {
  final byte buf[]=genMetabitsData();
  final long addr=m_metaBitsAddr < 0 ? physicalAddress(m_metaBitsAddr) : ((long)m_metaBitsAddr) << ALLOCATION_SCALEUP;
  if (addr == 0) {
    throw new IllegalStateException("Invalid metabits address: " + m_metaBitsAddr);
  }
  assert addr > 0;
  try {
    if (log.isDebugEnabled())     log.debug("writing metabits at: " + addr);
    m_writeCacheService.write(addr,ByteBuffer.wrap(buf),0,false,m_metaBitsAddr < 0 ? m_metaBitsAddr : 0);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}

private void openCounterDataInputStream() throws DataFallbackException {
  if (dInput == null) {
    if (LOG.isDebugEnabled())     LOG.debug("openDataInputStream() ; Opening the reader for the " + counterFile.getName() + " file");
    try {
      dInput=new BufferedReader(new FileReader(counterFile));
    }
 catch (    IOException e) {
      throw new DataFallbackException(e.getMessage());
    }
  }
}

public CompositePredicate(Predicate p1,Predicate p2){
  m_clauses.add(p1);
  m_clauses.add(p2);
}

public String readNextWord(){
  if (tokenizer.hasMoreTokens()) {
    return tokenizer.nextToken();
  }
 else {
    return null;
  }
}

public static final void toString(StringBuffer output,String str){
  if (str == null) {
    output.append("null");
    return;
  }
  output.append(toString(str));
}

public static boolean testFileExists(String name){
  boolean status;
  if ((testSaveLocationExists()) && (!name.equals(""))) {
    File path=Environment.getExternalStorageDirectory();
    File newPath=constructFilePaths(path.toString(),name);
    status=newPath.exists();
  }
 else {
    status=false;
  }
  return status;
}

@Override public void buildAssociations(Instances data) throws Exception {
  buildAssociations((Object)data);
  return;
}

public void testFloatValueNeg(){
  String a="-1238096483923847.6356789029578E+21";
  BigDecimal aNumber=new BigDecimal(a);
  float result=-1.2380965E36F;
  assertTrue("incorrect value",aNumber.floatValue() == result);
}

public static String replaceFirst(String s,String sub,String with){
  int i=s.indexOf(sub);
  if (i == -1) {
    return s;
  }
  return s.substring(0,i) + with + s.substring(i + sub.length());
}

private LocationHelper(){
}

public void addObject(String s) throws Exception {
  inspect(Class.forName(s));
}

public static Element firstChildElement(Element element,Set<String> childElementNames){
  if (element == null)   return null;
  Node node=element.getFirstChild();
  if (node != null) {
    do {
      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {
        Element childElement=(Element)node;
        return childElement;
      }
    }
 while ((node=node.getNextSibling()) != null);
  }
  return null;
}

public static void main(String[] args) throws Exception {
  final JFrame frame=new HTMLTest(args);
  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  frame.pack();
  frame.setVisible(true);
}

@Override public int hashCode(){
  return rawString.hashCode();
}

public final void testAddAllHelperTextColorsFromArray(){
  int helperTextColor1=Color.BLACK;
  int helperTextColor2=Color.GRAY;
  int[] helperTextColors1=new int[2];
  helperTextColors1[0]=helperTextColor1;
  helperTextColors1[1]=helperTextColor2;
  PasswordEditText passwordEditText=new PasswordEditText(getContext());
  passwordEditText.addAllHelperTextColors(helperTextColors1);
  passwordEditText.addAllHelperTextColors(helperTextColors1);
  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();
  assertEquals(helperTextColors1.length,helperTextColors2.size());
  Iterator<Integer> iterator=helperTextColors2.iterator();
  assertEquals(helperTextColor1,(int)iterator.next());
  assertEquals(helperTextColor2,(int)iterator.next());
}

private void normalize(double[] in){
  double max=0d;
  for (  double d : in) {
    max=Math.max(max,d);
  }
  for (int i=0; i < in.length; i++) {
    in[i]=in[i] / max;
  }
}

public void add(T graphic){
synchronized (mLock) {
    mGraphics.add(graphic);
  }
  postInvalidate();
}

public static boolean writeToFile(String filename,String message,boolean append){
  boolean result;
  BufferedWriter writer;
  try {
    writer=new BufferedWriter(new FileWriter(filename,append));
    writer.write(message);
    writer.newLine();
    writer.flush();
    writer.close();
    result=true;
  }
 catch (  Exception e) {
    result=false;
  }
  return result;
}

public int hashCode(){
  return (9 * colorModel.hashCode()) + (14 * sampleModel.hashCode());
}

static public final float random(float start,float end){
  return start + random.nextFloat() * (end - start);
}

public void writeFile(String name,String mimeType,String fileName,byte[] data) throws IOException {
  if (data == null) {
    throw new IllegalArgumentException("Data cannot be null.");
  }
  if (fileName == null || fileName.isEmpty()) {
    throw new IllegalArgumentException("File name cannot be null or empty.");
  }
  out.writeBytes(PREFIX);
  out.writeBytes(boundary);
  out.writeBytes(NEWLINE);
  out.writeBytes("Content-Disposition: form-data; name=\"" + name + "\"; filename=\""+ fileName+ "\"");
  out.writeBytes(NEWLINE);
  if (mimeType != null) {
    out.writeBytes("Content-Type: " + mimeType);
    out.writeBytes(NEWLINE);
  }
  out.writeBytes(NEWLINE);
  out.write(data,0,data.length);
  out.writeBytes(NEWLINE);
  out.flush();
}

@TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1) private void onConfigurationChanged(Configuration newConfig){
  final Locale newLocale=newConfig.locale;
  if (newLocale.equals(mSystemLocale)) {
    return;
  }
  mSystemLocale=newLocale;
  ensureSupportedLocale();
}

private static Boolean findConvexPolygon(final PlanetModel planetModel,final Edge currentEdge,final GeoCompositePolygon rval,final EdgeBuffer edgeBuffer,final List<GeoPolygon> holes,final GeoPoint testPoint){
  final Set<Edge> includedEdges=new HashSet<>();
  includedEdges.add(currentEdge);
  Edge firstEdge=currentEdge;
  Edge lastEdge=currentEdge;
  while (true) {
    if (firstEdge.startPoint == lastEdge.endPoint) {
      break;
    }
    final Edge newLastEdge=edgeBuffer.getNext(lastEdge);
    if (isWithin(newLastEdge.endPoint,includedEdges)) {
      final SidedPlane returnBoundary;
      if (firstEdge.startPoint != newLastEdge.endPoint) {
        returnBoundary=new SidedPlane(firstEdge.endPoint,firstEdge.startPoint,newLastEdge.endPoint);
      }
 else {
        returnBoundary=null;
      }
      boolean foundPointInside=false;
      final Iterator<Edge> edgeIterator=edgeBuffer.iterator();
      while (edgeIterator.hasNext()) {
        final Edge edge=edgeIterator.next();
        if (!includedEdges.contains(edge) && edge != newLastEdge) {
          if (edge.startPoint != newLastEdge.endPoint) {
            if (isWithin(edge.startPoint,includedEdges,newLastEdge,returnBoundary)) {
              foundPointInside=true;
              break;
            }
          }
          if (edge.endPoint != firstEdge.startPoint) {
            if (isWithin(edge.endPoint,includedEdges,newLastEdge,returnBoundary)) {
              foundPointInside=true;
              break;
            }
          }
        }
      }
      if (!foundPointInside) {
        includedEdges.add(newLastEdge);
        lastEdge=newLastEdge;
        continue;
      }
    }
    break;
  }
  while (true) {
    if (firstEdge.startPoint == lastEdge.endPoint) {
      break;
    }
    final Edge newFirstEdge=edgeBuffer.getPrevious(firstEdge);
    if (isWithin(newFirstEdge.startPoint,includedEdges)) {
      final SidedPlane returnBoundary;
      if (newFirstEdge.startPoint != lastEdge.endPoint) {
        returnBoundary=new SidedPlane(lastEdge.startPoint,lastEdge.endPoint,newFirstEdge.startPoint);
      }
 else {
        returnBoundary=null;
      }
      boolean foundPointInside=false;
      final Iterator<Edge> edgeIterator=edgeBuffer.iterator();
      while (edgeIterator.hasNext()) {
        final Edge edge=edgeIterator.next();
        if (!includedEdges.contains(edge) && edge != newFirstEdge) {
          if (edge.startPoint != lastEdge.endPoint) {
            if (isWithin(edge.startPoint,includedEdges,newFirstEdge,returnBoundary)) {
              foundPointInside=true;
              break;
            }
          }
          if (edge.endPoint != newFirstEdge.startPoint) {
            if (isWithin(edge.endPoint,includedEdges,newFirstEdge,returnBoundary)) {
              foundPointInside=true;
              break;
            }
          }
        }
      }
      if (!foundPointInside) {
        includedEdges.add(newFirstEdge);
        firstEdge=newFirstEdge;
        continue;
      }
    }
    break;
  }
  if (includedEdges.size() < 2) {
    return false;
  }
  final List<GeoPoint> points=new ArrayList<GeoPoint>(includedEdges.size() + 1);
  final BitSet internalEdges=new BitSet(includedEdges.size());
  final boolean returnIsInternal;
  if (firstEdge.startPoint == lastEdge.endPoint) {
    if (includedEdges.size() < 3) {
      return false;
    }
    Edge edge=firstEdge;
    points.add(edge.startPoint);
    int k=0;
    while (true) {
      if (edge == lastEdge) {
        break;
      }
      points.add(edge.endPoint);
      internalEdges.set(k++,edge.isInternal);
      edge=edgeBuffer.getNext(edge);
    }
    returnIsInternal=lastEdge.isInternal;
    for (int i=0; i < points.size(); i++) {
      final GeoPoint start=points.get(i);
      final GeoPoint end=points.get(getLegalIndex(i + 1,points.size()));
      final Plane planeToFind=new Plane(start,end);
      int endPointIndex=-1;
      for (int j=0; j < points.size(); j++) {
        final int index=getLegalIndex(j + i + 2,points.size());
        if (!planeToFind.evaluateIsZero(points.get(index))) {
          endPointIndex=index;
          break;
        }
      }
      if (endPointIndex == -1) {
        return false;
      }
    }
    edgeBuffer.clear();
  }
 else {
    final SidedPlane returnSidedPlane=new SidedPlane(firstEdge.endPoint,false,firstEdge.startPoint,lastEdge.endPoint);
    final Edge returnEdge=new Edge(firstEdge.startPoint,lastEdge.endPoint,returnSidedPlane,true);
    final List<Edge> edges=new ArrayList<Edge>(includedEdges.size());
    returnIsInternal=true;
    Edge edge=firstEdge;
    points.add(edge.startPoint);
    int k=0;
    while (true) {
      points.add(edge.endPoint);
      internalEdges.set(k++,edge.isInternal);
      edges.add(edge);
      if (edge == lastEdge) {
        break;
      }
      edge=edgeBuffer.getNext(edge);
    }
    for (int i=0; i < points.size(); i++) {
      final GeoPoint start=points.get(i);
      final GeoPoint end=points.get(getLegalIndex(i + 1,points.size()));
      final Plane planeToFind=new Plane(start,end);
      int endPointIndex=-1;
      for (int j=0; j < points.size(); j++) {
        final int index=getLegalIndex(j + i + 2,points.size());
        if (!planeToFind.evaluateIsZero(points.get(index))) {
          endPointIndex=index;
          break;
        }
      }
      if (endPointIndex == -1) {
        return false;
      }
    }
    edgeBuffer.replace(edges,returnEdge);
  }
  if (testPoint != null && holes != null && holes.size() > 0) {
    final GeoPolygon testPolygon=new GeoConvexPolygon(planetModel,points,null,internalEdges,returnIsInternal);
    if (testPolygon.isWithin(testPoint)) {
      return null;
    }
  }
  final GeoPolygon realPolygon=new GeoConvexPolygon(planetModel,points,holes,internalEdges,returnIsInternal);
  if (testPoint != null && (holes == null || holes.size() == 0)) {
    if (realPolygon.isWithin(testPoint)) {
      return null;
    }
  }
  rval.addShape(realPolygon);
  return true;
}

public static Keymap fromKey(final String key){
  if (key == null || key.isEmpty()) {
    return null;
  }
  final Keymap searchResult=instances.get(key);
  return searchResult;
}

private static boolean isGMTish(String name){
  if (name.length() < 3) {
    return false;
  }
  char c1=name.charAt(0);
  char c2=name.charAt(1);
  char c3=name.charAt(2);
  if (!((c1 == 'G' || c1 == 'g') && (c2 == 'M' || c2 == 'm') && (c3 == 'T' || c3 == 't')) && !((c1 == 'U' || c1 == 'u') && (c2 == 'T' || c2 == 't') && (c3 == 'C' || c3 == 'c')) && !((c1 == 'U' || c1 == 'u') && (c2 == 'T' || c2 == 't') && (c3 == '1'))) {
    return false;
  }
  if (name.length() == 3) {
    return true;
  }
  String offset=name.substring(3);
  if (offset.startsWith("+")) {
    return offset.equals("+0") || offset.equals("+00") || offset.equals("+00:00");
  }
 else {
    return offset.equals("-0") || offset.equals("-00") || offset.equals("-00:00");
  }
}

private static String massageURI(String uri){
  uri=uri.trim();
  int protocolEnd=uri.indexOf(':');
  if (protocolEnd < 0 || isColonFollowedByPortNumber(uri,protocolEnd)) {
    uri="http://" + uri;
  }
  return uri;
}

public void delete(int key){
  int i=binarySearch(mKeys,0,mSize,key);
  if (i >= 0) {
    System.arraycopy(mKeys,i + 1,mKeys,i,mSize - (i + 1));
    System.arraycopy(mValues,i + 1,mValues,i,mSize - (i + 1));
    mSize--;
  }
}

protected void addWholeMatch(StringBuilder sb,String surface,String analyzed){
  sb.append("<b>");
  sb.append(surface);
  sb.append("</b>");
}

public void start(){
  stopAt=System.currentTimeMillis() + MAX_PROCESSING_TIME;
}

private Object[] singleRow(int row){
  Object[] res=new Object[this.nFields];
  for (int i=0; i < this.nFields; i+=1) {
    if (this.isNull == null || !this.isNull[row * this.nFields + i]) {
      res[i]=ArrayFuncs.newInstance(this.types[i],1);
      System.arraycopy(this.data[i],row,res[i],0,1);
    }
  }
  return res;
}

public static String removeChars(String src,String chars){
  int i=src.length();
  StringBuilder sb=new StringBuilder(i);
  for (int j=0; j < i; j++) {
    char c=src.charAt(j);
    if (chars.indexOf(c) == -1) {
      sb.append(c);
    }
  }
  return sb.toString();
}

private void addAllColumns() throws SQLException {
  DatabaseMetaData metaData=getDatabaseMetaData();
  List<String> columns=new ArrayList<>();
  try (ResultSet rs=metaData.getColumns(null,null,normalizeObjectName(statementModel.getTableName()),null)){
    while (rs.next()) {
      columns.add(quoteObjectName(rs.getString(IDX_COLUMN_NAME)));
    }
  }
   columnNames=columns.toArray(new String[0]);
  addReturningClause();
}

public void loadHamNSpam(Connection conn) throws java.sql.SQLException {
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectHamTokens",true));
    rs=pstmt.executeQuery();
    Map<String,Integer> ham=getHamTokenCounts();
    while (rs.next()) {
      String token=rs.getString(1);
      int count=rs.getInt(2);
      if (count > 1) {
        ham.put(token,count);
      }
    }
    log("Ham tokens count: " + ham.size());
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectSpamTokens",true));
    rs=pstmt.executeQuery();
    Map<String,Integer> spam=getSpamTokenCounts();
    while (rs.next()) {
      String token=rs.getString(1);
      int count=rs.getInt(2);
      if (count > 1) {
        spam.put(token,count);
      }
    }
    log("Spam tokens count: " + spam.size());
    rs.close();
    pstmt.close();
    pstmt=conn.prepareStatement(sqlQueries.getSqlString("selectMessageCounts",true));
    rs=pstmt.executeQuery();
    if (rs.next()) {
      setHamMessageCount(rs.getInt(1));
      setSpamMessageCount(rs.getInt(2));
    }
    rs.close();
    pstmt.close();
  }
  finally {
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      java.sql.SQLException se) {
        log("Failed to close statement after selecting spam tokens.",se);
      }
      rs=null;
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      java.sql.SQLException se) {
        log("Failed to close statement selecting message counts.",se);
      }
      pstmt=null;
    }
  }
}

static private void copyStream(final InputStream content,final OutputStream outstr) throws IOException {
  final byte[] buf=new byte[GZIP_BUFFER];
  while (true) {
    final int rdlen=content.read(buf);
    if (rdlen <= 0) {
      break;
    }
    outstr.write(buf,0,rdlen);
  }
}

public void checkAndSetupStreamsDrawer(){
  setupListViewAdapter();
}

public void testFpTypeOverrideSimple() throws Exception {
  ObjectMapper m=new ObjectMapper();
  m.enable(DeserializationConfig.Feature.USE_BIG_DECIMAL_FOR_FLOATS);
  BigDecimal dec=new BigDecimal("0.1");
  Number result=m.readValue(dec.toString(),Number.class);
  assertEquals(BigDecimal.class,result.getClass());
  assertEquals(dec,result);
  Object value=m.readValue(dec.toString(),Object.class);
  assertEquals(BigDecimal.class,result.getClass());
  assertEquals(dec,value);
}

private com.codename1.ui.Component copyComponent(com.codename1.ui.Component cmp){
  com.codename1.ui.Container cnt=builder.createContainer(res,copiedResourceName);
  com.codename1.ui.Component dest=builder.findByName(cmp.getName(),cnt);
  if (dest != null && dest.getParent() != null) {
    removeComponentSync(dest.getParent(),dest);
  }
  return dest;
}

static double zetastatic(long st,long n,double theta,double initialsum){
  double sum=initialsum;
  for (long i=st; i < n; i++) {
    sum+=1 / (Math.pow(i + 1,theta));
  }
  return sum;
}

@Override public BigDecimal calculateTotalPendingAdvance(final BigDecimal totalAdvancePaid,final Date billDate,final WorkOrderEstimate workOrderEstimate,final Long billId){
  final CChartOfAccounts advanceCOA=contractorAdvanceService.getContractorAdvanceAccountcodeForWOE(workOrderEstimate.getId());
  BigDecimal totalPendingBalance=BigDecimal.ZERO;
  BigDecimal totalAdvanceAdjusted=BigDecimal.ZERO;
  if (advanceCOA != null && totalAdvancePaid != null && totalAdvancePaid.compareTo(BigDecimal.ZERO) > 0) {
    totalAdvanceAdjusted=getTotalAdvanceAdjustedForWOE(billDate,workOrderEstimate.getId(),advanceCOA.getId(),billId);
    if (totalAdvanceAdjusted != null && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0 && totalAdvanceAdjusted.compareTo(BigDecimal.ZERO) > 0)     totalPendingBalance=totalAdvanceAdjusted.subtract(totalAdvanceAdjusted);
 else     totalPendingBalance=totalAdvancePaid;
  }
  return totalPendingBalance;
}

private void loadProfile(String userId,String name){
  final Intent userProfileIntent=new Intent(getActivity(),UserProfileActivity.class);
  userProfileIntent.putExtra(AppConstants.Keys.USER_ID,userId);
  userProfileIntent.putExtra(AppConstants.Keys.USER_NAME,name);
  userProfileIntent.putExtra(AppConstants.Keys.SERVICE_SCREEN_TYPE,AppConstants.ServiceScreenType.PROFILE);
  startActivity(userProfileIntent);
}

private void scrollBy(final int increment){
  index+=increment;
  if (index < 0) {
    index=0;
  }
  if (index >= items.size()) {
    index=items.size() - 1;
  }
  redraw();
}

private static byte[] generateSeed(){
  try {
    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();
    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);
    seedBufferOut.writeLong(System.currentTimeMillis());
    seedBufferOut.writeLong(System.nanoTime());
    seedBufferOut.writeInt(Process.myPid());
    seedBufferOut.writeInt(Process.myUid());
    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);
    seedBufferOut.close();
    return seedBuffer.toByteArray();
  }
 catch (  IOException e) {
    throw new SecurityException("Failed to generate seed",e);
  }
}

public static boolean symbolNeedsQuoting(CharSequence symbol,boolean quoteOperators){
  int length=symbol.length();
  if (length == 0) {
    throw new EmptySymbolException();
  }
  if (!isIdentifierKeyword(symbol)) {
    char c=symbol.charAt(0);
    if (!quoteOperators && isOperatorPart(c)) {
      for (int ii=0; ii < length; ii++) {
        c=symbol.charAt(ii);
        if (!isOperatorPart(c)) {
          return true;
        }
      }
      return false;
    }
 else     if (isIdentifierStart(c)) {
      for (int ii=0; ii < length; ii++) {
        c=symbol.charAt(ii);
        if ((c == '\'' || c < 32 || c > 126) || !isIdentifierPart(c)) {
          return true;
        }
      }
      return false;
    }
  }
  return true;
}

public static long parseCommitCounterFile(final String name,final String ext) throws NumberFormatException {
  if (name == null)   throw new IllegalArgumentException();
  if (ext == null)   throw new IllegalArgumentException();
  final int len=name.length() - ext.length();
  final String fileBaseName=name.substring(0,len);
  final long commitCounter=Long.parseLong(fileBaseName);
  return commitCounter;
}

public static Document loadDocument(File file) throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  DocumentBuilder builder=factory.newDocumentBuilder();
  return builder.parse(file);
}

private Node newFloatingComment(){
  Node c=new Node(Token.EMPTY);
  linkCommentToNode(c);
  return c;
}

public Boolean isHod(final Long assignId){
  final List<HeadOfDepartments> hodList=employeeDepartmentRepository.getAllHodDepartments(assignId);
  return !hodList.isEmpty();
}

public Munger singleLabelMode(String... languages){
  return singleLabelMode(Arrays.asList(languages));
}

public StatValue[] matchSpec(StatSpec spec){
  if (spec.getCombineType() == StatSpec.GLOBAL) {
    StatValue[] allValues=matchSpec(new RawStatSpec(spec));
    if (allValues.length == 0) {
      return allValues;
    }
 else {
      ComboValue cv=new ComboValue(allValues);
      return new StatValue[]{cv};
    }
  }
 else {
    List l=new ArrayList();
    StatArchiveReader.StatArchiveFile[] archives=getArchives();
    for (int i=0; i < archives.length; i++) {
      StatArchiveFile f=archives[i];
      if (spec.archiveMatches(f.getFile())) {
        f.matchSpec(spec,l);
      }
    }
    StatValue[] result=new StatValue[l.size()];
    return (StatValue[])l.toArray(result);
  }
}

private void assignClusterNums(int[] cl_num) throws Exception {
  if (m_children != null && m_children.size() < 2) {
    throw new Exception("assignClusterNums: tree not built correctly!");
  }
  m_clusterNum=cl_num[0];
  cl_num[0]++;
  if (m_children != null) {
    for (int i=0; i < m_children.size(); i++) {
      CNode child=m_children.get(i);
      child.assignClusterNums(cl_num);
    }
  }
}

protected void closeSubpath(){
  mPSStream.println(CLOSEPATH_STR);
  mPenX=mStartPathX;
  mPenY=mStartPathY;
}

public TvShowEpisodeScrapeTask(List<TvShowEpisode> episodes,MediaScraper mediaScraper){
  super(BUNDLE.getString("tvshow.scraping"),episodes.size(),TaskType.BACKGROUND_TASK);
  this.episodes=episodes;
  this.mediaScraper=mediaScraper;
  this.scrapeThumb=true;
}

public void saveSelection(IMiniTable miniTable){
  log.info("");
  ArrayList<Integer> results=new ArrayList<Integer>();
  setSelection(null);
  int rows=miniTable.getRowCount();
  for (int i=0; i < rows; i++) {
    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);
    if (id != null && id.isSelected())     results.add(id.getRecord_ID());
  }
  if (results.size() == 0)   return;
  log.config("Selected #" + results.size());
  setSelection(results);
}

public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description){
  this(notifTypes,name,description,null);
}

public void cleanBuildTask(long id) throws NotFoundException {
  FutureBuildTask task=tasks.remove(id);
  if (task == null) {
    throw new NotFoundException(String.format("Invalid build task id: %d",id));
  }
  task.cancel(true);
  cleanup(task);
}

public static File createTempDir(File parent){
  File temp=new File(parent,Integer.toString(Math.abs(UNSEEDED_RANDOM.nextInt()) % 1000000));
  temp.delete();
  temp.mkdir();
  temp.deleteOnExit();
  return temp;
}

public String toURI(){
  CharArrayBuffer buffer=new CharArrayBuffer(32);
  buffer.append(this.schemeName);
  buffer.append("://");
  buffer.append(this.hostname);
  if (this.port != -1) {
    buffer.append(':');
    buffer.append(Integer.toString(this.port));
  }
  return buffer.toString();
}

public void moveTo(final int lonCenter,final int latCenter){
  double mLatCenter=GeoMath.latE7ToMercator(latCenter);
  double mTop=GeoMath.latE7ToMercator(top);
  int newBottom=GeoMath.mercatorToLatE7(mLatCenter - (mTop - bottomMercator) / 2);
  try {
    translate((lonCenter - left - (int)(width / 2L)),newBottom - bottom);
  }
 catch (  OsmException e) {
    e.printStackTrace();
  }
}

public void sendEvent(final String name,final Map<String,String> properties){
  final String eventName=String.format(TfsTelemetryConstants.PLUGIN_ACTION_EVENT_NAME_FORMAT,name);
  final PropertyMapBuilder builder=new PropertyMapBuilder(properties);
  logger.debug(String.format("sendEvent(%s, %s)",name,builder.toString()));
  if (telemetryClient != null) {
    telemetryClient.trackEvent(eventName,builder.build(),null);
  }
}

public void handleHeaderColumnPressed(Point p){
  JTableHeader th=TABLE.getTableHeader();
  int col=th.columnAtPoint(p);
  int c=TABLE.convertColumnIndexToModel(col);
  if (c != -1) {
    TABLE.setPressedColumnIndex(c);
    th.repaint(th.getHeaderRect(col));
  }
}

private static List<FixedRecord> createFixedRecords(int count){
  List<FixedRecord> records=new ArrayList<>();
  for (int i=0; i < count; i++) {
    records.add(new FixedRecord(i));
  }
  return records;
}

public TrackedEntityInstanceQueryParams addAttributesIfNotExist(List<QueryItem> attrs){
  for (  QueryItem attr : attrs) {
    if (attributes != null && !attributes.contains(attr)) {
      attributes.add(attr);
    }
  }
  return this;
}

void recomposeAttributeSets(ElemAttributeSet attrSet){
  ArrayList attrSetList=(ArrayList)m_attrSets.get(attrSet.getName());
  if (null == attrSetList) {
    attrSetList=new ArrayList();
    m_attrSets.put(attrSet.getName(),attrSetList);
  }
  attrSetList.add(attrSet);
}

public static List split(String str,String regex){
  return (Arrays.asList(str.split(regex)));
}

protected final void deleteDBFFDCFiles(String directoryToDelete) throws AdeException {
  try {
    final File dirToDelete=new File(directoryToDelete);
    String[] fileList=dirToDelete.list();
    if (fileList.length == 0) {
      dirToDelete.delete();
    }
 else {
      for (int i=0; i < fileList.length; i++) {
        final File f=new File(dirToDelete,fileList[i]);
        if (f.isDirectory()) {
          final String filePath=f.getPath();
          deleteDBFFDCFiles(filePath);
          continue;
        }
        f.delete();
      }
      fileList=dirToDelete.list();
      if (fileList.length == 0) {
        dirToDelete.delete();
      }
    }
  }
 catch (  Exception e) {
    throw new AdeInternalException("Failed to delete the backed-up Ade DB directory",e);
  }
}

Node<K,V> findLast(){
  Index<K,V> q=head;
  for (; ; ) {
    Index<K,V> d, r;
    if ((r=q.right) != null) {
      if (r.indexesDeletedNode()) {
        q.unlink(r);
        q=head;
      }
 else       q=r;
    }
 else     if ((d=q.down) != null) {
      q=d;
    }
 else {
      Node<K,V> b=q.node;
      Node<K,V> n=b.next;
      for (; ; ) {
        if (n == null)         return b.isBaseHeader() ? null : b;
        Node<K,V> f=n.next;
        if (n != b.next)         break;
        Object v=n.value;
        if (v == null) {
          n.helpDelete(b,f);
          break;
        }
        if (v == n || b.value == null)         break;
        b=n;
        n=f;
      }
      q=head;
    }
  }
}

public void appendToNalUnit(byte[] data,int offset,int limit){
  if (!isFilling) {
    return;
  }
  int readLength=limit - offset;
  if (nalData.length < nalLength + readLength) {
    nalData=Arrays.copyOf(nalData,(nalLength + readLength) * 2);
  }
  System.arraycopy(data,offset,nalData,nalLength,readLength);
  nalLength+=readLength;
}

public static long sizeOfDirectory(File directory){
  checkDirectory(directory);
  final File[] files=directory.listFiles();
  if (files == null) {
    return 0L;
  }
  long size=0;
  for (  final File file : files) {
    try {
      if (!isSymlink(file)) {
        size+=sizeOf(file);
        if (size < 0) {
          break;
        }
      }
    }
 catch (    IOException ioe) {
    }
  }
  return size;
}

public synchronized void panAbs(double dx,double dy){
  damageReport();
  m_transform.translate(dx,dy);
  try {
    m_itransform=m_transform.createInverse();
  }
 catch (  Exception e) {
  }
}

public static void checkSerializedEquality(Object object){
  Object object2=serializeAndRecover(object);
  Assert.assertEquals("Equals check",object,object2);
  Assert.assertEquals("HashCode check",object.hashCode(),object2.hashCode());
}

public String documentationReferenceGuideUrl(){
  return properties.getProperty("doc.guide.ref.url");
}

public void onConsumeFinished(Purchase purchase,IabResult result);

public static double mean(final List<Double> list){
  double sum=0;
  for (  Double number : list) {
    sum+=number;
  }
  return sum / list.size();
}

public static String toHex(byte[] data){
  try {
    return new String(Hex.encode(data),"US-ASCII");
  }
 catch (  UnsupportedEncodingException e) {
  }
  return null;
}

public In(URL url){
  if (url == null)   throw new NullPointerException("argument is null");
  try {
    URLConnection site=url.openConnection();
    InputStream is=site.getInputStream();
    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);
    scanner.useLocale(LOCALE);
  }
 catch (  IOException ioe) {
    throw new IllegalArgumentException("Could not open " + url);
  }
}

@VisibleForTesting public void processEnableFullscreenRunnableForTest(){
  if (mHandler.hasMessages(MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD)) {
    mHandler.removeMessages(MSG_ID_ENABLE_FULLSCREEN_AFTER_LOAD);
    enableFullscreenAfterLoad();
  }
}

private static String fromHtmlEntity(String str){
  Character ch=map.get(str);
  return (ch != null) ? ch.toString() : str;
}

public void write(byte[] vector){
  check(vector.length);
  System.arraycopy(vector,0,buffer,write_pos,vector.length);
  write_pos+=vector.length;
}

public void unlockUI(ProcessInfo pi){
  boolean notPrint=pi != null && pi.getAD_Process_ID() != m_curTab.getAD_Process_ID() && pi.isReportingProcess() == false;
  setBusy(false,notPrint);
  if (notPrint) {
    m_curTab.dataRefresh();
    if (pi.isTimeout())     Env.setContext(m_ctx,m_curWindowNo,"Processed","Y");
    m_curGC.dynamicDisplay(0);
    setStatusLine(pi.getSummary(),pi.isError());
    if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary());
    ProcessInfoUtil.setLogFromDB(pi);
    String logInfo=pi.getLogInfo();
    if (logInfo.length() > 0)     ADialog.info(m_curWindowNo,this,Env.getHeader(m_ctx,m_curWindowNo),pi.getTitle(),logInfo);
  }
 else {
    setStatusLine(pi.getSummary(),pi.isError());
    if (pi.isError())     ADialog.error(m_curWindowNo,this,null,pi.getSummary());
  }
}

private Map<URI,StorageSystem> buildArrayMap(StorageSystem vplexSystem,List<VolumeDescriptor> descriptors,VolumeDescriptor.Type[] types){
  Map<URI,StorageSystem> arrayMap=new HashMap<URI,StorageSystem>();
  if (types != null) {
    descriptors=VolumeDescriptor.filterByType(descriptors,types,new VolumeDescriptor.Type[]{});
  }
  for (  VolumeDescriptor desc : descriptors) {
    if (arrayMap.containsKey(desc.getDeviceURI()) == false) {
      if (vplexSystem == null) {
        StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient);
        arrayMap.put(desc.getDeviceURI(),array);
      }
 else {
        Set<URI> connectedSystems=ConnectivityUtil.getStorageSystemAssociationsByNetwork(_dbClient,vplexSystem.getId(),StoragePort.PortType.backend);
        if (connectedSystems.contains(desc.getDeviceURI())) {
          StorageSystem array=getDataObject(StorageSystem.class,desc.getDeviceURI(),_dbClient);
          arrayMap.put(desc.getDeviceURI(),array);
        }
      }
    }
  }
  return arrayMap;
}

public byte[] encrypt(byte[] plainTextAsBytes,CharSequence password) throws KeyCrypterException {
  try {
    byte[] salt=new byte[SALT_LENGTH];
    secureRandom.nextBytes(salt);
    ParametersWithIV key=(ParametersWithIV)getAESPasswordKey(password,salt);
    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));
    cipher.init(true,key);
    byte[] encryptedBytes=new byte[cipher.getOutputSize(plainTextAsBytes.length)];
    final int processLength=cipher.processBytes(plainTextAsBytes,0,plainTextAsBytes.length,encryptedBytes,0);
    final int doFinalLength=cipher.doFinal(encryptedBytes,processLength);
    return concat(salt,Arrays.copyOf(encryptedBytes,processLength + doFinalLength));
  }
 catch (  Exception e) {
    throw new KeyCrypterException("Could not encrypt bytes '" + Utils.bytesToHexString(plainTextAsBytes) + "'",e);
  }
}

public final ArrayList<WifiRecord> loadWifisByBssid(final String bssid,final Integer session){
  final ArrayList<WifiRecord> wifis=new ArrayList<>();
  String selectSql;
  if (session != null) {
    selectSql=Schema.COL_BSSID + " = \"" + bssid+ "\" AND "+ Schema.COL_SESSION_ID+ " =\""+ session+ "\"";
  }
 else {
    selectSql=Schema.COL_BSSID + " = \"" + bssid+ "\"";
  }
  final Cursor cursor=contentResolver.query(ContentProvider.CONTENT_URI_WIFI,null,selectSql,null,null);
  final int columnIndex=cursor.getColumnIndex(Schema.COL_BSSID);
  final int columnIndex2=cursor.getColumnIndex(Schema.COL_SSID);
  final int columnIndex3=cursor.getColumnIndex(Schema.COL_CAPABILITIES);
  final int columnIndex4=cursor.getColumnIndex(Schema.COL_FREQUENCY);
  final int columnIndex5=cursor.getColumnIndex(Schema.COL_LEVEL);
  final int columnIndex6=cursor.getColumnIndex(Schema.COL_TIMESTAMP);
  final int columnIndex7=cursor.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);
  final int columnIndex8=cursor.getColumnIndex(Schema.COL_END_POSITION_ID);
  final int columnIndex9=cursor.getColumnIndex(Schema.COL_KNOWN_WIFI);
  while (cursor.moveToNext()) {
    final WifiRecord wifi=new WifiRecord();
    wifi.setBssid(cursor.getString(columnIndex));
    wifi.setSsid(cursor.getString(columnIndex2));
    wifi.setCapabilities(cursor.getString(columnIndex3));
    wifi.setFrequency(cursor.getInt(columnIndex4));
    wifi.setLevel(cursor.getInt(columnIndex5));
    wifi.setOpenBmapTimestamp(cursor.getLong(columnIndex6));
    wifi.setBeginPosition(loadPositionById(cursor.getString(columnIndex7)));
    wifi.setEndPosition(loadPositionById(cursor.getString(columnIndex8)));
    wifi.setCatalogStatus(CatalogStatus.values()[cursor.getInt(columnIndex9)]);
    wifis.add(wifi);
  }
  cursor.close();
  return wifis;
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return AFTER_ID;
case 2:
  return MAX_JOBS;
default :
return null;
}
}

@Override public void deinstall(JEditorPane editor){
  super.deinstall(editor);
  editor.removeKeyListener(this);
}

private void pullEvent(){
  final int newScrollValue;
  final int itemDimension;
  final float initialMotionValue, lastMotionValue;
switch (getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    initialMotionValue=mInitialMotionX;
  lastMotionValue=mLastMotionX;
break;
case VERTICAL:
default :
initialMotionValue=mInitialMotionY;
lastMotionValue=mLastMotionY;
break;
}
switch (mCurrentMode) {
case PULL_FROM_END:
newScrollValue=Math.round(Math.max(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getFooterSize();
break;
case PULL_FROM_START:
default :
newScrollValue=Math.round(Math.min(initialMotionValue - lastMotionValue,0) / FRICTION);
itemDimension=getHeaderSize();
break;
}
setHeaderScroll(newScrollValue);
if (newScrollValue != 0 && !isRefreshing()) {
float scale=Math.abs(newScrollValue) / (float)itemDimension;
switch (mCurrentMode) {
case PULL_FROM_END:
mFooterLayout.onPull(scale);
break;
case PULL_FROM_START:
default :
mHeaderLayout.onPull(scale);
break;
}
if (mState != State.PULL_TO_REFRESH && itemDimension >= Math.abs(newScrollValue)) {
setState(State.PULL_TO_REFRESH);
}
 else if (mState == State.PULL_TO_REFRESH && itemDimension < Math.abs(newScrollValue)) {
setState(State.RELEASE_TO_REFRESH);
}
}
}

public boolean isSecure(){
  return mTlsCipher != null && !mTlsCipher.isEmpty();
}

public void sample(Record rec){
  totalRecs++;
  if (samples.size() < MAX_SAMPLES) {
    samples.add(new Sample(rec,schema));
    updateNewValueInterval(rec);
  }
 else {
    double flip=random.nextDouble();
    if (flip < (double)MAX_SAMPLES / totalRecs) {
      samples.set(random.nextInt(MAX_SAMPLES),new Sample(rec,schema));
      updateNewValueInterval(rec);
    }
  }
}

public TenantCreateParam prepareTenantParam(KeystoneTenant tenant){
  TenantCreateParam param=new TenantCreateParam(CinderConstants.TENANT_NAME_PREFIX + " " + tenant.getName(),prepareUserMappings(tenant.getId()));
  param.setDescription(getProperTenantDescription(tenant.getDescription()));
  return param;
}

private void forceInternalError(){
  throw new InternalError("gotcha");
}

@Override public void drawHighlight(Graphics g,int w,int h){
  g.setColor(Color.black);
  FontMetrics fm=g.getFontMetrics();
  int l=(int)(m_x * w) - fm.stringWidth(m_id) / 2;
  int t=(int)(m_y * h) - fm.getHeight() / 2;
  g.fillRect(l - 2,t - 2,fm.stringWidth(m_id) + 8,fm.getHeight() + fm.getDescent() + 8);
  drawNode(g,w,h);
}

public static ImageEncoder newInstance(String format){
  ImageEncoder imageEncoder=null;
  String className=(String)encoders.get(format);
  if (className == null) {
    throw new IllegalArgumentException("Unsupported image format - " + format);
  }
  try {
    Class imageEncoderClass=Class.forName(className);
    imageEncoder=(ImageEncoder)imageEncoderClass.newInstance();
  }
 catch (  Exception e) {
    throw new IllegalArgumentException(e.toString());
  }
  return imageEncoder;
}

public static void applyPinchZoomImage(ImageView mImageView){
  mImageView.setOnTouchListener(new PinchZoom());
}

public double empiricalHSICincompleteCholesky(TetradMatrix Gy,TetradMatrix Gx,TetradMatrix Gz,int m){
  int ky=Gy.columns();
  int kx=Gx.columns();
  int kz=Gz.columns();
  TetradMatrix H=KernelUtils.constructH(m);
  TetradMatrix Gcy=H.times(Gy);
  TetradMatrix Gcx=H.times(Gx);
  TetradMatrix Gcz=H.times(Gz);
  TetradMatrix A=new TetradMatrix(ky,kx);
  TetradMatrix Gcyt=Gcy.transpose();
  A=Gcyt.times(Gcx);
  TetradMatrix B=Gcy.times(A);
  TetradMatrix Kyx=new TetradMatrix(m,m);
  TetradMatrix Gcxt=new TetradMatrix(kx,m);
  Gcxt=Gcx.transpose();
  Kyx=B.times(Gcxt);
  double empHSIC=0.0;
  double xy=0.0;
  for (int i=0; i < m; i++) {
    empHSIC+=matrixProductEntry(B,Gcxt,i,i);
  }
  TetradMatrix Gytz=Gcyt.times(Gcz);
  TetradMatrix Gczt=Gcz.transpose();
  TetradMatrix Gztx=Gczt.times(Gcx);
  TetradMatrix Gztz=Gczt.times(Gcz);
  TetradMatrix Gztzr=Gztz.copy();
  for (int i=0; i < kz; i++) {
    Gztzr.set(i,i,Gztz.get(i,i) + this.regularizer);
  }
  TetradMatrix ZI=Gztzr.inverse();
  TetradMatrix ZIzt=ZI.times(Gczt);
  TetradMatrix Gzr=Gcz.copy();
  for (int i=0; i < m; i++) {
    for (int j=0; j < kz; j++) {
      Gzr.set(i,j,Gcz.get(i,j) * (-1.0 / this.regularizer));
    }
  }
  TetradMatrix Zinv=Gzr.times(ZIzt);
  for (int i=0; i < m; i++) {
    Zinv.set(i,i,Zinv.get(i,i) + (1.0 / this.regularizer));
  }
  TetradMatrix Gztzinv=Gczt.times(Zinv);
  TetradMatrix Gzinvz=Zinv.times(Gcz);
  TetradMatrix Gztinv2z=Gztzinv.times(Gzinvz);
  TetradMatrix Gytzztzinv2z=Gytz.times(Gztinv2z);
  TetradMatrix Gytzztzinv2zztx=Gytzztzinv2z.times(Gztx);
  TetradMatrix Gyytzztzinv2zztx=Gcy.times(Gytzztzinv2zztx);
  double second=0.0;
  for (int i=0; i < m; i++) {
    second+=matrixProductEntry(Gyytzztzinv2zztx,Gcxt,i,i);
  }
  empHSIC-=2 * second;
  TetradMatrix Gxtz=Gcxt.times(Gcz);
  TetradMatrix Gxtzztinv2z=Gxtz.times(Gztinv2z);
  TetradMatrix Gyytzztzinv2zztxxtzztinv2z=Gyytzztzinv2zztx.times(Gxtzztinv2z);
  for (int i=0; i < m; i++) {
    empHSIC+=matrixProductEntry(Gyytzztzinv2zztxxtzztinv2z,Gczt,i,i);
  }
  double betaz=0.0;
  for (int i=0; i < (m - 1); i++) {
    for (int j=(i + 1); j < m; j++) {
      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,i,j),2);
      betaz+=Math.pow(matrixProductEntry(Gcz,Gczt,j,i),2);
    }
  }
  empHSIC*=(m / (betaz * (m - 1)));
  return empHSIC;
}

public static File parse(String[] options,String option,File defValue) throws Exception {
  String value=Utils.getOption(option,options);
  if (value.isEmpty())   return defValue;
 else   return new File(value);
}

public boolean isAcctBalanced(){
  if (m_lines.size() == 0)   return true;
  BigDecimal balance=getAcctBalance();
  boolean retValue=balance.signum() == 0;
  if (retValue)   log.finer(toString());
 else   log.warning("NO - Diff=" + balance + " - "+ toString());
  return retValue;
}

public void ensureCapacity(int minCapacity){
  int oldCapacity=capacity;
  if (minCapacity > oldCapacity) {
    int newCapacity=(oldCapacity * 3) / 2 + 1;
    if (newCapacity < minCapacity)     newCapacity=minCapacity;
    BitVector vector=toBitVector();
    vector.setSize(newCapacity * bitsPerElement);
    this.bits=vector.elements();
    this.capacity=newCapacity;
  }
}

private String detailBase(final Method method){
  final Class<?> clazz=method.getDeclaringClass();
  final String detailBase=MessageUtils.bundleNameForClass(clazz);
  if (isBlank(detailBase)) {
    throw new IllegalStateException("no bundle name defined for " + clazz);
  }
  return detailBase;
}

public void finished() throws IOException {
  outputStream.close();
}

public final void lock(){
  SunToolkit.awtLock();
}

@Override public Object createStatement(Object proxy,Method method,Object[] args,Object statement,long time){
  try {
    Object result=null;
    String name=method.getName();
    String sql=null;
    Constructor<?> constructor=null;
    if (compare(CREATE_STATEMENT,name)) {
      constructor=getConstructor(CREATE_STATEMENT_IDX,Statement.class);
    }
 else     if (compare(PREPARE_STATEMENT,name)) {
      sql=(String)args[0];
      constructor=getConstructor(PREPARE_STATEMENT_IDX,PreparedStatement.class);
      if (sql != null) {
        prepareStatement(sql,time);
      }
    }
 else     if (compare(PREPARE_CALL,name)) {
      sql=(String)args[0];
      constructor=getConstructor(PREPARE_CALL_IDX,CallableStatement.class);
      prepareCall(sql,time);
    }
 else {
      return statement;
    }
    result=constructor.newInstance(new Object[]{new StatementProxy(statement,sql)});
    return result;
  }
 catch (  Exception x) {
    log.warn("Unable to create statement proxy for slow query report.",x);
  }
  return statement;
}

public UpdateResponse remove(long id) throws IOException, SolrServerException {
  UpdateResponse res=solrClient.deleteById(String.valueOf(id));
  solrClient.commit(false,true,true);
  return res;
}

public void switchSetup(){
  int retVal;
  retVal=m_SetupFileChooser.showOpenDialog(this);
  if (retVal != JFileChooser.APPROVE_OPTION) {
    return;
  }
  m_DbUtils.initialize(m_SetupFileChooser.getSelectedFile());
  m_URL=m_DbUtils.getDatabaseURL();
  m_User=m_DbUtils.getUsername();
  m_Password=m_DbUtils.getPassword();
  m_TextURL.setText(m_URL);
}

private ClientDetailsEntity loadClientObject(final OIDCAuthorizationRequestContext authorizationRequest){
  log.debug("Loading client by id {}",authorizationRequest.getClientId());
  return clientService.loadClientByClientId(authorizationRequest.getClientId());
}

public void addFieldProperty(String name,String accessorField){
  fieldProperties.add(new LegacyFieldPropDesc(name,accessorField));
}

private void parseNoWildCards(){
  this.fSegments=new String[1];
  this.fSegments[0]=this.fPattern;
  this.fBound=this.fLength;
}

public Map<String,String> environment(){
  String base64=toStringBase64();
  if (base64 == null || base64.length() == 0) {
    return Collections.emptyMap();
  }
  Map<String,String> environment=Maps.newHashMap();
  environment.put(BaggageUtils.BAGGAGE_ENVIRONMENT_VARIABLE,base64);
  return environment;
}

@Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,List<Double> values,XYSeriesRenderer seriesRenderer,SupportSeriesRender supportSeriesRender,float yAxisValue,int seriesIndex,int startIndex){
  int seriesNr=mDataset.getSeriesCount();
  int length=points.size();
  paint.setColor(seriesRenderer.getColor());
  paint.setStyle(Style.FILL);
  float halfDiffX=getHalfDiffX(points,length,seriesNr);
  for (int i=0; i < length; i+=2) {
    float x=points.get(i);
    float y=points.get(i + 1);
    drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint);
  }
  paint.setColor(seriesRenderer.getColor());
}

public void listenModLog(String username,String token){
  if (!hasServer()) {
    return;
  }
  if (modLogListen.containsKey(username)) {
    return;
  }
  this.token=token;
  long userId=getUserId(username);
  modLogListen.put(username,userId);
  LOGGER.info("[PubSub] LISTEN ModLog " + username + " "+ userId);
  if (userId != -1) {
    sendListenModLog(userId,true);
  }
}

public static boolean isValidClassName(String className){
  if (className.indexOf('(') >= 0) {
    return false;
  }
  return true;
}

@SuppressWarnings("deprecation") public void newMinute(){
  if (!inSyncWithInternalFastClock) {
    return;
  }
  if (correctFastClock || synchronizeWithInternalClock) {
    Date now=clock.getTime();
    if (now.getMinutes() != 0) {
      curDays=now.getDate();
      curHours=now.getHours();
      curMinutes=now.getMinutes();
      long millis=now.getTime();
      long elapsedMS=millis % MSECPERMINUTE;
      double frac_min=elapsedMS / (double)MSECPERMINUTE;
      curFractionalMinutes=(int)CORRECTION - (int)(CORRECTION * frac_min);
      setClock();
    }
  }
 else   if (setInternal && !correctFastClock && !synchronizeWithInternalClock) {
    inSyncWithInternalFastClock=false;
    initiateRead();
  }
}

private <T extends DiscoveredSystemObject>boolean isDataCollectionScanJobSchedulingNeeded(long lastScanTime,boolean inProgress){
  long systemTime=System.currentTimeMillis();
  long refreshInterval=getRefreshInterval(ControllerServiceImpl.SCANNER);
  if (inProgress) {
    return false;
  }
  if (lastScanTime > 0 && (systemTime - lastScanTime < refreshInterval * 1000)) {
    _logger.info("Skipping scanner job; attempt to schedule faster than refresh interval allows");
    return false;
  }
  return true;
}

private void removeBreakpoints(final Set<BreakpointAddress> breakpointAddressSet,final BreakpointStorage storage){
  if (breakpointAddressSet.size() != 0) {
    final Set<Breakpoint> breakpoints=storage.getBreakPointsByAddress(breakpointAddressSet);
    storage.removeBreakpoints(breakpointAddressSet);
    for (    final BreakpointManagerListener listener : listeners) {
      try {
        listener.breakpointsRemoved(breakpoints);
      }
 catch (      final Exception e) {
        CUtilityFunctions.logException(e);
      }
    }
  }
}

public void replaceCreationTemplate(Guid guid,String templateName,AttrSet attrSet) throws ConfigManagerException {
  if (guid == null) {
    guid=new Guid(_rootDN);
  }
  DN dn=DN.valueOf(guid.getDn());
  String org="";
  List<RDN> rdns=new ArrayList<>();
  for (  RDN rdn : dn) {
    rdns.add(0,rdn);
  }
  for (  RDN rdn : rdns) {
    org=org + "/" + LDAPUtils.rdnValue(rdn);
  }
  String service=CREATIONPATH + "/" + templateName;
  Map map=convertToMap(attrSet);
  try {
    replaceServiceAttributes(org,service,map);
  }
 catch (  SMSException e) {
    String args[]=new String[1];
    args[0]=e.toString();
    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));
  }
catch (  SSOException se) {
    String args[]=new String[1];
    args[0]=se.toString();
    throw new ConfigManagerException(i18n.getString(IUMSConstants.ERROR_CM,args));
  }
}

private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {
  stream.defaultReadObject();
  MarshalledInstance mi=(MarshalledInstance)stream.readObject();
  try {
    listener=(RemoteEventListener)mi.get(false);
  }
 catch (  Throwable e) {
    if (e instanceof Error && ThrowableConstants.retryable(e) == ThrowableConstants.BAD_OBJECT) {
      throw (Error)e;
    }
    logger.log(Level.WARNING,"failed to recover event listener",e);
  }
}

public void add(T item){
  if (set.add(item)) {
    fireContentsChanged(this,0,getSize() - 1);
  }
}

private String byteArrayToHexString(byte[] bytes){
  StringBuilder sb=new StringBuilder(bytes.length * 2);
  for (  byte element : bytes) {
    int v=element & 0xff;
    if (v < 16) {
      sb.append('0');
    }
    sb.append(Integer.toHexString(v));
  }
  return sb.toString();
}

public ScServer createClusterServer(String ssn,String clusterName,String osId) throws StorageCenterAPIException {
  Parameters params=new Parameters();
  params.add("Name",clusterName);
  params.add("StorageCenter",ssn);
  params.add("Notes",NOTES_STRING);
  params.add("OperatingSystem",osId);
  RestResult rr=restClient.post("StorageCenter/ScServerCluster",params.toJson());
  if (!checkResults(rr)) {
    String error=String.format("Error creating cluster server '%s': %s",clusterName,rr.getErrorMsg());
    throw new StorageCenterAPIException(error);
  }
  return gson.fromJson(rr.getResult(),ScServer.class);
}

public void testConstructorSignBytesPositive4(){
  byte aBytes[]={127,56,100,-2};
  int aSign=1;
  byte rBytes[]={127,56,100,-2};
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  byte resBytes[]=new byte[rBytes.length];
  resBytes=aNumber.toByteArray();
  for (int i=0; i < resBytes.length; i++) {
    assertTrue(resBytes[i] == rBytes[i]);
  }
  assertEquals("incorrect sign",1,aNumber.signum());
}

public void testMinimalCompletionStage(){
  CompletableFuture<Integer> f=new CompletableFuture<>();
  CompletionStage<Integer> g=f.minimalCompletionStage();
  AtomicInteger x=new AtomicInteger(0);
  AtomicReference<Throwable> r=new AtomicReference<Throwable>();
  checkIncomplete(f);
  g.whenComplete(null);
  f.complete(1);
  checkCompletedNormally(f,1);
  assertEquals(x.get(),1);
  assertNull(r.get());
}

private void writeDirectoryPostResource(Element postResourceEl,String path){
  postResourceEl.setAttribute("className",DIR_RESOURCE_SET);
  postResourceEl.setAttribute("base",path.replace("&","&amp;"));
}

private static int[] trimArray(int[] array,int size){
  if (size < 0) {
    throw new IllegalArgumentException();
  }
  if (size == 0) {
    return NO_ERRORS;
  }
  int[] a=new int[size];
  System.arraycopy(array,0,a,0,size);
  return a;
}

static PotionType fromName(String name){
  for (  PotionTypeTable table : values()) {
    if (name.equalsIgnoreCase(table.name))     return table.type;
  }
  return PotionType.valueOf(name.toUpperCase());
}

public synchronized void removeCurlMesh(CurlMesh mesh){
  while (mCurlMeshes.remove(mesh))   ;
}

private List<Datum> sampleNbestList(int sourceId,Sequence<IString> source,SentenceLevelMetric<IString,String> scoreMetric,List<RichTranslation<IString,String>> translations,List<Sequence<IString>> references){
  int[] sourceIds=new int[1];
  sourceIds[0]=sourceId;
  List<Sequence<IString>> sources=new ArrayList<>(1);
  sources.add(source);
  List<List<RichTranslation<IString,String>>> translationList=new ArrayList<List<RichTranslation<IString,String>>>(1);
  translationList.add(translations);
  List<List<Sequence<IString>>> referenceList=new ArrayList<List<Sequence<IString>>>(1);
  referenceList.add(references);
  return sampleNbestLists(sourceIds,sources,scoreMetric,translationList,referenceList);
}

protected void postRunnable(Runnable runnable){
  if (runnable != null) {
    handler.post(runnable);
  }
}

public boolean isClosed(){
  return map.isClosed();
}

public void insertThinkTime(){
  ScriptStep thinkTimeScriptStep=ScriptStepFactory.createThinkTime(getMinThinkTime(),getMaxThinkTime());
  steps.add(getInsertIndex(),thinkTimeScriptStep);
  minThinkTime="";
  maxThinkTime="";
  reindexScriptSteps();
}

public static boolean copyStream(InputStream is,OutputStream os,CopyListener listener,int bufferSize) throws IOException {
  int current=0;
  int total=is.available();
  if (total <= 0) {
    total=DEFAULT_IMAGE_TOTAL_SIZE;
  }
  final byte[] bytes=new byte[bufferSize];
  int count;
  if (shouldStopLoading(listener,current,total))   return false;
  while ((count=is.read(bytes,0,bufferSize)) != -1) {
    os.write(bytes,0,count);
    current+=count;
    if (shouldStopLoading(listener,current,total))     return false;
  }
  os.flush();
  return true;
}

public void addNode(final Instruction instruction){
  instructions.add(instruction);
  if (prevInstruction != null) {
    addEdge(prevInstruction,instruction);
  }
  prevInstruction=instruction;
}

public void ensureCapacity(int minimumCapacity){
  if (minimumCapacity <= _capacity)   return;
  if (minimumCapacity > 0x1000) {
    _capacity=(minimumCapacity + 0xfff) & ~0xfff;
  }
 else {
    while (_capacity < minimumCapacity) {
      _capacity+=_capacity;
    }
  }
  byte[] bytes=new byte[_capacity];
  System.arraycopy(_buffer,0,bytes,0,_length);
  _buffer=bytes;
}

public Builder removeName(final String name){
  names.remove(name);
  return this;
}

public <T>JSONAPIDocument<List<T>> readDocumentCollection(InputStream dataStream,Class<T> clazz){
  try {
    resourceCache.init();
    JsonNode rootNode=objectMapper.readTree(dataStream);
    ValidationUtils.ensureNotError(objectMapper,rootNode);
    ValidationUtils.ensureCollection(rootNode);
    resourceCache.cache(parseIncluded(rootNode));
    List<T> resourceList=new ArrayList<>();
    for (    JsonNode element : rootNode.get(DATA)) {
      T pojo=readObject(element,clazz,true);
      resourceList.add(pojo);
    }
    JSONAPIDocument<List<T>> result=new JSONAPIDocument<>(resourceList,objectMapper);
    if (rootNode.has(META)) {
      result.setMeta(mapMeta(rootNode.get(META)));
    }
    if (rootNode.has(LINKS)) {
      result.setLinks(new Links(mapLinks(rootNode.get(LINKS))));
    }
    return result;
  }
 catch (  RuntimeException e) {
    throw e;
  }
catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    resourceCache.clear();
  }
}

public void addTargetedBySwarm(int entityId,int weaponId){
  hitBySwarmsEntity.addElement(new Integer(entityId));
  hitBySwarmsWeapon.addElement(new Integer(weaponId));
}

private boolean isCheckpointExists(Connection conn,String key) throws SQLException {
  PreparedStatement st=null;
  ResultSet rs=null;
  try {
    st=conn.prepareStatement(chkExistsSql);
    st.setString(1,key);
    rs=st.executeQuery();
    return rs.next();
  }
  finally {
    U.close(rs,log);
    U.close(st,log);
  }
}

public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,ImageIcon ii){
  this(ullat,ullon,lrlat,lrlon,ii.getImage());
}

private static ResultPoint[] findVertices(BitMatrix matrix,boolean tryHarder){
  int height=matrix.getHeight();
  int width=matrix.getWidth();
  ResultPoint[] result=new ResultPoint[8];
  boolean found=false;
  int[] counters=new int[START_PATTERN.length];
  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));
  for (int i=0; i < height; i+=rowStep) {
    int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);
    if (loc != null) {
      result[0]=new ResultPoint(loc[0],i);
      result[4]=new ResultPoint(loc[1],i);
      found=true;
      break;
    }
  }
  if (found) {
    found=false;
    for (int i=height - 1; i > 0; i-=rowStep) {
      int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);
      if (loc != null) {
        result[1]=new ResultPoint(loc[0],i);
        result[5]=new ResultPoint(loc[1],i);
        found=true;
        break;
      }
    }
  }
  counters=new int[STOP_PATTERN.length];
  if (found) {
    found=false;
    for (int i=0; i < height; i+=rowStep) {
      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);
      if (loc != null) {
        result[2]=new ResultPoint(loc[1],i);
        result[6]=new ResultPoint(loc[0],i);
        found=true;
        break;
      }
    }
  }
  if (found) {
    found=false;
    for (int i=height - 1; i > 0; i-=rowStep) {
      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);
      if (loc != null) {
        result[3]=new ResultPoint(loc[1],i);
        result[7]=new ResultPoint(loc[0],i);
        found=true;
        break;
      }
    }
  }
  return found ? result : null;
}

public static void copyStream(InputStream is,OutputStream os,byte[] buffer,int bufferSize,String confid,double fileSize,Context context) throws IOException {
  double downloaded=0;
  int[] update=new int[3];
  try {
    for (; ; ) {
      int count=is.read(buffer,0,bufferSize);
      downloaded+=count;
      if (count == -1) {
        if (context != null) {
        }
        break;
      }
      os.write(buffer,0,count);
      if (context != null) {
        update[0]=(int)downloaded;
        update[1]=(int)fileSize;
        update[2]=(int)((downloaded / fileSize) * 100);
      }
    }
  }
 catch (  IOException e) {
    throw e;
  }
}

@Override public void writeHeader() throws IOException {
  os=new PDFWriter(new BufferedOutputStream(ros),PDF_VERSION);
  delayImageQueue=new PDFImageDelayQueue(os);
  delayPaintQueue=new PDFPaintDelayQueue(os,delayImageQueue);
  fontTable=new PDFFontTable(os);
  PDFDocInfo info=os.openDocInfo("DocInfo");
  info.setTitle(getProperty(TITLE));
  info.setAuthor(getProperty(AUTHOR));
  info.setSubject(getProperty(SUBJECT));
  info.setKeywords(getProperty(KEYWORDS));
  info.setCreator(getCreator());
  info.setProducer(producer == null ? "" : producer);
  if (!isDeviceIndependent()) {
    Calendar now=Calendar.getInstance();
    info.setCreationDate(now);
    info.setModificationDate(now);
  }
  info.setTrapped("False");
  os.close(info);
  PDFCatalog catalog=os.openCatalog("Catalog","RootPage");
  catalog.setOutlines("Outlines");
  catalog.setPageMode("UseOutlines");
  catalog.setViewerPreferences("Preferences");
  catalog.setOpenAction(new Object[]{os.ref("Page1"),os.name("Fit")});
  os.close(catalog);
  PDFViewerPreferences prefs=os.openViewerPreferences("Preferences");
  prefs.setFitWindow(true);
  prefs.setCenterWindow(false);
  os.close(prefs);
  alphaIndex=1;
  extGStates=new HashMap<Float,String>();
  if (!isMultiPage()) {
    openPage(getSize(),null);
  }
}

protected String parseString(int closingCharacter) throws IOException, RDFParseException {
  StringBuilder sb=getBuilder();
  while (true) {
    int c=readCodePoint();
    if (c == closingCharacter) {
      break;
    }
 else     if (c == -1) {
      throwEOFException();
    }
    appendCodepoint(sb,c);
    if (c == '\\') {
      c=readCodePoint();
      if (c == -1) {
        throwEOFException();
      }
      appendCodepoint(sb,c);
    }
  }
  return sb.toString();
}

private void codeUnwrapReturnValue(Class<?> type,DataOutputStream out) throws IOException {
  if (type.isPrimitive()) {
    PrimitiveTypeInfo prim=PrimitiveTypeInfo.get(type);
    out.writeByte(opc_checkcast);
    out.writeShort(cp.getClass(prim.wrapperClassName));
    out.writeByte(opc_invokevirtual);
    out.writeShort(cp.getMethodRef(prim.wrapperClassName,prim.unwrapMethodName,prim.unwrapMethodDesc));
    if (type == int.class || type == boolean.class || type == byte.class || type == char.class || type == short.class) {
      out.writeByte(opc_ireturn);
    }
 else     if (type == long.class) {
      out.writeByte(opc_lreturn);
    }
 else     if (type == float.class) {
      out.writeByte(opc_freturn);
    }
 else     if (type == double.class) {
      out.writeByte(opc_dreturn);
    }
 else {
      throw new AssertionError();
    }
  }
 else {
    out.writeByte(opc_checkcast);
    out.writeShort(cp.getClass(dotToSlash(type.getName())));
    out.writeByte(opc_areturn);
  }
}

private String formatLink(String[] parts){
  String anchor, text;
  if (parts.length < 2) {
    anchor="";
    text="Checker Framework";
  }
 else {
    anchor=parts[0];
    text=parts[1];
  }
  return String.format("<A HREF=\"http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html%s\">%s</A>",anchor,text);
}

public JSONException(Throwable cause){
  super(cause.getMessage());
  this.cause=cause;
}

public boolean fixUtils(String[] utils) throws Exception {
  for (  String util : utils) {
    if (!checkUtil(util)) {
      if (checkUtil("busybox")) {
        if (hasUtil(util,"busybox")) {
          fixUtil(util,RootTools.utilPath);
        }
      }
 else {
        if (checkUtil("toolbox")) {
          if (hasUtil(util,"toolbox")) {
            fixUtil(util,RootTools.utilPath);
          }
        }
 else {
          return false;
        }
      }
    }
  }
  return true;
}

@Override protected void initialize(){
  List<String> patterns;
  super.initialize();
  m_Patterns=new ArrayList<Pattern>();
  patterns=read();
  for (  String pattern : patterns) {
    m_Patterns.add(Pattern.compile(pattern));
  }
}

public static String[] lsDirectories(String directory) throws Exception {
  String[] tmp=ls(directory);
  ArrayList<String> files=new ArrayList<>();
  for (  String s : tmp) {
    if (isDirectory(directory + File.separator + s))     files.add(s);
  }
  return files.toArray(new String[files.size()]);
}

private void toStringWithChildren(StringBuffer buffer,int indent){
  internalToString(buffer,indent);
  if (fChildren != null) {
    for (Iterator<TextEdit> iterator=fChildren.iterator(); iterator.hasNext(); ) {
      TextEdit child=iterator.next();
      buffer.append('\n');
      child.toStringWithChildren(buffer,indent + 1);
    }
  }
}

public static void encode(Appendable out,int value) throws IOException {
  value=toVLQSigned(value);
  do {
    int digit=value & VLQ_BASE_MASK;
    value>>>=VLQ_BASE_SHIFT;
    if (value > 0) {
      digit|=VLQ_CONTINUATION_BIT;
    }
    out.append(Base64.toBase64(digit));
  }
 while (value > 0);
}

public mxICellOverlay removeCellOverlay(Object cell,mxICellOverlay overlay){
  if (overlay == null) {
    removeCellOverlays(cell);
  }
 else {
    mxICellOverlay[] arr=getCellOverlays(cell);
    if (arr != null) {
      List<mxICellOverlay> list=Arrays.asList(arr);
      if (list.remove(overlay)) {
        removeCellOverlayComponent(overlay,cell);
      }
      arr=(mxICellOverlay[])list.toArray();
      overlays.put(cell,arr);
    }
  }
  return overlay;
}

public void removeForeignKey(int idx){
  foreignKeys.remove(idx);
}

public java.lang.StringBuffer insert(int offset,int i){
  internal.insert(offset,i);
  return this;
}

public void addGefaehrdungsUmsetzung(GefaehrdungsUmsetzung gefaehrdung){
  if (!allGefaehrdungsUmsetzungen.contains(gefaehrdung)) {
    allGefaehrdungsUmsetzungen.add(gefaehrdung);
  }
}

String normalizeClassPath(String classPath,boolean generateRelative){
  char sep=CauchoUtil.getPathSeparatorChar();
  int head=0;
  int tail=0;
  CharBuffer cb=CharBuffer.allocate();
  while (head < classPath.length()) {
    tail=classPath.indexOf(sep,head);
    if (tail < 0)     tail=classPath.length();
    if (tail > head) {
      String segment=classPath.substring(head,tail);
      segment=normalizePath(segment,generateRelative);
      if (segment != null) {
        if (cb.length() != 0)         cb.append(sep);
        cb.append(segment);
      }
    }
    head=tail + 1;
  }
  return cb.close();
}

protected ASN1Sequence(ASN1Encodable obj){
  seq.addElement(obj);
}

public static double pow(final double x,final double y){
  if (y == 0) {
    return 1.0;
  }
 else {
    final long yBits=Double.doubleToRawLongBits(y);
    final int yRawExp=(int)((yBits & MASK_DOUBLE_EXPONENT) >> 52);
    final long yRawMantissa=yBits & MASK_DOUBLE_MANTISSA;
    final long xBits=Double.doubleToRawLongBits(x);
    final int xRawExp=(int)((xBits & MASK_DOUBLE_EXPONENT) >> 52);
    final long xRawMantissa=xBits & MASK_DOUBLE_MANTISSA;
    if (yRawExp > 1085) {
      if ((yRawExp == 2047 && yRawMantissa != 0) || (xRawExp == 2047 && xRawMantissa != 0)) {
        return Double.NaN;
      }
 else       if (xRawExp == 1023 && xRawMantissa == 0) {
        if (yRawExp == 2047) {
          return Double.NaN;
        }
 else {
          return 1.0;
        }
      }
 else {
        if ((y > 0) ^ (xRawExp < 1023)) {
          return Double.POSITIVE_INFINITY;
        }
 else {
          return +0.0;
        }
      }
    }
 else {
      if (yRawExp >= 1023) {
        final long yFullMantissa=IMPLICIT_HIGH_BIT | yRawMantissa;
        if (yRawExp < 1075) {
          final long integralMask=(-1L) << (1075 - yRawExp);
          if ((yFullMantissa & integralMask) == yFullMantissa) {
            final long l=yFullMantissa >> (1075 - yRawExp);
            return FastMath.pow(x,(y < 0) ? -l : l);
          }
        }
 else {
          final long l=yFullMantissa << (yRawExp - 1075);
          return FastMath.pow(x,(y < 0) ? -l : l);
        }
      }
      if (x == 0) {
        return y < 0 ? Double.POSITIVE_INFINITY : +0.0;
      }
 else       if (xRawExp == 2047) {
        if (xRawMantissa == 0) {
          return (y < 0) ? +0.0 : Double.POSITIVE_INFINITY;
        }
 else {
          return Double.NaN;
        }
      }
 else       if (x < 0) {
        return Double.NaN;
      }
 else {
        final double tmp=y * HEX_40000000;
        final double ya=(y + tmp) - tmp;
        final double yb=y - ya;
        final double lns[]=new double[2];
        final double lores=log(x,lns);
        if (Double.isInfinite(lores)) {
          return lores;
        }
        double lna=lns[0];
        double lnb=lns[1];
        final double tmp1=lna * HEX_40000000;
        final double tmp2=(lna + tmp1) - tmp1;
        lnb+=lna - tmp2;
        lna=tmp2;
        final double aa=lna * ya;
        final double ab=lna * yb + lnb * ya + lnb * yb;
        lna=aa + ab;
        lnb=-(lna - aa - ab);
        double z=1.0 / 120.0;
        z=z * lnb + (1.0 / 24.0);
        z=z * lnb + (1.0 / 6.0);
        z=z * lnb + 0.5;
        z=z * lnb + 1.0;
        z*=lnb;
        final double result=exp(lna,z,null);
        return result;
      }
    }
  }
}

public final void push(int value){
  int ff=m_firstFree;
  if ((ff + 1) >= m_mapSize) {
    if (null == m_map) {
      m_map=new int[m_blocksize];
      m_mapSize=m_blocksize;
    }
 else {
      m_mapSize+=m_blocksize;
      int newMap[]=new int[m_mapSize];
      System.arraycopy(m_map,0,newMap,0,ff + 1);
      m_map=newMap;
    }
  }
  m_map[ff]=value;
  ff++;
  m_firstFree=ff;
}

protected Node stringConversion(Node node){
  TypeElement stringElement=elements.getTypeElement("java.lang.String");
  if (!TypesUtils.isString(node.getType())) {
    Node converted=new StringConversionNode(node.getTree(),node,stringElement.asType());
    addToConvertedLookupMap(converted);
    insertNodeAfter(converted,node);
    return converted;
  }
 else {
    return node;
  }
}

@KnownFailure("not supported") public void testUpdate7() throws SQLException {
  DatabaseCreator.fillFKStrictTable(conn);
  statement.executeUpdate("UPDATE " + DatabaseCreator.FKSTRICT_TABLE + " SET value = 'updated' WHERE name_id = ANY (SELECT id FROM "+ DatabaseCreator.PARENT_TABLE+ " WHERE id > 1)");
  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE value = 'updated';");
  r.next();
  assertEquals("Should be 1 row",1,r.getInt(1));
  r.close();
}

CompletableFuture<HistoryReadResponse> historyRead(HistoryReadDetails historyReadDetails,TimestampsToReturn timestampsToReturn,boolean releaseContinuationPoints,List<HistoryReadValueId> nodesToRead);

private void validate() throws URISyntaxException {
  String s=getScheme();
  if ((s != null) && (s.compareTo("file") == 0)) {
    return;
  }
  if (getLocalVmId() == -1) {
    throw new URISyntaxException(uri.toString(),"Local vmid required");
  }
}

public synchronized void finishWriting(){
  doneWriting=true;
  notifyAll();
}

private long offset2PhysicalAddress(final long offset){
  return offset + headerSize;
}

@Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {
  try {
    if (fDeclHandler != null) {
      fDeclHandler.internalEntityDecl(name,text.toString());
    }
  }
 catch (  SAXException e) {
    throw new XNIException(e);
  }
}

public static boolean isAuthorized(String logName,String operation,Object credential){
  return authorizer.isAuthorized(logName,operation,credential);
}

public Object next(){
  if (pos < size)   return Array.get(array,pos++);
  throw new NoSuchElementException("No more elements: " + pos + " / "+ size);
}

public void addMessages(List<? extends Message> messages){
  if (SHOW_LOGS)   Logger.v(TAG,">> addMessages, lock " + messages);
  mQueueLock.lock(TAG);
  mPlayerMessagesQueue.addAll(messages);
  mQueueLock.notify(TAG);
  if (SHOW_LOGS)   Logger.v(TAG,"<< addMessages, unlock " + messages);
  mQueueLock.unlock(TAG);
}

public PermissionRequestObject onRational(Func3 rationalFunc){
  mRationalFunc=rationalFunc;
  return this;
}

public GenericPrincipal(String userName,String password,List<String> roles,Map<String,List<GenericPrincipal.Attribute>> writeEntries,Map<String,List<GenericPrincipal.Attribute>> readEntries,Map<String,List<GenericPrincipal.Attribute>> executeTasks){
  this.userName=userName;
  this.password=password;
  this.writeEntries=writeEntries;
  this.readEntries=readEntries;
  this.executeTasks=executeTasks;
  if (roles != null) {
    this.roles=new String[roles.size()];
    this.roles=roles.toArray(this.roles);
    if (this.roles.length > 0)     Arrays.sort(this.roles);
  }
  writeMatchObjects=new HashMap<String,MatchObject>();
  readMatchObjects=new HashMap<String,MatchObject>();
  executeMatchObjects=new HashMap<String,MatchObject>();
  userDefinedRoles=new ArrayList<String>();
}

public boolean equals(Object other){
  if (other == this) {
    return true;
  }
  if (!(other instanceof X509CRLEntry)) {
    return false;
  }
  X509CRLEntry obj=(X509CRLEntry)other;
  try {
    return Arrays.equals(getEncoded(),obj.getEncoded());
  }
 catch (  CRLException e) {
    return false;
  }
}

public static int roll1D6(){
  return rand.nextInt(6) + 1;
}

static byte[] septetStream2octetStream(byte[] septets){
  int octetLength=(int)Math.ceil(((septets.length * 7)) / 8.0);
  byte[] octets=new byte[octetLength];
  for (int i=0; i < septets.length; i++) {
    for (int j=0; j < 7; j++) {
      if ((septets[i] & (1 << j)) != 0) {
        int bitIndex=(i * 7) + j;
        octets[bitIndex >>> 3]|=1 << (bitIndex & 7);
      }
    }
  }
  return octets;
}

public CTaggingPanel(final JFrame parent,final ZyGraph graph,final ITagManager manager){
  super(new BorderLayout());
  m_tagsTree=new CTagsTree(parent,graph,manager);
  final JScrollPane pane=new JScrollPane(m_tagsTree);
  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  add(pane);
  setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Tagging"));
  setDoubleBuffered(true);
}

@Override public double height(final int markerIndex){
  MathUtils.checkRangeInclusive(markerIndex,1,markerArray.length - 1);
  return markerArray[markerIndex].markerHeight;
}

public <K,V>void consume(String groupId,String clientId,OffsetResetStrategy autoOffsetReset,Deserializer<K> keyDeserializer,Deserializer<V> valueDeserializer,BooleanSupplier continuation,OffsetCommitCallback offsetCommitCallback,Runnable completion,Collection<String> topics,java.util.function.Consumer<ConsumerRecord<K,V>> consumerFunction){
  Properties props=getConsumerProperties(groupId,clientId,autoOffsetReset);
  Thread t=new Thread(null);
  t.setName(clientId + "-thread");
  t.start();
}

public double distance(Instance first,Instance second,PerformanceStats stats){
  return Math.sqrt(distance(first,second,Double.POSITIVE_INFINITY,stats));
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

public void findSameAsChaining(Resource subj,Set<Resource> currentSameAs,Resource[] contxts) throws InferenceEngineException {
  try {
    CloseableIteration<Statement,QueryEvaluationException> subjIter=RyaDAOHelper.query(ryaDAO,subj,OWL.SAMEAS,null,conf,contxts);
    while (subjIter.hasNext()) {
      Statement st=subjIter.next();
      if (!currentSameAs.contains(st.getObject())) {
        Resource castedObj=(Resource)st.getObject();
        currentSameAs.add(castedObj);
        findSameAsChaining(castedObj,currentSameAs,contxts);
      }
    }
    subjIter.close();
    CloseableIteration<Statement,QueryEvaluationException> objIter=RyaDAOHelper.query(ryaDAO,null,OWL.SAMEAS,subj,conf,contxts);
    while (objIter.hasNext()) {
      Statement st=objIter.next();
      if (!currentSameAs.contains(st.getSubject())) {
        Resource sameAsSubj=st.getSubject();
        currentSameAs.add(sameAsSubj);
        findSameAsChaining(sameAsSubj,currentSameAs,contxts);
      }
    }
    objIter.close();
  }
 catch (  QueryEvaluationException e) {
    throw new InferenceEngineException(e);
  }
}

public static void reindex(Connection conn) throws SQLException {
  init(conn);
  removeAllTriggers(conn,TRIGGER_PREFIX);
  removeIndexFiles(conn);
  Statement stat=conn.createStatement();
  ResultSet rs=stat.executeQuery("SELECT * FROM " + SCHEMA + ".INDEXES");
  while (rs.next()) {
    String schema=rs.getString("SCHEMA");
    String table=rs.getString("TABLE");
    createTrigger(conn,schema,table);
    indexExistingRows(conn,schema,table);
  }
}

String toDot(){
  StringBuilder buf=new StringBuilder();
  for (  Type t : inferenceContext.undetvars) {
    UndetVar uv=(UndetVar)t;
    buf.append(String.format("var %s - upper bounds = %s, lower bounds = %s, eq bounds = %s\\n",uv.qtype,uv.getBounds(InferenceBound.UPPER),uv.getBounds(InferenceBound.LOWER),uv.getBounds(InferenceBound.EQ)));
  }
  return GraphUtils.toDot(nodes,"inferenceGraph" + hashCode(),buf.toString());
}

private void resizeTables(){
  if (mObjectDataUsed > mObjectData.length - MAX_DATA_SIZE) {
    mObjectData=Arrays.copyOf(mObjectData,mObjectData.length * 2);
  }
  if (mObjectCount < mTypes.length) {
    return;
  }
  mObjectOffset=Arrays.copyOf(mObjectOffset,mObjectOffset.length * 2);
  mTypes=Arrays.copyOf(mTypes,mTypes.length * 2);
  mObjects=Arrays.copyOf(mObjects,mObjects.length * 2);
  mRect=Arrays.copyOf(mRect,mRect.length * 2);
}

private boolean hasNextInetSocketAddress(){
  return nextInetSocketAddressIndex < inetSocketAddresses.size();
}

protected static double convertPercentileToX(double percentileLevelIteratedTo){
  double x=1 / (1.0D - (percentileLevelIteratedTo / 100.0D));
  return Math.log10(x);
}

public static String queueNameFromDBName(String dbName){
  String[] tokens=dbName.split("_",3);
  return tokens[2];
}

public String UseThis(int type,String id,String context){
  int i=FindSym(type,id,context);
  if (i == symtab.size())   return id;
 else   return ((SymTabEntry)symtab.elementAt(i)).useThis;
}

private float angle(TouchState s){
  return (float)Math.toDegrees(Math.atan2(s.yDown - s.yCurrent,s.xDown - s.xCurrent));
}

private int uint16FromData(int offset){
  return twoBytesToInt(Arrays.copyOfRange(data(),offset,offset + 2),Constants.CC2540_BYTE_ORDER);
}

protected static Pair<String,String> asrRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){
  final String shifterOperand=environment.getNextVariableString();
  final String shifterCarryOut=environment.getNextVariableString();
  final String isZeroCondition=environment.getNextVariableString();
  final String isLessCondition=environment.getNextVariableString();
  final String isGtEqCondition=environment.getNextVariableString();
  final String shifterCarryOutTmp1=environment.getNextVariableString();
  final String shifterCarryOutTmp2=environment.getNextVariableString();
  final String shifterCarryOutTmp3=environment.getNextVariableString();
  final String shifterCarryOutTmp4=environment.getNextVariableString();
  final String shifterOperandTmp1=environment.getNextVariableString();
  final String shifterOperandTmp2=environment.getNextVariableString();
  final String shifterOperandTmp3=environment.getNextVariableString();
  final String shifterOperandTmp4=environment.getNextVariableString();
  final String tmpRsRegister=environment.getNextVariableString();
  final String negativeTmpRsRegister=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  final String tmpVar5=environment.getNextVariableString();
  final String tmpVar6=environment.getNextVariableString();
  final String tmpVar7=environment.getNextVariableString();
  final String tmpVar8=environment.getNextVariableString();
  final String tmpVar9=environment.getNextVariableString();
  final String tmpVar10=environment.getNextVariableString();
  final String tmpVar11=environment.getNextVariableString();
  long baseOffset=offset;
  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue2,dWordSize,String.valueOf(0xFFL),dWordSize,tmpRsRegister));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpRsRegister,dWordSize,negativeTmpRsRegister));
  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpRsRegister,byteSize,isZeroCondition));
  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,"C",byteSize,isZeroCondition,byteSize,shifterCarryOutTmp1));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,String.valueOf(0),byteSize,isZeroCondition,dWordSize,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar1,dWordSize,registerNodeValue2,dWordSize,shifterOperandTmp1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpRsRegister,dWordSize,String.valueOf(0xFFFFFFE0L),dWordSize,tmpVar2));
  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar2,byteSize,isLessCondition));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dWordSize,registerNodeValue1,dWordSize,bitMaskHighestBitSet,dWordSize,tmpVar3));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,tmpVar3,dWordSize,negativeTmpRsRegister,dWordSize,tmpVar4));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,bitMaskHighestBitSet,dWordSize,negativeTmpRsRegister,dWordSize,tmpVar5));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpVar4,dWordSize,tmpVar5,dWordSize,tmpVar6));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,byteSize,isLessCondition,dWordSize,tmpVar7));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar6,dWordSize,tmpVar7,dWordSize,shifterOperandTmp2));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,tmpRsRegister,byteSize,oneSet,dWordSize,tmpVar8));
  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,zeroSet,dWordSize,tmpVar8,dWordSize,tmpVar8));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar8,dWordSize,tmpVar9));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar9,byteSize,isLessCondition,byteSize,shifterCarryOutTmp2));
  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,isZeroCondition,byteSize,isLessCondition,byteSize,tmpVar10));
  instructions.add(ReilHelpers.createBisz(baseOffset++,byteSize,tmpVar10,byteSize,isGtEqCondition));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,minusThirtyOneSet,byteSize,tmpVar11));
  instructions.add(ReilHelpers.createSub(baseOffset++,byteSize,zeroSet,byteSize,isGtEqCondition,dWordSize,shifterOperandTmp3));
  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,tmpVar11,byteSize,isGtEqCondition,byteSize,shifterCarryOutTmp3));
  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp1,byteSize,shifterCarryOutTmp2,byteSize,shifterCarryOutTmp4));
  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp3,byteSize,shifterCarryOutTmp4,byteSize,shifterCarryOut));
  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,shifterOperandTmp1,dWordSize,shifterOperandTmp2,dWordSize,shifterOperandTmp4));
  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,shifterOperandTmp3,dWordSize,shifterOperandTmp4,dWordSize,shifterOperand));
  return new Pair<String,String>(shifterOperand,shifterCarryOut);
}

private static String removeQuotesEncolosingOption(String fileName,String option) throws Exception {
  String option1=removeQuoteCharactersIfNecessary(fileName,option,'"');
  if (!option1.equals(option)) {
    return option1;
  }
  return removeQuoteCharactersIfNecessary(fileName,option,'\'');
}

@Override public String generateLabel(XYDataset dataset,int series){
  ParamChecks.nullNotPermitted(dataset,"dataset");
  String label=MessageFormat.format(this.formatPattern,createItemArray(dataset,series));
  return label;
}

private boolean matchStrings(String pattern,String str,Map<String,String> uriTemplateVariables){
  AntPathStringMatcher matcher=new AntPathStringMatcher(pattern,str,uriTemplateVariables);
  return matcher.matchStrings();
}

@Nullable public Dimension adjust(@NotNull Dimension newPreferredSize,@Nullable Dimension oldPreferredSize,@NotNull EditorImpl editor){
  if (oldPreferredSize == null || mySkip) {
    return newPreferredSize;
  }
  if (newPreferredSize.height != oldPreferredSize.height) {
    return newPreferredSize;
  }
  stripTimings();
  myTimings.add(System.currentTimeMillis());
  if (myTimings.size() < FREQUENT_SIZE_CHANGES_NUMBER) {
    return newPreferredSize;
  }
  boolean increaseWidth=newPreferredSize.width > oldPreferredSize.width;
  Dimension result;
  if (increaseWidth) {
    final int spaceWidth=EditorUtil.getSpaceWidth(Font.PLAIN,editor);
    newPreferredSize.width+=myReserveColumns * spaceWidth;
    myReserveColumns+=3;
    result=newPreferredSize;
  }
 else {
    result=oldPreferredSize;
  }
  scheduleSizeUpdate(editor);
  return result;
}

public RVMField findDeclaredField(Atom fieldName,Atom fieldDescriptor){
  for (  RVMField field : declaredFields) {
    if (field.getName() == fieldName && field.getDescriptor() == fieldDescriptor) {
      return field;
    }
  }
  return null;
}

public Quarter(Date time,TimeZone zone){
  this(time,zone,Locale.getDefault());
}

private Util(){
}

default B withDefault(String key,float value){
  return withDefault(key,Float.toString(value));
}

public static boolean readBoolean(final JSONArray jsonArray,final int index,final boolean required,final boolean notNull) throws JSONException {
  if (required) {
    return jsonArray.getBoolean(index);
  }
  if (notNull && jsonArray.isNull(index)) {
    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_ARRAY,index));
  }
  boolean value=false;
  if (!jsonArray.isNull(index)) {
    value=jsonArray.getBoolean(index);
  }
  return value;
}

protected static void autoBoxing(MethodVisitor mv,Type fieldType){
switch (fieldType.getSort()) {
case Type.BOOLEAN:
    mv.visitMethodInsn(INVOKESTATIC,"java/lang/Boolean","valueOf","(Z)Ljava/lang/Boolean;");
  break;
case Type.BYTE:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Byte","valueOf","(B)Ljava/lang/Byte;");
break;
case Type.CHAR:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Character","valueOf","(C)Ljava/lang/Character;");
break;
case Type.SHORT:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Short","valueOf","(S)Ljava/lang/Short;");
break;
case Type.INT:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Integer","valueOf","(I)Ljava/lang/Integer;");
break;
case Type.FLOAT:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Float","valueOf","(F)Ljava/lang/Float;");
break;
case Type.LONG:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Long","valueOf","(J)Ljava/lang/Long;");
break;
case Type.DOUBLE:
mv.visitMethodInsn(INVOKESTATIC,"java/lang/Double","valueOf","(D)Ljava/lang/Double;");
break;
}
}

public final void openPdfFile(final byte[] data) throws PdfException {
  final RandomAccessBuffer pdf_datafile;
  try {
    if (PdfFileReader.alwaysCacheInMemory == -1 || data.length < PdfFileReader.alwaysCacheInMemory) {
      pdf_datafile=new RandomAccessDataBuffer(data);
    }
 else {
      try {
        final File file=File.createTempFile("page",".bin",new File(ObjectStore.temp_dir));
        tempFileName=file.getAbsolutePath();
        final java.io.FileOutputStream a=new java.io.FileOutputStream(file);
        a.write(data);
        a.flush();
        a.close();
        pdf_datafile=new RandomAccessFileBuffer(tempFileName,"r");
      }
 catch (      final Exception e) {
        throw new RuntimeException("Unable to create temporary file in " + ObjectStore.temp_dir + ' '+ e);
      }
    }
    objectReader.init(pdf_datafile);
  }
 catch (  final Exception e) {
    LogWriter.writeLog("Exception " + e + " accessing file");
    throw new PdfException("Exception " + e + " accessing file");
  }
}

public static void main(String[] args){
  if (args.length < 2) {
    LOGGER.error("There must be at least two arguments");
    return;
  }
  int lastIndex=args.length - 1;
  Path[] files=getFiles(args);
  Main main=new Main();
  main.generate(files[lastIndex],Arrays.copyOf(files,lastIndex));
}

@Nullable E awaitMatch(int start){
  for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) {
    int index=(start + step) & ARENA_MASK;
    AtomicReference<Object> slot=arena[index];
    Object found=slot.get();
    if (found == FREE) {
      if (slot.compareAndSet(FREE,WAITER)) {
        int slotSpins=0;
        for (; ; ) {
          found=slot.get();
          if ((found != WAITER) && slot.compareAndSet(found,FREE)) {
            @SuppressWarnings("unchecked") E e=(E)found;
            return e;
          }
 else           if ((slotSpins >= SPINS_PER_STEP) && (found == WAITER) && (slot.compareAndSet(WAITER,FREE))) {
            totalSpins+=slotSpins;
            break;
          }
          slotSpins++;
        }
      }
    }
 else     if ((found != WAITER) && slot.compareAndSet(found,FREE)) {
      @SuppressWarnings("unchecked") E e=(E)found;
      return e;
    }
  }
  return null;
}

private ArrayList<Signature> constructOneSignatures(SetDBIDs[][] partitions,final long[][] markers){
  final int dim=partitions.length;
  ArrayList<Signature> signatures=new ArrayList<>();
  for (int d=0; d < dim; d++) {
    final DBIDs[] parts=partitions[d];
    if (parts == null) {
      continue;
    }
    final long[] marked=markers[d];
    for (int start=BitsUtil.nextSetBit(marked,0); start >= 0; ) {
      int end=BitsUtil.nextClearBit(marked,start + 1);
      end=(end == -1) ? dim : end;
      int[] signature=new int[dim << 1];
      Arrays.fill(signature,-1);
      signature[d << 1]=start;
      signature[(d << 1) + 1]=end - 1;
      HashSetModifiableDBIDs sids=unionDBIDs(parts,start,end);
      if (LOG.isDebugging()) {
        LOG.debug("1-signature: " + d + " "+ start+ "-"+ (end - 1));
      }
      signatures.add(new Signature(signature,sids));
      start=(end < dim) ? BitsUtil.nextSetBit(marked,end + 1) : -1;
    }
  }
  return signatures;
}

public void testTestBitPositive1(){
  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=7;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  assertTrue(!aNumber.testBit(number));
}

public static int findEndTrimNewlineChars(CharSequence s){
  for (int i=s.length(); i > 0; ) {
    if (s.charAt(i - 1) != '\n') {
      return i;
    }
    i--;
    if (i > 0 && s.charAt(i - 1) == '\r') {
      i--;
    }
  }
  return 0;
}

public static String assertJQ(SolrQueryRequest req,String... tests) throws Exception {
  return assertJQ(req,JSONTestUtil.DEFAULT_DELTA,tests);
}

public void popElemAttributeSet(){
  m_attrSetStack.pop();
}

private void calcCoordinates(final float x,final float[][] Trm,float charSpacing){
  final float[][] trm=new float[3][3];
  for (int xx=0; xx < 3; xx++) {
    System.arraycopy(Trm[xx],0,trm[xx],0,3);
  }
  x1=x;
  x2=trm[2][0] - (charSpacing * trm[0][0]);
  if (glyphData.isHorizontal()) {
    if (trm[1][0] < 0) {
      x1=x + trm[1][0] - (charSpacing * trm[0][0]);
      x2=trm[2][0];
    }
 else     if (trm[1][0] > 0) {
      x1=x;
      x2=trm[2][0];
    }
  }
 else   if (trm[1][0] > 0) {
    x1=trm[2][0];
    x2=x + trm[1][0] - (charSpacing * trm[0][0]);
  }
 else   if (trm[1][0] < 0) {
    x2=trm[2][0];
    x1=x + trm[1][0] - (charSpacing * trm[0][0]);
  }
}

public void printEntry(Writer w){
  try {
    String indent="                      ";
    int indentWidth=indent.length();
    HardcopyWriter ww=(HardcopyWriter)w;
    int textSpace=ww.getCharactersPerLine() - indentWidth - 1;
    String newLine="\n";
    w.write(newLine,0,1);
    String s="   ID:                " + _id;
    w.write(s,0,s.length());
    if (!(_consistNumber.equals(""))) {
      w.write(newLine,0,1);
      s="   Consist number:    " + _consistNumber;
      w.write(s,0,s.length());
    }
    if (!(_roadName.equals(""))) {
      w.write(newLine,0,1);
      s="   Road name:         " + _roadName;
      w.write(s,0,s.length());
    }
    if (!(_roadNumber.equals(""))) {
      w.write(newLine,0,1);
      s="   Road number:       " + _roadNumber;
      w.write(s,0,s.length());
    }
    if (!(_model.equals(""))) {
      w.write(newLine,0,1);
      s="   Model:             " + _model;
      w.write(s,0,s.length());
    }
    if (!(_loco1DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Lead Address:      " + _loco1DccAddress + "  "+ _loco1Direction;
      w.write(s,0,s.length());
    }
    if (!(_loco2DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Rear Address:      " + _loco2DccAddress + "  "+ _loco2Direction;
      w.write(s,0,s.length());
    }
    if (!(_loco3DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Mid1 Address:      " + _loco3DccAddress + "  "+ _loco3Direction;
      w.write(s,0,s.length());
    }
    if (!(_loco4DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Mid2 Address:      " + _loco4DccAddress + "  "+ _loco4Direction;
      w.write(s,0,s.length());
    }
    if (!(_loco5DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Mid3 Address:      " + _loco5DccAddress + "  "+ _loco5Direction;
      w.write(s,0,s.length());
    }
    if (!(_loco6DccAddress.equals(""))) {
      w.write(newLine,0,1);
      s="   Mid4 Address:      " + _loco6DccAddress + "  "+ _loco6Direction;
      w.write(s,0,s.length());
    }
    if (!(_comment.equals(""))) {
      Vector<String> commentVector=wrapComment(_comment,textSpace);
      int k=0;
      w.write(newLine,0,1);
      s="   Comment:           " + commentVector.elementAt(k);
      w.write(s,0,s.length());
      k++;
      while (k < commentVector.size()) {
        String token=commentVector.elementAt(k);
        if (!token.equals("\n")) {
          s=indent + token;
        }
 else {
          s=token;
        }
        w.write(s,0,s.length());
        k++;
      }
    }
    w.write(newLine,0,1);
  }
 catch (  IOException e) {
    log.error("Error printing ConsistRosterEntry: " + e);
  }
}

protected java.util.Date fromJulian(int julian){
  YMD ymd=new YMD(julian);
  GregorianCalendar cal=new GregorianCalendar(ymd.year,ymd.month - 1,ymd.day);
  return cal.getTime();
}

public synchronized boolean removeLast(K obj){
  if (peekLast() != obj) {
    return false;
  }
  array=Arrays.copyOf(array,array.length - 1);
  return true;
}

private boolean serializeCompactRDFStructProp(XMPNode node,int indent,boolean hasRDFResourceQual) throws XMPException, IOException {
  boolean hasAttrFields=false;
  boolean hasElemFields=false;
  boolean emitEndTag=true;
  for (Iterator ic=node.iterateChildren(); ic.hasNext(); ) {
    XMPNode field=(XMPNode)ic.next();
    if (canBeRDFAttrProp(field)) {
      hasAttrFields=true;
    }
 else {
      hasElemFields=true;
    }
    if (hasAttrFields && hasElemFields) {
      break;
    }
  }
  if (hasRDFResourceQual && hasElemFields) {
    throw new XMPException("Can't mix rdf:resource qualifier and element fields",XMPError.BADRDF);
  }
  if (!node.hasChildren()) {
    write(" rdf:parseType=\"Resource\"/>");
    writeNewline();
    emitEndTag=false;
  }
 else   if (!hasElemFields) {
    serializeCompactRDFAttrProps(node,indent + 1);
    write("/>");
    writeNewline();
    emitEndTag=false;
  }
 else   if (!hasAttrFields) {
    write(" rdf:parseType=\"Resource\">");
    writeNewline();
    serializeCompactRDFElementProps(node,indent + 1);
  }
 else {
    write('>');
    writeNewline();
    writeIndent(indent + 1);
    write(RDF_STRUCT_START);
    serializeCompactRDFAttrProps(node,indent + 2);
    write(">");
    writeNewline();
    serializeCompactRDFElementProps(node,indent + 1);
    writeIndent(indent + 1);
    write(RDF_STRUCT_END);
    writeNewline();
  }
  return emitEndTag;
}

public default UtilityTable queryUtil(BNetwork network,String queryVar,Assignment evidence){
  return queryUtil(new Query.UtilQuery(network,Arrays.asList(queryVar),evidence));
}

public static float[] stringListToNumeric(List<String> scoreList) throws NumberFormatException {
  float[] scores=new float[scoreList.size()];
  int scoreId=0;
  for (  String score : scoreList) {
    float floatScore=(float)Double.parseDouble(score);
    if (Float.isNaN(floatScore)) {
      throw new NumberFormatException("Unparseable number: " + score);
    }
    scores[scoreId++]=floatScore;
  }
  return scores;
}

@Override public void next(){
  currentImage=Optional.of(addIndexAndGetImageByOffset(+1));
  eventBus.post(new SourceHasPendingUpdateEvent(this));
}

protected void parse(DataInputStream stream) throws Exception {
  int size=stream.readInt();
  int ret, read=0;
  data=new byte[size];
  while (size > 0) {
    ret=stream.read(data,read,size);
    size-=ret;
    read+=ret;
  }
}

private List<Activity> findBestInsertion(List<Activity> partialRoute,boolean allowAsMajor){
  int startIndex=1;
  int endIndex=partialRoute.size() - 1;
  if (allowAsMajor) {
    startIndex=0;
    endIndex=partialRoute.size();
  }
  List<Activity> newList=partialRoute;
  double best=Double.POSITIVE_INFINITY;
  List<Activity> bestList=null;
  for (int i=startIndex; i <= endIndex; i++) {
    List<Activity> tmpList=new ArrayList<>(newList);
    Activity tmpActivity=getRelocationActivity();
    tmpList.add(i,tmpActivity);
    double tmp=evaluateList(tmpList);
    if (tmp < best) {
      if (i == 0) {
        tmpActivity.setType("major");
        tmpActivity.setEndTime(Time.parseTime("08:00:00"));
      }
 else       if (i == partialRoute.size()) {
        tmpActivity.setType("major");
      }
 else {
        tmpActivity.setType("minor");
        tmpActivity.setMaximumDuration(Time.parseTime("00:20:00"));
      }
      best=tmp;
      bestList=tmpList;
    }
  }
  return bestList;
}

Calendar toCalendar(String value,String pattern,Locale locale){
  Calendar calendar=null;
  try {
    DateFormat format=(locale == null) ? new SimpleDateFormat(pattern) : new SimpleDateFormat(pattern,locale);
    format.setLenient(false);
    format.parse(value);
    calendar=format.getCalendar();
  }
 catch (  Exception e) {
    fail("Error creating Calendar value ='" + value + ", pattern='"+ pattern+ "' "+ e.toString());
  }
  return calendar;
}

public void writeShort(int value) throws IOException {
  checkWritePrimitiveTypes();
  primitiveTypes.writeShort(value);
}

private boolean isInitialized(){
  return poolNames != null && !poolNames.isEmpty();
}

public void onRegisterClick(View view){
  Intent register=new Intent(Intent.ACTION_VIEW,Uri.parse(getString(R.string.welcome_link_url)));
  setResult(RESULT_CANCELED);
  startActivity(register);
}

private void registerExtraValidSubject(String subject){
  extraValidSubjects.add(subject);
  restoredStatements.addAll(unknownSubjects.removeAll(subject));
}

public static String trimLine(String line){
  int idx=line.indexOf("//");
  if (idx != -1) {
    line=line.substring(0,idx);
  }
  return line.trim();
}

public double distance2(double p1,double p2){
  return (p1 - p2) * (p1 - p2);
}

public static void appendInstruction(OFFlowMod.Builder fmb,OFInstruction inst){
  List<OFInstruction> newIl=new ArrayList<OFInstruction>();
  List<OFInstruction> oldIl=fmb.getInstructions();
  if (oldIl != null) {
    newIl.addAll(fmb.getInstructions());
  }
  for (  OFInstruction i : newIl) {
    if (i.getType() == inst.getType()) {
      newIl.remove(i);
    }
  }
  newIl.add(inst);
  fmb.setInstructions(newIl);
}

public Iterator<T> iterator(){
  return orderList.iterator();
}

private void verifyDomainsIsNotInUse(StringSet domains){
  checkForActiveTenantsUsingDomains(domains);
  checkForVdcRolesUsingDomains(domains);
  checkForTenantRolesUsingDomains(domains);
  checkForUserGroupsUsingDomains(domains);
}

private Hashtable<IPoint,List<ICircle>> filter(Hashtable<IPoint,ICircle[]> circleIntersections){
  Hashtable<IPoint,List<ICircle>> real=new Hashtable<IPoint,List<ICircle>>();
  for (  IPoint pt : circleIntersections.keySet()) {
    ICircle[] circs=circleIntersections.get(pt);
    for (int i=0; i < circs.length - 1; i++) {
      for (int j=i + 1; j < circs.length; j++) {
        IPoint[] pts=intersects(circs[i],circs[j]);
        if (pts != null) {
          for (          IPoint p : pts) {
            report(real,p,circs[i],circs[j]);
          }
        }
      }
    }
  }
  return real;
}

public void initWithoutJUnitForFixture(Class fixture,Method method){
  this.testClass=fixture;
  this.testMethodName=method.getName();
}

public void clear(){
  oredCriteria.clear();
  orderByClause=null;
  distinct=false;
}

public long sigignore(){
  return Long.parseLong(fields[32]);
}

protected JavaType findSerializationType(Annotated a,boolean useStaticTyping,JavaType declaredType){
  Class<?> serClass=_annotationIntrospector.findSerializationType(a);
  if (serClass != null) {
    Class<?> rawDeclared=declaredType.getRawClass();
    if (serClass.isAssignableFrom(rawDeclared)) {
      declaredType=declaredType.widenBy(serClass);
    }
 else {
      if (!rawDeclared.isAssignableFrom(serClass)) {
        throw new IllegalArgumentException("Illegal concrete-type annotation for method '" + a.getName() + "': class "+ serClass.getName()+ " not a super-type of (declared) class "+ rawDeclared.getName());
      }
      declaredType=_config.constructSpecializedType(declaredType,serClass);
    }
    useStaticTyping=true;
  }
  JavaType secondary=BeanSerializerFactory.modifySecondaryTypesByAnnotation(_config,a,declaredType);
  if (secondary != declaredType) {
    useStaticTyping=true;
    declaredType=secondary;
  }
  if (!useStaticTyping) {
    JsonSerialize.Typing typing=_annotationIntrospector.findSerializationTyping(a);
    if (typing != null) {
      useStaticTyping=(typing == JsonSerialize.Typing.STATIC);
    }
  }
  return useStaticTyping ? declaredType : null;
}

private static void convert(AScene scene,InputStream in,OutputStream out) throws IOException, DefException, ParseException {
  IndexUnit iu=JavaParser.parse(in);
  extractScene(iu,scene);
  try (Writer w=new BufferedWriter(new OutputStreamWriter(out))){
    IndexFileWriter.write(scene,w);
  }
 }

public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2){
  Map map=of();
  map.put(k1,v1);
  map.put(k2,v2);
  return map;
}

@Override public void write(char[] chr) throws IOException {
  out.write(chr);
}

public boolean boundScroll(){
  float curScroll=getStackScroll();
  float newScroll=getBoundedStackScroll(curScroll);
  if (Float.compare(newScroll,curScroll) != 0) {
    setStackScroll(newScroll);
    return true;
  }
  return false;
}

public static void load(marytts.modules.synthesis.Voice maryVoice) throws NoSuchPropertyException {
  if (mary2freettsVoices == null)   mary2freettsVoices=new HashMap<marytts.modules.synthesis.Voice,com.sun.speech.freetts.Voice>();
  if (freetts2maryVoices == null)   freetts2maryVoices=new HashMap<com.sun.speech.freetts.Voice,marytts.modules.synthesis.Voice>();
  if (mary2freettsVoices.containsKey(maryVoice))   return;
  load(maryVoice,createFreeTTSVoice(maryVoice));
}

public void append(int key,double value){
  if (mSize != 0 && key <= mKeys[mSize - 1]) {
    put(key,value);
    return;
  }
  int pos=mSize;
  if (pos >= mKeys.length) {
    int n=ArrayUtils.idealIntArraySize(pos + 1);
    int[] nkeys=new int[n];
    double[] nvalues=new double[n];
    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);
    System.arraycopy(mValues,0,nvalues,0,mValues.length);
    mKeys=nkeys;
    mValues=nvalues;
  }
  mKeys[pos]=key;
  mValues[pos]=value;
  mSize=pos + 1;
}

public synchronized void addIncrementalClassifierListener(IncrementalClassifierListener cl){
  m_incrementalClassifierListeners.add(cl);
}

public float readR4() throws java.io.IOException {
  return Float.intBitsToFloat((int)readDWORD());
}

public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {
  java.security.cert.Certificate cert;
  List certs=new ArrayList();
  while ((cert=engineGenerateCertificate(inStream)) != null) {
    certs.add(cert);
  }
  return certs;
}

public static boolean filesExistOnDestButNotSrc(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException {
  Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter);
  Set<FileStatus> destFileStatuses=getFileStatusesRecursive(conf,dest,filter);
  Map<String,Long> srcFileSizes=null;
  Map<String,Long> destFileSizes=null;
  try {
    srcFileSizes=getRelPathToSizes(src,srcFileStatuses);
    destFileSizes=getRelPathToSizes(dest,destFileStatuses);
  }
 catch (  ArgumentException e) {
    throw new IOException("Invalid file statuses!",e);
  }
  for (  String file : destFileSizes.keySet()) {
    if (!srcFileSizes.containsKey(file)) {
      LOG.warn(String.format("%s exists on %s but not in %s",file,dest,src));
      return true;
    }
  }
  return false;
}

protected void convertOrder(SqlSelect select,Blackboard bb,RelCollation collation,List<SqlNode> orderExprList,SqlNode offset,SqlNode fetch){
  if (select.getOrderList() == null || select.getOrderList().getList().isEmpty()) {
    assert collation.getFieldCollations().isEmpty();
    if ((offset == null || ((SqlLiteral)offset).bigDecimalValue().equals(BigDecimal.ZERO)) && fetch == null) {
      return;
    }
  }
  bb.setRoot(LogicalSort.create(bb.root,collation,offset == null ? null : convertExpression(offset),fetch == null ? null : convertExpression(fetch)),false);
  if (orderExprList.size() > 0 && !bb.top) {
    final List<RexNode> exprs=new ArrayList<>();
    final RelDataType rowType=bb.root.getRowType();
    final int fieldCount=rowType.getFieldCount() - orderExprList.size();
    for (int i=0; i < fieldCount; i++) {
      exprs.add(rexBuilder.makeInputRef(bb.root,i));
    }
    bb.setRoot(LogicalProject.create(bb.root,exprs,rowType.getFieldNames().subList(0,fieldCount)),false);
  }
}

public void tickBlock(BlockPos pos){
  List<BlockPos> validCoords=new ArrayList<>();
  for (int xOffset=-TICK_RANGE; xOffset <= TICK_RANGE; xOffset++) {
    for (int zOffset=-TICK_RANGE; zOffset <= TICK_RANGE; zOffset++) {
      if (xOffset == 0 && zOffset == 0)       continue;
      if (isValidSwapPosition(pos.add(xOffset,0,zOffset)))       validCoords.add(pos.add(xOffset,0,zOffset));
    }
  }
  if (!validCoords.isEmpty() && !world.isRemote) {
    BlockPos toSwap=validCoords.get(rand.nextInt(validCoords.size()));
    world.setBlockState(toSwap,stateToSet,1 | 2);
  }
}

public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){
  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);
  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);
  if (cursor == null) {
    return 0;
  }
  int quantity=0;
  try {
    while (cursor.moveToNext()) {
      int stateIndex=cursor.getInt(2);
      PurchaseState state=PurchaseState.valueOf(stateIndex);
      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {
        quantity+=1;
      }
    }
    updatePurchasedItem(productId,quantity);
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return quantity;
}

private void configureMessageLabel(JLabel label){
  Color color=(Color)DefaultLookup.get(optionPane,this,"OptionPane.messageForeground");
  if (color != null) {
    label.setForeground(color);
  }
  Font messageFont=(Font)DefaultLookup.get(optionPane,this,"OptionPane.messageFont");
  if (messageFont != null) {
    label.setFont(messageFont);
  }
}

public void removeAllLimitLines(){
  mLimitLines.clear();
}

private boolean linkFirst(Node<E> node){
  if (count >= capacity)   return false;
  Node<E> f=first;
  node.next=f;
  first=node;
  if (last == null)   last=node;
 else   f.prev=node;
  ++count;
  notEmpty.signal();
  return true;
}

default Filterable<T> removeAll(final Stream<? extends T> stream){
  final Set<T> set=stream.collect(Collectors.toSet());
  return filterNot(null);
}

public void drawLine(List<mxPoint> pts,Map<String,Object> style){
  Color penColor=mxUtils.getStyleStrokeColor(style,Color.BLACK);
  float penWidth=mxUtils.getStyleStrokeWidth(style,(float)1);
  if (penColor != null && penWidth > 0) {
    String shape=mxUtils.getString(style,mxConstants.STYLE_SHAPE,"");
    if (shape.equals(mxConstants.SHAPE_ARROW)) {
      setStroke(penWidth,style);
      mxPoint p0=pts.get(0);
      mxPoint pe=pts.get(pts.size() - 1);
      Rectangle bounds=new Rectangle(p0.getPoint());
      bounds.add(pe.getPoint());
      Color fillColor=mxUtils.getStyleFillColor(style);
      Paint fillPaint=getFillPaint(bounds,fillColor,style);
      boolean shadow=mxUtils.isTrue(style,mxConstants.STYLE_SHADOW,false);
      drawArrow(pts,fillColor,fillPaint,penColor,shadow);
    }
 else {
      Object startMarker=style.get(mxConstants.STYLE_STARTARROW);
      Object endMarker=style.get(mxConstants.STYLE_ENDARROW);
      float startSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_STARTSIZE,mxConstants.DEFAULT_MARKERSIZE));
      float endSize=(float)(mxUtils.getFloat(style,mxConstants.STYLE_ENDSIZE,mxConstants.DEFAULT_MARKERSIZE));
      boolean rounded=mxUtils.isTrue(style,mxConstants.STYLE_ROUNDED,false);
      drawConnector(pts,penWidth,penColor,startMarker,startSize,endMarker,endSize,rounded,style);
    }
  }
}

private static MeteringRectangle[] regionsForNormalizedCoord(float nx,float ny,float fraction,final Rect cropRegion,int sensorOrientation){
  int minCropEdge=Math.min(cropRegion.width(),cropRegion.height());
  int halfSideLength=(int)(0.5f * fraction * minCropEdge);
  PointF nsc=CameraUtil.normalizedSensorCoordsForNormalizedDisplayCoords(nx,ny,sensorOrientation);
  int xCenterSensor=(int)(cropRegion.left + nsc.x * cropRegion.width());
  int yCenterSensor=(int)(cropRegion.top + nsc.y * cropRegion.height());
  Rect meteringRegion=new Rect(xCenterSensor - halfSideLength,yCenterSensor - halfSideLength,xCenterSensor + halfSideLength,yCenterSensor + halfSideLength);
  meteringRegion.left=CameraUtil.clamp(meteringRegion.left,cropRegion.left,cropRegion.right);
  meteringRegion.top=CameraUtil.clamp(meteringRegion.top,cropRegion.top,cropRegion.bottom);
  meteringRegion.right=CameraUtil.clamp(meteringRegion.right,cropRegion.left,cropRegion.right);
  meteringRegion.bottom=CameraUtil.clamp(meteringRegion.bottom,cropRegion.top,cropRegion.bottom);
  return new MeteringRectangle[]{new MeteringRectangle(meteringRegion,CAMERA2_REGION_WEIGHT)};
}

@Override public void flush() throws IOException {
  flushBuffer();
  _outputStream.flush();
}

public Vector(double comp[]) throws NegativeArraySizeException {
  int n=comp.length;
  if (n <= 0)   throw new NegativeArraySizeException("Vector components cannot be empty");
  components=new double[n];
  System.arraycopy(comp,0,components,0,n);
}

@Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){
  if ((name != null) && name.equals(aname)) {
    this.access=attr_access;
  }
  super.visitInnerClass(aname,outerName,innerName,attr_access);
}

public long lonToPixel(double lon){
  return (long)((lon + 180) / 360 * Math.pow(2,zoom) * 256);
}

public static boolean worldFileValuesAppearGeographic(AVList values){
  double xLocation;
  double yLocation;
  double xPixelSize;
  double yPixelSize;
  Object o=values.getValue(WORLD_FILE_X_LOCATION);
  if (o != null && o instanceof Double)   xLocation=(Double)o;
 else   return false;
  o=values.getValue(WORLD_FILE_Y_LOCATION);
  if (o != null && o instanceof Double)   yLocation=(Double)o;
 else   return false;
  o=values.getValue(WORLD_FILE_X_PIXEL_SIZE);
  if (o != null && o instanceof Double)   xPixelSize=(Double)o;
 else   return false;
  o=values.getValue(WORLD_FILE_Y_PIXEL_SIZE);
  if (o != null && o instanceof Double)   yPixelSize=(Double)o;
 else   return false;
  return (Angle.isValidLongitude(xPixelSize) && Angle.isValidLatitude(yPixelSize) && Angle.isValidLongitude(xLocation)&& Angle.isValidLatitude(yLocation));
}

public void storeInRegister(int registerNumber) throws IOException {
  print("register",new String[]{Integer.toString(registerNumber)});
}

public void remove(SessionID sessionID){
  remoteSessionSet.remove(sessionID);
}

@Override public synchronized String toString(){
  if (elementCount == 0) {
    return "[]";
  }
  int length=elementCount - 1;
  StringBuilder buffer=new StringBuilder(elementCount * 16);
  buffer.append('[');
  for (int i=0; i < length; i++) {
    if (elementData[i] == this) {
      buffer.append("(this Collection)");
    }
 else {
      buffer.append(elementData[i]);
    }
    buffer.append(", ");
  }
  if (elementData[length] == this) {
    buffer.append("(this Collection)");
  }
 else {
    buffer.append(elementData[length]);
  }
  buffer.append(']');
  return buffer.toString();
}

public Iterator<AbstractPage> childIterator(final boolean dirtyNodesOnly){
  if (dirtyNodesOnly) {
    return new DirtyChildIterator(this);
  }
 else {
    return new ChildIterator();
  }
}

public void enable() throws IOException {
synchronized (optOutLock) {
    if (isOptOut()) {
      configuration.set("opt-out",false);
      configuration.save(configurationFile);
    }
    if (task == null) {
      start();
    }
  }
}

public HMACT64(byte[] key){
  super("HMACT64");
  int length=Math.min(key.length,BLOCK_LENGTH);
  for (int i=0; i < length; i++) {
    ipad[i]=(byte)(key[i] ^ IPAD);
    opad[i]=(byte)(key[i] ^ OPAD);
  }
  for (int i=length; i < BLOCK_LENGTH; i++) {
    ipad[i]=IPAD;
    opad[i]=OPAD;
  }
  try {
    md5=MessageDigest.getInstance("MD5");
  }
 catch (  Exception ex) {
    throw new IllegalStateException(ex.getMessage());
  }
  engineReset();
}

public boolean startsWith(String string){
  if (string == null)   return false;
  int strlen=string.length();
  if (_length < strlen)   return false;
  char[] buffer=_buffer;
  int offset=_offset;
  while (--strlen >= 0) {
    if (buffer[offset + strlen] != string.charAt(strlen))     return false;
  }
  return true;
}

private void writeRawBytesInternal(final ByteBuffer value) throws IOException {
  int length=value.remaining();
  if (limit - position >= length) {
    value.get(buffer,position,length);
    position+=length;
    totalBytesWritten+=length;
  }
 else {
    final int bytesWritten=limit - position;
    value.get(buffer,position,bytesWritten);
    length-=bytesWritten;
    position=limit;
    totalBytesWritten+=bytesWritten;
    refreshBuffer();
    while (length > limit) {
      value.get(buffer,0,limit);
      output.write(buffer,0,limit);
      length-=limit;
      totalBytesWritten+=limit;
    }
    value.get(buffer,0,length);
    position=length;
    totalBytesWritten+=length;
  }
}

public boolean isSrcClass(SootClass clz){
  return srcClasses.contains(clz.getName());
}

private void processLDIF(Connection conn,String path) throws UpgradeException {
  ChangeRecordReader reader=null;
  try {
    if (DEBUG.messageEnabled()) {
      DEBUG.message("Processing LDIF file under " + path);
    }
    Map<String,String> tags=new HashMap<String,String>(2);
    tags.put("@SM_CONFIG_ROOT_SUFFIX@",baseDN);
    tags.put("@DB_NAME@","userRoot");
    String content=AMSetupServlet.readFile(path);
    String tagSwapped=StringUtils.tagSwap(content,tags);
    reader=new LDIFChangeRecordReader(new ByteArrayInputStream(tagSwapped.getBytes(Charset.forName("UTF-8"))));
    ChangeRecordWriter writer=new ConnectionChangeRecordWriter(conn);
    while (reader.hasNext()) {
      writer.writeChangeRecord(reader.readChangeRecord());
    }
  }
 catch (  IOException ioe) {
    DEBUG.error("An error occurred while processing " + path,ioe);
    throw new UpgradeException(ioe);
  }
 finally {
    IOUtils.closeIfNotNull(reader);
  }
}

private void printProgress(long row,long rowFrom,long rowTill){
  long rowsProcessed=row + chunkSize - rowFrom;
  if (rowsProcessed > (rowTill - rowFrom))   rowsProcessed=(rowTill - rowFrom);
  print(String.format("%d%%",(int)(((double)(rowsProcessed) / (double)(rowTill - rowFrom)) * 100.0f)));
}

void postRemoteReleaseLock(Object objectName) throws InterruptedException {
  if (!acquireDestroyReadLock(0)) {
    return;
  }
  try {
    checkDestroyed();
    drainPermittedRequests();
    grantLock(objectName);
  }
 catch (  LockServiceDestroyedException e) {
  }
catch (  LockGrantorDestroyedException e) {
  }
 finally {
    releaseDestroyReadLock();
  }
}

public final ArrayList<PositionRecord> loadPositions(final int session,final Double minLat,final Double maxLat,final Double minLon,final Double maxLon){
  final ArrayList<PositionRecord> positions=new ArrayList<>();
  String selection=Schema.COL_SESSION_ID + " = ?";
  Cursor cursor=null;
  List<String> selectionArgs=null;
  if (minLat != null & maxLat != null && minLon != null && maxLon != null) {
    selectionArgs=new ArrayList<>();
    selectionArgs.add(String.valueOf(session));
    selectionArgs.add(String.valueOf(minLat));
    selectionArgs.add(String.valueOf(maxLat));
    selectionArgs.add(String.valueOf(minLon));
    selectionArgs.add(String.valueOf(maxLon));
    selection+="AND (" + Schema.COL_LATITUDE + " > ? AND "+ Schema.COL_LATITUDE+ " < ?) AND ("+ Schema.COL_LONGITUDE+ " > ? AND "+ Schema.COL_LONGITUDE+ " < ?)";
    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,selection,selectionArgs.toArray(new String[0]),Schema.COL_TIMESTAMP);
  }
 else {
    Log.v(TAG,"No boundaries provided, loading all positions");
    cursor=contentResolver.query(ContentProvider.CONTENT_URI_POSITION,null,null,null,Schema.COL_TIMESTAMP);
  }
  while (cursor.moveToNext()) {
    positions.add(positionFromCursor(cursor));
  }
  cursor.close();
  return positions;
}

public static CheckBox createToggle(String text,Image icon){
  CheckBox cb=new CheckBox(text,icon);
  cb.setToggle(true);
  return cb;
}

public long addCompletedBatch(RequestBatch requestBatch){
  long completedBatchId=insertBatchAsCompleted(requestBatch);
  for (  Request request : requestBatch.getRequests()) {
    request.setBatchId(completedBatchId);
    File file=new File(request.getDestinationPath());
    long length=file.exists() ? file.length() : 0;
    insertRequestAsCompletedDownload(request.getDestinationPath(),length,request);
  }
  return completedBatchId;
}

@TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void dequeueOutputBuffer(MediaCodec codec,ByteBuffer[] outputBuffers,int index,MediaCodec.BufferInfo info){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
    ByteBuffer buffer=outputBuffers[index];
    Log.i("size/remaining: " + info.size + "/"+ buffer.remaining());
    if (info.size <= buffer.remaining()) {
      final byte[] bufferCopied=new byte[info.size];
      buffer.get(bufferCopied);
      codec.releaseOutputBuffer(index,false);
      addEncoded(bufferCopied);
      if (Log.DEBUG) {
        AudioUtils.showSomeBytes("out",bufferCopied);
      }
    }
 else {
      Log.e("size > remaining");
      codec.releaseOutputBuffer(index,false);
    }
  }
}

public static DefaultJobDefinition retryableFixedDelayJobDefinition(final String jobType,final String jobName,final String description,final Duration fixedDelay,final int restarts,final int retries,final Optional<Duration> retryDelay,final Optional<Duration> maxAge){
  return new DefaultJobDefinition(jobType,jobName,description,maxAge,Optional.of(fixedDelay),Optional.empty(),restarts,retries,retryDelay);
}

public static _Fields findByThriftId(int fieldId){
switch (fieldId) {
case 1:
    return MESSAGE;
default :
  return null;
}
}

public static void putLong(long addr,long val){
  if (UNALIGNED)   UNSAFE.putLong(addr,val);
 else   putLongByByte(addr,val,BIG_ENDIAN);
}

public static File createMinimalSplit(String inputFolder,int numFolds,int numAvailableJCas,boolean isSequence) throws Exception {
  File outputFolder=new File(inputFolder,"output");
  int splitNum=(int)Math.ceil(numFolds / (double)numAvailableJCas);
  CollectionReaderDescription createReader=CollectionReaderFactory.createReaderDescription(BinaryCasReader.class,BinaryCasReader.PARAM_SOURCE_LOCATION,inputFolder,BinaryCasReader.PARAM_PATTERNS,"*.bin");
  AnalysisEngineDescription multiplier=AnalysisEngineFactory.createEngineDescription(FoldClassificationUnitCasMultiplier.class,FoldClassificationUnitCasMultiplier.PARAM_REQUESTED_SPLITS,splitNum,FoldClassificationUnitCasMultiplier.PARAM_USE_SEQUENCES,isSequence);
  AnalysisEngineDescription xmiWriter=AnalysisEngineFactory.createEngineDescription(BinaryCasWriter.class,BinaryCasWriter.PARAM_TARGET_LOCATION,outputFolder.getAbsolutePath(),BinaryCasWriter.PARAM_FORMAT,"6+");
  AnalysisEngineDescription both=AnalysisEngineFactory.createEngineDescription(multiplier,xmiWriter);
  SimplePipeline.runPipeline(createReader,both);
  isNumberOfCasCreatedLargerEqualNumFolds(outputFolder,numFolds);
  return outputFolder;
}

public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {
  return signXML(doc,certAlias,null);
}

public boolean displayPopup(){
  if (m_popupClass == null)   return false;
  try {
    Window win=SwingUtilities.getWindowAncestor(this);
    CFieldPopup popup=null;
    if (win instanceof Dialog) {
      Constructor<?> constructor=m_popupClass.getConstructor(new Class<?>[]{Dialog.class,String.class,Boolean.class});
      popup=(CFieldPopup)constructor.newInstance(new Object[]{(Dialog)win,m_title,new Boolean(true)});
    }
 else     if (win instanceof Frame) {
      Constructor<?> constructor=m_popupClass.getConstructor(new Class[]{Frame.class,String.class,Boolean.class});
      popup=(CFieldPopup)constructor.newInstance(new Object[]{(Frame)win,m_title,new Boolean(true)});
    }
    if (popup == null)     return false;
    popup.setValue(m_editor.getItem());
    popup.setFormat(m_editor.getFormat());
    popup.show();
    m_editor.setItem(popup.getValue());
    popup=null;
  }
 catch (  Exception e) {
    notifyUser(e);
  }
  return false;
}

public AbstractSdfWriter(final PrereadType prereadType,final boolean hasQuality,boolean hasNames,boolean compressed,final SequenceType type){
  mPrereadType=prereadType;
  mPrereadArm=PrereadArm.UNKNOWN;
  mSdfId=new SdfId();
  mNameHandler=new SequenceNameHandler();
  mSequenceType=type;
  mFirstValid=mSequenceType.firstValid();
  mResidueCounts=new long[mSequenceType.numberKnownCodes() + mSequenceType.firstValid()];
  mNHistogram=new long[MAX_HISTOGRAM];
  mPosHistogram=new long[MAX_HISTOGRAM];
  mQSAveragePerPos=new double[MAX_HISTOGRAM];
  mPositionCounts=new long[MAX_HISTOGRAM];
  mGlobalQSAverage=0.0;
  mDataHashFunction=new PrereadHashFunction();
  mQualityHashFunction=new PrereadHashFunction();
  mNameHashFunction=new PrereadHashFunction();
  mNameSuffixHashFunction=new PrereadHashFunction();
  mHasQuality=hasQuality;
  mHasNames=hasNames;
  mCompressed=compressed;
  mSeqDataChecksum=new CRC32();
  mQualDataChecksum=new CRC32();
}

FiringPlan guessBestFiringPlanUnderHeat(Entity shooter,@Nullable EntityState shooterState,Targetable target,@Nullable EntityState targetState,int maxHeat,IGame game){
  if (maxHeat < 0) {
    maxHeat=0;
  }
  FiringPlan alphaStrike=guessFullFiringPlan(shooter,shooterState,target,targetState,game);
  if (alphaStrike.getHeat() <= maxHeat && !(shooter instanceof Infantry) && !(shooter instanceof BattleArmor)) {
    return alphaStrike;
  }
  FiringPlan heatPlans[]=calcFiringPlansUnderHeat(shooter,alphaStrike);
  Arrays.sort(heatPlans);
  if (heatPlans.length > 0) {
    return heatPlans[0];
  }
 else {
    return new FiringPlan(target);
  }
}

public static VolumeGroupRestRep map(VolumeGroup from){
  if (from == null) {
    return null;
  }
  VolumeGroupRestRep rep=new VolumeGroupRestRep();
  mapDataObjectFields(from,rep);
  rep.setDescription(from.getDescription());
  rep.setRoles(from.getRoles());
  rep.setParent(toRelatedResource(ResourceTypeEnum.VOLUME_GROUP,from.getParent()));
  rep.setMigrationGroupBy(from.getMigrationGroupBy());
  rep.setMigrationType(from.getMigrationType());
  return rep;
}

public int postFiles(String[] args,int startIndexInArgs,OutputStream out,String type){
  reset();
  int filesPosted=0;
  for (int j=startIndexInArgs; j < args.length; j++) {
    File srcFile=new File(args[j]);
    if (srcFile.isDirectory() && srcFile.canRead()) {
      filesPosted+=postDirectory(srcFile,out,type);
    }
 else     if (srcFile.isFile() && srcFile.canRead()) {
      filesPosted+=postFiles(new File[]{srcFile},out,type);
    }
 else {
      File parent=srcFile.getParentFile();
      if (parent == null)       parent=new File(".");
      String fileGlob=srcFile.getName();
      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);
      File[] files=parent.listFiles(ff);
      if (files == null || files.length == 0) {
        warn("No files or directories matching " + srcFile);
        continue;
      }
      filesPosted+=postFiles(parent.listFiles(ff),out,type);
    }
  }
  return filesPosted;
}

@Override public final String toString(){
  if (stringRep == null) {
    StringBuilder buffer=new StringBuilder();
    buffer.append(this.name);
    buffer.append(':');
    buffer.append(Integer.toString(this.defaultPort));
    stringRep=buffer.toString();
  }
  return stringRep;
}

public void clearSearchable(){
  searchables.clear();
}

public void addActionListener(ActionListener newListener){
  m_listeners.add(newListener);
}

@Deprecated public ShapelessRecipe addIngredient(int count,Material ingredient,int rawdata){
  Validate.isTrue(ingredients.size() + count <= 9,"Shapeless recipes cannot have more than 9 ingredients");
  if (rawdata == -1) {
    rawdata=Short.MAX_VALUE;
  }
  while (count-- > 0) {
    ingredients.add(new ItemStack(ingredient,1,(short)rawdata));
  }
  return this;
}

public BatchedImageRequest(Request<?> request,ImageContainer container){
  mRequest=request;
  mContainers.add(container);
}

public String order(){
  return mOrderBy.length() > 0 ? mOrderBy.toString() : null;
}

static AxesWalker findClone(AxesWalker key,Vector cloneList){
  if (null != cloneList) {
    int n=cloneList.size();
    for (int i=0; i < n; i+=2) {
      if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1);
    }
  }
  return null;
}

public static byte[] encodingToBytes(final String str,final String encoding){
  if (str == null) {
    return null;
  }
  try {
    return str.getBytes(encoding);
  }
 catch (  final UnsupportedEncodingException e) {
    throw new Error(encoding + " not supported! Original exception: " + e);
  }
}

public static boolean looksLikeABGRepeat(String val){
  return BACKGROUND_REPEATS.indexOf(val) >= 0;
}

public void before() throws Throwable {
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    ProcessBuilder processBuilder=new ProcessBuilder();
    processBuilder.command("logcat","-c");
    processBuilder.redirectErrorStream();
    Process process=processBuilder.start();
    process.waitFor();
    if (process.exitValue() != 0) {
      Log.e(LOG_TAG,"Error while clearing logcat, exitValue=" + process.exitValue());
    }
  }
}

public void addMeta(char meta,String replacement){
  metaCharacterSet.set(meta);
  replacementMap.put(new String(new char[]{meta}),replacement);
}

private Matches lookupDo(Template tmpl,int maxMatches){
  if (maxMatches < 0)   throw new IllegalArgumentException("negative maxMatches");
  int totalMatches=0;
  ArrayList matches=null;
  ItemIter iter=matchingItems(tmpl);
  if (maxMatches > 0 || iter.dupsPossible)   matches=new ArrayList();
  if (iter.dupsPossible) {
    while (iter.hasNext()) {
      Item item=iter.next();
      if (!matches.contains(item))       matches.add(item);
    }
    totalMatches=matches.size();
    if (maxMatches > 0) {
      for (int i=matches.size(); --i >= maxMatches; )       matches.remove(i);
      for (int i=matches.size(); --i >= 0; ) {
        matches.set(i,copyItem((Item)matches.get(i)));
      }
    }
 else {
      matches=null;
    }
  }
 else {
    while (iter.hasNext()) {
      Item item=iter.next();
      totalMatches++;
      if (--maxMatches >= 0)       matches.add(copyItem(item));
    }
  }
  return new Matches(matches,totalMatches);
}

public static List<History> findHistoryByJob(EntityManager em,JPAEntity job,BigInteger limit){
  requireArgument(em != null,"Entity manager cannot be null.");
  requireArgument(job != null,"The job cannot be null.");
  TypedQuery<History> query=em.createNamedQuery("History.findByJob",History.class);
  if (limit != null) {
    query.setMaxResults(limit.intValue());
  }
  try {
    query.setParameter("entity",job);
    return query.getResultList();
  }
 catch (  NoResultException ex) {
    return new ArrayList<History>(0);
  }
}

protected Character isWFXMLChar(String chardata){
  Character refInvalidChar;
  if (chardata == null || (chardata.length() == 0)) {
    return null;
  }
  char[] dataarray=chardata.toCharArray();
  int datalength=dataarray.length;
  if (fIsXMLVersion11) {
    int i=0;
    while (i < datalength) {
      if (XML11Char.isXML11Invalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return refInvalidChar;
      }
    }
  }
 else {
    int i=0;
    while (i < datalength) {
      if (XMLChar.isInvalid(dataarray[i++])) {
        char ch=dataarray[i - 1];
        if (XMLChar.isHighSurrogate(ch) && i < datalength) {
          char ch2=dataarray[i++];
          if (XMLChar.isLowSurrogate(ch2) && XMLChar.isSupplemental(XMLChar.supplemental(ch,ch2))) {
            continue;
          }
        }
        refInvalidChar=new Character(ch);
        return refInvalidChar;
      }
    }
  }
  return null;
}

public static String quote(char ch){
switch (ch) {
case '\b':
    return "\\b";
case '\f':
  return "\\f";
case '\n':
return "\\n";
case '\r':
return "\\r";
case '\t':
return "\\t";
case '\'':
return "\\'";
case '\"':
return "\\\"";
case '\\':
return "\\\\";
default :
return (isPrintableAscii(ch)) ? String.valueOf(ch) : String.format("\\u%04x",(int)ch);
}
}

private void updatePendingNodes(final int newLandmarkIndex,final RouterPriorityQueue<Node> pendingNodes){
  final List<Double> newEstRemTravCosts=new ArrayList<>();
  final List<Node> nodesToBeUpdated=new ArrayList<>();
  final InternalLandmarkData landmarkData=new InternalLandmarkData();
  for (  Node node : pendingNodes) {
    final AStarNodeData role=getData(node);
    final PreProcessLandmarks.LandmarksData ppRole=preprocess.getNodeData(node);
    landmarkData.setDelegate(ppRole);
    final double newEstRemTravCost=estimateRemainingTravelCost(landmarkData,newLandmarkIndex);
    if (newEstRemTravCost > role.getExpectedRemainingCost()) {
      nodesToBeUpdated.add(node);
      newEstRemTravCosts.add(newEstRemTravCost);
    }
  }
  for (  Node node : nodesToBeUpdated) {
    pendingNodes.remove(node);
  }
  for (int i=0; i < nodesToBeUpdated.size(); i++) {
    final Node node=nodesToBeUpdated.get(i);
    final AStarNodeData data=getData(node);
    data.setExpectedRemainingCost(newEstRemTravCosts.get(i));
    pendingNodes.add(node,getPriority(data));
  }
}

@Override public String toString(){
  StringBuffer buff=new StringBuffer();
  if (m_correlations == null) {
    buff.append("Correlation attribute evaluator has not been built yet.");
  }
 else {
    buff.append("\tCorrelation Ranking Filter");
    if (m_detailedOutput && m_detailedOutputBuff.length() > 0) {
      buff.append("\n\tDetailed output for nominal attributes");
      buff.append(m_detailedOutputBuff);
    }
  }
  return buff.toString();
}

private void drawOverflowIndicator(final Graphics g,int maxX){
  int width=25;
  int height=10;
  int xOffset=10;
  int stepSize=width / 5;
  int dotSize=3;
  int x=maxX - width - xOffset;
  int y=button.getSize().height - height;
  g.setColor(LIGHTER_GRAY);
  g.fillRect(x,y,width,width);
  g.setColor(Color.GRAY);
  g.drawRoundRect(x,y,width,width,5,5);
  g.setColor(Color.BLACK);
  g.fillOval(x + stepSize,y + 4,dotSize,dotSize);
  g.fillOval(x + stepSize * 2,y + 4,dotSize,dotSize);
  g.fillOval(x + stepSize * 3,y + 4,dotSize,dotSize);
  g.dispose();
}

public void writeLine(long time,float[] column){
  String str=Long.toString(time);
  for (int i=0; i < column.length; ++i) {
    str+=", " + column[i];
  }
  writer.println(str);
}

public static boolean isPEM(InputStream is){
  try {
    String startPEM="-----BEGIN";
    int headerLength=100;
    byte[] preamble=new byte[headerLength];
    if (is.read(preamble,0,headerLength) > 0) {
      String startArray=new String(preamble);
      return startArray.startsWith(startPEM);
    }
    return false;
  }
 catch (  Exception e) {
    throw new DSSException("Unable to read InputStream");
  }
}

public CloseListener(Object resource){
  _resource=resource;
}

@Override public IndexRequest routing(String routing){
  if (routing != null && routing.length() == 0) {
    this.routing=null;
  }
 else {
    this.routing=routing;
  }
  return this;
}

public byte[] receive() throws NetworkException {
  try {
    packet.setLength(DatagramConnection.DEFAULT_DATAGRAM_SIZE);
    connection.receive(packet);
    int packetLength=packet.getLength();
    byte[] data=new byte[packetLength];
    System.arraycopy(packet.getData(),0,data,0,packetLength);
    return data;
  }
 catch (  IOException e) {
    throw new NetworkException("Failed to receive datagram packet!",e);
  }
}

@Override protected void forceDeleteAttributeAt(int position){
  double[] newValues=new double[m_AttValues.length - 1];
  System.arraycopy(m_AttValues,0,newValues,0,position);
  if (position < m_AttValues.length - 1) {
    System.arraycopy(m_AttValues,position + 1,newValues,position,m_AttValues.length - (position + 1));
  }
  m_AttValues=newValues;
}

public synchronized AlphabeticIndex addLabels(Locale locale){
  addLabels(peer,locale.toString());
  return this;
}

protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {
  throw new UnsupportedOperationException();
}

@Deprecated public JavaPluginLoader(Server instance){
  Validate.notNull(instance,"Server cannot be null");
  server=instance;
}

public void addSeparator(){
  if (log.isLoggable(PlatformLogger.Level.FINER)) {
    log.finer("addSeparator is not implemented");
  }
}

public static boolean testSaveLocationExists(){
  String sDCardStatus=Environment.getExternalStorageState();
  boolean status;
  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {
    status=true;
  }
 else {
    status=false;
  }
  return status;
}

private static Class<?> loadClass(URL[] urls,String name) throws ClassNotFoundException {
  ClassLoader parent=getRMIContextClassLoader();
  if (loaderLog.isLoggable(Log.VERBOSE)) {
    loaderLog.log(Log.VERBOSE,"(thread context class loader: " + parent + ")");
  }
  SecurityManager sm=System.getSecurityManager();
  if (sm == null) {
    try {
      Class<?> c=Class.forName(name,false,parent);
      if (loaderLog.isLoggable(Log.VERBOSE)) {
        loaderLog.log(Log.VERBOSE,"class \"" + name + "\" found via "+ "thread context class loader "+ "(no security manager: codebase disabled), "+ "defined by "+ c.getClassLoader());
      }
      return c;
    }
 catch (    ClassNotFoundException e) {
      if (loaderLog.isLoggable(Log.BRIEF)) {
        loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via "+ "thread context class loader "+ "(no security manager: codebase disabled)",e);
      }
      throw new ClassNotFoundException(e.getMessage() + " (no security manager: RMI class loader disabled)",e.getException());
    }
  }
  Loader loader=lookupLoader(urls,parent);
  try {
    if (loader != null) {
      loader.checkPermissions();
    }
  }
 catch (  SecurityException e) {
    try {
      Class<?> c=loadClassForName(name,false,parent);
      if (loaderLog.isLoggable(Log.VERBOSE)) {
        loaderLog.log(Log.VERBOSE,"class \"" + name + "\" found via "+ "thread context class loader "+ "(access to codebase denied), "+ "defined by "+ c.getClassLoader());
      }
      return c;
    }
 catch (    ClassNotFoundException unimportant) {
      if (loaderLog.isLoggable(Log.BRIEF)) {
        loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via "+ "thread context class loader "+ "(access to codebase denied)",e);
      }
      throw new ClassNotFoundException("access to class loader denied",e);
    }
  }
  try {
    Class<?> c=loadClassForName(name,false,loader);
    if (loaderLog.isLoggable(Log.VERBOSE)) {
      loaderLog.log(Log.VERBOSE,"class \"" + name + "\" "+ "found via codebase, "+ "defined by "+ c.getClassLoader());
    }
    return c;
  }
 catch (  ClassNotFoundException e) {
    if (loaderLog.isLoggable(Log.BRIEF)) {
      loaderLog.log(Log.BRIEF,"class \"" + name + "\" not found via codebase",e);
    }
    throw e;
  }
}

public static final List<INaviRawModule> loadRawModules(final AbstractSQLProvider provider) throws CouldntLoadDataException {
  Preconditions.checkNotNull(provider,"IE00416: Provider argument can not be null");
  final CConnection connection=provider.getConnection();
  final List<INaviRawModule> modules=new ArrayList<INaviRawModule>();
  if (!PostgreSQLHelpers.hasTable(connection,CTableNames.RAW_MODULES_TABLE)) {
    return modules;
  }
  final String query="SELECT id, name FROM " + CTableNames.RAW_MODULES_TABLE + " ORDER BY id";
  try (ResultSet resultSet=connection.executeQuery(query,true)){
    while (resultSet.next()) {
      final int rawModuleId=resultSet.getInt("id");
      final String name=PostgreSQLHelpers.readString(resultSet,"name");
      final boolean isComplete=PostgreSQLDatabaseFunctions.checkRawModulesTables(provider.getConnection(),PostgreSQLHelpers.getDatabaseName(provider.getConnection()),rawModuleId);
      final int functionCount=isComplete ? PostgreSQLDatabaseFunctions.getRawModuleFunctionCount(connection,rawModuleId) : 0;
      final CRawModule module=new CRawModule(rawModuleId,name,functionCount,isComplete,provider);
      modules.add(module);
    }
  }
 catch (  final SQLException e) {
    throw new CouldntLoadDataException(e);
  }
  return modules;
}

void write(ImageOutputStream ios) throws IOException {
  length=2 + data.length;
  writeTag(ios);
  ios.write(data);
}

public static int probRound(double value,Random rand){
  if (value >= 0) {
    double lower=Math.floor(value);
    double prob=value - lower;
    if (rand.nextDouble() < prob) {
      return (int)lower + 1;
    }
 else {
      return (int)lower;
    }
  }
 else {
    double lower=Math.floor(Math.abs(value));
    double prob=Math.abs(value) - lower;
    if (rand.nextDouble() < prob) {
      return -((int)lower + 1);
    }
 else {
      return -(int)lower;
    }
  }
}

Map<String,TypeName> convertPropertiesToTypes(Map<String,ExecutableElement> properties){
  Map<String,TypeName> types=new LinkedHashMap<String,TypeName>();
  for (  Map.Entry<String,ExecutableElement> entry : properties.entrySet()) {
    ExecutableElement el=entry.getValue();
    types.put(entry.getKey(),TypeName.get(el.getReturnType()));
  }
  return types;
}

private static List<RegisterDescription> parseRegisterInformation(final Node node) throws MessageParserException {
  final List<RegisterDescription> registers=new ArrayList<>();
  final NodeList nodes=node.getChildNodes();
  for (int i=0; i < nodes.getLength(); ++i) {
    final Node child=nodes.item(i);
    final String registerName=getAttribute(child,"name");
    final String registerSize=getAttribute(child,"size");
    final String registerEditable=getAttribute(child,"editable");
    registers.add(new RegisterDescription(registerName,Integer.valueOf(registerSize),Boolean.valueOf(registerEditable)));
  }
  return registers;
}

public NamedThreadFactory(String namePrefix){
  this.namePrefix=Objects.requireNonNull(namePrefix);
  group=getThreadGroup();
  daemon=true;
}

public void test_metric_cpu_num_uint16(){
  final IGangliaMetadataMessage decl=new GangliaMetadataMessage("bigdata10","cpu_num",false,GangliaMessageTypeEnum.UINT16,"cpu_num","CPUs",GangliaSlopeEnum.zero,1200,0,AbstractMetrics.getMap(IGangliaAttributes.GROUP_CPU,"CPU Count","Total number of CPUs"));
  assertEncodeDecode(null,decl);
  final IGangliaMetricMessage expected=new GangliaMetricMessage(GangliaMessageTypeEnum.UINT16,"bigdata10","cpu_num",false,"%hu",Integer.valueOf(4));
  final byte[] actualData=assertEncodeDecode(decl,expected);
  final byte[] expectedData=new byte[]{0,0,0,-127,0,0,0,9,98,105,103,100,97,116,97,49,48,0,0,0,0,0,0,7,99,112,117,95,110,117,109,0,0,0,0,0,0,0,0,3,37,104,117,0,0,0,0,4};
  if (!Arrays.equals(expectedData,actualData)) {
    fail("expect: " + Arrays.toString(expectedData) + ", actual="+ Arrays.toString(actualData));
  }
}

String formatNumberList(TransformerImpl transformer,long[] list,int contextNode) throws TransformerException {
  String numStr;
  FastStringBuffer formattedNumber=StringBufferPool.get();
  try {
    int nNumbers=list.length, numberWidth=1;
    char numberType='1';
    String formatToken, lastSepString=null, formatTokenString=null;
    String lastSep=".";
    boolean isFirstToken=true;
    String formatValue=(null != m_format_avt) ? m_format_avt.evaluate(transformer.getXPathContext(),contextNode,this) : null;
    if (null == formatValue)     formatValue="1";
    NumberFormatStringTokenizer formatTokenizer=new NumberFormatStringTokenizer(formatValue);
    for (int i=0; i < nNumbers; i++) {
      if (formatTokenizer.hasMoreTokens()) {
        formatToken=formatTokenizer.nextToken();
        if (Character.isLetterOrDigit(formatToken.charAt(formatToken.length() - 1))) {
          numberWidth=formatToken.length();
          numberType=formatToken.charAt(numberWidth - 1);
        }
 else         if (formatTokenizer.isLetterOrDigitAhead()) {
          formatTokenString=formatToken;
          while (formatTokenizer.nextIsSep()) {
            formatToken=formatTokenizer.nextToken();
            formatTokenString+=formatToken;
          }
          if (!isFirstToken)           lastSep=formatTokenString;
          formatToken=formatTokenizer.nextToken();
          numberWidth=formatToken.length();
          numberType=formatToken.charAt(numberWidth - 1);
        }
 else {
          lastSepString=formatToken;
          while (formatTokenizer.hasMoreTokens()) {
            formatToken=formatTokenizer.nextToken();
            lastSepString+=formatToken;
          }
        }
      }
      if (null != formatTokenString && isFirstToken) {
        formattedNumber.append(formatTokenString);
      }
 else       if (null != lastSep && !isFirstToken)       formattedNumber.append(lastSep);
      getFormattedNumber(transformer,contextNode,numberType,numberWidth,list[i],formattedNumber);
      isFirstToken=false;
    }
    while (formatTokenizer.isLetterOrDigitAhead()) {
      formatTokenizer.nextToken();
    }
    if (lastSepString != null)     formattedNumber.append(lastSepString);
    while (formatTokenizer.hasMoreTokens()) {
      formatToken=formatTokenizer.nextToken();
      formattedNumber.append(formatToken);
    }
    numStr=formattedNumber.toString();
  }
  finally {
    StringBufferPool.free(formattedNumber);
  }
  return numStr;
}

public int addColumn(Object newCol,int length) throws FitsException {
  if (this.nFields > 0 && Array.getLength(newCol) != this.nRows) {
    throw new FitsException("New column has different number of rows");
  }
  if (this.nFields == 0) {
    this.nRows=Array.getLength(newCol);
  }
  Object[] newData=new Object[this.nFields + 1];
  int[] newOffsets=new int[this.nFields + 1];
  int[] newLengths=new int[this.nFields + 1];
  Class<?>[] newTypes=new Class[this.nFields + 1];
  String[] newNulls=new String[this.nFields + 1];
  System.arraycopy(this.data,0,newData,0,this.nFields);
  System.arraycopy(this.offsets,0,newOffsets,0,this.nFields);
  System.arraycopy(this.lengths,0,newLengths,0,this.nFields);
  System.arraycopy(this.types,0,newTypes,0,this.nFields);
  System.arraycopy(this.nulls,0,newNulls,0,this.nFields);
  this.data=newData;
  this.offsets=newOffsets;
  this.lengths=newLengths;
  this.types=newTypes;
  this.nulls=newNulls;
  newData[this.nFields]=newCol;
  this.offsets[this.nFields]=this.rowLen + 1;
  this.lengths[this.nFields]=length;
  this.types[this.nFields]=ArrayFuncs.getBaseClass(newCol);
  this.rowLen+=length + 1;
  if (this.isNull != null) {
    boolean[] newIsNull=new boolean[this.nRows * (this.nFields + 1)];
    int add=0;
    for (int i=0; i < this.isNull.length; i+=1) {
      if (i % this.nFields == 0) {
        add+=1;
      }
      if (this.isNull[i]) {
        newIsNull[i + add]=true;
      }
    }
    this.isNull=newIsNull;
  }
  this.nFields+=1;
  this.buffer=null;
  return this.nFields;
}

Deque<Block> schedule(Block entry){
  Deque<Block> code=dfs(entry);
  Deque<Block> scheduled=new ArrayDeque<Block>();
  SetMap<Block,Edge> pred=preds(code);
  Map<Block,Block> idom=idoms(code,pred);
  EdgeMap<Block> loops=findLoops(code,idom,pred);
  if (!loops.isEmpty())   verboseStatus("LOOPS " + loops);
  for (  Block b : code) {
    if (!scheduled.contains(b))     scheduled.add(b);
    if (loops.containsKey(b))     schedule_loop(b,loops,scheduled);
  }
  Deque<Block> branch_analysis=new ArrayDeque<Block>();
  branch_analysis.addAll(scheduled);
  Set<Block> already_seen=new HashSet<Block>();
  while (branch_analysis.size() > 1) {
    Block b=branch_analysis.removeFirst();
    Expr last=b.last();
    Block next=branch_analysis.peekFirst();
    if (isBranch(last) && last.succ[0].to != next && last.succ[1].to == next)     invert(last);
    already_seen.add(b);
    b.is_backwards_branch_target=false;
    for (    Edge s : b.succ()) {
      s.to.is_backwards_branch_target|=s.is_backwards_branch=already_seen.contains(s.to);
    }
  }
  if (verbose_mode)   for (  Block b : code)   if (b.is_backwards_branch_target)   verboseStatus(".. backwards branch target:" + b);
  return scheduled;
}

public void addTransaction(SIPServerTransaction serverTransaction) throws IOException {
  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))   logger.logDebug("added transaction " + serverTransaction);
  serverTransaction.map();
  addTransactionHash(serverTransaction);
}

private void delayRetry(int multiplier){
  debug("Sleeping before next retry...");
  try {
    Thread.sleep(1000 * multiplier);
  }
 catch (  InterruptedException e) {
    warn(e,"Thread sleeping failed.\nContinuing with the next retry.");
  }
}

public void testSplitAndJoinSemicolonNestedInPipeProperties(){
  Properties outer=PropertyUtils.splitPropertiesOnPipe(ONE_THEN_TWO_OUTER_A);
  assertEquals(ONE_SEMI_TWO,outer.getProperty("outer-b"));
  assertEquals(2,outer.size());
  try {
    assertEquals(ONE_THEN_TWO_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));
    return;
  }
 catch (  ComparisonFailure deviation1) {
  }
  try {
    assertEquals(TWO_THEN_ONE_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));
    return;
  }
 catch (  ComparisonFailure deviation2) {
  }
  try {
    assertEquals(ONE_THEN_TWO_OUTER_B,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));
    return;
  }
 catch (  ComparisonFailure deviation3) {
  }
  try {
    assertEquals(TWO_THEN_ONE_OUTER_B,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));
    return;
  }
 catch (  ComparisonFailure deviation4) {
  }
  assertEquals(TWO_THEN_ONE_OUTER_A,PropertyUtils.joinOnPipe(PropertyUtils.toMap(outer)));
}

public void testIntBooleanMap() throws Exception {
  ObjectMapper mapper=new ObjectMapper();
  String JSON="{ \"1\" : true, \"-1\" : false }";
  Map<String,Integer> result=mapper.readValue(JSON,new TypeReference<HashMap<Integer,Boolean>>(){
  }
);
  assertNotNull(result);
  assertEquals(HashMap.class,result.getClass());
  assertEquals(2,result.size());
  assertEquals(Boolean.TRUE,result.get(Integer.valueOf(1)));
  assertEquals(Boolean.FALSE,result.get(Integer.valueOf(-1)));
  assertNull(result.get("foobar"));
  assertNull(result.get(0));
}

@Override public boolean isBusy(){
  return false;
}

protected ByteArrayOutputStream parseBytes(ByteArrayOutputStream bos) throws IOException {
  int ch;
  for (ch=skipWhitespace(); ch >= 0 && ch != '<'; ch=skipWhitespace()) {
    int b1=ch;
    int b2=read();
    int b3=read();
    int b4=read();
    if (b4 != '=') {
      int chunk=((base64Decode[b1] << 18) + (base64Decode[b2] << 12) + (base64Decode[b3] << 6)+ (base64Decode[b4]));
      bos.write(chunk >> 16);
      bos.write(chunk >> 8);
      bos.write(chunk);
    }
 else     if (b3 != '=') {
      int chunk=((base64Decode[b1] << 10) + (base64Decode[b2] << 4) + (base64Decode[b3] >> 2));
      bos.write(chunk >> 8);
      bos.write(chunk);
    }
 else {
      int chunk=((base64Decode[b1] << 2) + (base64Decode[b2] >> 4));
      bos.write(chunk);
    }
  }
  if (ch == '<')   _peek=ch;
  return bos;
}

public void reset(){
  if (mDownloadBandwidth != null) {
    mDownloadBandwidth.reset();
  }
  mCurrentBandwidthConnectionQuality.set(ConnectionQuality.UNKNOWN);
}

public void testMergeSecurityRoleIntoEmptyDocument() throws Exception {
  String srcXml="<web-app></web-app>";
  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);
  String mergeXml="<web-app>" + "  <security-role>" + "    <role-name>role1</role-name>"+ "  </security-role>"+ "</web-app>";
  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);
  WebXmlMerger merger=new WebXmlMerger(srcWebXml);
  merger.merge(mergeWebXml);
  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(srcWebXml);
  assertEquals(1,securityRoleNames.size());
  assertEquals("role1",securityRoleNames.get(0));
}

private DiffPart decodeFullRevision(final int blockSize_L) throws UnsupportedEncodingException, DecodingException {
  if (blockSize_L < 1) {
    throw new DecodingException("Invalid value for blockSize_L: " + blockSize_L);
  }
  int l=r.read(blockSize_L);
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  for (int i=0; i < l; i++) {
    output.write(r.readByte());
  }
  DiffPart part=new DiffPart(DiffAction.FULL_REVISION_UNCOMPRESSED);
  part.setText(output.toString(WIKIPEDIA_ENCODING));
  return part;
}

private synchronized static void removeChildCharacterData(Node node,boolean deep){
  NodeList list=node.getChildNodes();
  for (int i=list.getLength(); i >= 0; i--) {
    Node n=list.item(i);
    if (n == null)     continue;
    if (n instanceof CharacterData)     node.removeChild(XMLCaster.toRawNode(n));
 else     if (deep)     removeChildCharacterData(n,deep);
  }
}

void unlink(Node<E> p,Node<E> trail){
  p.item=null;
  trail.next=p.next;
  if (last == p)   last=trail;
  if (count.getAndDecrement() == capacity)   notFull.signal();
}

private void loadCorpus(String source,String target,String align) throws IOException {
  logger.info("Counting the number of corpus positions");
  TimeKeeper timer=TimingUtils.start();
  int numSourcePositions=0;
  int numTargetPositions=0;
  numSentences=0;
  ParallelCorpus corpus=new ParallelCorpus(1);
  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){
    LineNumberReader eReader=IOTools.getReaderFromFile(target);
    LineNumberReader aReader=IOTools.getReaderFromFile(align);
    for (String fLine; (fLine=fReader.readLine()) != null; ) {
      String eLine=eReader.readLine();
      String aLine=aReader.readLine();
      AlignedSentence example=corpus.getSentence(fLine,eLine,aLine);
      if (example != null) {
        numSourcePositions+=example.sourceLength();
        numTargetPositions+=example.targetLength();
        ++numSentences;
      }
    }
  }
   final int initialVocabularySize=corpus.getVocabulary().size();
  timer.mark("Counting corpus positions");
  logger.info("Source positions: {}  Target positions: {}  Sentences: {}",numSourcePositions,numTargetPositions,numSentences);
  final int srcLength=numSourcePositions + numSentences;
  if (srcLength < 0)   throw new RuntimeException("Maximum source bitext size exceeded");
  srcBitext=new int[srcLength];
  f2e=new int[srcLength];
  final int tgtLength=numTargetPositions + numSentences;
  if (tgtLength < 0)   throw new RuntimeException("Maximum target bitext size exceeded");
  tgtBitext=new int[tgtLength];
  e2f=new int[tgtLength];
  try (LineNumberReader fReader=IOTools.getReaderFromFile(source)){
    LineNumberReader eReader=IOTools.getReaderFromFile(target);
    LineNumberReader aReader=IOTools.getReaderFromFile(align);
    int srcOffset=0;
    int tgtOffset=0;
    for (String fLine; (fLine=fReader.readLine()) != null; ) {
      String eLine=eReader.readLine();
      String aLine=aReader.readLine();
      AlignedSentence sentence=corpus.getSentence(fLine,eLine,aLine);
      if (sentence == null) {
        logger.info("Discarding parallel example {}",fReader.getLineNumber());
      }
 else {
        System.arraycopy(sentence.source,0,srcBitext,srcOffset,sentence.sourceLength());
        System.arraycopy(sentence.f2e,0,f2e,srcOffset,sentence.f2e.length);
        System.arraycopy(sentence.target,0,tgtBitext,tgtOffset,sentence.targetLength());
        System.arraycopy(sentence.e2f,0,e2f,tgtOffset,sentence.e2f.length);
        srcOffset+=sentence.sourceLength();
        tgtOffset+=sentence.targetLength();
        srcBitext[srcOffset]=toSentenceOffset(tgtOffset);
        tgtBitext[tgtOffset]=toSentenceOffset(srcOffset);
        ++srcOffset;
        ++tgtOffset;
      }
    }
  }
   this.vocabulary=corpus.getVocabulary();
  assert initialVocabularySize == vocabulary.size();
  timer.mark("Loading corpus");
  logger.info("Done loading corpus: {}",timer);
}

public static float mixFriction(float friction1,float friction2){
  return MathUtils.sqrt(friction1 * friction2);
}

public String serialize(Object obj,String contentType) throws ApiException {
  if (contentType.startsWith("application/json")) {
    return json.serialize(obj);
  }
 else {
    throw new ApiException(400,"can not serialize object into Content-Type: " + contentType);
  }
}

private boolean compileSWsequenceZR(int baseRegister,int[] offsets,int[] registers){
  for (int i=0; i < registers.length; i++) {
    if (registers[i] != _zr) {
      return false;
    }
  }
  for (int i=1; i < offsets.length; i++) {
    if (offsets[i] != offsets[i - 1] + 4) {
      return false;
    }
  }
  int offset=offsets[0];
  int length=offsets.length;
  do {
    int copyLength=Math.min(length,FastMemory.zero.length);
    mv.visitFieldInsn(Opcodes.GETSTATIC,Type.getInternalName(FastMemory.class),"zero","[I");
    loadImm(0);
    loadMemoryInt();
    prepareMemIndex(baseRegister,offset,false,32);
    loadImm(copyLength);
    mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(System.class),"arraycopy",arraycopyDescriptor);
    length-=copyLength;
    offset+=copyLength;
  }
 while (length > 0);
  return true;
}

private boolean isNativeVolumeExpansionSupported(Volume vplexVolume,Long newSize){
  boolean useNativeVolumeExpansion=true;
  StringSet assocVolumeIds=vplexVolume.getAssociatedVolumes();
  if (null == assocVolumeIds) {
    s_logger.warn("VPLEX volume {} has no backend volumes. It was probably ingested 'Virtual Volume Only'.",vplexVolume.forDisplay());
    useNativeVolumeExpansion=false;
  }
 else {
    for (    String assocVolumeId : assocVolumeIds) {
      Volume assocVolume=_permissionsHelper.getObjectById(URI.create(assocVolumeId),Volume.class);
      try {
        super.verifyVolumeExpansionRequest(assocVolume,newSize);
      }
 catch (      Exception e) {
        useNativeVolumeExpansion=false;
        break;
      }
    }
  }
  return useNativeVolumeExpansion;
}

public void updateGUI(RosterEntry r){
  roadName.setText(r.getRoadName());
  roadNumber.setText(r.getRoadNumber());
  mfg.setText(r.getMfg());
  owner.setText(r.getOwner());
  model.setText(r.getModel());
  comment.setText(r.getComment());
  decoderModel.setText(r.getDecoderModel());
  decoderFamily.setText(r.getDecoderFamily());
  decoderComment.setText(r.getDecoderComment());
  dateUpdated.setText(r.getDateUpdated());
  maxSpeedSpinner.setValue(Integer.valueOf(r.getMaxSpeedPCT()));
}

public static Double oizp(Number value){
  if (value == null) {
    return null;
  }
  return (value.doubleValue() >= 0d) ? 1d : 0d;
}

public TerminalSize with(TerminalSize size){
  if (equals(size)) {
    return this;
  }
  return size;
}

private boolean isGzipAllowed(final HttpServletRequest request){
  return !DispatcherStreamLocator.isIncludedRequest(request) && WroUtil.isGzipSupported(request);
}

public ReplayProcessor(int bufferSize,boolean unbounded){
  if (unbounded) {
    this.buffer=new UnboundedBuffer<>(bufferSize);
  }
 else {
    this.buffer=new BoundedBuffer<>(bufferSize);
  }
  SUBSCRIBERS.lazySet(this,EMPTY);
}

protected void onShowConversations(@NonNull List<C> conversations){
  if (DEBUG) {
    Log.d(TAG,"Showing " + conversations.size() + " conversations");
  }
  mView.showConversations(new ArrayList<>(conversations));
}

protected int read() throws IOException {
  if (offset == buffer.length) {
    throw new ASN1Exception("Unexpected end of encoding");
  }
  if (in == null) {
    return buffer[offset++] & 0xFF;
  }
 else {
    int octet=in.read();
    if (octet == -1) {
      throw new ASN1Exception("Unexpected end of encoding");
    }
    buffer[offset++]=(byte)octet;
    return octet;
  }
}

public void enqueueJob(final Runnable job){
synchronized (mSleepSync) {
    if (hasJob()) {
      throw new IllegalStateException("Job already enqueued");
    }
    setJob(job);
    mSleepSync.notifyAll();
  }
}

public void testSetNull_int_int() throws SQLException {
  PreparedStatement ps=null;
  try {
    String query="insert into type (BoolVal, IntVal) values ('true', ?);";
    ps=conn.prepareStatement(query);
    Statement st=null;
    try {
      ps.setNull(1,Types.INTEGER);
      ps.execute();
    }
  finally {
      try {
        ps.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (BoolVal, LongVal) values ('true', ?);";
    ps=conn.prepareStatement(query);
    try {
      ps.setNull(1,Types.BIGINT);
      ps.execute();
    }
  finally {
      try {
        ps.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (BoolVal, DecVal) values ('true', ?)";
    ps=conn.prepareStatement(query);
    try {
      ps.setNull(1,Types.DECIMAL);
      ps.execute();
    }
  finally {
      try {
        ps.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (BoolVal, dateVal) values ('true', ?);";
    ps=conn.prepareStatement(query);
    try {
      ps.setNull(1,Types.DATE);
      ps.execute();
    }
  finally {
      try {
        ps.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (BoolVal, BlobVal) values ('true', ?);";
    ps=conn.prepareStatement(query);
    try {
      ps.setNull(1,Types.BLOB);
      ps.execute();
    }
  finally {
      try {
        ps.close();
      }
 catch (      Exception ee) {
      }
    }
    query="insert into type (BoolVal, TextVal) values ('true', ?);";
    ps=conn.prepareStatement(query);
    ps.setNull(1,Types.CHAR);
    ps.execute();
  }
  finally {
    try {
      ps.close();
    }
 catch (    Exception ee) {
    }
  }
}

public void testTestBitPositive2(){
  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};
  int aSign=1;
  int number=45;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  assertTrue(aNumber.testBit(number));
}

public void startElement(String uri,String localName,String qName,Attributes attributes) throws org.xml.sax.SAXException {
  if (qName.equals(PrintData.XML_TAG)) {
    String name=attributes.getValue(PrintData.XML_ATTRIBUTE_NAME);
    if (m_pd == null) {
      m_pd=new PrintData(m_ctx,name);
      push(m_pd);
    }
 else {
      PrintData temp=new PrintData(m_ctx,name);
      m_curPD.addNode(temp);
      push(temp);
    }
  }
 else   if (qName.equals(PrintData.XML_ROW_TAG)) {
    m_curPD.addRow(false,0);
  }
 else   if (qName.equals(PrintDataElement.XML_TAG)) {
    m_curPDEname=attributes.getValue(PrintDataElement.XML_ATTRIBUTE_NAME);
    m_curPDEvalue=new StringBuffer();
  }
}

public synchronized int updatePurchase(String orderId,String productId,PurchaseState purchaseState,long purchaseTime,String developerPayload){
  insertOrder(orderId,productId,purchaseState,purchaseTime,developerPayload);
  Cursor cursor=mDb.query(PURCHASE_HISTORY_TABLE_NAME,HISTORY_COLUMNS,HISTORY_PRODUCT_ID_COL + "=?",new String[]{productId},null,null,null,null);
  if (cursor == null) {
    return 0;
  }
  int quantity=0;
  try {
    while (cursor.moveToNext()) {
      int stateIndex=cursor.getInt(2);
      PurchaseState state=PurchaseState.valueOf(stateIndex);
      if (state == PurchaseState.PURCHASED || state == PurchaseState.REFUNDED) {
        quantity+=1;
      }
    }
    updatePurchasedItem(productId,quantity);
  }
  finally {
    if (cursor != null) {
      cursor.close();
    }
  }
  return quantity;
}

public void drawString(String str,int x,int y,int textDecoration){
  if (str.length() == 0 || (str.length() == 1 && str.charAt(0) == ' ')) {
    return;
  }
  Object nativeFont=null;
  if (current != null) {
    nativeFont=current.getNativeFont();
  }
  if (current instanceof CustomFont) {
    current.drawString(this,str,x,y);
  }
 else {
    impl.drawString(nativeGraphics,nativeFont,str,x + xTranslate,y + yTranslate,textDecoration);
  }
}

@Override public int read(char[] array,int offset,int length){
  if (idx >= charSequence.length()) {
    return -1;
  }
  if (array == null) {
    throw new NullPointerException("Character array is missing");
  }
  if (length < 0 || offset < 0 || offset + length > array.length) {
    throw new IndexOutOfBoundsException("Array Size=" + array.length + ", offset="+ offset+ ", length="+ length);
  }
  int count=0;
  for (int i=0; i < length; i++) {
    int c=read();
    if (c == -1) {
      return count;
    }
    array[offset + i]=(char)c;
    count++;
  }
  return count;
}

public void updateNonceParameters(){
  if (mNextNonce.equals(mNonce)) {
    mCnonceCounter++;
  }
 else {
    mCnonceCounter=1;
    mNonce=mNextNonce;
  }
}

@Override public void acceptInstance(InstanceEvent e){
  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {
    m_connectedFormat=e.getStructure();
    m_stopRequested.set(false);
    try {
      init(new Instances(e.getStructure(),0));
    }
 catch (    IllegalArgumentException ex) {
      if (m_log != null) {
        String message="ERROR: There is a problem with the incoming instance structure";
        stopWithErrorMessage(message,ex);
        return;
      }
    }
    String buffSize=m_bufferSize;
    try {
      buffSize=m_env.substitute(buffSize);
      m_bufferSizeI=Integer.parseInt(buffSize);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    m_incrementalBuffer=new ArrayList<InstanceHolder>(m_bufferSizeI);
    m_bufferFiles=new ArrayList<File>();
    m_streamCounter=0;
    return;
  }
  m_busy=true;
  if (e.getInstance() != null) {
    if (m_streamCounter == 0) {
      if (m_log != null) {
        m_log.statusMessage(statusMessagePrefix() + "Starting streaming sort...");
        m_log.logMessage("[Sorter] " + statusMessagePrefix() + " Using streaming buffer size: "+ m_bufferSizeI);
      }
    }
    InstanceHolder tempH=new InstanceHolder();
    tempH.m_instance=e.getInstance();
    tempH.m_fileNumber=-1;
    if (m_stringAttIndexes != null) {
      copyStringAttVals(tempH);
    }
    m_incrementalBuffer.add(tempH);
    m_streamCounter++;
  }
  if (e.getInstance() == null || e.getStatus() == InstanceEvent.BATCH_FINISHED) {
    emitBufferedInstances();
    return;
  }
 else   if (m_incrementalBuffer.size() == m_bufferSizeI) {
    try {
      sortBuffer(true);
    }
 catch (    Exception ex) {
      String msg=statusMessagePrefix() + "ERROR: unable to write to temp file.";
      stopWithErrorMessage(msg,ex);
      m_busy=false;
      return;
    }
  }
  m_busy=false;
}

private void matchVPools(URI rpSystemId){
  List<URI> storagePoolIds=ConnectivityUtil.getRPSystemStoragePools(_dbClient,rpSystemId);
  StringBuffer errorMessage=new StringBuffer();
  if (storagePoolIds != null && !storagePoolIds.isEmpty()) {
    List<StoragePool> storagePools=_dbClient.queryObject(StoragePool.class,storagePoolIds);
    ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(storagePools,_dbClient,_coordinator,errorMessage);
  }
}

public static BigDecimal calculateFee(Player player,int price){
  BigDecimal fee=BigDecimal.valueOf(price);
  fee=fee.multiply(BigDecimal.valueOf(TRADING_FEE_PERCENTAGE));
  if (player.isBadBoy()) {
    fee=fee.multiply(BigDecimal.valueOf(1 + TRADING_FEE_PLAYER_KILLER_PENALTY));
  }
  BigDecimal feeBonus=BigDecimal.ONE;
  feeBonus=BigDecimal.valueOf(Math.exp(-player.getTradescore() / FEE_BONUS_CONSTANT));
  fee=fee.multiply(feeBonus);
  return fee.max(BigDecimal.ONE);
}

private static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){
  int height=matrix.getHeight();
  int width=matrix.getWidth();
  int halfWidth=width >> 1;
  ResultPoint[] result=new ResultPoint[8];
  boolean found=false;
  int[] counters=new int[START_PATTERN_REVERSE.length];
  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));
  for (int i=height - 1; i > 0; i-=rowStep) {
    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);
    if (loc != null) {
      result[0]=new ResultPoint(loc[1],i);
      result[4]=new ResultPoint(loc[0],i);
      found=true;
      break;
    }
  }
  if (found) {
    found=false;
    for (int i=0; i < height; i+=rowStep) {
      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);
      if (loc != null) {
        result[1]=new ResultPoint(loc[1],i);
        result[5]=new ResultPoint(loc[0],i);
        found=true;
        break;
      }
    }
  }
  counters=new int[STOP_PATTERN_REVERSE.length];
  if (found) {
    found=false;
    for (int i=height - 1; i > 0; i-=rowStep) {
      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);
      if (loc != null) {
        result[2]=new ResultPoint(loc[0],i);
        result[6]=new ResultPoint(loc[1],i);
        found=true;
        break;
      }
    }
  }
  if (found) {
    found=false;
    for (int i=0; i < height; i+=rowStep) {
      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);
      if (loc != null) {
        result[3]=new ResultPoint(loc[0],i);
        result[7]=new ResultPoint(loc[1],i);
        found=true;
        break;
      }
    }
  }
  return found ? result : null;
}

private void addSearchHistory(){
  addSearchHistory(tfSearchEditor.getText());
}

ArrayList<SourceFile> trimFileList(ArrayList<SourceFile> files){
  HashMap<String,String> names=new HashMap<String,String>();
  ArrayList<SourceFile> list=new ArrayList<SourceFile>();
  int size=files.size();
  for (int i=0; i < size; i++) {
    boolean addIt=false;
    SourceFile fi=files.get(i);
    String fName=fi.getRawName();
    if (m_swfFilter == null) {
      if (names.get(fName) == null)       addIt=true;
    }
 else {
      addIt=m_swfFilter.containsSource(fi);
    }
    if (addIt) {
      names.put(fName,fName);
      list.add(fi);
    }
  }
  return list;
}

public static String join(double[] self,String separator){
  StringBuilder buffer=new StringBuilder();
  boolean first=true;
  if (separator == null)   separator="";
  for (  double next : self) {
    if (first) {
      first=false;
    }
 else {
      buffer.append(separator);
    }
    buffer.append(next);
  }
  return buffer.toString();
}

protected void writeShort(int value) throws IOException {
  out.write(value & 0xff);
  out.write((value >> 8) & 0xff);
}

public EntityQuery orderBy(String... fields){
  this.orderBy=Arrays.asList(fields);
  return this;
}

public StemmedString(String orig,String stemmed){
  strOrig=orig;
  strStemmed=stemmed;
}

public LogNetworkStreamMerger(LogRequest req,MediaType mediaType,LogSvcPropertiesLoader propertiesLoader){
  logger.trace("In LogNetworkStreamMerger's constructor");
  this.request=req;
  this.mediaType=mediaType;
  this.propertiesLoader=propertiesLoader;
  List<LogNetworkReader> readers=getLogNetworkStreams();
  int size=readers.size();
  logHeads=new LogMessage[size];
  this.logStreamList=new LogNetworkReader[size];
  int index=0;
  for (  LogNetworkReader reader : readers) {
    logStreamList[index]=reader;
    logHeads[index]=null;
    index++;
  }
}

public static String packCipherSuites(String[] ciphers){
  String cipherSet=null;
  if (ciphers != null) {
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < ciphers.length; i++) {
      buf.append(ciphers[i]);
      if (i < ciphers.length - 1) {
        buf.append(',');
      }
    }
    cipherSet=buf.toString();
  }
  return cipherSet;
}

public ExtensionFileFilter(String description,String extension){
  this.description=description;
  this.extensions=new HashSet<String>();
  extensions.add(extension.toLowerCase());
  defaultExtension=extension;
}

private void ensureTupleArray(int row){
  int nrows=Math.max(m_table.getRowCount(),row + 1);
  if (m_tuples == null) {
    m_tuples=new TableTuple[nrows];
  }
 else   if (m_tuples.length < nrows) {
    int capacity=Math.max((3 * m_tuples.length) / 2 + 1,nrows);
    TableTuple[] tuples=new TableTuple[capacity];
    System.arraycopy(m_tuples,0,tuples,0,m_tuples.length);
    m_tuples=tuples;
  }
}

private static boolean isAnArgument(final String arg){
  return (arg.startsWith("-") && (arg.length() > 1) && !Character.isDigit(arg.charAt(1)));
}

private synchronized static void removeChildren(Node node,short type,boolean deep){
  NodeList list=node.getChildNodes();
  for (int i=list.getLength(); i >= 0; i--) {
    Node n=list.item(i);
    if (n == null)     continue;
    if (n.getNodeType() == type || type == UNDEFINED_NODE)     node.removeChild(XMLCaster.toRawNode(n));
 else     if (deep)     removeChildren(n,type,deep);
  }
}

public final void lazySet(V newValue){
  unsafe.putOrderedObject(this,valueOffset,newValue);
}

public boolean isValidSavepoint(Savepoint sp){
  if (isSource())   return false;
  boolean result=false;
  if (sp != null)   result=true;
  return result;
}

public static void columnsFor(ResultSet resultSet,TableEditor editor) throws SQLException {
  List<Column> columns=new ArrayList<>();
  columnsFor(resultSet,null);
  editor.setColumns(columns);
}

private static void write(Collection<String> src,File out) throws IOException {
  try (Writer writer=new BufferedWriter(new FileWriter(out))){
    for (    String line : src)     writer.write(line + '\n');
  }
 }

public void clear(){
  if (mOriginalValues != null) {
synchronized (mLock) {
      mOriginalValues.clear();
    }
  }
 else {
    mObjects.clear();
  }
  if (mNotifyOnChange)   notifyDataSetChanged();
}

private long resetUidValidity() throws IOException {
  long timestamp=System.currentTimeMillis();
  setUidValidity(timestamp);
  return timestamp;
}

public final ArrayList<Move> pseudoLegalMoves(Position pos){
  ArrayList<Move> moveList=getMoveListObj();
  final boolean wtm=pos.whiteMove;
  for (int x=0; x < 8; x++) {
    for (int y=0; y < 8; y++) {
      int sq=Position.getSquare(x,y);
      int p=pos.getPiece(sq);
      if ((p == Piece.EMPTY) || (Piece.isWhite(p) != wtm)) {
        continue;
      }
      if ((p == Piece.WROOK) || (p == Piece.BROOK) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {
        if (addDirection(moveList,pos,sq,7 - x,1))         return moveList;
        if (addDirection(moveList,pos,sq,7 - y,8))         return moveList;
        if (addDirection(moveList,pos,sq,x,-1))         return moveList;
        if (addDirection(moveList,pos,sq,y,-8))         return moveList;
      }
      if ((p == Piece.WBISHOP) || (p == Piece.BBISHOP) || (p == Piece.WQUEEN)|| (p == Piece.BQUEEN)) {
        if (addDirection(moveList,pos,sq,Math.min(7 - x,7 - y),9))         return moveList;
        if (addDirection(moveList,pos,sq,Math.min(x,7 - y),7))         return moveList;
        if (addDirection(moveList,pos,sq,Math.min(x,y),-9))         return moveList;
        if (addDirection(moveList,pos,sq,Math.min(7 - x,y),-7))         return moveList;
      }
      if ((p == Piece.WKNIGHT) || (p == Piece.BKNIGHT)) {
        if (x < 6 && y < 7 && addDirection(moveList,pos,sq,1,10))         return moveList;
        if (x < 7 && y < 6 && addDirection(moveList,pos,sq,1,17))         return moveList;
        if (x > 0 && y < 6 && addDirection(moveList,pos,sq,1,15))         return moveList;
        if (x > 1 && y < 7 && addDirection(moveList,pos,sq,1,6))         return moveList;
        if (x > 1 && y > 0 && addDirection(moveList,pos,sq,1,-10))         return moveList;
        if (x > 0 && y > 1 && addDirection(moveList,pos,sq,1,-17))         return moveList;
        if (x < 7 && y > 1 && addDirection(moveList,pos,sq,1,-15))         return moveList;
        if (x < 6 && y > 0 && addDirection(moveList,pos,sq,1,-6))         return moveList;
      }
      if ((p == Piece.WKING) || (p == Piece.BKING)) {
        if (x < 7 && addDirection(moveList,pos,sq,1,1))         return moveList;
        if (x < 7 && y < 7 && addDirection(moveList,pos,sq,1,9))         return moveList;
        if (y < 7 && addDirection(moveList,pos,sq,1,8))         return moveList;
        if (x > 0 && y < 7 && addDirection(moveList,pos,sq,1,7))         return moveList;
        if (x > 0 && addDirection(moveList,pos,sq,1,-1))         return moveList;
        if (x > 0 && y > 0 && addDirection(moveList,pos,sq,1,-9))         return moveList;
        if (y > 0 && addDirection(moveList,pos,sq,1,-8))         return moveList;
        if (x < 7 && y > 0 && addDirection(moveList,pos,sq,1,-7))         return moveList;
        int k0=wtm ? Position.getSquare(4,0) : Position.getSquare(4,7);
        if (Position.getSquare(x,y) == k0) {
          int aCastle=wtm ? Position.A1_CASTLE : Position.A8_CASTLE;
          int hCastle=wtm ? Position.H1_CASTLE : Position.H8_CASTLE;
          int rook=wtm ? Piece.WROOK : Piece.BROOK;
          if (((pos.getCastleMask() & (1 << hCastle)) != 0) && (pos.getPiece(k0 + 1) == Piece.EMPTY) && (pos.getPiece(k0 + 2) == Piece.EMPTY)&& (pos.getPiece(k0 + 3) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 + 1)) {
            moveList.add(getMoveObj(k0,k0 + 2,Piece.EMPTY));
          }
          if (((pos.getCastleMask() & (1 << aCastle)) != 0) && (pos.getPiece(k0 - 1) == Piece.EMPTY) && (pos.getPiece(k0 - 2) == Piece.EMPTY)&& (pos.getPiece(k0 - 3) == Piece.EMPTY)&& (pos.getPiece(k0 - 4) == rook)&& !sqAttacked(pos,k0)&& !sqAttacked(pos,k0 - 1)) {
            moveList.add(getMoveObj(k0,k0 - 2,Piece.EMPTY));
          }
        }
      }
      if ((p == Piece.WPAWN) || (p == Piece.BPAWN)) {
        int yDir=wtm ? 8 : -8;
        if (pos.getPiece(sq + yDir) == Piece.EMPTY) {
          addPawnMoves(moveList,sq,sq + yDir);
          if ((y == (wtm ? 1 : 6)) && (pos.getPiece(sq + 2 * yDir) == Piece.EMPTY)) {
            addPawnMoves(moveList,sq,sq + yDir * 2);
          }
        }
        if (x > 0) {
          int toSq=sq + yDir - 1;
          int cap=pos.getPiece(toSq);
          if (cap != Piece.EMPTY) {
            if (Piece.isWhite(cap) != wtm) {
              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {
                returnMoveList(moveList);
                moveList=getMoveListObj();
                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));
                return moveList;
              }
 else {
                addPawnMoves(moveList,sq,toSq);
              }
            }
          }
 else           if (toSq == pos.getEpSquare()) {
            addPawnMoves(moveList,sq,toSq);
          }
        }
        if (x < 7) {
          int toSq=sq + yDir + 1;
          int cap=pos.getPiece(toSq);
          if (cap != Piece.EMPTY) {
            if (Piece.isWhite(cap) != wtm) {
              if (cap == (wtm ? Piece.BKING : Piece.WKING)) {
                returnMoveList(moveList);
                moveList=getMoveListObj();
                moveList.add(getMoveObj(sq,toSq,Piece.EMPTY));
                return moveList;
              }
 else {
                addPawnMoves(moveList,sq,toSq);
              }
            }
          }
 else           if (toSq == pos.getEpSquare()) {
            addPawnMoves(moveList,sq,toSq);
          }
        }
      }
    }
  }
  return moveList;
}

public static int writeOggPageHeader(byte[] buf,int offset,int headerType,long granulepos,int streamSerialNumber,int pageCount,int packetCount,byte[] packetSizes){
  writeString(buf,offset,"OggS");
  buf[offset + 4]=0;
  buf[offset + 5]=(byte)headerType;
  writeLong(buf,offset + 6,granulepos);
  writeInt(buf,offset + 14,streamSerialNumber);
  writeInt(buf,offset + 18,pageCount);
  writeInt(buf,offset + 22,0);
  buf[offset + 26]=(byte)packetCount;
  System.arraycopy(packetSizes,0,buf,offset + 27,packetCount);
  return packetCount + 27;
}

private void beforeKey() throws JSONException {
  Scope context=peek();
  if (context == Scope.NONEMPTY_OBJECT) {
    out.append(',');
  }
 else   if (context != Scope.EMPTY_OBJECT) {
    throw new JSONException("Nesting problem");
  }
  newline();
  replaceTop(Scope.DANGLING_KEY);
}

private byte[] createPreviewBuffer(Size previewSize){
  int bitsPerPixel=ImageFormat.getBitsPerPixel(ImageFormat.NV21);
  long sizeInBits=previewSize.getHeight() * previewSize.getWidth() * bitsPerPixel;
  int bufferSize=(int)Math.ceil(sizeInBits / 8.0d) + 1;
  byte[] byteArray=new byte[bufferSize];
  ByteBuffer buffer=ByteBuffer.wrap(byteArray);
  if (!buffer.hasArray() || (buffer.array() != byteArray)) {
    throw new IllegalStateException("Failed to create valid buffer for camera source.");
  }
  mBytesToByteBuffer.put(byteArray,buffer);
  return byteArray;
}

private void handleStaticSiteRequest(StaticSiteRequest.PointRequest request,TransportNetwork transportNetwork,TaskStatistics ts){
  StaticComputer computer=new StaticComputer(request,transportNetwork,ts);
  if (request.request.bucket != null)   computer.run();
 else {
    try {
      PipedInputStream pis=new PipedInputStream();
      PipedOutputStream pos=new PipedOutputStream(pis);
      finishPriorityTask(request,pis);
      computer.write(pos);
      pos.close();
    }
 catch (    IOException e) {
      LOG.error("Could not write static output to broker",e);
    }
  }
  deleteRequest(request);
}

public synchronized void removeRoom(String room){
  if (!Helper.validateStream(room)) {
    return;
  }
  room=room.toLowerCase();
  if (rooms.remove(room)) {
    unsubRoom(room);
    removeEmotes(room);
    prevEmotesets.remove(room);
  }
}

public static double discharge(ItemStack itemStack,double amount){
  if (itemStack != null) {
    if (itemStack.getItem() instanceof IEnergizedItem) {
      IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem();
      if (energizedItem.canSend(itemStack)) {
        double energyToUse=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getEnergy(itemStack),amount));
        energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) - energyToUse);
        return energyToUse;
      }
    }
  }
  return 0;
}

public Object[] toArray(){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    Object[] a=new Object[count];
    int k=0;
    for (Node<E> p=first; p != null; p=p.next)     a[k++]=p.item;
    return a;
  }
  finally {
    lock.unlock();
  }
}

public void addAll(final Collection elements){
  adjusting=true;
  Set oldSelection=new HashSet(selection);
  boolean rv=selection.addAll(elements);
  adjusting=false;
  if (rv) {
    fireSelectionChanged(oldSelection,selection);
  }
  oldSelection=null;
}

public boolean hasFeature(int feature){
  return ((feature >= MODE_FIRST && feature <= MODE_LAST) || (feature >= FEATURE_FIRST && feature <= FEATURE_LAST)) && (feature == MODE_OFF || mCapabilities.get(feature));
}

public Set<Integer> backupPartitions(UUID nodeId){
  Set<Integer> set=backup.get(nodeId);
  return set == null ? Collections.<Integer>emptySet() : set;
}

public java.lang.StringBuffer insert(int offset,java.lang.String str){
  internal.insert(offset,str);
  return this;
}

public Loader load(String imageUrl){
  ImageUrl=imageUrl;
  return this;
}

private void generateLegalTimesTree(){
  int k0=KeyEvent.KEYCODE_0;
  int k1=KeyEvent.KEYCODE_1;
  int k2=KeyEvent.KEYCODE_2;
  int k3=KeyEvent.KEYCODE_3;
  int k4=KeyEvent.KEYCODE_4;
  int k5=KeyEvent.KEYCODE_5;
  int k6=KeyEvent.KEYCODE_6;
  int k7=KeyEvent.KEYCODE_7;
  int k8=KeyEvent.KEYCODE_8;
  int k9=KeyEvent.KEYCODE_9;
  mLegalTimesTree=new Node();
  if (mIs24HourMode) {
    Node minuteFirstDigit=new Node(k0,k1,k2,k3,k4,k5);
    Node minuteSecondDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    minuteFirstDigit.addChild(minuteSecondDigit);
    Node firstDigit=new Node(k0,k1);
    mLegalTimesTree.addChild(firstDigit);
    Node secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    Node thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    secondDigit=new Node(k6,k7,k8,k9);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    firstDigit=new Node(k2);
    mLegalTimesTree.addChild(firstDigit);
    secondDigit=new Node(k0,k1,k2,k3);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteFirstDigit);
    secondDigit=new Node(k4,k5);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(minuteSecondDigit);
    firstDigit=new Node(k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(minuteFirstDigit);
  }
 else {
    Node ampm=new Node(getAmOrPmKeyCode(AM),getAmOrPmKeyCode(PM));
    Node firstDigit=new Node(k1);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    Node secondDigit=new Node(k0,k1,k2);
    firstDigit.addChild(secondDigit);
    secondDigit.addChild(ampm);
    Node thirdDigit=new Node(k0,k1,k2,k3,k4,k5);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    Node fourthDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    thirdDigit.addChild(fourthDigit);
    fourthDigit.addChild(ampm);
    thirdDigit=new Node(k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    secondDigit=new Node(k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
    firstDigit=new Node(k2,k3,k4,k5,k6,k7,k8,k9);
    mLegalTimesTree.addChild(firstDigit);
    firstDigit.addChild(ampm);
    secondDigit=new Node(k0,k1,k2,k3,k4,k5);
    firstDigit.addChild(secondDigit);
    thirdDigit=new Node(k0,k1,k2,k3,k4,k5,k6,k7,k8,k9);
    secondDigit.addChild(thirdDigit);
    thirdDigit.addChild(ampm);
  }
}

private void buildPTR(){
  double[] temp_row;
  double[][] PTRA;
  int k;
  PivotTransform pt;
  PTR=Matrix.identity(n,n);
  PTRA=PTR.getArray();
  k=pivotTransformQueue.size();
  while (k-- > 0) {
    pt=pivotTransformQueue.removeLast();
    temp_row=PTRA[pt.pos1];
    PTRA[pt.pos1]=PTRA[pt.pos2];
    PTRA[pt.pos2]=temp_row;
  }
}

private static String byteToHex(byte[] digest){
  StringBuilder builder=new StringBuilder();
  for (  byte b : digest) {
    String hex=Integer.toHexString(0xff & b);
    if (hex.length() == 1) {
      builder.append('0');
    }
    builder.append(hex);
  }
  return builder.toString();
}

public String replace(char oldChar,char newChar){
  char[] buffer=value;
  int _offset=offset;
  int _count=count;
  int idx=_offset;
  int last=_offset + _count;
  boolean copied=false;
  while (idx < last) {
    if (buffer[idx] == oldChar) {
      if (!copied) {
        char[] newBuffer=new char[_count];
        System.arraycopy(buffer,_offset,newBuffer,0,_count);
        buffer=newBuffer;
        idx-=_offset;
        last-=_offset;
        copied=true;
      }
      buffer[idx]=newChar;
    }
    idx++;
  }
  return copied ? new String(0,count,buffer) : this;
}

public Bidi createLineBidi(int lineStart,int lineLimit){
  AttributedString astr=new AttributedString("");
  Bidi newBidi=new Bidi(astr.getIterator());
  return bidiBase.setLine(this,bidiBase,newBidi,newBidi.bidiBase,lineStart,lineLimit);
}

public boolean isCallerValidForPackage(Context context,int authRequirements,String packageToMatch){
  assert !TextUtils.isEmpty(packageToMatch);
  return isCallerValid(context,authRequirements,packageToMatch);
}

public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){
  paintBackground(context,g,x,y,w,h,null);
}

public synchronized void addGraphListener(GraphListener cl){
  m_graphListeners.addElement(cl);
}

public void restartAndInstallIfNecessary(){
  File patchesDir=new File(mySdkHandler.getLocation(),PatchInstallerUtil.PATCHES_DIR_NAME);
  StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(PatchInstallerFactory.class);
  if (patchesDir.exists()) {
    File[] subDirs=patchesDir.listFiles(null);
    for (    File patchDir : subDirs) {
      processPatch(mySdkHandler.getLocation(),progress,patchDir);
    }
  }
}

public static double[][] align(int[] real,double[] pred){
  int missing=numberOfMissingLabels(real);
  double[] _real=new double[real.length - missing];
  double[] _pred=new double[real.length - missing];
  int offset=0;
  for (int i=0; i < real.length; i++) {
    if (real[i] == -1 || pred[i] == -1.0 || Double.isNaN(pred[i])) {
      offset++;
      continue;
    }
    _real[i - offset]=real[i];
    _pred[i - offset]=pred[i];
  }
  double[][] res=new double[2][0];
  res[0]=_real;
  res[1]=_pred;
  return res;
}

public static boolean isCategory(int M_Product_Category_ID,int M_Product_ID){
  if (M_Product_ID == 0 || M_Product_Category_ID == 0)   return false;
  Integer product=new Integer(M_Product_ID);
  Integer category=(Integer)s_products.get(product);
  if (category != null)   return category.intValue() == M_Product_Category_ID;
  String sql="SELECT M_Product_Category_ID FROM M_Product WHERE M_Product_ID=?";
  PreparedStatement pstmt=null;
  try {
    pstmt=DB.prepareStatement(sql,null);
    pstmt.setInt(1,M_Product_ID);
    ResultSet rs=pstmt.executeQuery();
    if (rs.next())     category=new Integer(rs.getInt(1));
    rs.close();
    pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    s_log.log(Level.SEVERE,sql,e);
  }
  try {
    if (pstmt != null)     pstmt.close();
    pstmt=null;
  }
 catch (  Exception e) {
    pstmt=null;
  }
  if (category != null) {
    s_products.put(product,category);
    s_log.fine("M_Product_ID=" + M_Product_ID + "("+ category+ ") in M_Product_Category_ID="+ M_Product_Category_ID+ " - "+ (category.intValue() == M_Product_Category_ID));
    return category.intValue() == M_Product_Category_ID;
  }
  s_log.log(Level.SEVERE,"Not found M_Product_ID=" + M_Product_ID);
  return false;
}

public AllStatsTableMulti(DatasetGenerator datasetGenerator,Locker locker){
  ArgumentChecking.notNull(datasetGenerator,"datasetGenerator");
  initComponents();
  table.setDefaultRenderer(JLabel.class,new Renderer());
  table.setColumnSelectionAllowed(false);
  table.setRowSelectionAllowed(false);
  table.setGridColor(GRID_COLOR);
  JTableHeader header=table.getTableHeader();
  header.setReorderingAllowed(false);
  GUIUtilities.setTableHeader(header);
  model=new Model(datasetGenerator);
  table.setModel(model);
  this.locker=locker;
}

private void fitImageToView(){
  Drawable drawable=getDrawable();
  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {
    return;
  }
  if (matrix == null || prevMatrix == null) {
    return;
  }
  int drawableWidth=drawable.getIntrinsicWidth();
  int drawableHeight=drawable.getIntrinsicHeight();
  float scaleX=(float)viewWidth / drawableWidth;
  float scaleY=(float)viewHeight / drawableHeight;
switch (mScaleType) {
case CENTER:
    scaleX=scaleY=1;
  break;
case CENTER_CROP:
scaleX=scaleY=Math.max(scaleX,scaleY);
break;
case CENTER_INSIDE:
scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));
case FIT_CENTER:
scaleX=scaleY=Math.min(scaleX,scaleY);
break;
case FIT_XY:
break;
default :
throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");
}
float redundantXSpace=viewWidth - (scaleX * drawableWidth);
float redundantYSpace=viewHeight - (scaleY * drawableHeight);
matchViewWidth=viewWidth - redundantXSpace;
matchViewHeight=viewHeight - redundantYSpace;
if (!isZoomed() && !imageRenderedAtLeastOnce) {
matrix.setScale(scaleX,scaleY);
matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);
normalizedScale=1;
}
 else {
if (prevMatchViewWidth == 0 || prevMatchViewHeight == 0) {
savePreviousImageValues();
}
prevMatrix.getValues(m);
m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;
m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;
float transX=m[Matrix.MTRANS_X];
float transY=m[Matrix.MTRANS_Y];
float prevActualWidth=prevMatchViewWidth * normalizedScale;
float actualWidth=getImageWidth();
translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);
float prevActualHeight=prevMatchViewHeight * normalizedScale;
float actualHeight=getImageHeight();
translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);
matrix.setValues(m);
}
fixTrans();
setImageMatrix(matrix);
}

public void append(File file,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {
  if (!file.exists()) {
    throw new FileNotFoundException(file.getAbsolutePath());
  }
  InputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
  }
 catch (  IOException e) {
    throw new FTPDataTransferException(e);
  }
  try {
    append(file.getName(),inputStream,0,listener);
  }
 catch (  IllegalStateException e) {
    throw e;
  }
catch (  IOException e) {
    throw e;
  }
catch (  FTPIllegalReplyException e) {
    throw e;
  }
catch (  FTPException e) {
    throw e;
  }
catch (  FTPDataTransferException e) {
    throw e;
  }
catch (  FTPAbortedException e) {
    throw e;
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      Throwable t) {
        ;
      }
    }
  }
}

public List<String> provideWhiteList(){
  LinkedList<String> whiteList=new LinkedList<>();
  whiteList.add("org.chromium");
  return whiteList;
}

public static boolean isScopedName(String name){
  return name.indexOf('.') != -1;
}

public Input(IoBuffer buf){
  super(buf);
  amf3_mode=0;
  stringReferences=new ArrayList<String>();
  classReferences=new ArrayList<ClassReference>();
}

public static Properties loadConfigFile(String path){
  Properties property=null;
  File file=new File(path);
  if (file.exists() && file.canRead()) {
    try {
      property=new Properties();
      property.load(new FileReader(file.getAbsolutePath()));
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return property;
}

protected void illegalMessageReceived(OFMessage m){
  String msg=getSwitchStateMessage(m,"Switch should never send this message in the current state");
  throw new SwitchStateException(msg);
}

protected void sprint(boolean booleanField){
  sprint(String.valueOf(booleanField));
}

protected static void toEPLViews(StringWriter writer,List<View> views){
  if ((views != null) && (views.size() != 0)) {
    writer.write('.');
    String delimiter="";
    for (    View view : views) {
      writer.write(delimiter);
      view.toEPL(writer);
      delimiter=".";
    }
  }
}

protected void removeDatabaseListeners(){
  databaseListeners.clear();
}

private AudioMapType loadAudioMapXml(File audioMapFile) throws XmlParsingException, FileNotFoundException {
  if (!audioMapFile.isFile()) {
    throw new FileNotFoundException(String.format("Invalid audiomap.xml file: '%s' not found",audioMapFile.getAbsolutePath()));
  }
  return XmlParser.parse(audioMapFile,new String[]{AUDIOMAP_XML_SCHEME},AUDIOMAP_PACKAGE,AudioMapType.class);
}

public void addGenericAttr(GenericAttr g){
  generic.addElement(g);
}

private List<FahrzeitEvent> addFahrtInfoToFahrzeitEvents(List<FahrtEvent> fahrtEvents,List<FahrzeitEvent> fahrzeitEvents,boolean keepFahrzeitEventsWithoutFahrtEvent){
  List<FahrzeitEvent> fahrzeitEventsOut=new LinkedList<FahrzeitEvent>();
  Map<String,FahrtEvent> rblDateKursDateTimeIst2FahrtEventMap=new HashMap<String,FahrtEvent>();
  Set<String> searchStrings=new TreeSet<String>();
  for (  FahrtEvent fahrtEvent : fahrtEvents) {
    String searchId=String.valueOf(fahrtEvent.getRblDate()) + String.valueOf(fahrtEvent.getKurs()) + fahrtEvent.getDepartureDateIst()+ fahrtEvent.getDepartureTimeIst();
    if (searchStrings.contains(searchId)) {
      log.warn("Search string already exists. This should not happen. " + searchId);
    }
 else {
      searchStrings.add(searchId);
      rblDateKursDateTimeIst2FahrtEventMap.put(searchId,fahrtEvent);
    }
  }
  int numberOfMissingFahrtEvents=0;
  for (  FahrzeitEvent fahrzeitEvent : fahrzeitEvents) {
    String searchId=String.valueOf(fahrzeitEvent.getRblDate()) + String.valueOf(fahrzeitEvent.getKurs()) + fahrzeitEvent.getDepartureDateIst()+ fahrzeitEvent.getDepartureTimeIst();
    FahrtEvent fahrtEvent=rblDateKursDateTimeIst2FahrtEventMap.get(searchId);
    if (fahrtEvent == null) {
      numberOfMissingFahrtEvents++;
      if (keepFahrzeitEventsWithoutFahrtEvent) {
        fahrzeitEventsOut.add(fahrzeitEvent);
      }
    }
 else {
      fahrzeitEvent.add(fahrtEvent);
      fahrzeitEventsOut.add(fahrzeitEvent);
    }
  }
  log.info(numberOfMissingFahrtEvents + " fahrzeit events could not be linked to a fahrt event");
  log.info("Returning " + fahrzeitEventsOut.size() + " fahrzeitEvents");
  return fahrzeitEventsOut;
}

private static Object newInstanceNoServiceLoader(Class<?> providerClass){
  if (System.getSecurityManager() == null) {
    return null;
  }
  try {
    Method creationMethod=providerClass.getDeclaredMethod("newTransformerFactoryNoServiceLoader");
    return creationMethod.invoke(null,(Object[])null);
  }
 catch (  NoSuchMethodException exc) {
    return null;
  }
catch (  Exception exc) {
    return null;
  }
}

private void checkUUID(String uuid,int code){
  checkHash(UUID.fromString(uuid),code);
}

@Override protected void prepareWrite(WritableByteChannel channel) throws Exception {
  os=Channels.newOutputStream(channel);
}

public void run(){
  try {
    boolean cleanRemoteSessions=false;
synchronized (this) {
      Collection<StateInfo> infos=new ArrayList<>();
      infos.addAll(servers.values());
      infos.addAll(sites.values());
      for (      StateInfo info : infos) {
        info.isUp=checkServerUp(info);
        if (!info.isUp) {
          down.add(info.id);
        }
 else {
          if (!down.isEmpty() && down.remove(info.id)) {
            cleanRemoteSessions=true;
          }
        }
      }
    }
    if (cleanRemoteSessions) {
      foreignSessionHandler.cleanUpRemoteSessions();
    }
  }
 catch (  Exception ex) {
    sessionDebug.error("cleanRemoteSessions Background thread has encountered an Exception: " + ex.getMessage(),ex);
  }
}

private void writeObject(java.io.ObjectOutputStream p_stream) throws java.io.IOException {
  p_stream.defaultWriteObject();
  p_stream.writeInt(trace_angle_restriction.get_no());
}

@SuppressWarnings("unchecked") public LiteralExtensionIV createIV(final Value value){
  if (value instanceof Literal == false)   throw new IllegalArgumentException();
  final Literal lit=(Literal)value;
  final AbstractLiteralIV delegate=new PackedLongIV(Long.parseLong(lit.getLabel()));
  return new LiteralExtensionIV(delegate,datatype.getIV());
}

public Builder addHeader(String name,String value){
  headers.add(new Header(name,value));
  return this;
}

public void add(LeafAtom atom){
  leafChildren.add(atom);
}

private boolean journalRebuildRequired(){
  final int redundantOpCompactThreshold=2000;
  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();
}

public static double normalCDF(double x){
  return (0.5 * (1.0 + (erf(x / (Math.sqrt(2.0))))));
}

public void removeResult(String name){
  StringBuffer buff=m_Results.get(name);
  if (buff != null) {
    m_Results.remove(name);
    m_Model.removeElement(name);
    m_Objs.remove(name);
    System.gc();
  }
}

private void addEntry(){
  filterModel.addNewEntry();
  extentModel.populate(null);
  removeFTCButton.setEnabled(false);
  addExtentButton.setEnabled(false);
  removeExtentButton.setEnabled(false);
}

public void testCase22(){
  byte aBytes[]={1,2,3,4,5,6,7};
  byte bBytes[]={1,30,40,56,-1,45};
  int aSign=1;
  int bSign=-1;
  BigInteger aNumber=new BigInteger(aSign,aBytes);
  BigInteger bNumber=new BigInteger(bSign,bBytes);
  try {
    aNumber.mod(bNumber);
    fail("ArithmeticException has not been caught");
  }
 catch (  ArithmeticException e) {
  }
}

double[][] CalcTheoreticalSVValues(Variogram vario,double MaximumDisplyDistanst){
  double[][] res=new double[2 * NumberOfLags + 1][2];
  for (int i=0; i < res.length; i++) {
    res[i][0]=i * MaximumDisplyDistanst / (2 * NumberOfLags);
switch (vario.Type) {
case EXPONENTIAL:
      if (res[i][0] != 0) {
        res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-res[i][0] / vario.Range));
      }
 else {
        res[i][1]=vario.Nugget;
      }
    break;
case GAUSSIAN:
  if (res[i][0] != 0) {
    res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-3 * (Math.pow(res[i][0],2)) / (Math.pow(vario.Range,2))));
  }
 else {
    res[i][1]=vario.Nugget;
  }
break;
case SPHERICAL:
if (res[i][0] > vario.Range) {
res[i][1]=vario.Nugget + vario.Sill;
}
 else if (res[i][0] > 0 && res[i][0] <= vario.Range) {
res[i][1]=vario.Nugget + vario.Sill * (1.5 * res[i][0] / vario.Range - 0.5 * Math.pow((res[i][0] / vario.Range),3));
}
 else {
res[i][1]=vario.Nugget;
}
break;
}
}
return res;
}

public DExportPrivateKeyOpenSsl(JFrame parent,String entryAlias,PasswordQualityConfig passwordQualityConfig){
  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);
  this.entryAlias=entryAlias;
  this.passwordQualityConfig=passwordQualityConfig;
  initComponents();
}

public BigDecimal sum(String sqlExpression){
  return aggregate(sqlExpression,AGGREGATE_SUM);
}

private void smoothSnapToPosition(int scrollY,int availableScrollHeight,AlphabeticalAppsList.FastScrollSectionInfo info){
  mRv.removeCallbacks(mSmoothSnapNextFrameRunnable);
  mRv.removeCallbacks(mFastScrollToTargetSectionRunnable);
  trackAllChildViews();
  if (mHasFastScrollTouchSettled) {
    mCurrentFastScrollSection=info.sectionName;
    mTargetFastScrollSection=null;
    updateTrackedViewsFastScrollFocusState();
  }
 else {
    mCurrentFastScrollSection=null;
    mTargetFastScrollSection=info.sectionName;
    mHasFastScrollTouchSettled=false;
    updateTrackedViewsFastScrollFocusState();
    mRv.postDelayed(mFastScrollToTargetSectionRunnable,mHasFastScrollTouchSettledAtLeastOnce ? REPEAT_TOUCH_SETTLING_DURATION : INITIAL_TOUCH_SETTLING_DURATION);
  }
  int newScrollY=Math.min(availableScrollHeight,mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
  int numFrames=mFastScrollFrames.length;
  for (int i=0; i < numFrames; i++) {
    mFastScrollFrames[i]=(newScrollY - scrollY) / numFrames;
  }
  mFastScrollFrameIndex=0;
  mRv.postOnAnimation(mSmoothSnapNextFrameRunnable);
}

@Override public int calculateOffsetX(){
  return (int)(Math.cos(this.angle) * this.distance) - this.shadowSize;
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

protected void onFinish(){
  mErrorListener=null;
}

private <T>void runTestWrite(XmlWriter<T> writer,List<T> bundle,List<String> expected) throws Exception {
  File tmpFile=tmpFolder.newFile("foo.txt");
  try (FileOutputStream fileOutputStream=new FileOutputStream(tmpFile)){
    writeBundle(writer,bundle,fileOutputStream.getChannel());
  }
   List<String> lines=new ArrayList<>();
  try (BufferedReader reader=new BufferedReader(new FileReader(tmpFile))){
    for (; ; ) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      line=line.trim();
      if (line.length() > 0) {
        lines.add(line);
      }
    }
    assertEquals(expected,lines);
  }
 }

public String addDays(Object odays,String format){
  int days=FunctionHandler.getInt(odays);
  Calendar now=Calendar.getInstance();
  now.add(Calendar.DAY_OF_YEAR,days);
  DateFormat formatter=getFormatter(format);
  return formatter.format(now.getTime());
}

private static File createTempFile(Context context,@Nullable String mimeType) throws IOException {
  File externalCacheDir=context.getExternalCacheDir();
  File internalCacheDir=context.getCacheDir();
  File cacheDir;
  if (externalCacheDir == null && internalCacheDir == null) {
    throw new IOException("No cache directory available");
  }
  if (externalCacheDir == null) {
    cacheDir=internalCacheDir;
  }
 else   if (internalCacheDir == null) {
    cacheDir=externalCacheDir;
  }
 else {
    cacheDir=externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace() ? externalCacheDir : internalCacheDir;
  }
  return File.createTempFile(TEMP_FILE_PREFIX,getFileExtensionForType(mimeType),cacheDir);
}

@Override public Enumeration<Option> listOptions(){
  Vector<Option> newVector=new Vector<Option>(4);
  newVector.addElement(new Option("\tRandom number seed for cross validation\n" + "\t(default = 1)","S",1,"-S <seed>"));
  newVector.addElement(new Option("\tNumber of folds for cross validation\n" + "\t(default = 10)","F",1,"-F <folds>"));
  newVector.addElement(new Option("\tUse training data for evaluation rather than cross validaton","D",0,"-D"));
  newVector.addElement(new Option("\tMinimum number of objects in a bucket\n" + "\t(passed on to " + "OneR, default = 6)","B",1,"-B <minimum bucket size>"));
  return newVector.elements();
}

public boolean removeEntry(int xIndex,int dataSetIndex){
  if (dataSetIndex >= mDataSets.size())   return false;
  T dataSet=mDataSets.get(dataSetIndex);
  Entry e=dataSet.getEntryForXIndex(xIndex);
  return removeEntry(e,dataSetIndex);
}

private void runReadTest(byte[] input,CompressionMode mode) throws IOException {
  runReadTest(input,mode,mode);
}

public static void close(@Nullable Context rsrc,@Nullable IgniteLogger log){
  if (rsrc != null)   try {
    rsrc.close();
  }
 catch (  NamingException e) {
    warn(log,"Failed to close resource: " + e.getMessage());
  }
}

void removeEQ(Object o){
  final ReentrantLock lock=this.lock;
  lock.lock();
  try {
    Object[] array=queue;
    for (int i=0, n=size; i < n; i++) {
      if (o == array[i]) {
        removeAt(i);
        break;
      }
    }
  }
  finally {
    lock.unlock();
  }
}

public WritableRaster createCompatibleWritableRaster(int w,int h){
  if (w <= 0 || h <= 0) {
    throw new RasterFormatException("negative " + ((w <= 0) ? "width" : "height"));
  }
  SampleModel sm=sampleModel.createCompatibleSampleModel(w,h);
  return new IntegerInterleavedRaster(sm,new Point(0,0));
}

private void updateBaseMatrix(Drawable d){
  ImageView imageView=getImageView();
  if (null == imageView || null == d) {
    return;
  }
  final float viewWidth=getImageViewWidth(imageView);
  final float viewHeight=getImageViewHeight(imageView);
  final int drawableWidth=d.getIntrinsicWidth();
  final int drawableHeight=d.getIntrinsicHeight();
  mBaseMatrix.reset();
  final float widthScale=viewWidth / drawableWidth;
  final float heightScale=viewHeight / drawableHeight;
  if (mScaleType == ScaleType.CENTER) {
    mBaseMatrix.postTranslate((viewWidth - drawableWidth) / 2F,(viewHeight - drawableHeight) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_CROP) {
    float scale=Math.max(widthScale,heightScale);
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else   if (mScaleType == ScaleType.CENTER_INSIDE) {
    float scale=Math.min(1.0f,Math.min(widthScale,heightScale));
    mBaseMatrix.postScale(scale,scale);
    mBaseMatrix.postTranslate((viewWidth - drawableWidth * scale) / 2F,(viewHeight - drawableHeight * scale) / 2F);
  }
 else {
    RectF mTempSrc=new RectF(0,0,drawableWidth,drawableHeight);
    RectF mTempDst=new RectF(0,0,viewWidth,viewHeight);
switch (mScaleType) {
case FIT_CENTER:
      mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.CENTER);
    break;
case FIT_START:
  mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.START);
break;
case FIT_END:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.END);
break;
case FIT_XY:
mBaseMatrix.setRectToRect(mTempSrc,mTempDst,ScaleToFit.FILL);
break;
default :
break;
}
}
resetMatrix();
}

public static String[] schedulerCommandArgs(Config config,Config runtime,List<Integer> freePorts){
  if (freePorts.size() < PORTS_REQUIRED_FOR_SCHEDULER) {
    throw new RuntimeException("Failed to find enough ports for executor");
  }
  for (  int port : freePorts) {
    if (port == -1) {
      throw new RuntimeException("Failed to find available ports for executor");
    }
  }
  int httpPort=freePorts.get(0);
  List<String> commands=new ArrayList<>();
  commands.add("--cluster");
  commands.add(Context.cluster(config));
  commands.add("--role");
  commands.add(Context.role(config));
  commands.add("--environment");
  commands.add(Context.environ(config));
  commands.add("--topology_name");
  commands.add(Context.topologyName(config));
  commands.add("--topology_bin");
  commands.add(Context.topologyBinaryFile(config));
  commands.add("--http_port");
  commands.add(Integer.toString(httpPort));
  return commands.toArray(new String[0]);
}

public DocumentAnalysisRequest addDocument(SolrInputDocument doc){
  documents.add(doc);
  return this;
}

public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {
  chooseFirstProvider();
  return spi.engineDoPhase(key,lastPhase);
}

public SimpleSystemPermissionSet(){
}

@Override public final void addBezierCurveY(final float x,final float y,final float x3,final float y3){
  elements.add(new QuadCurveTo(x,y,x3,y3));
  currentPos[0]=x3;
  currentPos[1]=y3;
}

public void readBucketsFromPrefs(){
  SharedPreferences prefs=mContext.getSharedPreferences(SHARED_PREFS,0);
  Set<String> buckets=prefs.getStringSet(PREF_BUCKETS_IDS,new TreeSet<String>());
  mBuckets.clear();
  for (  String bucketId : buckets) {
    AutoMixBucket bucket=restoreBucketFromId(bucketId);
    mBuckets.add(bucket);
  }
}

protected int nextChar() throws IOException {
  fReadFromBuffer=(fBuffer.length() > 0);
  if (fReadFromBuffer) {
    char ch=fBuffer.charAt(fIndex++);
    if (fIndex >= fBuffer.length()) {
      fBuffer.setLength(0);
      fIndex=0;
    }
    return ch;
  }
  int ch=fCharAfterWhiteSpace;
  if (ch == -1) {
    ch=fReader.read();
  }
  if (fSkipWhiteSpace && Character.isWhitespace((char)ch)) {
    do {
      ch=fReader.read();
    }
 while (Character.isWhitespace((char)ch));
    if (ch != -1) {
      fCharAfterWhiteSpace=ch;
      return ' ';
    }
  }
 else {
    fCharAfterWhiteSpace=-1;
  }
  return ch;
}

@Override public void acceptAppOffer(Offer offer){
  int index=getIndex(offer,appOffers);
  if (index != -1) {
    appOffers.remove(index);
    appOfferStream.onNext(offer);
  }
  index=getIndex(offer,acceptedOffers);
  if (index == -1) {
    acceptedOffers.add(offer);
  }
}

public boolean verify(PublicKey key,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {
  return verify(key,CMSUtils.getProvider(sigProvider));
}

private void injectDependencies(){
  EasyMVPApplication easyMVPApplication=(EasyMVPApplication)getApplication();
  List<Object> activityScopeModules=(getModules() != null) ? getModules() : new ArrayList<>();
  activityScopeModules.add(new ActivityModule(this));
  activityScopeGraph=easyMVPApplication.buildGraphWithAditionalModules(activityScopeModules);
  inject(this);
}

public void writeRequest(){
  Object lock=new Object();
synchronized (lock) {
synchronized (this) {
      boolean goAheadWithWrite=writerLocks.size() == 0 && currentReaders == 0 && currentWriters == 0;
      if (goAheadWithWrite) {
        ++currentWriters;
        return;
      }
      writerLocks.addLast(lock);
    }
    try {
      lock.wait();
    }
 catch (    InterruptedException e) {
    }
  }
}

public long readLocalDate() throws IOException {
  expectStartTag("date");
  if (localCalendar == null)   localCalendar=Calendar.getInstance();
  long value=parseDate(localCalendar);
  expectEndTag("date");
  return value;
}

public void removeSelectionListener(final SelectionListener listener){
  checkWidget();
  listeners.remove(listener);
}

private void writeHex(int i) throws IOException {
  int cursor=8;
  do {
    hex[--cursor]=HEX_DIGITS[i & 0xf];
  }
 while ((i>>>=4) != 0);
  socketOut.write(hex,cursor,hex.length - cursor);
}

private synchronized String readInputStream(InputStreamReader inputStreamReader) throws IOException, BadLocationException {
  BufferedReader bufferedReader=null;
  try {
    bufferedReader=new BufferedReader(inputStreamReader);
    String newLine="\n";
    StringBuffer sb=new StringBuffer();
    String line;
    while ((line=bufferedReader.readLine()) != null) {
      sb.append(line + newLine);
    }
    return sb.toString();
  }
  finally {
    if (null != bufferedReader)     bufferedReader.close();
    if (null != inputStreamReader)     inputStreamReader.close();
  }
}

private List<Map<String,Object>> typeParameters(List<TypeParameter> tpl,Declaration from){
  if (tpl != null && !tpl.isEmpty()) {
    List<Map<String,Object>> l=new ArrayList<>(tpl.size());
    for (    TypeParameter tp : tpl) {
      l.add(typeParameterMap(tp,from));
    }
    return l;
  }
  return null;
}

long freeSpaceUnix(String path,boolean kb,boolean posix,long timeout) throws IOException {
  if (path.length() == 0) {
    throw new IllegalArgumentException("Path must not be empty");
  }
  String flags="-";
  if (kb) {
    flags+="k";
  }
  if (posix) {
    flags+="P";
  }
  String[] cmdAttribs=flags.length() > 1 ? new String[]{DF,flags,path} : new String[]{DF,path};
  List<String> lines=performCommand(cmdAttribs,3,timeout);
  if (lines.size() < 2) {
    throw new IOException("Command line '" + DF + "' did not return info as expected "+ "for path '"+ path+ "'- response was "+ lines);
  }
  String line2=lines.get(1);
  StringTokenizer tok=new StringTokenizer(line2," ");
  if (tok.countTokens() < 4) {
    if (tok.countTokens() == 1 && lines.size() >= 3) {
      String line3=lines.get(2);
      tok=new StringTokenizer(line3," ");
    }
 else {
      throw new IOException("Command line '" + DF + "' did not return data as expected "+ "for path '"+ path+ "'- check path is valid");
    }
  }
 else {
    tok.nextToken();
  }
  tok.nextToken();
  tok.nextToken();
  String freeSpace=tok.nextToken();
  return parseBytes(freeSpace,path);
}

public static void readAndCloseStream(InputStream is){
  final byte[] bytes=new byte[DEFAULT_BUFFER_SIZE];
  try {
    while (is.read(bytes,0,DEFAULT_BUFFER_SIZE) != -1)     ;
  }
 catch (  IOException ignored) {
  }
 finally {
    closeSilently(is);
  }
}

private static boolean withinTwo(INode n,INode goal){
  DoubleLinkedList<IMove> moves=n.validMoves();
  for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {
    IMove move=it.next();
    INode successor=n.copy();
    move.execute(successor);
    if (withinOne(successor,goal)) {
      return true;
    }
  }
  return false;
}

public PennTreebankReader(String treebankHome,String[] sections,String parseViewName) throws Exception {
  super(CorpusReaderConfigurator.buildResourceManager(PENN_TREEBANK_WSJ,treebankHome));
  this.parseViewName=parseViewName;
  combinedWSJHome=treebankHome;
  if (sections == null)   this.sections=IOUtils.lsDirectories(combinedWSJHome);
 else {
    this.sections=new String[sections.length];
    System.arraycopy(sections,0,this.sections,0,sections.length);
  }
  updateCurrentFiles();
}

@Override public void unwrapSSLv2(byte[] bytes){
  unexpectedMessage();
}

@Override public void closeWrite() throws IOException {
  if (_isCloseWrite) {
    return;
  }
  _isCloseWrite=true;
  OutputStream os=_os;
  _os=null;
  boolean isShutdownOutput=false;
  if (_s instanceof SSLSocket) {
    log.finer(L.l("sslSocket can not be half-closed"));
    return;
  }
 else   if (_s != null) {
    try {
      _s.shutdownOutput();
      isShutdownOutput=true;
    }
 catch (    UnsupportedOperationException e) {
      log.log(Level.FINEST,e.toString(),e);
    }
catch (    Exception e) {
      log.finer(e.toString());
      log.log(Level.FINEST,e.toString(),e);
    }
  }
  if (!isShutdownOutput && os != null) {
    os.close();
  }
}

protected void applyRowChangeData(RowChangeData data,List<ReplOption> options,String sourceDbmsType) throws ReplicatorException {
  if (options != null) {
    try {
      if (applySessionVariables(null,options)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Applying changed session variables");
        }
        executePendingBatch();
        statement.executeBatch();
        statement.clearBatch();
      }
    }
 catch (    SQLException e) {
      throw new ApplierException("Failed to apply session variables",e);
    }
  }
  List<ReplOption> rowOptions=data.getOptions();
  if (rowOptions != null) {
    try {
      if (applySessionVariables(null,rowOptions)) {
        if (logger.isDebugEnabled()) {
          logger.debug("Applying changed row option variables");
        }
        executePendingBatch();
        statement.executeBatch();
        statement.clearBatch();
      }
    }
 catch (    SQLException e) {
      throw new ApplierException("Failed to apply session variables",e);
    }
  }
  for (  OneRowChange row : data.getRowChanges()) {
    applyOneRowChangePrepared(row,sourceDbmsType);
  }
}

public boolean writeHeader(OutputStream os){
  try {
    writeInt(os,CACHE_MAGIC);
    writeString(os,key);
    writeString(os,etag == null ? "" : etag);
    writeLong(os,serverDate);
    writeLong(os,lastModified);
    writeLong(os,ttl);
    writeLong(os,softTtl);
    writeStringStringMap(responseHeaders,os);
    os.flush();
    return true;
  }
 catch (  IOException e) {
    VolleyLog.d("%s",e.toString());
    return false;
  }
}

public NamedList normalize(NamedList input){
  input.remove("avgRequestsPerSecond");
  for (int i=0; i < input.size(); i++) {
    Object v=input.getVal(i);
    if (v instanceof NamedList) {
      input.setVal(i,normalize((NamedList)v));
    }
  }
  return input;
}

public boolean isInfinite(){
  return isInfinite(value);
}

String inprogressZNodeName(long ledgerId,long firstTxId,long logSegmentSeqNo){
  if (DistributedLogConstants.LOGSEGMENT_NAME_VERSION == conf.getLogSegmentNameVersion()) {
    return String.format("%s_%018d",DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX,logSegmentSeqNo);
  }
 else {
    return DistributedLogConstants.INPROGRESS_LOGSEGMENT_PREFIX + "_" + Long.toString(firstTxId,16);
  }
}

public synchronized void add(double value){
  add(mCategories.size() + "",value);
}

public void receiveRedundancy(){
  try {
    while (true) {
      if (mIn.read(mInBuffer) <= 0)       return;
    }
  }
 catch (  IOException e) {
  }
}

void outputDocTypeDecl(String name,boolean closeDecl) throws SAXException {
  if (m_cdataTagOpen)   closeCDATA();
  try {
    final java.io.Writer writer=m_writer;
    writer.write("<!DOCTYPE ");
    writer.write(name);
    String doctypePublic=getDoctypePublic();
    if (null != doctypePublic) {
      writer.write(" PUBLIC \"");
      writer.write(doctypePublic);
      writer.write('\"');
    }
    String doctypeSystem=getDoctypeSystem();
    if (null != doctypeSystem) {
      if (null == doctypePublic)       writer.write(" SYSTEM \"");
 else       writer.write(" \"");
      writer.write(doctypeSystem);
      if (closeDecl) {
        writer.write("\">");
        writer.write(m_lineSep,0,m_lineSepLen);
        closeDecl=false;
      }
 else       writer.write('\"');
    }
  }
 catch (  IOException e) {
    throw new SAXException(e);
  }
}

MVStore(HashMap<String,Object> config){
  Object o=config.get("compress");
  this.compressionLevel=o == null ? 0 : (Integer)o;
  String fileName=(String)config.get("fileName");
  o=config.get("pageSplitSize");
  if (o == null) {
    pageSplitSize=fileName == null ? 4 * 1024 : 16 * 1024;
  }
 else {
    pageSplitSize=(Integer)o;
  }
  o=config.get("backgroundExceptionHandler");
  this.backgroundExceptionHandler=(UncaughtExceptionHandler)o;
  meta=new MVMap<String,String>(StringDataType.INSTANCE,StringDataType.INSTANCE);
  HashMap<String,Object> c=New.hashMap();
  c.put("id",0);
  c.put("createVersion",currentVersion);
  meta.init(this,c);
  fileStore=(FileStore)config.get("fileStore");
  if (fileName == null && fileStore == null) {
    cache=null;
    cacheChunkRef=null;
    return;
  }
  if (fileStore == null) {
    fileStoreIsProvided=false;
    fileStore=new FileStore();
  }
 else {
    fileStoreIsProvided=true;
  }
  retentionTime=fileStore.getDefaultRetentionTime();
  boolean readOnly=config.containsKey("readOnly");
  o=config.get("cacheSize");
  int mb=o == null ? 16 : (Integer)o;
  if (mb > 0) {
    CacheLongKeyLIRS.Config cc=new CacheLongKeyLIRS.Config();
    cc.maxMemory=mb * 1024L * 1024L;
    o=config.get("cacheConcurrency");
    if (o != null) {
      cc.segmentCount=(Integer)o;
    }
    cache=new CacheLongKeyLIRS<Page>(cc);
    cc.maxMemory/=4;
    cacheChunkRef=new CacheLongKeyLIRS<PageChildren>(cc);
  }
  o=config.get("autoCommitBufferSize");
  int kb=o == null ? 1024 : (Integer)o;
  autoCommitMemory=kb * 1024 * 19;
  o=config.get("autoCompactFillRate");
  autoCompactFillRate=o == null ? 50 : (Integer)o;
  char[] encryptionKey=(char[])config.get("encryptionKey");
  try {
    if (!fileStoreIsProvided) {
      fileStore.open(fileName,readOnly,encryptionKey);
    }
    if (fileStore.size() == 0) {
      creationTime=getTimeAbsolute();
      lastCommitTime=creationTime;
      storeHeader.put("H",2);
      storeHeader.put("blockSize",BLOCK_SIZE);
      storeHeader.put("format",FORMAT_WRITE);
      storeHeader.put("created",creationTime);
      writeStoreHeader();
    }
 else {
      readStoreHeader();
    }
  }
 catch (  IllegalStateException e) {
    panic(e);
  }
 finally {
    if (encryptionKey != null) {
      Arrays.fill(encryptionKey,(char)0);
    }
  }
  lastCommitTime=getTimeSinceCreation();
  o=config.get("autoCommitDelay");
  int delay=o == null ? 1000 : (Integer)o;
  setAutoCommitDelay(delay);
}

public static boolean isValidVector(Vector2f vector){
  if (vector == null)   return false;
  if (Float.isNaN(vector.x) || Float.isNaN(vector.y))   return false;
  if (Float.isInfinite(vector.x) || Float.isInfinite(vector.y))   return false;
  return true;
}

public static URL resolveURL(URL base,String target) throws MalformedURLException {
  target=target.trim();
  if (target.startsWith("?")) {
    return fixPureQueryTargets(base,target);
  }
  return new URL(base,target);
}

protected int maxDepth(Layout.Node node){
  int depth=0;
  for (int i=0; i < node.numChildren(); i++) {
    Layout.Node child=node.getChild(i);
    depth=Math.max(depth,maxDepth(child));
  }
  return depth + 1;
}

private int measureShort(int measureSpec){
  int result;
  int specMode=MeasureSpec.getMode(measureSpec);
  int specSize=MeasureSpec.getSize(measureSpec);
  if (specMode == MeasureSpec.EXACTLY) {
    result=specSize;
  }
 else {
    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);
    if (specMode == MeasureSpec.AT_MOST) {
      result=Math.min(result,specSize);
    }
  }
  return result;
}

private static URL[] pathToURLs(String path) throws MalformedURLException {
synchronized (pathToURLsCache) {
    Object[] v=(Object[])pathToURLsCache.get(path);
    if (v != null) {
      return (URL[])v[0];
    }
  }
  StringTokenizer st=new StringTokenizer(path);
  URL[] urls=new URL[st.countTokens()];
  for (int i=0; st.hasMoreTokens(); i++) {
    urls[i]=new URL(st.nextToken());
  }
synchronized (pathToURLsCache) {
    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});
  }
  return urls;
}

private void addFinal(Object[] stacks){
  Object[] input=new Object[inputSize], output=new Object[outputSize];
  for (int i=0; i < stacks.length; i++) {
    if (i < inputSize) {
      input[i]=stacks[i];
    }
 else     if (!(i - inputSize > outputSize)) {
      output[i - inputSize]=stacks[i];
    }
 else {
      throw new RuntimeException("Recipe is too big!");
    }
  }
  addRecipe(input,output);
}

protected void fireConnectionClosed(){
  ConnectionEvent evt=new ConnectionEvent(this);
  for (  ConnectionEventListener listener : connectionEventListeners) {
    listener.connectionClosed(evt);
  }
}

public static void putIntVolatile(Object obj,long off,int val){
  UNSAFE.putIntVolatile(obj,off,val);
}

NumberStrategy(final int field){
  this.field=field;
}

public static URI createUriFromServerSet(Set<InetSocketAddress> serverInetSet,String path,String protocol) throws URISyntaxException {
  InetSocketAddress inetSocketAddress=ServiceUtils.selectRandomItem(serverInetSet);
  String address=inetSocketAddress.getHostString();
  int port=inetSocketAddress.getPort();
  URI uri=new URI(protocol,null,address,port,path,null,null);
  return uri;
}

public PlotNavigator(Plot plot,String... axesNames){
  this(plot,Arrays.asList(axesNames));
}

private void expand(int i){
  if (count + i <= buf.length) {
    return;
  }
  byte[] newbuf=mPool.getBuf((count + i) * 2);
  System.arraycopy(buf,0,newbuf,0,count);
  mPool.returnBuf(buf);
  buf=newbuf;
}

public void addColumn(Class classType,boolean readOnly,String header){
  m_modelHeaderClass.add(classType);
  setColumnReadOnly(m_modelHeaderClass.size() - 1,readOnly);
  addColumn(header);
  WListItemRenderer renderer=(WListItemRenderer)getItemRenderer();
  renderer.setColumnClass((renderer.getNoColumns() - 1),classType);
  return;
}

PointComparator(int dimension){
  this.dimension=dimension;
}

public static void addElement(Document doc,Element rootElement,String elementName,String typeIn,String isArrayIn,String partitionerIn){
  Element element=doc.createElement("element");
  rootElement.appendChild(element);
  Element name=doc.createElement("name");
  name.appendChild(doc.createTextNode(elementName));
  element.appendChild(name);
  Element type=doc.createElement("type");
  type.appendChild(doc.createTextNode(typeIn));
  element.appendChild(type);
  if (isArrayIn.equals("true")) {
    element.appendChild(doc.createElement("isArray"));
  }
  if (partitionerIn != null) {
    Element partitioner=doc.createElement("partitioner");
    partitioner.appendChild(doc.createTextNode(partitionerIn));
    element.appendChild(partitioner);
  }
}

public void flushBuffer() throws IOException {
  if (count > 0) {
    m_os.write(m_outputBytes,0,count);
    count=0;
  }
}

public void addFirst(Character c){
  addFirst(c.toString());
}

public final void addInstanceOf(String className){
  Reject.ifNull(className);
  String value=className.trim();
  if (!value.matches(CLASS_RE)) {
    throw new IllegalArgumentException("\"" + value + "\" is not a valid Java class name");
  }
  instanceOfInterfaces.add(value);
}

@Override public int read(byte[] b,int off,int len) throws IOException {
  if (b == null) {
    throw new NullPointerException("Byte array must not be null");
  }
  if (len < 0 || off < 0 || (off + len) > b.length) {
    throw new IndexOutOfBoundsException("Array Size=" + b.length + ", offset="+ off+ ", length="+ len);
  }
  int read=0;
  if (len == 0) {
    return 0;
  }
  while (len > 0) {
    if (encoderOut.hasRemaining()) {
      int c=Math.min(encoderOut.remaining(),len);
      encoderOut.get(b,off,c);
      off+=c;
      len-=c;
      read+=c;
    }
 else {
      fillBuffer();
      if (endOfInput && !encoderOut.hasRemaining()) {
        break;
      }
    }
  }
  return read == 0 && endOfInput ? -1 : read;
}

public boolean isDisplayedExpectingComponents(){
  boolean result=false;
  if (conditions.isConditionMet(visibilityOf(window))) {
    if (components.isEmpty()) {
      closeButton.click();
    }
 else {
      result=true;
    }
  }
  return result;
}

private void processRunStartedTag(String identifier){
  Pattern numTestsPattern=Pattern.compile("Running (\\d+) test[s]? from .*");
  Matcher numTests=numTestsPattern.matcher(identifier);
  if (numTests.find()) {
    try {
      mNumTestsExpected=Integer.parseInt(numTests.group(1));
    }
 catch (    NumberFormatException e) {
      Log.e(LOG_TAG,"Unable to determine number of tests expected, received: " + numTests.group(1));
    }
  }
  if (mNumTestsExpected > 0) {
    reportTestRunStarted();
    mNumTestsRun=0;
    mTestRunInProgress=true;
  }
}

public StyledString insert(char ch,int offset) throws StringIndexOutOfBoundsException {
  if (offset < 0 || offset > builder.length()) {
    throw new StringIndexOutOfBoundsException("Invalid offset (" + offset + ")");
  }
  builder.insert(offset,ch);
  return this;
}

public void addRoot(ProtoElement root){
  roots.add(root);
}

public void expandToObjectAndSelect(Object elementOrTreePath,int level){
  if (checkBusy()) {
    return;
  }
  Object parent=getParentElement(elementOrTreePath);
  if (((parent != null) && getExpandedState(parent)) || isRootElement(elementOrTreePath)) {
    Widget w=internalGetWidgetToSelect(elementOrTreePath);
    if (null != w) {
      List<Object> selectionList=new ArrayList<>();
      selectionList.add(w);
      setSelection(selectionList);
      objectToSelect.set(null);
    }
 else {
      objectToSelect.set(elementOrTreePath);
    }
  }
 else {
    objectToSelect.set(elementOrTreePath);
    List<Object> objectsToExpand=createObjectList(parent,new ArrayList<>());
    if (!objectsToExpand.isEmpty()) {
      objectsToBeExpanded.addAll(objectsToExpand);
      Widget w=internalExpand(elementOrTreePath,true);
      if (w != null) {
        internalExpandToLevel(w,level);
      }
    }
 else {
      Widget w=internalGetWidgetToSelect(elementOrTreePath);
      if (null != w) {
        List<Object> selectionList=new ArrayList<>();
        selectionList.add(w);
        setSelection(selectionList);
        objectToSelect.set(null);
      }
    }
  }
}

public void appendCell(float value){
  appendCell(String.valueOf(value));
}

public SVNChangeSetCollector(ISynchronizePageConfiguration configuration){
  super(configuration);
}

public void ensureMaxSize(int maxWidth,int maxHeight,boolean keepProportions){
  int width=canvas.getWidth();
  int height=canvas.getHeight();
  if (keepProportions) {
    if (width > height) {
      if (width > maxWidth) {
        height=Math.round(height*=maxWidth / (double)width);
        width=maxWidth;
      }
    }
 else {
      if (height > maxHeight) {
        width=Math.round(width*=maxHeight / (double)height);
        height=maxHeight;
      }
    }
  }
 else {
    width=Math.min(width,maxWidth);
    height=Math.min(height,maxHeight);
  }
  resize(width,height);
}

public static boolean isNormalized(CharSequence src,java.text.Normalizer.Form form,int option){
  return NormalizerBase.isNormalized(src.toString(),form,option);
}

@Override public String toString(boolean freq){
  StringBuffer result=new StringBuffer();
  result.append(m_attribute.name() + " ");
switch (m_comparison) {
case EQUAL:
    result.append("=");
  break;
case LESS_THAN_OR_EQUAL_TO:
result.append("<=");
break;
case GREATER_THAN:
result.append(">");
break;
default :
break;
}
result.append(" " + Utils.doubleToString(m_splitPoint,4));
if (freq) {
result.append(":" + m_frequency);
}
return result.toString();
}

public static String unescapeSom(String s){
  int idx=s.indexOf('\\');
  if (idx < 0)   return s;
  StringBuilder sb=new StringBuilder();
  int last=0;
  while (idx >= 0) {
    sb.append(s.substring(last,idx));
    last=idx + 1;
    idx=s.indexOf('\\',idx + 1);
  }
  sb.append(s.substring(last));
  return sb.toString();
}

void saveAsync(ColumnEntity entity,Duration ttl,Consumer<ColumnEntity> callBack) throws ExecuteAsyncQueryException, UnsupportedOperationException ;

private static CopyState readCopyState(DataInput in) throws IOException {
  byte[] infosBytes=new byte[in.readVInt()];
  in.readBytes(infosBytes,0,infosBytes.length);
  long gen=in.readVLong();
  long version=in.readVLong();
  Map<String,FileMetaData> files=CopyFilesHandler.readFilesMetaData(in);
  int count=in.readVInt();
  Set<String> completedMergeFiles=new HashSet<>();
  for (int i=0; i < count; i++) {
    completedMergeFiles.add(in.readString());
  }
  long primaryGen=in.readVLong();
  return new CopyState(files,version,gen,infosBytes,completedMergeFiles,primaryGen,null);
}

private void beforeName() throws IOException {
  JsonScope context=peek();
  if (context == JsonScope.NONEMPTY_OBJECT) {
    out.write(',');
  }
 else   if (context != JsonScope.EMPTY_OBJECT) {
    throw new IllegalStateException("Nesting problem: " + stack);
  }
  newline();
  replaceTop(JsonScope.DANGLING_NAME);
}

@Transactional public void redeem(final String tokenNumber,final String service){
  final Token token=tokenRepository.findByTokenNumberAndService(tokenNumber,service);
  if (token == null)   throw new ApplicationRuntimeException("Token " + tokenNumber + " does not exist!");
  redeem(token);
}

public int lightenColor(int color,float factor){
  float r=Color.red(color) * factor;
  float g=Color.green(color) * factor;
  float b=Color.blue(color) * factor;
  int ir=Math.min(255,(int)r);
  int ig=Math.min(255,(int)g);
  int ib=Math.min(255,(int)b);
  int ia=Color.alpha(color);
  return (Color.argb(ia,ir,ig,ib));
}

private static String toDatabaseString(final OperandSize size){
switch (size) {
case BYTE:
    return "b1";
case WORD:
  return "b2";
case DWORD:
return "b4";
case QWORD:
return "b8";
case OWORD:
return "b16";
case ADDRESS:
return "b4";
default :
throw new IllegalArgumentException(String.format("Error: Unknown operand size %s",size));
}
}

static String fileNameOfClass(final String className,String typeSuffix){
  return className.replace('.','/') + "." + typeSuffix;
}

public void writePv(ProcessVar pv,int recursiveDepth){
  writePv(pv,recursiveDepth,false);
}

public synchronized void add(double minValue,double maxValue){
  super.add(minValue);
  mMaxValues.add(maxValue);
}

private static void assertQualNS(String qualNS) throws XMPException {
  if (qualNS == null || qualNS.length() == 0) {
    throw new XMPException("Empty qualifier namespace URI",XMPError.BADSCHEMA);
  }
}

public static StringBuilder formatTo(StringBuilder buf,float[] d,String sep,NumberFormat nf){
  if (d == null) {
    return buf.append("null");
  }
  if (d.length == 0) {
    return buf;
  }
  buf.append(nf.format(d[0]));
  for (int i=1; i < d.length; i++) {
    buf.append(sep);
    buf.append(nf.format(d[i]));
  }
  return buf;
}

public static void pack(int[] n,String s){
  for (int i=0; i < n.length; i++) {
    n[i]=0;
  }
  int idx=n.length - 1;
  for (int i=s.length() - 1; i >= 0; i--) {
    n[idx--]=s.charAt(i) - '0';
  }
}

public int removeViewpoints(int[] indices){
  for (int i=indices.length - 1; i >= 0; --i)   viewpointList.remove(indices[i]);
  viewpointIndex=indices[0] - 1;
  if (viewpointList.size() == 0) {
    viewpointIndex=-1;
  }
 else   if (viewpointIndex < 0) {
    viewpointIndex=viewpointList.size() - 1;
  }
  return (viewpointIndex);
}

public void clearOnPageChangeListeners(){
  if (mOnPageChangeListeners != null) {
    mOnPageChangeListeners.clear();
  }
}

private void updateColor(){
  try {
    BreakpointConditionParser.evaluate(inputField.getText());
    inputField.setBackground(Color.WHITE);
  }
 catch (  final InvalidFormulaException e) {
    inputField.setBackground(Color.RED);
  }
}

public void removeIgnoredView(View v){
  ignoredViews.remove(v);
}

public boolean writeHeader(OutputStream os){
  try {
    writeInt(os,CACHE_MAGIC);
    writeString(os,key);
    writeString(os,etag == null ? "" : etag);
    writeLong(os,serverDate);
    writeLong(os,lastModified);
    writeLong(os,ttl);
    writeLong(os,softTtl);
    writeStringStringMap(responseHeaders,os);
    os.flush();
    return true;
  }
 catch (  IOException e) {
    VinciLog.d("%s",e.toString());
    return false;
  }
}

private static boolean ensureCurrent(LeasedResource resource){
  return resource.getExpiration() > SystemTime.timeMillis();
}

public static int maxFill(final int n,final float f){
  return Math.min((int)Math.ceil(n * f),n - 1);
}

public void clear(){
  mCategories.clear();
  mTitles.clear();
  mValues.clear();
}

public void toggleSectionSelected(int sectionIndex){
  setSectionSelected(sectionIndex,!isSectionSelected(sectionIndex));
}

public String combine(List<String> files,String outFile) throws Exception {
  ArrayList<String> cmd=new ArrayList<String>();
  cmd.add(soxBin);
  for (  String file : files) {
    cmd.add(file);
  }
  cmd.add(outFile);
  int rc=execSox(cmd,callback);
  if (rc != 0) {
    throw new Exception("exit code: " + rc);
  }
  return outFile;
}

void stopScrollingInstance(){
  if (log.isLoggable(PlatformLogger.Level.FINER)) {
    log.finer("Stop scrolling on " + this);
  }
  i_scroller.stop();
}

@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="OK to compare floating point") protected void newInternalMinute(){
  double origCurrent=mCurrentIntensity;
  int origState=mState;
  int steps=getNumberOfSteps();
  if ((mTransitionDuration > 0) && (steps > 0)) {
    double stepsPerMinute=steps / mTransitionDuration;
    double stepSize=1 / (double)steps;
    double intensityDiffPerMinute=stepSize * stepsPerMinute;
    if (Math.abs(mCurrentIntensity - mTransitionTargetIntensity) != 0) {
      if (log.isDebugEnabled()) {
        log.debug("before Target: " + mTransitionTargetIntensity + " Current: "+ mCurrentIntensity);
      }
      if (mTransitionTargetIntensity > mCurrentIntensity) {
        mCurrentIntensity=mCurrentIntensity + intensityDiffPerMinute;
        if (mCurrentIntensity >= mTransitionTargetIntensity) {
          mCurrentIntensity=mTransitionTargetIntensity;
          if (mCurrentIntensity >= getMaxIntensity()) {
            mState=ON;
          }
 else {
            mState=INTERMEDIATE;
          }
        }
      }
 else {
        mCurrentIntensity=mCurrentIntensity - intensityDiffPerMinute;
        if (mCurrentIntensity <= mTransitionTargetIntensity) {
          mCurrentIntensity=mTransitionTargetIntensity;
          if (mCurrentIntensity <= getMinIntensity()) {
            mState=OFF;
          }
 else {
            mState=INTERMEDIATE;
          }
        }
      }
      sendIntensity(mCurrentIntensity);
      if (log.isDebugEnabled()) {
        log.debug("after Target: " + mTransitionTargetIntensity + " Current: "+ mCurrentIntensity);
      }
    }
  }
  if (origCurrent != mCurrentIntensity) {
    firePropertyChange("CurrentIntensity",Double.valueOf(origCurrent),Double.valueOf(mCurrentIntensity));
    if (log.isDebugEnabled()) {
      log.debug("firePropertyChange intensity " + origCurrent + " -> "+ mCurrentIntensity);
    }
  }
  if (origState != mState) {
    firePropertyChange("KnownState",Integer.valueOf(origState),Integer.valueOf(mState));
    if (log.isDebugEnabled()) {
      log.debug("firePropertyChange intensity " + origCurrent + " -> "+ mCurrentIntensity);
    }
  }
}

public void execute2(KahanObject in1,double in2){
  if (Double.isInfinite(in1._sum) || Double.isInfinite(in2)) {
    in1.set(Double.isInfinite(in2) ? in2 : in1._sum,0);
    return;
  }
  double correction=in2 + in1._correction;
  double sum=in1._sum + correction;
  in1.set(sum,correction - (sum - in1._sum));
}

public static Response newFixedLengthResponse(String msg){
  return newFixedLengthResponse(Status.OK,NanoHTTPD.MIME_HTML,msg);
}

@Override public XMLEvent peek() throws XMLStreamException {
  log.log(Level.FINE,"peek()");
  if (!hasNext()) {
    throw new XMLStreamException("The reader is depleted!");
  }
  log.log(Level.FINE,"peek(): {0}",nextEvent);
  return nextEvent;
}

public static String replaceEndPoint(String url,String endPoint){
  return endPoint + url.replaceFirst(DEFAULT_ENDPOINT,"");
}

public static double length(double x,double y,double z){
  return Math.sqrt(x * x + y * y + z * z);
}

private void makeOkPath(){
  path1.reset();
  int w2=getMeasuredWidth() / 2;
  int h2=getMeasuredHeight() / 2;
  double a=Math.cos(Math.toRadians(25)) * getRadius();
  double c=Math.sin(Math.toRadians(25)) * getRadius();
  double l=Math.cos(Math.toRadians(53)) * 2 * a;
  double b=Math.sin(Math.toRadians(53)) * l;
  double m=Math.cos(Math.toRadians(53)) * l;
  path1.moveTo((float)(w2 - a),(float)(h2 - c));
  path1.lineTo((float)(w2 - a + m),(float)(h2 - c + Math.sin(Math.toRadians(53)) * l));
  path1.lineTo((float)(w2 + a),(float)(h2 - c));
  pathMeasure1.setPath(path1,false);
  mMarkOklength=pathMeasure1.getLength();
}

private static void _trustAllHttpsCertificates(){
  SSLContext context;
  if (_trustManagers == null) {
    _trustManagers=new TrustManager[]{new FakeX509TrustManager()};
  }
  try {
    context=SSLContext.getInstance("SSL");
    context.init(null,_trustManagers,new SecureRandom());
  }
 catch (  GeneralSecurityException gse) {
    throw new IllegalStateException(gse.getMessage());
  }
  HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());
}

public void addMemberValue(String name,MemberValue value){
  Pair p=new Pair();
  p.name=pool.addUtf8Info(name);
  p.value=value;
  if (members == null)   members=new LinkedHashMap();
  members.put(name,p);
}

public java.lang.String toString(){
  return toString(value);
}

protected List<String> addWhitespace(List<String> list){
  List<String> whitespaceList=new ArrayList<>();
  for (  String value : list) {
    whitespaceList.add(addWhitespace(value));
  }
  return whitespaceList;
}

public static String computeQualifiedWidgetTypeName(Node widgetNode){
  if (widgetNode.getNodeType() != Node.ELEMENT_NODE) {
    return null;
  }
  String typeName=widgetNode.getLocalName();
  if (typeName.length() == 0 || Character.isLowerCase(typeName.charAt(0))) {
    return null;
  }
  String packageName=UiBinderUtilities.getPackageName(widgetNode.getNamespaceURI());
  return packageName != null ? JavaUtilities.getQualifiedTypeName(typeName,packageName) : null;
}

private static boolean processFtypAtom(ParsableByteArray atomData){
  atomData.setPosition(Atom.HEADER_SIZE);
  int majorBrand=atomData.readInt();
  if (majorBrand == BRAND_QUICKTIME) {
    return true;
  }
  atomData.skipBytes(4);
  while (atomData.bytesLeft() > 0) {
    if (atomData.readInt() == BRAND_QUICKTIME) {
      return true;
    }
  }
  return false;
}

public Map<String,String> parse(final String str,char separator){
  if (str == null) {
    return new HashMap<String,String>();
  }
  return parse(str.toCharArray(),separator);
}

public void clear(){
  oredCriteria.clear();
  orderByClause=null;
  distinct=false;
}

public String delete(String url,final int expectedStatusCode){
  return delete(url,Collections.<String,String>emptyMap(),expectedStatusCode);
}

protected void runningSum(Set<Map.Entry<Double,Double>> c,double value,double[] sums){
  double offset=CONST - Math.log(m_Width);
  double logFactor=Math.log(m_Threshold) - Math.log(1 - m_Threshold);
  double logSumOfWeights=Math.log(m_SumOfWeights);
  Iterator<Map.Entry<Double,Double>> itr=c.iterator();
  while (itr.hasNext()) {
    Map.Entry<Double,Double> entry=itr.next();
    if (entry.getValue() > 0) {
      double diff=(entry.getKey() - value) / m_Width;
      double logDensity=offset - 0.5 * diff * diff;
      double logWeight=Math.log(entry.getValue());
      sums[0]=logOfSum(sums[0],logWeight + logDensity);
      sums[1]=logOfSum(sums[1],logWeight);
      if (logDensity + logSumOfWeights < logOfSum(logFactor + sums[0],logDensity + sums[1])) {
        break;
      }
    }
  }
}

@Override public CategoricalTable copy(){
  Map<Value,Double> newTable=new HashMap<Value,Double>();
  for (  Value v : table.keySet()) {
    newTable.put(v,table.get(v));
  }
  return new CategoricalTable(variable,newTable);
}

public Configuration subConfig(String prefix,String keyPrefix){
  Configuration sub=new Configuration();
  addToSubConf(sub,prefix.length() > 0 ? prefix + "." + keyPrefix : keyPrefix);
  return sub;
}

public Map<String,String> mapNameToDisplayName(Set<String> names) throws SMSException, SSOException {
  final Map<String,String> map=new HashMap<>(names.size());
  for (  String name : names) {
    if (smsConsoleServiceConfig.isServiceVisible(name)) {
      final ServiceSchemaManager serviceSchemaManager=serviceSchemaManagerFactory.build(name);
      String displayName=getLocalizedServiceName(serviceSchemaManager,name);
      String resourceName=serviceSchemaManager.getResourceName();
      if (!name.equals(displayName) && !StringUtils.isBlank(resourceName)) {
        map.put(resourceName,displayName);
      }
    }
  }
  return map;
}

public IntColumn(int nrows,int capacity,int defaultValue){
  super(int.class,new Integer(defaultValue));
  if (capacity < nrows) {
    throw new IllegalArgumentException("Capacity value can not be less than the row count.");
  }
  m_values=new int[capacity];
  Arrays.fill(m_values,defaultValue);
  m_size=nrows;
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

@Override public String toString(){
  return "DistributionLocator " + getId();
}

public static final boolean executePotentialWork(final Object data,final ImageView imageView){
  final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);
  if (bitmapWorkerTask != null) {
    final Object bitmapData=bitmapWorkerTask.mKey;
    if (bitmapData == null || !bitmapData.equals(data)) {
      bitmapWorkerTask.cancel(true);
    }
 else {
      return false;
    }
  }
  return true;
}

public static void queueBitmap(String key,Bitmap bmp){
  mBitmapQueue.put(key,bmp);
}

private static int analyze(Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {
  int stepType;
  int stepCount=0;
  int analysisResult=0x00000000;
  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {
    stepCount++;
    boolean predAnalysis=analyzePredicate(compiler,stepOpCodePos,stepType);
    if (predAnalysis)     analysisResult|=BIT_PREDICATE;
switch (stepType) {
case OpCodes.OP_VARIABLE:
case OpCodes.OP_EXTFUNCTION:
case OpCodes.OP_FUNCTION:
case OpCodes.OP_GROUP:
      analysisResult|=BIT_FILTER;
    break;
case OpCodes.FROM_ROOT:
  analysisResult|=BIT_ROOT;
break;
case OpCodes.FROM_ANCESTORS:
analysisResult|=BIT_ANCESTOR;
break;
case OpCodes.FROM_ANCESTORS_OR_SELF:
analysisResult|=BIT_ANCESTOR_OR_SELF;
break;
case OpCodes.FROM_ATTRIBUTES:
analysisResult|=BIT_ATTRIBUTE;
break;
case OpCodes.FROM_NAMESPACE:
analysisResult|=BIT_NAMESPACE;
break;
case OpCodes.FROM_CHILDREN:
analysisResult|=BIT_CHILD;
break;
case OpCodes.FROM_DESCENDANTS:
analysisResult|=BIT_DESCENDANT;
break;
case OpCodes.FROM_DESCENDANTS_OR_SELF:
if (2 == stepCount && BIT_ROOT == analysisResult) {
analysisResult|=BIT_ANY_DESCENDANT_FROM_ROOT;
}
analysisResult|=BIT_DESCENDANT_OR_SELF;
break;
case OpCodes.FROM_FOLLOWING:
analysisResult|=BIT_FOLLOWING;
break;
case OpCodes.FROM_FOLLOWING_SIBLINGS:
analysisResult|=BIT_FOLLOWING_SIBLING;
break;
case OpCodes.FROM_PRECEDING:
analysisResult|=BIT_PRECEDING;
break;
case OpCodes.FROM_PRECEDING_SIBLINGS:
analysisResult|=BIT_PRECEDING_SIBLING;
break;
case OpCodes.FROM_PARENT:
analysisResult|=BIT_PARENT;
break;
case OpCodes.FROM_SELF:
analysisResult|=BIT_SELF;
break;
case OpCodes.MATCH_ATTRIBUTE:
analysisResult|=(BIT_MATCH_PATTERN | BIT_ATTRIBUTE);
break;
case OpCodes.MATCH_ANY_ANCESTOR:
analysisResult|=(BIT_MATCH_PATTERN | BIT_ANCESTOR);
break;
case OpCodes.MATCH_IMMEDIATE_ANCESTOR:
analysisResult|=(BIT_MATCH_PATTERN | BIT_PARENT);
break;
default :
throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));
}
if (OpCodes.NODETYPE_NODE == compiler.getOp(stepOpCodePos + 3)) {
analysisResult|=BIT_NODETEST_ANY;
}
stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);
if (stepOpCodePos < 0) break;
}
analysisResult|=(stepCount & BITS_COUNT);
return analysisResult;
}

public void addListener(AfterServerStartListener listener){
  _afterStartListeners.add(listener);
}

public synchronized void add(String name,long threadId){
  if (mFinished) {
    throw new IllegalStateException("Marker added to finished log");
  }
  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));
}

private static List<SizePair> generateValidPreviewSizeList(Camera camera){
  Camera.Parameters parameters=camera.getParameters();
  List<android.hardware.Camera.Size> supportedPreviewSizes=parameters.getSupportedPreviewSizes();
  List<android.hardware.Camera.Size> supportedPictureSizes=parameters.getSupportedPictureSizes();
  List<SizePair> validPreviewSizes=new ArrayList<>();
  for (  android.hardware.Camera.Size previewSize : supportedPreviewSizes) {
    float previewAspectRatio=(float)previewSize.width / (float)previewSize.height;
    for (    android.hardware.Camera.Size pictureSize : supportedPictureSizes) {
      float pictureAspectRatio=(float)pictureSize.width / (float)pictureSize.height;
      if (Math.abs(previewAspectRatio - pictureAspectRatio) < ASPECT_RATIO_TOLERANCE) {
        validPreviewSizes.add(new SizePair(previewSize,pictureSize));
        break;
      }
    }
  }
  if (validPreviewSizes.size() == 0) {
    Log.w(TAG,"No preview sizes have a corresponding same-aspect-ratio picture size");
    for (    android.hardware.Camera.Size previewSize : supportedPreviewSizes) {
      validPreviewSizes.add(new SizePair(previewSize,null));
    }
  }
  return validPreviewSizes;
}

private int makeAvailable() throws IOException {
  if (pos != -1) {
    return 0;
  }
  total+=tail - head - pad;
  System.arraycopy(buffer,tail - pad,buffer,0,pad);
  head=0;
  tail=pad;
  for (; ; ) {
    int bytesRead=input.read(buffer,tail,bufSize - tail);
    if (bytesRead == -1) {
      final String msg="Stream ended unexpectedly";
      throw new FileUploadException(MalformedStreamException,msg);
    }
    tail+=bytesRead;
    findSeparator();
    int av=available();
    if (av > 0 || pos != -1) {
      return av;
    }
  }
}

public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,List<ObjectName> unregMBeanList) throws IllegalArgumentException {
  super(notifType,sourceObj,sequence,timeStamp,message);
  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidCreate(notifType)) {
    throw new IllegalArgumentException("Invalid parameter.");
  }
  relationId=id;
  relationTypeName=typeName;
  relationObjName=safeGetObjectName(objectName);
  unregisterMBeanList=safeGetObjectNameList(unregMBeanList);
}

public void addDataToStore(Object[] row) throws CarbonDataWriterException {
  dataRows.add(row);
  this.entryCount++;
  if (this.entryCount == this.blockletSize) {
    try {
      semaphore.acquire();
      producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));
      blockletProcessingCount.incrementAndGet();
      processedDataCount+=entryCount;
      LOGGER.info("Total Number Of records added to store: " + processedDataCount);
      dataRows=new ArrayList<>(this.blockletSize);
      this.entryCount=0;
    }
 catch (    InterruptedException e) {
      LOGGER.error(e,e.getMessage());
      throw new CarbonDataWriterException(e.getMessage());
    }
  }
}

public boolean localHostOrDomainIs(String host,String domain){
  return domain.startsWith(host);
}

protected double entropy(double[][] dataZs,double[][] dataWs){
  double entropy=0.0;
  int numInstances=dataZs.length;
  for (int j=0; j < m_numClasses; j++) {
    double m=0.0;
    double sum=0.0;
    for (int i=0; i < numInstances; i++) {
      m+=dataZs[i][j] * dataWs[i][j];
      sum+=dataWs[i][j];
    }
    m/=sum;
    for (int i=0; i < numInstances; i++) {
      entropy+=dataWs[i][j] * Math.pow(dataZs[i][j] - m,2);
    }
  }
  return entropy;
}

protected void writeDistribution(Parameter parameter,boolean isRef,XMLWriter writer){
switch (parameter.priorType) {
case UNIFORM_PRIOR:
    String id=parameter.taxaId + "-uniformDist";
  if (isRef) {
    writer.writeIDref(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,id);
  }
 else {
    writer.writeOpenTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,id)});
    writer.writeOpenTag(UniformDistributionModelParser.LOWER);
    writer.writeText(Double.toString(parameter.uniformLower));
    writer.writeCloseTag(UniformDistributionModelParser.LOWER);
    writer.writeOpenTag(UniformDistributionModelParser.UPPER);
    writer.writeText(Double.toString(parameter.uniformUpper));
    writer.writeCloseTag(UniformDistributionModelParser.UPPER);
    writer.writeCloseTag(UniformDistributionModelParser.UNIFORM_DISTRIBUTION_MODEL);
  }
break;
case EXPONENTIAL_PRIOR:
writer.writeOpenTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);
writer.writeOpenTag(DistributionModelParser.MEAN);
writer.writeText(Double.toString(parameter.mean));
writer.writeCloseTag(DistributionModelParser.MEAN);
writer.writeOpenTag(DistributionModelParser.OFFSET);
writer.writeText(Double.toString(parameter.offset));
writer.writeCloseTag(DistributionModelParser.OFFSET);
writer.writeCloseTag(ExponentialDistributionModel.EXPONENTIAL_DISTRIBUTION_MODEL);
break;
case NORMAL_PRIOR:
writer.writeOpenTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);
writer.writeOpenTag(NormalDistributionModelParser.MEAN);
writer.writeText(Double.toString(parameter.mean));
writer.writeCloseTag(NormalDistributionModelParser.MEAN);
writer.writeOpenTag(NormalDistributionModelParser.STDEV);
writer.writeText(Double.toString(parameter.stdev));
writer.writeCloseTag(NormalDistributionModelParser.STDEV);
writer.writeCloseTag(NormalDistributionModelParser.NORMAL_DISTRIBUTION_MODEL);
break;
case LOGNORMAL_PRIOR:
writer.writeOpenTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL,new Attribute[]{new Attribute.Default<Boolean>(LogNormalDistributionModelParser.MEAN_IN_REAL_SPACE,parameter.isMeanInRealSpace()),new Attribute.Default<Boolean>(LogNormalDistributionModelParser.STDEV_IN_REAL_SPACE,parameter.isMeanInRealSpace())});
writer.writeOpenTag(LogNormalDistributionModelParser.MEAN);
writer.writeText(Double.toString(parameter.mean));
writer.writeCloseTag(LogNormalDistributionModelParser.MEAN);
writer.writeOpenTag(LogNormalDistributionModelParser.STDEV);
writer.writeText(Double.toString(parameter.stdev));
writer.writeCloseTag(LogNormalDistributionModelParser.STDEV);
writer.writeOpenTag(LogNormalDistributionModelParser.OFFSET);
writer.writeText(Double.toString(parameter.offset));
writer.writeCloseTag(LogNormalDistributionModelParser.OFFSET);
writer.writeCloseTag(LogNormalDistributionModelParser.LOGNORMAL_DISTRIBUTION_MODEL);
break;
case GAMMA_PRIOR:
writer.writeOpenTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);
writer.writeOpenTag(DistributionModelParser.SHAPE);
writer.writeText(Double.toString(parameter.shape));
writer.writeCloseTag(DistributionModelParser.SHAPE);
writer.writeOpenTag(DistributionModelParser.SCALE);
writer.writeText(Double.toString(parameter.scale));
writer.writeCloseTag(DistributionModelParser.SCALE);
writer.writeOpenTag(DistributionModelParser.OFFSET);
writer.writeText(Double.toString(parameter.offset));
writer.writeCloseTag(DistributionModelParser.OFFSET);
writer.writeCloseTag(GammaDistributionModel.GAMMA_DISTRIBUTION_MODEL);
break;
default :
throw new IllegalArgumentException("Unknown Distribution Model for " + parameter.getName());
}
}

public void saveWorkingInstancesToFileQ(){
  if (m_IOThread == null) {
    m_FileChooser.setCapabilitiesFilter(m_FilterEditor.getCapabilitiesFilter());
    m_FileChooser.setAcceptAllFileFilterUsed(false);
    int returnVal=m_FileChooser.showSaveDialog(this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
      Instances inst=new Instances(m_Instances);
      inst.setClassIndex(m_AttVisualizePanel.getColoringIndex());
      saveInstancesToFile(m_FileChooser.getSaver(),inst);
    }
    FileFilter temp=m_FileChooser.getFileFilter();
    m_FileChooser.setAcceptAllFileFilterUsed(true);
    m_FileChooser.setFileFilter(temp);
  }
 else {
    JOptionPane.showMessageDialog(this,"Can't save at this time,\n" + "currently busy with other IO","Save Instances",JOptionPane.WARNING_MESSAGE);
  }
}

private void calculateColor(int coord){
  coord=coord - mBarPointerHaloRadius;
  if (coord < 0) {
    coord=0;
  }
 else   if (coord > mBarLength) {
    coord=mBarLength;
  }
  mColor=Color.HSVToColor(Math.round(mPosToOpacFactor * coord),mHSVColor);
  if (Color.alpha(mColor) > 250) {
    mColor=Color.HSVToColor(mHSVColor);
  }
 else   if (Color.alpha(mColor) < 5) {
    mColor=Color.TRANSPARENT;
  }
}

public int read(char cbuf[],int off,int len) throws IOException {
  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0))   throw new IndexOutOfBoundsException();
  if (len == 0)   return 0;
  if (next >= length)   return -1;
  int n=Math.min(length - next,len);
  text.getChars(next,next + n,cbuf,off);
  next+=n;
  return n;
}

private boolean adjustIndent(){
  AlignmentImpl alignment=CoreFormatterUtil.getAlignment(myCurrentBlock);
  WhiteSpace whiteSpace=myCurrentBlock.getWhiteSpace();
  if (alignment == null || myAlignmentsToSkip.contains(alignment)) {
    if (whiteSpace.containsLineFeeds()) {
      adjustSpacingByIndentOffset();
    }
 else {
      whiteSpace.arrangeSpaces(myCurrentBlock.getSpaceProperty());
    }
    return true;
  }
  BlockAlignmentProcessor alignmentProcessor=ALIGNMENT_PROCESSORS.get(alignment.getAnchor());
  if (alignmentProcessor == null) {
    LOG.error(String.format("Can't find alignment processor for alignment anchor %s",alignment.getAnchor()));
    return true;
  }
  BlockAlignmentProcessor.Context context=new BlockAlignmentProcessor.Context(myDocument,alignment,myCurrentBlock,myAlignmentMappings,myBackwardShiftedAlignedBlocks,getIndentOptionsToUse(myCurrentBlock,myDefaultIndentOption),myRightMargin);
  BlockAlignmentProcessor.Result result=alignmentProcessor.applyAlignment(context);
  final LeafBlockWrapper offsetResponsibleBlock=alignment.getOffsetRespBlockBefore(myCurrentBlock);
switch (result) {
case TARGET_BLOCK_PROCESSED_NOT_ALIGNED:
    return true;
case TARGET_BLOCK_ALIGNED:
  storeAlignmentMapping();
return true;
case BACKWARD_BLOCK_ALIGNED:
if (offsetResponsibleBlock == null) {
return true;
}
Set<LeafBlockWrapper> blocksCausedRealignment=new HashSet<LeafBlockWrapper>();
myBackwardShiftedAlignedBlocks.clear();
myBackwardShiftedAlignedBlocks.put(offsetResponsibleBlock,blocksCausedRealignment);
blocksCausedRealignment.add(myCurrentBlock);
storeAlignmentMapping(myCurrentBlock,offsetResponsibleBlock);
myCurrentBlock=offsetResponsibleBlock.getNextBlock();
onCurrentLineChanged();
return false;
case RECURSION_DETECTED:
myCurrentBlock=offsetResponsibleBlock;
case UNABLE_TO_ALIGN_BACKWARD_BLOCK:
myAlignmentsToSkip.add(alignment);
return false;
default :
return true;
}
}

@Override public void appendCode(Type declaringType,TypeTuple inputTypes,Type outputType,List<Variable> inputVars,StringBuilder b){
  b.append(field.toCode(declaringType,inputVars));
}

public ForwardPlanner(DialogueSystem system){
  this.system=system;
}

private JButton addButton(String text,Container container,float alignment){
  JButton button=new JButton(text);
  button.setAlignmentX(alignment);
  container.add(button);
  return button;
}

private boolean noMatchForTagInAttributes(AttributeSet attr,HTML.Tag t,Object tagValue){
  if (attr != null && attr.isDefined(t)) {
    Object newValue=attr.getAttribute(t);
    if ((tagValue == null) ? (newValue == null) : (newValue != null && tagValue.equals(newValue))) {
      return false;
    }
  }
  return true;
}

public String businessObjectDataKeyToString(BusinessObjectDataKey businessObjectDataKey){
  if (businessObjectDataKey == null) {
    return null;
  }
  return businessObjectDataKeyToString(businessObjectDataKey.getNamespace(),businessObjectDataKey.getBusinessObjectDefinitionName(),businessObjectDataKey.getBusinessObjectFormatUsage(),businessObjectDataKey.getBusinessObjectFormatFileType(),businessObjectDataKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),businessObjectDataKey.getSubPartitionValues(),businessObjectDataKey.getBusinessObjectDataVersion());
}

public static boolean isValidIfd(int ifdId){
  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;
}

private Usage createTalkUsage(Context context){
  if (talkUsage != null) {
    return talkUsage;
  }
  TypeToken<List<Usage>> token=new TypeToken<List<Usage>>(){
  }
;
  List<Usage> initTalkIO=JsonUtils.parseJsonFile(context,"talk_io.json",token);
  talkUsage=initTalkIO.get(0);
  return talkUsage;
}

@Nullable public GrCall enclosingCall(String name,GdslMembersHolderConsumer consumer){
  final PsiElement place=consumer.getPlace();
  if (place == null)   return null;
  GrCall call=PsiTreeUtil.getParentOfType(place,GrCall.class,true);
  if (call == null)   return null;
  while (call != null && !name.equals(getInvokedMethodName(call))) {
    call=PsiTreeUtil.getParentOfType(call,GrCall.class,true);
  }
  if (call == null)   return null;
  final GrArgumentList argumentList=call.getArgumentList();
  if (argumentList != null) {
    for (    GrExpression arg : argumentList.getExpressionArguments()) {
      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {
        return call;
      }
    }
  }
  if (call instanceof GrMethodCallExpression) {
    for (    GrExpression arg : call.getClosureArguments()) {
      if (arg instanceof GrClosableBlock && PsiTreeUtil.findCommonParent(place,arg) == arg) {
        return call;
      }
    }
  }
  return null;
}

public static void genOvfenvIsoImage(String ovfenvPropKVStr,String isoFilePath){
  byte[] bOvfenvPropKVStr=ovfenvPropKVStr.getBytes();
  String propFilePath="/tmp/ovf-env.properties";
  File propFile=new File(propFilePath);
  try {
    FileUtils.writePlainFile(propFilePath,bOvfenvPropKVStr);
  }
 catch (  Exception e1) {
    propFile.delete();
    log.error("Write to prop file failed with exception: {}",e1.getMessage());
    throw new IllegalStateException("Failed to generate ovfenv prop file.");
  }
  try {
    File isoFile=new File(isoFilePath);
    String[] genISOImageCommand={GENISO_CMD,"--label","CDROM","-f",propFilePath,"-o",isoFilePath,"ovf-env.properties","4096"};
    Exec.Result result=Exec.sudo(CMD_TIMEOUT,genISOImageCommand);
    if (!result.exitedNormally() || result.getExitValue() != 0) {
      log.error("Generating ISO image failed with exit value: {}, error: {}",result.getExitValue(),result.getStdError());
      throw new IllegalStateException("Failed to generate ISO image.");
    }
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    propFile.delete();
  }
}

public static void createActionableEvent(DbClient dbClient,EventUtils.EventCode eventCode,URI tenant,String name,String description,String warning,DataObject resource,List<URI> affectedResources,String approveMethod,Object[] approveParameters){
  createActionableEvent(dbClient,eventCode,tenant,name,description,warning,resource,affectedResources,approveMethod,approveParameters,null,null);
}

public Rational(ByteProvider byteProvider) throws IOException {
  MXFPropertyPopulator.populateField(byteProvider,this,"numerator");
  MXFPropertyPopulator.populateField(byteProvider,this,"denominator");
}

public synchronized void removeNotifications(String type) throws InstanceNotFoundException {
  Vector<Integer> v=getNotificationIDs(type);
  if (v.isEmpty())   throw new InstanceNotFoundException("Timer notifications to remove not in the list of notifications");
  for (  Integer i : v)   removeNotification(i);
}

private void unifyViaAtom(Atomic parentAtom){
  Atomic childAtom=getRuleConclusionAtom();
  Query parent=parentAtom.getParentQuery();
  Map<String,String> unifiers=childAtom.getUnifiers(parentAtom);
  head.unify(unifiers);
  body.unify(unifiers);
  Set<String> childFVs=body.getVarSet();
  Set<String> parentBVs=parentAtom.getVarNames();
  Set<String> parentVars=parent.getVarSet();
  parentBVs.forEach(null);
  childFVs.forEach(null);
}

static void addUuid(SsfNode node,UUID uuid){
  node.set("UUIDMost",uuid.getMostSignificantBits());
  node.set("UUIDLeast",uuid.getLeastSignificantBits());
}

public void removeChangingListener(OnWheelChangedListener listener){
  changingListeners.remove(listener);
}

public long objectFieldOffset(Field field){
  if (Modifier.isStatic(field.getModifiers())) {
    throw new IllegalArgumentException("valid for instance fields only");
  }
  return objectFieldOffset0(field);
}

private static int determineConsecutiveDigitCount(CharSequence msg,int startpos){
  int count=0;
  int len=msg.length();
  int idx=startpos;
  if (idx < len) {
    char ch=msg.charAt(idx);
    while (isDigit(ch) && idx < len) {
      count++;
      idx++;
      if (idx < len) {
        ch=msg.charAt(idx);
      }
    }
  }
  return count;
}

abstract void toXML(StringBuilder xml,int level);

public void dispose(){
  mRunButton.setSelected(false);
  super.dispose();
}

public FluxConcatArray<T> concatAdditionalSourceFirst(Publisher<? extends T> source){
  int n=array.length;
  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];
  System.arraycopy(array,0,newArray,1,n);
  newArray[0]=source;
  return new FluxConcatArray<>(delayError,newArray);
}

public void shutdown(){
  shutdownServerThread();
  shutdownSessions();
}

private boolean isLocalId(String localId){
  if (!localId.startsWith("local_")) {
    return false;
  }
  for (int i=6; i < localId.length(); ++i) {
    char c=localId.charAt(i);
    if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f')) {
      return false;
    }
  }
  return true;
}

public ServerSocketBar bind(ServerSocketBar ss) throws ConfigException, IOException {
synchronized (_sslInitLock) {
    if (_stdServerSocket != null)     throw new ConfigException(L.l("Can't create duplicte ssl factory."));
    try {
      initConfig();
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      throw e;
    }
    _stdServerSocket=ss;
    initSSL();
    return this;
  }
}

private int checkInterruptWhileWaiting(Node node){
  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;
}

private void resetOutputBuilders(){
  ansi=Ansi.ansi();
  stringBuilder=new StringBuilder();
}

public String read(ByteBuffer buf,DictionaryCache dict){
  StringBuilder out=new StringBuilder();
  if (pre != null)   out.append(pre);
  if (type == VOID)   return out.toString();
  if (type == NULL) {
    out.append("null");
    return out.toString();
  }
  if (type == BYTE) {
    out.append(buf.get());
    return out.toString();
  }
  if (type == SHORT) {
    out.append(buf.getShort());
    return out.toString();
  }
  if (type == INT) {
    out.append(buf.getInt());
    return out.toString();
  }
  if (type == LONG) {
    out.append(buf.getLong());
    return out.toString();
  }
  if (type == DOUBLE) {
    out.append(buf.getDouble());
    return out.toString();
  }
  if (type == BOOLEAN) {
    out.append((buf.get() == 0 ? "false" : "true"));
    return out.toString();
  }
  if (type == STRING) {
    short pos=buf.getShort();
    if (pos > -1) {
      out.append("\"");
      out.append(dict.get(pos));
      out.append("\"");
    }
 else {
      int size=0;
      int val=buf.get() & 0xFF;
      while (val == 255) {
        size+=val;
        val=buf.get() & 0xFF;
      }
      size+=val;
      byte[] data=new byte[size];
      buf.get(data);
      out.append("\"");
      out.append(new String(data,StandardCharsets.UTF_8));
      out.append("\"");
    }
    return out.toString();
  }
  return null;
}

public void write(String filename){
  logger.info("write carrier plans");
  try {
    openFile(filename);
    writeXmlHead();
    startCarriers(this.writer);
    for (    Carrier carrier : carriers) {
      startCarrier(carrier,this.writer);
      writeVehicles(carrier,this.writer);
      writeShipments(carrier,this.writer);
      writePlans(carrier,this.writer);
      endCarrier(this.writer);
    }
    endCarriers(this.writer);
    close();
    logger.info("done");
  }
 catch (  IOException e) {
    e.printStackTrace();
    logger.error(e);
    System.exit(1);
  }
}

public void removeResourceListener(ResourceEventsListener listener){
  resourceListeners.remove(listener);
}

public void testHasMainActivity() throws Exception {
  mEnabled.add(LauncherActivityDetector.ISSUE_MORE_THAN_ONE_LAUNCHER);
  mEnabled.add(LauncherActivityDetector.ISSUE_MISSING_LAUNCHER);
  mEnabled.add(LauncherActivityDetector.ISSUE_LAUNCHER_ACTIVITY_IN_LIBRARY);
  String expected="No warnings.";
  String result=lintProject(xml(FN_ANDROID_MANIFEST_XML,"" + "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + "<manifest package=\"com.example.android.custom-lint-rules\"\n"+ "          xmlns:android=\"http://schemas.android.com/apk/res/android\">\n"+ "    <application>\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".OtherActivity\">\n"+ "        </activity>\n"+ "\n"+ "        <activity android:name=\"com.example.android.custom-lint-rules"+ ".MainActivity\">\n"+ "            <intent-filter>\n"+ "                <action android:name=\"android.intent.action.MAIN\"/>\n"+ "                <category android:name=\"android.intent.category.LAUNCHER\"/>\n"+ "            </intent-filter>\n"+ "        </activity>\n"+ "    </application>\n"+ "</manifest>"));
  assertEquals(expected,result);
}

private void informUponSimilarName(final StringBuffer messageBuffer,final String name,final String candidate){
  if (name.equals(candidate)) {
    return;
  }
  if (name.regionMatches(true,0,candidate,0,PKG_LEN + 5)) {
    messageBuffer.append(" Did you mean '");
    messageBuffer.append(candidate);
    messageBuffer.append("'?");
  }
}

protected void writeHeader(RandomAccessFile file,int size) throws IOException {
  String str;
  int offset=0;
  byte[] buffer=new byte[5];
  str=Integer.toString(getSize());
  for (int i=0; i < (5 - str.length()); i++) {
    buffer[i]=(byte)'0';
  }
  offset+=(5 - str.length());
  for (int i=0; i < str.length(); i++) {
    buffer[i + offset]=(byte)str.charAt(i);
  }
  file.write(buffer);
}

public String buildJavaVendor(){
  return properties.getProperty("build.java.vendor");
}

public VoiceResult(String match,float confidence){
  mMatch=match;
  mConfidence=confidence;
}

final void treeify(Node<K,V>[] tab){
  TreeNode<K,V> root=null;
  for (TreeNode<K,V> x=this, next; x != null; x=next) {
    next=(TreeNode<K,V>)x.next;
    x.left=x.right=null;
    if (root == null) {
      x.parent=null;
      x.red=false;
      root=x;
    }
 else {
      K k=x.key;
      int h=x.hash;
      Class<?> kc=null;
      for (TreeNode<K,V> p=root; ; ) {
        int dir, ph;
        K pk=p.key;
        if ((ph=p.hash) > h)         dir=-1;
 else         if (ph < h)         dir=1;
 else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);
        TreeNode<K,V> xp=p;
        if ((p=(dir <= 0) ? p.left : p.right) == null) {
          x.parent=xp;
          if (dir <= 0)           xp.left=x;
 else           xp.right=x;
          root=balanceInsertion(root,x);
          break;
        }
      }
    }
  }
  moveRootToFront(tab,root);
}

private void addCategoryToTree(DefaultMutableTreeNode node,String[] names){
  if (names.length == 0) {
    return;
  }
  boolean matched=false;
  for (@SuppressWarnings("unchecked") Enumeration<DefaultMutableTreeNode> e=node.children(); e.hasMoreElements(); ) {
    DefaultMutableTreeNode childNode=e.nextElement();
    String nodeName=(String)childNode.getUserObject();
    if (nodeName.equals(names[0])) {
      if (names.length > 1) {
        addCategoryToTree(childNode,Arrays.copyOfRange(names,1,names.length));
        matched=true;
      }
 else {
      }
    }
  }
  if (!matched) {
    DefaultMutableTreeNode root=node;
    for (int i=0; i < names.length; i++) {
      DefaultMutableTreeNode newNode=new DefaultMutableTreeNode(names[i]);
      root.add(newNode);
      root=newNode;
    }
  }
}

public void addDrawerListener(@NonNull DrawerListener listener){
  if (listener == null) {
    return;
  }
  if (mListeners == null) {
    mListeners=new ArrayList<DrawerListener>();
  }
  mListeners.add(listener);
}

private void editNote(int noteId){
  hideSoftKeyboard();
  Intent intent=new Intent(MainActivity.this,NoteActivity.class);
  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
  intent.putExtra("id",String.valueOf(noteId));
  startActivity(intent);
}

public final Entry addEntry(Position inputPosition,Position outputPosition){
  Entry entry=new Entry(inputPosition,outputPosition);
  entries.add(entry);
  return entry;
}

public void unHideActionBar(View view){
  if (toolbarAutoHider != null)   toolbarAutoHider.showComponent();
}

public static String formatTimeDelta(long time,CharSequence sep){
  final StringBuilder sb=new StringBuilder();
  final Formatter fmt=new Formatter(sb);
  for (int i=TIME_UNIT_SIZES.length - 1; i >= 0; --i) {
    if (i == 0 && sb.length() > 4) {
      continue;
    }
    if (sb.length() > 0) {
      sb.append(sep);
    }
    final long acValue=time / TIME_UNIT_SIZES[i];
    time=time % TIME_UNIT_SIZES[i];
    if (!(acValue == 0 && sb.length() == 0)) {
      fmt.format("%0" + TIME_UNIT_DIGITS[i] + "d%s",Long.valueOf(acValue),TIME_UNIT_NAMES[i]);
    }
  }
  fmt.close();
  return sb.toString();
}

public void run(){
  Log.d(LOG,"run(): sampleRate=" + sampleRate + ", channels="+ channels+ ", bufferSizeInBytes="+ bufferSizeInBytes+ " ("+ bufferSizeInMs+ " ms)");
  isPlaying=false;
  AudioTrack atrack=null;
  try {
    atrack=new AudioTrack(AudioManager.STREAM_MUSIC,sampleRate,channels == 1 ? AudioFormat.CHANNEL_CONFIGURATION_MONO : AudioFormat.CHANNEL_CONFIGURATION_STEREO,AudioFormat.ENCODING_PCM_16BIT,bufferSizeInBytes,AudioTrack.MODE_STREAM);
    atrack.setPlaybackPositionUpdateListener(this);
    atrack.setPositionNotificationPeriod(msToSamples(200,sampleRate,channels));
    if (playerCallback != null)     playerCallback.playerAudioTrackCreated(atrack);
    this.audioTrack=atrack;
  }
 catch (  Throwable t) {
    Log.e(LOG,"Cannot create AudioTrack: " + t);
    stop();
    if (playerCallback != null)     playerCallback.playerException(t);
  }
  while (!stopped) {
    int ln=acquireSamples();
    if (stopped || ln == 0) {
      releaseSamples();
      break;
    }
    int writtenNow=0;
    do {
      if (writtenNow != 0) {
        Log.d(LOG,"too fast for playback, sleeping...");
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
        }
      }
      int written=atrack.write(lsamples,writtenNow,ln);
      if (written < 0) {
        Log.e(LOG,"error in playback feed: " + written);
        stopped=true;
        break;
      }
      writtenTotal+=written;
      int buffered=writtenTotal - atrack.getPlaybackHeadPosition() * channels;
      if (!stopped && !isPlaying) {
        if (buffered * 2 >= bufferSizeInBytes) {
          Log.d(LOG,"start of AudioTrack - buffered " + buffered + " samples");
          atrack.play();
          isPlaying=true;
        }
 else {
          Log.d(LOG,"start buffer not filled enough - AudioTrack not started yet");
        }
      }
      writtenNow+=written;
      ln-=written;
    }
 while (ln > 0 && !stopped);
    releaseSamples();
  }
  if (!stopped && stoppedByEOF)   waitForLastTone();
  if (isPlaying)   atrack.pause();
  atrack.flush();
  atrack.release();
  stopped=true;
  Log.d(LOG,"run() stopped.");
}

private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){
  try {
    PackageManager pm=context.getPackageManager();
    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);
    if (handlers == null || handlers.size() == 0) {
      return false;
    }
    for (    ResolveInfo resolveInfo : handlers) {
      IntentFilter filter=resolveInfo.filter;
      if (filter == null)       continue;
      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;
      if (resolveInfo.activityInfo == null)       continue;
      return true;
    }
  }
 catch (  RuntimeException e) {
    Log.e(TAG,"Runtime exception while getting specialized handlers");
  }
  return false;
}

private void clipViewOnTheRight(Rect curViewBound,float curViewWidth,int right){
  curViewBound.right=(int)(right - mClipPadding);
  curViewBound.left=(int)(curViewBound.right - curViewWidth);
}

public static double[] deconvolve(final double[] p,final double rate){
  final double[] r=Arrays.copyOf(p,p.length);
  for (int k=0; k < p.length; k++) {
    for (int j=0; j < p.length; j++) {
      if (k + j < p.length) {
        r[k + j]-=rate * p[k] * p[j];
      }
    }
  }
  double sum=0;
  for (  final double q : r) {
    sum+=q;
  }
  sum=1 / sum;
  for (int k=0; k < r.length; k++) {
    r[k]*=sum;
  }
  return r;
}

public static String collapseNewlines(String str){
  return collapseCharacter(str,'\n');
}

private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
  s.defaultReadObject();
  init(getName());
}

public static double calculateColumnTotal(Values2D data,int column,int[] validRows){
  ParamChecks.nullNotPermitted(data,"data");
  double total=0.0;
  int rowCount=data.getRowCount();
  for (int v=0; v < validRows.length; v++) {
    int row=validRows[v];
    if (row < rowCount) {
      Number n=data.getValue(row,column);
      if (n != null) {
        total+=n.doubleValue();
      }
    }
  }
  return total;
}

public boolean openAnalysis(File f,SaveType saveType){
  if (!f.exists() || !f.canRead()) {
    throw new IllegalArgumentException("Can't read " + f.getPath());
  }
  mainFrameLoadSaveHelper.prepareForFileLoad(f,saveType);
  mainFrameLoadSaveHelper.loadAnalysis(f);
  return true;
}

public void childrenRemoved(BeanContextMembershipEvent bcme){
  findAndUndo(bcme.iterator());
}

public String process(Item item) throws ProcessException {
  int count=0;
  Item ss=item.getItemAs(Relation.SYLLABLE);
  Item firstSyllable=LAST_LAST_SYLLABLE_PATH.findItem(item);
  for (Item p=ss; p != null; p=p.getNext()) {
    if (p.equalsShared(firstSyllable)) {
      break;
    }
    count++;
  }
  return Integer.toString(rail(count));
}

private void removeInstancesFromContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> componentsToScaleDown){
  ArrayList<RamRequirement> ramRequirements=getRAMInstances(componentsToScaleDown);
  for (  RamRequirement ramRequirement : ramRequirements) {
    String component=ramRequirement.getComponentName();
    int numInstancesToRemove=-componentsToScaleDown.get(component);
    for (int j=0; j < numInstancesToRemove; j++) {
      Pair<Integer,InstanceId> idPair=removeRRInstance(containers,component);
      List<InstanceId> instances=allocation.get(idPair.first);
      instances.remove(idPair.second);
      allocation.put(idPair.first,instances);
    }
  }
}

protected void drawNormalMessage(DrawHandler drawHandler,PointDouble send,PointDouble receive,RelationDrawer.ArrowEndType arrowEndType,boolean fillArrow,DrawingInfo drawingInfo){
  Line line=new Line(send,receive);
  drawHandler.drawLine(line);
  drawHandler.setLineType(LineType.SOLID);
  RelationDrawer.drawArrowToLine(receive,drawHandler,line,false,arrowEndType,fillArrow,false);
  double height=send.y - drawingInfo.getVerticalStart(sendTick);
  double topLeftX;
  AlignHorizontal hAlignment;
  if (from == getFirstLifeline()) {
    topLeftX=send.x;
    hAlignment=AlignHorizontal.LEFT;
  }
 else {
    topLeftX=receive.x;
    hAlignment=AlignHorizontal.RIGHT;
  }
  if (duration == 0) {
    hAlignment=AlignHorizontal.CENTER;
  }
  topLeftX+=LIFELINE_TEXT_PADDING;
  TextSplitter.drawText(drawHandler,textLines,topLeftX,send.y - height,Math.abs(send.x - receive.x) - LIFELINE_TEXT_PADDING * 2,height,hAlignment,AlignVertical.BOTTOM);
}

private void killConsist(){
  if (validLocoAdr(locoTextField1.getText()) < 0) {
    return;
  }
  int locoAddr=getLocoAddr(locoTextField1,adrButton1);
  sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0);
}

public ListenKey startListening() throws IOException {
  return startListening(null,0);
}

@Nonnull public static Set<Flag> parse(@Nonnegative final int bitmask){
  Check.notNegative(bitmask,"bitmask");
  final Set<Flag> flags=new HashSet<Flag>();
  for (  final Flag flag : values()) {
    if ((bitmask & flag.getNumber()) != 0) {
      flags.add(flag);
    }
  }
  return flags;
}

protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {
  Attributes mainAttributes=manifest.getMainAttributes();
  String dirName=packageName.replace('.','/') + "/";
  Attributes packageAttributes=manifest.getAttributes(dirName);
  boolean noEntry=false;
  if (packageAttributes == null) {
    noEntry=true;
    packageAttributes=mainAttributes;
  }
  String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);
  if (specificationTitle == null && !noEntry) {
    specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);
  }
  String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);
  if (specificationVersion == null && !noEntry) {
    specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);
  }
  String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);
  if (specificationVendor == null && !noEntry) {
    specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);
  }
  String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);
  if (implementationTitle == null && !noEntry) {
    implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);
  }
  String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);
  if (implementationVersion == null && !noEntry) {
    implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);
  }
  String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);
  if (implementationVendor == null && !noEntry) {
    implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);
  }
  return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null);
}

@SuppressWarnings("fallthrough") private void parse() throws SAXException, IOException {
  init();
  try {
    mHandCont.setDocumentLocator(this);
    mHandCont.startDocument();
    if (mPh != PH_MISC_DTD) {
      mPh=PH_MISC_DTD;
    }
    int evt=EV_NULL;
    do {
      wsskip();
switch (evt=step()) {
case EV_ELM:
case EV_ELMS:
        mPh=PH_DOCELM;
      break;
case EV_COMM:
case EV_PI:
    break;
case EV_DTD:
  if (mPh >= PH_DTD_MISC) {
    panic(FAULT);
  }
mPh=PH_DTD_MISC;
break;
default :
panic(FAULT);
}
}
 while (mPh < PH_DOCELM);
do {
switch (evt) {
case EV_ELM:
case EV_ELMS:
if (mIsNSAware == true) {
mHandCont.startElement(mElm.value,mElm.name,"",mAttrs);
}
 else {
mHandCont.startElement("","",mElm.name,mAttrs);
}
if (evt == EV_ELMS) {
evt=step();
break;
}
case EV_ELME:
if (mIsNSAware == true) {
mHandCont.endElement(mElm.value,mElm.name,"");
}
 else {
mHandCont.endElement("","",mElm.name);
}
while (mPref.list == mElm) {
mHandCont.endPrefixMapping(mPref.name);
mPref=del(mPref);
}
mElm=del(mElm);
if (mElm == null) {
mPh=PH_DOCELM_MISC;
}
 else {
evt=step();
}
break;
case EV_TEXT:
case EV_WSPC:
case EV_CDAT:
case EV_COMM:
case EV_PI:
case EV_ENT:
evt=step();
break;
default :
panic(FAULT);
}
}
 while (mPh == PH_DOCELM);
do {
if (wsskip() == EOS) {
break;
}
switch (step()) {
case EV_COMM:
case EV_PI:
break;
default :
panic(FAULT);
}
}
 while (mPh == PH_DOCELM_MISC);
mPh=PH_AFTER_DOC;
}
 catch (SAXException saxe) {
throw saxe;
}
catch (IOException ioe) {
throw ioe;
}
catch (RuntimeException rte) {
throw rte;
}
catch (Exception e) {
panic(e.toString());
}
 finally {
mHandCont.endDocument();
cleanup();
}
}

protected boolean engineVerify(byte[] sigBytes) throws SignatureException {
  if (sigBytes == null) {
    throw new NullPointerException("sigBytes == null");
  }
  return checkSignature(sigBytes,0,0);
}

public void addMatchString(String matchString){
  matchStrings.add(matchString);
}

public void delete() throws IOException {
  close();
  deleteContents(directory);
}

public String timeAgo(final long millis){
  return time(System.currentTimeMillis() - millis);
}

public static byte[] hexStringToByteArray(String input){
  if ((input == null) || (input.length() % 2 != 0)) {
    throw new IllegalArgumentException("The input must not be null and " + "shall have an even number of hexadecimal characters. Found: " + input);
  }
  byte[] output=new byte[input.length() / 2];
  for (int i=0; i < output.length; i++) {
    output[i]=(byte)((Character.digit(input.charAt(i * 2),16) << 4) + Character.digit(input.charAt(i * 2 + 1),16));
  }
  return output;
}

private boolean stopTrackingJob(JobStatus jobStatus){
  boolean removed;
  boolean rocking;
synchronized (mJobs) {
    removed=mJobs.remove(jobStatus);
    rocking=mReadyToRock;
  }
  if (removed && rocking) {
    for (int i=0; i < mControllers.size(); i++) {
      StateController controller=mControllers.get(i);
      controller.maybeStopTrackingJob(jobStatus);
    }
  }
  return removed;
}

public double coefficientOfVariance(){
  return Math.sqrt(variance()) / mean();
}

final boolean transferAfterCancelledWait(Node node){
  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {
    enq(node);
    return true;
  }
  while (!isOnSyncQueue(node))   Thread.yield();
  return false;
}

public String toString(){
  StringBuilder buf=new StringBuilder();
  buf.append(this.coefficient);
  if (this.variables.length > 0) {
    buf.append("*");
  }
  for (  int variable : this.variables) {
    buf.append("(V");
    buf.append(variable);
    buf.append(")");
  }
  return buf.toString();
}

public SkeletonVersionChecker(int defaultVersion){
  myExplicitVersion=createTreeMap();
  myDefaultVersion=defaultVersion;
  load();
}

@Override public AttributeSchemaImpl upgradeAttribute(AttributeSchemaImpl newAttr) throws UpgradeException {
  return updateDefaultValues(newAttr,Collections.singleton(OLDEST_VERSION));
}

public static String toDalvikName(String canonicalName){
  final boolean isArray=(canonicalName.charAt(0) == '[');
  if (isArray) {
    return canonicalName.replace('.','/');
  }
 else {
    if (canonicalName.equals("char"))     return "C";
 else     if (canonicalName.equals("int"))     return "I";
 else     if (canonicalName.equals("byte"))     return "B";
 else     if (canonicalName.equals("boolean"))     return "Z";
 else     if (canonicalName.equals("float"))     return "F";
 else     if (canonicalName.equals("double"))     return "D";
 else     if (canonicalName.equals("short"))     return "S";
 else     if (canonicalName.equals("long"))     return "J";
 else     if (canonicalName.equals("void"))     return "V";
 else     return "L" + canonicalName.replace('.','/') + ";";
  }
}

private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){
  builder.append("    protected void ");
  builder.append(getEnsureName(fieldName));
  builder.append("() {\n");
  builder.append("      if (");
  builder.append(fieldName);
  builder.append(" == null) {\n        ");
  builder.append(fieldName);
  builder.append(" = new ");
  builder.append(getImplName(method.getGenericReturnType(),true));
  builder.append("();\n");
  builder.append("      }\n");
  builder.append("    }\n");
}

public void unregisterClient(ClientProxyMembershipID proxyID,AcceptorImpl acceptor,boolean clientDisconnectedCleanly){
  unregisterClient(proxyID);
  if (acceptor != null) {
    CacheClientNotifier ccn=acceptor.getCacheClientNotifier();
    if (ccn != null) {
      try {
        ccn.unregisterClient(proxyID,clientDisconnectedCleanly);
      }
 catch (      CancelException ignore) {
      }
    }
  }
}

private String doubleQuotesHandling(String resource){
  return resource.replaceAll("\"",Matcher.quoteReplacement("\\\""));
}

public static int allocateNewContainer(ArrayList<Container> containers,Resource capacity,int paddingPercentage){
  containers.add(new Container(capacity,paddingPercentage));
  return containers.size();
}

public static boolean isLocalResourceUri(Uri uri){
  final String scheme=getSchemeOrNull(uri);
  return LOCAL_RESOURCE_SCHEME.equals(scheme);
}

private boolean isMineshafterPresent(){
  try {
    Class.forName("mineshafter.MineServer");
    return true;
  }
 catch (  Exception e) {
    return false;
  }
}

protected String doWaitForPath(String filePath){
  String path=null;
  long waitTimeMillis=0;
  assertTrue("OBB " + filePath + " is not currently mounted!",mSm.isObbMounted(filePath));
  while (path == null) {
    try {
      Thread.sleep(WAIT_TIME_INCR);
      waitTimeMillis+=WAIT_TIME_INCR;
      if (waitTimeMillis > MAX_WAIT_TIME) {
        fail("Timed out waiting to get path of OBB file " + filePath);
      }
    }
 catch (    InterruptedException e) {
    }
    path=mSm.getMountedObbPath(filePath);
  }
  Log.i(LOG_TAG,"Got OBB path: " + path);
  return path;
}

@Override protected boolean isZoneLevelResource(){
  return false;
}

private void validateMessage(String expectedType,String type,long returnCode,String service,String payload) throws ReplicatorException {
  if (!type.equals(expectedType)) {
    throw new ReplicatorException("Server should have returned message of type \"" + Protocol.TYPE_FILTERED + "\", but returned \""+ type+ "\" instead");
  }
 else   if (returnCode != 0) {
    throw new ReplicatorException("Server returned a non-zero code (" + returnCode + "), payload: "+ payload);
  }
 else   if (!service.equals(messageGenerator.getService())) {
    throw new ReplicatorException("Server returned unexpected service name in the message: received \"" + service + "\", but expected \""+ messageGenerator.getService()+ "\"");
  }
}

private void closeDatabases(){
  s_logger.log(Level.INFO,"");
  s_logger.log(Level.INFO,"migrateCloseDatabases");
  m_source.close();
  m_target.close();
  m_source.reset();
  m_source=null;
  m_target.reset();
  m_target=null;
  m_direction=null;
  m_objectType=null;
  m_objectTypes=null;
  m_sourceMap=null;
  m_targetMap=null;
  m_objectList=new ArrayList<String>();
  m_trackingList=new ArrayList<String>();
  m_tempIndexes=null;
  m_counterPrg=null;
  m_counterDrp=null;
  m_counterUpd=null;
  m_counterAdd=null;
  m_totalPrg=null;
  m_totalDrp=null;
  m_totalUpd=null;
  m_totalAdd=null;
  m_detailType=null;
  m_detailTypes=null;
  m_detailCounterDrp=null;
  m_detailCounterUpd=null;
  m_detailCounterAdd=null;
  System.gc();
}

public static byte[] MD5(final byte[] message,final int offset,final int length){
  MessageDigest digest;
  try {
    digest=MessageDigest.getInstance("MD5");
    digest.update(message,offset,length);
    final byte[] md5=digest.digest();
    return md5;
  }
 catch (  final NoSuchAlgorithmException e) {
    if (Cfg.EXCEPTION) {
      Check.log(e);
    }
  }
  return null;
}

private int runMetastoreCompareJob(Optional<Path> inputTableListPath,Path outputPath) throws InterruptedException, IOException, ClassNotFoundException, TemplateRenderException {
  LOG.info("Starting job for step 1...");
  int result;
  if (inputTableListPath.isPresent()) {
    result=runMetastoreCompareJobWithTextInput(inputTableListPath.get(),outputPath);
  }
 else {
    result=runMetastoreCompareJob(outputPath);
  }
  if (result == 0) {
    LOG.info("Job for step 1 finished successfully! To view logging data, run the following " + "commands in Hive: \n\n" + VelocityUtils.renderTemplate(STEP1_HQL_TEMPLATE,velocityContext));
  }
  return result;
}

public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){
  final int deltaValue, currentScrollValue, scrollValue;
switch (view.getPullToRefreshScrollDirection()) {
case HORIZONTAL:
    deltaValue=deltaX;
  scrollValue=scrollX;
currentScrollValue=view.getScrollX();
break;
case VERTICAL:
default :
deltaValue=deltaY;
scrollValue=scrollY;
currentScrollValue=view.getScrollY();
break;
}
if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {
final Mode mode=view.getMode();
if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {
final int newScrollValue=(deltaValue + scrollValue);
if (PullToRefreshBase.DEBUG) {
Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);
}
if (newScrollValue < (0 - fuzzyThreshold)) {
if (mode.showHeaderLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));
}
}
 else if (newScrollValue > (scrollRange + fuzzyThreshold)) {
if (mode.showFooterLoadingLayout()) {
if (currentScrollValue == 0) {
view.setState(State.OVERSCROLLING);
}
view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));
}
}
 else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {
view.setState(State.RESET);
}
}
 else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {
view.setState(State.RESET);
}
}
}

public void deleteSubPeopleContainers(Set peopleContainers) throws AMException, SSOException {
  Iterator iter=peopleContainers.iterator();
  while (iter.hasNext()) {
    String peopleContainerDN=(String)iter.next();
    AMPeopleContainer peopleContainer=new AMPeopleContainerImpl(super.token,peopleContainerDN);
    peopleContainer.delete();
  }
}

private void testFindRecentMessageUidsInMailbox() throws Exception {
  LOG.info("findRecentMessageUidsInMailbox");
  List<MessageUid> recentMessages=messageMapper.findRecentMessageUidsInMailbox(MBOXES.get(1));
  assertEquals(MESSAGE_NO.size() - 1,recentMessages.size());
}

public void queueEvent(Runnable r){
  if (r == null) {
    throw new IllegalArgumentException("r must not be null");
  }
synchronized (sGLThreadManager) {
    mEventQueue.add(r);
    sGLThreadManager.notifyAll();
  }
}

private void addErrorMessage(String message){
  if (message != null) {
    m_errorMessages.append(message);
  }
  m_errorMessages.append("\r\n");
}

@SuppressWarnings("unchecked") protected final void ensureCapacity(long targetSize){
  long capacity=capacity();
  if (targetSize > capacity) {
    inflateSpine();
    for (int i=spineIndex + 1; targetSize > capacity; i++) {
      if (i >= spine.length) {
        int newSpineSize=spine.length * 2;
        spine=Arrays.copyOf(spine,newSpineSize);
        priorElementCount=Arrays.copyOf(priorElementCount,newSpineSize);
      }
      int nextChunkSize=chunkSize(i);
      spine[i]=(E[])new Object[nextChunkSize];
      priorElementCount[i]=priorElementCount[i - 1] + spine[i - 1].length;
      capacity+=nextChunkSize;
    }
  }
}

public void write(String key,byte[] newValue) throws Exception {
  Map<String,byte[]> entry=new HashMap<>();
  entry.put(key,newValue);
  write(entry);
}

public void timingEvent(float fraction){
  current.x=(int)(start.x + (end.x - start.x) * fraction);
  current.y=(int)(start.y + (end.y - start.y) * fraction);
  track.setCarPosition(current);
}

public void transform(Source xmlSource,Result outputTarget) throws TransformerException {
  transform(xmlSource,outputTarget,true);
}

public String query(String handler,SolrQueryRequest req) throws Exception {
  try (SolrCore core=getCoreInc()){
    SolrQueryResponse rsp=new SolrQueryResponse();
    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));
    core.execute(core.getRequestHandler(handler),req,rsp);
    if (rsp.getException() != null) {
      throw rsp.getException();
    }
    StringWriter sw=new StringWriter(32000);
    QueryResponseWriter responseWriter=core.getQueryResponseWriter(req);
    responseWriter.write(sw,req,rsp);
    req.close();
    return sw.toString();
  }
  finally {
    req.close();
    SolrRequestInfo.clearRequestInfo();
  }
}

private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){
  boolean bothLinksHaveSameLinkStats=true;
  if (linkA.getFreespeed() != linkB.getFreespeed()) {
    bothLinksHaveSameLinkStats=false;
  }
  if (linkA.getCapacity() != linkB.getCapacity()) {
    bothLinksHaveSameLinkStats=false;
  }
  return bothLinksHaveSameLinkStats;
}

public String generateSanitizedId(){
  String result=generateId();
  result=result.replace(':','-');
  result=result.replace('_','-');
  result=result.replace('.','-');
  return result;
}

public static synchronized void removeProvider(int providerNumber){
  Provider p=providers.remove(providerNumber - 1);
  providersNames.remove(p.getName());
  setNeedRefresh();
}

private Object parseElement(Node element) throws XmlParseException {
  try {
    return parseElementRaw(element);
  }
 catch (  Exception e) {
    throw new XmlParseException("Failed to parse: " + element.getNodeName(),e);
  }
}

public IOUtils(){
  super();
}

public static String format(Money money){
  long microAmount=0;
  if (money != null) {
    microAmount=money.getMicroAmount();
  }
 else {
    return PLACEHOLDER_NULL;
  }
  double amount=(double)microAmount / MICRO_UNITS;
  return String.format(FORMAT_MONEY,amount);
}

private void deleteInstance(EntryClass eclass){
  int idx=entryClasses.indexOf(eclass);
  eclass=(EntryClass)entryClasses.get(idx);
  int num=eclass.getNumInstances() - 1;
  if (num == 0)   entryClasses.remove(idx);
  eclass.setNumInstances(num);
}

public Properties readSettings(){
  try {
    String pacScriptUrl=detectScriptUrlPerDHCP();
    if (pacScriptUrl == null) {
      pacScriptUrl=detectScriptUrlPerDNS();
    }
    if (pacScriptUrl == null) {
      return null;
    }
    Properties result=new Properties();
    result.setProperty("url",pacScriptUrl);
    return result;
  }
 catch (  IOException e) {
    return new Properties();
  }
}

public void logWarning(String message){
  logger.warning(logPrefix + message);
}

public static String readAsString(InputStream is) throws IOException {
  StringBuffer buf=new StringBuffer();
  byte[] b=new byte[8192];
  int nread=-1;
  while ((nread=is.read(b)) >= 0) {
    String s=new String(b,0,nread);
    buf.append(s);
  }
  return buf.toString();
}

public ArrayFieldVector(int size,T preset){
  this(preset.getField(),size);
  Arrays.fill(data,preset);
}

public static synchronized void unregisterTransactionServicePlugin(TransactionServicePlugin l){
  if (service_ != null) {
    service_.removeTSListener(l);
  }
  tsListenersList_.remove(l);
}

private void updateProgress(String progressLabel,int progress){
  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {
    myHost.updateProgress(progressLabel,progress);
  }
  previousProgress=progress;
  previousProgressLabel=progressLabel;
}

private void push(final int type){
  if (outputStack == null) {
    outputStack=new int[10];
  }
  int n=outputStack.length;
  if (outputStackTop >= n) {
    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];
    System.arraycopy(outputStack,0,t,0,n);
    outputStack=t;
  }
  outputStack[outputStackTop++]=type;
  int top=owner.inputStackTop + outputStackTop;
  if (top > owner.outputStackMax) {
    owner.outputStackMax=top;
  }
}

protected static void isort(int level[],float BC[]){
  float temp;
  int temp2;
  for (int i=0; i < BC.length - 1; i++) {
    int j=i;
    temp=BC[j + 1];
    temp2=level[j + 1];
    if (temp == 0) {
      continue;
    }
    int prej=j + 1;
    while (j > -1 && (temp < BC[j] || BC[j] == 0)) {
      if (BC[j] == 0) {
        j--;
        continue;
      }
 else {
        BC[prej]=BC[j];
        level[prej]=level[j];
        prej=j;
        j--;
      }
    }
    BC[prej]=temp;
    level[prej]=temp2;
  }
}

public void testIsConsistentModelClass(){
  SessionNode node1=new SessionNode(Type1.class);
  SessionNode node2=new SessionNode(Type2.class);
  SessionNode node3=new SessionNode(Type3.class);
  SessionNode node4=new SessionNode(new Class[]{Type1.class,Type2.class});
  SessionNode node6=new SessionNode(new Class[]{Type1.class,Type2.class,Type3.class});
  SessionNode node7=new SessionNode(new Class[]{Type1.class,Type4.class});
  List parents=new ArrayList();
  parents.add(node1);
  parents.add(node2);
  parents.add(node3);
  parents.remove(node1);
  parents.remove(node2);
  parents.remove(node3);
  parents.add(node4);
  assertTrue(node1.isConsistentModelClass(Type1.class,parents,false));
  parents.add(node6);
  assertTrue(node1.isConsistentModelClass(Type1.class,parents,false));
  parents.remove(node6);
  parents.add(node7);
  assertTrue(!node1.isConsistentModelClass(Type1.class,parents,false));
}

public void findAndInit(Object someObj){
  if (someObj instanceof com.bbn.openmap.MapBean) {
    logger.fine("ProjectionStack found a MapBean.");
    setMapBean((MapBean)someObj);
  }
}

public void removeAllLayers(){
  _layers.removeAllElements();
  refreshLayers=true;
  super.repaint();
}

public int size(){
  return productions.size();
}

public static Future<BoxedUnit> zkAsyncCreateFullPathOptimistic(final ZooKeeperClient zkc,final String pathToCreate,final byte[] data,final List<ACL> acl,final CreateMode createMode){
  Optional<String> parentPathShouldNotCreate=Optional.absent();
  return zkAsyncCreateFullPathOptimistic(zkc,pathToCreate,parentPathShouldNotCreate,data,acl,createMode);
}

private void writeObject(ObjectOutputStream oos) throws IOException {
  oos.defaultWriteObject();
  writeStroke(oos,stroke,OMGraphicAdapter.BASIC_STROKE);
  writeTextureMask(oos,textureMask);
}

public boolean equals(Object obj){
  if (obj instanceof MRfQResponseLineQty) {
    MRfQResponseLineQty cmp=(MRfQResponseLineQty)obj;
    if (!cmp.isValidAmt() || !isValidAmt())     return false;
    BigDecimal cmpNet=cmp.getNetAmt();
    if (cmpNet == null)     return false;
    BigDecimal net=cmp.getNetAmt();
    if (net == null)     return false;
    return cmpNet.compareTo(net) == 0;
  }
  return false;
}

public Criteria or(){
  Criteria criteria=createCriteriaInternal();
  oredCriteria.add(criteria);
  return criteria;
}

public ReflectiveAttribute(Class<O> objectType,Class<A> fieldType,String fieldName){
  super(objectType,fieldType,fieldName);
  Field field;
  try {
    field=getField(objectType,fieldName);
    if (!field.isAccessible()) {
      field.setAccessible(true);
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException("Invalid attribute definition: No such field '" + fieldName + "' in object '"+ objectType.getName()+ "'");
  }
  if (!fieldType.isAssignableFrom(field.getType())) {
    throw new IllegalStateException("Invalid attribute definition: The type of field '" + fieldName + "', type '"+ field.getType()+ "', in object '"+ objectType.getName()+ "', is not assignable to the type indicated: "+ fieldType.getName());
  }
  this.field=field;
}

private void processEvent(EventLogControl check,final String name,final DTNHost host1,final DTNHost host2,final Message message){
  String descString;
  if (!check.showEvent()) {
    return;
  }
  descString=name + " " + (host1 != null ? host1 : "")+ (host2 != null ? (HOST_DELIM + host2) : "")+ (message != null ? " " + message : "");
  if (regExp != null && !descString.matches(regExp)) {
    return;
  }
  if (check.pauseOnEvent()) {
    gui.setPaused(true);
    if (host1 != null) {
      gui.setFocus(host1);
    }
  }
  addEvent(name,host1,host2,message,check.pauseOnEvent());
}

public boolean removeMembershipListener(MembershipListener listener){
  return membershipListeners.remove(listener) != null;
}

public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){
  ContentValues values=new ContentValues(7);
  values.put(ADDRESS,address);
  if (date != null) {
    values.put(DATE,date);
  }
  values.put(READ,read ? Integer.valueOf(1) : Integer.valueOf(0));
  values.put(SUBJECT,subject);
  values.put(BODY,body);
  if (deliveryReport) {
    values.put(STATUS,STATUS_PENDING);
  }
  if (threadId != -1L) {
    values.put(THREAD_ID,threadId);
  }
  return resolver.insert(uri,values);
}

private void present(){
  glUseProgram(quadProgram);
  glBindBuffer(GL_ARRAY_BUFFER,vbo);
  glActiveTexture(GL_TEXTURE0);
  glBindTexture(GL_TEXTURE_2D,tex);
  glDrawArrays(GL_TRIANGLES,0,6);
  glActiveTexture(GL_TEXTURE0);
  glBindTexture(GL_TEXTURE_2D,0);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glUseProgram(0);
}

public static Calendar next(Calendar self){
  Calendar result=(Calendar)self.clone();
  result.add(Calendar.DAY_OF_YEAR,1);
  return result;
}

protected void angularObjectClientBind(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage) throws Exception {
  String noteId=fromMessage.getType("noteId");
  String varName=fromMessage.getType("name");
  Object varValue=fromMessage.get("value");
  String paragraphId=fromMessage.getType("paragraphId");
  Note note=notebook.getNote(noteId);
  if (paragraphId == null) {
    throw new IllegalArgumentException("target paragraph not specified for " + "angular value bind");
  }
  if (note != null) {
    final InterpreterGroup interpreterGroup=findInterpreterGroupForParagraph(note,paragraphId);
    final AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();
    if (registry instanceof RemoteAngularObjectRegistry) {
      RemoteAngularObjectRegistry remoteRegistry=(RemoteAngularObjectRegistry)registry;
      pushAngularObjectToRemoteRegistry(noteId,paragraphId,varName,varValue,remoteRegistry,interpreterGroup.getId(),conn);
    }
 else {
      pushAngularObjectToLocalRepo(noteId,paragraphId,varName,varValue,registry,interpreterGroup.getId(),conn);
    }
  }
}

public static <T>void removeAll(List<T> list,List<Integer> indexes){
  if (list == null || indexes == null) {
    return;
  }
  Collections.sort(indexes,Collections.reverseOrder());
  final int size=list.size();
  for (  Integer index : indexes) {
    if (index >= 0 && index < size) {
      list.remove((int)index);
    }
  }
}

public CProjectTree(final JFrame parent,final CDatabaseManager databaseManager){
  Preconditions.checkNotNull(databaseManager,"IE01840: Database manager object can't be null");
  m_treeModel=new CProjectTreeModel(this);
  setModel(m_treeModel);
  CProjectTreeDragHandlerInitializer.initialize(parent,this,databaseManager);
  addMouseListener(new InternalMouseListener());
  setScrollsOnExpand(false);
  setRootVisible(false);
  m_rootNode=new CRootNode(this,databaseManager);
  m_treeModel.setRoot(m_rootNode);
  setCellRenderer(new IconNodeRenderer());
  m_popup.add(CActionProxy.proxy(new CAddDatabaseAction(this)));
}

public boolean isObject(){
  return typeString.startsWith(OBJECT);
}

private float interpolate(){
  long currTime=System.currentTimeMillis();
  float elapsed=(currTime - startTime) / ZOOM_TIME;
  elapsed=Math.min(1f,elapsed);
  return interpolator.getInterpolation(elapsed);
}

private void autoRequestMods(){
  if (!c.autoRequestModsEnabled()) {
    return;
  }
  Set<String> joinedChannels=c.getJoinedChannels();
  for (  String channel : joinedChannels) {
    if (!modsAlreadyRequested.contains(channel)) {
      LOGGER.info("Auto-requesting mods for " + channel);
      modsAlreadyRequested.add(channel);
      requestModsSilent(channel);
      return;
    }
  }
}

public void buildDepreciation(){
  if (!isDepreciated()) {
    return;
  }
  StringBuffer sb=new StringBuffer();
  load(get_TrxName());
  MAssetAcct assetacct=getA_AssetAcct(null,get_TrxName());
  MDepreciation depreciation_C=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_ID());
  MDepreciation depreciation_F=MDepreciation.get(getCtx(),assetacct.getA_Depreciation_F_ID());
  int offset_C=0, offset_F=0;
  BigDecimal assetCost=getActualCost();
  BigDecimal accumDep_C=getA_Accumulated_Depr(false);
  BigDecimal accumDep_F=getA_Accumulated_Depr(true);
  int lifePeriods_C=getUseLifeMonths(false) + offset_C;
  int lifePeriods_F=getUseLifeMonths(true) + offset_F;
  int lifePeriods=(lifePeriods_C > lifePeriods_F ? lifePeriods_C : lifePeriods_F);
  BigDecimal exp_C=Env.ZERO;
  BigDecimal exp_F=Env.ZERO;
  if (CLogMgt.isLevelFine()) {
    sb.append("currentPeriod=" + getA_Current_Period() + ", AssetServiceDate="+ getAssetDepreciationDate()+ "\n");
    sb.append("offset: C|F=" + offset_C + "|"+ offset_F+ "\n");
    sb.append("life: C|F=" + lifePeriods_C + "|"+ lifePeriods_F+ " + offset ="+ lifePeriods+ "\n");
  }
  truncDepreciation();
  int A_Current_Period=getA_Current_Period();
  for (int currentPeriod=A_Current_Period, cnt=1; currentPeriod <= lifePeriods; currentPeriod++, cnt++) {
    exp_C=Env.ZERO;
    exp_F=Env.ZERO;
    String help="" + accumDep_C + "|"+ accumDep_F+ " + ";
    if (lifePeriods_C > currentPeriod || !depreciation_C.requireLastPeriodAdjustment()) {
      setFiscal(false);
      exp_C=depreciation_C.invoke(this,assetacct,currentPeriod,accumDep_C);
      accumDep_C=accumDep_C.add(exp_C);
    }
 else     if (lifePeriods_C == currentPeriod) {
      exp_C=assetCost.subtract(accumDep_C);
      accumDep_C=assetCost;
    }
    if (lifePeriods_F > currentPeriod || !depreciation_F.requireLastPeriodAdjustment()) {
      setFiscal(true);
      exp_F=depreciation_F.invoke(this,assetacct,currentPeriod,accumDep_F);
      accumDep_F=accumDep_F.add(exp_F);
    }
 else     if (lifePeriods_F == currentPeriod) {
      exp_F=assetCost.subtract(accumDep_F);
      accumDep_F=assetCost;
    }
    help+="" + exp_C + "|"+ exp_F+ " = "+ accumDep_C+ "|"+ accumDep_F;
    int months=0;
    months=months + (currentPeriod - A_Current_Period);
    Timestamp dateAcct=TimeUtil.getMonthLastDay(TimeUtil.addMonths(getDateAcct(),months));
    MDepreciationExp.createDepreciation(this,currentPeriod,dateAcct,exp_C,exp_F,accumDep_C,accumDep_F,help,get_TrxName());
    if (CLogMgt.isLevelFine()) {
      String info="" + cnt + ": period="+ currentPeriod+ "/"+ lifePeriods_C+ "|"+ lifePeriods_F+ ", exp="+ exp_C+ "|"+ exp_F+ ", accumDep="+ accumDep_C+ "|"+ accumDep_F+ ", DateAcct="+ dateAcct;
      log.fine("=> " + info + Env.NL+ Env.NL);
      sb.append(info + Env.NL);
    }
  }
  log.fine(sb.toString());
  m_buildDepreciation=false;
}

@Override public boolean contains(Object value){
  final Iterator<Comparable> iter=new StepIterator(this,1);
  if (value == null) {
    return false;
  }
  while (iter.hasNext()) {
    if (DefaultTypeTransformation.compareEqual(value,iter.next()))     return true;
  }
  return false;
}

public synchronized void renameFile(JDBCSequentialFile file,String newFileName) throws SQLException {
  try {
    connection.setAutoCommit(false);
    renameFile.setString(1,newFileName);
    renameFile.setInt(2,file.getId());
    renameFile.executeUpdate();
    connection.commit();
  }
 catch (  SQLException e) {
    connection.rollback();
    throw e;
  }
}

public boolean hasNext() throws IOException {
  dataInputStream.mark(1);
  int val=dataInputStream.read();
  dataInputStream.reset();
  return val != -1;
}

public static void handleErrorViolations(Formatter formatter,long numErrors){
  ExitCode exitCode=formatter.getExitStatus(numErrors);
  if (exitCode != ExitCode.SUCCESS) {
    System.exit(exitCode.ordinal());
  }
}

public void remove(final Sensor sensor){
  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);
  boolean rv=selection.remove(sensor);
  if (rv) {
    fireSelectionChanged(oldSelection,selection);
  }
}

protected void printWay(MapWay way,DefaultEntityViewInfo pInfo,boolean asArea){
  List<MapNode> nodes=getWayNodes(way);
  if (nodes != null) {
    boolean asOneway=false;
    NameInfo textInfo=null;
    if (scale >= pInfo.minNameScale * displayFactor) {
      asOneway=way.isOneway();
      if (way.getName() != null && pInfo.nameColor != null) {
        textInfo=new NameInfo(way.getName(),pInfo.nameColor,pInfo.printOrder);
      }
    }
    printLine(imageBdr,nodes,pInfo,asArea,asOneway,textInfo);
  }
}

@Override public String toString(){
  StringBuffer result=new StringBuffer();
  for (int i=0; i < data.length; i++) {
    result.append((i == 0 ? "" : ",") + data[i]);
  }
  return result.toString();
}

public Element fullPath(ManagedObjectReference obj) throws InvalidPropertyFaultMsg, RuntimeFaultFaultMsg, FinderException {
  List<ObjectContent> set=ancestrySet(obj);
  Map<MoRef,Element> childToParent=new HashMap<>();
  for (  ObjectContent cont : set) {
    MoRef key=new MoRef(cont.getObj());
    ManagedObjectReference parentRef=getParent(cont);
    Element parent;
    if (parentRef != null) {
      parent=Element.make(parentRef,getName(cont));
    }
 else {
      parent=Element.make(cont.getObj(),getName(cont));
    }
    childToParent.put(key,parent);
  }
  MoRef next=new MoRef(obj);
  List<String> path=new ArrayList<>();
  while (true) {
    Element parent=childToParent.get(next);
    path.add(parent.path);
    if (next.equals(new MoRef(parent.object))) {
      break;
    }
    next=new MoRef(parent.object);
  }
  Collections.reverse(path);
  StringBuilder sb=new StringBuilder();
  for (  String s : path) {
    sb.append('/');
    sb.append(s);
  }
  return Element.make(obj,sb.toString());
}

private boolean hasNextProxy(){
  return nextProxyIndex < proxies.size();
}

private boolean noObjectWasClickedOn(){
  boolean pickedNodeNull=(pickedNode == null);
  boolean cameraPicked=(pickedNode instanceof PCamera);
  return (pickedNodeNull || cameraPicked);
}

@Override public int hashCode(){
  throw new UnsupportedOperationException("hashCode() is not supported because sets are mutable");
}

public Builder measurementMappings(Map<String,String> measurementMappings){
  Map<String,Pattern> mappingsByPattern=new HashMap<String,Pattern>();
  for (  Map.Entry<String,String> entry : measurementMappings.entrySet()) {
    try {
      final Pattern pattern=Pattern.compile(entry.getValue());
      mappingsByPattern.put(entry.getKey(),pattern);
    }
 catch (    PatternSyntaxException e) {
      throw new RuntimeException("Could not compile regex: " + entry.getValue(),e);
    }
  }
  this.measurementMappings=mappingsByPattern;
  return this;
}

private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){
  String text1a=text1.substring(0,x);
  String text2a=text2.substring(0,y);
  String text1b=text1.substring(x);
  String text2b=text2.substring(y);
  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);
  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);
  diffs.addAll(diffsb);
  return diffs;
}

public static String validateCreditCardNumber(String creditCardNumber,String creditCardType){
  if (creditCardNumber == null || creditCardType == null)   return "CreditCardNumberError";
  String ccStartList="";
  String ccLengthList="";
  if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_MasterCard)) {
    ccStartList="51,52,53,54,55";
    ccLengthList="16";
  }
 else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Visa)) {
    ccStartList="4";
    ccLengthList="13,16";
  }
 else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Amex)) {
    ccStartList="34,37";
    ccLengthList="15";
  }
 else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Discover)) {
    ccStartList="6011";
    ccLengthList="16";
  }
 else   if (creditCardType.equals(X_C_Payment.CREDITCARDTYPE_Diners)) {
    ccStartList="300,301,302,303,304,305,36,38";
    ccLengthList="14";
  }
 else {
    ccStartList="2014,2149";
    ccLengthList="15";
    ccStartList+=",3088,3096,3112,3158,3337,3528";
    ccLengthList+=",16";
    ccStartList+=",2131,1800";
    ccLengthList+=",15";
  }
  String ccNumber=checkNumeric(creditCardNumber);
  int ccLength=ccNumber.length();
  boolean ccLengthOK=false;
  StringTokenizer st=new StringTokenizer(ccLengthList,",",false);
  while (st.hasMoreTokens() && !ccLengthOK) {
    int l=Integer.parseInt(st.nextToken());
    if (ccLength == l)     ccLengthOK=true;
  }
  if (!ccLengthOK) {
    s_log.fine("validateCreditCardNumber Length=" + ccLength + " <> "+ ccLengthList);
    return "CreditCardNumberError";
  }
  boolean ccIdentified=false;
  st=new StringTokenizer(ccStartList,",",false);
  while (st.hasMoreTokens() && !ccIdentified) {
    if (ccNumber.startsWith(st.nextToken()))     ccIdentified=true;
  }
  if (!ccIdentified)   s_log.fine("validateCreditCardNumber Type=" + creditCardType + " <> "+ ccStartList);
  String check=validateCreditCardNumber(ccNumber);
  if (check.length() != 0)   return check;
  if (!ccIdentified)   return "CreditCardNumberProblem?";
  return "";
}

public static void extract(File zipFile,File destDir) throws IOException {
  ZipFile zf=new ZipFile(zipFile);
  try {
    extract(zf,destDir);
  }
  finally {
    zf.close();
  }
}

public Config(String file){
  this(new File(CONFIG_DIR,file.contains(".") ? file : file.concat(".conf")));
}

public GotoLineDialog(JTextComponent text){
  super(ActionUtils.getFrameFor(text),false);
  initComponents();
  this.text=text;
  setLocationRelativeTo(text.getRootPane());
}

private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {
  RetryPolicy retryPolicy=request.getRetryPolicy();
  int oldTimeout=request.getTimeoutMs();
  try {
    retryPolicy.retry(exception);
  }
 catch (  VolleyError e) {
    request.addMarker(String.format("%s-giveup [timeout=%s]",logPrefix,oldTimeout));
    throw e;
  }
  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));
}

protected void computeAxisValues(float min,float max){
  float yMin=min;
  float yMax=max;
  int labelCount=mYAxis.getLabelCount();
  double range=Math.abs(yMax - yMin);
  if (labelCount == 0 || range <= 0) {
    mYAxis.mEntries=new float[]{};
    mYAxis.mEntryCount=0;
    return;
  }
  double rawInterval=range / labelCount;
  double interval=Utils.roundToNextSignificant(rawInterval);
  double intervalMagnitude=Math.pow(10,(int)Math.log10(interval));
  int intervalSigDigit=(int)(interval / intervalMagnitude);
  if (intervalSigDigit > 5) {
    interval=Math.floor(10 * intervalMagnitude);
  }
  if (mYAxis.isShowOnlyMinMaxEnabled()) {
    mYAxis.mEntryCount=2;
    mYAxis.mEntries=new float[2];
    mYAxis.mEntries[0]=yMin;
    mYAxis.mEntries[1]=yMax;
  }
 else {
    double first=Math.ceil(yMin / interval) * interval;
    double last=Utils.nextUp(Math.floor(yMax / interval) * interval);
    double f;
    int i;
    int n=0;
    for (f=first; f <= last; f+=interval) {
      ++n;
    }
    mYAxis.mEntryCount=n;
    if (mYAxis.mEntries.length < n) {
      mYAxis.mEntries=new float[n];
    }
    for (f=first, i=0; i < n; f+=interval, ++i) {
      mYAxis.mEntries[i]=(float)f;
    }
  }
  if (interval < 1) {
    mYAxis.mDecimals=(int)Math.ceil(-Math.log10(interval));
  }
 else {
    mYAxis.mDecimals=0;
  }
}

private void sendRequestTeardown() throws IOException {
  String request="TEARDOWN rtsp://" + mParameters.host + ":"+ mParameters.port+ mParameters.path+ " RTSP/1.0\r\n"+ addHeaders();
  Log.i(TAG,request.substring(0,request.indexOf("\r\n")));
  mOutputStream.write(request.getBytes("UTF-8"));
  mOutputStream.flush();
}

public boolean parseMoreData(final EncodedImage encodedImage){
  if (mParserState == NOT_A_JPEG) {
    return false;
  }
  final int dataBufferSize=encodedImage.getSize();
  if (dataBufferSize <= mBytesParsed) {
    return false;
  }
  final InputStream bufferedDataStream=new PooledByteArrayBufferedInputStream(encodedImage.getInputStream(),mByteArrayPool.get(BUFFER_SIZE),mByteArrayPool);
  try {
    StreamUtil.skip(bufferedDataStream,mBytesParsed);
    return doParseMoreData(bufferedDataStream);
  }
 catch (  IOException ioe) {
    Throwables.propagate(ioe);
    return false;
  }
 finally {
    Closeables.closeQuietly(bufferedDataStream);
  }
}

public void testSimpleEar() throws Exception {
  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simpleweb");
  final String expected="Sample page for testing";
  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);
}

public int length(){
  return this.filledLength;
}

@Override public boolean equals(Object o){
  if (o instanceof Prefix) {
    return value.equals(((Prefix)o).value);
  }
  return false;
}

private void notifyWifiState(){
synchronized (mWifiMonitor) {
    Log.v(LOG_TAG,"notify wifi state changed.");
    mWifiMonitor.notify();
  }
}

private boolean arrayKeyValueExists(String key,String value){
  if (visitedPost.containsKey(key)) {
    for (    String s : visitedPost.get(key)) {
      if (s.equals(value)) {
        return true;
      }
    }
  }
  return false;
}

public void removeDiagramChangeListener(mxDiagramChangeListener listener){
  if (diagramChangeListeners != null) {
    diagramChangeListeners.remove(listener);
  }
}

public static ConnectivityGrid ConnectivityGridFactory(int key,double maxRange){
  if (gridobjects.containsKey((Integer)key)) {
    return (ConnectivityGrid)gridobjects.get((Integer)key);
  }
 else {
    ConnectivityGrid newgrid=new ConnectivityGrid((int)Math.ceil(maxRange * cellSizeMultiplier));
    gridobjects.put((Integer)key,newgrid);
    return newgrid;
  }
}

public static String stripLeadingDollar(String str){
  return (str.charAt(0) == '$') ? str.substring(1) : str;
}

@AfterClass public static void clearHostContext() throws Exception {
  System.clearProperty("hostContext");
}

public PNormNormalization(double p){
  if (p <= 0 || Double.isNaN(p))   throw new IllegalArgumentException("p must be greater than zero, not " + p);
  this.p=p;
}

public void addSeparator(){
  if (log.isLoggable(PlatformLogger.Level.FINER)) {
    log.finer("addSeparator is not implemented");
  }
}

@Override public void start(Stage stage) throws Exception {
  CategoryDataset dataset=createDataset();
  JFreeChart chart=createChart(dataset);
  ChartViewer viewer=new ChartViewer(chart);
  viewer.addChartMouseListener(this);
  stage.setScene(new Scene(viewer));
  stage.setTitle("JFreeChart: BarChartFXDemo1.java");
  stage.setWidth(700);
  stage.setHeight(390);
  stage.show();
}

public synchronized void returnBuf(byte[] buf){
  if (buf == null || buf.length > mSizeLimit) {
    return;
  }
  mBuffersByLastUse.add(buf);
  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);
  if (pos < 0) {
    pos=-pos - 1;
  }
  mBuffersBySize.add(pos,buf);
  mCurrentSize+=buf.length;
  trim();
}

@Override public void acceptDataPoint(ChartEvent e){
  if (e.getReset()) {
    m_xCount=0;
    m_max=1;
    m_min=0;
  }
  if (m_outputFrame != null) {
    boolean refresh=false;
    if (e.getLegendText() != null & e.getLegendText() != m_legendText) {
      m_legendText=e.getLegendText();
      refresh=true;
    }
    if (e.getMin() != m_min || e.getMax() != m_max) {
      m_oldMax=m_max;
      m_oldMin=m_min;
      m_max=e.getMax();
      m_min=e.getMin();
      refresh=true;
      m_yScaleUpdate=true;
    }
    if (refresh) {
      m_legendPanel.repaint();
      m_scalePanel.repaint();
    }
    acceptDataPoint(e.getDataPoint());
  }
  m_xCount++;
}

public void sub(NamedRangeSet other){
  List<NamedRange> newRanges=new ArrayList<NamedRange>();
  OUTER_LOOP:   for (  NamedRange range : ranges) {
    NamedRange thisRange=new NamedRange(range.start,range.end,range.name);
    for (    NamedRange otherRange : other.ranges) {
      if (otherRange.start <= thisRange.start && otherRange.end >= thisRange.end) {
        continue OUTER_LOOP;
      }
      if (otherRange.end < thisRange.start || otherRange.start > thisRange.end) {
      }
 else       if (otherRange.start <= thisRange.start) {
        thisRange.start=otherRange.end + 1;
      }
 else       if (otherRange.end >= thisRange.end) {
        thisRange.end=otherRange.start - 1;
      }
 else {
        newRanges.add(new NamedRange(thisRange.start,otherRange.start - 1,thisRange.name));
        thisRange.start=otherRange.end + 1;
      }
    }
    newRanges.add(thisRange);
  }
  ranges=newRanges;
}

private static Node locateAttrParent(Element elem,Node attr){
  Node parent=null;
  Attr check=elem.getAttributeNode(attr.getNodeName());
  if (check == attr)   parent=elem;
  if (null == parent) {
    for (Node node=elem.getFirstChild(); null != node; node=node.getNextSibling()) {
      if (Node.ELEMENT_NODE == node.getNodeType()) {
        parent=locateAttrParent((Element)node,attr);
        if (null != parent)         break;
      }
    }
  }
  return parent;
}

public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,int bufSize){
  Tailer tailer=new Tailer(file,listener,delayMillis,end,bufSize);
  Thread thread=new Thread(tailer);
  thread.setDaemon(true);
  thread.start();
  return tailer;
}

public static boolean isMacOs(){
  return osName.indexOf("Mac OS") > -1;
}

public int size(){
  return values.size();
}

public DViewAsn1Dump(JDialog parent,X509CRL crl) throws Asn1Exception, IOException {
  super(res.getString("DViewAsn1Dump.Crl.Title"));
  this.crl=crl;
  initComponents();
}

public static String rightTrim(final String value){
  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);
  return value.replaceAll("\\s+$","");
}

public synchronized void putMessage(Object obj){
  fifo.addElement(obj);
  numMessage++;
  notifyAll();
}

public void dispose(){
  if (isDisposed()) {
    return;
  }
  setDisposed(true);
  if (!menu) {
    super.dispose();
  }
}

public double signed_distance(PlaPointFloat p_point){
  double dx=point_b.v_x - point_a.v_x;
  double dy=point_b.v_y - point_a.v_y;
  double det=dy * (p_point.v_x - point_a.v_x) - dx * (p_point.v_y - point_a.v_y);
  double length=Math.sqrt(dx * dx + dy * dy);
  return det / length;
}

public static void expandReal(String numberString,WordRelation wordRelation,Item tokenItem){
  int stringLength=numberString.length();
  int position;
  if (numberString.charAt(0) == '-') {
    wordRelation.addWord(tokenItem,"minus");
    expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem);
  }
 else   if (numberString.charAt(0) == '+') {
    wordRelation.addWord(tokenItem,"plus");
    expandReal(numberString.substring(1,stringLength),wordRelation,tokenItem);
  }
 else   if ((position=numberString.indexOf('e')) != -1 || (position=numberString.indexOf('E')) != -1) {
    expandReal(numberString.substring(0,position),wordRelation,tokenItem);
    wordRelation.addWord(tokenItem,"e");
    expandReal(numberString.substring(position + 1),wordRelation,tokenItem);
  }
 else   if ((position=numberString.indexOf('.')) != -1) {
    String beforeDot=numberString.substring(0,position);
    if (beforeDot.length() > 0) {
      expandReal(beforeDot,wordRelation,tokenItem);
    }
    wordRelation.addWord(tokenItem,"point");
    String afterDot=numberString.substring(position + 1);
    if (afterDot.length() > 0) {
      expandDigits(afterDot,wordRelation,tokenItem);
    }
  }
 else {
    expandNumber(numberString,wordRelation,tokenItem);
  }
}

public static double[] ones(int L){
  double m[]=new double[L];
  Arrays.fill(m,1.);
  return m;
}

private PermissionRequest submit(){
  int showRationale=0;
  ArrayList<String> requests=new ArrayList<>();
  for (  final String permission : mPermissions) {
    if (mActivity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
      requests.add(permission);
      if (ActivityCompat.shouldShowRequestPermissionRationale(mActivity,permission)) {
        showRationale++;
      }
    }
  }
  mRequestCode=mRequestId.addAndGet(1);
  if (requests.isEmpty()) {
    if (mCallback != null) {
      mCallback.onPermissionsGranted();
    }
  }
 else {
    if (showRationale == 0) {
      ActivityCompat.requestPermissions(mActivity,mPermissions,mRequestCode);
    }
 else {
      showRationale();
    }
  }
  return this;
}

public void error(XPathContext xctxt,String msg,Object[] args) throws javax.xml.transform.TransformerException {
  java.lang.String fmsg=XSLMessages.createXPATHMessage(msg,args);
  if (null != xctxt) {
    ErrorListener eh=xctxt.getErrorListener();
    TransformerException te=new TransformerException(fmsg,this);
    eh.fatalError(te);
  }
}

public void testSettingANullDeployableProperty(){
  Deployable deployableElement=new Deployable();
  WAR war=new WAR("/some/file.war");
  Map<String,String> properties=new HashMap<String,String>();
  properties.put("context",null);
  deployableElement.setProperties(properties);
  deployableElement.setPropertiesOnDeployable(war,createDefaultProject("war",null));
  assertEquals("",war.getContext());
}

private NaviLogger(){
}

public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,SetRelationDefinition<?,?> r) throws ArgumentException {
  return new DeleteSubCommandHandler(parser,p,r,p.child(r));
}

protected void removeCycles(){
  int visited[]=new int[m_nodes.size()];
  for (int i=0; i < graphMatrix.length; i++) {
    if (visited[i] == 0) {
      removeCycles2(i,visited);
      visited[i]=1;
    }
  }
}

public String toString(ObjectMatrix3D matrix){
  StringBuffer buf=new StringBuffer();
  boolean oldPrintShape=this.printShape;
  this.printShape=false;
  for (int slice=0; slice < matrix.slices(); slice++) {
    if (slice != 0)     buf.append(sliceSeparator);
    buf.append(toString(matrix.viewSlice(slice)));
  }
  this.printShape=oldPrintShape;
  if (printShape)   buf.insert(0,shape(matrix) + "\n");
  return buf.toString();
}

int findAncestor(XPathContext xctxt,XPath fromMatchPattern,XPath countMatchPattern,int context,ElemNumber namespaceContext) throws javax.xml.transform.TransformerException {
  DTM dtm=xctxt.getDTM(context);
  while (DTM.NULL != context) {
    if (null != fromMatchPattern) {
      if (fromMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {
        break;
      }
    }
    if (null != countMatchPattern) {
      if (countMatchPattern.getMatchScore(xctxt,context) != XPath.MATCH_SCORE_NONE) {
        break;
      }
    }
    context=dtm.getParent(context);
  }
  return context;
}

public synchronized void kill(){
  running=false;
  closed=true;
  try {
    STDIN.close();
  }
 catch (  IOException e) {
  }
  try {
    process.destroy();
  }
 catch (  Exception e) {
  }
}

public final ByteBuffer encode(CharBuffer in) throws CharacterCodingException {
  int length=(int)(in.remaining() * averageBytesPerChar);
  ByteBuffer out=ByteBuffer.allocate(length);
  reset();
  while (state != FLUSHED) {
    CoderResult result=encode(in,out,true);
    if (result == CoderResult.OVERFLOW) {
      out=allocateMore(out);
      continue;
    }
 else {
      checkCoderResult(result);
    }
    result=flush(out);
    if (result == CoderResult.OVERFLOW) {
      out=allocateMore(out);
    }
 else {
      checkCoderResult(result);
    }
  }
  out.flip();
  return out;
}

public static Metrics create(Map<String,String> dimensionMap){
  Map<String,String> map=Maps.newTreeMap();
  map.putAll(dimensionMap);
  return new Metrics(Collections.unmodifiableMap(map));
}

protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
  Object annotation=readLocation();
  String className=classDesc.getName();
  ClassLoader defaultLoader=skipDefaultResolveClass ? null : latestUserDefinedLoader();
  String codebase=null;
  if (!useCodebaseOnly && annotation instanceof String) {
    codebase=(String)annotation;
  }
  try {
    return RMIClassLoader.loadClass(codebase,className,defaultLoader);
  }
 catch (  AccessControlException e) {
    return checkSunClass(className,e);
  }
catch (  ClassNotFoundException e) {
    try {
      if (Character.isLowerCase(className.charAt(0)) && className.indexOf('.') == -1) {
        return super.resolveClass(classDesc);
      }
    }
 catch (    ClassNotFoundException e2) {
    }
    throw e;
  }
}

public IOUtils(){
  super();
}

public boolean contains(final CreatureRespawnPoint point){
  if (point == null) {
    return false;
  }
  final IRPZone entityZone=point.getZone();
  return zone.equals(entityZone) && shape.contains(point.getX(),point.getY());
}

public void add(int i,byte[] buffer,int offset,int length){
  if (_length + length > _capacity)   ensureCapacity(_length + length);
  System.arraycopy(_buffer,i,_buffer,i + length,_length - i);
  System.arraycopy(buffer,offset,_buffer,i,length);
  _length+=length;
}

public boolean isUseAntiAlias(){
  return useAntiAlias;
}

private void loadLevelFile(String tableName,String columnName,String cubeName,String schemaName){
  String baseLocation=CarbonUtil.getCarbonStorePath(schemaName,cubeName);
  baseLocation=baseLocation + File.separator + schemaName+ File.separator+ cubeName;
  if (loadFolderList.size() == 0) {
    checkAndUpdateFolderList(baseLocation);
  }
  try {
    File[] filesArray=null;
    for (    File loadFoler : loadFolderList) {
      filesArray=getFilesArray(loadFoler,tableName + '_' + columnName);
      if (null != filesArray) {
        for (int i=0; i < filesArray.length; i++) {
          readLevelFileAndUpdateCache(filesArray[i],tableName + '_' + columnName);
        }
      }
    }
  }
 catch (  IOException e) {
    LOGGER.error("Problem while populating the cache");
  }
}

protected void doValidateZeroLongFile(String path,String filename,long size,boolean checkContents){
  File inFile=new File(path,filename);
  DataInputStream inStream=null;
  Log.i(LOG_TAG,"Validating file " + filename + " at "+ path);
  try {
    inStream=new DataInputStream(new FileInputStream(inFile));
    if (checkContents) {
      for (long i=0; i < size; ++i) {
        if (inStream.readLong() != 0) {
          fail("Unexpected value read in OBB file" + filename);
        }
      }
    }
    if (inStream != null) {
      inStream.close();
    }
    Log.i(LOG_TAG,"File " + filename + " successfully verified for "+ size+ " zeros");
  }
 catch (  IOException e) {
    fail("IOError with file " + inFile + ":"+ e.toString());
  }
}

protected void write(DataOutputStream stream) throws Exception {
  Iterator<NBT_Tag> iter=elements.iterator();
  while (iter.hasNext()) {
    NBT_Tag ret=iter.next();
    ret.save(stream);
  }
  TAG_End end=new TAG_End("");
  end.save(stream);
}

public String applyMask(String mask,String value){
  return (String)getMaskOrGetCursorIndex(mask,value,0,true);
}

private void computeDuration(){
  duration=System.currentTimeMillis() - start;
  total_duration+=duration;
}

@SuppressWarnings({"unchecked"}) @Override public byte[] serialize(List list){
  if (list == null)   return null;
  final int size=list.size();
  final int[] valueIDs=new int[size];
  final byte[][] valueBytes=new byte[size][];
  int totalSize=4 + size * 8;
  int i=0;
  Iterator iter=list.iterator();
  while (iter.hasNext()) {
    final Object value=iter.next();
    Class<?> valueClass=value.getClass();
    int valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);
    if (valueTypeID == -1) {
      if (value instanceof List) {
        valueClass=List.class;
        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);
      }
 else       if (value instanceof Map) {
        valueClass=Map.class;
        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);
      }
 else {
        throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());
      }
    }
    valueIDs[i]=valueTypeID;
    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);
    if (valueSerDer == null) {
      throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());
    }
    valueBytes[i]=valueSerDer.serialize(value);
    totalSize+=valueBytes[i].length;
    ++i;
  }
  final byte[] result=new byte[totalSize];
  int offset=0;
  ByteUtil.intToBytes(size,result,offset);
  offset+=4;
  for (i=0; i < size; ++i) {
    ByteUtil.intToBytes(valueIDs[i],result,offset);
    offset+=4;
    ByteUtil.intToBytes(valueBytes[i].length,result,offset);
    offset+=4;
    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);
    offset+=valueBytes[i].length;
  }
  return result;
}

public int handleNITFHeader(BinaryFile binFile){
  try {
    byte[] nitfArray=binFile.readBytes(4,false);
    String nitf=new String(nitfArray);
    binFile.seek(RPF_DATE_LOCATION);
    nitfArray=binFile.readBytes(2,false);
    nitf=new String(nitfArray);
    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return 0;
    binFile.seek(RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH);
    nitfArray=binFile.readBytes(2,false);
    nitf=new String(nitfArray);
    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return TOC_NITF_HEADER_LENGTH;
    binFile.seek(RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH);
    nitfArray=binFile.readBytes(2,false);
    nitf=new String(nitfArray);
    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_SHORT_NITF_HEADER_LENGTH;
    binFile.seek(RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH);
    nitfArray=binFile.readBytes(2,false);
    nitf=new String(nitfArray);
    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_LONG_NITF_HEADER_LENGTH;
  }
 catch (  IOException e) {
    Debug.error("RpfHeader: File IO Error while handling NITF header:\n" + e);
    return -1;
  }
catch (  FormatException f) {
    Debug.error("RpfHeader: File IO Format error while reading header information:\n" + f);
    return -1;
  }
  return -1;
}

public BufferedImage takeScreenshot(){
  Debug.setDebugLevel(3);
  File scrFile=driver.getScreenshotAs(OutputType.FILE);
  BufferedImage bufferedImage=null;
  try {
    bufferedImage=ImageIO.read(scrFile);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return bufferedImage;
}

